Imports System.IO
Public Class Sizing_Statement
    Implements Interface_MDIActions

    Const NOSAVE = -1
    Const PDSaveFull = 1

    Public vEntry_Statemant_No As Integer = 0
    Private Con As New SqlClient.SqlConnection(Common_Procedures.Connection_String)
    Private FrmLdSTS As Boolean = False
    Private NoCaclSTS As Boolean = False
    Private New_Entry As Boolean = False
    Private Insert_Entry As Boolean = False
    Private Filter_Status As Boolean = False
    Private Pk_Condition As String = ""
    Private PkCondition_Entry As String = ""
    Private PkCondition_TIN As String = "SZSPC-"
    Private PkCondition_GST As String = "GSZSP-"
    Private PkCondition_MACHINE3 As String = "SZSP3-"
    Private PkCondition_MACHINE4 As String = "SZSP4-"
    Private Pk_Condition_Tex As String = "SSTMT-"

    Private vEnt_VAT_GST_Type As String = ""



    Private Prec_ActCtrl As New Control
    Private vCbo_ItmNm As String
    Private vcbo_KeyDwnVal As Double
    Private Prev_kyData As Keys
    Private Ctrl_kyData As Boolean
    Private TrnTo_DbName As String = ""

    Private WithEvents dgtxt_Details As New DataGridViewTextBoxEditingControl
    Private WithEvents ppd As New PrintPreviewDialog

    Private SaveAll_STS As Boolean = False
    Private LastNo As String = ""

    Private prn_HdDt As New DataTable
    Private prn_DetDt As New DataTable
    Private prn_AddDt As New DataTable
    Private Mill_Bags As String = ""
    Private prn_PageNo As Integer
    Private prn_DetIndx As Integer
    Private prn_DetSNo As Integer
    Private Prn_YrnStkSumm_2ndPage_STS As Boolean = False
    Private Prn_YrnStkSumm_StartIndx As Integer = 0
    Private Prn_SizingDetails_2ndPage_STS As Boolean = False
    Private Prn_SizingDetails_StartIndx As Integer = 0
    Private Prn_YrnTknDet_2ndPage_STS As Boolean = False
    Private Prn_YrnTknDet_StartIndx As Integer = 0
    Private Prn_SizInvoice_2ndPage_STS As Boolean = False
    Private Prn_SizInvoice_StartIndx As Integer = 0

    Private prn_Yrn_OpWt As Double, prn_Yrn_RcptWt As Double, prn_Yrn_DelvWt As Double
    Private prn_Yrn_ConsWt As Double, prn_Yrn_ExShWt As Double
    Private prn_Yrn_TknWt As Double, prn_Yrn_BayCnWt As Double
    Private prn_Yrn_RwExShWt As Double, prn_Yrn_RwExShStNo As String
    Private prn_Yrn_TranfrWt As Double, prn_Yrn_TranfrNo As String
    Private prn_Yrn_ExcSht_Wt As Double, prn_Yrn_ExcSht_No As String
    Private prn_Yrn_OpStNo As String, prn_Yrn_RcptNo As String, prn_Yrn_DcNo As String
    Private prn_Yrn_MillRcptWt As Double, prn_Yrn_RWRcptWt As Double

    Private prn_EmpBm_Op As Single, prn_EmpBm_Rcpt As Single, prn_EmpBm_Delv As Single, prn_EmpBm_Cons As Single
    Private prn_EmpBm_OpStNo As String, prn_EmpBm_RcptNo As String, prn_EmpBm_DcNo As String

    Private prn_EmpBg_Op As Double, prn_EmpBg_Rcpt As Double, prn_EmpBg_Delv As Double
    Private prn_EmpBg_OpStNo As String, prn_EmpBg_RcptNo As String, prn_EmpBg_DcNo As String

    Private prn_Amt_Op As Double, prn_Amt_Rcpt As Double, prn_Amt_CurSet As Double, prn_Disc_Amt_CurSet As Double
    Private prn_Amt_OpStNo As String, prn_Amt_RcptNo As String, prn_Invoice_no As String

    Private prn_SizSlNo As Integer
    Private Prn_TtSizBms As Double
    Private Prn_TtSizGrsWgt As Double, Prn_TtSizTrWgt As Double, Prn_TtSizNetWgt As Double
    Private Prn_TtSizPcs As Double, Prn_TtSizMtrs As Double

    Private Prn_TtYSBgs As Double, Prn_TtYSCns As Double, Prn_TtYSWgt As Double
    Private Prn_TtEmpBms As Double


    Private WithEvents dgtxt_SizingDetails_Set1 As New DataGridViewTextBoxEditingControl
    Private WithEvents dgtxt_SizingDetails_Set2 As New DataGridViewTextBoxEditingControl
    Private WithEvents dgtxt_SizingDetails_Set3 As New DataGridViewTextBoxEditingControl

    Private WithEvents dgtxt_WarpingDetails_Set1 As New DataGridViewTextBoxEditingControl
    Private WithEvents dgtxt_WarpingDetails_Set2 As New DataGridViewTextBoxEditingControl
    Private WithEvents dgtxt_WarpingDetails_Set3 As New DataGridViewTextBoxEditingControl

    Private WithEvents dgtxt_BabyConeDetails As New DataGridViewTextBoxEditingControl
    Private WithEvents dgtxt_YarnTakenDetails As New DataGridViewTextBoxEditingControl
    Private WithEvents dgtxt_ChemicalDetails As New DataGridViewTextBoxEditingControl

    Private Siz_EmpRws_Ad_STS As Boolean

    Private Print_PDF_Status As Boolean = False

    Private StmtPrintFrmt As String = ""
    Private StmtPrint_InvDetails_Status As Boolean = False

    Private prn_Status As Integer
    Private prn_Pgno, SlNo As Integer
    Private TtSizBms As Single
    Private TtSizGrsWgt As Single, TtSizTrWgt As Single, TtSizNetWgt As Single
    Private TtSizPcs As Single, TtSizMtrs As Single
    Private dgv_SizDet_CelVal As String = ""

    Private prn_InpOpts As String = ""
    Private prn_OriDupTri As String = ""
    Private prn_Count As Integer
    Private vPrntOnly_PageNo As Integer = 0
    Private Shared random1 As New Random()
    Private Shared random2 As New Random()

    Public Sub New()
        FrmLdSTS = True
        ' This call is required by the designer.
        InitializeComponent()
        ' Add any initialization after the InitializeComponent() call.
    End Sub

    Private Sub clear()

        New_Entry = False
        Insert_Entry = False
        Print_PDF_Status = False
        NoCaclSTS = False

        pnl_Back.Enabled = True
        pnl_Print.Visible = False
        pnl_Filter.Visible = False
        'pnl_Rate_Details.Visible = False
        pnl_Selection.Visible = False
        'pnl_Warping_Header.Visible = False
        lbl_SetNo.ForeColor = Color.Black

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1102" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1163" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1144" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1288" Then
            cbo_Type.Text = "WARPING"
        Else
            cbo_Type.Text = "DIRECT"
        End If

        lbl_SetNo.Text = ""
        lbl_SetNo.Tag = ""
        Lbl_InvoiceNo.Text = ""
        Lbl_InvoiceAmt.Text = ""
        txt_WgtEmYBag.Text = ""
        txt_WgtEmYCone.Text = ""

        'Rate details
        txt_warp_Rate.Text = ""
        txt_warp_weight.Text = ""
        txt_warp_Amount.Text = ""
        txt_Rewinding_Rate.Text = ""
        txt_Rewinding_Weight.Text = ""
        Txt_Rewinding_Amount.Text = ""
        Txt_No_Of_Beams.Text = ""
        Txt_Beams_Rate.Text = ""
        Txt_Beams_Amount.Text = ""
        Txt_Welding_Rate.Text = ""
        Txt_Welding_Beams.Text = ""
        Txt_Welding_Amount.Text = ""
        txt_Other_Charges.Text = ""
        '------------------
        txt_Remarks.Text = ""
        txt_SortNo.Text = ""

        txt_warp_dets_tot_beam.Text = ""

        txt_warp_dets_tot_consWT.Text = ""
        txt_FromRange.Text = ""

        lbl_Elongation_Perc.Text = ""
        lbl_Elongation_Mtr.Text = ""

        cbo_LoomType.Text = ""
        lbl_PickUp_Perc.Text = ""
        txt_PickUpPerc_Party.Text = ""
        Lbl_InvRate.Text = ""
        lbl_Accessible_Value.Text = ""
        cbo_Warping_Machineno.Text = ""
        cbo_SizingMachineNo.Text = ""
        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1155" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1288" Then '---- KKP SIZING (NAMMAKAL)
            cbo_SizingMachineNo.Enabled = False
            If Trim(UCase(Pk_Condition)) = Trim(UCase(PkCondition_GST)) Then
                cbo_SizingMachineNo.Text = Common_Procedures.SizingMachineNo_IdNoToName(Con, 101)
            ElseIf Trim(UCase(Pk_Condition)) = Trim(UCase(PkCondition_TIN)) Then
                cbo_SizingMachineNo.Text = Common_Procedures.SizingMachineNo_IdNoToName(Con, 102)
            ElseIf Trim(UCase(Pk_Condition)) = Trim(UCase(PkCondition_MACHINE3)) Then
                cbo_SizingMachineNo.Text = Common_Procedures.SizingMachineNo_IdNoToName(Con, 103)
            ElseIf Trim(UCase(Pk_Condition)) = Trim(UCase(PkCondition_MACHINE4)) Then
                cbo_SizingMachineNo.Text = Common_Procedures.SizingMachineNo_IdNoToName(Con, 104)
            End If
        End If

        If Common_Procedures.settings.CustomerCode = "1282" Then
            cbo_SizingMachineNo.Enabled = False
        End If

        lbl_Total_Warping_Beams.Text = ""
        lbl_Total_Warping_NetWeight.Text = ""
        lbl_Total_Warping_TareWeight.Text = ""
        lbl_Total_Warping_GrossWeight.Text = ""
        lbl_Total_Warping_Ends.Text = ""
        dgv_WarpingDetails_Set1.Rows.Clear()
        dgv_WarpingDetails_Set1.Rows.Add()
        dgv_WarpingDetails_Total_Set1.Rows.Clear()
        dgv_WarpingDetails_Total_Set1.Rows.Add()

        dgv_WarpingDetails_Set2.Rows.Clear()
        dgv_WarpingDetails_Set2.Rows.Add()
        dgv_WarpingDetails_Total_Set2.Rows.Clear()
        dgv_WarpingDetails_Total_Set2.Rows.Add()

        dgv_WarpingDetails_Set3.Rows.Clear()
        dgv_WarpingDetails_Set3.Rows.Add()
        dgv_WarpingDetails_Total_Set3.Rows.Clear()
        dgv_WarpingDetails_Total_Set3.Rows.Add()

        lbl_WarpCode.Text = ""
        lbl_WarpDate.Text = ""
        lbl_WarpNo.Text = ""

        lbl_Total_Sizing_Beams.Text = ""
        lbl_Total_Sizing_Meters.Text = ""
        lbl_Total_Sizing_Pcs.Text = ""
        lbl_Total_Sizing_NetWeight.Text = ""
        lbl_Total_Sizing_TareWeight.Text = ""
        lbl_Total_Sizing_GrossWeight.Text = ""
        lbl_Tot_Sizing_Beams.Text = ""
        lbl_Tot_Sizing_Meters.Text = ""
        dgv_SizingDetails_Set1.Rows.Clear()
        dgv_SizingDetails_Set1.Rows.Add()

        dgv_SizingDetails_Total_Set1.Rows.Clear()
        dgv_SizingDetails_Total_Set1.Rows.Add()

        dgv_SizingDetails_Set2.Rows.Clear()
        dgv_SizingDetails_Set2.Rows.Add()

        dgv_SizingDetails_Total_Set2.Rows.Clear()
        dgv_SizingDetails_Total_Set2.Rows.Add()
        dgv_SizingDetails_Set3.Rows.Clear()
        dgv_SizingDetails_Set3.Rows.Add()
        dgv_SizingDetails_Total_Set3.Rows.Clear()
        dgv_SizingDetails_Total_Set3.Rows.Add()
        dgv_YarnTakenDetails.Rows.Clear()
        dgv_YarnTakenDetails_Total.Rows.Clear()
        dgv_YarnTakenDetails_Total.Rows.Add()
        lbl_BabyCone_NetWeight.Text = ""
        dgv_BabyConeDetails.Rows.Clear()
        dgv_BabyConeDetails_Total.Rows.Clear()
        dgv_BabyConeDetails_Total.Rows.Add()
        cbo_Rw_MillName.Text = ""
        chk_RewindingStatus.Checked = False
        chk_No_Stock_Posting.Checked = False

        cbo_DeliveryTo.Text = ""

        txt_RewindingCones.Text = ""
        txt_RwExShrtWt.Text = ""
        txt_RwExcSht.Text = ""
        txt_BabyCone_TareWeight.Text = ""
        dgv_ChemicalDetails.Rows.Clear()
        dgv_ChemicalDetails_Total.Rows.Clear()
        dgv_ChemicalDetails_Total.Rows.Add()
        dgv_YarnStockDetails.Rows.Clear()
        dgv_YarnStockDetails_Total.Rows.Clear()
        dgv_YarnStockDetails_Total.Rows.Add()
        dgv_YarnStockSummary.Rows.Clear()
        dgv_YarnStockSummary_Total.Rows.Clear()
        dgv_YarnStockSummary_Total.Rows.Add()
        dgv_EmptyBeamStockDetails.Rows.Clear()
        dgv_EmptyBeamStockDetails_Total.Rows.Clear()
        dgv_EmptyBeamStockDetails_Total.Rows.Add()
        dgv_EmptyBagStockDetails.Rows.Clear()
        dgv_EmptyBagStockDetails_Total.Rows.Clear()
        dgv_EmptyBagStockDetails_Total.Rows.Add()
        dgv_EmptyConeStockDetails.Rows.Clear()
        dgv_EmptyConeStockDetails_Total.Rows.Clear()
        dgv_EmptyConeStockDetails_Total.Rows.Add()
        dgv_AmountDetails.Rows.Clear()
        dgv_AmountDetails_Total.Rows.Clear()
        dgv_AmountDetails_Total.Rows.Add()

        lbl_ExcessShort.Text = "0"
        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1220" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1263" Then '---- Sri Meenakshi Sizing (Somanur)
            cbo_Meters_Yards.Text = "YARDS"
        Else
            cbo_Meters_Yards.Text = "METERS"
        End If
        txt_WarpMeters.Text = "0"
        lbl_BeamCount.Text = "0"
        txt_PcsLength.Text = "0"
        txt_TapeLength.Text = ""
        cbo_BeamWidth.Text = ""
        cbo_MillName.Text = ""
        cbo_CountName.Text = ""
        cbo_CountName.Tag = ""
        txt_Ends.Text = "0"
        lbl_SetNo.Text = ""
        lbl_SetNo.Tag = ""
        cbo_Ledger.Text = ""
        dtp_Date.Text = ""
        txt_ExcessShort_Adjustment.Text = ""

        cbo_Sizing1_Vendor.Text = ""
        cbo_Sizing2_Vendor.Text = ""
        cbo_Sizing3_Vendor.Text = ""
        chk_SocietySet.Checked = False

        lbl_YarnTaken.Text = ""
        lbl_ConsumedYarn.Text = ""
        lbl_BabyConeWeight.Text = ""
        lbl_ExcessShort.Text = ""

        cbo_Grid_CountName.Visible = False
        cbo_Grid_CountName.Text = ""

        cbo_Grid_CountName.Visible = False
        cbo_Grid_CountName.Text = ""

        cbo_Grid_MillName.Visible = False
        cbo_Grid_MillName.Text = ""

        cbo_Grid_ItemName.Visible = False
        cbo_Grid_ItemName.Text = ""

        cbo_Grid_WareHouse.Visible = False
        cbo_Grid_WareHouse.Text = ""

        cbo_Grid_FrontWarper2.Visible = False
        cbo_Grid_FrontWarper2.Text = ""

        cbo_Grid_FrontWarper_1.Visible = False
        cbo_Grid_FrontWarper_1.Text = ""

        cbo_Grid_BackWarper1.Visible = False
        cbo_Grid_BackWarper1.Text = ""

        cbo_Grid_BackWarper2.Visible = False
        cbo_Grid_BackWarper2.Text = ""

        cbo_Grid_Helper1.Visible = False
        cbo_Grid_Helper1.Text = ""

        cbo_Grid_Helper2.Visible = False
        cbo_Grid_Helper2.Text = ""

        cbo_Ends2_FrontWarper2.Visible = False
        cbo_Ends2_FrontWarper2.Text = ""

        cbo_Ends2_FrontWarper1.Visible = False
        cbo_Ends2_FrontWarper1.Text = ""

        cbo_Ends2_BackWarper1.Visible = False
        cbo_Ends2_BackWarper1.Text = ""

        cbo_Ends2_BackWarper2.Visible = False
        cbo_Ends2_BackWarper2.Text = ""

        cbo_Ends2_Helper1.Visible = False
        cbo_Ends2_Helper1.Text = ""

        cbo_Ends2_Helper2.Visible = False
        cbo_Ends2_Helper2.Text = ""

        cbo_Ends3_FrontWarper2.Visible = False
        cbo_Ends3_FrontWarper2.Text = ""

        cbo_Ends3_FrontWarper1.Visible = False
        cbo_Ends3_FrontWarper1.Text = ""

        cbo_Ends3_BackWarper1.Visible = False
        cbo_Ends3_BackWarper1.Text = ""

        cbo_Ends3_BackWarper2.Visible = False
        cbo_Ends3_BackWarper2.Text = ""

        cbo_Ends3_Helper1.Visible = False
        cbo_Ends3_Helper1.Text = ""

        cbo_Ends3_Helper2.Visible = False
        cbo_Ends3_Helper2.Text = ""


        cbo_Ends1_Shift.Visible = False
        cbo_Ends1_Shift.Text = ""

        cbo_Ends2_Shift.Visible = False
        cbo_Ends2_Shift.Text = ""

        Cbo_Ends3_Shift.Visible = False
        Cbo_Ends3_Shift.Text = ""


        cbo_Sizing1_BackSizer1.Visible = False
        cbo_Sizing1_BackSizer1.Text = ""

        cbo_Sizing1_Boiler1.Visible = False
        cbo_Sizing1_Boiler1.Text = ""

        cbo_Sizing1_Cooker.Visible = False
        cbo_Sizing1_Cooker.Text = ""

        cbo_Sizing1_FrontSizer1.Visible = False
        cbo_Sizing1_FrontSizer1.Text = ""

        cbo_Sizing1_Shift.Visible = False
        cbo_Sizing1_Shift.Text = ""

        cbo_Sizing1_BackSizer2.Visible = False
        cbo_Sizing1_BackSizer2.Text = ""

        cbo_Sizing1_Boiler2.Visible = False
        cbo_Sizing1_Boiler2.Text = ""

        cbo_Sizing1_Cooker2.Visible = False
        cbo_Sizing1_Cooker2.Text = ""

        cbo_Sizing1_FrontSizer2.Visible = False
        cbo_Sizing1_FrontSizer2.Text = ""


        cbo_Sizing2_BackSizer1.Visible = False
        cbo_Sizing2_BackSizer1.Text = ""

        cbo_Sizing2_Boiler1.Visible = False
        cbo_Sizing2_Boiler1.Text = ""

        cbo_Sizing2_Cooker.Visible = False
        cbo_Sizing2_Cooker.Text = ""

        cbo_Sizing2_FrontSizer1.Visible = False
        cbo_Sizing2_FrontSizer1.Text = ""

        cbo_Sizing2_Shift.Visible = False
        cbo_Sizing2_Shift.Text = ""

        cbo_Sizing2_BackSizer2.Visible = False
        cbo_Sizing2_BackSizer2.Text = ""

        cbo_Sizing2_Boiler2.Visible = False
        cbo_Sizing2_Boiler2.Text = ""

        cbo_Sizing2_Cooker2.Visible = False
        cbo_Sizing2_Cooker2.Text = ""

        cbo_Sizing2_FrontSizer2.Visible = False
        cbo_Sizing2_FrontSizer2.Text = ""


        cbo_Sizing3_BackSizer1.Visible = False
        cbo_Sizing3_BackSizer1.Text = ""

        cbo_Sizing3_Boiler1.Visible = False
        cbo_Sizing3_Boiler1.Text = ""

        cbo_Sizing3_Cooker.Visible = False
        cbo_Sizing3_Cooker.Text = ""

        cbo_Sizing3_FrontSizer1.Visible = False
        cbo_Sizing3_FrontSizer1.Text = ""

        cbo_Sizing3_Shift.Visible = False
        cbo_Sizing3_Shift.Text = ""

        cbo_Sizing3_BackSizer2.Visible = False
        cbo_Sizing3_BackSizer2.Text = ""

        cbo_Sizing3_Boiler2.Visible = False
        cbo_Sizing3_Boiler2.Text = ""

        cbo_Sizing3_Cooker2.Visible = False
        cbo_Sizing3_Cooker2.Text = ""

        cbo_Sizing3_FrontSizer2.Visible = False
        cbo_Sizing3_FrontSizer2.Text = ""

        cbo_Sizing1_Vendor.Visible = False
        cbo_Sizing1_Vendor.Text = ""

        cbo_Sizing2_Vendor.Visible = False
        cbo_Sizing2_Vendor.Text = ""

        cbo_Sizing3_Vendor.Visible = False
        cbo_Sizing3_Vendor.Text = ""

        lbl_UserName.Text = ""

        chk_RewindingStatus.Checked = False
        txt_RewindingCones.Enabled = False
        cbo_Rw_MillName.Enabled = False

        txt_InvoiceCode.Text = ""
        txt_BabyCone_DeliveryWeight.Text = ""

        cbo_Ledger.Enabled = True
        cbo_Ledger.BackColor = Color.White

        cbo_CountName.Enabled = True
        cbo_CountName.BackColor = Color.White

        cbo_Type.Enabled = True
        cbo_Type.BackColor = Color.White

        cbo_MillName.Enabled = True
        cbo_MillName.BackColor = Color.White

        txt_WgtEmYBag.Enabled = True
        txt_WgtEmYBag.BackColor = Color.White

        txt_WgtEmYCone.Enabled = True
        txt_WgtEmYCone.BackColor = Color.White

        txt_BabyCone_TareWeight.Enabled = True
        txt_BabyCone_TareWeight.BackColor = Color.White

        chk_RewindingStatus.Enabled = True
        chk_RewindingStatus.BackColor = Color.White

        txt_RewindingCones.Enabled = True
        txt_RewindingCones.BackColor = Color.White

        cbo_Rw_MillName.Enabled = True
        cbo_Rw_MillName.BackColor = Color.White

        txt_RwExcSht.Enabled = True
        txt_RwExcSht.BackColor = Color.White

        chk_Printed.Checked = False
        chk_Printed.Enabled = False
        chk_Printed.Visible = False
        cbo_Grid_BeamNo.Visible = False


        If Filter_Status = False Then
            dtp_Filter_Fromdate.Text = Common_Procedures.Company_FromDate
            dtp_Filter_ToDate.Text = Common_Procedures.Company_ToDate
            cbo_Filter_PartyName.Text = ""
            cbo_Filter_CountName.Text = ""
            cbo_Filter_PartyName.SelectedIndex = -1
            cbo_Filter_CountName.SelectedIndex = -1
            dgv_Filter_Details.Rows.Clear()
        End If

        On Error Resume Next

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1163" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1288" Then
            tab_Main.SelectTab(0)
            tab_WarpingDeatils.SelectTab(0)
        End If

        'dgv_WarpingDetails_Set1.CurrentCell = dgv_WarpingDetails_Set1.Rows(0).Cells(1)
        dgv_WarpingDetails_Set1.CurrentCell.Selected = False

        dgv_WarpingDetails_Set1.AllowUserToAddRows = True
        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1378" Then '---- 346_SAMY_SIZING or Eminent
            dgv_WarpingDetails_Set1.AllowUserToAddRows = False
        End If

        Grid_Cell_DeSelect()

    End Sub

    Private Sub ControlGotFocus(ByVal sender As Object, ByVal e As System.EventArgs)
        Dim txtbx As TextBox
        Dim combobx As ComboBox

        On Error Resume Next

        If TypeOf Me.ActiveControl Is TextBox Or TypeOf Me.ActiveControl Is ComboBox Or TypeOf Prec_ActCtrl Is CheckBox Then
            Me.ActiveControl.BackColor = Color.Lime
            Me.ActiveControl.ForeColor = Color.Blue
        ElseIf TypeOf Me.ActiveControl Is Button Then
            Me.ActiveControl.BackColor = Color.Lime
            Me.ActiveControl.ForeColor = Color.Blue
        ElseIf TypeOf Me.ActiveControl Is CheckBox Then
            Me.ActiveControl.BackColor = Color.Lime
            Me.ActiveControl.ForeColor = Color.Blue
        End If

        If TypeOf Me.ActiveControl Is TextBox Then
            txtbx = Me.ActiveControl
            txtbx.SelectAll()
        ElseIf TypeOf Me.ActiveControl Is ComboBox Then
            combobx = Me.ActiveControl
            combobx.SelectAll()
        End If

        If Me.ActiveControl.Name <> cbo_Grid_CountName.Name Then
            cbo_Grid_CountName.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Grid_MillName.Name Then
            cbo_Grid_MillName.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Grid_YarnType.Name Then
            cbo_Grid_YarnType.Visible = False
        End If

        If Me.ActiveControl.Name <> cbo_Grid_WareHouse.Name Then
            cbo_Grid_WareHouse.Visible = False
        End If

        If Me.ActiveControl.Name <> cbo_Grid_FrontWarper2.Name Then
            cbo_Grid_FrontWarper2.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Grid_BackWarper1.Name Then
            cbo_Grid_BackWarper1.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Grid_BackWarper2.Name Then
            cbo_Grid_BackWarper2.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Grid_FrontWarper_1.Name Then
            cbo_Grid_FrontWarper_1.Visible = False
        End If

        If Me.ActiveControl.Name <> cbo_Grid_Helper1.Name Then
            cbo_Grid_Helper1.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Grid_Helper2.Name Then
            cbo_Grid_Helper2.Visible = False
        End If

        If Me.ActiveControl.Name <> cbo_Ends2_Helper1.Name Then
            cbo_Ends2_Helper1.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Ends2_Helper2.Name Then
            cbo_Ends2_Helper2.Visible = False
        End If

        If Me.ActiveControl.Name <> cbo_Ends2_FrontWarper2.Name Then
            cbo_Ends2_FrontWarper2.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Ends2_BackWarper1.Name Then
            cbo_Ends2_BackWarper1.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Ends2_BackWarper2.Name Then
            cbo_Ends2_BackWarper2.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Ends2_FrontWarper1.Name Then
            cbo_Ends2_FrontWarper1.Visible = False
        End If

        If Me.ActiveControl.Name <> cbo_Ends3_Helper1.Name Then
            cbo_Ends3_Helper1.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Ends3_Helper2.Name Then
            cbo_Ends3_Helper2.Visible = False
        End If

        If Me.ActiveControl.Name <> cbo_Ends3_FrontWarper2.Name Then
            cbo_Ends3_FrontWarper2.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Ends3_BackWarper1.Name Then
            cbo_Ends3_BackWarper1.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Ends3_BackWarper2.Name Then
            cbo_Ends3_BackWarper2.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Ends3_FrontWarper1.Name Then
            cbo_Ends3_FrontWarper1.Visible = False
        End If

        If Me.ActiveControl.Name <> cbo_Ends1_Shift.Name Then
            cbo_Ends1_Shift.Visible = False
        End If

        If Me.ActiveControl.Name <> cbo_Ends2_Shift.Name Then
            cbo_Ends2_Shift.Visible = False
        End If

        If Me.ActiveControl.Name <> Cbo_Ends3_Shift.Name Then
            Cbo_Ends3_Shift.Visible = False
        End If

        If Me.ActiveControl.Name <> cbo_Sizing1_BackSizer1.Name Then
            cbo_Sizing1_BackSizer1.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Sizing1_BackSizer2.Name Then
            cbo_Sizing1_BackSizer2.Visible = False
        End If

        If Me.ActiveControl.Name <> cbo_Sizing1_Boiler1.Name Then
            cbo_Sizing1_Boiler1.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Sizing1_Boiler2.Name Then
            cbo_Sizing1_Boiler2.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Sizing1_Cooker.Name Then
            cbo_Sizing1_Cooker.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Sizing1_Cooker2.Name Then
            cbo_Sizing1_Cooker2.Visible = False
        End If

        If Me.ActiveControl.Name <> cbo_Sizing1_FrontSizer1.Name Then
            cbo_Sizing1_FrontSizer1.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Sizing1_FrontSizer2.Name Then
            cbo_Sizing1_FrontSizer2.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Sizing1_Shift.Name Then
            cbo_Sizing1_Shift.Visible = False
        End If

        If Me.ActiveControl.Name <> cbo_Sizing2_BackSizer1.Name Then
            cbo_Sizing2_BackSizer1.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Sizing2_BackSizer2.Name Then
            cbo_Sizing2_BackSizer2.Visible = False
        End If

        If Me.ActiveControl.Name <> cbo_Sizing2_Boiler1.Name Then
            cbo_Sizing2_Boiler1.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Sizing2_Boiler2.Name Then
            cbo_Sizing2_Boiler2.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Sizing2_Cooker.Name Then
            cbo_Sizing2_Cooker.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Sizing2_Cooker2.Name Then
            cbo_Sizing2_Cooker2.Visible = False
        End If

        If Me.ActiveControl.Name <> cbo_Sizing2_FrontSizer1.Name Then
            cbo_Sizing2_FrontSizer1.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Sizing2_FrontSizer2.Name Then
            cbo_Sizing2_FrontSizer2.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Sizing2_Shift.Name Then
            cbo_Sizing2_Shift.Visible = False
        End If

        If Me.ActiveControl.Name <> cbo_Sizing3_BackSizer1.Name Then
            cbo_Sizing3_BackSizer1.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Sizing3_BackSizer2.Name Then
            cbo_Sizing3_BackSizer2.Visible = False
        End If

        If Me.ActiveControl.Name <> cbo_Sizing3_Boiler1.Name Then
            cbo_Sizing3_Boiler1.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Sizing3_Boiler2.Name Then
            cbo_Sizing3_Boiler2.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Sizing3_Cooker.Name Then
            cbo_Sizing3_Cooker.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Sizing3_Cooker2.Name Then
            cbo_Sizing3_Cooker2.Visible = False
        End If

        If Me.ActiveControl.Name <> cbo_Sizing3_FrontSizer1.Name Then
            cbo_Sizing3_FrontSizer1.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Sizing3_FrontSizer2.Name Then
            cbo_Sizing3_FrontSizer2.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Sizing3_Shift.Name Then
            cbo_Sizing3_Shift.Visible = False
        End If



        If Me.ActiveControl.Name <> cbo_Sizing1_Vendor.Name Then
            cbo_Sizing1_Vendor.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Sizing2_Vendor.Name Then
            cbo_Sizing2_Vendor.Visible = False
        End If

        If Me.ActiveControl.Name <> cbo_Sizing3_Vendor.Name Then
            cbo_Sizing3_Vendor.Visible = False
        End If
        If Me.ActiveControl.Name <> cbo_Grid_BeamNo.Name Then
            cbo_Grid_BeamNo.Visible = False
        End If

        Grid_Cell_DeSelect()

        Prec_ActCtrl = Me.ActiveControl

    End Sub

    Private Sub ControlLostFocus(ByVal sender As Object, ByVal e As System.EventArgs)
        On Error Resume Next
        If IsNothing(Prec_ActCtrl) = False Then
            If TypeOf Prec_ActCtrl Is TextBox Or TypeOf Prec_ActCtrl Is ComboBox Then
                Prec_ActCtrl.BackColor = Color.White
                Prec_ActCtrl.ForeColor = Color.Black
            ElseIf TypeOf Prec_ActCtrl Is Button Then
                Prec_ActCtrl.BackColor = Color.FromArgb(41, 57, 85)
                Prec_ActCtrl.ForeColor = Color.White
            ElseIf TypeOf Prec_ActCtrl Is CheckBox Then
                Prec_ActCtrl.BackColor = Color.LightSkyBlue
                Prec_ActCtrl.ForeColor = Color.Blue
            End If

        End If
    End Sub

    Private Sub TextBoxControlKeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs)
        On Error Resume Next
        If e.KeyValue = 38 Then e.Handled = True : SendKeys.Send("+{TAB}")
        If e.KeyValue = 40 Then e.Handled = True : SendKeys.Send("{TAB}")
    End Sub

    Private Sub TextBoxControlKeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs)
        On Error Resume Next
        If Asc(e.KeyChar) = 13 Then e.Handled = True : SendKeys.Send("{TAB}")
    End Sub

    Private Sub Grid_Cell_DeSelect()
        On Error Resume Next
        'dgv_AmountDetails.CurrentCell.Selected = False

        If IsNothing(dgv_BabyConeDetails.CurrentCell) Then Exit Sub
        If IsNothing(dgv_ChemicalDetails.CurrentCell) Then Exit Sub
        If IsNothing(dgv_YarnTakenDetails.CurrentCell) Then Exit Sub
        If IsNothing(dgv_SizingDetails_Set1.CurrentCell) Then Exit Sub
        If IsNothing(dgv_WarpingDetails_Set1.CurrentCell) Then Exit Sub

        If Not IsNothing(dgv_BabyConeDetails.CurrentCell) Then dgv_BabyConeDetails.CurrentCell.Selected = False
        If Not IsNothing(dgv_ChemicalDetails.CurrentCell) Then dgv_ChemicalDetails.CurrentCell.Selected = False
        If Not IsNothing(dgv_YarnTakenDetails.CurrentCell) Then dgv_YarnTakenDetails.CurrentCell.Selected = False
        If Not IsNothing(dgv_SizingDetails_Set1.CurrentCell) Then dgv_SizingDetails_Set1.CurrentCell.Selected = False
        'dgv_SizingDetails_Set2.CurrentCell.Selected = False
        'dgv_SizingDetails_Set3.CurrentCell.Selected = False
        If Not IsNothing(dgv_WarpingDetails_Set1.CurrentCell) Then dgv_WarpingDetails_Set1.CurrentCell.Selected = False
        'dgv_WarpingDetails_Set2.CurrentCell.Selected = False
        'dgv_WarpingDetails_Set3.CurrentCell.Selected = False
    End Sub

    Private Sub AllGrid_Cell_DeSelect()
        On Error Resume Next
        dgv_AmountDetails.CurrentCell.Selected = False
        'dgv_AmountDetails_Total.CurrentCell.Selected = False
        dgv_BabyConeDetails.CurrentCell.Selected = False
        'dgv_BabyConeDetails_Total.CurrentCell.Selected = False
        dgv_ChemicalDetails.CurrentCell.Selected = False
        'dgv_ChemicalDetails_Total.CurrentCell.Selected = False
        dgv_EmptyBagStockDetails.CurrentCell.Selected = False
        'dgv_EmptyBagStockDetails_Total.CurrentCell.Selected = False
        dgv_EmptyBeamStockDetails.CurrentCell.Selected = False
        'dgv_EmptyBeamStockDetails_Total.CurrentCell.Selected = False
        dgv_EmptyConeStockDetails.CurrentCell.Selected = False
        'dgv_EmptyConeStockDetails_Total.CurrentCell.Selected = False
        dgv_YarnStockDetails.CurrentCell.Selected = False
        'dgv_YarnStockDetails_Total.CurrentCell.Selected = False
        dgv_YarnStockSummary.CurrentCell.Selected = False
        'dgv_YarnStockSummary_Total.CurrentCell.Selected = False
        dgv_YarnTakenDetails.CurrentCell.Selected = False
        'dgv_YarnTakenDetails_Total.CurrentCell.Selected = False
        dgv_SizingDetails_Set1.CurrentCell.Selected = False
        dgv_SizingDetails_Set2.CurrentCell.Selected = False
        dgv_SizingDetails_Set3.CurrentCell.Selected = False
        'dgv_SizingDetails_Total_Set1.CurrentCell.Selected = False
        'dgv_SizingDetails_Total_Set2.CurrentCell.Selected = False
        'dgv_SizingDetails_Total_Set3.CurrentCell.Selected = False
        dgv_WarpingDetails_Set1.CurrentCell.Selected = False
        dgv_WarpingDetails_Set2.CurrentCell.Selected = False
        dgv_WarpingDetails_Set3.CurrentCell.Selected = False
        'dgv_WarpingDetails_Total_Set1.CurrentCell.Selected = False
        'dgv_WarpingDetails_Total_Set2.CurrentCell.Selected = False
        'dgv_WarpingDetails_Total_Set3.CurrentCell.Selected = False
    End Sub

    Private Sub move_record(ByVal no As String)
        Dim da1 As New SqlClient.SqlDataAdapter
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt1 As New DataTable
        Dim dt2 As New DataTable
        Dim NewCode As String
        Dim i As Integer, j As Integer, n As Integer
        Dim SNo As Integer
        Dim Siz_Lck_STS As Boolean = False
        Dim k As Integer = 0

        'If cbo_SizingMachineNo.Visible = True Then
        If Val(no) = 0 And Trim(no) = "" Then Exit Sub
        'Else
        '    If Val(no) = 0 Then Exit Sub
        'End If


        clear()

        NoCaclSTS = True

        NewCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(no) & "/" & Trim(Common_Procedures.FnYearCode)

        Try

            da1 = New SqlClient.SqlDataAdapter("Select a.*, b.Ledger_Name, c.mill_name, d.count_name, e.Beam_Width_Name from Specification_Head a INNER JOIN Ledger_Head b ON a.Ledger_IdNo = b.Ledger_IdNo LEFT OUTER JOIN Mill_Head c ON a.Mill_IdNo = c.Mill_IdNo LEFT OUTER JOIN count_Head d ON a.count_IdNo = d.count_IdNo LEFT OUTER JOIN Beam_Width_Head e ON a.Beam_Width_IdNo = e.Beam_Width_IdNo Where a.set_code = '" & Trim(NewCode) & "' and Entry_VAT_GST_Type = '" & Trim(vEnt_VAT_GST_Type) & "'", Con)
            dt1 = New DataTable
            da1.Fill(dt1)

            If dt1.Rows.Count > 0 Then
                cbo_SizingMachineNo.Text = Common_Procedures.SizingMachineNo_IdNoToName(Con, Val(dt1.Rows(0).Item("Sizing_Machine_No_IdNo").ToString))
                cbo_Warping_Machineno.Text = Common_Procedures.WarpingMachineNo_IdNoToName(Con, Val(dt1.Rows(0).Item("Warping_Machine_No_IdNo").ToString))

                If cbo_SizingMachineNo.Visible = True Then
                    lbl_SetNo.Text = dt1.Rows(0).Item("SetNo_Display").ToString

                    'k = Microsoft.VisualBasic.Len(Trim(cbo_SizingMachineNo.Text))
                    'If Microsoft.VisualBasic.Len(Trim(dt1.Rows(0).Item("set_no").ToString)) > k Then
                    '    lbl_SetNo.Text = Microsoft.VisualBasic.Right(Trim(dt1.Rows(0).Item("set_no").ToString), Microsoft.VisualBasic.Len(Trim(dt1.Rows(0).Item("set_no").ToString)) - k)
                    'End If

                Else
                    lbl_SetNo.Text = dt1.Rows(0).Item("set_no").ToString
                End If

                lbl_SetNo.Tag = dt1.Rows(0).Item("set_no").ToString
                dtp_Date.Text = dt1.Rows(0).Item("set_date").ToString
                cbo_Type.Text = dt1.Rows(0).Item("Entry_Type").ToString
                cbo_Ledger.Text = dt1.Rows(0).Item("Ledger_Name").ToString
                cbo_CountName.Text = dt1.Rows(0).Item("count_name").ToString
                cbo_MillName.Text = dt1.Rows(0).Item("mill_name").ToString
                cbo_LoomType.Text = Common_Procedures.LoomType_IdNoToName(Con, Val(dt1.Rows(0).Item("LoomType_idno").ToString))  ' dt1.Rows(0).Item("Loom_Type").ToString
                cbo_BeamWidth.Text = dt1.Rows(0).Item("Beam_Width_Name").ToString


                If Val(dt1.Rows(0).Item("No_Need_Stock_Posting").ToString) = 1 Then
                    chk_RewindingStatus.Checked = True
                Else
                    chk_RewindingStatus.Checked = False
                End If

                cbo_DeliveryTo.Text = Common_Procedures.Delivery_IdNoToName(Con, Val(dt1.Rows(0).Item("Delivery_To_IdNo").ToString))

                Try
                    If Val(dt1.Rows(0).Item("ends_name").ToString) = Trim(dt1.Rows(0).Item("ends_name").ToString) Then
                        txt_Ends.Text = Format(Val(dt1.Rows(0).Item("ends_name").ToString), "#########")
                    Else
                        txt_Ends.Text = dt1.Rows(0).Item("ends_name").ToString
                    End If
                Catch ex As Exception
                    txt_Ends.Text = dt1.Rows(0).Item("ends_name").ToString
                End Try

                txt_PcsLength.Text = dt1.Rows(0).Item("pcs_length").ToString
                txt_TapeLength.Text = dt1.Rows(0).Item("tape_length").ToString  ' Val(dt1.Rows(0).Item("tape_length").ToString)
                cbo_Meters_Yards.Text = dt1.Rows(0).Item("Meters_Yards").ToString
                txt_WarpMeters.Text = dt1.Rows(0).Item("warp_meters").ToString
                lbl_BeamCount.Text = dt1.Rows(0).Item("beam_count").ToString


                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1102" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1163" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1144" Then
                    lbl_ExcessShort.Text = Format(Val(dt1.Rows(0).Item("excess_short_yarn").ToString), "#########0.0")
                    lbl_BabyConeWeight.Text = Format(Val(lbl_BabyCone_NetWeight.Text), "#########0")
                    lbl_ConsumedYarn.Text = Format(Val(lbl_Total_Warping_NetWeight.Text), "#########0.0")
                Else
                    lbl_ExcessShort.Text = Format(Val(dt1.Rows(0).Item("excess_short_yarn").ToString), "#########0.000")
                    lbl_BabyConeWeight.Text = Format(Val(lbl_BabyCone_NetWeight.Text), "#########0.000")
                    lbl_ConsumedYarn.Text = Format(Val(lbl_Total_Warping_NetWeight.Text), "#########0.000")
                End If
                txt_ExcessShort_Adjustment.Text = Format(Val(dt1.Rows(0).Item("Excess_Short_Adjustment").ToString), "#########0.000")

                lbl_PickUp_Perc.Text = Format(Val(dt1.Rows(0).Item("pickup_percentage").ToString), "#########0.00")
                txt_PickUpPerc_Party.Text = Format(Val(dt1.Rows(0).Item("PickupPercentage_Party").ToString), "#########0.00")

                lbl_Elongation_Mtr.Text = Format(Val(dt1.Rows(0).Item("elongation_meter").ToString), "#########0.00")
                lbl_Elongation_Perc.Text = Format(Val(dt1.Rows(0).Item("elongation_percentage").ToString), "#########0.00")

                txt_Remarks.Text = dt1.Rows(0).Item("remarks").ToString
                txt_SortNo.Text = dt1.Rows(0).Item("Sort_No").ToString

                txt_WgtEmYBag.Text = Format(Val(dt1.Rows(0).Item("EmptyBag_weight").ToString), "#########0.000")
                txt_WgtEmYCone.Text = Format(Val(dt1.Rows(0).Item("EmptyCone_weight").ToString), "#########0.000")

                txt_BabyCone_TareWeight.Text = Format(Val(dt1.Rows(0).Item("total_baby_tare_weight").ToString), "#########0.000")
                lbl_BabyCone_NetWeight.Text = Format(Val(dt1.Rows(0).Item("total_baby_net_weight").ToString), "#########0.000")

                If Val(dt1.Rows(0).Item("rw_status").ToString) = 1 Then
                    chk_RewindingStatus.Checked = True
                End If

                lbl_Total_Warping_Beams.Text = dt1.Rows(0).Item("Total_Warping_Beams").ToString
                lbl_Total_Warping_Ends.Text = dt1.Rows(0).Item("total_warping_ends").ToString
                lbl_Total_Warping_GrossWeight.Text = Format(Val(dt1.Rows(0).Item("total_warping_gross_weight").ToString), "#########0.000")
                lbl_Total_Warping_TareWeight.Text = Format(Val(dt1.Rows(0).Item("total_warping_tare_weight").ToString), "#########0.000")
                lbl_Total_Warping_NetWeight.Text = Format(Val(dt1.Rows(0).Item("total_warping_net_weight").ToString), "#########0.000")

                lbl_Total_Sizing_GrossWeight.Text = Format(Val(dt1.Rows(0).Item("total_pavu_gross_weight").ToString), "#########0.000")
                lbl_Total_Sizing_TareWeight.Text = Format(Val(dt1.Rows(0).Item("total_pavu_tare_weight").ToString), "#########0.000")
                lbl_Total_Sizing_NetWeight.Text = Format(Val(dt1.Rows(0).Item("total_pavu_net_weight").ToString), "#########0.000")
                lbl_Total_Sizing_Beams.Text = dt1.Rows(0).Item("total_pavu_beam").ToString
                lbl_Total_Sizing_Pcs.Text = dt1.Rows(0).Item("total_pavu_pcs").ToString
                lbl_Total_Sizing_Meters.Text = Format(Val(dt1.Rows(0).Item("total_pavu_meters").ToString), "#########0.00")
                lbl_Tot_Sizing_Beams.Text = dt1.Rows(0).Item("total_pavu_beam").ToString
                lbl_Tot_Sizing_Meters.Text = Format(Val(dt1.Rows(0).Item("total_pavu_meters").ToString), "#########0.00")

                lbl_WarpCode.Text = dt1.Rows(0).Item("Warp_Code").ToString
                lbl_WarpDate.Text = dt1.Rows(0).Item("Warp_Date").ToString
                lbl_WarpNo.Text = dt1.Rows(0).Item("Warp_No").ToString


                txt_warp_weight.Text = dt1.Rows(0).Item("Inv_Warp_Weight").ToString
                txt_warp_Rate.Text = dt1.Rows(0).Item("Warp_Rate").ToString
                txt_warp_Amount.Text = dt1.Rows(0).Item("Warp_Amount").ToString
                txt_Rewinding_Weight.Text = dt1.Rows(0).Item("Rewinding_Weight").ToString
                txt_Rewinding_Rate.Text = dt1.Rows(0).Item("Rewinding_Rate").ToString
                Txt_Rewinding_Amount.Text = dt1.Rows(0).Item("Rewinding_Amount").ToString
                Txt_No_Of_Beams.Text = dt1.Rows(0).Item("No_Of_Beams").ToString
                Txt_Beams_Rate.Text = dt1.Rows(0).Item("Packing_Rate").ToString
                Txt_Beams_Amount.Text = dt1.Rows(0).Item("Packing_Amount").ToString
                Txt_Welding_Beams.Text = dt1.Rows(0).Item("Welding_Beams").ToString
                Txt_Welding_Rate.Text = dt1.Rows(0).Item("Welding_Rate").ToString
                Txt_Welding_Amount.Text = dt1.Rows(0).Item("Welding_Amount").ToString
                txt_Other_Charges.Text = dt1.Rows(0).Item("Other_Charges").ToString

                txt_warp_dets_tot_consWT.Text = Format(Val(dt1.Rows(0).Item("warp_set1_cons_wt").ToString), "#########0.00")
                txt_FromRange.Text = Format(Val(dt1.Rows(0).Item("warp_set1_from_range").ToString), "#########0.00")
                txt_ToRange.Text = Format(Val(dt1.Rows(0).Item("warp_set1_to_range").ToString), "#########0.00")
                txt_warp_dets_tot_beam.Text = Format(Val(dt1.Rows(0).Item("warp_set1_tot_beam").ToString), "#########0")

                If Val(dt1.Rows(0).Item("SocietySet_Status").ToString) = 1 Then
                    chk_SocietySet.Checked = True
                End If

                txt_InvoiceCode.Text = dt1.Rows(0).Item("invoice_code").ToString
                If Val(dt1.Rows(0).Item("User_Idno").ToString) <> 0 Then
                    lbl_UserName.Text = "USER : " & Common_Procedures.User_IdNoToName(Con, Val(dt1.Rows(0).Item("User_Idno").ToString))
                End If
                If Trim(txt_InvoiceCode.Text) <> "" Then
                    da2 = New SqlClient.SqlDataAdapter("select a.* from Invoice_Head a where a.InVoice_Code = '" & Trim(txt_InvoiceCode.Text) & "'", Con)
                    dt2 = New DataTable
                    da2.Fill(dt2)
                    If dt2.Rows.Count > 0 Then
                        Lbl_InvoiceNo.Text = dt2.Rows(0).Item("Invoice_No").ToString
                        Lbl_InvRate.Text = dt2.Rows(0).Item("Sizing_Rate1").ToString
                        lbl_Accessible_Value.Text = dt2.Rows(0).Item("Assessable_Value").ToString
                        Lbl_InvoiceAmt.Text = Format(Val(dt2.Rows(0).Item("Net_Amount").ToString), "#########0.00")
                    End If
                    dt2.Clear()
                End If

                txt_BabyCone_DeliveryWeight.Text = 0
                da2 = New SqlClient.SqlDataAdapter("select sum(Delivered_Weight) as Delivered_BabyCone_Weight from Stock_BabyCone_Processing_Details a where a.Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "'", Con)
                dt2 = New DataTable
                da2.Fill(dt2)
                If dt2.Rows.Count > 0 Then
                    If IsDBNull(dt2.Rows(0).Item("Delivered_BabyCone_Weight").ToString) = False Then
                        txt_BabyCone_DeliveryWeight.Text = Val(txt_BabyCone_DeliveryWeight.Text) + Val(dt2.Rows(0).Item("Delivered_BabyCone_Weight").ToString)
                    End If
                End If
                dt2.Clear()

                da2 = New SqlClient.SqlDataAdapter("select sum(RwDelivered_Weight) as RwDelivered_BabyCone_Weight from Stock_RewindingBabyCone_Processing_Details a where a.Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "'", Con)
                dt2 = New DataTable
                da2.Fill(dt2)
                If dt2.Rows.Count > 0 Then
                    If IsDBNull(dt2.Rows(0).Item("RwDelivered_BabyCone_Weight").ToString) = False Then
                        txt_BabyCone_DeliveryWeight.Text = Val(txt_BabyCone_DeliveryWeight.Text) + Val(dt2.Rows(0).Item("RwDelivered_BabyCone_Weight").ToString)
                    End If
                End If
                dt2.Clear()


                da2 = New SqlClient.SqlDataAdapter("select a.* , c.BeamNo_Name from Specification_Warping_Details a LEFT OUTER JOIN BeamNo_Head c ON c.BeamNo_idno = a.Warp_Beam_No where a.set_code = '" & Trim(NewCode) & "' and a.Warp_SlNo = 1 Order by a.sl_no", Con)
                dt2 = New DataTable
                da2.Fill(dt2)

                dgv_WarpingDetails_Set1.Rows.Clear()
                SNo = 0

                If dt2.Rows.Count > 0 Then

                    For i = 0 To dt2.Rows.Count - 1

                        n = dgv_WarpingDetails_Set1.Rows.Add()

                        SNo = SNo + 1
                        dgv_WarpingDetails_Set1.Rows(n).Cells(0).Value = Val(SNo)
                        dgv_WarpingDetails_Set1.Rows(n).Cells(1).Value = dt2.Rows(i).Item("Ends_Name").ToString
                        dgv_WarpingDetails_Set1.Rows(n).Cells(2).Value = Format(Val(dt2.Rows(i).Item("Gross_Weight").ToString), "#########0.0")

                        dgv_WarpingDetails_Set1.Rows(n).Cells(3).Value = Format(Val(dt2.Rows(i).Item("Tare_Weight").ToString), "#########0.0")
                        If Val(dgv_WarpingDetails_Set1.Rows(n).Cells(3).Value) = 0 Then dgv_WarpingDetails_Set1.Rows(n).Cells(3).Value = ""

                        dgv_WarpingDetails_Set1.Rows(n).Cells(4).Value = Format(Val(dt2.Rows(i).Item("Net_Weight").ToString), "#########0.0")
                        dgv_WarpingDetails_Set1.Rows(n).Cells(5).Value = dt2.Rows(i).Item("Shift").ToString
                        dgv_WarpingDetails_Set1.Rows(n).Cells(6).Value = dt2.Rows(i).Item("BeamNo_Name").ToString

                        dgv_WarpingDetails_Set1.Rows(n).Cells(7).Value = Format(Val(dt2.Rows(i).Item("Start_Time").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set1.Rows(n).Cells(7).Value) = 0 Then dgv_WarpingDetails_Set1.Rows(n).Cells(7).Value = ""

                        dgv_WarpingDetails_Set1.Rows(n).Cells(8).Value = Format(Val(dt2.Rows(i).Item("End_Time").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set1.Rows(n).Cells(8).Value) = 0 Then dgv_WarpingDetails_Set1.Rows(n).Cells(8).Value = ""

                        dgv_WarpingDetails_Set1.Rows(n).Cells(9).Value = Format(Val(dt2.Rows(i).Item("Total_Time").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set1.Rows(n).Cells(9).Value) = 0 Then dgv_WarpingDetails_Set1.Rows(n).Cells(9).Value = ""

                        dgv_WarpingDetails_Set1.Rows(n).Cells(10).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Front_Warper_1_IdNo").ToString)
                        dgv_WarpingDetails_Set1.Rows(n).Cells(11).Value = Format(Val(dt2.Rows(i).Item("Front_Warper_1_Meters").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set1.Rows(n).Cells(11).Value) = 0 Then dgv_WarpingDetails_Set1.Rows(n).Cells(11).Value = ""

                        dgv_WarpingDetails_Set1.Rows(n).Cells(12).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Back_Warper_1_IdNo").ToString)
                        dgv_WarpingDetails_Set1.Rows(n).Cells(13).Value = Format(Val(dt2.Rows(i).Item("Back_Warper_1_Meters").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set1.Rows(n).Cells(13).Value) = 0 Then dgv_WarpingDetails_Set1.Rows(n).Cells(13).Value = ""

                        dgv_WarpingDetails_Set1.Rows(n).Cells(14).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Helper_1_IdNo").ToString)
                        dgv_WarpingDetails_Set1.Rows(n).Cells(15).Value = Format(Val(dt2.Rows(i).Item("Helper_1_Meters").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set1.Rows(n).Cells(15).Value) = 0 Then dgv_WarpingDetails_Set1.Rows(n).Cells(15).Value = ""

                        dgv_WarpingDetails_Set1.Rows(n).Cells(16).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Front_Warper_2_IdNo").ToString)
                        dgv_WarpingDetails_Set1.Rows(n).Cells(17).Value = Format(Val(dt2.Rows(i).Item("Front_Warper_2_Meters").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set1.Rows(n).Cells(17).Value) = 0 Then dgv_WarpingDetails_Set1.Rows(n).Cells(17).Value = ""

                        dgv_WarpingDetails_Set1.Rows(n).Cells(18).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Back_Warper_2_IdNo").ToString)
                        dgv_WarpingDetails_Set1.Rows(n).Cells(19).Value = Format(Val(dt2.Rows(i).Item("Back_Warper_2_Meters").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set1.Rows(n).Cells(19).Value) = 0 Then dgv_WarpingDetails_Set1.Rows(n).Cells(19).Value = ""

                        dgv_WarpingDetails_Set1.Rows(n).Cells(20).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Helper_2_IdNo").ToString)
                        dgv_WarpingDetails_Set1.Rows(n).Cells(21).Value = Format(Val(dt2.Rows(i).Item("Helper_2_Meters").ToString), "#########0.00")

                        'dgv_WarpingDetails_Set1.Rows(n).Cells(23).Value = Format(Val(dt2.Rows(i).Item("Act_Gross_Weight").ToString), "#########0.00")
                        'dgv_WarpingDetails_Set1.Rows(n).Cells(25).Value = Format(Val(dt2.Rows(i).Item("Act_Net_Weight").ToString), "#########0.00")
                        'dgv_WarpingDetails_Set1.Rows(n).Cells(24).Value = Format(Val(dgv_WarpingDetails_Set1.Rows(n).Cells(23).Value) - Val(dgv_WarpingDetails_Set1.Rows(n).Cells(25).Value), "#########0.00")

                        If Val(dgv_WarpingDetails_Set1.Rows(n).Cells(21).Value) = 0 Then dgv_WarpingDetails_Set1.Rows(n).Cells(21).Value = ""

                        dgv_WarpingDetails_Set1.Rows(n).Cells(22).Value = dt2.Rows(i).Item("Remarks").ToString
                        'dgv_WarpingDetails_Set1.Rows(n).Cells(24).Value = Common_Procedures.Vendor_IdNoToName(Con, dt2.Rows(i).Item("Vendor_IdNo").ToString)

                        dgv_WarpingDetails_Set1.Rows(n).Cells(23).Value = dt2.Rows(i).Item("Ends2_Name").ToString
                        dgv_WarpingDetails_Set1.Rows(n).Cells(24).Value = dt2.Rows(i).Item("Ends3_Name").ToString

                        dgv_WarpingDetails_Set1.Rows(n).Cells(25).Value = dt2.Rows(i).Item("Ends1_Weight").ToString
                        dgv_WarpingDetails_Set1.Rows(n).Cells(26).Value = dt2.Rows(i).Item("Ends2_Weight").ToString
                        dgv_WarpingDetails_Set1.Rows(n).Cells(27).Value = dt2.Rows(i).Item("Ends3_Weight").ToString


                        If Trim(txt_InvoiceCode.Text) <> "" Then
                            For j = 0 To dgv_WarpingDetails_Set1.ColumnCount - 1
                                dgv_WarpingDetails_Set1.Rows(n).Cells(j).Style.BackColor = Color.LightGray
                            Next
                        End If

                    Next i

                End If

                dgv_WarpingDetails_Set1.Rows.Add()

                da2 = New SqlClient.SqlDataAdapter("select a.* from Specification_Warping_Details a where a.set_code = '" & Trim(NewCode) & "' and a.Warp_SlNo = 2 Order by a.sl_no", Con)
                dt2 = New DataTable
                da2.Fill(dt2)

                dgv_WarpingDetails_Set2.Rows.Clear()
                SNo = 0

                If dt2.Rows.Count > 0 Then

                    For i = 0 To dt2.Rows.Count - 1

                        n = dgv_WarpingDetails_Set2.Rows.Add()

                        SNo = SNo + 1
                        dgv_WarpingDetails_Set2.Rows(n).Cells(0).Value = Val(SNo)
                        dgv_WarpingDetails_Set2.Rows(n).Cells(1).Value = Val(dt2.Rows(i).Item("Ends_Name").ToString)
                        dgv_WarpingDetails_Set2.Rows(n).Cells(2).Value = Format(Val(dt2.Rows(i).Item("Gross_Weight").ToString), "#########0.0")
                        dgv_WarpingDetails_Set2.Rows(n).Cells(3).Value = Format(Val(dt2.Rows(i).Item("Tare_Weight").ToString), "#########0.0")
                        dgv_WarpingDetails_Set2.Rows(n).Cells(4).Value = Format(Val(dt2.Rows(i).Item("Net_Weight").ToString), "#########0.0")
                        dgv_WarpingDetails_Set2.Rows(n).Cells(5).Value = dt2.Rows(i).Item("Shift").ToString
                        dgv_WarpingDetails_Set2.Rows(n).Cells(6).Value = dt2.Rows(i).Item("Warp_beam_No").ToString

                        dgv_WarpingDetails_Set2.Rows(n).Cells(7).Value = Format(Val(dt2.Rows(i).Item("Start_Time").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set2.Rows(n).Cells(7).Value) = 0 Then dgv_WarpingDetails_Set2.Rows(n).Cells(7).Value = ""

                        dgv_WarpingDetails_Set2.Rows(n).Cells(8).Value = Format(Val(dt2.Rows(i).Item("End_Time").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set2.Rows(n).Cells(8).Value) = 0 Then dgv_WarpingDetails_Set2.Rows(n).Cells(8).Value = ""

                        dgv_WarpingDetails_Set2.Rows(n).Cells(9).Value = Format(Val(dt2.Rows(i).Item("Total_Time").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set2.Rows(n).Cells(9).Value) = 0 Then dgv_WarpingDetails_Set2.Rows(n).Cells(9).Value = ""

                        dgv_WarpingDetails_Set2.Rows(n).Cells(10).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Front_Warper_1_IdNo").ToString)
                        dgv_WarpingDetails_Set2.Rows(n).Cells(11).Value = Format(Val(dt2.Rows(i).Item("Front_Warper_1_Meters").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set2.Rows(n).Cells(11).Value) = 0 Then dgv_WarpingDetails_Set2.Rows(n).Cells(11).Value = ""

                        dgv_WarpingDetails_Set2.Rows(n).Cells(12).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Back_Warper_1_IdNo").ToString)
                        dgv_WarpingDetails_Set2.Rows(n).Cells(13).Value = Format(Val(dt2.Rows(i).Item("Back_Warper_1_Meters").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set2.Rows(n).Cells(13).Value) = 0 Then dgv_WarpingDetails_Set2.Rows(n).Cells(13).Value = ""

                        dgv_WarpingDetails_Set2.Rows(n).Cells(14).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Helper_1_IdNo").ToString)
                        dgv_WarpingDetails_Set2.Rows(n).Cells(15).Value = Format(Val(dt2.Rows(i).Item("Helper_1_Meters").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set2.Rows(n).Cells(15).Value) = 0 Then dgv_WarpingDetails_Set2.Rows(n).Cells(15).Value = ""

                        dgv_WarpingDetails_Set2.Rows(n).Cells(16).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Front_Warper_2_IdNo").ToString)
                        dgv_WarpingDetails_Set2.Rows(n).Cells(17).Value = Format(Val(dt2.Rows(i).Item("Front_Warper_2_Meters").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set2.Rows(n).Cells(17).Value) = 0 Then dgv_WarpingDetails_Set2.Rows(n).Cells(17).Value = ""

                        dgv_WarpingDetails_Set2.Rows(n).Cells(18).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Back_Warper_2_IdNo").ToString)
                        dgv_WarpingDetails_Set2.Rows(n).Cells(19).Value = Format(Val(dt2.Rows(i).Item("Back_Warper_2_Meters").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set2.Rows(n).Cells(19).Value) = 0 Then dgv_WarpingDetails_Set2.Rows(n).Cells(19).Value = ""

                        dgv_WarpingDetails_Set2.Rows(n).Cells(20).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Helper_2_IdNo").ToString)
                        dgv_WarpingDetails_Set2.Rows(n).Cells(21).Value = Format(Val(dt2.Rows(i).Item("Helper_2_Meters").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set2.Rows(n).Cells(21).Value) = 0 Then dgv_WarpingDetails_Set2.Rows(n).Cells(21).Value = ""

                        dgv_WarpingDetails_Set2.Rows(n).Cells(22).Value = dt2.Rows(i).Item("Remarks").ToString
                        If Trim(txt_InvoiceCode.Text) <> "" Then
                            For j = 0 To dgv_WarpingDetails_Set2.ColumnCount - 1
                                dgv_WarpingDetails_Set2.Rows(n).Cells(j).Style.BackColor = Color.LightGray
                            Next
                        End If

                    Next i

                End If
                dgv_WarpingDetails_Set2.Rows.Add()


                da2 = New SqlClient.SqlDataAdapter("select a.* from Specification_Warping_Details a where a.set_code = '" & Trim(NewCode) & "' and a.Warp_SlNo = 3 Order by a.sl_no", Con)
                dt2 = New DataTable
                da2.Fill(dt2)

                dgv_WarpingDetails_Set3.Rows.Clear()
                SNo = 0

                If dt2.Rows.Count > 0 Then

                    For i = 0 To dt2.Rows.Count - 1

                        n = dgv_WarpingDetails_Set3.Rows.Add()

                        SNo = SNo + 1
                        dgv_WarpingDetails_Set3.Rows(n).Cells(0).Value = Val(SNo)
                        dgv_WarpingDetails_Set3.Rows(n).Cells(1).Value = Val(dt2.Rows(i).Item("Ends_Name").ToString)
                        dgv_WarpingDetails_Set3.Rows(n).Cells(2).Value = Format(Val(dt2.Rows(i).Item("Gross_Weight").ToString), "#########0.0")

                        dgv_WarpingDetails_Set3.Rows(n).Cells(3).Value = Format(Val(dt2.Rows(i).Item("Tare_Weight").ToString), "#########0.0")
                        If Val(dgv_WarpingDetails_Set3.Rows(n).Cells(3).Value) = 0 Then dgv_WarpingDetails_Set3.Rows(n).Cells(3).Value = ""

                        dgv_WarpingDetails_Set3.Rows(n).Cells(4).Value = Format(Val(dt2.Rows(i).Item("Net_Weight").ToString), "#########0.0")
                        dgv_WarpingDetails_Set3.Rows(n).Cells(5).Value = dt2.Rows(i).Item("Shift").ToString
                        dgv_WarpingDetails_Set3.Rows(n).Cells(6).Value = dt2.Rows(i).Item("Warp_beam_No").ToString
                        dgv_WarpingDetails_Set3.Rows(n).Cells(7).Value = Format(Val(dt2.Rows(i).Item("Start_Time").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set3.Rows(n).Cells(7).Value) = 0 Then dgv_WarpingDetails_Set3.Rows(n).Cells(7).Value = ""

                        dgv_WarpingDetails_Set3.Rows(n).Cells(8).Value = Format(Val(dt2.Rows(i).Item("End_Time").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set3.Rows(n).Cells(8).Value) = 0 Then dgv_WarpingDetails_Set3.Rows(n).Cells(8).Value = ""

                        dgv_WarpingDetails_Set3.Rows(n).Cells(9).Value = Format(Val(dt2.Rows(i).Item("Total_Time").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set3.Rows(n).Cells(9).Value) = 0 Then dgv_WarpingDetails_Set3.Rows(n).Cells(9).Value = ""

                        dgv_WarpingDetails_Set3.Rows(n).Cells(10).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Front_Warper_1_IdNo").ToString)
                        dgv_WarpingDetails_Set3.Rows(n).Cells(11).Value = Format(Val(dt2.Rows(i).Item("Front_Warper_1_Meters").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set3.Rows(n).Cells(11).Value) = 0 Then dgv_WarpingDetails_Set3.Rows(n).Cells(11).Value = ""

                        dgv_WarpingDetails_Set3.Rows(n).Cells(12).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Back_Warper_1_IdNo").ToString)
                        dgv_WarpingDetails_Set3.Rows(n).Cells(13).Value = Format(Val(dt2.Rows(i).Item("Back_Warper_1_Meters").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set3.Rows(n).Cells(13).Value) = 0 Then dgv_WarpingDetails_Set3.Rows(n).Cells(13).Value = ""

                        dgv_WarpingDetails_Set3.Rows(n).Cells(14).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Helper_1_IdNo").ToString)
                        dgv_WarpingDetails_Set3.Rows(n).Cells(15).Value = Format(Val(dt2.Rows(i).Item("Helper_1_Meters").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set3.Rows(n).Cells(15).Value) = 0 Then dgv_WarpingDetails_Set3.Rows(n).Cells(15).Value = ""

                        dgv_WarpingDetails_Set3.Rows(n).Cells(16).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Front_Warper_2_IdNo").ToString)
                        dgv_WarpingDetails_Set3.Rows(n).Cells(17).Value = Format(Val(dt2.Rows(i).Item("Front_Warper_2_Meters").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set3.Rows(n).Cells(17).Value) = 0 Then dgv_WarpingDetails_Set3.Rows(n).Cells(17).Value = ""

                        dgv_WarpingDetails_Set3.Rows(n).Cells(18).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Back_Warper_2_IdNo").ToString)
                        dgv_WarpingDetails_Set3.Rows(n).Cells(19).Value = Format(Val(dt2.Rows(i).Item("Back_Warper_2_Meters").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set3.Rows(n).Cells(19).Value) = 0 Then dgv_WarpingDetails_Set3.Rows(n).Cells(19).Value = ""

                        dgv_WarpingDetails_Set3.Rows(n).Cells(20).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Helper_2_IdNo").ToString)
                        dgv_WarpingDetails_Set3.Rows(n).Cells(21).Value = Format(Val(dt2.Rows(i).Item("Helper_2_Meters").ToString), "#########0.00")
                        If Val(dgv_WarpingDetails_Set3.Rows(n).Cells(21).Value) = 0 Then dgv_WarpingDetails_Set3.Rows(n).Cells(21).Value = ""

                        dgv_WarpingDetails_Set3.Rows(n).Cells(22).Value = dt2.Rows(i).Item("Remarks").ToString

                        If Trim(txt_InvoiceCode.Text) <> "" Then
                            For j = 0 To dgv_WarpingDetails_Set3.ColumnCount - 1
                                dgv_WarpingDetails_Set3.Rows(n).Cells(j).Style.BackColor = Color.LightGray
                            Next
                        End If

                    Next i

                End If

                dgv_WarpingDetails_Set3.Rows.Add()

                NoCaclSTS = False
                TotalWarping_Calculation()
                NoCaclSTS = True

                da2 = New SqlClient.SqlDataAdapter("select a.* from Stock_SizedPavu_Processing_Details a where a.Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "' and a.Sizing_SlNo = 1 Order by a.sl_no", Con)
                dt2 = New DataTable
                da2.Fill(dt2)

                dgv_SizingDetails_Set1.Rows.Clear()
                SNo = 0

                If dt2.Rows.Count > 0 Then

                    For i = 0 To dt2.Rows.Count - 1

                        n = dgv_SizingDetails_Set1.Rows.Add()

                        SNo = SNo + 1
                        dgv_SizingDetails_Set1.Rows(n).Cells(0).Value = Val(SNo)
                        dgv_SizingDetails_Set1.Rows(n).Cells(1).Value = dt2.Rows(i).Item("Beam_No").ToString
                        dgv_SizingDetails_Set1.Rows(n).Cells(2).Value = Format(Val(dt2.Rows(i).Item("Gross_Weight").ToString), "#########0.0")
                        If Val(dgv_SizingDetails_Set1.Rows(n).Cells(2).Value) = 0 Then dgv_SizingDetails_Set1.Rows(n).Cells(2).Value = ""

                        dgv_SizingDetails_Set1.Rows(n).Cells(3).Value = Format(Val(dt2.Rows(i).Item("Tare_Weight").ToString), "#########0.0")
                        If Val(dgv_SizingDetails_Set1.Rows(n).Cells(3).Value) = 0 Then dgv_SizingDetails_Set1.Rows(n).Cells(3).Value = ""

                        dgv_SizingDetails_Set1.Rows(n).Cells(4).Value = Format(Val(dt2.Rows(i).Item("Net_Weight").ToString), "#########0.0")
                        If Val(dgv_SizingDetails_Set1.Rows(n).Cells(4).Value) = 0 Then dgv_SizingDetails_Set1.Rows(n).Cells(4).Value = ""

                        dgv_SizingDetails_Set1.Rows(n).Cells(5).Value = dt2.Rows(i).Item("Noof_Pcs").ToString
                        If Val(dgv_SizingDetails_Set1.Rows(n).Cells(5).Value) = 0 Then dgv_SizingDetails_Set1.Rows(n).Cells(5).Value = ""

                        dgv_SizingDetails_Set1.Rows(n).Cells(6).Value = Format(Val(dt2.Rows(i).Item("Meters_Pc").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set1.Rows(n).Cells(6).Value) = 0 Then dgv_SizingDetails_Set1.Rows(n).Cells(6).Value = ""

                        dgv_SizingDetails_Set1.Rows(n).Cells(7).Value = Format(Val(dt2.Rows(i).Item("Meters").ToString), "#########0.00")

                        dgv_SizingDetails_Set1.Rows(n).Cells(8).Value = dt2.Rows(i).Item("Pavu_Delivery_Code").ToString
                        dgv_SizingDetails_Set1.Rows(n).Cells(9).Value = dt2.Rows(i).Item("Shift").ToString
                        dgv_SizingDetails_Set1.Rows(n).Cells(10).Value = Format(Val(dt2.Rows(i).Item("Start_Time").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set1.Rows(n).Cells(10).Value) = 0 Then dgv_SizingDetails_Set1.Rows(n).Cells(10).Value = ""

                        dgv_SizingDetails_Set1.Rows(n).Cells(11).Value = Format(Val(dt2.Rows(i).Item("End_Time").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set1.Rows(n).Cells(11).Value) = 0 Then dgv_SizingDetails_Set1.Rows(n).Cells(11).Value = ""

                        dgv_SizingDetails_Set1.Rows(n).Cells(12).Value = Format(Val(dt2.Rows(i).Item("Total_Time").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set1.Rows(n).Cells(12).Value) = 0 Then dgv_SizingDetails_Set1.Rows(n).Cells(12).Value = ""

                        dgv_SizingDetails_Set1.Rows(n).Cells(13).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Front_Sizer_1_IdNo").ToString)
                        dgv_SizingDetails_Set1.Rows(n).Cells(14).Value = Format(Val(dt2.Rows(i).Item("Front_Sizer_1_Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set1.Rows(n).Cells(14).Value) = 0 Then dgv_SizingDetails_Set1.Rows(n).Cells(14).Value = ""

                        dgv_SizingDetails_Set1.Rows(n).Cells(15).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Back_Sizer_1_IdNo").ToString)
                        dgv_SizingDetails_Set1.Rows(n).Cells(16).Value = Format(Val(dt2.Rows(i).Item("Back_Sizer_1_Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set1.Rows(n).Cells(16).Value) = 0 Then dgv_SizingDetails_Set1.Rows(n).Cells(16).Value = ""

                        dgv_SizingDetails_Set1.Rows(n).Cells(17).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Boiler_1_IdNo").ToString)
                        dgv_SizingDetails_Set1.Rows(n).Cells(18).Value = Format(Val(dt2.Rows(i).Item("Boiler_1_Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set1.Rows(n).Cells(18).Value) = 0 Then dgv_SizingDetails_Set1.Rows(n).Cells(18).Value = ""

                        dgv_SizingDetails_Set1.Rows(n).Cells(19).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Cooker_1_IdNo").ToString)
                        dgv_SizingDetails_Set1.Rows(n).Cells(20).Value = Format(Val(dt2.Rows(i).Item("Cooker_1_Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set1.Rows(n).Cells(20).Value) = 0 Then dgv_SizingDetails_Set1.Rows(n).Cells(20).Value = ""

                        dgv_SizingDetails_Set1.Rows(n).Cells(21).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Front_Sizer_2_IdNo").ToString)
                        dgv_SizingDetails_Set1.Rows(n).Cells(22).Value = Format(Val(dt2.Rows(i).Item("Front_Sizer_2_Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set1.Rows(n).Cells(22).Value) = 0 Then dgv_SizingDetails_Set1.Rows(n).Cells(22).Value = ""

                        dgv_SizingDetails_Set1.Rows(n).Cells(23).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Back_Sizer_2_IdNo").ToString)
                        dgv_SizingDetails_Set1.Rows(n).Cells(24).Value = Format(Val(dt2.Rows(i).Item("Back_Sizer_2_Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set1.Rows(n).Cells(24).Value) = 0 Then dgv_SizingDetails_Set1.Rows(n).Cells(24).Value = ""

                        dgv_SizingDetails_Set1.Rows(n).Cells(25).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Boiler_2_IdNo").ToString)
                        dgv_SizingDetails_Set1.Rows(n).Cells(26).Value = Format(Val(dt2.Rows(i).Item("Boiler_2_Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set1.Rows(n).Cells(26).Value) = 0 Then dgv_SizingDetails_Set1.Rows(n).Cells(26).Value = ""

                        dgv_SizingDetails_Set1.Rows(n).Cells(27).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Cooker_2_IdNo").ToString)
                        dgv_SizingDetails_Set1.Rows(n).Cells(28).Value = Format(Val(dt2.Rows(i).Item("Cooker_2_Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set1.Rows(n).Cells(28).Value) = 0 Then dgv_SizingDetails_Set1.Rows(n).Cells(28).Value = ""

                        dgv_SizingDetails_Set1.Rows(n).Cells(29).Value = dt2.Rows(i).Item("Remarks").ToString
                        dgv_SizingDetails_Set1.Rows(n).Cells(30).Value = Format(Val(dt2.Rows(i).Item("Party_PickUp_Percentage").ToString), "#########0.00")
                        dgv_SizingDetails_Set1.Rows(n).Cells(31).Value = Common_Procedures.Vendor_IdNoToName(Con, dt2.Rows(i).Item("Vendor_IdNo").ToString)
                        dgv_SizingDetails_Set1.Rows(n).Cells(32).Value = Format(Val(dt2.Rows(i).Item("Actual_Gross_Weight").ToString), "#########0.000")
                        dgv_SizingDetails_Set1.Rows(n).Cells(33).Value = Format(Val(dt2.Rows(i).Item("Actual_Net_Weight").ToString), "#########0.000")
                        dgv_SizingDetails_Set1.Rows(n).Cells(34).Value = Format(Val(dt2.Rows(i).Item("Actual_pickup").ToString), "#########0.00")

                        If Trim(dgv_SizingDetails_Set1.Rows(n).Cells(8).Value) <> "" Then
                            Siz_Lck_STS = True
                            For j = 0 To dgv_SizingDetails_Set1.ColumnCount - 1
                                If j <> 2 And j <> 3 And j <> 4 And j <> 30 Then
                                    dgv_SizingDetails_Set1.Rows(n).Cells(j).Style.BackColor = Color.LightGray
                                End If
                            Next
                        End If

                    Next i

                End If

                dgv_SizingDetails_Set1.Rows.Add()

                da2 = New SqlClient.SqlDataAdapter("select a.* from Stock_SizedPavu_Processing_Details a where a.Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "' and a.Sizing_SlNo = 2 Order by a.sl_no", Con)
                dt2 = New DataTable
                da2.Fill(dt2)

                dgv_SizingDetails_Set2.Rows.Clear()
                SNo = 0

                If dt2.Rows.Count > 0 Then

                    For i = 0 To dt2.Rows.Count - 1

                        n = dgv_SizingDetails_Set2.Rows.Add()

                        SNo = SNo + 1
                        dgv_SizingDetails_Set2.Rows(n).Cells(0).Value = Val(SNo)
                        dgv_SizingDetails_Set2.Rows(n).Cells(1).Value = dt2.Rows(i).Item("Beam_No").ToString
                        dgv_SizingDetails_Set2.Rows(n).Cells(2).Value = Format(Val(dt2.Rows(i).Item("Gross_Weight").ToString), "#########0.0")
                        If Val(dgv_SizingDetails_Set2.Rows(n).Cells(2).Value) = 0 Then dgv_SizingDetails_Set2.Rows(n).Cells(2).Value = ""

                        dgv_SizingDetails_Set2.Rows(n).Cells(3).Value = Format(Val(dt2.Rows(i).Item("Tare_Weight").ToString), "#########0.0")
                        If Val(dgv_SizingDetails_Set2.Rows(n).Cells(3).Value) = 0 Then dgv_SizingDetails_Set2.Rows(n).Cells(3).Value = ""

                        dgv_SizingDetails_Set2.Rows(n).Cells(4).Value = Format(Val(dt2.Rows(i).Item("Net_Weight").ToString), "#########0.0")
                        If Val(dgv_SizingDetails_Set2.Rows(n).Cells(4).Value) = 0 Then dgv_SizingDetails_Set2.Rows(n).Cells(4).Value = ""

                        dgv_SizingDetails_Set2.Rows(n).Cells(5).Value = dt2.Rows(i).Item("Noof_Pcs").ToString
                        If Val(dgv_SizingDetails_Set2.Rows(n).Cells(5).Value) = 0 Then dgv_SizingDetails_Set2.Rows(n).Cells(5).Value = ""


                        dgv_SizingDetails_Set2.Rows(n).Cells(6).Value = Format(Val(dt2.Rows(i).Item("Meters_Pc").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set2.Rows(n).Cells(6).Value) = 0 Then dgv_SizingDetails_Set2.Rows(n).Cells(6).Value = ""

                        dgv_SizingDetails_Set2.Rows(n).Cells(7).Value = Format(Val(dt2.Rows(i).Item("Meters").ToString), "#########0.00")

                        dgv_SizingDetails_Set2.Rows(n).Cells(8).Value = dt2.Rows(i).Item("Pavu_Delivery_Code").ToString
                        dgv_SizingDetails_Set2.Rows(n).Cells(9).Value = dt2.Rows(i).Item("Shift").ToString

                        dgv_SizingDetails_Set2.Rows(n).Cells(10).Value = Format(Val(dt2.Rows(i).Item("Start_Time").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set2.Rows(n).Cells(10).Value) = 0 Then dgv_SizingDetails_Set2.Rows(n).Cells(10).Value = ""

                        dgv_SizingDetails_Set2.Rows(n).Cells(11).Value = Format(Val(dt2.Rows(i).Item("End_Time").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set2.Rows(n).Cells(11).Value) = 0 Then dgv_SizingDetails_Set2.Rows(n).Cells(11).Value = ""

                        dgv_SizingDetails_Set2.Rows(n).Cells(12).Value = Format(Val(dt2.Rows(i).Item("Total_Time").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set2.Rows(n).Cells(12).Value) = 0 Then dgv_SizingDetails_Set2.Rows(n).Cells(12).Value = ""

                        dgv_SizingDetails_Set2.Rows(n).Cells(13).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Front_Sizer_1_IdNo").ToString)
                        dgv_SizingDetails_Set2.Rows(n).Cells(14).Value = Format(Val(dt2.Rows(i).Item("Front_Sizer_1_Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set2.Rows(n).Cells(14).Value) = 0 Then dgv_SizingDetails_Set2.Rows(n).Cells(14).Value = ""

                        dgv_SizingDetails_Set2.Rows(n).Cells(15).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Back_Sizer_1_IdNo").ToString)
                        dgv_SizingDetails_Set2.Rows(n).Cells(16).Value = Format(Val(dt2.Rows(i).Item("Back_Sizer_1_Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set2.Rows(n).Cells(16).Value) = 0 Then dgv_SizingDetails_Set2.Rows(n).Cells(16).Value = ""

                        dgv_SizingDetails_Set2.Rows(n).Cells(17).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Boiler_1_IdNo").ToString)
                        dgv_SizingDetails_Set2.Rows(n).Cells(18).Value = Format(Val(dt2.Rows(i).Item("Boiler_1_Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set2.Rows(n).Cells(18).Value) = 0 Then dgv_SizingDetails_Set2.Rows(n).Cells(18).Value = ""

                        dgv_SizingDetails_Set2.Rows(n).Cells(19).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Cooker_1_IdNo").ToString)
                        dgv_SizingDetails_Set2.Rows(n).Cells(20).Value = Format(Val(dt2.Rows(i).Item("Cooker_1_Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set2.Rows(n).Cells(20).Value) = 0 Then dgv_SizingDetails_Set2.Rows(n).Cells(20).Value = ""

                        dgv_SizingDetails_Set2.Rows(n).Cells(21).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Front_Sizer_2_IdNo").ToString)
                        dgv_SizingDetails_Set2.Rows(n).Cells(22).Value = Format(Val(dt2.Rows(i).Item("Front_Sizer_2_Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set2.Rows(n).Cells(22).Value) = 0 Then dgv_SizingDetails_Set2.Rows(n).Cells(22).Value = ""

                        dgv_SizingDetails_Set2.Rows(n).Cells(23).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Back_Sizer_2_IdNo").ToString)
                        dgv_SizingDetails_Set2.Rows(n).Cells(24).Value = Format(Val(dt2.Rows(i).Item("Back_Sizer_2_Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set2.Rows(n).Cells(24).Value) = 0 Then dgv_SizingDetails_Set2.Rows(n).Cells(24).Value = ""

                        dgv_SizingDetails_Set2.Rows(n).Cells(25).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Boiler_2_IdNo").ToString)
                        dgv_SizingDetails_Set2.Rows(n).Cells(26).Value = Format(Val(dt2.Rows(i).Item("Boiler_2_Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set2.Rows(n).Cells(26).Value) = 0 Then dgv_SizingDetails_Set2.Rows(n).Cells(26).Value = ""

                        dgv_SizingDetails_Set2.Rows(n).Cells(27).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Cooker_2_IdNo").ToString)
                        dgv_SizingDetails_Set2.Rows(n).Cells(28).Value = Format(Val(dt2.Rows(i).Item("Cooker_2_Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set2.Rows(n).Cells(28).Value) = 0 Then dgv_SizingDetails_Set2.Rows(n).Cells(28).Value = ""

                        dgv_SizingDetails_Set2.Rows(n).Cells(29).Value = dt2.Rows(i).Item("Remarks").ToString
                        dgv_SizingDetails_Set2.Rows(n).Cells(30).Value = Format(Val(dt2.Rows(i).Item("Party_PickUp_Percentage").ToString), "#########0.00")
                        dgv_SizingDetails_Set2.Rows(n).Cells(31).Value = Common_Procedures.Vendor_IdNoToName(Con, dt2.Rows(i).Item("Vendor_IdNo").ToString)
                        dgv_SizingDetails_Set2.Rows(n).Cells(32).Value = Format(Val(dt2.Rows(i).Item("Actual_Gross_Weight").ToString), "#########0.000")
                        dgv_SizingDetails_Set2.Rows(n).Cells(33).Value = Format(Val(dt2.Rows(i).Item("Actual_Net_Weight").ToString), "#########0.000")
                        dgv_SizingDetails_Set2.Rows(n).Cells(34).Value = Format(Val(dt2.Rows(i).Item("Actual_pickup").ToString), "#########0.00")
                        If Trim(dgv_SizingDetails_Set2.Rows(n).Cells(8).Value) <> "" Then
                            Siz_Lck_STS = True
                            For j = 0 To dgv_SizingDetails_Set2.ColumnCount - 1
                                If j <> 2 And j <> 3 And j <> 4 And j <> 30 Then
                                    dgv_SizingDetails_Set2.Rows(n).Cells(j).Style.BackColor = Color.LightGray
                                End If
                            Next
                        End If

                    Next i

                End If
                dgv_SizingDetails_Set2.Rows.Add()

                da2 = New SqlClient.SqlDataAdapter("select a.* from Stock_SizedPavu_Processing_Details a where a.Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "' and a.Sizing_SlNo = 3 Order by a.sl_no", Con)
                dt2 = New DataTable
                da2.Fill(dt2)

                dgv_SizingDetails_Set3.Rows.Clear()
                SNo = 0

                If dt2.Rows.Count > 0 Then

                    For i = 0 To dt2.Rows.Count - 1

                        n = dgv_SizingDetails_Set3.Rows.Add()

                        SNo = SNo + 1
                        dgv_SizingDetails_Set3.Rows(n).Cells(0).Value = Val(SNo)
                        dgv_SizingDetails_Set3.Rows(n).Cells(1).Value = dt2.Rows(i).Item("Beam_No").ToString

                        dgv_SizingDetails_Set3.Rows(n).Cells(2).Value = Format(Val(dt2.Rows(i).Item("Gross_Weight").ToString), "#########0.0")
                        If Val(dgv_SizingDetails_Set3.Rows(n).Cells(2).Value) = 0 Then dgv_SizingDetails_Set3.Rows(n).Cells(2).Value = ""

                        dgv_SizingDetails_Set3.Rows(n).Cells(3).Value = Format(Val(dt2.Rows(i).Item("Tare_Weight").ToString), "#########0.0")
                        If Val(dgv_SizingDetails_Set3.Rows(n).Cells(3).Value) = 0 Then dgv_SizingDetails_Set3.Rows(n).Cells(3).Value = ""

                        dgv_SizingDetails_Set3.Rows(n).Cells(4).Value = Format(Val(dt2.Rows(i).Item("Net_Weight").ToString), "#########0.0")
                        If Val(dgv_SizingDetails_Set3.Rows(n).Cells(4).Value) = 0 Then dgv_SizingDetails_Set3.Rows(n).Cells(4).Value = ""

                        dgv_SizingDetails_Set3.Rows(n).Cells(5).Value = dt2.Rows(i).Item("Noof_Pcs").ToString
                        If Val(dgv_SizingDetails_Set3.Rows(n).Cells(5).Value) = 0 Then dgv_SizingDetails_Set3.Rows(n).Cells(5).Value = ""

                        dgv_SizingDetails_Set3.Rows(n).Cells(6).Value = Format(Val(dt2.Rows(i).Item("Meters_Pc").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set3.Rows(n).Cells(6).Value) = 0 Then dgv_SizingDetails_Set3.Rows(n).Cells(6).Value = ""

                        dgv_SizingDetails_Set3.Rows(n).Cells(7).Value = Format(Val(dt2.Rows(i).Item("Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set3.Rows(n).Cells(7).Value) = 0 Then dgv_SizingDetails_Set3.Rows(n).Cells(7).Value = ""

                        dgv_SizingDetails_Set3.Rows(n).Cells(8).Value = dt2.Rows(i).Item("Pavu_Delivery_Code").ToString
                        dgv_SizingDetails_Set3.Rows(n).Cells(9).Value = dt2.Rows(i).Item("Shift").ToString

                        dgv_SizingDetails_Set3.Rows(n).Cells(10).Value = Format(Val(dt2.Rows(i).Item("Start_Time").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set3.Rows(n).Cells(10).Value) = 0 Then dgv_SizingDetails_Set3.Rows(n).Cells(10).Value = ""

                        dgv_SizingDetails_Set3.Rows(n).Cells(11).Value = Format(Val(dt2.Rows(i).Item("End_Time").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set3.Rows(n).Cells(11).Value) = 0 Then dgv_SizingDetails_Set3.Rows(n).Cells(11).Value = ""

                        dgv_SizingDetails_Set3.Rows(n).Cells(12).Value = Format(Val(dt2.Rows(i).Item("Total_Time").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set3.Rows(n).Cells(12).Value) = 0 Then dgv_SizingDetails_Set3.Rows(n).Cells(12).Value = ""

                        dgv_SizingDetails_Set3.Rows(n).Cells(13).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Front_Sizer_1_IdNo").ToString)
                        dgv_SizingDetails_Set3.Rows(n).Cells(14).Value = Format(Val(dt2.Rows(i).Item("Front_Sizer_1_Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set3.Rows(n).Cells(14).Value) = 0 Then dgv_SizingDetails_Set3.Rows(n).Cells(14).Value = ""

                        dgv_SizingDetails_Set3.Rows(n).Cells(15).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Back_Sizer_1_IdNo").ToString)
                        dgv_SizingDetails_Set3.Rows(n).Cells(16).Value = Format(Val(dt2.Rows(i).Item("Back_Sizer_1_Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set3.Rows(n).Cells(16).Value) = 0 Then dgv_SizingDetails_Set3.Rows(n).Cells(16).Value = ""

                        dgv_SizingDetails_Set3.Rows(n).Cells(17).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Boiler_1_IdNo").ToString)
                        dgv_SizingDetails_Set3.Rows(n).Cells(18).Value = Format(Val(dt2.Rows(i).Item("Boiler_1_Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set3.Rows(n).Cells(18).Value) = 0 Then dgv_SizingDetails_Set3.Rows(n).Cells(18).Value = ""

                        dgv_SizingDetails_Set3.Rows(n).Cells(19).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Cooker_1_IdNo").ToString)
                        dgv_SizingDetails_Set3.Rows(n).Cells(20).Value = Format(Val(dt2.Rows(i).Item("Cooker_1_Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set3.Rows(n).Cells(20).Value) = 0 Then dgv_SizingDetails_Set3.Rows(n).Cells(20).Value = ""

                        dgv_SizingDetails_Set3.Rows(n).Cells(21).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Front_Sizer_2_IdNo").ToString)
                        dgv_SizingDetails_Set3.Rows(n).Cells(22).Value = Format(Val(dt2.Rows(i).Item("Front_Sizer_2_Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set3.Rows(n).Cells(22).Value) = 0 Then dgv_SizingDetails_Set3.Rows(n).Cells(22).Value = ""

                        dgv_SizingDetails_Set3.Rows(n).Cells(23).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Back_Sizer_2_IdNo").ToString)
                        dgv_SizingDetails_Set3.Rows(n).Cells(24).Value = Format(Val(dt2.Rows(i).Item("Back_Sizer_2_Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set3.Rows(n).Cells(24).Value) = 0 Then dgv_SizingDetails_Set3.Rows(n).Cells(24).Value = ""

                        dgv_SizingDetails_Set3.Rows(n).Cells(25).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Boiler_2_IdNo").ToString)
                        dgv_SizingDetails_Set3.Rows(n).Cells(26).Value = Format(Val(dt2.Rows(i).Item("Boiler_2_Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set3.Rows(n).Cells(26).Value) = 0 Then dgv_SizingDetails_Set3.Rows(n).Cells(26).Value = ""

                        dgv_SizingDetails_Set3.Rows(n).Cells(27).Value = Common_Procedures.Employee_IdNoToName(Con, dt2.Rows(i).Item("Cooker_2_IdNo").ToString)
                        dgv_SizingDetails_Set3.Rows(n).Cells(28).Value = Format(Val(dt2.Rows(i).Item("Cooker_2_Meters").ToString), "#########0.00")
                        If Val(dgv_SizingDetails_Set3.Rows(n).Cells(28).Value) = 0 Then dgv_SizingDetails_Set3.Rows(n).Cells(28).Value = ""

                        dgv_SizingDetails_Set3.Rows(n).Cells(29).Value = dt2.Rows(i).Item("Remarks").ToString
                        dgv_SizingDetails_Set3.Rows(n).Cells(30).Value = Format(Val(dt2.Rows(i).Item("Party_PickUp_Percentage").ToString), "#########0.00")
                        dgv_SizingDetails_Set3.Rows(n).Cells(31).Value = Common_Procedures.Vendor_IdNoToName(Con, dt2.Rows(i).Item("Vendor_IdNo").ToString)
                        dgv_SizingDetails_Set3.Rows(n).Cells(32).Value = Format(Val(dt2.Rows(i).Item("Actual_Gross_Weight").ToString), "#########0.000")
                        dgv_SizingDetails_Set3.Rows(n).Cells(33).Value = Format(Val(dt2.Rows(i).Item("Actual_Net_Weight").ToString), "#########0.000")
                        dgv_SizingDetails_Set3.Rows(n).Cells(34).Value = Format(Val(dt2.Rows(i).Item("Actual_pickup").ToString), "#########0.00")
                        If Trim(dgv_SizingDetails_Set3.Rows(n).Cells(8).Value) <> "" Then
                            Siz_Lck_STS = True
                            For j = 0 To dgv_SizingDetails_Set3.ColumnCount - 1
                                If j <> 2 And j <> 3 And j <> 4 And j <> 30 Then
                                    dgv_SizingDetails_Set3.Rows(n).Cells(j).Style.BackColor = Color.LightGray
                                End If
                            Next
                        End If

                    Next i

                End If
                dgv_SizingDetails_Set3.Rows.Add()

                NoCaclSTS = False
                TotalSizing_Calculation()
                NoCaclSTS = True

                da2 = New SqlClient.SqlDataAdapter("select a.*, b.Count_Name, c.Mill_Name , d.Ledger_Name as Godown_Name from Specification_YarnTaken_Details a INNER JOIN Count_Head b on a.Count_IdNo = b.Count_IdNo INNER JOIN Mill_Head c on a.Mill_IdNo = c.Mill_IdNo LEFT OUTER JOIN Ledger_Head d ON d.Ledger_IdNo = a.WareHouse_IdNo where a.Set_Code = '" & Trim(NewCode) & "' Order by a.sl_no", Con)
                dt2 = New DataTable
                da2.Fill(dt2)

                dgv_YarnTakenDetails.Rows.Clear()
                SNo = 0

                If dt2.Rows.Count > 0 Then

                    For i = 0 To dt2.Rows.Count - 1

                        n = dgv_YarnTakenDetails.Rows.Add()

                        SNo = SNo + 1
                        dgv_YarnTakenDetails.Rows(n).Cells(0).Value = Val(SNo)
                        dgv_YarnTakenDetails.Rows(n).Cells(1).Value = dt2.Rows(i).Item("Count_Name").ToString
                        dgv_YarnTakenDetails.Rows(n).Cells(2).Value = dt2.Rows(i).Item("Yarn_Type").ToString
                        dgv_YarnTakenDetails.Rows(n).Cells(3).Value = dt2.Rows(i).Item("BabyCone_setcode_forSelection").ToString
                        dgv_YarnTakenDetails.Rows(n).Cells(4).Value = dt2.Rows(i).Item("Mill_Name").ToString

                        dgv_YarnTakenDetails.Rows(n).Cells(5).Value = Val(dt2.Rows(i).Item("Bags").ToString)
                        If Val(dgv_YarnTakenDetails.Rows(n).Cells(5).Value) = 0 Then dgv_YarnTakenDetails.Rows(n).Cells(5).Value = ""

                        dgv_YarnTakenDetails.Rows(n).Cells(6).Value = Format(Val(dt2.Rows(i).Item("Weight_Cone").ToString), "########0.000")
                        If Val(dgv_YarnTakenDetails.Rows(n).Cells(6).Value) = 0 Then dgv_YarnTakenDetails.Rows(n).Cells(6).Value = ""

                        dgv_YarnTakenDetails.Rows(n).Cells(7).Value = Val(dt2.Rows(i).Item("Cones").ToString)
                        If Val(dgv_YarnTakenDetails.Rows(n).Cells(7).Value) = 0 Then dgv_YarnTakenDetails.Rows(n).Cells(7).Value = ""

                        dgv_YarnTakenDetails.Rows(n).Cells(8).Value = Format(Val(dt2.Rows(i).Item("Weight").ToString), "########0.000")
                        'dgv_YarnTakenDetails.Rows(n).Cells(9).Value = Common_Procedures.Ledger_IdNoToName(Con, Val(dt2.Rows(i).Item("Godown_Name").ToString))
                        dgv_YarnTakenDetails.Rows(n).Cells(9).Value = dt2.Rows(i).Item("Godown_Name").ToString
                    Next i

                End If

                NoCaclSTS = False
                TotalYarnTaken_Calculation()
                NoCaclSTS = True

                da2 = New SqlClient.SqlDataAdapter("select a.* from Specification_BabyCone_Details a where a.set_code = '" & Trim(NewCode) & "' Order by a.sl_no", Con)
                dt2 = New DataTable
                da2.Fill(dt2)

                dgv_BabyConeDetails.Rows.Clear()
                SNo = 0

                If dt2.Rows.Count > 0 Then

                    For i = 0 To dt2.Rows.Count - 1

                        n = dgv_BabyConeDetails.Rows.Add()

                        SNo = SNo + 1
                        dgv_BabyConeDetails.Rows(n).Cells(0).Value = Val(SNo)
                        dgv_BabyConeDetails.Rows(n).Cells(1).Value = Val(dt2.Rows(i).Item("Bags").ToString)
                        If Val(dgv_BabyConeDetails.Rows(n).Cells(1).Value) = 0 Then dgv_BabyConeDetails.Rows(n).Cells(1).Value = ""

                        dgv_BabyConeDetails.Rows(n).Cells(2).Value = Val(dt2.Rows(i).Item("Cones").ToString)
                        If Val(dgv_BabyConeDetails.Rows(n).Cells(2).Value) = 0 Then dgv_BabyConeDetails.Rows(n).Cells(2).Value = ""

                        dgv_BabyConeDetails.Rows(n).Cells(3).Value = Format(Val(dt2.Rows(i).Item("Gross_Weight").ToString), "#########0.000")

                        If Val(txt_BabyCone_DeliveryWeight.Text) <> 0 Or Trim(txt_InvoiceCode.Text) <> "" Or Val(txt_InvoiceCode.Text) <> 0 Then
                            For j = 0 To dgv_BabyConeDetails.ColumnCount - 1
                                dgv_BabyConeDetails.Rows(n).Cells(j).Style.BackColor = Color.LightGray
                            Next
                        End If

                    Next i

                End If

                If Val(txt_BabyCone_DeliveryWeight.Text) <> 0 Or Trim(txt_InvoiceCode.Text) <> "" Or Val(txt_InvoiceCode.Text) <> 0 Then
                    txt_WgtEmYBag.Enabled = False
                    txt_WgtEmYBag.BackColor = Color.LightGray

                    txt_WgtEmYCone.Enabled = False
                    txt_WgtEmYCone.BackColor = Color.LightGray
                    txt_BabyCone_TareWeight.Enabled = False
                    txt_BabyCone_TareWeight.BackColor = Color.LightGray
                End If

                If Val(txt_BabyCone_DeliveryWeight.Text) <> 0 Then

                    chk_RewindingStatus.Enabled = False
                    chk_RewindingStatus.BackColor = Color.LightGray

                    txt_RewindingCones.Enabled = False
                    txt_RewindingCones.BackColor = Color.LightGray

                    cbo_Rw_MillName.Enabled = False
                    cbo_Rw_MillName.BackColor = Color.LightGray

                    txt_RwExcSht.Enabled = False
                    txt_RwExcSht.BackColor = Color.LightGray


                End If

                NoCaclSTS = False
                Total_BabyCone_Calculation()
                NoCaclSTS = True

                txt_RewindingCones.Text = Val(dt1.Rows(0).Item("rw_cones").ToString)
                txt_RwExShrtWt.Text = Val(dt1.Rows(0).Item("rwexshrtweight").ToString)
                cbo_Rw_MillName.Text = Common_Procedures.Mill_IdNoToName(Con, dt1.Rows(0).Item("rw_millidno").ToString)

                txt_RwExcSht.Text = Format(Val(dt1.Rows(0).Item("Rw_ExcessShort").ToString), "#########0.000")
                If Val(txt_RwExcSht.Text) = 0 Then
                    txt_RwExcSht.Text = ""
                End If
                lbl_PickUp_Perc.Text = Format(Val(dt1.Rows(0).Item("pickup_percentage").ToString), "#########0.00")
                txt_PickUpPerc_Party.Text = Format(Val(dt1.Rows(0).Item("PickupPercentage_Party").ToString), "#########0.00")

                lbl_Elongation_Mtr.Text = Format(Val(dt1.Rows(0).Item("elongation_meter").ToString), "#########0.00")
                lbl_Elongation_Perc.Text = Format(Val(dt1.Rows(0).Item("elongation_percentage").ToString), "#########0.00")




                da2 = New SqlClient.SqlDataAdapter("select a.*, b.Item_Name from Stock_Chemical_Processing_Details a INNER JOIN Sizing_Item_Head b ON a.Item_IdNo = b.Item_IdNo where a.Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "' Order by a.sl_no", Con)
                dt2 = New DataTable
                da2.Fill(dt2)

                dgv_ChemicalDetails.Rows.Clear()
                SNo = 0

                If dt2.Rows.Count > 0 Then

                    For i = 0 To dt2.Rows.Count - 1

                        n = dgv_ChemicalDetails.Rows.Add()

                        SNo = SNo + 1
                        dgv_ChemicalDetails.Rows(n).Cells(0).Value = Val(SNo)
                        dgv_ChemicalDetails.Rows(n).Cells(1).Value = dt2.Rows(i).Item("Item_Name").ToString
                        dgv_ChemicalDetails.Rows(n).Cells(2).Value = Format(Math.Abs(Val(dt2.Rows(i).Item("Mixing_1").ToString)), "#########0.000")
                        If Val(dgv_ChemicalDetails.Rows(n).Cells(2).Value) = 0 Then dgv_ChemicalDetails.Rows(n).Cells(2).Value = ""
                        dgv_ChemicalDetails.Rows(n).Cells(3).Value = Format(Math.Abs(Val(dt2.Rows(i).Item("Mixing_2").ToString)), "#########0.000")
                        If Val(dgv_ChemicalDetails.Rows(n).Cells(3).Value) = 0 Then dgv_ChemicalDetails.Rows(n).Cells(3).Value = ""
                        dgv_ChemicalDetails.Rows(n).Cells(4).Value = Format(Math.Abs(Val(dt2.Rows(i).Item("Mixing_3").ToString)), "#########0.000")
                        If Val(dgv_ChemicalDetails.Rows(n).Cells(4).Value) = 0 Then dgv_ChemicalDetails.Rows(n).Cells(4).Value = ""

                        dgv_ChemicalDetails.Rows(n).Cells(5).Value = Format(Math.Abs(Val(dt2.Rows(i).Item("Mixing_4").ToString)), "#########0.000")
                        If Val(dgv_ChemicalDetails.Rows(n).Cells(5).Value) = 0 Then dgv_ChemicalDetails.Rows(n).Cells(5).Value = ""
                        dgv_ChemicalDetails.Rows(n).Cells(6).Value = Format(Math.Abs(Val(dt2.Rows(i).Item("Mixing_5").ToString)), "#########0.000")
                        If Val(dgv_ChemicalDetails.Rows(n).Cells(6).Value) = 0 Then dgv_ChemicalDetails.Rows(n).Cells(6).Value = ""
                        ''''
                        dgv_ChemicalDetails.Rows(n).Cells(7).Value = Format(Math.Abs(Val(dt2.Rows(i).Item("Mixing_6").ToString)), "#########0.000")
                        If Val(dgv_ChemicalDetails.Rows(n).Cells(7).Value) = 0 Then dgv_ChemicalDetails.Rows(n).Cells(7).Value = ""

                        dgv_ChemicalDetails.Rows(n).Cells(8).Value = Format(Val(dt2.Rows(i).Item("Mixing_AddLess").ToString), "########0.00")
                        If Val(dgv_ChemicalDetails.Rows(n).Cells(8).Value) = 0 Then dgv_ChemicalDetails.Rows(n).Cells(8).Value = ""
                        ''''
                        dgv_ChemicalDetails.Rows(n).Cells(9).Value = Format(Math.Abs(Val(dt2.Rows(i).Item("Quantity").ToString)), "#########0.000")

                        dgv_ChemicalDetails.Rows(n).Cells(10).Value = Format(Math.Abs(Val(dt2.Rows(i).Item("Rate").ToString)), "#########0.00")
                        If Val(dgv_ChemicalDetails.Rows(n).Cells(10).Value) = 0 Then dgv_ChemicalDetails.Rows(n).Cells(10).Value = ""

                        dgv_ChemicalDetails.Rows(n).Cells(11).Value = Format(Math.Abs(Val(dt2.Rows(i).Item("Amount").ToString)), "#########0.00")
                        If Val(dgv_ChemicalDetails.Rows(n).Cells(11).Value) = 0 Then dgv_ChemicalDetails.Rows(n).Cells(11).Value = ""

                    Next i

                End If

                NoCaclSTS = False
                Total_Chemical_Calculation()
                NoCaclSTS = True

                dt2.Clear()

            Else

                new_record()

            End If

            dt1.Clear()

            If Siz_Lck_STS = True Or Trim(txt_InvoiceCode.Text) <> "" Or Val(txt_InvoiceCode.Text) <> 0 Then

                cbo_Ledger.Enabled = False
                cbo_Ledger.BackColor = Color.LightGray

                cbo_Type.Enabled = False
                cbo_Type.BackColor = Color.LightGray

                If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1220" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1263" Then '---- Sri Meenakshi Sizing (Somanur)
                    cbo_CountName.Enabled = False
                    cbo_CountName.BackColor = Color.LightGray

                    cbo_MillName.Enabled = False
                    cbo_MillName.BackColor = Color.LightGray
                End If

            End If

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT MOVE RECORDS...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        Finally
            dt1.Dispose()
            da1.Dispose()

            dt2.Dispose()
            da2.Dispose()

            Grid_Cell_DeSelect()
            If cbo_Ledger.Enabled And cbo_Ledger.Visible Then cbo_Ledger.Focus()
            NoCaclSTS = False
        End Try

    End Sub

    Public Sub delete_record() Implements Interface_MDIActions.delete_record
        Dim cmd As New SqlClient.SqlCommand
        Dim trans As SqlClient.SqlTransaction
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim Dt1 As New DataTable
        Dim NewCode As String = ""
        Dim vOrdByNo As String = 0
        Dim vDbName As String = ""
        Dim vEntLedIdNo As Integer
        Dim TexComp_ID As String = 0
        Dim UID As Single = 0
        Dim vUsrNm As String = "", vAcPwd As String = "", vUnAcPwd As String = ""


        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1036" Then '----- KALAIMAGAL TEXTILES (AVINASHI)
            Common_Procedures.Password_Input = ""
            Dim g As New Admin_Password
            g.ShowDialog()

            UID = 1
            Common_Procedures.get_Admin_Name_PassWord_From_DB(vUsrNm, vAcPwd, vUnAcPwd)

            vAcPwd = Common_Procedures.Decrypt(Trim(vAcPwd), Trim(Common_Procedures.UserCreation_AcPassWord.passPhrase) & Trim(Val(UID)) & Trim(UCase(vUsrNm)), Trim(Common_Procedures.UserCreation_AcPassWord.saltValue) & Trim(Val(UID)) & Trim(UCase(vUsrNm)))
            vUnAcPwd = Common_Procedures.Decrypt(Trim(vUnAcPwd), Trim(Common_Procedures.UserCreation_UnAcPassWord.passPhrase) & Trim(Val(UID)) & Trim(UCase(vUsrNm)), Trim(Common_Procedures.UserCreation_UnAcPassWord.saltValue) & Trim(Val(UID)) & Trim(UCase(vUsrNm)))

            If Trim(Common_Procedures.Password_Input) <> Trim(vAcPwd) And Trim(Common_Procedures.Password_Input) <> Trim(vUnAcPwd) Then
                MessageBox.Show("Invalid Admin Password", "ADMIN PASSWORD FAILED...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                Exit Sub
            End If
        End If

        If Trim(TrnTo_DbName) <> "" Then
            vDbName = Trim(TrnTo_DbName) & ".."
        End If

        NewCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

        vOrdByNo = Common_Procedures.OrderBy_CodeToValue(Trim(lbl_SetNo.Text))

        If Common_Procedures.UserRight_NEWCheck(Common_Procedures.UserRightsCheckFor.DeletingEntry, Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_STATEMENT, New_Entry, Me, Con, "Specification_Head", "set_Code", NewCode, "set_date", "(set_Code = '" & Trim(NewCode) & "')") = False Then Exit Sub



        If MessageBox.Show("Do you want to Delete?", "FOR DELETION...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) <> Windows.Forms.DialogResult.Yes Then
            Exit Sub
        End If

        If New_Entry = True Then
            MessageBox.Show("This is New Entry", "DOES NOT DELETE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            Exit Sub
        End If


        Da = New SqlClient.SqlDataAdapter("select count(*) from Specification_Head where Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(NewCode) & "' and invoice_code <> ''", Con)
        Dt = New DataTable
        Da.Fill(Dt)
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                If Val(Dt.Rows(0)(0).ToString) > 0 Then
                    MessageBox.Show("Invoice Prepared", "DOES NOT DELETE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                    Exit Sub
                End If
            End If
        End If
        Dt.Clear()

        Da = New SqlClient.SqlDataAdapter("select count(*) from Stock_SizedPavu_Processing_Details where Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "' and Pavu_Delivery_Code <> ''", Con)
        Dt = New DataTable
        Da.Fill(Dt)
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                If Val(Dt.Rows(0)(0).ToString) > 0 Then
                    MessageBox.Show("Pavu Delivered", "DOES NOT DELETE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                    Exit Sub
                End If
            End If
        End If
        Dt.Clear()

        Da = New SqlClient.SqlDataAdapter("select sum(Delivered_Weight) from Stock_BabyCone_Processing_Details where Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "'", Con)
        Dt = New DataTable
        Da.Fill(Dt)
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                If Val(Dt.Rows(0)(0).ToString) > 0 Then
                    MessageBox.Show("BabyCone Delivered to Party", "DOES NOT DELETE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                    Exit Sub
                End If
            End If
        End If
        Dt.Clear()

        Da = New SqlClient.SqlDataAdapter("select sum(RwDelivered_Weight) from Stock_RewindingBabyCone_Processing_Details where Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "'", Con)
        Dt = New DataTable
        Da.Fill(Dt)
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                If Val(Dt.Rows(0)(0).ToString) > 0 Then
                    MessageBox.Show("BabyCone Delivered for Rewinding", "DOES NOT DELETE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                    Exit Sub
                End If
            End If
        End If
        Dt.Clear()


        trans = Con.BeginTransaction

        Try

            cmd.Connection = Con
            cmd.Transaction = trans

            Call Common_Procedures.User_Modification_Updation(Con, "HEAD", Me.Name, "DELETE", "Specification_Head", "set_code", Val(lbl_Company.Tag), NewCode, lbl_SetNo.Text, Val(vOrdByNo), Pk_Condition, "", "", New_Entry, True, "", "", "Auto_SetNo, Entry_VAT_GST_Type, set_code, setcode_forSelection, Company_IdNo, for_OrderBy, Entry_Type, warping_slno, sizing_slno, total_warpmeters, Total_Warping_Beams, total_warping_ends, total_warping_gross_weight, total_warping_tare_weight, total_warping_net_weight, total_pavu_gross_weight, total_pavu_tare_weight, total_pavu_net_weight, total_pavu_beam, total_pavu_pcs, total_pavu_meters, total_yarn_bags, total_yarn_cones, total_yarn_weight, total_baby_bags, total_baby_cones, total_baby_gross_weight, total_baby_tare_weight, total_baby_net_weight, total_chemical_consumption, total_chemical_amount, PickupPercentage_Party, SocietySet_Status, Meters_Yards, invoice_code, invoice_increment", trans)
            Call Common_Procedures.User_Modification_Updation(Con, "DETAILS", Me.Name, "DELETE", "Specification_Warping_Details", "set_code", Val(lbl_Company.Tag), NewCode, lbl_SetNo.Text, Val(vOrdByNo), Pk_Condition, "", "", New_Entry, True, "Ends_Name, Gross_Weight, Tare_Weight, Net_Weight, Shift, Warp_Beam_No, Start_Time, End_Time, Total_Time, Front_Warper_1_IdNo, Front_Warper_1_Meters, Back_Warper_1_IdNo, Back_Warper_1_meters, Helper_1_IdNo, Helper_1_Meters, Front_Warper_2_IdNo, Front_Warper_2_Meters, Back_Warper_2_IdNo, Back_Warper_2_meters, Helper_2_IdNo, Helper_2_Meters, Remarks", "Sl_No", "set_code, Company_IdNo, set_no, for_OrderBy, set_date, Ledger_IdNo, count_idno, Mill_IdNo, Warp_SlNo", trans, "Warp_SlNo")
            Call Common_Procedures.User_Modification_Updation(Con, "DETAILS", Me.Name, "DELETE", "Stock_SizedPavu_Processing_Details", "set_code", Val(lbl_Company.Tag), NewCode, lbl_SetNo.Text, Val(vOrdByNo), Pk_Condition, "", "", New_Entry, True, "Beam_No, Gross_Weight, Tare_Weight, Net_Weight, Noof_Pcs, Meters_Pc, Meters, Shift, Start_Time, End_Time, Total_Time, Front_Sizer_1_IdNo, Front_Sizer_1_Meters, Back_Sizer_1_IdNo, Back_Sizer_1_meters, Boiler_1_IdNo, Boiler_1_Meters, cooker_1_IdNo, Cooker_1_Meters, Front_Sizer_2_IdNo, Front_Sizer_2_Meters, Back_Sizer_2_IdNo, Back_Sizer_2_meters, Boiler_2_IdNo, Boiler_2_Meters, Cooker_2_IdNo, Cooker_2_Meters, Remarks, Party_PickUp_Percentage, Vendor_IdNo", "Sl_No", "Reference_Code, Company_IdNo, Reference_No, for_OrderBy, Reference_Date, Ledger_IdNo, Set_Code, Set_No, setcode_forSelection, Ends_Name, count_idno, Mill_IdNo, Beam_Width_Idno, Sizing_SlNo", trans, "Sizing_SlNo")
            Call Common_Procedures.User_Modification_Updation(Con, "DETAILS", Me.Name, "DELETE", "Specification_YarnTaken_Details", "set_code", Val(lbl_Company.Tag), NewCode, lbl_SetNo.Text, Val(vOrdByNo), Pk_Condition, "", "", New_Entry, True, "count_idno, Yarn_Type, BabyCone_setcode_forSelection, Mill_IdNo, Bags, Weight_Cone, Cones, Weight", "Sl_No", "set_code, Company_IdNo, set_no, for_OrderBy, set_date, Ledger_IdNo", trans)
            Call Common_Procedures.User_Modification_Updation(Con, "DETAILS", Me.Name, "DELETE", "Specification_BabyCone_Details", "set_code", Val(lbl_Company.Tag), NewCode, lbl_SetNo.Text, Val(vOrdByNo), Pk_Condition, "", "", New_Entry, True, "Bags, Cones, Gross_Weight", "Sl_No", "set_code, Company_IdNo, set_no, for_OrderBy, set_date, Ledger_IdNo, Mill_IdNo, Count_IdNo", trans)
            Call Common_Procedures.User_Modification_Updation(Con, "DETAILS", Me.Name, "DELETE", "Stock_Chemical_Processing_Details", "Reference_Code", Val(lbl_Company.Tag), Trim(Pk_Condition) & NewCode, lbl_SetNo.Text, Val(vOrdByNo), Pk_Condition, "", "", New_Entry, True, "Item_IdNo, Mixing_1, Mixing_2, Mixing_3, Mixing_4, Mixing_5, Quantity, Rate, Amount", "Sl_No", "Reference_Code, Company_IdNo, Reference_No, For_OrderBy, Reference_Date, Ledger_IdNo, Party_Bill_No", trans)

            If Common_Procedures.settings.Combine_Textile_Sizing_Software_Status = 1 Then

                vEntLedIdNo = Val(Common_Procedures.get_FieldValue(Con, "Specification_Head", "ledger_idno", "(set_code = '" & Trim(NewCode) & "')", , trans))
                TexComp_ID = Val(Common_Procedures.get_FieldValue(Con, "ledger_head", "Textile_To_CompanyIdNo", "(ledger_idno = " & Str(Val(vEntLedIdNo)) & ")", , trans))

                If Val(TexComp_ID) <> 0 Then
                    cmd.CommandText = "Delete from " & Trim(vDbName) & "Stock_Yarn_Processing_Details Where Reference_Code = '" & Trim(Pk_Condition_Tex) & Trim(NewCode) & "'"
                    cmd.ExecuteNonQuery()
                End If

            End If

            Da = New SqlClient.SqlDataAdapter("Select * from Specification_YarnTaken_Details Where Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(NewCode) & "' and yarn_type = 'BABY' and BabyCone_setcode_forSelection <> ''", Con)
            Da.SelectCommand.Transaction = trans
            Dt1 = New DataTable
            Da.Fill(Dt1)

            If Dt1.Rows.Count > 0 Then

                For i = 0 To Dt1.Rows.Count - 1


                    cmd.CommandText = "Update Stock_BabyCone_Processing_Details set Delivered_Bags = Delivered_Bags - " & Str(Val(Dt1.Rows(i).Item("Bags").ToString)) & ", Delivered_Cones = Delivered_Cones - " & Str(Val(Dt1.Rows(i).Item("cones").ToString)) & ", Delivered_Weight = Delivered_Weight - " & Str(Val(Dt1.Rows(i).Item("Weight").ToString)) & " Where setcode_forSelection = '" & Trim(Dt1.Rows(i).Item("BabyCone_setcode_forSelection").ToString) & "'"
                    cmd.ExecuteNonQuery()

                Next i

            End If
            Dt1.Clear()

            cmd.CommandText = "Delete from Specification_Warping_Details Where Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(NewCode) & "'"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Delete from Specification_YarnTaken_Details Where Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(NewCode) & "'"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Delete from Specification_BabyCone_Details Where Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(NewCode) & "'"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Delete from Stock_BabyCone_Processing_Details Where Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "'"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Delete from Stock_RewindingBabyCone_Processing_Details Where Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "'"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Delete from Stock_Chemical_Processing_Details Where Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "'"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Delete from Stock_SizedPavu_Processing_Details Where Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "'"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Delete from Stock_Yarn_Processing_Details Where Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "'"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Delete from Stock_Empty_BeamBagCone_Processing_Details Where Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "'"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Delete from Specification_Head where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(NewCode) & "'"
            cmd.ExecuteNonQuery()

            If Trim(cbo_Type.Text) = "WARPING" Then
                cmd.CommandText = "Update Warping_Head set Set_Code = '',Set_Increment = Set_Increment - 1  Where Set_Code = '" & Trim(NewCode) & "'"
                cmd.ExecuteNonQuery()
            End If
            trans.Commit()

            new_record()

            MessageBox.Show("Deleted Sucessfully!!!", "FOR DELETION...", MessageBoxButtons.OKCancel, MessageBoxIcon.Information)

        Catch ex As Exception
            trans.Rollback()
            MessageBox.Show(ex.Message, "DOES NOT DELETE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        Finally
            trans.Dispose()
            cmd.Dispose()
            Da.Dispose()
            Dt.Dispose()

            If cbo_Type.Enabled And cbo_Type.Visible Then cbo_Type.Focus()

        End Try

    End Sub

    Public Sub filter_record() Implements Interface_MDIActions.filter_record
        If Filter_Status = False Then

            Dim da As New SqlClient.SqlDataAdapter
            Dim dt1 As New DataTable
            Dim dt2 As New DataTable
            Dim dt3 As New DataTable

            da = New SqlClient.SqlDataAdapter("select a.Ledger_DisplayName from Ledger_AlaisHead a, ledger_head b where (a.Ledger_IdNo = 0 or b.AccountsGroup_IdNo = 10) and a.Ledger_IdNo = b.Ledger_IdNo order by a.Ledger_DisplayName", Con)
            da.Fill(dt1)
            cbo_Filter_PartyName.DataSource = dt1
            cbo_Filter_PartyName.DisplayMember = "Ledger_DisplayName"

            da = New SqlClient.SqlDataAdapter("select Count_name from Count_Head order by count_name", Con)
            da.Fill(dt2)
            cbo_Filter_CountName.DataSource = dt2
            cbo_Filter_CountName.DisplayMember = "count_name"

            da = New SqlClient.SqlDataAdapter("select Mill_name from Mill_Head order by Mill_name", Con)
            da.Fill(dt3)
            cbo_Filter_MillName.DataSource = dt3
            cbo_Filter_MillName.DisplayMember = "Mill_name"

            dtp_Filter_Fromdate.Text = Common_Procedures.Company_FromDate
            dtp_Filter_ToDate.Text = Common_Procedures.Company_ToDate
            cbo_Filter_PartyName.Text = ""
            cbo_Filter_CountName.Text = ""
            cbo_Filter_MillName.Text = ""
            cbo_Filter_PartyName.SelectedIndex = -1
            cbo_Filter_CountName.SelectedIndex = -1
            cbo_Filter_MillName.SelectedIndex = -1
            dgv_Filter_Details.Rows.Clear()

        End If

        pnl_Filter.Visible = True
        pnl_Filter.Enabled = True
        pnl_Back.Enabled = False

        If dtp_Filter_Fromdate.Enabled And dtp_Filter_Fromdate.Visible Then dtp_Filter_Fromdate.Focus()
    End Sub

    Public Sub movefirst_record() Implements Interface_MDIActions.movefirst_record
        Dim da As New SqlClient.SqlDataAdapter
        Dim dt As New DataTable
        Dim movno As String

        Try

            da = New SqlClient.SqlDataAdapter("select top 1 set_no from Specification_Head where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code like '%/" & Trim(Common_Procedures.FnYearCode) & "'  and Entry_VAT_GST_Type = '" & Trim(vEnt_VAT_GST_Type) & "' Order by for_Orderby, set_no", Con)
            dt = New DataTable
            da.Fill(dt)

            movno = ""
            If dt.Rows.Count > 0 Then
                If IsDBNull(dt.Rows(0)(0).ToString) = False Then
                    movno = Trim(dt.Rows(0)(0).ToString)
                End If
            End If

            dt.Clear()
            dt.Dispose()
            da.Dispose()

            If Trim(movno) <> "" Then move_record(movno)

        Catch ex As Exception
            MessageBox.Show(ex.Message, "FOR  MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Sub movenext_record() Implements Interface_MDIActions.movenext_record
        Dim da As New SqlClient.SqlDataAdapter
        Dim dt As New DataTable
        Dim movno As String = ""
        Dim OrdByNo As Single = 0

        Try

            OrdByNo = Common_Procedures.OrderBy_CodeToValue(Trim(lbl_SetNo.Text))

            da = New SqlClient.SqlDataAdapter("select top 1 set_no from Specification_Head where for_orderby > " & Str(Format(Val(OrdByNo), "#########0.00")) & " and company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code like '%/" & Trim(Common_Procedures.FnYearCode) & "' and Entry_VAT_GST_Type = '" & Trim(vEnt_VAT_GST_Type) & "' Order by for_Orderby, set_no", Con)
            dt = New DataTable
            da.Fill(dt)

            movno = ""
            If dt.Rows.Count > 0 Then
                If IsDBNull(dt.Rows(0)(0).ToString) = False Then
                    movno = dt.Rows(0)(0).ToString
                End If
            End If

            If Trim(movno) <> "" Then move_record(movno)

        Catch ex As Exception
            MessageBox.Show(ex.Message, "FOR  MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Sub moveprevious_record() Implements Interface_MDIActions.moveprevious_record
        Dim da As New SqlClient.SqlDataAdapter
        Dim dt As New DataTable
        Dim movno As String = ""
        Dim OrdByNo As Single = 0

        Try

            OrdByNo = Common_Procedures.OrderBy_CodeToValue(Trim(lbl_SetNo.Text))

            da = New SqlClient.SqlDataAdapter("select top 1 set_no from Specification_Head where for_orderby < " & Str(Format(Val(OrdByNo), "########0.00")) & " and company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code like '%/" & Trim(Common_Procedures.FnYearCode) & "' and Entry_VAT_GST_Type = '" & Trim(vEnt_VAT_GST_Type) & "' Order by for_Orderby desc, set_no desc", Con)
            dt = New DataTable
            da.Fill(dt)

            movno = ""
            If dt.Rows.Count > 0 Then
                If IsDBNull(dt.Rows(0)(0).ToString) = False Then
                    movno = dt.Rows(0)(0).ToString
                End If
            End If

            If Trim(movno) <> "" Then move_record(movno)

        Catch ex As Exception
            MessageBox.Show(ex.Message, "FOR  MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Sub movelast_record() Implements Interface_MDIActions.movelast_record
        Dim da As New SqlClient.SqlDataAdapter
        Dim dt As New DataTable
        Dim movno As String = ""

        Try
            da = New SqlClient.SqlDataAdapter("select top 1 set_no from Specification_Head where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code like '%/" & Trim(Common_Procedures.FnYearCode) & "' and Entry_VAT_GST_Type = '" & Trim(vEnt_VAT_GST_Type) & "' Order by for_Orderby desc, set_no desc", Con)
            dt = New DataTable
            da.Fill(dt)

            movno = ""
            If dt.Rows.Count > 0 Then
                If IsDBNull(dt.Rows(0)(0).ToString) = False Then
                    movno = dt.Rows(0)(0).ToString
                End If
            End If

            If Trim(movno) <> "" Then move_record(movno)

        Catch ex As Exception
            MessageBox.Show(ex.Message, "FOR  MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Sub new_record() Implements Interface_MDIActions.new_record
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim n As Integer
        Dim Newcode As String
        Dim sno As Integer
        Dim da As New SqlClient.SqlDataAdapter
        Dim dt As New DataTable
        Dim movno As String = ""
        Dim OrdByNo As Single = 0

        Try

            clear()

            New_Entry = True

            lbl_SetNo.Text = Common_Procedures.get_MaxCode(Con, "Specification_Head", "set_code", "For_OrderBy", "( Entry_VAT_GST_Type = '" & Trim(vEnt_VAT_GST_Type) & "' )", Val(lbl_Company.Tag), Common_Procedures.FnYearCode)
            If cbo_SizingMachineNo.Visible = True Then
                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1288" Then '---- KKP SIZING (NAMMAKAL)
                    lbl_SetNo.Tag = Trim(lbl_SetNo.Text) & Trim(cbo_SizingMachineNo.Text)
                Else
                    lbl_SetNo.Tag = Trim(cbo_SizingMachineNo.Text) & Trim(lbl_SetNo.Text)
                End If

            Else
                lbl_SetNo.Tag = lbl_SetNo.Text

            End If

            lbl_SetNo.ForeColor = Color.Red

            Da1 = New SqlClient.SqlDataAdapter("select Top 1 a.* from Specification_Head a where a.company_idno = " & Str(Val(lbl_Company.Tag)) & " and a.set_code like '%/" & Trim(Common_Procedures.FnYearCode) & "' and Entry_VAT_GST_Type = '" & Trim(vEnt_VAT_GST_Type) & "' Order by a.for_Orderby desc, a.set_no desc", Con)
            Dt1 = New DataTable
            Da1.Fill(Dt1)
            If Dt1.Rows.Count > 0 Then
                If Dt1.Rows(0).Item("Meters_Yards").ToString <> "" Then cbo_Meters_Yards.Text = Dt1.Rows(0).Item("Meters_Yards").ToString
                If Dt1.Rows(0).Item("rw_status").ToString <> "" Then
                    If Val(Dt1.Rows(0).Item("rw_status").ToString) = 1 Then
                        chk_RewindingStatus.Checked = True
                    End If
                End If


                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1220" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1263" Then

                    Try

                        OrdByNo = Common_Procedures.OrderBy_CodeToValue(Trim(lbl_SetNo.Text))

                        da = New SqlClient.SqlDataAdapter("select top 1 set_no from Specification_Head where for_orderby < " & Str(Format(Val(OrdByNo), "########0.00")) & " and company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code like '%/" & Trim(Common_Procedures.FnYearCode) & "' and Entry_VAT_GST_Type = '" & Trim(vEnt_VAT_GST_Type) & "' Order by for_Orderby desc, set_no desc", Con)
                        dt = New DataTable
                        da.Fill(dt)

                        movno = ""
                        If dt.Rows.Count > 0 Then
                            If IsDBNull(dt.Rows(0)(0).ToString) = False Then
                                movno = dt.Rows(0)(0).ToString
                            End If
                        End If

                        If Trim(movno) <> "" Then

                            Newcode = Trim(PkCondition_TIN) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(movno) & "/" & Trim(Common_Procedures.FnYearCode)

                            Da1 = New SqlClient.SqlDataAdapter("select a.*, b.Item_Name from Stock_Chemical_Processing_Details a INNER JOIN Item_Head b ON a.Item_IdNo = b.Item_IdNo where a.Reference_Code = '" & Trim(Newcode) & "' Order by a.sl_no", Con)
                            Dt2 = New DataTable
                            Da1.Fill(Dt2)

                            dgv_ChemicalDetails.Rows.Clear()
                            sno = 0

                            If Dt2.Rows.Count > 0 Then

                                For i = 0 To Dt2.Rows.Count - 1

                                    n = dgv_ChemicalDetails.Rows.Add()

                                    sno = sno + 1
                                    dgv_ChemicalDetails.Rows(n).Cells(0).Value = Val(sno)
                                    dgv_ChemicalDetails.Rows(n).Cells(1).Value = Dt2.Rows(i).Item("Item_Name").ToString
                                    dgv_ChemicalDetails.Rows(n).Cells(10).Value = Dt2.Rows(i).Item("Rate").ToString

                                Next i

                            End If
                        End If

                    Catch ex As Exception
                        MessageBox.Show(ex.Message, "FOR  MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

                    End Try

                    Dt2.Clear()

                End If

                If Trim(Common_Procedures.settings.CustomerCode) = "1282" Then
                    If Dt1.Rows(0).Item("rw_millidno").ToString <> "" Then cbo_Rw_MillName.Text = Common_Procedures.Mill_IdNoToName(Con, Dt1.Rows(0).Item("rw_millidno").ToString)
                End If
            End If
            Dt1.Clear()

        Catch ex As Exception
            MessageBox.Show(ex.Message, "FOR NEW RECORD...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        Finally

            Dt1.Dispose()
            Da1.Dispose()

            'If Trim(Common_Procedures.settings.CustomerCode) = "1263" Or _
            '    Trim(Common_Procedures.settings.CustomerCode) = "1031" Or _
            '    Trim(Common_Procedures.settings.CustomerCode) = "1066" Or _
            '    Trim(Common_Procedures.settings.CustomerCode) = "1035" Or _
            '    Trim(Common_Procedures.settings.CustomerCode) = "1346" Or _
            '    Trim(Common_Procedures.settings.CustomerCode) = "1036" _
            '    Then
            '    If cbo_Ledger.Visible And cbo_Ledger.Enabled Then cbo_Ledger.Focus()
            'Else
            If cbo_SizingMachineNo.Enabled And cbo_SizingMachineNo.Visible Then
                cbo_SizingMachineNo.Focus()
            ElseIf cbo_Type.Enabled And cbo_Type.Visible Then
                cbo_Type.Focus()
            Else
                If cbo_Ledger.Visible And cbo_Ledger.Enabled Then cbo_Ledger.Focus()
                'If dtp_Date.Enabled And dtp_Date.Visible Then dtp_Date.Focus()
            End If
            'End If

        End Try

    End Sub

    Public Sub open_record() Implements Interface_MDIActions.open_record
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim movno As String, inpno As String
        Dim RecCode As String

        Try

            inpno = InputBox("Enter Set No.", "FOR FINDING...")

            RecCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(inpno) & "/" & Trim(Common_Procedures.FnYearCode)

            Da = New SqlClient.SqlDataAdapter("select set_no from Specification_Head where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(RecCode) & "'", Con)
            Dt = New DataTable
            Da.Fill(Dt)

            movno = ""
            If Dt.Rows.Count > 0 Then
                If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                    movno = Trim(Dt.Rows(0)(0).ToString)
                End If
            End If

            Dt.Clear()
            Dt.Dispose()
            Da.Dispose()

            If Trim(movno) <> "" Then
                move_record(movno)

            Else
                MessageBox.Show("Set No. does not exists", "DOES NOT FIND...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

            End If

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT FIND...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Sub insert_record() Implements Interface_MDIActions.insert_record
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim movno As String, inpno As String
        Dim RecCode As String

        Try

            If Common_Procedures.UserRight_NEWCheck(Common_Procedures.UserRightsCheckFor.InsertingEntry, Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_STATEMENT, New_Entry, Me) = False Then Exit Sub

            inpno = InputBox("Enter New Set No.", "FOR NEW SET INSERTION...")


            If Val(inpno) = 0 And Len(Val(inpno)) > 0 Then
                MessageBox.Show("Invalid Set No", "DOES NOT INSERT NEW RECEIPT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                Exit Sub
            End If

            RecCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(inpno) & "/" & Trim(Common_Procedures.FnYearCode)

            Da = New SqlClient.SqlDataAdapter("select set_no from Specification_Head where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(RecCode) & "'", Con)
            Dt = New DataTable
            Da.Fill(Dt)

            movno = ""
            If Dt.Rows.Count > 0 Then
                If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                    movno = Trim(Dt.Rows(0)(0).ToString)
                End If
            End If

            Dt.Clear()
            Dt.Dispose()
            Da.Dispose()

            If Trim(movno) <> "" Then
                move_record(movno)

            Else
                If Trim(inpno) = "" Then
                    MessageBox.Show("Invalid Set No", "DOES NOT INSERT NEW RECEIPT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

                Else
                    new_record()
                    Insert_Entry = True
                    lbl_SetNo.Text = Trim(UCase(inpno))
                    If cbo_SizingMachineNo.Visible = True Then
                        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1288" Then '---- KKP SIZING (NAMMAKAL)
                            lbl_SetNo.Tag = Trim(lbl_SetNo.Text) & Trim(cbo_SizingMachineNo.Text)
                        Else
                            lbl_SetNo.Tag = Trim(cbo_SizingMachineNo.Text) & Trim(lbl_SetNo.Text)
                        End If

                    Else
                        lbl_SetNo.Tag = lbl_SetNo.Text
                    End If

                End If

            End If

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT INSERT NEW RECEIPT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Sub save_record() Implements Interface_MDIActions.save_record
        Dim cmd As New SqlClient.SqlCommand
        Dim tr As SqlClient.SqlTransaction
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim vSetCd As String, vSetNo As String
        Dim vBySetCd As String = "", vBySetNo As String = ""
        Dim NewCode As String = ""
        Dim vOrdByNo As String = 0
        Dim Led_ID As Integer, Delv_ID As Integer, Rec_ID As Integer, Gdn_IdNo As Integer
        Dim trans_id As Integer = 0
        Dim Bw_id As Integer = 0
        Dim WrpM_id As Integer = 0
        Dim SzM_id As Integer = 0
        Dim Cnt_ID As Integer = 0
        Dim Mil_ID As Integer, RwMil_ID As Integer
        Dim Sno As Integer = 0
        Dim Partcls As String = "", vYrnPartcls As String = ""
        Dim Prtcls2 As String = ""
        Dim PBlNo As String = ""
        Dim EntID As String = ""
        Dim Dup_BmNo As String
        Dim YCnt_ID As Integer = 0
        Dim YMil_ID As Integer = 0
        Dim Itm_ID As Integer
        Dim vSELC_SETCODE As String
        Dim vSETCD_PKCOND As String
        Dim sWarpWgt As String
        Dim vWrpSlNo As Integer, vSizSlNo As Integer, vNoofEnds As Integer, vNoofWrpYrds As Integer
        Dim vTotEnds As Single = 0, vTotWrpMtrs As Single = 0
        Dim a() As String
        Dim i As Integer
        Dim vTotYrnBags As Single, vTotYrnCones As Single, vTotYrnWeight As Single
        Dim vTotBabyBags As Single, vTotBabyCones As Single, vTotBabyGrsWgt As Single
        Dim vTotChemQty As Single, vTotChemAmt As Single
        Dim vRwSTS As Integer = 0, vSocSetSTS As Integer = 0
        Dim v_NoNeed_Stock_Posting As Integer = 0
        Dim Delivery_Id As Integer = 0
        Dim v_W_SlNo As Integer, v_S_SlNo As Integer
        Dim v_W_Mtrs As Single = 0
        Dim v_W_Ends As Integer = 0
        Dim Nr As Long
        Dim v_EndsNM As String
        Dim Yrn_Typ As String, StNo As String
        Dim Mid As Integer, Bgs As Integer, Cns As Integer
        Dim Wt As Single
        Dim vWarpWgt1 As Single, vWarpWgt2 As Single, vWarpWgt3 As Single
        Dim vSizMtr1 As Single, vSizMtr2 As Single, vSizMtr3 As Single
        Dim Emp_ID As Integer
        Dim FtEmp_ID As Integer, Ft2Emp_ID As Integer
        Dim BkEmp_ID As Integer, Bk2Emp_ID As Integer
        Dim HrEmp_ID As Integer, Hr2Emp_ID As Integer
        Dim Eds2FtEmp_ID As Integer, Eds2Ft2Emp_ID As Integer
        Dim Eds2BkEmp_ID As Integer, Eds2Bk2Emp_ID As Integer
        Dim Eds2HrEmp_ID As Integer, Eds2Hr2Emp_ID As Integer
        Dim Eds3FtEmp_ID As Integer, Eds3Ft2Emp_ID As Integer
        Dim Eds3BkEmp_ID As Integer, Eds3Bk2Emp_ID As Integer
        Dim Eds3HrEmp_ID As Integer, Eds3Hr2Emp_ID As Integer
        Dim Sz1FtEmp_ID As Integer, Sz1Ft2Emp_ID As Integer
        Dim Sz1BkEmp_ID As Integer, Sz1Bk2Emp_ID As Integer
        Dim Sz1BlEmp_ID As Integer, Sz1Bl2Emp_ID As Integer
        Dim Sz1CkEmp_ID As Integer, Sz1Ck2Emp_ID As Integer
        Dim Sz2FtEmp_ID As Integer, Sz2Ft2Emp_ID As Integer
        Dim Sz2BkEmp_ID As Integer, Sz2Bk2Emp_ID As Integer
        Dim Sz2BlEmp_ID As Integer, Sz2Bl2Emp_ID As Integer
        Dim Sz2CkEmp_ID As Integer, Sz2Ck2Emp_ID As Integer
        Dim Sz3FtEmp_ID As Integer, Sz3Ft2Emp_ID As Integer
        Dim Sz3BkEmp_ID As Integer, Sz3Bk2Emp_ID As Integer
        Dim Sz3BlEmp_ID As Integer, Sz3Bl2Emp_ID As Integer
        Dim Sz3CkEmp_ID As Integer, Sz3Ck2Emp_ID As Integer
        Dim Mtrs_Yrds As String = ""
        Dim Sz1Vndr_ID As Integer, Sz2Vndr_ID As Integer, Sz3Vndr_ID As Integer
        Dim vPrevSetNo As String = ""
        Dim vPrevSetDte As Date
        Dim FrntWrpr1_Mtrs As String = ""
        Dim BackWrpr1_Mtrs As String = ""
        Dim Hlpr1_Mtrs As String = ""
        Dim FrntWrpr2_Mtrs As String = ""
        Dim BackWrpr2_Mtrs As String = ""
        Dim Hlpr2_Mtrs As String = ""
        Dim FrntSizr1_Mtrs As String = 0
        Dim BackSizr1_Mtrs As String = 0
        Dim Boilr1_Mtrs As String = 0
        Dim Cookr1_Mtrs As String = 0
        Dim FrntSizr2_Mtrs As String = 0
        Dim BackSizr2_Mtrs As String = 0
        Dim Boilr2_Mtrs As String = 0
        Dim Cookr2_Mtrs As String = 0
        Dim Tot_SzSl_Bms As Integer = 0
        Dim TexComp_ID As String = 0
        Dim TexLed_ID As String = 0
        Dim vEntLedIdNo As String = 0
        Dim TexCnt_iD As String = 0
        Dim TexMil_iD As String = 0
        Dim vNewFrmTYpe As String = ""
        Dim vNewFrmIDNo As Integer = 0
        Dim vDbName As String = ""
        Dim BeamNo_Id As Integer = 0
        Dim Shift_ID As Integer = 0
        Dim LmType_ID As Integer = 0


        Dim LedID_RATE_CALC As Integer = 0
        Dim CntID_RATE_CALC As Integer = 0
        Dim cntName_RATE_CALC As String = ""
        Dim da1 As New SqlClient.SqlDataAdapter
        Dim Dt2 As New DataTable


        'If Common_Procedures.settings.CustomerCode = "1282" Then
        '    GetRateDetails_FromLedger()
        'End If

        If Val(lbl_Company.Tag) = 0 Then
            MessageBox.Show("Invalid Company Selection", "DOES NOT SAVE...", MessageBoxButtons.OK, MessageBoxIcon.Error)
            Exit Sub
        End If

        If Trim(TrnTo_DbName) <> "" Then
            vDbName = Trim(TrnTo_DbName) & ".."
        End If

        Con = New SqlClient.SqlConnection(Common_Procedures.Connection_String)
        Con.Open()


        vOrdByNo = Common_Procedures.OrderBy_CodeToValue(Trim(lbl_SetNo.Text))

        WrpM_id = Common_Procedures.WarpingMachineNO_NameToIdNo(Con, cbo_Warping_Machineno.Text)
        SzM_id = Common_Procedures.SizingMachineNO_NameToIdNo(Con, cbo_SizingMachineNo.Text)
        LmType_ID = Common_Procedures.LoomType_NameToIdNo(Con, cbo_LoomType.Text)

        lbl_SetNo.Tag = Trim(lbl_SetNo.Text)

        If cbo_SizingMachineNo.Visible Then
            If SzM_id = 0 Then
                MessageBox.Show("Invalid Sizing Machine No", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                If cbo_SizingMachineNo.Enabled And cbo_SizingMachineNo.Visible Then cbo_SizingMachineNo.Focus()
                Exit Sub
            End If

            ' MACHINE CHECKING FOR BRT ================================================================================================
            If Common_Procedures.settings.CustomerCode = "1282" Then
                If cbo_SizingMachineNo.Text.ToUpper.ToString = "A" And cbo_Warping_Machineno.Text.ToUpper.ToString = "CD" Then
                    MessageBox.Show("Invalid Warping Machine Selection.", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                    If cbo_Warping_Machineno.Enabled And cbo_Warping_Machineno.Visible Then cbo_Warping_Machineno.Focus()
                    Exit Sub
                End If
                If cbo_SizingMachineNo.Text.ToUpper.ToString = "B" And cbo_Warping_Machineno.Text.ToUpper.ToString = "ABE" Then
                    MessageBox.Show("Invalid Warping Machine Selection.", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                    If cbo_Warping_Machineno.Enabled And cbo_Warping_Machineno.Visible Then cbo_Warping_Machineno.Focus()
                    Exit Sub
                End If
            End If
            ' MACHINE CHECKING FOR BRT ================================================================================================


            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1288" Then '---- KKP SIZING (NAMMAKAL)
                lbl_SetNo.Tag = Trim(lbl_SetNo.Text) & Trim(cbo_SizingMachineNo.Text)
            Else
                lbl_SetNo.Tag = Trim(cbo_SizingMachineNo.Text) & Trim(lbl_SetNo.Text)
            End If

        End If


        ' RATE MASTER CHECKING FOR BRT SIZING ============================================================================================
        If Common_Procedures.settings.CustomerCode = "1282" Then
            LedID_RATE_CALC = Common_Procedures.Ledger_AlaisNameToIdNo(Con, cbo_Ledger.Text)
            CntID_RATE_CALC = Common_Procedures.Count_NameToIdNo(Con, cbo_CountName.Text)
            cntName_RATE_CALC = Microsoft.VisualBasic.Mid(Trim(cbo_CountName.Text.ToString), 1, 2)

            If Val(LedID_RATE_CALC) <> 0 And cbo_Ledger.Text.ToString.ToUpper.TrimEnd.TrimStart <> "BANU RADHA TEXTILES" Then
                da1 = New SqlClient.SqlDataAdapter("Select a.* from Ledger_Rate_Details a where a.Ledger_IdNo =" & Val(LedID_RATE_CALC) & " and a.Count = '" & Trim(cntName_RATE_CALC) & "' and " & Val(txt_Ends.Text) & " BETWEEN (a.Ends_From) and (a.Ends_To) and a.Loom_Type = '" & Trim(cbo_LoomType.Text) & "'", Con)

                Dt1 = New DataTable
                da1.Fill(Dt1)

                If Dt1.Rows.Count = 0 Then
                    MessageBox.Show("Ledger Rate Master is not available ", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                    tab_Main.SelectTab(3)
                    btn_Rate_Details.Focus()
                    Exit Sub
                End If
                Dt1.Clear()
                Dt1.Dispose()
                da1.Dispose()
            End If
        End If

        ' RATE MASTER CHECKING FOR BRT SIZING ============================================================================================

        If cbo_Warping_Machineno.Visible Then
            If WrpM_id = 0 Then
                MessageBox.Show("Invalid Warping Machine No", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                If cbo_Warping_Machineno.Enabled And cbo_Warping_Machineno.Visible Then cbo_Warping_Machineno.Focus()
                Exit Sub
            End If
        End If

        NewCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

        If Common_Procedures.UserRight_NEWCheck(Common_Procedures.UserRightsCheckFor.SavingEntry, Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_STATEMENT, New_Entry, Me, Con, "Specification_Head", "set_Code", NewCode, "set_date", "(set_Code = '" & Trim(NewCode) & "')", "(Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and set_Code LIKE '%/" & Trim(Common_Procedures.FnYearCode) & "')", "for_Orderby desc, set_No desc", dtp_Date.Value.Date) = False Then Exit Sub




        If Val(lbl_Company.Tag) = 0 Then
            MessageBox.Show("Invalid Company Selection", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            Exit Sub
        End If

        If pnl_Back.Enabled = False Then
            MessageBox.Show("Close Other Windows", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            Exit Sub
        End If

        If IsDate(dtp_Date.Text) = False Then
            MessageBox.Show("Invalid Date", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            If dtp_Date.Enabled And dtp_Date.Visible Then dtp_Date.Focus()
            Exit Sub
        End If

        If Not (dtp_Date.Value.Date >= Common_Procedures.Company_FromDate And dtp_Date.Value.Date <= Common_Procedures.Company_ToDate) Then
            MessageBox.Show("Date is out of financial range", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            If dtp_Date.Enabled And dtp_Date.Visible Then dtp_Date.Focus()
            Exit Sub
        End If


        If Trim(cbo_Type.Text) = "" Then
            MessageBox.Show("Invalid Type", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            If cbo_Type.Enabled And cbo_Type.Visible Then cbo_Type.Focus()
            Exit Sub
        End If

        Led_ID = Common_Procedures.Ledger_AlaisNameToIdNo(Con, cbo_Ledger.Text)
        If Led_ID = 0 Then
            MessageBox.Show("Invalid Party Name", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            If cbo_Ledger.Enabled And cbo_Ledger.Visible Then cbo_Ledger.Focus()
            Exit Sub
        End If


        Mil_ID = Common_Procedures.Mill_NameToIdNo(Con, cbo_MillName.Text)
        If Mil_ID = 0 Then
            MessageBox.Show("Invalid Mill Name", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            If cbo_MillName.Enabled And cbo_MillName.Visible Then cbo_MillName.Focus()
            Exit Sub
        End If

        Cnt_ID = Common_Procedures.Count_NameToIdNo(Con, cbo_CountName.Text)
        If Cnt_ID = 0 Then
            MessageBox.Show("Invalid Mill Name", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            If cbo_CountName.Enabled And cbo_CountName.Visible Then cbo_CountName.Focus()
            Exit Sub
        End If
        If Val(txt_Ends.Text) = 0 Then
            MessageBox.Show("Invalid Ends Name", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            If txt_Ends.Enabled Then txt_Ends.Focus()
            Exit Sub
        End If

        If Val(txt_WarpMeters.Text) = 0 Then
            MessageBox.Show("Invalid Warp Meters", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            If txt_WarpMeters.Enabled Then txt_WarpMeters.Focus()
            Exit Sub
        End If

        Bw_id = Common_Procedures.BeamWidth_NameToIdNo(Con, cbo_BeamWidth.Text)

        Gdn_IdNo = Common_Procedures.Ledger_NameToIdNo(Con, cbo_Grid_WareHouse.Text)

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1220" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1263" Then '---- Sri Meenakshi Sizing (Somanur)

            vPrevSetNo = ""
            vPrevSetDte = #1/1/2000#

            Da = New SqlClient.SqlDataAdapter("select top 1 * from Specification_Head where for_orderby < " & Str(Val(vOrdByNo)) & " and company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code LIKE '%/" & Trim(Common_Procedures.FnYearCode) & "' and Entry_VAT_GST_Type = '" & Trim(vEnt_VAT_GST_Type) & "' Order by for_Orderby desc, set_no desc", Con)
            Dt1 = New DataTable
            Da.Fill(Dt1)
            If Dt1.Rows.Count > 0 Then
                vPrevSetNo = Dt1.Rows(0).Item("set_no").ToString
                vPrevSetDte = Dt1.Rows(0).Item("set_date")

                If DateDiff(DateInterval.Day, vPrevSetDte, dtp_Date.Value.Date) < 0 Then
                    MessageBox.Show("Invalid Date - Set Date Should not less than Previous Set Date " & Chr(13) & "(Set No : " & Trim(vPrevSetNo) & "     Set Date : " & vPrevSetDte.ToShortDateString & ")", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                    If dtp_Date.Enabled = True And dtp_Date.Visible = True Then dtp_Date.Focus()
                    Exit Sub
                End If

            End If
            Dt1.Clear()
        End If

        vPrevSetNo = ""
        vPrevSetDte = #1/1/2000#

        Da = New SqlClient.SqlDataAdapter("select top 1 * from Specification_Head Where Ledger_IdNo = " & Str(Val(Led_ID)) & " and  for_orderby < " & Str(Val(vOrdByNo)) & " and company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code LIKE '%/" & Trim(Common_Procedures.FnYearCode) & "' and Entry_VAT_GST_Type = '" & Trim(vEnt_VAT_GST_Type) & "' Order by for_Orderby desc, set_no desc", Con)
        Dt1 = New DataTable
        Da.Fill(Dt1)
        If Dt1.Rows.Count > 0 Then
            vPrevSetNo = Dt1.Rows(0).Item("set_no").ToString
            vPrevSetDte = Dt1.Rows(0).Item("set_date")

            If DateDiff(DateInterval.Day, vPrevSetDte, dtp_Date.Value.Date) < 0 Then
                MessageBox.Show("Invalid Date - Set Date Should not less than Previous Set Date to this party" & Chr(13) & "(Set No : " & Trim(vPrevSetNo) & "     Set Date : " & vPrevSetDte.ToShortDateString & ")", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                If dtp_Date.Enabled = True And dtp_Date.Visible = True Then dtp_Date.Focus()
                Exit Sub
            End If

        End If
        Dt1.Clear()

        With dgv_WarpingDetails_Set1
            For i = 0 To .RowCount - 1

                If Val(.Rows(i).Cells(4).Value) <> 0 Then

                    If Val(.Rows(i).Cells(1).Value) = 0 Then
                        MessageBox.Show("Invalid Ends Name", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                        tab_Main.SelectTab(0)
                        tab_WarpingDeatils.SelectTab(0)
                        If .Rows.Count <= 0 Then .Rows.Add()
                        .Focus()
                        .CurrentCell = .Rows(i).Cells(1)
                        .CurrentCell.Selected = True
                        Exit Sub
                    End If

                    If Val(.Rows(i).Cells(11).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(10).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Front Warper1", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(0)
                            tab_WarpingDeatils.SelectTab(0)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(10)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(13).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(12).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Back Warper1", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(0)
                            tab_WarpingDeatils.SelectTab(0)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(12)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(15).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(14).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Helper1", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(0)
                            tab_WarpingDeatils.SelectTab(0)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(14)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(17).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(16).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid front Warper1", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(0)
                            tab_WarpingDeatils.SelectTab(0)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(16)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    'If BeamNo_Id = 0 Then
                    '    MessageBox.Show("Invalid Employee Name", "DOES NOT SAVE...", MessageBoxButtons.OK, MessageBoxIcon.Error)
                    '    If .Enabled And .Visible Then
                    '        .Focus()
                    '        .CurrentCell = .Rows(i).Cells(6)
                    '    End If
                    '    Exit Sub
                    'End If
                    If Val(.Rows(i).Cells(19).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(18).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Back Warper2", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(0)
                            tab_WarpingDeatils.SelectTab(0)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(18)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(21).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(20).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Helper2", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(0)
                            tab_WarpingDeatils.SelectTab(0)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(20)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                End If

            Next

        End With

        With dgv_WarpingDetails_Set2

            For i = 0 To .RowCount - 1

                If Val(.Rows(i).Cells(4).Value) <> 0 Then

                    If Val(.Rows(i).Cells(1).Value) = 0 Then
                        MessageBox.Show("Invalid Ends Name", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                        tab_Main.SelectTab(0)
                        tab_WarpingDeatils.SelectTab(1)
                        If .Rows.Count <= 0 Then .Rows.Add()
                        .Focus()
                        .CurrentCell = .Rows(i).Cells(1)
                        .CurrentCell.Selected = True
                        Exit Sub
                    End If

                    If Val(.Rows(i).Cells(11).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(10).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Front Warper1", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(0)
                            tab_WarpingDeatils.SelectTab(1)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(10)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(13).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(12).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Back Warper1", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(0)
                            tab_WarpingDeatils.SelectTab(1)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(12)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(15).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(14).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Back Warper1", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(0)
                            tab_WarpingDeatils.SelectTab(1)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(14)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(17).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(16).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Helper1 ", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(0)
                            tab_WarpingDeatils.SelectTab(1)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(16)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(19).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(18).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Back Warper2", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(0)
                            tab_WarpingDeatils.SelectTab(1)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(18)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(21).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(20).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Helper2", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(0)
                            tab_WarpingDeatils.SelectTab(1)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(20)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If

                    End If

                End If

            Next

        End With

        With dgv_WarpingDetails_Set3

            For i = 0 To .RowCount - 1

                If Val(.Rows(i).Cells(4).Value) <> 0 Then
                    If Val(.Rows(i).Cells(1).Value) = 0 Then
                        MessageBox.Show("Invalid Ends Name", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                        tab_Main.SelectTab(0)
                        tab_WarpingDeatils.SelectTab(2)
                        If .Rows.Count <= 0 Then .Rows.Add()
                        .Focus()
                        .CurrentCell = .Rows(i).Cells(1)
                        .CurrentCell.Selected = True

                        Exit Sub

                    End If

                    If Val(.Rows(i).Cells(11).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(10).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Front Warper1", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(0)
                            tab_WarpingDeatils.SelectTab(2)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(10)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(13).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(12).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Back Warper1", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(0)
                            tab_WarpingDeatils.SelectTab(2)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(12)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(15).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(14).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Back Warper1", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(0)
                            tab_WarpingDeatils.SelectTab(2)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(14)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(17).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(16).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Helper1 ", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(0)
                            tab_WarpingDeatils.SelectTab(2)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(16)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(19).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(18).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Back Warper2", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(0)
                            tab_WarpingDeatils.SelectTab(2)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(18)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(21).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(20).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Helper2", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(0)
                            tab_WarpingDeatils.SelectTab(2)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(20)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If

                    End If

                End If

            Next

        End With


        With dgv_SizingDetails_Set1

            Dup_BmNo = ""
            For i = 0 To .RowCount - 1

                If Val(.Rows(i).Cells(7).Value) <> 0 Then

                    If Trim(.Rows(i).Cells(1).Value) = "" Then
                        MessageBox.Show("Invalid BeamNo", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                        tab_Main.SelectTab(1)
                        tab_SizingDetails.SelectTab(0)
                        .CurrentCell = .Rows(i).Cells(1)
                        .Focus()
                        Exit Sub
                    End If

                    If InStr(1, Trim(UCase(Dup_BmNo)), "~" & Trim(UCase(.Rows(i).Cells(1).Value)) & "~") > 0 Then
                        MessageBox.Show("Duplicate BeamNo(" & Trim(.Rows(i).Cells(1).Value) & ")", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                        tab_Main.SelectTab(1)
                        tab_SizingDetails.SelectTab(0)
                        .CurrentCell = .Rows(i).Cells(1)
                        .Focus()
                        Exit Sub
                    End If
                    Dup_BmNo = Trim(Dup_BmNo) & "~" & Trim(.Rows(i).Cells(1).Value) & "~"

                    If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1282" Then '---- BRT Sizing(Somanur)  -  B.R.T Sizing  (Somanur)

                        NewCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)
                        Da = New SqlClient.SqlDataAdapter("select setcode_forSelection from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code <> '" & Trim(Pk_Condition) & Trim(NewCode) & "' and Reference_Code LIKE '%/" & Trim(Common_Procedures.FnYearCode) & "' and Beam_No = '" & Trim(.Rows(i).Cells(1).Value) & "'", Con)
                        Dt1 = New DataTable
                        Da.Fill(Dt1)
                        If Dt1.Rows.Count > 0 Then

                            MessageBox.Show("Duplicate BeamNo(" & Trim(.Rows(i).Cells(1).Value) & ") - Already entered in Set No : " & Trim(Dt1.Rows(0).Item("setcode_forSelection").ToString), "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            If dtp_Date.Enabled = True And dtp_Date.Visible = True Then dtp_Date.Focus()
                            Exit Sub

                        End If
                        Dt1.Clear()

                    End If

                    If Val(.Rows(i).Cells(14).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(13).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Front Sizer1", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(0)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(13)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(16).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(15).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Back Sizer1", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(0)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(15)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(18).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(17).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Boiler1", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(0)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(17)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(20).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(19).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Cooker1", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(0)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(19)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(22).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(21).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Front Sizer2", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(0)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(21)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(24).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(23).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Back Sizer2", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(0)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(23)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(26).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(25).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Boiler2", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(0)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(25)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(28).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(27).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Cooker2", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(0)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(27)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                End If

            Next

        End With


        With dgv_SizingDetails_Set2

            For i = 0 To .RowCount - 1

                If Val(.Rows(i).Cells(7).Value) <> 0 Then
                    If Trim(.Rows(i).Cells(1).Value) = "" Then
                        MessageBox.Show("Invalid BeamNo", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                        tab_Main.SelectTab(1)
                        tab_SizingDetails.SelectTab(1)
                        .CurrentCell = .Rows(i).Cells(1)
                        .Focus()
                        Exit Sub
                    End If

                    If InStr(1, Trim(UCase(Dup_BmNo)), "~" & Trim(UCase(.Rows(i).Cells(1).Value)) & "~") > 0 Then
                        MessageBox.Show("Duplicate BeamNo", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                        tab_Main.SelectTab(1)
                        tab_SizingDetails.SelectTab(1)
                        .CurrentCell = .Rows(i).Cells(1)
                        .Focus()
                        Exit Sub
                    End If
                    Dup_BmNo = Trim(Dup_BmNo) & "~" & Trim(.Rows(i).Cells(1).Value) & "~"


                    If Val(.Rows(i).Cells(14).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(13).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Front Sizer1", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(1)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(13)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(16).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(15).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Back Sizer1", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(1)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(15)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(18).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(17).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Boiler1", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(1)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(17)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(20).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(19).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Cooker1", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(1)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(19)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(22).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(21).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Front Sizer2", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(1)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(21)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(24).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(23).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Back Sizer2", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(1)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(23)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(26).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(25).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Boiler2", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(1)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(25)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(28).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(27).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Cooker2", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(1)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(27)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                End If

            Next

        End With

        With dgv_SizingDetails_Set3

            For i = 0 To .RowCount - 1

                If Val(.Rows(i).Cells(7).Value) <> 0 Then

                    If Trim(.Rows(i).Cells(1).Value) = "" Then
                        MessageBox.Show("Invalid BeamNo", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                        tab_Main.SelectTab(1)
                        tab_SizingDetails.SelectTab(2)
                        .CurrentCell = .Rows(i).Cells(1)
                        .Focus()
                        Exit Sub
                    End If

                    If InStr(1, Trim(UCase(Dup_BmNo)), "~" & Trim(UCase(.Rows(i).Cells(1).Value)) & "~") > 0 Then
                        MessageBox.Show("Duplicate BeamNo", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                        tab_Main.SelectTab(1)
                        tab_SizingDetails.SelectTab(2)
                        .CurrentCell = .Rows(i).Cells(1)
                        .Focus()
                        Exit Sub
                    End If
                    Dup_BmNo = Trim(Dup_BmNo) & "~" & Trim(.Rows(i).Cells(1).Value) & "~"

                    If Val(.Rows(i).Cells(14).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(13).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Front Sizer1", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(2)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(13)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(16).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(15).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Back Sizer1", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(2)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(15)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(18).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(17).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Boiler1", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(2)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(17)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(20).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(19).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Cooker1", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(2)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(19)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(22).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(21).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Front Sizer2", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(2)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(21)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(24).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(23).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Back Sizer2", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(2)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(23)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(26).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(25).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Boiler2", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(2)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(25)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                    If Val(.Rows(i).Cells(28).Value) <> 0 Then
                        Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(27).Value)
                        If Val(Emp_ID) = 0 Then
                            MessageBox.Show("Invalid Cooker2", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(2)
                            If .Rows.Count <= 0 Then .Rows.Add()
                            .Focus()
                            .CurrentCell = .Rows(i).Cells(27)
                            .CurrentCell.Selected = True
                            Exit Sub
                        End If
                    End If

                End If

            Next

        End With

        For i = 0 To dgv_YarnTakenDetails.RowCount - 1

            If Val(dgv_YarnTakenDetails.Rows(i).Cells(8).Value) <> 0 Then

                YCnt_ID = Common_Procedures.Count_NameToIdNo(Con, dgv_YarnTakenDetails.Rows(i).Cells(1).Value)
                If Val(YCnt_ID) = 0 Then
                    MessageBox.Show("Invalid CountName", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                    tab_Main.SelectTab(2)
                    dgv_YarnTakenDetails.Focus()
                    dgv_YarnTakenDetails.CurrentCell = dgv_YarnTakenDetails.Rows(i).Cells(1)
                    Exit Sub
                End If

                If Trim(dgv_YarnTakenDetails.Rows(i).Cells(2).Value) = "" Then
                    MessageBox.Show("Invalid Yarn Type", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                    tab_Main.SelectTab(2)
                    dgv_YarnTakenDetails.Focus()
                    dgv_YarnTakenDetails.CurrentCell = dgv_YarnTakenDetails.Rows(i).Cells(2)
                    Exit Sub
                End If

                If Trim(UCase(dgv_YarnTakenDetails.Rows(i).Cells(2).Value)) = "BABY" Then
                    If Trim(UCase(dgv_YarnTakenDetails.Rows(i).Cells(3).Value)) = "" Then
                        MessageBox.Show("Invalid SetNo for BabyCone in Yarn Taken Details", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                        tab_Main.SelectTab(2)
                        dgv_YarnTakenDetails.Focus()
                        dgv_YarnTakenDetails.CurrentCell = dgv_YarnTakenDetails.Rows(i).Cells(3)
                        Exit Sub
                    End If
                End If

                YMil_ID = Common_Procedures.Mill_NameToIdNo(Con, dgv_YarnTakenDetails.Rows(i).Cells(4).Value)
                If Val(YMil_ID) = 0 Then
                    MessageBox.Show("Invalid Mill Name", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                    tab_Main.SelectTab(2)
                    dgv_YarnTakenDetails.Focus()
                    dgv_YarnTakenDetails.CurrentCell = dgv_YarnTakenDetails.Rows(i).Cells(4)
                    Exit Sub
                End If

            End If

        Next

        For i = 0 To dgv_ChemicalDetails.RowCount - 1

            If Val(dgv_ChemicalDetails.Rows(i).Cells(2).Value) <> 0 Then

                Itm_ID = Common_Procedures.Sizing_Item_NameToIdNo(Con, dgv_ChemicalDetails.Rows(i).Cells(1).Value)
                If Val(Itm_ID) = 0 Then
                    MessageBox.Show("Invalid Chemical Name", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                    tab_Main.SelectTab(4)
                    dgv_ChemicalDetails.CurrentCell = dgv_ChemicalDetails.Rows(i).Cells(1)
                    dgv_ChemicalDetails.Focus()
                    Exit Sub
                End If

            End If

        Next

        vWrpSlNo = 1
        vSizSlNo = 0
        sWarpWgt = ""
        vWarpWgt1 = 0 : vWarpWgt2 = 0 : vWarpWgt3 = 0

        If dgv_WarpingDetails_Total_Set1.RowCount > 0 Then
            sWarpWgt = Trim(Val(dgv_WarpingDetails_Total_Set1.Rows(0).Cells(4).Value()))
            vWarpWgt1 = Trim(Val(dgv_WarpingDetails_Total_Set1.Rows(0).Cells(4).Value()))
        End If
        If dgv_WarpingDetails_Total_Set2.RowCount > 0 Then
            If Val(dgv_WarpingDetails_Total_Set2.Rows(0).Cells(4).Value()) <> 0 Then
                sWarpWgt = Trim(sWarpWgt) & "," & Trim(Val(dgv_WarpingDetails_Total_Set2.Rows(0).Cells(4).Value()))
                vWrpSlNo = vWrpSlNo + 1
                vWarpWgt2 = Trim(Val(dgv_WarpingDetails_Total_Set2.Rows(0).Cells(4).Value()))
            End If
        End If
        If dgv_WarpingDetails_Total_Set3.RowCount > 0 Then
            If Val(dgv_WarpingDetails_Total_Set3.Rows(0).Cells(4).Value()) <> 0 Then
                sWarpWgt = Trim(sWarpWgt) & "," & Trim(Val(dgv_WarpingDetails_Total_Set3.Rows(0).Cells(4).Value()))
                vWrpSlNo = vWrpSlNo + 1
                vWarpWgt3 = Trim(Val(dgv_WarpingDetails_Total_Set3.Rows(0).Cells(4).Value()))
            End If
        End If

        vSizSlNo = 1
        vSizMtr1 = 0 : vSizMtr2 = 0 : vSizMtr3 = 0

        If dgv_SizingDetails_Total_Set1.RowCount > 0 Then
            If Val(dgv_SizingDetails_Total_Set1.Rows(0).Cells(7).Value()) <> 0 Then
                vSizMtr1 = Val(dgv_SizingDetails_Total_Set1.Rows(0).Cells(7).Value())
            End If
        End If
        If dgv_SizingDetails_Total_Set2.RowCount > 0 Then
            If Val(dgv_SizingDetails_Total_Set2.Rows(0).Cells(7).Value()) <> 0 Then
                vSizSlNo = vSizSlNo + 1
                vSizMtr2 = Val(dgv_SizingDetails_Total_Set2.Rows(0).Cells(7).Value())
            End If
        End If
        If dgv_SizingDetails_Total_Set3.RowCount > 0 Then
            If Val(dgv_SizingDetails_Total_Set3.Rows(0).Cells(7).Value()) <> 0 Then
                vSizSlNo = vSizSlNo + 1
                vSizMtr3 = Val(dgv_SizingDetails_Total_Set3.Rows(0).Cells(7).Value())
            End If
        End If

        a = Split(Trim(txt_Ends.Text), ",")
        vNoofEnds = 0
        vTotEnds = 0
        For i = 0 To UBound(a)
            vTotEnds = vTotEnds + Val(a(i))
            vNoofEnds = vNoofEnds + 1
        Next

        a = Split(Trim(txt_WarpMeters.Text), ",")
        vTotWrpMtrs = 0
        vNoofWrpYrds = 0
        For i = 0 To UBound(a)
            vTotWrpMtrs = vTotWrpMtrs + Val(a(i))
            vNoofWrpYrds = vNoofWrpYrds + 1
        Next

        'If Val(vWrpSlNo) <> Val(vSizSlNo) Then
        '    MessageBox.Show("Invalid Warping & Sizing Details for DoubleSet", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
        '    If txt_WarpMeters.Enabled Then txt_WarpMeters.Focus()
        '    Exit Sub
        'End If

        If Val(vWrpSlNo) <> 0 And Val(vNoofEnds) <> 0 And Val(vWrpSlNo) > Val(vNoofEnds) Then
            MessageBox.Show("Invalid Ends for Double Ends Set", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            tab_Main.SelectTab(0)
            tab_WarpingDeatils.SelectTab(0)
            'If dgv_WarpingDetails_Set1.Rows.Count <= 0 Then dgv_WarpingDetails_Set1.Rows.Add()
            'dgv_WarpingDetails_Set1.Focus()
            'dgv_WarpingDetails_Set1.CurrentCell = dgv_WarpingDetails_Set1.Rows(0).Cells(1)
            'dgv_WarpingDetails_Set1.CurrentCell.Selected = True
            Exit Sub
        End If

        If Val(vWrpSlNo) <> 0 And Val(vNoofWrpYrds) <> 0 And Val(vWrpSlNo) > Val(vNoofWrpYrds) Then
            MessageBox.Show("Invalid WarpMeters for Double Ends Set", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            If txt_WarpMeters.Enabled Then txt_WarpMeters.Focus()
            Exit Sub
        End If

        If Val(vSizSlNo) <> 0 And Val(vNoofEnds) <> 0 And Val(vSizSlNo) > Val(vNoofEnds) Then
            MessageBox.Show("Invalid Ends for Double Ends Set", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            tab_Main.SelectTab(0)
            tab_WarpingDeatils.SelectTab(0)
            'If dgv_WarpingDetails_Set1.Rows.Count <= 0 Then dgv_WarpingDetails_Set1.Rows.Add()
            'dgv_WarpingDetails_Set1.Focus()
            'dgv_WarpingDetails_Set1.CurrentCell = dgv_WarpingDetails_Set1.Rows(0).Cells(1)
            'dgv_WarpingDetails_Set1.CurrentCell.Selected = True
            Exit Sub
        End If

        If Val(vSizSlNo) <> 0 And Val(vNoofWrpYrds) <> 0 And Val(vSizSlNo) > Val(vNoofWrpYrds) Then
            MessageBox.Show("Invalid WarpMeters for Double Ends Set", "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            If txt_WarpMeters.Enabled Then txt_WarpMeters.Focus()
            Exit Sub
        End If

        Warp_Weight_Calculation_for_Ends1_Ends2_Ends3()

        vRwSTS = 0
        If chk_RewindingStatus.Checked = True Then vRwSTS = 1

        v_NoNeed_Stock_Posting = 0
        If chk_No_Stock_Posting.Checked = True Then v_NoNeed_Stock_Posting = 1


        vSocSetSTS = 0
        If chk_SocietySet.Checked = True Then vSocSetSTS = 1

        RwMil_ID = Common_Procedures.Mill_NameToIdNo(Con, cbo_Rw_MillName.Text)
        If Val(RwMil_ID) = 0 Then
            If dgv_YarnTakenDetails.RowCount > 0 Then
                RwMil_ID = Common_Procedures.Mill_NameToIdNo(Con, dgv_YarnTakenDetails.Rows(0).Cells(4).Value())
            End If
        End If

        vTotYrnBags = 0 : vTotYrnCones = 0 : vTotYrnWeight = 0
        If dgv_YarnTakenDetails_Total.RowCount > 0 Then
            vTotYrnBags = Val(dgv_YarnTakenDetails_Total.Rows(0).Cells(5).Value())
            vTotYrnCones = Val(dgv_YarnTakenDetails_Total.Rows(0).Cells(7).Value())
            vTotYrnWeight = Val(dgv_YarnTakenDetails_Total.Rows(0).Cells(8).Value())
        End If

        vTotBabyBags = 0 : vTotBabyCones = 0 : vTotBabyGrsWgt = 0
        If dgv_BabyConeDetails_Total.RowCount > 0 Then
            vTotBabyBags = Val(dgv_BabyConeDetails_Total.Rows(0).Cells(1).Value())
            vTotBabyCones = Val(dgv_BabyConeDetails_Total.Rows(0).Cells(2).Value())
            vTotBabyGrsWgt = Val(dgv_BabyConeDetails_Total.Rows(0).Cells(3).Value())
        End If

        vTotChemQty = 0 : vTotChemAmt = 0
        If dgv_ChemicalDetails_Total.RowCount > 0 Then
            vTotChemQty = Val(dgv_ChemicalDetails_Total.Rows(0).Cells(2).Value())
            vTotChemAmt = Val(dgv_ChemicalDetails_Total.Rows(0).Cells(11).Value())
        End If

        Mtrs_Yrds = "METERS"
        If Trim(UCase(cbo_Meters_Yards.Text)) = "YARDS" Then
            Mtrs_Yrds = "YARDS"
        End If

        Dim WrpCd As String, WrpNo As String, Wrpdate As String
        WrpCd = ""
        WrpNo = ""
        Wrpdate = ""
        If Trim(UCase(cbo_Type.Text)) = "WARPING" Then
            WrpCd = Trim(lbl_WarpCode.Text)
            WrpNo = Trim(lbl_WarpNo.Text)
            Wrpdate = Trim(lbl_WarpDate.Text)
        Else
            WrpCd = ""
            WrpNo = ""
            Wrpdate = ""
        End If


        tr = Con.BeginTransaction

        Try

            If Insert_Entry = True Or New_Entry = False Then
                NewCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

            Else

                lbl_SetNo.Text = Common_Procedures.get_MaxCode(Con, "Specification_Head", "set_code", "For_OrderBy", "(Entry_VAT_GST_Type = '" & Trim(vEnt_VAT_GST_Type) & "')", Val(lbl_Company.Tag), Common_Procedures.FnYearCode, tr)
                lbl_SetNo.Tag = Trim(lbl_SetNo.Text)
                If cbo_SizingMachineNo.Visible = True Then
                    If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1288" Then '---- KKP SIZING (NAMMAKAL)
                        lbl_SetNo.Tag = Trim(lbl_SetNo.Text) & Trim(cbo_SizingMachineNo.Text)
                    Else
                        lbl_SetNo.Tag = Trim(cbo_SizingMachineNo.Text) & Trim(lbl_SetNo.Text)
                    End If

                End If
                NewCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

            End If

            vOrdByNo = Common_Procedures.OrderBy_CodeToValue(Trim(lbl_SetNo.Text))


            vSETCD_PKCOND = Trim(Pk_Condition) & Trim(NewCode)

            vSELC_SETCODE = Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode) & "/" & Trim(Val(lbl_Company.Tag)) & "/" & Trim(Pk_Condition)

            'If Trim(PkCondition_Entry) <> "" Then
            '    vSELC_SETCODE = Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode) & "/" & Trim(Val(lbl_Company.Tag)) & "/" & Trim(PkCondition_Entry)
            'Else
            '    vSELC_SETCODE = Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode) & "/" & Trim(Val(lbl_Company.Tag))
            'End If

            cmd.Connection = Con
            cmd.Transaction = tr

            cmd.Parameters.Clear()
            cmd.Parameters.AddWithValue("@SetDate", dtp_Date.Value.Date)

            Delivery_Id = Common_Procedures.Delivery_AlaisNameToIdNo(Con, cbo_DeliveryTo.Text, tr)

            ' Rate updation from master instead of opening Rate Details Window 
            If Common_Procedures.settings.CustomerCode = "1282" Then
                Rate_Details_Updation(tr)
            End If

            If New_Entry = True Then

                cmd.CommandText = "Insert into Specification_Head (         SoftwareType_IdNo                                        ,  Entry_VAT_GST_Type       ,          set_code       ,         setcode_forSelection,                 Company_IdNo      ,               set_no          ,               SetNo_Display    ,          for_OrderBy       , set_date,             ledger_idno  ,            count_idno    ,            mill_idno     ,      Beam_Width_Idno    ,           ends_name           ,               pcs_length          ,           tape_length               ,      meters_yards_type    ,               warp_meters           ,               beam_count           ,                 excess_short_yarn      ,                 pickup_percentage      ,                 PickupPercentage_Party      ,                 elongation_meter          ,                 elongation_percentage      ,               remarks            ,              warping_slno  ,         sizing_slno       ,             total_warpmeters ,          warp_weight     ,                 Total_Warping_Beams            ,                 total_warping_ends           ,                 total_warping_gross_weight           ,                 total_warping_tare_weight          ,                 total_warping_net_weight          ,                 total_pavu_gross_weight             ,                 total_pavu_tare_weight             ,                 total_pavu_net_weight             , " &
                                                                  "         total_pavu_beam          ,          total_pavu_pcs                    ,               total_pavu_meters               ,           total_yarn_bags     ,       total_yarn_cones        ,       total_yarn_weight        ,              total_baby_bags  ,              total_baby_cones  ,         total_baby_gross_weight ,               total_baby_tare_weight          ,               total_baby_net_weight           ,  total_chemical_consumption   ,    total_chemical_amount      ,           rw_status     ,                 rw_cones                 ,     rwexshrtweight,         rw_millidno  ,                 Rw_ExcessShort     ,     SocietySet_Status       ,           Meters_Yards   , invoice_code, invoice_increment,             EmptyBag_weight          ,              EmptyCone_weight        ,         Entry_Type           ,        Warp_No      ,          Warp_Code  ,        Warp_Date       ,                               User_Idno       , Warping_Machine_No_IdNo, Sizing_Machine_No_IdNo,              Loom_Type           ,            Inv_Warp_Weight        ,            Warp_Rate           ,              Warp_Amount          ,              Rewinding_weight         ,             Rewinding_Rate          ,              Rewinding_Amount          ,              No_Of_Beams          ,               Packing_Rate       ,             Packing_Amount         ,            Welding_Beams           ,              Welding_Rate         ,              Welding_Amount          ,             Other_Charges           , Excess_Short_Adjustment,Sort_No,No_Need_Stock_Posting,Delivery_To_IdNo,warp_set1_cons_wt      ,                 warp_set1_act_wt      ,                  warp_set1_tot_beam ,warp_set1_from_range     ,               warp_set1_to_range , LoomType_Idno ) " &
                                  "Values                         (" & Str(Val(Common_Procedures.SoftwareTypes.Sizing_Software)) & " , '" & Trim(vEnt_VAT_GST_Type) & "' , '" & Trim(NewCode) & "' , '" & Trim(vSELC_SETCODE) & "', " & Str(Val(lbl_Company.Tag)) & " , '" & Trim(lbl_SetNo.Tag) & "' , '" & Trim(lbl_SetNo.Text) & "' , " & Str(Val(vOrdByNo)) & " , @SetDate, " & Str(Val(Led_ID)) & " , " & Str(Val(Cnt_ID)) & " , " & Str(Val(Mil_ID)) & " , " & Str(Val(Bw_id)) & " , '" & Trim(txt_Ends.Text) & "' , '" & Trim(txt_PcsLength.Text) & "', '" & Trim(txt_TapeLength.Text) & "' , '" & Trim(Mtrs_Yrds) & "' , '" & Trim(txt_WarpMeters.Text) & "' , '" & Trim(lbl_BeamCount.Text) & "' , " & Str(Val(lbl_ExcessShort.Text)) & " , " & Str(Val(lbl_PickUp_Perc.Text)) & "  , " & Str(Val(txt_PickUpPerc_Party.Text)) & " , " & Str(Val(lbl_Elongation_Mtr.Text)) & " , " & Str(Val(lbl_Elongation_Perc.Text)) & " , '" & Trim(txt_Remarks.Text) & "' , " & Str(Val(vWrpSlNo)) & ", " & Str(Val(vSizSlNo)) & " , " & Str(Val(vTotWrpMtrs)) & ", '" & Trim(sWarpWgt) & "' , " & Str(Val(lbl_Total_Warping_Beams.Text)) & " , " & Str(Val(lbl_Total_Warping_Ends.Text)) & ", " & Str(Val(lbl_Total_Warping_GrossWeight.Text)) & " , " & Str(Val(lbl_Total_Warping_TareWeight.Text)) & ", " & Str(Val(lbl_Total_Warping_NetWeight.Text)) & ", " & Str(Val(lbl_Total_Sizing_GrossWeight.Text)) & " , " & Str(Val(lbl_Total_Sizing_TareWeight.Text)) & " , " & Str(Val(lbl_Total_Sizing_NetWeight.Text)) & " , " &
                                                            Str(Val(lbl_Total_Sizing_Beams.Text)) & ", " & Str(Val(lbl_Total_Sizing_Pcs.Text)) & ", " & Str(Val(lbl_Total_Sizing_Meters.Text)) & ", " & Str(Val(vTotYrnBags)) & " , " & Str(Val(vTotYrnCones)) & ", " & Str(Val(vTotYrnWeight)) & ", " & Str(Val(vTotBabyBags)) & ", " & Str(Val(vTotBabyCones)) & ", " & Str(Val(vTotBabyGrsWgt)) & ", " & Str(Val(txt_BabyCone_TareWeight.Text)) & ", " & Str(Val(lbl_BabyCone_NetWeight.Text)) & " , " & Str(Val(vTotChemQty)) & " , " & Str(Val(vTotChemAmt)) & " , " & Str(Val(vRwSTS)) & ", " & Str(Val(txt_RewindingCones.Text)) & ", " & Str(Val(txt_RwExShrtWt.Text)) & ", " & Str(Val(RwMil_ID)) & ", " & Str(Val(txt_RwExcSht.Text)) & ", " & Str(Val(vSocSetSTS)) & ", '" & Trim(Mtrs_Yrds) & "',          '' ,            0     , " & Str(Val(txt_WgtEmYBag.Text)) & " , " & Str(Val(txt_WgtEmYCone.Text)) & ",'" & Trim(cbo_Type.Text) & "' ,'" & Trim(WrpNo) & "','" & Trim(WrpCd) & "','" & Trim(Wrpdate) & "' , " & Str(Val(Common_Procedures.User.IdNo)) & " ,   " & Val(WrpM_id) & " ,    " & Val(SzM_id) & ",'" & Trim(cbo_LoomType.Text) & "' , " & Val(txt_warp_weight.Text) & " , " & Val(txt_warp_Rate.Text) & ",  " & Val(txt_warp_Amount.Text) & ", " & Val(txt_Rewinding_Weight.Text) & ", " & Val(txt_Rewinding_Rate.Text) & ",  " & Val(Txt_Rewinding_Amount.Text) & ",  " & Val(Txt_No_Of_Beams.Text) & ", " & Val(Txt_Beams_Rate.Text) & " ,  " & Val(Txt_Beams_Amount.Text) & ", " & Val(Txt_Welding_Beams.Text) & ", " & Val(Txt_Welding_Rate.Text) & ",  " & Val(Txt_Welding_Amount.Text) & ", " & Val(txt_Other_Charges.Text) & " ,  " & Val(txt_ExcessShort_Adjustment.Text) & ",'" & Trim(txt_SortNo.Text) & "'," & Val(v_NoNeed_Stock_Posting) & "," & Val(Delivery_Id) & "," & Str(Val(txt_warp_dets_tot_consWT.Text)) & "," & Str(Val(txt_FromRange.Text)) & "," & Str(Val(txt_warp_dets_tot_beam.Text)) & "," & Str(Val(txt_FromRange.Text)) & "," & Str(Val(txt_ToRange.Text)) & " , " & Str(Val(LmType_ID)) & " )  "
                Nr = cmd.ExecuteNonQuery()

            Else

                Call Common_Procedures.User_Modification_Updation(Con, "HEAD", Me.Name, "OLD", "Specification_Head", "set_code", Val(lbl_Company.Tag), NewCode, lbl_SetNo.Text, Val(vOrdByNo), Pk_Condition, "", "", New_Entry, False, "", "", "Auto_SetNo, Entry_VAT_GST_Type, set_code, setcode_forSelection, Company_IdNo, for_OrderBy, Entry_Type, warping_slno, sizing_slno, total_warpmeters, Total_Warping_Beams, total_warping_ends, total_warping_gross_weight, total_warping_tare_weight, total_warping_net_weight, total_pavu_gross_weight, total_pavu_tare_weight, total_pavu_net_weight, total_pavu_beam, total_pavu_pcs, total_pavu_meters, total_yarn_bags, total_yarn_cones, total_yarn_weight, total_baby_bags, total_baby_cones, total_baby_gross_weight, total_baby_tare_weight, total_baby_net_weight, total_chemical_consumption, total_chemical_amount, PickupPercentage_Party, SocietySet_Status, Meters_Yards, invoice_code, invoice_increment", tr)
                Call Common_Procedures.User_Modification_Updation(Con, "DETAILS", Me.Name, "OLD", "Specification_Warping_Details", "set_code", Val(lbl_Company.Tag), NewCode, lbl_SetNo.Text, Val(vOrdByNo), Pk_Condition, "", "", New_Entry, False, "Ends_Name, Gross_Weight, Tare_Weight, Net_Weight, Shift, Warp_Beam_No, Start_Time, End_Time, Total_Time, Front_Warper_1_IdNo, Front_Warper_1_Meters, Back_Warper_1_IdNo, Back_Warper_1_meters, Helper_1_IdNo, Helper_1_Meters, Front_Warper_2_IdNo, Front_Warper_2_Meters, Back_Warper_2_IdNo, Back_Warper_2_meters, Helper_2_IdNo, Helper_2_Meters, Remarks", "Sl_No", "set_code, Company_IdNo, set_no, for_OrderBy, set_date, Ledger_IdNo, count_idno, Mill_IdNo, Warp_SlNo", tr, "Warp_SlNo")
                Call Common_Procedures.User_Modification_Updation(Con, "DETAILS", Me.Name, "OLD", "Stock_SizedPavu_Processing_Details", "set_code", Val(lbl_Company.Tag), NewCode, lbl_SetNo.Text, Val(vOrdByNo), Pk_Condition, "", "", New_Entry, False, "Beam_No, Gross_Weight, Tare_Weight, Net_Weight, Noof_Pcs, Meters_Pc, Meters, Shift, Start_Time, End_Time, Total_Time, Front_Sizer_1_IdNo, Front_Sizer_1_Meters, Back_Sizer_1_IdNo, Back_Sizer_1_meters, Boiler_1_IdNo, Boiler_1_Meters, cooker_1_IdNo, Cooker_1_Meters, Front_Sizer_2_IdNo, Front_Sizer_2_Meters, Back_Sizer_2_IdNo, Back_Sizer_2_meters, Boiler_2_IdNo, Boiler_2_Meters, Cooker_2_IdNo, Cooker_2_Meters, Remarks, Party_PickUp_Percentage, Vendor_IdNo", "Sl_No", "Reference_Code, Company_IdNo, Reference_No, for_OrderBy, Reference_Date, Ledger_IdNo, Set_Code, Set_No, setcode_forSelection, Ends_Name, count_idno, Mill_IdNo, Beam_Width_Idno, Sizing_SlNo", tr, "Sizing_SlNo")
                Call Common_Procedures.User_Modification_Updation(Con, "DETAILS", Me.Name, "OLD", "Specification_YarnTaken_Details", "set_code", Val(lbl_Company.Tag), NewCode, lbl_SetNo.Text, Val(vOrdByNo), Pk_Condition, "", "", New_Entry, False, "count_idno, Yarn_Type, BabyCone_setcode_forSelection, Mill_IdNo, Bags, Weight_Cone, Cones, Weight", "Sl_No", "set_code, Company_IdNo, set_no, for_OrderBy, set_date, Ledger_IdNo", tr)
                Call Common_Procedures.User_Modification_Updation(Con, "DETAILS", Me.Name, "OLD", "Specification_BabyCone_Details", "set_code", Val(lbl_Company.Tag), NewCode, lbl_SetNo.Text, Val(vOrdByNo), Pk_Condition, "", "", New_Entry, False, "Bags, Cones, Gross_Weight", "Sl_No", "set_code, Company_IdNo, set_no, for_OrderBy, set_date, Ledger_IdNo, Mill_IdNo, Count_IdNo", tr)
                Call Common_Procedures.User_Modification_Updation(Con, "DETAILS", Me.Name, "OLD", "Stock_Chemical_Processing_Details", "Reference_Code", Val(lbl_Company.Tag), Trim(Pk_Condition) & NewCode, lbl_SetNo.Text, Val(vOrdByNo), Pk_Condition, "", "", New_Entry, False, "Item_IdNo, Mixing_1, Mixing_2, Mixing_3, Mixing_4, Mixing_5, Quantity, Rate, Amount", "Sl_No", "Reference_Code, Company_IdNo, Reference_No, For_OrderBy, Reference_Date, Ledger_IdNo, Party_Bill_No", tr)

                If Common_Procedures.settings.Combine_Textile_Sizing_Software_Status = 1 Then

                    vEntLedIdNo = Val(Common_Procedures.get_FieldValue(Con, "Specification_Head", "ledger_idno", "(set_code = '" & Trim(NewCode) & "')", , tr))
                    TexComp_ID = Val(Common_Procedures.get_FieldValue(Con, "ledger_head", "Textile_To_CompanyIdNo", "(ledger_idno = " & Str(Val(vEntLedIdNo)) & ")", , tr))

                    If Val(TexComp_ID) <> 0 Then
                        Nr = 0
                        cmd.CommandText = "Delete from " & Trim(vDbName) & "Stock_Yarn_Processing_Details Where  Reference_Code = '" & Trim(Pk_Condition_Tex) & Trim(NewCode) & "'"
                        Nr = cmd.ExecuteNonQuery()
                    End If

                End If

                cmd.CommandText = "Update Specification_Head set SoftwareType_IdNo = " & Str(Val(Common_Procedures.SoftwareTypes.Sizing_Software)) & ", Entry_VAT_GST_Type = '" & Trim(vEnt_VAT_GST_Type) & "' , Set_No = '" & Trim(lbl_SetNo.Tag) & "' , SetNo_Display = '" & Trim(lbl_SetNo.Text) & "' , setcode_forSelection = '" & Trim(vSELC_SETCODE) & "' ,  set_date = @SetDate, ledger_idno = " & Str(Val(Led_ID)) & ", count_idno = " & Str(Val(Cnt_ID)) & ", mill_idno = " & Str(Val(Mil_ID)) & ", Beam_Width_Idno = " & Str(Val(Bw_id)) & ", ends_name = '" & Trim(txt_Ends.Text) & "', pcs_length = '" & Trim(txt_PcsLength.Text) & "', tape_length = '" & Trim(txt_TapeLength.Text) & "', meters_yards_type = '" & Trim(Mtrs_Yrds) & "', warp_meters = '" & Trim(txt_WarpMeters.Text) & "', beam_count = '" & Trim(lbl_BeamCount.Text) & "', excess_short_yarn = " & Str(Val(lbl_ExcessShort.Text)) & ", pickup_percentage = " & Str(Val(lbl_PickUp_Perc.Text)) & ", PickupPercentage_Party = " & Str(Val(txt_PickUpPerc_Party.Text)) & ", elongation_meter = " & Str(Val(lbl_Elongation_Mtr.Text)) & ", elongation_percentage = " & Str(Val(lbl_Elongation_Perc.Text)) & ", remarks = '" & Trim(txt_Remarks.Text) & "', warping_slno = " & Str(Val(vWrpSlNo)) & ", sizing_slno = " & Str(Val(vSizSlNo)) & ", total_warpmeters = " & Str(Val(vTotWrpMtrs)) & ", warp_weight = '" & Trim(sWarpWgt) & "', EmptyBag_weight = " & Str(Val(txt_WgtEmYBag.Text)) & ", EmptyCone_weight = " & Str(Val(txt_WgtEmYCone.Text)) & " ,Total_Warping_Beams = " & Str(Val(lbl_Total_Warping_Beams.Text)) & ", total_warping_ends = " & Str(Val(lbl_Total_Warping_Ends.Text)) & ", total_warping_gross_weight = " & Str(Val(lbl_Total_Warping_GrossWeight.Text)) & ", total_warping_tare_weight = " & Str(Val(lbl_Total_Warping_TareWeight.Text)) & ", total_warping_net_weight = " & Str(Val(lbl_Total_Warping_NetWeight.Text)) & ", total_pavu_gross_weight = " & Str(Val(lbl_Total_Sizing_GrossWeight.Text)) & ", total_pavu_tare_weight = " & Str(Val(lbl_Total_Sizing_TareWeight.Text)) & ", total_pavu_net_weight = " & Str(Val(lbl_Total_Sizing_NetWeight.Text)) & ", " &
                                       " total_pavu_beam = " & Str(Val(lbl_Total_Sizing_Beams.Text)) & ", total_pavu_pcs = " & Str(Val(lbl_Total_Sizing_Pcs.Text)) & ", total_pavu_meters = " & Str(Val(lbl_Total_Sizing_Meters.Text)) & ", total_yarn_bags = " & Str(Val(vTotYrnBags)) & ", total_yarn_cones = " & Str(Val(vTotYrnCones)) & ", total_yarn_weight = " & Str(Val(vTotYrnWeight)) & ", total_baby_bags = " & Str(Val(vTotBabyBags)) & ", total_baby_cones = " & Str(Val(vTotBabyCones)) & ", total_baby_gross_weight = " & Str(Val(vTotBabyGrsWgt)) & ", total_baby_tare_weight = " & Str(Val(txt_BabyCone_TareWeight.Text)) & ", total_baby_net_weight = " & Str(Val(lbl_BabyCone_NetWeight.Text)) & ", total_chemical_consumption = " & Str(Val(vTotChemQty)) & ", total_chemical_amount = " & Str(Val(vTotChemAmt)) & ", rw_status = " & Str(Val(vRwSTS)) & ", rw_cones = " & Str(Val(txt_RewindingCones.Text)) & ", rw_millidno = " & Str(Val(RwMil_ID)) & ", Rw_ExcessShort = " & Str(Val(txt_RwExcSht.Text)) & ", SocietySet_Status = " & Str(Val(vSocSetSTS)) & ", Meters_Yards = '" & Trim(Mtrs_Yrds) & "',Entry_Type ='" & Trim(cbo_Type.Text) & "',Warp_No = '" & Trim(WrpNo) & "',Warp_Code = '" & Trim(WrpCd) & "'  , Warp_date ='" & Trim(Wrpdate) & "',  User_Idno = " & Str(Val(Common_Procedures.User.IdNo)) & " ,Sizing_Machine_No_IdNo = " & Val(SzM_id) & " , Warping_Machine_No_IdNo = " & Val(WrpM_id) & ",Loom_Type='" & Trim(cbo_LoomType.Text) & "' ,Inv_Warp_Weight =  " & Val(txt_warp_weight.Text) & ", Warp_Rate = " & Val(txt_warp_Rate.Text) & ",  Warp_Amount = " & Val(txt_warp_Amount.Text) & ", Rewinding_weight =  " & Val(txt_Rewinding_Weight.Text) & ", Rewinding_Rate =  " & Val(txt_Rewinding_Rate.Text) & ", Rewinding_Amount = " & Val(Txt_Rewinding_Amount.Text) & ",  No_Of_Beams = " & Val(Txt_No_Of_Beams.Text) & ", Packing_Rate =  " & Val(Txt_Beams_Rate.Text) & ",  Packing_Amount = " & Val(Txt_Beams_Amount.Text) & " , Welding_Beams = " & Val(Txt_Welding_Beams.Text) & ",  Welding_Rate =  " & Val(Txt_Welding_Rate.Text) & ", Welding_Amount = " & Val(Txt_Welding_Amount.Text) & ", Other_Charges =  " & Val(txt_Other_Charges.Text) & " , Excess_Short_Adjustment = " & Val(txt_ExcessShort_Adjustment.Text) & " , rwexshrtweight = " & Val(txt_RwExShrtWt.Text) & ", Sort_No='" & Trim(txt_SortNo.Text) & "', No_Need_Stock_Posting = " & Val(v_NoNeed_Stock_Posting) & ", Delivery_To_IdNo = " & Val(Delivery_Id) &
                                       " , warp_set1_cons_wt  =" & Str(Val(txt_warp_dets_tot_consWT.Text)) & " ,                    warp_set1_act_wt  = " & Str(Val(txt_FromRange.Text)) & "    ,                 warp_set1_tot_beam = " & Str(Val(txt_warp_dets_tot_beam.Text)) & "" &
                                       " , warp_set1_from_range = " & Str(Val(txt_FromRange.Text)) & "" &
                                       " , warp_set1_to_range = " & Str(Val(txt_ToRange.Text)) & ",  LoomType_idno = " & Str(Val(LmType_ID)) & " " &
                                       "  Where Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(NewCode) & "'"
                Nr = cmd.ExecuteNonQuery()


                Da = New SqlClient.SqlDataAdapter("Select * from Specification_YarnTaken_Details Where Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(NewCode) & "' and yarn_type = 'BABY' and BabyCone_setcode_forSelection <> ''", Con)
                Da.SelectCommand.Transaction = tr
                Dt1 = New DataTable
                Da.Fill(Dt1)

                If Dt1.Rows.Count > 0 Then

                    For i = 0 To Dt1.Rows.Count - 1

                        Nr = 0
                        cmd.CommandText = "Update Stock_BabyCone_Processing_Details set Delivered_Bags = Delivered_Bags - " & Str(Val(Dt1.Rows(i).Item("Bags").ToString)) & ", Delivered_Cones = Delivered_Cones - " & Str(Val(Dt1.Rows(i).Item("cones").ToString)) & ", Delivered_Weight = Delivered_Weight - " & Str(Val(Dt1.Rows(i).Item("Weight").ToString)) & " Where setcode_forSelection = '" & Trim(Dt1.Rows(i).Item("BabyCone_setcode_forSelection").ToString) & "'"
                        Nr = cmd.ExecuteNonQuery()

                    Next i

                End If
                Dt1.Clear()
                If Trim(UCase(cbo_Type.Text)) = "WARPING" Then
                    cmd.CommandText = "Update Warping_Head set Set_Code = '', Set_Increment = Set_Increment - 1  Where Set_Code = '" & Trim(NewCode) & "'"
                    cmd.ExecuteNonQuery()
                End If

            End If

            If Trim(UCase(cbo_Type.Text)) = "WARPING" Then
                cmd.CommandText = "Update Warping_Head set Set_Code = '" & Trim(NewCode) & "', Set_Increment = Set_Increment + 1  Where Warp_Code = '" & Trim(WrpCd) & "'"
                cmd.ExecuteNonQuery()
            End If

            Partcls = "Sizing : Set.No. " & Trim(lbl_SetNo.Tag)
            PBlNo = Trim(lbl_SetNo.Tag)
            EntID = Trim(Pk_Condition) & Trim(lbl_SetNo.Tag)

            cmd.CommandText = "Delete from Specification_Warping_Details Where Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(NewCode) & "'"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Delete from Specification_YarnTaken_Details Where Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(NewCode) & "'"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Delete from Specification_BabyCone_Details Where Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(NewCode) & "'"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Delete from Stock_BabyCone_Processing_Details Where Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "'  and Delivered_Bags = 0 and Delivered_Cones = 0 and Delivered_Weight = 0"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Delete from Stock_RewindingBabyCone_Processing_Details Where Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "'  and RwDelivered_Bags = 0 and RwDelivered_Cones = 0 and RwDelivered_Weight = 0"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Delete from Stock_Chemical_Processing_Details Where Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "'"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Delete from Stock_SizedPavu_Processing_Details Where Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "' and Pavu_Delivery_Code = ''"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Delete from Stock_Yarn_Processing_Details Where  Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "'"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Delete from Stock_Empty_BeamBagCone_Processing_Details Where  Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "'"
            cmd.ExecuteNonQuery()

            With dgv_WarpingDetails_Set1
                Sno = 0

                v_W_SlNo = 1
                v_W_Mtrs = 0
                v_W_Ends = 0

                a = Split(Trim(txt_Ends.Text), ",")
                If UBound(a) >= 0 Then v_W_Ends = Val(a(0))

                a = Split(Trim(txt_WarpMeters.Text), ",")
                If UBound(a) >= 0 Then v_W_Mtrs = Val(a(0))

                For i = 0 To .RowCount - 1

                    If Val(.Rows(i).Cells(4).Value) <> 0 Then

                        Sno = Sno + 1
                        FtEmp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(10).Value, tr)
                        BkEmp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(12).Value, tr)
                        HrEmp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(14).Value, tr)
                        Ft2Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(16).Value, tr)
                        Bk2Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(18).Value, tr)
                        Hr2Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(20).Value, tr)
                        BeamNo_Id = Common_Procedures.BeamNo_NameToIdNo(Con, .Rows(i).Cells(6).Value, tr)
                        Shift_ID = Common_Procedures.Shift_NameToIdNo(Con, .Rows(i).Cells(5).Value, tr)


                        FrntWrpr1_Mtrs = 0
                        BackWrpr1_Mtrs = 0
                        Hlpr1_Mtrs = 0
                        FrntWrpr2_Mtrs = 0
                        BackWrpr2_Mtrs = 0
                        Hlpr2_Mtrs = 0

                        If FtEmp_ID <> 0 Then
                            If .Columns(11).Visible = True Then FrntWrpr1_Mtrs = Val(.Rows(i).Cells(11).Value) Else FrntWrpr1_Mtrs = Val(v_W_Mtrs)
                        End If
                        If BkEmp_ID <> 0 Then
                            If .Columns(13).Visible = True Then BackWrpr1_Mtrs = Val(.Rows(i).Cells(13).Value) Else BackWrpr1_Mtrs = Val(v_W_Mtrs)
                        End If
                        If HrEmp_ID <> 0 Then
                            If .Columns(15).Visible = True Then Hlpr1_Mtrs = Val(.Rows(i).Cells(15).Value) Else Hlpr1_Mtrs = Val(v_W_Mtrs)
                        End If

                        If Ft2Emp_ID <> 0 Then
                            If .Columns(17).Visible = True Then FrntWrpr2_Mtrs = Val(.Rows(i).Cells(17).Value) Else FrntWrpr2_Mtrs = Val(v_W_Mtrs)
                        End If
                        If Bk2Emp_ID <> 0 Then
                            If .Columns(19).Visible = True Then BackWrpr2_Mtrs = Val(.Rows(i).Cells(19).Value) Else BackWrpr2_Mtrs = Val(v_W_Mtrs)
                        End If
                        If Hr2Emp_ID <> 0 Then
                            If .Columns(21).Visible = True Then Hlpr2_Mtrs = Val(.Rows(i).Cells(21).Value) Else Hlpr2_Mtrs = Val(v_W_Mtrs)
                        End If

                        cmd.CommandText = "Insert into Specification_Warping_Details (           set_code    ,                 Company_IdNo     ,               set_no         ,          for_OrderBy      , set_date,         Ledger_IdNo     ,         count_idno      ,         Mill_IdNo       ,             Warp_SlNo     ,             Sl_No    ,                 Ends_Name          ,                      Gross_Weight        ,                       Tare_Weight         ,                      Net_Weight          ,                    Shift               ,                   Warp_Beam_No        ,                      Start_Time          ,                      End_Time            ,                      Total_Time          ,    Front_Warper_1_IdNo,          Front_Warper_1_Meters  ,     Back_Warper_1_IdNo,         Back_Warper_1_meters    ,      Helper_1_IdNo   ,         Helper_1_Meters      ,    Front_Warper_2_IdNo,         Front_Warper_2_Meters   ,    Back_Warper_2_IdNo ,         Back_Warper_2_meters    ,      Helper_2_IdNo   ,          Helper_2_Meters      ,                    Remarks              ,             Warp_Meters ,      Meters_Yards_Type   ,              Total_Ends     , Warping_Machine_No_IdNo,               Loom_Type        ,                Ends2_Name ,                          Ends3_Name ,                              Ends1_Weight ,                               Ends2_Weight ,                             Ends3_Weight      ,        Shift_idno      ,             LoomType_idno ) " &
                                          "Values                                    ('" & Trim(NewCode) & "', " & Str(Val(lbl_Company.Tag)) & ", '" & Trim(lbl_SetNo.Tag) & "', " & Str(Val(vOrdByNo)) & ", @SetDate, " & Str(Val(Led_ID)) & ", " & Str(Val(Cnt_ID)) & ", " & Str(Val(Mil_ID)) & ", " & Str(Val(v_W_SlNo)) & ", " & Str(Val(Sno)) & "," & Val(.Rows(i).Cells(1).Value) & ", " & Str(Val(.Rows(i).Cells(2).Value)) & ",  " & Str(Val(.Rows(i).Cells(3).Value)) & ", " & Str(Val(.Rows(i).Cells(4).Value)) & ", '" & Trim(.Rows(i).Cells(5).Value) & "'," & Str(Val(BeamNo_Id)) & ", " & Str(Val(.Rows(i).Cells(7).Value)) & ", " & Str(Val(.Rows(i).Cells(8).Value)) & ", " & Str(Val(.Rows(i).Cells(9).Value)) & ", " & Val(FtEmp_ID) & " , " & Str(Val(FrntWrpr1_Mtrs)) & ", " & Val(BkEmp_ID) & " , " & Str(Val(BackWrpr1_Mtrs)) & ", " & Val(HrEmp_ID) & ", " & Str(Val(Hlpr1_Mtrs)) & ", " & Val(Ft2Emp_ID) & ", " & Str(Val(FrntWrpr2_Mtrs)) & ", " & Val(Bk2Emp_ID) & ", " & Str(Val(BackWrpr2_Mtrs)) & ", " & Val(Hr2Emp_ID) & ", " & Str(Val(Hlpr2_Mtrs)) & ", '" & Trim(.Rows(i).Cells(22).Value) & "', " & Str(Val(v_W_Mtrs)) & ", '" & Trim(Mtrs_Yrds) & "',  " & Str(Val(v_W_Ends)) & " , " & Val(WrpM_id) & "   , '" & Trim(cbo_LoomType.Text) & "', " & Val(.Rows(i).Cells(23).Value) & ", " & Val(.Rows(i).Cells(24).Value) & ", " & Str(Val(.Rows(i).Cells(25).Value)) & " ,  " & Str(Val(.Rows(i).Cells(26).Value)) & " , " & Str(Val(.Rows(i).Cells(27).Value)) & " ,  " & Str(Val(Shift_ID)) & " ,  " & Str(Val(LmType_ID)) & " ) "
                        cmd.ExecuteNonQuery()


                    End If

                Next
            End With

            With dgv_WarpingDetails_Set2
                Sno = 100

                v_W_SlNo = 2
                v_W_Mtrs = 0

                a = Split(Trim(txt_WarpMeters.Text), ",")
                If UBound(a) >= 1 Then v_W_Mtrs = Val(a(1))

                For i = 0 To .RowCount - 1

                    If Val(.Rows(i).Cells(4).Value) <> 0 Then

                        Sno = Sno + 1
                        Eds2FtEmp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(10).Value, tr)
                        Eds2BkEmp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(12).Value, tr)
                        Eds2HrEmp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(14).Value, tr)
                        Eds2Ft2Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(16).Value, tr)
                        Eds2Bk2Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(18).Value, tr)
                        Eds2Hr2Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(20).Value, tr)
                        Shift_ID = Common_Procedures.Shift_NameToIdNo(Con, .Rows(i).Cells(5).Value, tr)

                        FrntWrpr1_Mtrs = 0
                        BackWrpr1_Mtrs = 0
                        Hlpr1_Mtrs = 0
                        FrntWrpr2_Mtrs = 0
                        BackWrpr2_Mtrs = 0
                        Hlpr2_Mtrs = 0

                        If FtEmp_ID <> 0 Then
                            If .Columns(11).Visible = True Then FrntWrpr1_Mtrs = Val(.Rows(i).Cells(11).Value) Else FrntWrpr1_Mtrs = Val(v_W_Mtrs)
                        End If
                        If BkEmp_ID <> 0 Then
                            If .Columns(13).Visible = True Then BackWrpr1_Mtrs = Val(.Rows(i).Cells(13).Value) Else BackWrpr1_Mtrs = Val(v_W_Mtrs)
                        End If
                        If HrEmp_ID <> 0 Then
                            If .Columns(15).Visible = True Then Hlpr1_Mtrs = Val(.Rows(i).Cells(15).Value) Else Hlpr1_Mtrs = Val(v_W_Mtrs)
                        End If

                        If Ft2Emp_ID <> 0 Then
                            If .Columns(17).Visible = True Then FrntWrpr2_Mtrs = Val(.Rows(i).Cells(17).Value) Else FrntWrpr2_Mtrs = Val(v_W_Mtrs)
                        End If
                        If Bk2Emp_ID <> 0 Then
                            If .Columns(19).Visible = True Then BackWrpr2_Mtrs = Val(.Rows(i).Cells(19).Value) Else BackWrpr2_Mtrs = Val(v_W_Mtrs)
                        End If
                        If Hr2Emp_ID <> 0 Then
                            If .Columns(21).Visible = True Then Hlpr2_Mtrs = Val(.Rows(i).Cells(21).Value) Else Hlpr2_Mtrs = Val(v_W_Mtrs)
                        End If

                        cmd.CommandText = "Insert into Specification_Warping_Details(set_code               , Company_IdNo                     , set_no                       , for_OrderBy               , set_date, Ledger_IdNo             , count_idno              ,   Mill_IdNo             ,   Warp_SlNo               ,    Sl_No             , Ends_Name                                , Gross_Weight                        ,    Tare_Weight                           ,     Net_Weight                           ,    Shift                               ,     Warp_Beam_No                       ,    Start_Time                           ,      End_Time                            ,    Total_Time                           ,    Front_Warper_1_IdNo  ,    Front_Warper_1_Meters        ,    Back_Warper_1_IdNo   ,    Back_Warper_1_meters         ,    Helper_1_IdNo        ,   Helper_1_Meters           ,      Front_Warper_2_IdNo  ,         Front_Warper_2_Meters   ,    Back_Warper_2_IdNo       ,     Back_Warper_2_meters        ,    Helper_2_IdNo               ,   Helper_2_Meters                         ,    Remarks                ,             Warp_Meters   ,      Meters_Yards_Type   ,              Total_Ends     , Warping_Machine_No_IdNo,               Loom_Type        ,            Shift_Idno           ,   LoomType_Idno ) " &
                                          "Values                                   ('" & Trim(NewCode) & "', " & Str(Val(lbl_Company.Tag)) & ", '" & Trim(lbl_SetNo.Tag) & "', " & Str(Val(vOrdByNo)) & ", @SetDate, " & Str(Val(Led_ID)) & ", " & Str(Val(Cnt_ID)) & ", " & Str(Val(Mil_ID)) & ", " & Str(Val(v_W_SlNo)) & ", " & Str(Val(Sno)) & ", " & Str(Val(.Rows(i).Cells(1).Value)) & ", " & Val(.Rows(i).Cells(2).Value) & ", " & Str(Val(.Rows(i).Cells(3).Value)) & ", " & Str(Val(.Rows(i).Cells(4).Value)) & ", '" & Trim(.Rows(i).Cells(5).Value) & "', '" & Trim(.Rows(i).Cells(6).Value) & "'," & Str(Val(.Rows(i).Cells(7).Value)) & ", " & Str(Val(.Rows(i).Cells(8).Value)) & "," & Str(Val(.Rows(i).Cells(9).Value)) & "," & Val(Eds2FtEmp_ID) & ", " & Str(Val(FrntWrpr1_Mtrs)) & "," & Val(Eds2BkEmp_ID) & ", " & Str(Val(BackWrpr1_Mtrs)) & "," & Val(Eds2HrEmp_ID) & ", " & Str(Val(Hlpr1_Mtrs)) & ", " & Val(Eds2Hr2Emp_ID) & ", " & Str(Val(FrntWrpr2_Mtrs)) & "," & Val(Eds2Bk2Emp_ID) & "   , " & Str(Val(BackWrpr2_Mtrs)) & "," & Val(Eds2Hr2Emp_ID) & "      , " & Str(Val(Hlpr2_Mtrs)) & ",'" & Trim(.Rows(i).Cells(22).Value) & "' , " & Str(Val(v_W_Mtrs)) & ", '" & Trim(Mtrs_Yrds) & "',  " & Str(Val(v_W_Ends)) & " , " & Val(WrpM_id) & "   , '" & Trim(cbo_LoomType.Text) & "' , " & Str(Val(Shift_ID)) & " ,  " & Str(Val(LmType_ID)) & "   )"
                        cmd.ExecuteNonQuery()



                    End If

                Next
            End With

            With dgv_WarpingDetails_Set3
                Sno = 200

                v_W_SlNo = 3
                v_W_Mtrs = 0

                a = Split(Trim(txt_WarpMeters.Text), ",")
                If UBound(a) >= 2 Then v_W_Mtrs = Val(a(2))

                For i = 0 To .RowCount - 1

                    If Val(.Rows(i).Cells(4).Value) <> 0 Then

                        Sno = Sno + 1
                        Eds3FtEmp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(10).Value, tr)
                        Eds3BkEmp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(12).Value, tr)
                        Eds3HrEmp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(14).Value, tr)
                        Eds3Ft2Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(16).Value, tr)
                        Eds3Bk2Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(18).Value, tr)
                        Eds3Hr2Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(20).Value, tr)
                        Shift_ID = Common_Procedures.Shift_NameToIdNo(Con, .Rows(i).Cells(5).Value, tr)

                        FrntWrpr1_Mtrs = 0
                        BackWrpr1_Mtrs = 0
                        Hlpr1_Mtrs = 0
                        FrntWrpr2_Mtrs = 0
                        BackWrpr2_Mtrs = 0
                        Hlpr2_Mtrs = 0

                        If FtEmp_ID <> 0 Then
                            If .Columns(11).Visible = True Then FrntWrpr1_Mtrs = Val(.Rows(i).Cells(11).Value) Else FrntWrpr1_Mtrs = Val(v_W_Mtrs)
                        End If
                        If BkEmp_ID <> 0 Then
                            If .Columns(13).Visible = True Then BackWrpr1_Mtrs = Val(.Rows(i).Cells(13).Value) Else BackWrpr1_Mtrs = Val(v_W_Mtrs)
                        End If
                        If HrEmp_ID <> 0 Then
                            If .Columns(15).Visible = True Then Hlpr1_Mtrs = Val(.Rows(i).Cells(15).Value) Else Hlpr1_Mtrs = Val(v_W_Mtrs)
                        End If

                        If Ft2Emp_ID <> 0 Then
                            If .Columns(17).Visible = True Then FrntWrpr2_Mtrs = Val(.Rows(i).Cells(17).Value) Else FrntWrpr2_Mtrs = Val(v_W_Mtrs)
                        End If
                        If Bk2Emp_ID <> 0 Then
                            If .Columns(19).Visible = True Then BackWrpr2_Mtrs = Val(.Rows(i).Cells(19).Value) Else BackWrpr2_Mtrs = Val(v_W_Mtrs)
                        End If
                        If Hr2Emp_ID <> 0 Then
                            If .Columns(21).Visible = True Then Hlpr2_Mtrs = Val(.Rows(i).Cells(21).Value) Else Hlpr2_Mtrs = Val(v_W_Mtrs)
                        End If

                        cmd.CommandText = "Insert into Specification_Warping_Details ( set_code              , Company_IdNo                     , set_no                       , for_OrderBy               , set_date, Ledger_IdNo             , count_idno              ,   Mill_IdNo             ,  Warp_SlNo                ,     Sl_No            ,  Ends_Name                               ,       Gross_Weight                  ,  Tare_Weight                             ,       Net_Weight                         ,       Shift                           ,           Warp_Beam_No                ,       Start_Time                         ,        End_Time                          ,         Total_Time                      ,       Front_Warper_1_IdNo   , Front_Warper_1_Meters            ,    Back_Warper_1_IdNo   ,      Back_Warper_1_meters       ,      Helper_1_IdNo      ,        Helper_1_Meters      ,    Front_Warper_2_IdNo    ,    Front_Warper_2_Meters        ,        Back_Warper_2_IdNo  ,   Back_Warper_2_meters           ,      Helper_2_IdNo       ,   Helper_2_Meters           ,   Remarks                              ,           Warp_Meters     ,      Meters_Yards_Type   ,              Total_Ends     , Warping_Machine_No_IdNo,               Loom_Type          ,         Shift_Idno         ,       LoomType_Idno )" &
                                                     "  Values                       ('" & Trim(NewCode) & "', " & Str(Val(lbl_Company.Tag)) & ", '" & Trim(lbl_SetNo.Tag) & "', " & Str(Val(vOrdByNo)) & ", @SetDate, " & Str(Val(Led_ID)) & ", " & Str(Val(Cnt_ID)) & ", " & Str(Val(Mil_ID)) & ", " & Str(Val(v_W_SlNo)) & ", " & Str(Val(Sno)) & ", " & Str(Val(.Rows(i).Cells(1).Value)) & ", " & Val(.Rows(i).Cells(2).Value) & ", " & Str(Val(.Rows(i).Cells(3).Value)) & ", " & Str(Val(.Rows(i).Cells(4).Value)) & ",'" & Trim(.Rows(i).Cells(5).Value) & "','" & Trim(.Rows(i).Cells(6).Value) & "', " & Str(Val(.Rows(i).Cells(7).Value)) & ", " & Str(Val(.Rows(i).Cells(8).Value)) & "," & Str(Val(.Rows(i).Cells(9).Value)) & "," & Val(Eds3FtEmp_ID) & "    ,  " & Str(Val(FrntWrpr1_Mtrs)) & "," & Val(Eds3BkEmp_ID) & ", " & Str(Val(BackWrpr1_Mtrs)) & "," & Val(Eds3HrEmp_ID) & ", " & Str(Val(Hlpr1_Mtrs)) & ", " & Val(Eds3Ft2Emp_ID) & ", " & Str(Val(FrntWrpr2_Mtrs)) & "," & Val(Eds3Bk2Emp_ID) & "  , " & Str(Val(BackWrpr2_Mtrs)) & " ," & Val(Eds3Hr2Emp_ID) & ", " & Str(Val(Hlpr2_Mtrs)) & ",'" & Trim(.Rows(i).Cells(22).Value) & "', " & Str(Val(v_W_Mtrs)) & ", '" & Trim(Mtrs_Yrds) & "',  " & Str(Val(v_W_Ends)) & " , " & Val(WrpM_id) & "   , '" & Trim(cbo_LoomType.Text) & "' , " & Str(Val(Shift_ID)) & " ,  " & Str(Val(LmType_ID)) & "   )"
                        cmd.ExecuteNonQuery()

                    End If

                Next

            End With

            With dgv_SizingDetails_Set1
                Sno = 0

                v_S_SlNo = 1
                v_W_Mtrs = 0
                v_EndsNM = ""

                a = Split(Trim(txt_WarpMeters.Text), ",")
                If UBound(a) >= 0 Then v_W_Mtrs = Val(a(0))

                a = Split(Trim(txt_Ends.Text), ",")
                If UBound(a) >= 0 Then v_EndsNM = Val(a(0))

                Tot_SzSl_Bms = 0
                If dgv_SizingDetails_Total_Set1.RowCount > 0 Then
                    If Val(dgv_SizingDetails_Total_Set1.Rows(0).Cells(7).Value) <> 0 Then
                        Tot_SzSl_Bms = Val(dgv_SizingDetails_Total_Set1.Rows(0).Cells(1).Value)
                    End If
                End If
                For i = 0 To .RowCount - 1

                    If Val(.Rows(i).Cells(7).Value) <> 0 Then

                        Sno = Sno + 1
                        Sz1FtEmp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(13).Value, tr)
                        Sz1BkEmp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(15).Value, tr)
                        Sz1BlEmp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(17).Value, tr)
                        Sz1CkEmp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(19).Value, tr)
                        Sz1Ft2Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(21).Value, tr)
                        Sz1Bk2Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(23).Value, tr)
                        Sz1Bl2Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(25).Value, tr)
                        Sz1Ck2Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, .Rows(i).Cells(27).Value, tr)
                        Sz1Vndr_ID = Common_Procedures.Vendor_AlaisNameToIdNo(Con, .Rows(i).Cells(31).Value, tr)
                        Shift_ID = Common_Procedures.Shift_NameToIdNo(Con, .Rows(i).Cells(9).Value, tr)

                        FrntSizr1_Mtrs = 0
                        BackSizr1_Mtrs = 0
                        Boilr1_Mtrs = 0
                        Cookr1_Mtrs = 0
                        FrntSizr2_Mtrs = 0
                        BackSizr2_Mtrs = 0
                        Boilr2_Mtrs = 0
                        Cookr2_Mtrs = 0

                        If Sz1FtEmp_ID <> 0 Then
                            If .Columns(14).Visible = True Then FrntSizr1_Mtrs = Val(.Rows(i).Cells(14).Value) Else FrntSizr1_Mtrs = Val(v_W_Mtrs)
                        End If
                        If Sz1BkEmp_ID <> 0 Then
                            If .Columns(16).Visible = True Then BackSizr1_Mtrs = Val(.Rows(i).Cells(16).Value) Else BackSizr1_Mtrs = Val(v_W_Mtrs)
                        End If
                        If Sz1BlEmp_ID <> 0 Then
                            If .Columns(18).Visible = True Then Boilr1_Mtrs = Val(.Rows(i).Cells(18).Value) Else Boilr1_Mtrs = Val(v_W_Mtrs)
                        End If
                        If Sz1CkEmp_ID <> 0 Then
                            If .Columns(20).Visible = True Then Cookr1_Mtrs = Val(.Rows(i).Cells(20).Value) Else Cookr1_Mtrs = Val(v_W_Mtrs)
                        End If

                        If Sz1Ft2Emp_ID <> 0 Then
                            If .Columns(22).Visible = True Then FrntSizr2_Mtrs = Val(.Rows(i).Cells(22).Value) Else FrntSizr2_Mtrs = Val(v_W_Mtrs)
                        End If
                        If Sz1Bk2Emp_ID <> 0 Then
                            If .Columns(24).Visible = True Then BackSizr2_Mtrs = Val(.Rows(i).Cells(24).Value) Else BackSizr2_Mtrs = Val(v_W_Mtrs)
                        End If
                        If Sz1Bl2Emp_ID <> 0 Then
                            If .Columns(26).Visible = True Then Boilr2_Mtrs = Val(.Rows(i).Cells(26).Value) Else Boilr2_Mtrs = Val(v_W_Mtrs)
                        End If
                        If Sz1Ck2Emp_ID <> 0 Then
                            If .Columns(28).Visible = True Then Cookr2_Mtrs = Val(.Rows(i).Cells(28).Value) Else Cookr2_Mtrs = Val(v_W_Mtrs)
                        End If

                        Nr = 0
                        cmd.CommandText = "Update Stock_SizedPavu_Processing_Details set SoftwareType_IdNo = " & Str(Val(Common_Procedures.SoftwareTypes.Sizing_Software)) & " , Set_Code = '" & Trim(vSETCD_PKCOND) & "', setcode_forSelection =  '" & Trim(vSELC_SETCODE) & "', Reference_Date = @SetDate, Ledger_IdNo = " & Str(Val(Led_ID)) & ", Ends_Name = '" & Trim(v_EndsNM) & "', Count_IdNo = " & Str(Val(Cnt_ID)) & ", Mill_IdNo = " & Str(Val(Mil_ID)) & ", Beam_Width_Idno = " & Str(Val(Bw_id)) & ", Sizing_SlNo = " & Str(Val(v_S_SlNo)) & ", Sl_No = " & Str(Val(Sno)) & ", ForOrderBy_BeamNo = " & Str(Val(Common_Procedures.OrderBy_CodeToValue(.Rows(i).Cells(1).Value))) & ", Gross_Weight = " & Str(Val(.Rows(i).Cells(2).Value)) & ", Tare_Weight = " & Str(Val(.Rows(i).Cells(3).Value)) & ", Net_Weight = " & Str(Val(.Rows(i).Cells(4).Value)) & ", Noof_Pcs = " & Str(Val(.Rows(i).Cells(5).Value)) & ", Meters_Pc = " & Str(Val(.Rows(i).Cells(6).Value)) & ", Meters = " & Str(Val(.Rows(i).Cells(7).Value)) & ", Warp_Meters =  " & Str(Val(v_W_Mtrs)) & " ,Shift = '" & Trim(.Rows(i).Cells(9).Value) & "'  ,  Start_Time  = " & Val(.Rows(i).Cells(10).Value) & "  ,   End_Time = " & Str(Val(.Rows(i).Cells(11).Value)) & "  , Total_Time  = " & Str(Val(.Rows(i).Cells(12).Value)) & " , Front_Sizer_1_IdNo = " & Val(Sz1FtEmp_ID) & "  , Front_Sizer_1_Meters = " & Str(Val(FrntSizr1_Mtrs)) & " , Back_Sizer_1_IdNo = " & Val(Sz1BkEmp_ID) & " ,Back_Sizer_1_meters = " & Str(Val(BackSizr1_Mtrs)) & ",Boiler_1_IdNo = " & Val(Sz1BlEmp_ID) & " , Boiler_1_Meters = " & Str(Val(Boilr1_Mtrs)) & ", cooker_1_IdNo  = " & Val(Sz1CkEmp_ID) & ",  Cooker_1_Meters = " & Str(Val(Cookr1_Mtrs)) & " , Front_Sizer_2_IdNo = " & Val(Sz1Ft2Emp_ID) & ",Front_Sizer_2_Meters = " & Str(Val(FrntSizr2_Mtrs)) & " ,Back_Sizer_2_IdNo = " & Val(Sz1Bk2Emp_ID) & " ,  Back_Sizer_2_meters = " & Str(Val(BackSizr2_Mtrs)) & " , Boiler_2_IdNo = " & Val(Sz1Bl2Emp_ID) & " , Boiler_2_Meters = " & Str(Val(Boilr2_Mtrs)) & " ,  Cooker_2_IdNo = " & Val(Sz1Ck2Emp_ID) & " , Cooker_2_Meters  = " & Str(Val(Cookr2_Mtrs)) & ",   Remarks ='" & Trim(.Rows(i).Cells(29).Value) & "', Party_PickUp_Percentage = " & Str(Val(.Rows(i).Cells(30).Value)) & " , Vendor_IdNo = " & Val(Sz1Vndr_ID) & " ,Actual_Gross_Weight  = " & Str(Val(.Rows(i).Cells(32).Value)) & ",Actual_Net_Weight  = " & Str(Val(.Rows(i).Cells(33).Value)) & ",Actual_PickUp  = " & Str(Val(.Rows(i).Cells(34).Value)) & ", Total_SizingSlNo_Beam = " & Str(Val(Tot_SzSl_Bms)) & ", Meters_Yards_Type = '" & Trim(Mtrs_Yrds) & "' , Sizing_Machine_No_IdNo = " & Val(SzM_id) & ", Loom_Type = '" & Trim(cbo_LoomType.Text) & "' , Shift_Idno = " & Str(Val(Shift_ID)) & " ,  LoomType_Idno = " & Str(Val(LmType_ID)) & " " &
                                            " Where Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "' and Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and Beam_No = '" & Trim(.Rows(i).Cells(1).Value) & "'  "
                        Nr = cmd.ExecuteNonQuery()



                        If Nr = 0 Then
                            cmd.CommandText = "Insert into Stock_SizedPavu_Processing_Details (                      SoftwareType_IdNo                           , Reference_Code        ,             Company_IdNo         ,      Reference_No            ,              for_OrderBy  , Reference_Date,       Ledger_IdNo       ,            Set_Code           ,             Set_No           ,        setcode_forSelection ,        Ends_Name        ,           count_idno    ,            Mill_IdNo    ,     Beam_Width_Idno    ,         Sizing_SlNo       ,          Sl_No       ,             Beam_No                    ,                                    ForOrderBy_BeamNo                            ,               Gross_Weight              ,             Tare_Weight                ,                  Net_Weight              ,                   Noof_Pcs                   ,               Meters_Pc                  ,               Meters                     ,           Warp_Meters      , Pavu_Delivery_Code   ,             Shift                      ,                  Start_Time         ,                   End_Time            ,                 Total_Time                 ,      Front_Sizer_1_IdNo   ,     Front_Sizer_1_Meters        ,       Back_Sizer_1_IdNo ,         Back_Sizer_1_meters     ,       Boiler_1_IdNo     ,       Boiler_1_Meters        ,          cooker_1_IdNo  ,         Cooker_1_Meters      ,       Front_Sizer_2_IdNo ,      Front_Sizer_2_Meters       ,     Back_Sizer_2_IdNo    ,     Back_Sizer_2_meters         ,       Boiler_2_IdNo      ,             Boiler_2_Meters  ,           Cooker_2_IdNo  ,    Cooker_2_Meters           ,             Remarks                     , Pavu_Delivery_Increment  ,   DeliveryTo_Name ,              Party_PickUp_Percentage       ,       Vendor_IdNo       ,             Actual_Gross_Weight           ,      Actual_Net_Weight                    ,                     Actual_PickUp        ,       Total_SizingSlNo_Beam    ,    Meters_Yards_Type      , Sizing_Machine_No_IdNo ,               Loom_Type        ,               Shift_Idno      ,          LoomType_Idno        ,  Endscount_Idno ) " &
                                               "           Values                             (" & Str(Val(Common_Procedures.SoftwareTypes.Sizing_Software)) & " , '" & Trim(Pk_Condition) & Trim(NewCode) & "', " & Str(Val(lbl_Company.Tag)) & ", '" & Trim(lbl_SetNo.Tag) & "', " & Str(Val(vOrdByNo)) & ",    @SetDate   , " & Str(Val(Led_ID)) & ", '" & Trim(vSETCD_PKCOND) & "', '" & Trim(lbl_SetNo.Tag) & "', '" & Trim(vSELC_SETCODE) & "', '" & Trim(v_EndsNM) & "', " & Str(Val(Cnt_ID)) & ", " & Str(Val(Mil_ID)) & ", " & Str(Val(Bw_id)) & ", " & Str(Val(v_S_SlNo)) & ", " & Str(Val(Sno)) & ", '" & Trim(.Rows(i).Cells(1).Value) & "', " & Str(Val(Common_Procedures.OrderBy_CodeToValue(.Rows(i).Cells(1).Value))) & ", " & Str(Val(.Rows(i).Cells(2).Value)) & ", " & Str(Val(.Rows(i).Cells(3).Value)) & ", " & Str(Val(.Rows(i).Cells(4).Value)) & ", " & Str(Val(.Rows(i).Cells(5).Value)) & " , " & Str(Val(.Rows(i).Cells(6).Value)) & ", " & Str(Val(.Rows(i).Cells(7).Value)) & ", " & Str(Val(v_W_Mtrs)) & ", ''                    , '" & Trim(.Rows(i).Cells(9).Value) & "'," & Val(.Rows(i).Cells(10).Value) & ", " & Str(Val(.Rows(i).Cells(11).Value)) & ", " & Str(Val(.Rows(i).Cells(12).Value)) & "," & Val(Sz1FtEmp_ID) & ", " & Str(Val(FrntSizr1_Mtrs)) & ", " & Val(Sz1BkEmp_ID) & ", " & Str(Val(BackSizr1_Mtrs)) & ", " & Val(Sz1BlEmp_ID) & ", " & Str(Val(Boilr1_Mtrs)) & ", " & Val(Sz1CkEmp_ID) & ", " & Str(Val(Cookr1_Mtrs)) & ", " & Val(Sz1Ft2Emp_ID) & ", " & Str(Val(FrntSizr2_Mtrs)) & ", " & Val(Sz1Bk2Emp_ID) & ", " & Str(Val(BackSizr2_Mtrs)) & ", " & Val(Sz1Bl2Emp_ID) & ", " & Str(Val(Boilr2_Mtrs)) & ", " & Val(Sz1Ck2Emp_ID) & ", " & Str(Val(Cookr2_Mtrs)) & ", '" & Trim(.Rows(i).Cells(29).Value) & "',           0              ,         ''        , " & Str(Val(.Rows(i).Cells(30).Value)) & " ,  " & Val(Sz1Vndr_ID) & ", " & Str(Val(.Rows(i).Cells(32).Value)) & ", " & Str(Val(.Rows(i).Cells(33).Value)) & "," & Str(Val(.Rows(i).Cells(34).Value)) & ",  " & Str(Val(Tot_SzSl_Bms)) & ", '" & Trim(Mtrs_Yrds) & "' ,   " & Val(SzM_id) & "   , '" & Trim(cbo_LoomType.Text) & "' ,  " & Str(Val(Shift_ID)) & " , " & Str(Val(LmType_ID)) & " ,      0          ) "
                            cmd.ExecuteNonQuery()
                        End If

                    End If

                Next

            End With

            With dgv_SizingDetails_Set2
                Sno = 100

                v_S_SlNo = 2
                v_W_Mtrs = 0
                v_EndsNM = ""

                a = Split(Trim(txt_WarpMeters.Text), ",")
                If UBound(a) >= 1 Then v_W_Mtrs = Val(a(1))

                a = Split(Trim(txt_Ends.Text), ",")
                If UBound(a) >= 1 Then v_EndsNM = Val(a(1))

                Tot_SzSl_Bms = 0
                If dgv_SizingDetails_Total_Set2.RowCount > 0 Then
                    If Val(dgv_SizingDetails_Total_Set2.Rows(0).Cells(7).Value) <> 0 Then
                        Tot_SzSl_Bms = Val(dgv_SizingDetails_Total_Set2.Rows(0).Cells(1).Value)
                    End If
                End If
                For i = 0 To .RowCount - 1

                    If Val(.Rows(i).Cells(7).Value) <> 0 Then

                        Sno = Sno + 1
                        Sz2FtEmp_ID = Common_Procedures.Employee_NameToIdNo(Con, dgv_SizingDetails_Set2.Rows(i).Cells(13).Value, tr)
                        Sz2BkEmp_ID = Common_Procedures.Employee_NameToIdNo(Con, dgv_SizingDetails_Set2.Rows(i).Cells(15).Value, tr)
                        Sz2BlEmp_ID = Common_Procedures.Employee_NameToIdNo(Con, dgv_SizingDetails_Set2.Rows(i).Cells(17).Value, tr)
                        Sz2CkEmp_ID = Common_Procedures.Employee_NameToIdNo(Con, dgv_SizingDetails_Set2.Rows(i).Cells(19).Value, tr)
                        Sz2Ft2Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, dgv_SizingDetails_Set2.Rows(i).Cells(21).Value, tr)
                        Sz2Bk2Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, dgv_SizingDetails_Set2.Rows(i).Cells(23).Value, tr)
                        Sz2Bl2Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, dgv_SizingDetails_Set2.Rows(i).Cells(25).Value, tr)
                        Sz2Ck2Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, dgv_SizingDetails_Set2.Rows(i).Cells(27).Value, tr)
                        Sz2Vndr_ID = Common_Procedures.Vendor_AlaisNameToIdNo(Con, dgv_SizingDetails_Set2.Rows(i).Cells(31).Value, tr)
                        Shift_ID = Common_Procedures.Shift_NameToIdNo(Con, .Rows(i).Cells(9).Value, tr)

                        FrntSizr1_Mtrs = 0
                        BackSizr1_Mtrs = 0
                        Boilr1_Mtrs = 0
                        Cookr1_Mtrs = 0
                        FrntSizr2_Mtrs = 0
                        BackSizr2_Mtrs = 0
                        Boilr2_Mtrs = 0
                        Cookr2_Mtrs = 0

                        If Sz1FtEmp_ID <> 0 Then
                            If .Columns(14).Visible = True Then FrntSizr1_Mtrs = Val(.Rows(i).Cells(14).Value) Else FrntSizr1_Mtrs = Val(v_W_Mtrs)
                        End If
                        If Sz1BkEmp_ID <> 0 Then
                            If .Columns(16).Visible = True Then BackSizr1_Mtrs = Val(.Rows(i).Cells(16).Value) Else BackSizr1_Mtrs = Val(v_W_Mtrs)
                        End If
                        If Sz1BlEmp_ID <> 0 Then
                            If .Columns(18).Visible = True Then Boilr1_Mtrs = Val(.Rows(i).Cells(18).Value) Else Boilr1_Mtrs = Val(v_W_Mtrs)
                        End If
                        If Sz1CkEmp_ID <> 0 Then
                            If .Columns(20).Visible = True Then Cookr1_Mtrs = Val(.Rows(i).Cells(20).Value) Else Cookr1_Mtrs = Val(v_W_Mtrs)
                        End If

                        If Sz1Ft2Emp_ID <> 0 Then
                            If .Columns(22).Visible = True Then FrntSizr2_Mtrs = Val(.Rows(i).Cells(22).Value) Else FrntSizr2_Mtrs = Val(v_W_Mtrs)
                        End If
                        If Sz1Bk2Emp_ID <> 0 Then
                            If .Columns(24).Visible = True Then BackSizr2_Mtrs = Val(.Rows(i).Cells(24).Value) Else BackSizr2_Mtrs = Val(v_W_Mtrs)
                        End If
                        If Sz1Bl2Emp_ID <> 0 Then
                            If .Columns(26).Visible = True Then Boilr2_Mtrs = Val(.Rows(i).Cells(26).Value) Else Boilr2_Mtrs = Val(v_W_Mtrs)
                        End If
                        If Sz1Ck2Emp_ID <> 0 Then
                            If .Columns(28).Visible = True Then Cookr2_Mtrs = Val(.Rows(i).Cells(28).Value) Else Cookr2_Mtrs = Val(v_W_Mtrs)
                        End If


                        Nr = 0
                        cmd.CommandText = "Update Stock_SizedPavu_Processing_Details set SoftwareType_IdNo = " & Str(Val(Common_Procedures.SoftwareTypes.Sizing_Software)) & " , Set_Code = '" & Trim(vSETCD_PKCOND) & "' , setcode_forSelection =  '" & Trim(vSELC_SETCODE) & "', Reference_Date = @SetDate, Ledger_IdNo = " & Str(Val(Led_ID)) & ", Ends_Name = '" & Trim(v_EndsNM) & "', Count_IdNo = " & Str(Val(Cnt_ID)) & ", Mill_IdNo = " & Str(Val(Mil_ID)) & ", Beam_Width_Idno = " & Str(Val(Bw_id)) & ", Sizing_SlNo = " & Str(Val(v_S_SlNo)) & ", Sl_No = " & Str(Val(Sno)) & ", ForOrderBy_BeamNo = " & Str(Val(Common_Procedures.OrderBy_CodeToValue(.Rows(i).Cells(1).Value))) & ", Gross_Weight = " & Str(Val(.Rows(i).Cells(2).Value)) & ", Tare_Weight = " & Str(Val(.Rows(i).Cells(3).Value)) & ", Net_Weight = " & Str(Val(.Rows(i).Cells(4).Value)) & ", Noof_Pcs = " & Str(Val(.Rows(i).Cells(5).Value)) & ",  Party_PickUp_Percentage = " & Str(Val(.Rows(i).Cells(30).Value)) & " ,  Meters_Pc = " & Str(Val(.Rows(i).Cells(6).Value)) & ", Meters = " & Str(Val(.Rows(i).Cells(7).Value)) & ", Warp_Meters =  " & Str(Val(v_W_Mtrs)) & " , Shift = '" & Trim(.Rows(i).Cells(9).Value) & "'  ,  Start_Time  = " & Val(.Rows(i).Cells(10).Value) & "  ,   End_Time = " & Str(Val(.Rows(i).Cells(11).Value)) & "  , Total_Time  = " & Str(Val(.Rows(i).Cells(12).Value)) & " , Front_Sizer_1_IdNo = " & Val(Sz2FtEmp_ID) & "  , Front_Sizer_1_Meters = " & Str(Val(FrntSizr1_Mtrs)) & " , Back_Sizer_1_IdNo = " & Val(Sz2BkEmp_ID) & " ,Back_Sizer_1_meters = " & Str(Val(BackSizr1_Mtrs)) & ",Boiler_1_IdNo = " & Val(Sz2BlEmp_ID) & " , Boiler_1_Meters = " & Str(Val(Boilr1_Mtrs)) & ", cooker_1_IdNo  = " & Val(Sz2CkEmp_ID) & ",  Cooker_1_Meters = " & Str(Val(Cookr1_Mtrs)) & " , Front_Sizer_2_IdNo = " & Val(Sz2Ft2Emp_ID) & ",Front_Sizer_2_Meters = " & Str(Val(FrntSizr2_Mtrs)) & " ,Back_Sizer_2_IdNo = " & Val(Sz2Bk2Emp_ID) & " ,   Back_Sizer_2_meters = " & Str(Val(BackSizr2_Mtrs)) & " , Boiler_2_IdNo = " & Val(Sz2Bl2Emp_ID) & " , Boiler_2_Meters = " & Str(Val(Boilr2_Mtrs)) & " ,  Cooker_2_IdNo = " & Val(Sz2Ck2Emp_ID) & " , Cooker_2_Meters  = " & Str(Val(Cookr2_Mtrs)) & ",   Remarks ='" & Trim(.Rows(i).Cells(29).Value) & "',Vendor_IdNo = " & Val(Sz2Vndr_ID) & " ,Actual_Gross_Weight  = " & Str(Val(.Rows(i).Cells(32).Value)) & ",Actual_Net_Weight  = " & Str(Val(.Rows(i).Cells(33).Value)) & ",Actual_PickUp  = " & Str(Val(.Rows(i).Cells(34).Value)) & ",  Total_SizingSlNo_Beam = " & Str(Val(Tot_SzSl_Bms)) & ", Meters_Yards_Type = '" & Trim(Mtrs_Yrds) & "' , Sizing_Machine_No_IdNo = " & Val(SzM_id) & ",  Loom_Type = '" & Trim(cbo_LoomType.Text) & "' , Shift_Idno = " & Str(Val(Shift_ID)) & " , LoomType_Idno = " & Str(Val(LmType_ID)) & " " &
                                            " Where Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "' and Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and Beam_No = '" & Trim(.Rows(i).Cells(1).Value) & "'  "
                        Nr = cmd.ExecuteNonQuery()

                        If Nr = 0 Then
                            cmd.CommandText = "Insert into Stock_SizedPavu_Processing_Details ( SoftwareType_IdNo  , Reference_Code, Company_IdNo          ,  Reference_No                     ,     for_OrderBy       , Reference_Date, Ledger_IdNo      ,       Set_Code                 ,                   Set_No         , setcode_forSelection      ,      Ends_Name          ,             count_idno    ,      Mill_IdNo      ,     Beam_Width_Idno    ,   Sizing_SlNo             ,        Sl_No         ,                Beam_No            ,                             ForOrderBy_BeamNo                                      ,                    Gross_Weight                ,              Tare_Weight            ,                    Net_Weight             ,           Noof_Pcs                      ,                     Meters_Pc             ,                    Meters                 ,        Warp_Meters ,   Pavu_Delivery_Code ,            Shift                  ,                  Start_Time               ,                   End_Time               ,                 Total_Time                 ,      Front_Sizer_1_IdNo        ,     Front_Sizer_1_Meters           ,         Back_Sizer_1_IdNo  ,             Back_Sizer_1_meters  , Boiler_1_IdNo          ,       Boiler_1_Meters        ,          cooker_1_IdNo  ,                 Cooker_1_Meters   ,       Front_Sizer_2_IdNo ,      Front_Sizer_2_Meters       ,     Back_Sizer_2_IdNo      ,     Back_Sizer_2_meters         ,       Boiler_2_IdNo        ,             Boiler_2_Meters    ,            Cooker_2_IdNo  ,                 Cooker_2_Meters      ,             Remarks                    ,  Pavu_Delivery_Increment, DeliveryTo_Name ,  Party_PickUp_Percentage                     ,   Vendor_idNo          ,  Actual_Gross_Weight                     ,      Actual_Net_Weight                  ,                      Actual_PickUp        ,       Total_SizingSlNo_Beam    ,    Meters_Yards_Type      , Sizing_Machine_No_IdNo ,               Loom_Type            ,          Shift_Idno         ,      LoomType_Idno  ,  Endscount_Idno ) " &
                                            " Values (" & Str(Val(Common_Procedures.SoftwareTypes.Sizing_Software)) & " , '" & Trim(Pk_Condition) & Trim(NewCode) & "', " & Str(Val(lbl_Company.Tag)) & ", '" & Trim(lbl_SetNo.Tag) & "', " & Str(Val(vOrdByNo)) & ", @SetDate, " & Str(Val(Led_ID)) & ", '" & Trim(vSETCD_PKCOND) & "', '" & Trim(lbl_SetNo.Tag) & "', '" & Trim(vSELC_SETCODE) & "', '" & Trim(v_EndsNM) & "', " & Str(Val(Cnt_ID)) & ", " & Str(Val(Mil_ID)) & ", " & Str(Val(Bw_id)) & ", " & Str(Val(v_S_SlNo)) & ", " & Str(Val(Sno)) & ", '" & Trim(.Rows(i).Cells(1).Value) & "', " & Str(Val(Common_Procedures.OrderBy_CodeToValue(.Rows(i).Cells(1).Value))) & ", " & Str(Val(.Rows(i).Cells(2).Value)) & ", " & Str(Val(.Rows(i).Cells(3).Value)) & ", " & Str(Val(.Rows(i).Cells(4).Value)) & ", " & Str(Val(.Rows(i).Cells(5).Value)) & ", " & Str(Val(.Rows(i).Cells(6).Value)) & ", " & Str(Val(.Rows(i).Cells(7).Value)) & ", " & Str(Val(v_W_Mtrs)) & ",      ''        , '" & Trim(.Rows(i).Cells(9).Value) & "'," & Val(.Rows(i).Cells(10).Value) & ", " & Str(Val(.Rows(i).Cells(11).Value)) & ", " & Str(Val(.Rows(i).Cells(12).Value)) & " ,  " & Val(Sz2FtEmp_ID) & "      ,  " & Str(Val(FrntSizr1_Mtrs)) & "  , " & Trim(Sz2BkEmp_ID) & "  ,  " & Str(Val(BackSizr1_Mtrs)) & "," & Val(Sz2BlEmp_ID) & ", " & Str(Val(Boilr1_Mtrs)) & ", " & Val(Sz2CkEmp_ID) & "," & Str(Val(Cookr1_Mtrs)) & "      , " & Val(Sz2Ft2Emp_ID) & ", " & Str(Val(FrntSizr2_Mtrs)) & "," & Val(Sz2Bk2Emp_ID) & "   , " & Str(Val(BackSizr2_Mtrs)) & ", " & Val(Sz2Bl2Emp_ID) & "  , " & Str(Val(Boilr2_Mtrs)) & "  ,  " & Val(Sz2Ck2Emp_ID) & ", " & Str(Val(Cookr2_Mtrs)) & "        ,'" & Trim(.Rows(i).Cells(29).Value) & "',        0                ,     ''          ,  " & Str(Val(.Rows(i).Cells(30).Value)) & "  , " & Val(Sz2Vndr_ID) & "," & Str(Val(.Rows(i).Cells(32).Value)) & "," & Str(Val(.Rows(i).Cells(33).Value)) & ", " & Str(Val(.Rows(i).Cells(34).Value)) & ", " & Str(Val(Tot_SzSl_Bms)) & ", '" & Trim(Mtrs_Yrds) & "' ,   " & Val(SzM_id) & "   , '" & Trim(cbo_LoomType.Text) & "' , " & Str(Val(Shift_ID)) & " , " & Str(Val(LmType_ID)) & ",  0        ) "
                            cmd.ExecuteNonQuery()
                        End If



                    End If

                Next
            End With

            With dgv_SizingDetails_Set3
                Sno = 200

                v_S_SlNo = 3
                v_W_Mtrs = 0
                v_EndsNM = ""

                a = Split(Trim(txt_WarpMeters.Text), ",")
                If UBound(a) >= 2 Then v_W_Mtrs = Val(a(2))

                a = Split(Trim(txt_Ends.Text), ",")
                If UBound(a) >= 2 Then v_EndsNM = Val(a(2))

                Tot_SzSl_Bms = 0
                If dgv_SizingDetails_Total_Set3.RowCount > 0 Then
                    If Val(dgv_SizingDetails_Total_Set3.Rows(0).Cells(7).Value) <> 0 Then
                        Tot_SzSl_Bms = Val(dgv_SizingDetails_Total_Set3.Rows(0).Cells(1).Value)
                    End If
                End If

                For i = 0 To .RowCount - 1

                    If Val(.Rows(i).Cells(7).Value) <> 0 Then

                        Sno = Sno + 1
                        Sz3FtEmp_ID = Common_Procedures.Employee_NameToIdNo(Con, dgv_SizingDetails_Set3.Rows(i).Cells(13).Value, tr)
                        Sz3BkEmp_ID = Common_Procedures.Employee_NameToIdNo(Con, dgv_SizingDetails_Set3.Rows(i).Cells(15).Value, tr)
                        Sz3BlEmp_ID = Common_Procedures.Employee_NameToIdNo(Con, dgv_SizingDetails_Set3.Rows(i).Cells(17).Value, tr)
                        Sz3CkEmp_ID = Common_Procedures.Employee_NameToIdNo(Con, dgv_SizingDetails_Set3.Rows(i).Cells(19).Value, tr)
                        Sz3Ft2Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, dgv_SizingDetails_Set3.Rows(i).Cells(21).Value, tr)
                        Sz3Bk2Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, dgv_SizingDetails_Set3.Rows(i).Cells(23).Value, tr)
                        Sz3Bl2Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, dgv_SizingDetails_Set3.Rows(i).Cells(25).Value, tr)
                        Sz3Ck2Emp_ID = Common_Procedures.Employee_NameToIdNo(Con, dgv_SizingDetails_Set3.Rows(i).Cells(27).Value, tr)
                        Sz3Vndr_ID = Common_Procedures.Vendor_AlaisNameToIdNo(Con, dgv_SizingDetails_Set3.Rows(i).Cells(31).Value, tr)
                        Shift_ID = Common_Procedures.Shift_NameToIdNo(Con, .Rows(i).Cells(9).Value, tr)

                        FrntSizr1_Mtrs = 0
                        BackSizr1_Mtrs = 0
                        Boilr1_Mtrs = 0
                        Cookr1_Mtrs = 0
                        FrntSizr2_Mtrs = 0
                        BackSizr2_Mtrs = 0
                        Boilr2_Mtrs = 0
                        Cookr2_Mtrs = 0

                        If Sz1FtEmp_ID <> 0 Then
                            If .Columns(14).Visible = True Then FrntSizr1_Mtrs = Val(.Rows(i).Cells(14).Value) Else FrntSizr1_Mtrs = Val(v_W_Mtrs)
                        End If
                        If Sz1BkEmp_ID <> 0 Then
                            If .Columns(16).Visible = True Then BackSizr1_Mtrs = Val(.Rows(i).Cells(16).Value) Else BackSizr1_Mtrs = Val(v_W_Mtrs)
                        End If
                        If Sz1BlEmp_ID <> 0 Then
                            If .Columns(18).Visible = True Then Boilr1_Mtrs = Val(.Rows(i).Cells(18).Value) Else Boilr1_Mtrs = Val(v_W_Mtrs)
                        End If
                        If Sz1CkEmp_ID <> 0 Then
                            If .Columns(20).Visible = True Then Cookr1_Mtrs = Val(.Rows(i).Cells(20).Value) Else Cookr1_Mtrs = Val(v_W_Mtrs)
                        End If

                        If Sz1Ft2Emp_ID <> 0 Then
                            If .Columns(22).Visible = True Then FrntSizr2_Mtrs = Val(.Rows(i).Cells(22).Value) Else FrntSizr2_Mtrs = Val(v_W_Mtrs)
                        End If
                        If Sz1Bk2Emp_ID <> 0 Then
                            If .Columns(24).Visible = True Then BackSizr2_Mtrs = Val(.Rows(i).Cells(24).Value) Else BackSizr2_Mtrs = Val(v_W_Mtrs)
                        End If
                        If Sz1Bl2Emp_ID <> 0 Then
                            If .Columns(26).Visible = True Then Boilr2_Mtrs = Val(.Rows(i).Cells(26).Value) Else Boilr2_Mtrs = Val(v_W_Mtrs)
                        End If
                        If Sz1Ck2Emp_ID <> 0 Then
                            If .Columns(28).Visible = True Then Cookr2_Mtrs = Val(.Rows(i).Cells(28).Value) Else Cookr2_Mtrs = Val(v_W_Mtrs)
                        End If

                        Nr = 0
                        cmd.CommandText = "Update Stock_SizedPavu_Processing_Details set SoftwareType_IdNo = " & Str(Val(Common_Procedures.SoftwareTypes.Sizing_Software)) & " , Set_Code = '" & Trim(vSETCD_PKCOND) & "' , setcode_forSelection =  '" & Trim(vSELC_SETCODE) & "', Reference_Date = @SetDate, Ledger_IdNo = " & Str(Val(Led_ID)) & ", Ends_Name = '" & Trim(v_EndsNM) & "', Count_IdNo = " & Str(Val(Cnt_ID)) & ", Mill_IdNo = " & Str(Val(Mil_ID)) & ", Beam_Width_Idno = " & Str(Val(Bw_id)) & ", Sizing_SlNo = " & Str(Val(v_S_SlNo)) & ", Sl_No = " & Str(Val(Sno)) & ", ForOrderBy_BeamNo = " & Str(Val(Common_Procedures.OrderBy_CodeToValue(.Rows(i).Cells(1).Value))) & ", Gross_Weight = " & Str(Val(.Rows(i).Cells(2).Value)) & ", Tare_Weight = " & Str(Val(.Rows(i).Cells(3).Value)) & ", Net_Weight = " & Str(Val(.Rows(i).Cells(4).Value)) & ", Party_PickUp_Percentage = " & Str(Val(.Rows(i).Cells(30).Value)) & " , Noof_Pcs = " & Str(Val(.Rows(i).Cells(5).Value)) & ", Meters_Pc = " & Str(Val(.Rows(i).Cells(6).Value)) & ", Meters = " & Str(Val(.Rows(i).Cells(7).Value)) & ", Warp_Meters =  " & Str(Val(v_W_Mtrs)) & " , Shift = '" & Trim(.Rows(i).Cells(9).Value) & "'  ,  Start_Time  = " & Val(.Rows(i).Cells(10).Value) & "  ,   End_Time = " & Str(Val(.Rows(i).Cells(11).Value)) & "  , Total_Time  = " & Str(Val(.Rows(i).Cells(12).Value)) & " , Front_Sizer_1_IdNo = " & Val(Sz3FtEmp_ID) & "  , Front_Sizer_1_Meters = " & Str(Val(FrntSizr1_Mtrs)) & " , Back_Sizer_1_IdNo = " & Val(Sz3BkEmp_ID) & " ,Back_Sizer_1_meters = " & Str(Val(BackSizr1_Mtrs)) & ",Boiler_1_IdNo = " & Val(Sz3BlEmp_ID) & " , Boiler_1_Meters = " & Str(Val(Boilr1_Mtrs)) & ", cooker_1_IdNo  = " & Val(Sz3CkEmp_ID) & ",  Cooker_1_Meters = " & Str(Val(Cookr1_Mtrs)) & " , Front_Sizer_2_IdNo = " & Val(Sz3Ft2Emp_ID) & ",Front_Sizer_2_Meters = " & Str(Val(FrntSizr2_Mtrs)) & " ,Back_Sizer_2_IdNo = " & Val(Sz3Bk2Emp_ID) & " ,   Back_Sizer_2_meters = " & Str(Val(BackSizr2_Mtrs)) & " , Boiler_2_IdNo = " & Val(Sz3Bl2Emp_ID) & " , Boiler_2_Meters = " & Str(Val(Boilr2_Mtrs)) & " ,  Cooker_2_IdNo = " & Val(Sz3Ck2Emp_ID) & " , Cooker_2_Meters  = " & Str(Val(Cookr2_Mtrs)) & ",   Remarks ='" & Trim(.Rows(i).Cells(29).Value) & "', Vendor_IdNo= " & Val(Sz3Vndr_ID) & ",Actual_Gross_Weight  = " & Str(Val(.Rows(i).Cells(32).Value)) & ",Actual_Net_Weight  = " & Str(Val(.Rows(i).Cells(33).Value)) & ", Actual_PickUp  = " & Str(Val(.Rows(i).Cells(34).Value)) & " ,  Total_SizingSlNo_Beam = " & Str(Val(Tot_SzSl_Bms)) & ", Meters_Yards_Type = '" & Trim(Mtrs_Yrds) & "' , Sizing_Machine_No_IdNo = " & Val(SzM_id) & ", Loom_Type = '" & Trim(cbo_LoomType.Text) & "' , Shift_Idno = " & Str(Val(Shift_ID)) & " , LoomType_Idno = " & Str(Val(LmType_ID)) & "  " &
                                            " Where Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "' and Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and Beam_No = '" & Trim(.Rows(i).Cells(1).Value) & "'  "
                        Nr = cmd.ExecuteNonQuery()

                        If Nr = 0 Then
                            cmd.CommandText = "Insert into Stock_SizedPavu_Processing_Details ( SoftwareType_IdNo  , Reference_Code, Company_IdNo          ,         Reference_No           ,       for_OrderBy        , Reference_Date, Ledger_IdNo             ,        Set_Code                 ,         Set_No               ,         setcode_forSelection ,        Ends_Name       ,        count_idno      ,            Mill_IdNo     ,    Beam_Width_Idno      ,     Sizing_SlNo         ,          Sl_No           ,                   Beam_No              ,            ForOrderBy_BeamNo                                                    ,             Gross_Weight                  ,             Tare_Weight                   ,                    Net_Weight           ,             Noof_Pcs                    ,                         Meters_Pc           ,       Meters                           ,           Warp_Meters  , Pavu_Delivery_Code,              Shift                    ,                  Start_Time         ,                   End_Time                ,                 Total_Time                 ,      Front_Sizer_1_IdNo      ,     Front_Sizer_1_Meters        ,         Back_Sizer_1_IdNo   ,             Back_Sizer_1_meters ,   Boiler_1_IdNo             ,       Boiler_1_Meters        ,          cooker_1_IdNo   ,                 Cooker_1_Meters           ,       Front_Sizer_2_IdNo ,      Front_Sizer_2_Meters      ,     Back_Sizer_2_IdNo      ,     Back_Sizer_2_meters            ,       Boiler_2_IdNo      ,             Boiler_2_Meters  ,            Cooker_2_IdNo  ,         Cooker_2_Meters     ,             Remarks                  ,  Pavu_Delivery_Increment, DeliveryTo_Name ,                 Party_PickUp_Percentage    ,       Vendor_idNo      ,                      Actual_Gross_Weight  ,              Actual_Net_Weight            ,              Actual_PickUp                  ,     Total_SizingSlNo_Beam      ,    Meters_Yards_Type      ,   Sizing_Machine_No_IdNo ,               Loom_Type          ,         Shift_Idno      ,            LoomType_Idno      ,  Endscount_Idno ) " &
                                            " Values (" & Str(Val(Common_Procedures.SoftwareTypes.Sizing_Software)) & " , '" & Trim(Pk_Condition) & Trim(NewCode) & "', " & Str(Val(lbl_Company.Tag)) & ", '" & Trim(lbl_SetNo.Tag) & "' , " & Str(Val(vOrdByNo)) & ", @SetDate     , " & Str(Val(Led_ID)) & ", '" & Trim(vSETCD_PKCOND) & "'  , '" & Trim(lbl_SetNo.Tag) & "', '" & Trim(vSELC_SETCODE) & "', '" & Trim(v_EndsNM) & "', " & Str(Val(Cnt_ID)) & ", " & Str(Val(Mil_ID)) & ", " & Str(Val(Bw_id)) & ", " & Str(Val(v_S_SlNo)) & ", " & Str(Val(Sno)) & "   , '" & Trim(.Rows(i).Cells(1).Value) & "', " & Str(Val(Common_Procedures.OrderBy_CodeToValue(.Rows(i).Cells(1).Value))) & ", " & Str(Val(.Rows(i).Cells(2).Value)) & ", " & Str(Val(.Rows(i).Cells(3).Value)) & ", " & Str(Val(.Rows(i).Cells(4).Value)) & ", " & Str(Val(.Rows(i).Cells(5).Value)) & ", " & Str(Val(.Rows(i).Cells(6).Value)) & ", " & Str(Val(.Rows(i).Cells(7).Value)) & ", " & Str(Val(v_W_Mtrs)) & ", ''              ,'" & Trim(.Rows(i).Cells(9).Value) & "'," & Val(.Rows(i).Cells(10).Value) & ", " & Str(Val(.Rows(i).Cells(11).Value)) & ", " & Str(Val(.Rows(i).Cells(12).Value)) & "," & Val(Sz3FtEmp_ID) & "       , " & Str(Val(FrntSizr1_Mtrs)) & "," & Val(Sz3BkEmp_ID) & "     , " & Str(Val(BackSizr1_Mtrs)) & "," & Val(Sz3BlEmp_ID) & "     , " & Str(Val(Boilr1_Mtrs)) & ", " & Val(Sz3CkEmp_ID) & " ,           " & Str(Val(Cookr1_Mtrs)) & "   ," & Val(Sz3Ft2Emp_ID) & ", " & Str(Val(FrntSizr2_Mtrs)) & "," & Val(Sz3Bk2Emp_ID) & "   , " & Str(Val(BackSizr2_Mtrs)) & "   , " & Val(Sz3Bl2Emp_ID) & ", " & Str(Val(Boilr2_Mtrs)) & "," & Val(Sz3Ck2Emp_ID) & ", " & Str(Val(Cookr2_Mtrs)) & ",'" & Trim(.Rows(i).Cells(29).Value) & "',         0              ,         ''      , " & Str(Val(.Rows(i).Cells(30).Value)) & " , " & Val(Sz3Vndr_ID) & ", " & Str(Val(.Rows(i).Cells(32).Value)) & ", " & Str(Val(.Rows(i).Cells(33).Value)) & ", " & Str(Val(.Rows(i).Cells(34).Value)) & "  ,  " & Str(Val(Tot_SzSl_Bms)) & ", '" & Trim(Mtrs_Yrds) & "' ,   " & Val(SzM_id) & "    , '" & Trim(cbo_LoomType.Text) & "' , " & Str(Val(Shift_ID)) & "  , " & Str(Val(LmType_ID)) & " ,      0       ) "
                            cmd.ExecuteNonQuery()
                        End If


                    End If

                Next

            End With


            With dgv_YarnTakenDetails
                Sno = 0

                For i = 0 To .RowCount - 1

                    If Val(.Rows(i).Cells(8).Value) <> 0 Then

                        Sno = Sno + 1

                        YCnt_ID = Common_Procedures.Count_NameToIdNo(Con, dgv_YarnTakenDetails.Rows(i).Cells(1).Value, tr)

                        YMil_ID = Common_Procedures.Mill_NameToIdNo(Con, dgv_YarnTakenDetails.Rows(i).Cells(4).Value, tr)


                        cmd.CommandText = "Insert into Specification_YarnTaken_Details (             set_code   ,              Company_IdNo        ,               set_no         ,            for_OrderBy    , set_date,           Ledger_IdNo   ,            Sl_No     ,           count_idno     ,                  Yarn_Type             ,         BabyCone_setcode_forSelection   ,           Mill_IdNo      ,                     Bags                 ,                   Weight_Cone            ,                     Cones                ,                    Weight                 ,     WareHouse_IdNo  ) " &
                                          "Values                                      ( '" & Trim(NewCode) & "', " & Str(Val(lbl_Company.Tag)) & ", '" & Trim(lbl_SetNo.Tag) & "', " & Str(Val(vOrdByNo)) & ", @SetDate, " & Str(Val(Led_ID)) & ", " & Str(Val(Sno)) & ", " & Str(Val(YCnt_ID)) & ", '" & Trim(.Rows(i).Cells(2).Value) & "', '" & Trim(.Rows(i).Cells(3).Value) & "' , " & Str(Val(YMil_ID)) & ", " & Str(Val(.Rows(i).Cells(5).Value)) & ", " & Str(Val(.Rows(i).Cells(6).Value)) & ", " & Str(Val(.Rows(i).Cells(7).Value)) & ", " & Str(Val(.Rows(i).Cells(8).Value)) & " ," & Val(Gdn_IdNo) & ")"

                        cmd.ExecuteNonQuery()

                        Prtcls2 = "YarnTkn : Set.No. " & Trim(lbl_SetNo.Tag)

                        vBySetCd = ""
                        vBySetNo = ""

                        If Trim(UCase(dgv_YarnTakenDetails.Rows(i).Cells(2).Value)) = "BABY" And Trim(Trim(dgv_YarnTakenDetails.Rows(i).Cells(3).Value)) <> "" Then
                            Da = New SqlClient.SqlDataAdapter("select a.set_code, a.set_no from Specification_Head a where a.setcode_forSelection = '" & Trim(Trim(dgv_YarnTakenDetails.Rows(i).Cells(3).Value)) & "'", Con)
                            Da.SelectCommand.Transaction = tr
                            Dt1 = New DataTable
                            Da.Fill(Dt1)
                            If Dt1.Rows.Count > 0 Then
                                vBySetCd = Dt1.Rows(0).Item("set_code").ToString
                                vBySetNo = Dt1.Rows(0).Item("set_no").ToString
                            End If
                            Dt1.Clear()
                        End If


                        If Trim(UCase(.Rows(i).Cells(2).Value)) = "BABY" Then
                            vSetCd = Trim(vBySetCd)
                            vSetNo = Trim(vBySetNo)

                        Else
                            vSetCd = Trim(vSETCD_PKCOND)
                            vSetNo = Trim(lbl_SetNo.Tag)

                        End If

                        vYrnPartcls = Prtcls2
                        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1220" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1263" Then '---- Meenashi Sizing (Somanur)
                            vYrnPartcls = vYrnPartcls & ",  Mill :  " & Trim(.Rows(i).Cells(4).Value)
                        End If

                        Delv_ID = Led_ID
                        Rec_ID = 0
                        If Val(.Rows(i).Cells(8).Value) < 0 Then
                            Delv_ID = 0
                            Rec_ID = Led_ID
                        End If

                        If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1288" Then

                            cmd.CommandText = "Insert into Stock_Yarn_Processing_Details (     SoftwareType_IdNo,                               Reference_Code,                         Company_IdNo         ,            Reference_No       ,           for_OrderBy    , Reference_Date,        DeliveryTo_Idno   ,    ReceivedFrom_Idno    ,     Party_Bill_No    ,                Sl_No      ,           Count_IdNo     ,                   Yarn_Type            ,          Mill_IdNo       ,                               Bags                 ,                               Cones                ,                               Weight               ,        Particulars     ,  Posting_For,         Set_Code      ,            Set_No          ,     WareHouse_IdNo     ) " &
                                              "Values      ( " & Str(Val(Common_Procedures.SoftwareTypes.Sizing_Software)) & " ,'" & Trim(Pk_Condition) & Trim(NewCode) & "', " & Str(Val(lbl_Company.Tag)) & ", '" & Trim(lbl_SetNo.Tag) & "', " & Str(Val(vOrdByNo)) & ",     @SetDate  , " & Str(Val(Delv_ID)) & ", " & Str(Val(Rec_ID)) & ", '" & Trim(PBlNo) & "', " & Str(-1 * Val(Sno)) & ", " & Str(Val(YCnt_ID)) & ", '" & Trim(.Rows(i).Cells(2).Value) & "', " & Str(Val(YMil_ID)) & ", " & Str(Math.Abs(Val(.Rows(i).Cells(5).Value))) & ", " & Str(Math.Abs(Val(.Rows(i).Cells(7).Value))) & ", " & Str(Math.Abs(Val(.Rows(i).Cells(8).Value))) & ", '" & Trim(vYrnPartcls) & "',  'YARNTAKEN', '" & Trim(vSetCd) & "', '" & Trim(vSetNo) & "' , " & Str(Val(Gdn_IdNo)) & ") "
                            cmd.ExecuteNonQuery()

                        End If

                        If Trim(UCase(dgv_YarnTakenDetails.Rows(i).Cells(2).Value)) = "BABY" And Trim(Trim(dgv_YarnTakenDetails.Rows(i).Cells(3).Value)) <> "" Then

                            Nr = 0
                            cmd.CommandText = "Update Stock_BabyCone_Processing_Details set Delivered_Bags = Delivered_Bags + " & Str(Val(dgv_YarnTakenDetails.Rows(i).Cells(5).Value)) & ", Delivered_Cones = Delivered_Cones + " & Str(Val(dgv_YarnTakenDetails.Rows(i).Cells(7).Value)) & ", Delivered_Weight = Delivered_Weight + " & Str(Val(dgv_YarnTakenDetails.Rows(i).Cells(8).Value)) & " Where setcode_forSelection = '" & Trim(dgv_YarnTakenDetails.Rows(i).Cells(3).Value) & "' and Ledger_IdNo = " & Str(Val(Led_ID)) & " and Count_IdNo = " & Str(Val(Cnt_ID)) & " and Mill_IdNo = " & Str(Val(Mil_ID))
                            Nr = cmd.ExecuteNonQuery()

                            If Nr = 0 Then
                                MessageBox.Show("Invalid Baby cone Details - Mismatch of details", "DOES NOT SAVE", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                                tr.Rollback()
                                If dtp_Date.Enabled And dtp_Date.Visible Then dtp_Date.Focus()
                                Exit Sub
                            End If

                        End If


                        If Common_Procedures.settings.Combine_Textile_Sizing_Software_Status = 1 Then

                            TexComp_ID = Common_Procedures.get_FieldValue(Con, "ledger_head", "Textile_To_CompanyIdNo", "(ledger_idno = " & Str(Val(Led_ID)) & ")", , tr)
                            If Val(TexComp_ID) <> 0 Then

                                TexLed_ID = Common_Procedures.get_FieldValue(Con, "company_head", "Textile_To_SizingIdNo", "(company_idno = " & Str(Val(lbl_Company.Tag)) & ")", , tr)
                                If Val(TexLed_ID) = 0 Then
                                    Throw New ApplicationException("Invalid Textile Sizing Name" & Chr(13) & "Select ``Textile_Sizing_Name``  in  Company_Creation  for  " & lbl_Company.Text)
                                    Exit Sub
                                End If

                                TexCnt_iD = Common_Procedures.get_FieldValue(Con, "count_head", "Textile_To_CountIdNo", "(count_idno = " & Str(Val(YCnt_ID)) & ")", , tr)
                                If Val(TexCnt_iD) = 0 Then
                                    vNewFrmTYpe = "COUNT"
                                    vNewFrmIDNo = YCnt_ID
                                    Throw New ApplicationException("Invalid Textile Count Name" & Chr(13) & "Select ``Textile_Count_Name``  in  Count_Creation  for  " & dgv_YarnTakenDetails.Rows(i).Cells(1).Value)
                                    Exit Sub
                                End If

                                TexMil_iD = Common_Procedures.get_FieldValue(Con, "Mill_head", "Textile_To_MillIdNo", "(Mill_idno = " & Str(Val(YMil_ID)) & ")", , tr)
                                If Val(TexMil_iD) = 0 Then
                                    vNewFrmTYpe = "MILL"
                                    Throw New ApplicationException("Invalid Textile Mill Name" & Chr(13) & "Select ``Textile_Mill_Name``  in  Mill_Creation  for  " & dgv_YarnTakenDetails.Rows(i).Cells(4).Value)
                                    Exit Sub
                                End If

                                Delv_ID = 0
                                Rec_ID = TexLed_ID
                                If Val(.Rows(i).Cells(8).Value) < 0 Then
                                    Delv_ID = TexLed_ID
                                    Rec_ID = 0
                                End If


                                cmd.CommandText = "Insert into  " & Trim(vDbName) & "Stock_Yarn_Processing_Details ( SoftwareType_IdNo  ,                                     Reference_Code                    ,            Company_IdNo     ,             Reference_No      ,             for_OrderBy   ,     Reference_Date,           DeliveryTo_Idno     ,     ReceivedFrom_Idno   ,                              Entry_ID                        ,        Particulars     ,     Party_Bill_No    ,            Sl_No         ,          Count_IdNo        ,                                        Yarn_Type           ,           Mill_IdNo        ,                                                   Bags                 ,                                                   Cones                ,                                                   Weight               , DeliveryToIdno_ForParticulars,  ReceivedFromIdno_ForParticulars  ) " &
                                                    "                                    Values (" & Str(Val(Common_Procedures.SoftwareTypes.Sizing_Software)) & " ,  '" & Trim(Pk_Condition_Tex) & Trim(NewCode) & "', " & Str(Val(TexComp_ID)) & ", '" & Trim(lbl_SetNo.Text) & "', " & Str(Val(vOrdByNo)) & ",    @SetDate  , " & Str(Val(Delv_ID)) & ", " & Str(Val(Rec_ID)) & ", '" & Trim(Trim(Pk_Condition_Tex) & Trim(lbl_SetNo.Text)) & "', '" & Trim(Partcls) & "', '" & Trim(PBlNo) & "', " & Str(-1 * Val(Sno)) & ", " & Str(Val(TexCnt_iD)) & ", '" & Trim(dgv_YarnTakenDetails.Rows(i).Cells(2).Value) & "', " & Str(Val(TexMil_iD)) & ", " & Str(Math.Abs(Val(dgv_YarnTakenDetails.Rows(i).Cells(5).Value))) & ", " & Str(Math.Abs(Val(dgv_YarnTakenDetails.Rows(i).Cells(7).Value))) & ", " & Str(Math.Abs(Val(dgv_YarnTakenDetails.Rows(i).Cells(8).Value))) & ", " & Str(Val(Delv_ID)) & "   ,       " & Str(Val(Rec_ID)) & "    ) "
                                cmd.ExecuteNonQuery()


                            End If

                        End If

                    End If

                Next

            End With

            With dgv_BabyConeDetails
                Sno = 0

                For i = 0 To .RowCount - 1

                    If Val(.Rows(i).Cells(3).Value) <> 0 Then

                        Sno = Sno + 1

                        cmd.CommandText = "Insert into Specification_BabyCone_Details(set_code, Company_IdNo, set_no, for_OrderBy, set_date, Ledger_IdNo, Mill_IdNo, Count_IdNo, Sl_No, Bags, Cones, Gross_Weight) Values ('" & Trim(NewCode) & "', " & Str(Val(lbl_Company.Tag)) & ", '" & Trim(lbl_SetNo.Tag) & "', " & Str(Val(vOrdByNo)) & ", @SetDate, " & Str(Val(Led_ID)) & ", " & Str(Val(Mil_ID)) & ", " & Str(Val(Cnt_ID)) & ", " & Str(Val(Sno)) & ", " & Str(Val(.Rows(i).Cells(1).Value)) & ", " & Str(Val(.Rows(i).Cells(2).Value)) & ", " & Str(Val(.Rows(i).Cells(3).Value)) & " )"
                        cmd.ExecuteNonQuery()

                    End If

                Next
            End With

            With dgv_ChemicalDetails

                Sno = 0

                For i = 0 To .RowCount - 1

                    If Val(.Rows(i).Cells(9).Value) <> 0 Then

                        Itm_ID = Common_Procedures.Sizing_Item_NameToIdNo(Con, .Rows(i).Cells(1).Value, tr)

                        Sno = Sno + 1

                        cmd.CommandText = "Insert into Stock_Chemical_Processing_Details(Reference_Code,                             Company_IdNo,                            Reference_No,                        For_OrderBy, Reference_Date,               Ledger_IdNo,  Party_Bill_No,             Sl_No,                  Item_IdNo,                                 Mixing_1,                                     Mixing_2,                        Mixing_3,                                  Mixing_4,                                         Mixing_5 ,                                       Mixing_6    ,                            Mixing_AddLess  ,                                 Quantity,                            Rate,                                            Amount) " &
                            "                                               Values ('" & Trim(Pk_Condition) & Trim(NewCode) & "', " & Str(Val(lbl_Company.Tag)) & ", '" & Trim(lbl_SetNo.Tag) & "', " & Str(Val(vOrdByNo)) & ", @SetDate,       " & Str(Val(Led_ID)) & ",   '" & Trim(PBlNo) & "', " & Str(Val(Sno)) & ", " & Str(Val(Itm_ID)) & ", " & Str(Val(.Rows(i).Cells(2).Value)) & ",    " & Str(Val(.Rows(i).Cells(3).Value)) & " ,  " & Str(Val(.Rows(i).Cells(4).Value)) & ", " & Str(Val(.Rows(i).Cells(5).Value)) & ", " & Str(Val(.Rows(i).Cells(6).Value)) & ",     " & Str(Val(.Rows(i).Cells(7).Value)) & " ,  " & Str(Val(.Rows(i).Cells(8).Value)) & " ,   " & Str(-1 * Val(.Rows(i).Cells(9).Value)) & ",   " & Str(Val(.Rows(i).Cells(10).Value)) & ", " & Str(Val(.Rows(i).Cells(11).Value)) & " ) "
                        cmd.ExecuteNonQuery()

                    End If

                Next

            End With

            If Val(lbl_Total_Warping_NetWeight.Text) <> 0 Then

                Prtcls2 = "Cons : Set.No. " & Trim(lbl_SetNo.Tag)
                Bgs = 0
                Cns = 0
                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1102" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1163" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1144" Then '---- Ganesh karthik Sizing (Somanur)
                    For i = 0 To dgv_YarnTakenDetails.RowCount - 1
                        If Val(dgv_YarnTakenDetails.Rows(i).Cells(8).Value) <> 0 Then
                            If Trim(UCase(dgv_YarnTakenDetails.Rows(i).Cells(2).Value)) = "MILL" Then
                                Bgs = Bgs + Val(dgv_YarnTakenDetails.Rows(i).Cells(5).Value)
                                Cns = Cns + Val(dgv_YarnTakenDetails.Rows(i).Cells(7).Value)
                            End If
                        End If
                    Next

                Else
                    Bgs = Val(vTotYrnBags)

                    If chk_RewindingStatus.Checked = True Then
                        Cns = Val(vTotYrnCones)
                    End If

                End If

                vYrnPartcls = Prtcls2
                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1220" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1263" Then '---- Meenashi Sizing (Somanur)
                    vYrnPartcls = vYrnPartcls & ",  Mill :  " & Trim(cbo_MillName.Text)
                End If

                If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1288" Then
                    cmd.CommandText = "Insert into Stock_Yarn_Processing_Details (SoftwareType_IdNo  ,  Reference_Code, Company_IdNo, Reference_No, for_OrderBy, Reference_Date, DeliveryTo_Idno, ReceivedFrom_Idno, Party_Bill_No, Sl_No, Count_IdNo, Yarn_Type, Mill_IdNo, Bags, Cones, Weight, Particulars, Posting_For, Set_Code, Set_No) Values (" & Str(Val(Common_Procedures.SoftwareTypes.Sizing_Software)) & " , '" & Trim(Pk_Condition) & Trim(NewCode) & "', " & Str(Val(lbl_Company.Tag)) & ", '" & Trim(lbl_SetNo.Tag) & "', " & Str(Val(vOrdByNo)) & ", @SetDate, " & Str(Val(Led_ID)) & ", 0, '" & Trim(PBlNo) & "', 1, " & Str(Val(Cnt_ID)) & ", 'MILL', " & Str(Val(Mil_ID)) & ", " & Str(Val(Bgs)) & ", " & Str(Val(Cns)) & ", " & Str(Val(lbl_Total_Warping_NetWeight.Text)) & ", '" & Trim(vYrnPartcls) & "', 'CONSUMEDYARN', '" & Trim(NewCode) & "', '" & Trim(lbl_SetNo.Tag) & "' )"
                    cmd.ExecuteNonQuery()
                End If


            End If

            If Val(lbl_ExcessShort.Text) <> 0 Then

                Delv_ID = 0 : Rec_ID = 0
                If Val(lbl_ExcessShort.Text) < 0 Then
                    Delv_ID = Val(Led_ID)
                    Prtcls2 = "Short : Set.No. " & Trim(lbl_SetNo.Tag)
                Else
                    Rec_ID = Val(Led_ID)
                    Prtcls2 = "Excess : Set.No. " & Trim(lbl_SetNo.Tag)
                End If

                vYrnPartcls = Prtcls2
                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1220" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1263" Then '---- Meenashi Sizing (Somanur)
                    vYrnPartcls = vYrnPartcls & ",  Mill :  " & Trim(cbo_MillName.Text)
                End If

                If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1288" Then
                    cmd.CommandText = "Insert into Stock_Yarn_Processing_Details      (  SoftwareType_IdNo ,                          Reference_Code,                       Company_IdNo         ,             Reference_No      ,            for_OrderBy          , Reference_Date,          DeliveryTo_Idno ,      ReceivedFrom_Idno  ,        Party_Bill_No , Sl_No,         Count_IdNo      , Yarn_Type,          Mill_IdNo      , Bags, Cones,                      Weight                     ,         Particulars    ,  Posting_For  ,          Set_Code      ,             Set_No             ) " &
                                           " Values (" & Str(Val(Common_Procedures.SoftwareTypes.Sizing_Software)) & " , '" & Trim(Pk_Condition) & Trim(NewCode) & "', " & Str(Val(lbl_Company.Tag)) & ", '" & Trim(lbl_SetNo.Tag) & "', " & Str(Val(vOrdByNo)) & ",    @SetDate   , " & Str(Val(Delv_ID)) & ", " & Str(Val(Rec_ID)) & ", '" & Trim(PBlNo) & "',   2  , " & Str(Val(Cnt_ID)) & ",   'MILL' , " & Str(Val(Mil_ID)) & ",   0 ,    0 , " & Str(Math.Abs(Val(lbl_ExcessShort.Text))) & ", '" & Trim(vYrnPartcls) & "', 'CONSUMEDYARN', '" & Trim(NewCode) & "', '" & Trim(lbl_SetNo.Tag) & "' ) "
                    cmd.ExecuteNonQuery()
                End If


            End If

            If Val(lbl_BabyCone_NetWeight.Text) > 0 Then

                If chk_RewindingStatus.Checked = True Then
                    Yrn_Typ = "R/W"
                    Mid = RwMil_ID
                    Bgs = 0
                    Cns = Val(txt_RewindingCones.Text)
                    StNo = ""
                    Prtcls2 = "R/W.Cn : Set.No. " & Trim(lbl_SetNo.Tag)
                    vYrnPartcls = Prtcls2
                    If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1220" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1263" Then '---- Meenashi Sizing (Somanur)
                        vYrnPartcls = vYrnPartcls & ",  Mill :  " & Trim(cbo_Rw_MillName.Text)
                    End If

                Else
                    Yrn_Typ = "BABY"
                    Mid = Mil_ID
                    Bgs = Val(vTotBabyBags)
                    Cns = Val(vTotBabyCones)
                    StNo = Trim(lbl_SetNo.Tag)
                    Prtcls2 = "Baby.Cn : Set.No. " & Trim(lbl_SetNo.Tag)
                    vYrnPartcls = Prtcls2
                    If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1220" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1263" Then '---- Meenashi Sizing (Somanur)
                        vYrnPartcls = vYrnPartcls & ",  Mill :  " & Trim(cbo_MillName.Text)
                    End If

                End If

                Wt = Val(lbl_BabyCone_NetWeight.Text) + Val(txt_RwExcSht.Text)

                If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1288" Then


                    cmd.CommandText = "Insert into Stock_Yarn_Processing_Details (      SoftwareType_IdNo  ,                               Reference_Code,                      Company_IdNo         ,            Reference_No       ,           for_OrderBy    , Reference_Date, DeliveryTo_Idno,     ReceivedFrom_Idno   ,     Party_Bill_No    , Sl_No,           Count_IdNo    ,         Yarn_Type      ,         Mill_IdNo    ,            Bags      ,           Cones      ,          Weight     ,        Particulars     ,  Posting_For,         Set_Code       ,            Set_No              ) " &
                                        "   Values ( " & Str(Val(Common_Procedures.SoftwareTypes.Sizing_Software)) & " , '" & Trim(Pk_Condition) & Trim(NewCode) & "', " & Str(Val(lbl_Company.Tag)) & ", '" & Trim(lbl_SetNo.Tag) & "', " & Str(Val(vOrdByNo)) & ",     @SetDate  ,        0       , " & Str(Val(Led_ID)) & ", '" & Trim(PBlNo) & "',   3  , " & Str(Val(Cnt_ID)) & ", '" & Trim(Yrn_Typ) & "', " & Str(Val(Mid)) & ", " & Str(Val(Bgs)) & ", " & Str(Val(Cns)) & ", " & Str(Val(Wt)) & ", '" & Trim(vYrnPartcls) & "',  'YARNTAKEN', '" & Trim(NewCode) & "', '" & Trim(lbl_SetNo.Tag) & "' ) "
                    cmd.ExecuteNonQuery()

                End If

                If Trim(UCase(Yrn_Typ)) = "BABY" Then

                    Nr = 0
                    cmd.CommandText = "Update Stock_BabyCone_Processing_Details set " &
                                " Set_Code =  '" & Trim(vSETCD_PKCOND) & "', " &
                                " setcode_forSelection =  '" & Trim(vSELC_SETCODE) & "', " &
                                " Ends_Name = '" & Trim(txt_Ends.Text) & "', " &
                                " Baby_Bags = " & Str(Val(Bgs)) & ", " &
                                " Baby_Cones = " & Str(Val(Cns)) & ", " &
                                " Baby_Weight = " & Str(Val(Wt)) & " " &
                                " Where Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "' and " &
                                " Company_IdNo = " & Str(Val(lbl_Company.Tag))

                    Nr = cmd.ExecuteNonQuery()

                    If Nr = 0 Then

                        cmd.CommandText = "Insert into Stock_BabyCone_Processing_Details( Reference_Code, " _
                                  & "Company_IdNo, Reference_No, For_OrderBy, Reference_Date, Ledger_IdNo, " _
                                  & "Set_Code, Set_No, setcode_forSelection, " _
                                  & "Ends_Name, Mill_Idno, Count_IdNo, Bag_No, Baby_Bags, " _
                                  & "Baby_Cones, Baby_Weight, Delivered_Bags, Delivered_Cones, Delivered_Weight) Values ( '" _
                                  & Trim(Pk_Condition) & Trim(NewCode) & "', " & Str(Val(lbl_Company.Tag)) & ", '" & Trim(lbl_SetNo.Tag) & "', " _
                                  & Str(Val(vOrdByNo)) & ", @SetDate, " _
                                  & Str(Led_ID) & ", '" & Trim(vSETCD_PKCOND) & "', '" & Trim(lbl_SetNo.Tag) & "', '" & Trim(vSELC_SETCODE) & "', '" _
                                  & Trim(txt_Ends.Text) & "', " & Str(Mid) & ", " & Str(Cnt_ID) & ", 1, " _
                                  & Str(Val(Bgs)) & ", " & Str(Val(Cns)) & ", " _
                                  & Str(Val(Wt)) & ", 0, 0, 0)"
                        cmd.ExecuteNonQuery()

                    End If

                Else

                    Mid = Mil_ID
                    Bgs = Val(vTotBabyBags)
                    Cns = Val(vTotBabyCones)

                    Nr = 0
                    cmd.CommandText = "Update Stock_RewindingBabyCone_Processing_Details set " &
                                " Set_Code =  '" & Trim(vSETCD_PKCOND) & "', " &
                                " setcode_forSelection =  '" & Trim(vSELC_SETCODE) & "', " &
                                " Ends_Name = '" & Trim(txt_Ends.Text) & "', " &
                                " Baby_Bags = " & Str(Val(Bgs)) & ", " &
                                " Baby_Cones = " & Str(Val(Cns)) & ", " &
                                " Baby_Weight = " & Str(Val(Wt)) & " " &
                                " Where Reference_Code = '" & Trim(Pk_Condition) & Trim(NewCode) & "' and " &
                                " Company_IdNo = " & Str(Val(lbl_Company.Tag))

                    Nr = cmd.ExecuteNonQuery()

                    If Nr = 0 Then

                        cmd.CommandText = "Insert into Stock_RewindingBabyCone_Processing_Details( Reference_Code, " _
                                  & "Company_IdNo, Reference_No, For_OrderBy, Reference_Date, Ledger_IdNo, " _
                                  & "Set_Code, Set_No, setcode_forSelection, " _
                                  & "Ends_Name, Mill_Idno, Count_IdNo, Bag_No, Baby_Bags, " _
                                  & "Baby_Cones, Baby_Weight, RwDelivered_Bags, RwDelivered_Cones, RwDelivered_Weight) Values ( '" _
                                  & Trim(Pk_Condition) & Trim(NewCode) & "', " & Str(Val(lbl_Company.Tag)) & ", '" & Trim(lbl_SetNo.Tag) & "', " _
                                  & Str(vOrdByNo) & ", @SetDate, " _
                                  & Str(Led_ID) & ", '" & Trim(vSETCD_PKCOND) & "', '" & Trim(lbl_SetNo.Tag) & "', '" & Trim(vSELC_SETCODE) & "', '" _
                                  & Trim(txt_Ends.Text) & "', " & Str(Mid) & ", " & Str(Cnt_ID) & ", 1, " _
                                  & Str(Val(Bgs)) & ", " & Str(Val(Cns)) & ", " _
                                  & Str(Val(Wt)) & ", 0, 0, 0)"
                        cmd.ExecuteNonQuery()

                    End If

                End If

                If Common_Procedures.settings.Combine_Textile_Sizing_Software_Status = 1 Then

                    TexComp_ID = Common_Procedures.get_FieldValue(Con, "ledger_head", "Textile_To_CompanyIdNo", "(ledger_idno = " & Str(Val(Led_ID)) & ")", , tr)
                    If Val(TexComp_ID) <> 0 Then

                        TexLed_ID = Common_Procedures.get_FieldValue(Con, "company_head", "Textile_To_SizingIdNo", "(company_idno = " & Str(Val(lbl_Company.Tag)) & ")", , tr)
                        If Val(TexLed_ID) = 0 Then
                            Throw New ApplicationException("Invalid Textile Sizing Name" & Chr(13) & "Select ``Textile_Sizing_Name``  in  Company_Creation  for  " & lbl_Company.Text)
                            Exit Sub
                        End If

                        TexCnt_iD = Common_Procedures.get_FieldValue(Con, "count_head", "Textile_To_CountIdNo", "(count_idno = " & Str(Val(Cnt_ID)) & ")", , tr)
                        If Val(TexCnt_iD) = 0 Then
                            vNewFrmTYpe = "COUNT"
                            Throw New ApplicationException("Invalid Textile Count Name" & Chr(13) & "Select ``Textile_Count_Name``  in  Count_Creation  for  " & dgv_YarnTakenDetails.Rows(i).Cells(1).Value)
                            Exit Sub
                        End If

                        TexMil_iD = Common_Procedures.get_FieldValue(Con, "Mill_head", "Textile_To_MillIdNo", "(Mill_idno = " & Str(Val(Mid)) & ")", , tr)
                        If Val(TexMil_iD) = 0 Then
                            vNewFrmTYpe = "MILL"
                            Throw New ApplicationException("Invalid Textile Mill Name" & Chr(13) & "Select ``Textile_Mill_Name``  in  Mill_Creation  for  " & dgv_YarnTakenDetails.Rows(i).Cells(4).Value)
                            Exit Sub
                        End If

                        Delv_ID = TexLed_ID
                        Rec_ID = 0
                        If Val(Wt) < 0 Then
                            Delv_ID = 0
                            Rec_ID = TexLed_ID
                        End If

                        If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1288" Then
                            cmd.CommandText = "Insert into  " & Trim(vDbName) & "Stock_Yarn_Processing_Details (                    SoftwareType_IdNo  ,                                             Reference_Code                    ,           Company_IdNo     ,           Reference_No      ,             for_OrderBy   , Reference_Date,      DeliveryTo_Idno     ,     ReceivedFrom_Idno   ,                              Entry_ID                        ,        Particulars        ,     Party_Bill_No    , Sl_No ,          Count_IdNo      ,         Yarn_Type      ,           Mill_IdNo        ,                       Bags       ,                   Cones        ,                Weight         , DeliveryToIdno_ForParticulars,  ReceivedFromIdno_ForParticulars ) " &
                                                "          Values                                              ( " & Str(Val(Common_Procedures.SoftwareTypes.Sizing_Software)) & " , '" & Trim(Pk_Condition_Tex) & Trim(NewCode) & "', " & Str(Val(TexComp_ID)) & ", '" & Trim(lbl_SetNo.Text) & "', " & Str(Val(vOrdByNo)) & ",    @SetDate  , " & Str(Val(Delv_ID)) & ", " & Str(Val(Rec_ID)) & ", '" & Trim(Trim(Pk_Condition_Tex) & Trim(lbl_SetNo.Text)) & "', '" & Trim(vYrnPartcls) & "', '" & Trim(PBlNo) & "',  103  , " & Str(Val(TexCnt_iD)) & ", '" & Trim(Yrn_Typ) & "', " & Str(Val(TexMil_iD)) & ", " & Str(Math.Abs(Val(Bgs))) & ", " & Str(Math.Abs(Val(Cns))) & ", " & Str(Math.Abs(Val(Wt))) & ", " & Str(Val(Delv_ID)) & "    ,       " & Str(Val(Rec_ID)) & "   ) "
                            cmd.ExecuteNonQuery()
                        End If

                    End If

                End If

            End If

            'If Val(lbl_Total_Sizing_Beams.Text) <> 0 Then
            '    cmd.CommandText = "Insert into Stock_Empty_BeamBagCone_Processing_Details(Reference_Code, Company_IdNo, Reference_No, for_OrderBy, Reference_Date, DeliveryTo_Idno, ReceivedFrom_Idno, Party_Bill_No, Sl_No, Beam_Width_IdNo, Empty_Beam, Particulars,Vendor_IdNo) Values ('" & Trim(Pk_Condition) & Trim(NewCode) & "', " & Str(Val(lbl_Company.Tag)) & ", '" & Trim(lbl_SetNo.Tag) & "', " & Str(Val(vOrdByNo)) & ", @SetDate, " & Str(Val(led_id)) & ", 0, '" & Trim(PBlNo) & "', 1, " & Str(Val(Bw_id)) & ", " & Str(Val(lbl_Total_Sizing_Beams.Text)) & ", '" & Trim(Partcls) & "'," & Val(Sz1Vndr_ID) & " )"
            '    cmd.ExecuteNonQuery()
            'End If

            Da = New SqlClient.SqlDataAdapter("select Vendor_idNo , Count(Beam_No) as Bms from Stock_SizedPavu_Processing_Details Where Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & (Pk_Condition) & Trim(NewCode) & "' group by Vendor_idNo ", Con)
            Dt1 = New DataTable
            Da.SelectCommand.Transaction = tr
            Da.Fill(Dt1)
            Sno = 0

            If Dt1.Rows.Count > 0 Then
                For i = 0 To Dt1.Rows.Count - 1
                    Sno = Sno + 1
                    cmd.CommandText = "Insert into Stock_Empty_BeamBagCone_Processing_Details(SoftwareType_IdNo  , Reference_Code, Company_IdNo, Reference_No, for_OrderBy, Reference_Date, DeliveryTo_Idno, ReceivedFrom_Idno, Party_Bill_No, Sl_No, Beam_Width_IdNo, Empty_Beam, Particulars,Vendor_IdNo) Values (" & Str(Val(Common_Procedures.SoftwareTypes.Sizing_Software)) & " , '" & Trim(Pk_Condition) & Trim(NewCode) & "', " & Str(Val(lbl_Company.Tag)) & ", '" & Trim(lbl_SetNo.Tag) & "', " & Str(Val(vOrdByNo)) & ", @SetDate, " & Str(Val(Led_ID)) & ", 0, '" & Trim(PBlNo) & "', " & Str(Val(Sno)) & " , " & Str(Val(Bw_id)) & ", " & Str(Val(Dt1.Rows(i).Item("Bms").ToString)) & ", '" & Trim(Partcls) & "'," & Str(Val(Dt1.Rows(i).Item("Vendor_idNo").ToString)) & " )"
                    cmd.ExecuteNonQuery()
                Next i
            End If
            Dt1.Clear()


            If Val(Common_Procedures.User.IdNo) = 1 Then
                If chk_Printed.Visible = True Then
                    If chk_Printed.Enabled = True Then
                        Update_PrintOut_Status(tr)
                    End If
                End If
            End If

            Call Common_Procedures.User_Modification_Updation(Con,
                                                              "HEAD",
                                                              Me.Name,
                                                              "NEW",
                                                              "Specification_Head",
                                                              "set_code",
                                                              Val(lbl_Company.Tag),
                                                              NewCode,
                                                              lbl_SetNo.Text,
                                                              Val(vOrdByNo),
                                                              Pk_Condition, "", "",
                                                              New_Entry,
                                                              False, "", "", "Auto_SetNo, Entry_VAT_GST_Type, set_code, setcode_forSelection, Company_IdNo, for_OrderBy, Entry_Type, warping_slno, sizing_slno, total_warpmeters, Total_Warping_Beams, total_warping_ends, total_warping_gross_weight, total_warping_tare_weight, total_warping_net_weight, total_pavu_gross_weight, total_pavu_tare_weight, total_pavu_net_weight, total_pavu_beam, total_pavu_pcs, total_pavu_meters, total_yarn_bags, total_yarn_cones, total_yarn_weight, total_baby_bags, total_baby_cones, total_baby_gross_weight, total_baby_tare_weight, total_baby_net_weight, total_chemical_consumption, total_chemical_amount, PickupPercentage_Party, SocietySet_Status, Meters_Yards, invoice_code, invoice_increment", tr)

            Call Common_Procedures.User_Modification_Updation(Con, "DETAILS", Me.Name, "NEW", "Specification_Warping_Details", "set_code", Val(lbl_Company.Tag), NewCode, lbl_SetNo.Text, Val(vOrdByNo), Pk_Condition, "", "", New_Entry, False, "Ends_Name, Gross_Weight, Tare_Weight, Net_Weight, Shift, Warp_Beam_No, Start_Time, End_Time, Total_Time, Front_Warper_1_IdNo, Front_Warper_1_Meters, Back_Warper_1_IdNo, Back_Warper_1_meters, Helper_1_IdNo, Helper_1_Meters, Front_Warper_2_IdNo, Front_Warper_2_Meters, Back_Warper_2_IdNo, Back_Warper_2_meters, Helper_2_IdNo, Helper_2_Meters, Remarks", "Sl_No", "set_code, Company_IdNo, set_no, for_OrderBy, set_date, Ledger_IdNo, count_idno, Mill_IdNo, Warp_SlNo", tr, "Warp_SlNo")
            Call Common_Procedures.User_Modification_Updation(Con, "DETAILS", Me.Name, "NEW", "Stock_SizedPavu_Processing_Details", "set_code", Val(lbl_Company.Tag), NewCode, lbl_SetNo.Text, Val(vOrdByNo), Pk_Condition, "", "", New_Entry, False, "Beam_No, Gross_Weight, Tare_Weight, Net_Weight, Noof_Pcs, Meters_Pc, Meters, Shift, Start_Time, End_Time, Total_Time, Front_Sizer_1_IdNo, Front_Sizer_1_Meters, Back_Sizer_1_IdNo, Back_Sizer_1_meters, Boiler_1_IdNo, Boiler_1_Meters, cooker_1_IdNo, Cooker_1_Meters, Front_Sizer_2_IdNo, Front_Sizer_2_Meters, Back_Sizer_2_IdNo, Back_Sizer_2_meters, Boiler_2_IdNo, Boiler_2_Meters, Cooker_2_IdNo, Cooker_2_Meters, Remarks, Party_PickUp_Percentage, Vendor_IdNo", "Sl_No", "Reference_Code, Company_IdNo, Reference_No, for_OrderBy, Reference_Date, Ledger_IdNo, Set_Code, Set_No, setcode_forSelection, Ends_Name, count_idno, Mill_IdNo, Beam_Width_Idno, Sizing_SlNo", tr, "Sizing_SlNo")
            Call Common_Procedures.User_Modification_Updation(Con, "DETAILS", Me.Name, "NEW", "Specification_YarnTaken_Details", "set_code", Val(lbl_Company.Tag), NewCode, lbl_SetNo.Text, Val(vOrdByNo), Pk_Condition, "", "", New_Entry, False, "count_idno, Yarn_Type, BabyCone_setcode_forSelection, Mill_IdNo, Bags, Weight_Cone, Cones, Weight", "Sl_No", "set_code, Company_IdNo, set_no, for_OrderBy, set_date, Ledger_IdNo", tr)
            Call Common_Procedures.User_Modification_Updation(Con, "DETAILS", Me.Name, "NEW", "Specification_BabyCone_Details", "set_code", Val(lbl_Company.Tag), NewCode, lbl_SetNo.Text, Val(vOrdByNo), Pk_Condition, "", "", New_Entry, False, "Bags, Cones, Gross_Weight", "Sl_No", "set_code, Company_IdNo, set_no, for_OrderBy, set_date, Ledger_IdNo, Mill_IdNo, Count_IdNo", tr)
            Call Common_Procedures.User_Modification_Updation(Con, "DETAILS", Me.Name, "NEW", "Stock_Chemical_Processing_Details", "Reference_Code", Val(lbl_Company.Tag), Trim(Pk_Condition) & NewCode, lbl_SetNo.Text, Val(vOrdByNo), Pk_Condition, "", "", New_Entry, False, "Item_IdNo, Mixing_1, Mixing_2, Mixing_3, Mixing_4, Mixing_5, Quantity, Rate, Amount", "Sl_No", "Reference_Code, Company_IdNo, Reference_No, For_OrderBy, Reference_Date, Ledger_IdNo, Party_Bill_No", tr)


            tr.Commit()


            If SaveAll_STS <> True Then
                MessageBox.Show("Saved Sucessfully!!!", "FOR SAVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Information)
            End If


            If Val(Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status) = 1 Then
                If New_Entry = True Then
                    new_record()
                Else
                    move_record(lbl_SetNo.Tag)
                End If
            Else
                move_record(lbl_SetNo.Tag)
            End If

        Catch ex As Exception
            tr.Rollback()

            Timer1.Enabled = False
            SaveAll_STS = False

            MessageBox.Show(ex.Message, "FOR SAVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        Finally

            cmd.Dispose()
            tr.Dispose()

            If cbo_Ledger.Enabled And cbo_Ledger.Visible Then cbo_Ledger.Focus()

            If Trim(UCase(vNewFrmTYpe)) = "COUNT" Then
                Dim f1 As New Count_Creation '(Cnt_ID)

                Common_Procedures.Master_Return.Form_Name = ""
                Common_Procedures.Master_Return.Control_Name = ""
                Common_Procedures.Master_Return.Return_Value = ""
                Common_Procedures.Master_Return.Master_Type = ""

                f1.MdiParent = MDIParent1
                f1.Show()

            ElseIf Trim(UCase(vNewFrmTYpe)) = "MILL" Then
                Dim f2 As New Mill_Creation '(Mil_ID)

                Common_Procedures.Master_Return.Form_Name = ""
                Common_Procedures.Master_Return.Control_Name = ""
                Common_Procedures.Master_Return.Return_Value = ""
                Common_Procedures.Master_Return.Master_Type = ""

                f2.MdiParent = MDIParent1
                f2.Show()

            End If

        End Try

    End Sub

    Private Sub Statement_Activated(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Activated
        Dim dt1 As New DataTable

        Try

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_SizingMachineNo.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "SIZING MACHINE NO" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_SizingMachineNo.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Warping_Machineno.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "Warping MACHINE NO" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Warping_Machineno.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If
            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Ledger.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "LEDGER" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Ledger.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_CountName.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "COUNT" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_CountName.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Grid_CountName.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "COUNT" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Grid_CountName.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_MillName.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "MILL" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_MillName.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Grid_MillName.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "MILL" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Grid_MillName.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Rw_MillName.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "MILL" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Rw_MillName.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_BeamWidth.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "BEAMWIDTH" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_BeamWidth.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Grid_ItemName.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "ITEM" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Grid_ItemName.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Grid_WareHouse.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "GODOWN" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Grid_WareHouse.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Ends2_FrontWarper1.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Ends2_FrontWarper1.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Ends2_FrontWarper2.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Ends2_FrontWarper2.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Ends2_BackWarper1.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Ends2_BackWarper1.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Ends2_BackWarper2.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Ends2_BackWarper2.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Ends2_Helper1.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Ends2_Helper1.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If
            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Ends2_Helper2.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Ends2_Helper2.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Grid_FrontWarper_1.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Grid_FrontWarper_1.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Grid_FrontWarper2.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Grid_FrontWarper2.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Grid_BackWarper1.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Grid_BackWarper1.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Grid_BackWarper2.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Grid_BackWarper2.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Grid_Helper1.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Grid_Helper1.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If
            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Grid_Helper2.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Grid_Helper2.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If


            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Ends3_FrontWarper1.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Ends3_FrontWarper1.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Ends3_FrontWarper2.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Ends3_FrontWarper2.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Ends3_BackWarper1.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Ends3_BackWarper1.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Ends3_BackWarper2.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Ends3_BackWarper2.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Ends3_Helper1.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Ends3_Helper1.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If
            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Ends3_Helper2.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Ends3_Helper2.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing1_BackSizer1.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing1_BackSizer1.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If
            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing1_BackSizer2.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing1_BackSizer2.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If


            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing1_Boiler1.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing1_Boiler1.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing1_Boiler2.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing1_Boiler2.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing1_Cooker.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing1_Cooker.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing1_Cooker2.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing1_Cooker2.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing1_FrontSizer1.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing1_FrontSizer1.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If
            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing1_FrontSizer2.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing1_FrontSizer2.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If



            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing2_BackSizer1.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing2_BackSizer1.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If
            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing2_BackSizer2.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing2_BackSizer2.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If


            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing2_Boiler1.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing2_Boiler1.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing2_Boiler2.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing2_Boiler2.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing2_Cooker.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing2_Cooker.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing2_Cooker2.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing2_Cooker2.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing2_FrontSizer1.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing2_FrontSizer1.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If
            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing2_FrontSizer2.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing2_FrontSizer2.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If


            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing3_BackSizer1.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing3_BackSizer1.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If
            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing3_BackSizer2.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing3_BackSizer2.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing3_Boiler1.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing3_Boiler1.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing3_Boiler2.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing3_Boiler2.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing3_Cooker.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing3_Cooker.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing3_Cooker2.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing3_Cooker2.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing3_FrontSizer1.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing3_FrontSizer1.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If
            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing3_FrontSizer2.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "EMPLOYEE" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing3_FrontSizer2.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing1_Vendor.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "VENDOR" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing1_Vendor.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing2_Vendor.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "VENDOR" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing2_Vendor.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Sizing3_Vendor.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "VENDOR" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Sizing3_Vendor.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If

            If Trim(UCase(Common_Procedures.Master_Return.Form_Name)) = Trim(UCase(Me.Name)) And Trim(UCase(Common_Procedures.Master_Return.Control_Name)) = Trim(UCase(cbo_Grid_BeamNo.Name)) And Trim(UCase(Common_Procedures.Master_Return.Master_Type)) = "BEAMNO" And Trim(Common_Procedures.Master_Return.Return_Value) <> "" Then
                cbo_Grid_BeamNo.Text = Trim(Common_Procedures.Master_Return.Return_Value)
            End If
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            If FrmLdSTS = True Then

                lbl_Company.Text = ""
                lbl_Company.Tag = 0
                Common_Procedures.CompIdNo = 0

                Me.Text = ""

                lbl_Company.Text = Common_Procedures.get_Company_From_CompanySelection(Con)
                lbl_Company.Tag = Val(Common_Procedures.CompIdNo)

                Me.Text = lbl_Company.Text

                new_record()

            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "DOES NOT SHOW...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

        FrmLdSTS = False


    End Sub

    Private Sub Statement_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        Dim da As New SqlClient.SqlDataAdapter
        Dim dt1 As New DataTable
        Dim dt2 As New DataTable
        Dim dt3 As New DataTable
        Dim dt4 As New DataTable
        Dim dt5 As New DataTable
        Dim dt6 As New DataTable
        Dim dt7 As New DataTable
        Dim dt8 As New DataTable
        Dim dt9 As New DataTable
        Dim dt10 As New DataTable
        Dim dt11 As New DataTable
        Dim dt12 As New DataTable
        Dim dt13 As New DataTable
        Dim dt14 As New DataTable
        Dim dt15 As New DataTable
        Dim dt16 As New DataTable
        Dim dt17 As New DataTable
        Dim dt18 As New DataTable
        Dim dt19 As New DataTable
        Dim dt20 As New DataTable
        Dim dt21 As New DataTable
        Dim dt22 As New DataTable
        Dim dt23 As New DataTable
        Dim dt24 As New DataTable
        Dim dt25 As New DataTable
        Dim dt26 As New DataTable
        Dim dt27 As New DataTable
        Dim dt28 As New DataTable
        Dim dt29 As New DataTable
        Dim dt30 As New DataTable
        Dim dt31 As New DataTable
        Dim dt32 As New DataTable
        Dim dt33 As New DataTable
        Dim dt34 As New DataTable
        Dim dt35 As New DataTable
        Dim dt36 As New DataTable
        Dim dt37 As New DataTable
        Dim dt38 As New DataTable
        Dim dt39 As New DataTable
        Dim dt40 As New DataTable
        Dim dt41 As New DataTable
        Dim dt42 As New DataTable
        Dim dt43 As New DataTable
        Dim dt44 As New DataTable
        Dim dt45 As New DataTable
        Dim dt46 As New DataTable
        Dim dt47 As New DataTable
        Dim dt48 As New DataTable
        Dim dt49 As New DataTable
        Dim dt50 As New DataTable
        Dim dt51 As New DataTable
        Dim dt52 As New DataTable
        Dim dt53 As New DataTable
        Dim i As Integer = 0

        Me.Text = ""

        Con.Open()

        If Common_Procedures.settings.Combine_Textile_Sizing_Software_Status = 1 Then
            TrnTo_DbName = Common_Procedures.get_Company_TextileDataBaseName(Trim(Val(Common_Procedures.CompGroupIdNo)))

        Else
            TrnTo_DbName = Common_Procedures.get_Company_DataBaseName(Trim(Val(Common_Procedures.CompGroupIdNo)))

        End If

        Pk_Condition = ""
        PkCondition_Entry = ""

        Label1.Tag = Val(vEntry_Statemant_No)


        If Val(Label1.Tag) = 1 Then
            Label1.Text = " Statement - GST"
            Label1.Font = New Font("calibri", 14)

            PkCondition_Entry = Trim(UCase(PkCondition_GST))
            Pk_Condition = Trim(UCase(PkCondition_GST))

            vEnt_VAT_GST_Type = "GST"

        ElseIf Val(Label1.Tag) = 2 Then
            Label1.Text = " Statement - TIN"
            Label1.Font = New Font("calibri", 14)


            PkCondition_Entry = ""
            Pk_Condition = Trim(UCase(PkCondition_TIN))

            vEnt_VAT_GST_Type = ""

        ElseIf Val(Label1.Tag) = 101 Then
            Label1.Text = " Statement - MACHINE-1"
            Label1.Font = New Font("calibri", 14)

            PkCondition_Entry = Trim(UCase(PkCondition_GST))
            Pk_Condition = Trim(UCase(PkCondition_GST))

            vEnt_VAT_GST_Type = "MACHINE-1"

        ElseIf Val(Label1.Tag) = 102 Then
            Label1.Text = " Statement - MACHINE-2"
            Label1.Font = New Font("calibri", 14)

            PkCondition_Entry = Trim(UCase(PkCondition_TIN))
            Pk_Condition = Trim(UCase(PkCondition_TIN))

            vEnt_VAT_GST_Type = "MACHINE-2"

        ElseIf Val(Label1.Tag) = 103 Then
            Label1.Text = " Statement - MACHINE-3"
            Label1.Font = New Font("calibri", 14)

            PkCondition_Entry = Trim(UCase(PkCondition_MACHINE3))
            Pk_Condition = Trim(UCase(PkCondition_MACHINE3))

            vEnt_VAT_GST_Type = "MACHINE-3"

        ElseIf Val(Label1.Tag) = 104 Then
            Label1.Text = " Statement - MACHINE-4"
            Label1.Font = New Font("calibri", 14)

            PkCondition_Entry = Trim(UCase(PkCondition_MACHINE4))
            Pk_Condition = Trim(UCase(PkCondition_MACHINE4))

            vEnt_VAT_GST_Type = "MACHINE-4"

        Else

            Label1.Text = "Statement"

            PkCondition_Entry = ""
            Pk_Condition = Trim(UCase(PkCondition_TIN))

            vEnt_VAT_GST_Type = ""

        End If

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1282" Then ' BRT sizing 
            If Val(Common_Procedures.settings.Multi_Godown_Status) = 1 Then
                For i = 0 To dgv_YarnTakenDetails.Rows.Count - 1
                    dgv_YarnTakenDetails.Columns(9).ReadOnly = False
                Next
            End If
        End If

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1133" Then ' MM sizing 
            Label1.Text = " Statement - GST"
            Label1.Font = New Font("calibri", 16)

            PkCondition_Entry = Trim(UCase(PkCondition_GST))
            Pk_Condition = Trim(UCase(PkCondition_GST))

            vEnt_VAT_GST_Type = "GST"
        End If

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1263" Then ' APA Textiles 
            Label78.Visible = True
            txt_ExcessShort_Adjustment.Visible = True
        End If

        da = New SqlClient.SqlDataAdapter("select a.Ledger_DisplayName from Ledger_AlaisHead a, ledger_head b where (a.Ledger_IdNo = 0 or b.AccountsGroup_IdNo = 10) and a.Ledger_IdNo = b.Ledger_IdNo order by a.Ledger_DisplayName", Con)
        da.Fill(dt1)
        cbo_Ledger.DataSource = dt1
        cbo_Ledger.DisplayMember = "Ledger_DisplayName"

        da = New SqlClient.SqlDataAdapter("select count_name from Count_Head order by count_name", Con)
        da.Fill(dt2)
        cbo_CountName.DataSource = dt2
        cbo_CountName.DisplayMember = "count_name"

        da = New SqlClient.SqlDataAdapter("select mill_name from Mill_Head order by mill_name", Con)
        da.Fill(dt3)
        cbo_MillName.DataSource = dt3
        cbo_MillName.DisplayMember = "mill_name"

        da = New SqlClient.SqlDataAdapter("select Beam_Width_Name from Beam_Width_Head order by Beam_Width_Name", Con)
        da.Fill(dt4)
        cbo_BeamWidth.DataSource = dt4
        cbo_BeamWidth.DisplayMember = "Beam_Width_Name"

        da = New SqlClient.SqlDataAdapter("select mill_name from Mill_Head order by mill_name", Con)
        da.Fill(dt5)
        cbo_Grid_MillName.DataSource = dt5
        cbo_Grid_MillName.DisplayMember = "mill_name"

        da = New SqlClient.SqlDataAdapter("select item_name from Sizing_Item_Head order by item_name", Con)
        da.Fill(dt6)
        cbo_Grid_ItemName.DataSource = dt6
        cbo_Grid_ItemName.DisplayMember = "item_name"

        da = New SqlClient.SqlDataAdapter("select count_name from Count_Head order by count_name", Con)
        da.Fill(dt7)
        cbo_Grid_CountName.DataSource = dt7
        cbo_Grid_CountName.DisplayMember = "count_name"

        da = New SqlClient.SqlDataAdapter("select mill_name from Mill_Head order by mill_name", Con)
        da.Fill(dt8)
        cbo_Rw_MillName.DataSource = dt8
        cbo_Rw_MillName.DisplayMember = "mill_name"

        da = New SqlClient.SqlDataAdapter("select yarn_type from YarnType_Head where yarn_type <> 'BABY' order by yarn_type", Con)
        da.Fill(dt9)
        cbo_Grid_YarnType.DataSource = dt9
        cbo_Grid_YarnType.DisplayMember = "yarn_type"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt10)
        cbo_Grid_FrontWarper_1.DataSource = dt10
        cbo_Grid_FrontWarper_1.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt11)
        cbo_Grid_FrontWarper2.DataSource = dt11
        cbo_Grid_FrontWarper2.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt12)
        cbo_Grid_BackWarper1.DataSource = dt12
        cbo_Grid_BackWarper1.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt13)
        cbo_Grid_BackWarper2.DataSource = dt13
        cbo_Grid_BackWarper2.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt14)
        cbo_Grid_Helper1.DataSource = dt14
        cbo_Grid_Helper1.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt15)
        cbo_Grid_Helper2.DataSource = dt15
        cbo_Grid_Helper2.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt16)
        cbo_Ends2_FrontWarper1.DataSource = dt16
        cbo_Ends2_FrontWarper1.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt17)
        cbo_Ends2_FrontWarper2.DataSource = dt17
        cbo_Ends2_FrontWarper2.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt18)
        cbo_Ends2_BackWarper1.DataSource = dt18
        cbo_Ends2_BackWarper1.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt19)
        cbo_Ends2_BackWarper2.DataSource = dt19
        cbo_Ends2_BackWarper2.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt21)
        cbo_Ends2_Helper1.DataSource = dt21
        cbo_Ends2_Helper1.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt22)
        cbo_Ends2_Helper2.DataSource = dt22
        cbo_Ends2_Helper2.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt23)
        cbo_Ends3_FrontWarper1.DataSource = dt23
        cbo_Ends3_FrontWarper1.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt24)
        cbo_Ends3_FrontWarper2.DataSource = dt24
        cbo_Ends3_FrontWarper2.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt25)
        cbo_Ends3_BackWarper1.DataSource = dt25
        cbo_Ends3_BackWarper1.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt26)
        cbo_Ends3_BackWarper2.DataSource = dt26
        cbo_Ends3_BackWarper2.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt27)
        cbo_Ends3_Helper1.DataSource = dt27
        cbo_Ends3_Helper1.DisplayMember = "Employee_name"


        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt28)
        cbo_Ends3_Helper2.DataSource = dt28
        cbo_Ends3_Helper2.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt29)
        cbo_Sizing1_BackSizer1.DataSource = dt29
        cbo_Sizing1_BackSizer1.DisplayMember = "Employee_name"


        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt30)
        cbo_Sizing1_BackSizer2.DataSource = dt30
        cbo_Sizing1_BackSizer2.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt31)
        cbo_Sizing1_Boiler1.DataSource = dt31
        cbo_Sizing1_Boiler1.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt32)
        cbo_Sizing1_Boiler2.DataSource = dt32
        cbo_Sizing1_Boiler2.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt33)
        cbo_Sizing1_Cooker.DataSource = dt33
        cbo_Sizing1_Cooker.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt34)
        cbo_Sizing1_Cooker2.DataSource = dt34
        cbo_Sizing1_Cooker2.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt35)
        cbo_Sizing1_FrontSizer1.DataSource = dt35
        cbo_Sizing1_FrontSizer1.DisplayMember = "Employee_name"


        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt36)
        cbo_Sizing1_FrontSizer2.DataSource = dt36
        cbo_Sizing1_FrontSizer2.DisplayMember = "Employee_name"



        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt37)
        cbo_Sizing2_BackSizer1.DataSource = dt37
        cbo_Sizing2_BackSizer1.DisplayMember = "Employee_name"


        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt38)
        cbo_Sizing2_BackSizer2.DataSource = dt38
        cbo_Sizing2_BackSizer2.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt39)
        cbo_Sizing2_Boiler1.DataSource = dt39
        cbo_Sizing2_Boiler1.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt40)
        cbo_Sizing2_Boiler2.DataSource = dt40
        cbo_Sizing2_Boiler2.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt41)
        cbo_Sizing2_Cooker.DataSource = dt41
        cbo_Sizing2_Cooker.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt42)
        cbo_Sizing2_Cooker2.DataSource = dt42
        cbo_Sizing2_Cooker2.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt43)
        cbo_Sizing2_FrontSizer1.DataSource = dt43
        cbo_Sizing2_FrontSizer1.DisplayMember = "Employee_name"


        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt44)
        cbo_Sizing2_FrontSizer2.DataSource = dt44
        cbo_Sizing2_FrontSizer2.DisplayMember = "Employee_name"


        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt45)
        cbo_Sizing3_BackSizer1.DataSource = dt45
        cbo_Sizing3_BackSizer1.DisplayMember = "Employee_name"


        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt46)
        cbo_Sizing3_BackSizer2.DataSource = dt46
        cbo_Sizing3_BackSizer2.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt47)
        cbo_Sizing3_Boiler1.DataSource = dt47
        cbo_Sizing3_Boiler1.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt48)
        cbo_Sizing3_Boiler2.DataSource = dt48
        cbo_Sizing3_Boiler2.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt49)
        cbo_Sizing3_Cooker.DataSource = dt49
        cbo_Sizing3_Cooker.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt50)
        cbo_Sizing3_Cooker2.DataSource = dt50
        cbo_Sizing3_Cooker2.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt51)
        cbo_Sizing3_FrontSizer1.DataSource = dt51
        cbo_Sizing3_FrontSizer1.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select Employee_name from PayRoll_Employee_Head order by Employee_name", Con)
        da.Fill(dt52)
        cbo_Sizing3_FrontSizer2.DataSource = dt52
        cbo_Sizing3_FrontSizer2.DisplayMember = "Employee_name"

        da = New SqlClient.SqlDataAdapter("select distinct(setcode_forSelection) from Stock_BabyCone_Processing_Details order by setcode_forSelection", Con)
        da.Fill(dt53)
        cbo_Grid_SetNo.DataSource = dt53
        cbo_Grid_SetNo.DisplayMember = "setcode_forSelection"

        cbo_Meters_Yards.Items.Clear()
        cbo_Meters_Yards.Items.Add("METERS")
        cbo_Meters_Yards.Items.Add("YARDS")

        cbo_Type.Items.Clear()
        cbo_Type.Items.Add("")
        cbo_Type.Items.Add("DIRECT")
        cbo_Type.Items.Add("WARPING")

        'cbo_LoomType.Items.Clear()
        'cbo_LoomType.Items.Add("")
        'cbo_LoomType.Items.Add("AUTOLOOM")
        'cbo_LoomType.Items.Add("POWERLOOM")


        cbo_Type.Visible = False
        Label50.Visible = False
        Label53.Visible = False
        Label54.Visible = False
        lbl_WarpNo.Visible = False
        lbl_WarpDate.Visible = False

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1102" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1163" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1288" Then
            cbo_Type.Visible = True
            Label50.Visible = True
            Label53.Visible = True
            Label54.Visible = True
            lbl_WarpNo.Visible = True
            lbl_WarpDate.Visible = True

            Label5.Left = 601

            cbo_Ledger.Left = 676
            cbo_Ledger.Width = 181

            'txt_Ends.Left = 504
            'txt_Ends.Width = 138
        End If


        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then
            btn_Print_Preprint.Text = "FORMAT-4"
            btn_Print_Ordinary.Text = "FORMAT-3"
            btn_A4.Text = "A4"
            btn_A4.Visible = True

        ElseIf Trim(Common_Procedures.settings.CustomerCode) = "1282" Then
            btn_Print_Preprint.Text = "Page - 1"
            btn_Print_Ordinary.Text = "Page - 2"
            btn_A4.Text = "All Pages"
            btn_A4.Visible = True
            btn_Rate_Details.Visible = True
        End If


        lbl_PickUpPerc_Party_Caption.Visible = False
        txt_PickUpPerc_Party.Visible = False

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1034" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1042" Or (Trim(UCase(Common_Procedures.settings.StatementPrint_Format)) = "FORMAT-2" And Val(Common_Procedures.settings.StatementPrint_PickUp_Percentage) = 1) Or Trim(UCase(Common_Procedures.settings.StatementPrint_Format)) = "FORMAT-4" Or Trim(UCase(Common_Procedures.settings.StatementPrint_Format)) = "FORMAT-5" Or Trim(UCase(Common_Procedures.settings.StatementPrint_Format)) = "FORMAT-5_1097" Or Trim(UCase(Common_Procedures.settings.StatementPrint_Format)) = "FORMAT-11" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1310" Then
            lbl_PickUpPerc_Party_Caption.Visible = True
            txt_PickUpPerc_Party.Visible = True

            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1042" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1310" Then '---- RajaMurugan Sizing (Karumanthapatti)
                lbl_PickUpPerc_Party_Caption.Text = "PickUp % (Actual)"
                lbl_PickUp_Perc_Caption.Text = "PickUp % (Party)"

            Else
                lbl_PickUpPerc_Party_Caption.Text = "PickUp % (Party)"
                lbl_PickUp_Perc_Caption.Text = "PickUp % (Actual)"

            End If

        End If

        btn_SaveAll.Visible = False
        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1087" Then
            btn_SaveAll.Visible = True
        End If

        pnl_Filter.Visible = False
        pnl_Filter.Left = (Me.Width - pnl_Filter.Width) \ 2
        pnl_Filter.Top = (Me.Height - pnl_Filter.Height) \ 2

        pnl_Rate_Details.Visible = False
        pnl_Rate_Details.BringToFront()
        pnl_Rate_Details.Left = (Me.Width - pnl_Rate_Details.Width) \ 2
        pnl_Rate_Details.Top = (Me.Width - pnl_Rate_Details.Width) \ 2


        pnl_Print.Visible = False
        pnl_Print.BringToFront()
        pnl_Print.Left = (Me.Width - pnl_Print.Width) \ 2
        pnl_Print.Top = (Me.Height - pnl_Print.Height) \ 2

        pnl_StatementPrint.Visible = False
        pnl_StatementPrint.BringToFront()
        pnl_StatementPrint.Left = (Me.Width - pnl_StatementPrint.Width) \ 2
        pnl_StatementPrint.Top = (Me.Height - pnl_StatementPrint.Height) \ 2

        pnl_Selection.Visible = False
        pnl_Selection.BringToFront()
        pnl_Selection.Left = (Me.Width - pnl_Selection.Width) \ 2
        pnl_Selection.Top = (Me.Height - pnl_Selection.Height) \ 2

        chk_SocietySet.Visible = False
        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then  '---- WinTraack Textiles Private Limited(Sizing Unit)
            chk_SocietySet.Visible = True
        End If


        lbl_SortNo.Visible = False
        txt_SortNo.Visible = False

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1288" Then  '---- KKP Namakkal
            lbl_SortNo.Visible = True
            txt_SortNo.Visible = True
        End If


        lbl_RwExcSht_Caption.Visible = False
        txt_RwExcSht.Visible = False
        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1012" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1288" Then '---- Avinashi Sizing (Avinashi)
            lbl_RwExcSht_Caption.Visible = True
            txt_RwExcSht.Visible = True
        End If




        '----------------------------------------Warping_Details

        For i = 5 To 22
            dgv_WarpingDetails_Set1.Columns(i).Visible = False
            dgv_WarpingDetails_Set2.Columns(i).Visible = False
            dgv_WarpingDetails_Set3.Columns(i).Visible = False

            dgv_WarpingDetails_Total_Set1.Columns(i).Visible = False
            dgv_WarpingDetails_Total_Set2.Columns(i).Visible = False
            dgv_WarpingDetails_Total_Set3.Columns(i).Visible = False
        Next
        If Val(Common_Procedures.settings.Statement_Production_Wages_For_Sizing) = 1 Then
            For i = 5 To 22
                dgv_WarpingDetails_Set1.Columns(i).Visible = True
                dgv_WarpingDetails_Set2.Columns(i).Visible = True
                dgv_WarpingDetails_Set3.Columns(i).Visible = True

                dgv_WarpingDetails_Total_Set1.Columns(i).Visible = True
                dgv_WarpingDetails_Total_Set2.Columns(i).Visible = True
                dgv_WarpingDetails_Total_Set3.Columns(i).Visible = True
            Next
        End If

        dgv_WarpingDetails_Set1.Columns(23).Visible = False
        dgv_WarpingDetails_Set1.Columns(24).Visible = False
        dgv_WarpingDetails_Set1.Columns(25).Visible = False
        dgv_WarpingDetails_Set1.Columns(26).Visible = False
        dgv_WarpingDetails_Set1.Columns(27).Visible = False

        dgv_WarpingDetails_Total_Set1.Columns(23).Visible = False
        dgv_WarpingDetails_Total_Set1.Columns(24).Visible = False
        dgv_WarpingDetails_Total_Set1.Columns(25).Visible = False
        dgv_WarpingDetails_Total_Set1.Columns(26).Visible = False
        dgv_WarpingDetails_Total_Set1.Columns(27).Visible = False


        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1123" Then 'Shanthi Sizing
            dgv_WarpingDetails_Set1.Columns(1).HeaderText = "ENDS 1"

            dgv_WarpingDetails_Set1.Columns(23).Visible = True
            dgv_WarpingDetails_Set1.Columns(24).Visible = True
            dgv_WarpingDetails_Set1.Columns(25).Visible = True
            dgv_WarpingDetails_Set1.Columns(26).Visible = True
            dgv_WarpingDetails_Set1.Columns(27).Visible = True


            dgv_WarpingDetails_Total_Set1.Columns(23).Visible = True
            dgv_WarpingDetails_Total_Set1.Columns(24).Visible = True
            dgv_WarpingDetails_Total_Set1.Columns(25).Visible = True
            dgv_WarpingDetails_Total_Set1.Columns(26).Visible = True
            dgv_WarpingDetails_Total_Set1.Columns(27).Visible = True

        End If

        '----------------------------------------Sizing_Details
        For i = 9 To 29
            dgv_SizingDetails_Set1.Columns(i).Visible = False
            dgv_SizingDetails_Set2.Columns(i).Visible = False
            dgv_SizingDetails_Set3.Columns(i).Visible = False
        Next
        If Val(Common_Procedures.settings.Statement_Production_Wages_For_Warping) = 1 Then
            For i = 9 To 29
                dgv_SizingDetails_Set1.Columns(i).Visible = True
                dgv_SizingDetails_Set2.Columns(i).Visible = True
                dgv_SizingDetails_Set3.Columns(i).Visible = True
            Next
        End If

        If Val(Common_Procedures.settings.Statement_Actual_Pickup) = 1 Then
            For i = 32 To 34
                dgv_SizingDetails_Set1.Columns(i).Visible = True
                dgv_SizingDetails_Set2.Columns(i).Visible = True
                dgv_SizingDetails_Set3.Columns(i).Visible = True
            Next
        End If

        cbo_SizingMachineNo.Visible = False
        lbl_Warping_Machineno_Caption.Visible = False
        cbo_Warping_Machineno.Visible = False
        If Common_Procedures.settings.Multi_Sizing_Warping_Machine_Status = 1 Then
            cbo_SizingMachineNo.Visible = True
            If Trim(Common_Procedures.settings.CustomerCode) <> "1155" Then
                lbl_Warping_Machineno_Caption.Visible = True
                cbo_Warping_Machineno.Visible = True
            End If
        End If

        chk_Printed.Enabled = False
        If Val(Common_Procedures.User.IdNo) = 1 Then
            chk_Printed.Enabled = True
        End If

        btn_UserModification.Visible = False
        If Val(Common_Procedures.User.IdNo) = 1 Or Common_Procedures.User.Show_UserModification_Status = 1 Then
            btn_UserModification.Visible = True
        End If

        If Common_Procedures.settings.CustomerCode = "1378" Then
            dgv_WarpingDetails_Set1.Columns(6).Visible = True
            dgv_WarpingDetails_Set1.Columns(2).ReadOnly = True
            dgv_WarpingDetails_Set1.Columns(3).ReadOnly = True
        End If

        AddHandler cbo_Warping_Machineno.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_SizingMachineNo.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Type.GotFocus, AddressOf ControlGotFocus
        AddHandler dtp_Date.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Ledger.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_MillName.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Rw_MillName.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_BeamWidth.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_CountName.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Grid_CountName.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Grid_ItemName.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Grid_MillName.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Grid_YarnType.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Grid_BackWarper1.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Grid_BackWarper2.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Grid_FrontWarper_1.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Grid_FrontWarper2.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Grid_Helper1.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Grid_Helper2.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Grid_SetNo.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Grid_WareHouse.GotFocus, AddressOf ControlGotFocus

        AddHandler cbo_Ends2_BackWarper1.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Ends2_BackWarper2.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Ends2_FrontWarper1.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Ends2_FrontWarper2.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Ends2_Helper1.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Ends2_Helper2.GotFocus, AddressOf ControlGotFocus

        AddHandler cbo_Ends3_BackWarper1.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Ends3_BackWarper2.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Ends3_FrontWarper1.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Ends3_FrontWarper2.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Ends3_Helper1.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Ends3_Helper2.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Ends1_Shift.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Ends2_Shift.GotFocus, AddressOf ControlGotFocus
        AddHandler Cbo_Ends3_Shift.GotFocus, AddressOf ControlGotFocus

        AddHandler cbo_Sizing1_BackSizer1.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing1_BackSizer2.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing1_Boiler1.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing1_Boiler2.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing1_Cooker.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing1_Cooker2.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing1_FrontSizer1.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing1_FrontSizer2.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing1_Shift.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing1_Vendor.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing2_Vendor.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing3_Vendor.GotFocus, AddressOf ControlGotFocus


        AddHandler cbo_Sizing2_BackSizer1.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing2_BackSizer2.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing2_Boiler1.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing2_Boiler2.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing2_Cooker.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing2_Cooker2.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing2_FrontSizer1.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing2_FrontSizer2.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing2_Shift.GotFocus, AddressOf ControlGotFocus

        AddHandler cbo_Sizing3_BackSizer1.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing3_BackSizer2.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing3_Boiler1.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing3_Boiler2.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing3_Cooker.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing3_Cooker2.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing3_FrontSizer1.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing3_FrontSizer2.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Sizing3_Shift.GotFocus, AddressOf ControlGotFocus

        AddHandler cbo_Meters_Yards.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_LoomType.GotFocus, AddressOf ControlGotFocus

        AddHandler txt_BabyCone_DeliveryWeight.GotFocus, AddressOf ControlGotFocus
        AddHandler txt_BabyCone_TareWeight.GotFocus, AddressOf ControlGotFocus
        AddHandler txt_WgtEmYBag.GotFocus, AddressOf ControlGotFocus
        AddHandler txt_WgtEmYCone.GotFocus, AddressOf ControlGotFocus

        AddHandler txt_SortNo.GotFocus, AddressOf ControlGotFocus
        AddHandler txt_SortNo.LostFocus, AddressOf ControlLostFocus

        AddHandler lbl_BeamCount.GotFocus, AddressOf ControlGotFocus
        AddHandler lbl_Elongation_Mtr.GotFocus, AddressOf ControlGotFocus
        AddHandler lbl_Elongation_Perc.GotFocus, AddressOf ControlGotFocus
        AddHandler txt_Ends.GotFocus, AddressOf ControlGotFocus
        AddHandler lbl_ExcessShort.GotFocus, AddressOf ControlGotFocus
        AddHandler txt_InvoiceCode.GotFocus, AddressOf ControlGotFocus
        AddHandler txt_PcsLength.GotFocus, AddressOf ControlGotFocus
        AddHandler txt_PickUpPerc_Party.GotFocus, AddressOf ControlGotFocus
        AddHandler lbl_PickUp_Perc.GotFocus, AddressOf ControlGotFocus
        AddHandler txt_Remarks.GotFocus, AddressOf ControlGotFocus
        AddHandler chk_RewindingStatus.GotFocus, AddressOf ControlGotFocus
        AddHandler txt_RewindingCones.GotFocus, AddressOf ControlGotFocus
        AddHandler txt_RwExcSht.GotFocus, AddressOf ControlGotFocus
        AddHandler txt_TapeLength.GotFocus, AddressOf ControlGotFocus

        AddHandler txt_RwExShrtWt.GotFocus, AddressOf ControlGotFocus
        AddHandler txt_RwExShrtWt.LostFocus, AddressOf ControlLostFocus
        AddHandler txt_RwExShrtWt.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler txt_RwExShrtWt.KeyPress, AddressOf TextBoxControlKeyPress



        AddHandler txt_WarpMeters.GotFocus, AddressOf ControlGotFocus

        AddHandler dgv_WarpingDetails_Set1.GotFocus, AddressOf ControlGotFocus
        AddHandler dgv_WarpingDetails_Set2.GotFocus, AddressOf ControlGotFocus
        AddHandler dgv_WarpingDetails_Set3.GotFocus, AddressOf ControlGotFocus

        AddHandler dgv_SizingDetails_Set1.GotFocus, AddressOf ControlGotFocus
        AddHandler dgv_SizingDetails_Set2.GotFocus, AddressOf ControlGotFocus
        AddHandler dgv_SizingDetails_Set3.GotFocus, AddressOf ControlGotFocus

        AddHandler dgv_BabyConeDetails.GotFocus, AddressOf ControlGotFocus
        AddHandler dtp_Filter_Fromdate.GotFocus, AddressOf ControlGotFocus
        AddHandler dtp_Filter_ToDate.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Filter_PartyName.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Filter_MillName.GotFocus, AddressOf ControlGotFocus
        AddHandler chk_SocietySet.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Filter_CountName.GotFocus, AddressOf ControlGotFocus


        AddHandler btn_close.GotFocus, AddressOf ControlGotFocus
        AddHandler btn_Close_Print.GotFocus, AddressOf ControlGotFocus
        AddHandler btn_EMail.GotFocus, AddressOf ControlGotFocus
        AddHandler btn_Filter_Close.GotFocus, AddressOf ControlGotFocus
        AddHandler btn_Filter_Show.GotFocus, AddressOf ControlGotFocus
        AddHandler btn_PDF.GotFocus, AddressOf ControlGotFocus
        AddHandler btn_Print.GotFocus, AddressOf ControlGotFocus
        AddHandler btn_Print_Cancel.GotFocus, AddressOf ControlGotFocus
        AddHandler btn_Print_Ordinary.GotFocus, AddressOf ControlGotFocus
        AddHandler btn_Print_Preprint.GotFocus, AddressOf ControlGotFocus
        AddHandler btn_save.GotFocus, AddressOf ControlGotFocus
        AddHandler btn_SMS.GotFocus, AddressOf ControlGotFocus
        AddHandler btn_StmtPrntOk.GotFocus, AddressOf ControlGotFocus
        AddHandler btn_StatmtCancel.GotFocus, AddressOf ControlGotFocus

        AddHandler txt_warp_Rate.GotFocus, AddressOf ControlGotFocus
        AddHandler txt_warp_weight.GotFocus, AddressOf ControlGotFocus
        AddHandler txt_warp_Amount.GotFocus, AddressOf ControlGotFocus
        AddHandler txt_Rewinding_Rate.GotFocus, AddressOf ControlGotFocus
        AddHandler txt_Rewinding_Weight.GotFocus, AddressOf ControlGotFocus
        AddHandler Txt_Rewinding_Amount.GotFocus, AddressOf ControlGotFocus
        AddHandler Txt_No_Of_Beams.GotFocus, AddressOf ControlGotFocus
        AddHandler Txt_Beams_Rate.GotFocus, AddressOf ControlGotFocus
        AddHandler Txt_Beams_Amount.GotFocus, AddressOf ControlGotFocus
        AddHandler Txt_Welding_Rate.GotFocus, AddressOf ControlGotFocus
        AddHandler Txt_Welding_Beams.GotFocus, AddressOf ControlGotFocus
        AddHandler Txt_Welding_Amount.GotFocus, AddressOf ControlGotFocus
        AddHandler txt_Other_Charges.GotFocus, AddressOf ControlGotFocus
        AddHandler txt_ExcessShort_Adjustment.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Grid_BeamNo.GotFocus, AddressOf ControlGotFocus

        AddHandler cbo_Grid_BeamNo.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_Type.LostFocus, AddressOf ControlLostFocus
        AddHandler dtp_Date.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Ledger.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_MillName.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Rw_MillName.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_BeamWidth.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_CountName.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Grid_CountName.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Grid_ItemName.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Grid_MillName.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Grid_YarnType.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Grid_BackWarper1.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Grid_BackWarper2.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Grid_FrontWarper2.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Grid_FrontWarper_1.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Grid_Helper1.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Grid_SetNo.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Grid_Helper2.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Grid_WareHouse.LostFocus, AddressOf ControlLostFocus


        AddHandler dtp_Filter_Fromdate.LostFocus, AddressOf ControlLostFocus
        AddHandler dtp_Filter_ToDate.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Ends2_BackWarper1.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Ends2_BackWarper2.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Ends2_FrontWarper1.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Ends2_FrontWarper2.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Ends2_Helper1.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Ends2_Helper2.LostFocus, AddressOf ControlLostFocus

        AddHandler cbo_Ends3_BackWarper1.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Ends3_BackWarper2.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Ends3_FrontWarper1.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Ends3_FrontWarper2.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Ends3_Helper1.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Ends3_Helper2.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Ends1_Shift.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Ends2_Shift.LostFocus, AddressOf ControlLostFocus
        AddHandler Cbo_Ends3_Shift.LostFocus, AddressOf ControlLostFocus

        AddHandler cbo_Sizing1_BackSizer1.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing1_BackSizer2.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing1_Boiler1.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing1_Boiler2.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing1_Cooker.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing1_Cooker2.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing1_FrontSizer1.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing1_FrontSizer2.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing1_Shift.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing1_Vendor.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing2_Vendor.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing3_Vendor.LostFocus, AddressOf ControlLostFocus

        AddHandler cbo_Sizing2_BackSizer1.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing2_BackSizer2.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing2_Boiler1.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing2_Boiler2.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing2_Cooker.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing2_Cooker2.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing2_FrontSizer1.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing2_FrontSizer2.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing2_Shift.LostFocus, AddressOf ControlLostFocus


        AddHandler cbo_Sizing3_BackSizer1.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing3_BackSizer2.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing3_Boiler1.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing3_Boiler2.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing3_Cooker.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing3_Cooker2.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing3_FrontSizer1.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing3_FrontSizer2.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Sizing3_Shift.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Warping_Machineno.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_SizingMachineNo.LostFocus, AddressOf ControlLostFocus

        AddHandler cbo_Meters_Yards.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_LoomType.LostFocus, AddressOf ControlLostFocus

        AddHandler lbl_BeamCount.LostFocus, AddressOf ControlLostFocus
        AddHandler txt_BabyCone_DeliveryWeight.LostFocus, AddressOf ControlLostFocus
        AddHandler txt_BabyCone_TareWeight.LostFocus, AddressOf ControlLostFocus

        AddHandler lbl_Elongation_Mtr.LostFocus, AddressOf ControlLostFocus
        AddHandler lbl_Elongation_Perc.LostFocus, AddressOf ControlLostFocus

        AddHandler txt_Ends.LostFocus, AddressOf ControlLostFocus
        AddHandler lbl_ExcessShort.LostFocus, AddressOf ControlLostFocus
        AddHandler txt_InvoiceCode.LostFocus, AddressOf ControlLostFocus
        AddHandler txt_PcsLength.LostFocus, AddressOf ControlLostFocus
        AddHandler txt_PickUpPerc_Party.LostFocus, AddressOf ControlLostFocus
        AddHandler lbl_PickUp_Perc.LostFocus, AddressOf ControlLostFocus
        AddHandler txt_Remarks.LostFocus, AddressOf ControlLostFocus
        AddHandler chk_RewindingStatus.LostFocus, AddressOf ControlLostFocus
        AddHandler txt_RewindingCones.LostFocus, AddressOf ControlLostFocus

        AddHandler txt_RwExcSht.LostFocus, AddressOf ControlLostFocus
        AddHandler txt_TapeLength.LostFocus, AddressOf ControlLostFocus
        AddHandler txt_WarpMeters.LostFocus, AddressOf ControlLostFocus

        AddHandler dgv_WarpingDetails_Set1.LostFocus, AddressOf ControlLostFocus
        AddHandler dgv_WarpingDetails_Set2.LostFocus, AddressOf ControlLostFocus
        AddHandler dgv_WarpingDetails_Set3.LostFocus, AddressOf ControlLostFocus

        AddHandler dgv_SizingDetails_Set1.LostFocus, AddressOf ControlLostFocus
        AddHandler dgv_SizingDetails_Set2.LostFocus, AddressOf ControlLostFocus
        AddHandler dgv_SizingDetails_Set3.LostFocus, AddressOf ControlLostFocus

        AddHandler dgv_BabyConeDetails.LostFocus, AddressOf ControlLostFocus
        AddHandler chk_SocietySet.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Filter_CountName.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Filter_PartyName.LostFocus, AddressOf ControlLostFocus
        AddHandler cbo_Filter_MillName.LostFocus, AddressOf ControlLostFocus

        AddHandler txt_WgtEmYBag.LostFocus, AddressOf ControlLostFocus
        AddHandler txt_WgtEmYCone.LostFocus, AddressOf ControlLostFocus


        AddHandler btn_close.LostFocus, AddressOf ControlLostFocus
        AddHandler btn_Close_Print.LostFocus, AddressOf ControlLostFocus
        AddHandler btn_EMail.LostFocus, AddressOf ControlLostFocus
        AddHandler btn_Filter_Close.LostFocus, AddressOf ControlLostFocus
        AddHandler btn_Filter_Show.LostFocus, AddressOf ControlLostFocus
        AddHandler btn_PDF.LostFocus, AddressOf ControlLostFocus
        AddHandler btn_Print.LostFocus, AddressOf ControlLostFocus
        AddHandler btn_Print_Cancel.LostFocus, AddressOf ControlLostFocus
        AddHandler btn_Print_Ordinary.LostFocus, AddressOf ControlLostFocus
        AddHandler btn_Print_Preprint.LostFocus, AddressOf ControlLostFocus
        AddHandler btn_save.LostFocus, AddressOf ControlLostFocus
        AddHandler btn_SMS.LostFocus, AddressOf ControlLostFocus
        AddHandler btn_StmtPrntOk.LostFocus, AddressOf ControlLostFocus
        AddHandler btn_StatmtCancel.LostFocus, AddressOf ControlLostFocus

        AddHandler txt_warp_Rate.LostFocus, AddressOf ControlLostFocus
        AddHandler txt_warp_weight.LostFocus, AddressOf ControlLostFocus
        AddHandler txt_warp_Amount.LostFocus, AddressOf ControlLostFocus
        AddHandler txt_Rewinding_Rate.LostFocus, AddressOf ControlLostFocus
        AddHandler txt_Rewinding_Weight.LostFocus, AddressOf ControlLostFocus
        AddHandler Txt_Rewinding_Amount.LostFocus, AddressOf ControlLostFocus
        AddHandler Txt_No_Of_Beams.LostFocus, AddressOf ControlLostFocus
        AddHandler Txt_Beams_Rate.LostFocus, AddressOf ControlLostFocus
        AddHandler Txt_Beams_Amount.LostFocus, AddressOf ControlLostFocus
        AddHandler Txt_Welding_Rate.LostFocus, AddressOf ControlLostFocus
        AddHandler Txt_Welding_Beams.LostFocus, AddressOf ControlLostFocus
        AddHandler Txt_Welding_Amount.LostFocus, AddressOf ControlLostFocus
        AddHandler txt_Other_Charges.LostFocus, AddressOf ControlLostFocus
        AddHandler txt_ExcessShort_Adjustment.LostFocus, AddressOf ControlLostFocus

        ' AddHandler dtp_Date.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler txt_BabyCone_DeliveryWeight.KeyDown, AddressOf TextBoxControlKeyDown

        AddHandler lbl_BeamCount.KeyDown, AddressOf TextBoxControlKeyDown

        AddHandler lbl_Elongation_Mtr.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler lbl_Elongation_Perc.KeyDown, AddressOf TextBoxControlKeyDown
        'AddHandler txt_Ends.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler lbl_ExcessShort.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler txt_InvoiceCode.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler txt_PcsLength.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler txt_PickUpPerc_Party.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler lbl_PickUp_Perc.KeyDown, AddressOf TextBoxControlKeyDown
        'AddHandler txt_Remarks.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler txt_RewindingCones.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler txt_TapeLength.KeyDown, AddressOf TextBoxControlKeyDown
        'AddHandler txt_WarpMeters.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler dtp_Filter_Fromdate.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler dtp_Filter_ToDate.KeyDown, AddressOf TextBoxControlKeyDown

        'AddHandler txt_WgtEmYBag.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler txt_WgtEmYCone.KeyDown, AddressOf TextBoxControlKeyDown


        AddHandler txt_warp_Rate.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler txt_warp_weight.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler txt_warp_Amount.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler txt_Rewinding_Rate.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler txt_Rewinding_Weight.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler Txt_Rewinding_Amount.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler Txt_No_Of_Beams.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler Txt_Beams_Rate.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler Txt_Beams_Amount.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler Txt_Welding_Rate.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler Txt_Welding_Beams.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler Txt_Welding_Amount.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler txt_Other_Charges.KeyDown, AddressOf TextBoxControlKeyDown


        AddHandler txt_WgtEmYBag.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler txt_WgtEmYCone.KeyPress, AddressOf TextBoxControlKeyPress

        'AddHandler dtp_Date.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler txt_BabyCone_DeliveryWeight.KeyPress, AddressOf TextBoxControlKeyPress

        AddHandler lbl_BeamCount.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler lbl_Elongation_Mtr.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler lbl_Elongation_Perc.KeyPress, AddressOf TextBoxControlKeyPress
        'AddHandler txt_Ends.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler lbl_ExcessShort.KeyPress, AddressOf TextBoxControlKeyPress

        AddHandler txt_InvoiceCode.KeyPress, AddressOf TextBoxControlKeyPress
        'AddHandler txt_PcsLength.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler txt_PickUpPerc_Party.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler lbl_PickUp_Perc.KeyPress, AddressOf TextBoxControlKeyPress
        'AddHandler txt_Remarks.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler txt_RewindingCones.KeyPress, AddressOf TextBoxControlKeyPress
        'AddHandler txt_RwExcSht.KeyPress, AddressOf TextBoxControlKeyPress

        AddHandler txt_TapeLength.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler txt_WarpMeters.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler dtp_Filter_Fromdate.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler dtp_Filter_ToDate.KeyPress, AddressOf TextBoxControlKeyPress

        AddHandler txt_warp_Rate.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler txt_warp_weight.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler txt_warp_Amount.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler txt_Rewinding_Rate.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler txt_Rewinding_Weight.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler Txt_Rewinding_Amount.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler Txt_No_Of_Beams.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler Txt_Beams_Rate.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler Txt_Beams_Amount.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler Txt_Welding_Rate.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler Txt_Welding_Beams.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler Txt_Welding_Amount.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler txt_Other_Charges.KeyPress, AddressOf TextBoxControlKeyPress



        AddHandler chk_No_Stock_Posting.GotFocus, AddressOf ControlGotFocus
        AddHandler chk_No_Stock_Posting.LostFocus, AddressOf ControlLostFocus

        AddHandler cbo_DeliveryTo.GotFocus, AddressOf ControlGotFocus
        AddHandler cbo_DeliveryTo.LostFocus, AddressOf ControlLostFocus

        ' 05Sep2019  ======================

        'AddHandler txt_warp_dets_tot_beam.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler txt_warp_dets_tot_beam.KeyPress, AddressOf TextBoxControlKeyPress

        AddHandler txt_warp_dets_tot_consWT.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler txt_warp_dets_tot_consWT.KeyPress, AddressOf TextBoxControlKeyPress

        'AddHandler txt_warp_dets_tot_ActWT.KeyDown, AddressOf TextBoxControlKeyDown
        'AddHandler txt_warp_dets_tot_ActWT.KeyPress, AddressOf TextBoxControlKeyPress

        AddHandler txt_warp_dets_tot_beam.GotFocus, AddressOf ControlGotFocus
        AddHandler txt_warp_dets_tot_beam.LostFocus, AddressOf ControlLostFocus

        AddHandler txt_warp_dets_tot_consWT.GotFocus, AddressOf ControlGotFocus
        AddHandler txt_warp_dets_tot_consWT.LostFocus, AddressOf ControlLostFocus

        AddHandler txt_FromRange.GotFocus, AddressOf ControlGotFocus
        AddHandler txt_FromRange.LostFocus, AddressOf ControlLostFocus

        AddHandler txt_FromRange.KeyDown, AddressOf TextBoxControlKeyDown
        AddHandler txt_FromRange.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler txt_FromRange.GotFocus, AddressOf ControlGotFocus
        AddHandler txt_FromRange.LostFocus, AddressOf ControlLostFocus

        'AddHandler txt_ToRange.KeyDown, AddressOf TextBoxControlKeyDown
        'AddHandler txt_ToRange.KeyPress, AddressOf TextBoxControlKeyPress
        AddHandler txt_ToRange.GotFocus, AddressOf ControlGotFocus
        AddHandler txt_ToRange.LostFocus, AddressOf ControlLostFocus

        btn_ExcessShort_Input.Visible = False
        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1123" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1220" Then '---- Shanthi Sizing(Somanur)   or   SRI NIKITHA SIZING MILLS (SOMANUR)    or    Sri Meenakshi Sizing (Somanur) & BRT
            btn_ExcessShort_Input.Visible = True
            btn_ExcessShort_Input.BringToFront()
        End If

        If Trim(Common_Procedures.settings.CustomerCode) = "1282" Then

            With (dgv_WarpingDetails_Set1)

                .Columns(5).Visible = True
                .Columns(6).Visible = False
                .Columns(7).Visible = False
                .Columns(8).Visible = False
                .Columns(9).Visible = False
                .Columns(11).Visible = False
                .Columns(13).Visible = False
                .Columns(14).Visible = False
                .Columns(15).Visible = False
                .Columns(16).Visible = False
                .Columns(17).Visible = False
                .Columns(18).Visible = False
                .Columns(19).Visible = False
                .Columns(20).Visible = False
                .Columns(21).Visible = False
                .Columns(22).Visible = False
                .Columns(12).HeaderText = "BACK WARPER"
                .Columns(10).HeaderText = "FRONT WARPER"
            End With

            With (dgv_WarpingDetails_Set2)
                .Columns(5).Visible = True
                .Columns(6).Visible = False
                .Columns(7).Visible = False
                .Columns(8).Visible = False
                .Columns(9).Visible = False
                .Columns(11).Visible = False
                .Columns(13).Visible = False
                .Columns(14).Visible = False
                .Columns(15).Visible = False
                .Columns(16).Visible = False
                .Columns(17).Visible = False
                .Columns(18).Visible = False
                .Columns(19).Visible = False
                .Columns(20).Visible = False
                .Columns(21).Visible = False
                .Columns(22).Visible = False
                .Columns(12).HeaderText = "BACK WARPER"
                .Columns(10).HeaderText = "FRONT WARPER"
            End With

            With (dgv_WarpingDetails_Set3)
                .Columns(5).Visible = True
                .Columns(6).Visible = False
                .Columns(7).Visible = False
                .Columns(8).Visible = False
                .Columns(9).Visible = False
                .Columns(11).Visible = False
                .Columns(13).Visible = False
                .Columns(14).Visible = False
                .Columns(15).Visible = False
                .Columns(16).Visible = False
                .Columns(17).Visible = False
                .Columns(18).Visible = False
                .Columns(19).Visible = False
                .Columns(20).Visible = False
                .Columns(21).Visible = False
                .Columns(22).Visible = False
                .Columns(12).HeaderText = "BACK WARPER"
                .Columns(10).HeaderText = "FRONT WARPER"
            End With

            With dgv_SizingDetails_Set1
                .Columns(9).Visible = True
                .Columns(10).Visible = False
                .Columns(11).Visible = False
                .Columns(12).Visible = False
                .Columns(14).Visible = False
                .Columns(16).Visible = False
                .Columns(18).Visible = False
                .Columns(20).Visible = False
                .Columns(21).Visible = False
                .Columns(22).Visible = False
                .Columns(23).Visible = False
                .Columns(24).Visible = False

                ''''''''''''''''''''
                .Columns(25).Visible = True

                ''''''''''''''''''''
                .Columns(26).Visible = False
                .Columns(27).Visible = False
                .Columns(28).Visible = False
                .Columns(29).Visible = False
                .Columns(30).Visible = False
                .Columns(31).Visible = False
                .Columns(32).Visible = False
                .Columns(33).Visible = False
                .Columns(34).Visible = False
                .Columns(17).HeaderText = "FRONT BOILER"
                .Columns(19).HeaderText = "BACK BOILER"

            End With

            With dgv_SizingDetails_Set2
                .Columns(9).Visible = True
                .Columns(10).Visible = False
                .Columns(11).Visible = False
                .Columns(12).Visible = False
                .Columns(14).Visible = False
                .Columns(16).Visible = False
                .Columns(18).Visible = False
                .Columns(20).Visible = False
                .Columns(21).Visible = False
                .Columns(22).Visible = False
                .Columns(23).Visible = False
                .Columns(24).Visible = False
                .Columns(25).Visible = False
                .Columns(26).Visible = False
                .Columns(27).Visible = False
                .Columns(28).Visible = False
                .Columns(29).Visible = False
                .Columns(30).Visible = False
                .Columns(31).Visible = False
                .Columns(32).Visible = False
                .Columns(33).Visible = False
                .Columns(34).Visible = False
                .Columns(17).HeaderText = "FRONT BOILER"
                .Columns(19).HeaderText = "BACK BOILER"
            End With

            With dgv_SizingDetails_Set3
                .Columns(9).Visible = True
                .Columns(10).Visible = False
                .Columns(11).Visible = False
                .Columns(12).Visible = False
                .Columns(14).Visible = False
                .Columns(16).Visible = False
                .Columns(18).Visible = False
                .Columns(20).Visible = False
                .Columns(21).Visible = False
                .Columns(22).Visible = False
                .Columns(23).Visible = False
                .Columns(24).Visible = False
                .Columns(25).Visible = False
                .Columns(26).Visible = False
                .Columns(27).Visible = False
                .Columns(28).Visible = False
                .Columns(29).Visible = False
                .Columns(30).Visible = False
                .Columns(31).Visible = False
                .Columns(32).Visible = False
                .Columns(33).Visible = False
                .Columns(34).Visible = False
                .Columns(17).HeaderText = "FRONT BOILER"
                .Columns(19).HeaderText = "BACK BOILER"
            End With
        End If


        If Trim(Common_Procedures.settings.CustomerCode) = "1282" Then
            With dgv_WarpingDetails_Set1
                .Columns(4).DefaultCellStyle.BackColor = Color.LightPink
                .AllowUserToAddRows = False
            End With
            btn_Rate_Details.Visible = True
        Else
            With dgv_WarpingDetails_Set1
                .Columns(4).DefaultCellStyle.BackColor = Color.White
                .AllowUserToAddRows = True
            End With
            btn_Rate_Details.Visible = True
        End If


        If Common_Procedures.settings.CustomerCode = "1282" Or Common_Procedures.settings.CustomerCode = "1378" Then
            pnl_Warping_Header.Visible = True

            'btn_Show.Visible = True
        Else
            pnl_Warping_Header.Visible = False

            'btn_Show.Visible = False
        End If


        If Common_Procedures.settings.CustomerCode = "1288" Then
            chk_No_Stock_Posting.Visible = False
            lbl_DeliveryTo.Visible = False
            cbo_DeliveryTo.Visible = False
            lbl_SortNo.Visible = True
            txt_SortNo.Visible = True
        Else
            chk_No_Stock_Posting.Visible = False
            lbl_DeliveryTo.Visible = False
            cbo_DeliveryTo.Visible = False
            lbl_SortNo.Visible = False
            txt_SortNo.Visible = False
        End If



        lbl_Company.Text = ""
        lbl_Company.Tag = 0
        lbl_Company.Visible = False
        Common_Procedures.CompIdNo = 0

        Filter_Status = False
        FrmLdSTS = True
        new_record()

    End Sub



    Private Sub Statement_FormClosed(ByVal sender As Object, ByVal e As System.Windows.Forms.FormClosedEventArgs) Handles Me.FormClosed
        On Error Resume Next
        Con.Close()
        Con.Dispose()
        Common_Procedures.Last_Closed_FormName = Me.Name
    End Sub

    Private Sub Statement_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles Me.KeyPress

        Try
            If Asc(e.KeyChar) = 27 Then

                If pnl_Filter.Visible = True Then
                    btn_Filter_Close_Click(sender, e)
                    Exit Sub

                ElseIf pnl_StatementPrint.Visible = True Then
                    btn_StatmtCancel_Click(sender, e)
                    Exit Sub

                ElseIf pnl_Print.Visible = True Then
                    btn_print_Close_Click(sender, e)
                    Exit Sub


                ElseIf pnl_Rate_Details.Visible = True Then
                    btn_RateDetails_Close_Click(sender, e)
                    Exit Sub


                ElseIf pnl_Selection.Visible = True Then
                    btn_Close_Selection_Click(sender, e)
                    Exit Sub

                Else
                    If MessageBox.Show("Do you want to Close?", "FOR CLOSING ENTRY...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) <> Windows.Forms.DialogResult.Yes Then
                        Exit Sub
                    Else
                        Close_Form()
                    End If

                End If

            End If

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT CLOSE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try


    End Sub

    Private Sub Close_Form()

        Try

            lbl_Company.Tag = 0
            lbl_Company.Text = ""
            Me.Text = ""
            Common_Procedures.CompIdNo = 0

            lbl_Company.Text = Common_Procedures.Show_CompanySelection_On_FormClose(Con)
            lbl_Company.Tag = Val(Common_Procedures.CompIdNo)
            Me.Text = lbl_Company.Text
            If Val(Common_Procedures.CompIdNo) = 0 Then

                Me.Close()

            Else

                new_record()

            End If

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT CLOSE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Protected Overrides Function ProcessCmdKey(ByRef msg As System.Windows.Forms.Message, ByVal keyData As System.Windows.Forms.Keys) As Boolean
        Dim dgv1 As New DataGridView
        Dim i As Integer
        Dim Pr_kyData As Keys

        If ActiveControl.Name = dgv_WarpingDetails_Set1.Name Or ActiveControl.Name = dgv_WarpingDetails_Set2.Name Or ActiveControl.Name = dgv_WarpingDetails_Set3.Name Or ActiveControl.Name = dgv_SizingDetails_Set1.Name Or ActiveControl.Name = dgv_SizingDetails_Set2.Name Or ActiveControl.Name = dgv_SizingDetails_Set3.Name Or ActiveControl.Name = dgv_YarnTakenDetails.Name Or ActiveControl.Name = dgv_ChemicalDetails.Name Or ActiveControl.Name = dgv_BabyConeDetails.Name Or TypeOf ActiveControl Is DataGridViewTextBoxEditingControl Then

            On Error Resume Next

            dgv1 = Nothing

            If ActiveControl.Name = dgv_WarpingDetails_Set1.Name Then
                dgv1 = dgv_WarpingDetails_Set1

            ElseIf ActiveControl.Name = dgv_WarpingDetails_Set2.Name Then
                dgv1 = dgv_WarpingDetails_Set2

            ElseIf ActiveControl.Name = dgv_WarpingDetails_Set3.Name Then
                dgv1 = dgv_WarpingDetails_Set3

            ElseIf ActiveControl.Name = dgv_SizingDetails_Set1.Name Then
                dgv1 = dgv_SizingDetails_Set1

            ElseIf ActiveControl.Name = dgv_SizingDetails_Set2.Name Then
                dgv1 = dgv_SizingDetails_Set2

            ElseIf ActiveControl.Name = dgv_SizingDetails_Set3.Name Then
                dgv1 = dgv_SizingDetails_Set3

            ElseIf ActiveControl.Name = dgv_YarnTakenDetails.Name Then
                dgv1 = dgv_YarnTakenDetails

            ElseIf ActiveControl.Name = dgv_BabyConeDetails.Name Then
                dgv1 = dgv_BabyConeDetails

            ElseIf ActiveControl.Name = dgv_ChemicalDetails.Name Then
                dgv1 = dgv_ChemicalDetails

            ElseIf dgv_WarpingDetails_Set1.IsCurrentRowDirty = True Then
                dgv1 = dgv_WarpingDetails_Set1

            ElseIf dgv_WarpingDetails_Set2.IsCurrentRowDirty = True Then
                dgv1 = dgv_WarpingDetails_Set2

            ElseIf dgv_WarpingDetails_Set3.IsCurrentRowDirty = True Then
                dgv1 = dgv_WarpingDetails_Set3

            ElseIf dgv_SizingDetails_Set1.IsCurrentRowDirty = True Then
                dgv1 = dgv_SizingDetails_Set1

            ElseIf dgv_SizingDetails_Set2.IsCurrentRowDirty = True Then
                dgv1 = dgv_SizingDetails_Set2

            ElseIf dgv_SizingDetails_Set3.IsCurrentRowDirty = True Then
                dgv1 = dgv_SizingDetails_Set3

            ElseIf dgv_YarnTakenDetails.IsCurrentRowDirty = True Then
                dgv1 = dgv_YarnTakenDetails

            ElseIf dgv_BabyConeDetails.IsCurrentRowDirty = True Then
                dgv1 = dgv_BabyConeDetails

            ElseIf dgv_ChemicalDetails.IsCurrentRowDirty = True Then
                dgv1 = dgv_ChemicalDetails

            ElseIf tab_Main.SelectedIndex = 0 Then
                If tab_WarpingDeatils.SelectedIndex = 0 Then
                    dgv1 = dgv_WarpingDetails_Set1

                ElseIf tab_WarpingDeatils.SelectedIndex = 1 Then
                    dgv1 = dgv_WarpingDetails_Set2

                ElseIf tab_WarpingDeatils.SelectedIndex = 2 Then
                    dgv1 = dgv_WarpingDetails_Set3

                End If

            ElseIf tab_Main.SelectedIndex = 1 Then

                If tab_SizingDetails.SelectedIndex = 0 Then
                    dgv1 = dgv_SizingDetails_Set1

                ElseIf tab_SizingDetails.SelectedIndex = 1 Then
                    dgv1 = dgv_SizingDetails_Set2

                ElseIf tab_SizingDetails.SelectedIndex = 2 Then
                    dgv1 = dgv_SizingDetails_Set3

                End If

            ElseIf tab_Main.SelectedIndex = 2 Then
                dgv1 = dgv_YarnTakenDetails

            ElseIf tab_Main.SelectedIndex = 3 Then
                dgv1 = dgv_BabyConeDetails

            ElseIf tab_Main.SelectedIndex = 4 Then
                dgv1 = dgv_ChemicalDetails

            Else
                Return MyBase.ProcessCmdKey(msg, keyData)
                Exit Function

            End If


            Pr_kyData = Prev_kyData
            Prev_kyData = keyData

            With dgv1

                '-------------------------- WARPING DETAILS (SET1)

                If dgv1.Name = dgv_WarpingDetails_Set1.Name Or dgv1.Name = dgv_WarpingDetails_Set2.Name Or dgv1.Name = dgv_WarpingDetails_Set3.Name Then

                    If (keyData = Keys.Enter Or keyData = Keys.Down Or keyData = 131085) Then


                        'If .CurrentCell.ColumnIndex >= .ColumnCount Or (.CurrentCell.ColumnIndex >= 3 And .Columns(5).Visible = False) Or Pr_kyData = 131089 Then
                        If .CurrentCell.ColumnIndex >= .ColumnCount - 1 Or
                            (Common_Procedures.settings.CustomerCode <> "1282" And .CurrentCell.ColumnIndex >= 3 And
                             .Columns(5).Visible = False) Or Pr_kyData = 131089 Then

                            'If .CurrentCell.ColumnIndex >= .ColumnCount - 1 Or Pr_kyData = 131089 Then

                            If .CurrentCell.RowIndex = .RowCount - 1 Then

                                If .RowCount = 1 Then
                                    tab_Main.SelectTab(1)
                                    tab_SizingDetails.SelectTab(0)
                                    'dgv_SizingDetails_Set1.Focus()
                                    'dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
                                    'dgv_SizingDetails_Set1.CurrentCell.Selected = True

                                Else
                                    If dgv1.Name = dgv_WarpingDetails_Set1.Name Then
                                        tab_WarpingDeatils.SelectTab(1)
                                        'If dgv_WarpingDetails_Set2.Rows.Count <= 0 Then dgv_WarpingDetails_Set2.Rows.Add()
                                        'dgv_WarpingDetails_Set2.Focus()
                                        'dgv_WarpingDetails_Set2.CurrentCell = dgv_WarpingDetails_Set2.Rows(0).Cells(1)
                                        'dgv_WarpingDetails_Set2.CurrentCell.Selected = True

                                    ElseIf dgv1.Name = dgv_WarpingDetails_Set2.Name Then
                                        tab_WarpingDeatils.SelectTab(2)
                                        'If dgv_WarpingDetails_Set3.Rows.Count <= 0 Then dgv_WarpingDetails_Set3.Rows.Add()
                                        'dgv_WarpingDetails_Set3.Focus()
                                        'dgv_WarpingDetails_Set3.CurrentCell = dgv_WarpingDetails_Set3.Rows(0).Cells(1)
                                        'dgv_WarpingDetails_Set3.CurrentCell.Selected = True

                                    Else
                                        tab_Main.SelectTab(1)
                                        tab_SizingDetails.SelectTab(0)
                                        'dgv_SizingDetails_Set1.Focus()
                                        'dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
                                        'dgv_SizingDetails_Set1.CurrentCell.Selected = True

                                    End If

                                End If

                            ElseIf .CurrentCell.ColumnIndex = 3 And Trim(Common_Procedures.settings.CustomerCode) = "1036" Then
                                .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                            ElseIf .CurrentCell.ColumnIndex = 3 And .Columns(6).Visible = True Then
                                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(6)
                            ElseIf .CurrentCell.ColumnIndex = 3 And .Columns(10).Visible = True Then
                                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(10)

                            ElseIf .CurrentCell.ColumnIndex = 3 And .Columns(23).Visible = True Then
                                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(23)

                            ElseIf .CurrentCell.ColumnIndex = 3 And Trim(Common_Procedures.settings.CustomerCode) = "1263" Then
                                'If .CurrentCell.RowIndex > 0 Then
                                .Rows(.CurrentCell.RowIndex + 1).Cells(1).Value = Val(.Rows(.CurrentCell.RowIndex).Cells(1).Value).ToString
                                'End If
                                .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(2)

                            ElseIf .CurrentCell.ColumnIndex = 23 And .Columns(24).Visible = True Then
                                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(24)

                                'ElseIf .CurrentCell.ColumnIndex = 23 And Trim(Common_Procedures.settings.CustomerCode) = "1282" Then
                                '    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(24)

                            Else
                                .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)

                            End If

                        ElseIf .CurrentCell.ColumnIndex = 1 And Trim(Common_Procedures.settings.CustomerCode) = "1378" Then
                            .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(6)

                        Else

                            If .CurrentCell.RowIndex = .RowCount - 1 And .CurrentCell.ColumnIndex >= 1 And ((.CurrentCell.ColumnIndex <> 1 And Val(.CurrentRow.Cells(1).Value) = 0) Or (.CurrentCell.ColumnIndex = 1 And Val(dgtxt_WarpingDetails_Set1.Text) = 0 And Val(dgtxt_WarpingDetails_Set2.Text) = 0 And Val(dgtxt_WarpingDetails_Set3.Text) = 0)) Then

                                If .RowCount = 1 Then
                                    tab_Main.SelectTab(1)
                                    tab_SizingDetails.SelectTab(0)
                                    'dgv_SizingDetails_Set1.Focus()
                                    'dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
                                    'dgv_SizingDetails_Set1.CurrentCell.Selected = True

                                Else
                                    If dgv1.Name = dgv_WarpingDetails_Set1.Name Then
                                        tab_WarpingDeatils.SelectTab(1)
                                        'If dgv_WarpingDetails_Set2.Rows.Count <= 0 Then dgv_WarpingDetails_Set2.Rows.Add()
                                        'dgv_WarpingDetails_Set2.Focus()
                                        'dgv_WarpingDetails_Set2.CurrentCell = dgv_WarpingDetails_Set2.Rows(0).Cells(1)
                                        'dgv_WarpingDetails_Set2.CurrentCell.Selected = True

                                    ElseIf dgv1.Name = dgv_WarpingDetails_Set2.Name Then
                                        tab_WarpingDeatils.SelectTab(2)
                                        'If dgv_WarpingDetails_Set3.Rows.Count <= 0 Then dgv_WarpingDetails_Set3.Rows.Add()
                                        'dgv_WarpingDetails_Set3.Focus()
                                        'dgv_WarpingDetails_Set3.CurrentCell = dgv_WarpingDetails_Set3.Rows(0).Cells(1)
                                        'dgv_WarpingDetails_Set3.CurrentCell.Selected = True

                                    Else
                                        tab_Main.SelectTab(1)
                                        tab_SizingDetails.SelectTab(0)
                                        'dgv_SizingDetails_Set1.Focus()
                                        'dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
                                        'dgv_SizingDetails_Set1.CurrentCell.Selected = True

                                    End If

                                End If

                            Else

                                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1263" Then
                                    If .CurrentCell.ColumnIndex = 3 Then
                                        .CurrentCell = .Rows(.CurrentRow.Index + 1).Cells(1)
                                    ElseIf .CurrentRow.Cells(1).Value <> "" And .CurrentCell.Value = "" Then 'Or .CurrentRow.Cells(3).Value = "" Then
                                        tab_Main.SelectTab(1)
                                        dgv_SizingDetails_Set1.Focus()
                                        dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
                                        dgv_SizingDetails_Set1.CurrentCell.Selected = True
                                    Else
                                        .CurrentCell = .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex + 1)
                                    End If

                                Else

                                    If Common_Procedures.settings.CustomerCode = "1282" Then
                                        If .CurrentCell.ColumnIndex = 2 And .CurrentCell.Value = "" Then
                                            'If .CurrentRow.Cells(23).Value = "" And c Then
                                            tab_Main.SelectTab(1)
                                            dgv_SizingDetails_Set1.Focus()
                                            dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
                                            dgv_SizingDetails_Set1.CurrentCell.Selected = True
                                        Else
                                            If .CurrentCell.ColumnIndex = 4 Then
                                                .CurrentCell = .Rows(.CurrentRow.Index).Cells(5)
                                            Else
                                                .CurrentCell = .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex + 1)
                                            End If

                                        End If

                                    Else
                                        If .CurrentRow.Cells(1).Value = "" And .CurrentCell.Value = "" Then
                                            tab_Main.SelectTab(1)
                                            dgv_SizingDetails_Set1.Focus()
                                            dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
                                            dgv_SizingDetails_Set1.CurrentCell.Selected = True
                                        Else
                                            .CurrentCell = .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex + 1)
                                        End If

                                    End If

                                End If
                            End If

                        End If

                        Return True

                    ElseIf keyData = Keys.Up Then

                        If .CurrentCell.ColumnIndex <= 1 Then
                            If .CurrentCell.RowIndex = 0 Then

                                If dgv1.Name = dgv_WarpingDetails_Set2.Name Then
                                    tab_WarpingDeatils.SelectTab(0)
                                    'If dgv_WarpingDetails_Set1.Rows.Count <= 0 Then dgv_WarpingDetails_Set1.Rows.Add()
                                    'dgv_WarpingDetails_Set1.CurrentCell = dgv_WarpingDetails_Set1.Rows(0).Cells(1)
                                    'dgv_WarpingDetails_Set1.Focus()
                                    'dgv_WarpingDetails_Set1.CurrentCell.Selected = True

                                ElseIf dgv1.Name = dgv_WarpingDetails_Set3.Name Then
                                    tab_WarpingDeatils.SelectTab(1)
                                    'If dgv_WarpingDetails_Set2.Rows.Count <= 0 Then dgv_WarpingDetails_Set2.Rows.Add()
                                    'dgv_WarpingDetails_Set2.Focus()
                                    'dgv_WarpingDetails_Set2.CurrentCell = dgv_WarpingDetails_Set2.Rows(0).Cells(1)
                                    'dgv_WarpingDetails_Set2.CurrentCell.Selected = True

                                Else
                                    If txt_warp_dets_tot_beam.Enabled And txt_warp_dets_tot_beam.Visible Then
                                        txt_warp_dets_tot_beam.Focus()
                                    ElseIf cbo_Warping_Machineno.Enabled And cbo_Warping_Machineno.Visible Then
                                        cbo_Warping_Machineno.Focus()
                                    Else
                                        txt_PcsLength.Focus()
                                    End If

                                    'If txt_Ends.Enabled And txt_Ends.Visible Then txt_Ends.Focus() Else txt_PcsLength.Focus()

                                End If

                            Else
                                If .Columns(6).Visible = True Then
                                    .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(6) ' .Rows(.CurrentCell.RowIndex - 1).Cells(22)
                                Else
                                    .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(3) ' .Rows(.CurrentCell.RowIndex - 1).Cells(22)
                                End If


                            End If

                        Else
                            If .CurrentCell.ColumnIndex = 23 And .Columns(3).Visible = True Then
                                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(3)
                            Else
                                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                            End If
                        End If

                        Return True

                    Else
                        Return MyBase.ProcessCmdKey(msg, keyData)

                    End If


                    '-------------------------- SIZING DETAILS (SET1)

                ElseIf dgv1.Name = dgv_SizingDetails_Set1.Name Or dgv1.Name = dgv_SizingDetails_Set2.Name Or dgv1.Name = dgv_SizingDetails_Set3.Name Then

                    If (keyData = Keys.Enter Or keyData = Keys.Down Or keyData = 131085) Then

                        If .CurrentCell.ColumnIndex >= .ColumnCount - 3 Or Pr_kyData = 131089 Then
                            'If .CurrentCell.ColumnIndex >= .ColumnCount - 1 Or (.CurrentCell.ColumnIndex >= 7 And .Columns(9).Visible = False) Or Pr_kyData = 131089 Then

LOOP2:
                            If .CurrentCell.RowIndex = .RowCount - 1 Then

                                If dgv1.Name = dgv_SizingDetails_Set1.Name Then
                                    dgv_SizingDetails_Set1.Rows.Add()


                                    'tab_SizingDetails.SelectTab(1)
                                    'dgv_SizingDetails_Set2.Focus()
                                    'dgv_SizingDetails_Set2.CurrentCell = dgv_SizingDetails_Set2.Rows(0).Cells(1)
                                    'dgv_SizingDetails_Set2.CurrentCell.Selected = True

                                ElseIf dgv1.Name = dgv_SizingDetails_Set2.Name Then
                                    dgv_SizingDetails_Set2.Rows.Add()

                                    'tab_SizingDetails.SelectTab(2)
                                    'dgv_SizingDetails_Set3.Focus()
                                    'dgv_SizingDetails_Set3.CurrentCell = dgv_SizingDetails_Set3.Rows(0).Cells(1)
                                    'dgv_SizingDetails_Set3.CurrentCell.Selected = True

                                Else
                                    dgv_SizingDetails_Set3.Rows.Add()

                                    'tab_Main.SelectTab(2)
                                    'dgv_YarnTakenDetails.Focus()
                                    'dgv_YarnTakenDetails.CurrentCell = dgv_YarnTakenDetails.Rows(0).Cells(1)
                                    'dgv_YarnTakenDetails.CurrentCell.Selected = True
                                    'If cbo_Grid_CountName.Visible And cbo_Grid_CountName.Enabled Then
                                    '    cbo_Grid_CountName.Focus()
                                    'End If

                                End If

                                'ElseIf .CurrentCell.ColumnIndex = 7 Then
                                '    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(8)

                                '.CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)

                            Else
                                .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)

                            End If

                        Else


                            If .CurrentCell.RowIndex = .RowCount - 1 And .CurrentCell.ColumnIndex >= 1 And ((.CurrentCell.ColumnIndex <> 1 And Val(.CurrentRow.Cells(1).Value) = 0) Or (.CurrentCell.ColumnIndex = 1 And Val(dgtxt_SizingDetails_Set1.Text) = 0 And Val(dgtxt_SizingDetails_Set2.Text) = 0 And Val(dgtxt_SizingDetails_Set3.Text) = 0)) Then

                                For i = 0 To .Columns.Count - 1
                                    .Rows(.CurrentCell.RowIndex).Cells(i).Value = ""
                                Next

                                If .RowCount = 1 Then
                                    If Trim(UCase(cbo_Type.Text)) = "WARPING" Then
                                        tab_Main.SelectTab(4)
                                    Else
                                        tab_Main.SelectTab(2)
                                    End If

                                Else
                                    If dgv1.Name = dgv_SizingDetails_Set1.Name Then

                                        tab_SizingDetails.SelectTab(1)

                                        'dgv_SizingDetails_Set2.Focus()
                                        'dgv_SizingDetails_Set2.CurrentCell = dgv_SizingDetails_Set2.Rows(0).Cells(1)
                                        'dgv_SizingDetails_Set2.CurrentCell.Selected = True

                                    ElseIf dgv1.Name = dgv_SizingDetails_Set2.Name Then
                                        tab_SizingDetails.SelectTab(2)
                                        'dgv_SizingDetails_Set3.Focus()
                                        'dgv_SizingDetails_Set3.CurrentCell = dgv_SizingDetails_Set3.Rows(0).Cells(1)
                                        'dgv_SizingDetails_Set3.CurrentCell.Selected = True

                                    Else
                                        If Trim(UCase(cbo_Type.Text)) = "WARPING" Then
                                            tab_Main.SelectTab(4)
                                        Else
                                            tab_Main.SelectTab(2)
                                        End If

                                    End If

                                End If

                                'ElseIf (.CurrentCell.ColumnIndex = 3) Then

                                '    If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1097" Then
                                '        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(2)
                                '    Else
                                '        .CurrentCell = .Rows(.CurrentRow.Index).Cells(4)
                                '    End If


                            ElseIf (.CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 8) And .Columns(9).Visible = False Then
                                .CurrentCell = .Rows(.CurrentRow.Index).Cells(30)
                                If .CurrentRow.Index = .Rows.Count - 1 And .CurrentRow.Cells(7).Value <> 0 Then
                                    .Rows.Add()

                                ElseIf (.CurrentCell.ColumnIndex = 7) And .Columns(9).Visible = False Then
                                    .CurrentCell = .Rows(.CurrentRow.Index).Cells(13)
                                End If

                            Else

                                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1263" Then
                                    If .CurrentCell.ColumnIndex = 3 Then
                                        .CurrentCell = .Rows(.CurrentRow.Index).Cells(5)
                                    ElseIf .CurrentCell.ColumnIndex = 5 Then
                                        If .CurrentCell.RowIndex = .RowCount - 1 Then
                                            GoTo LOOP2
                                        Else
                                            .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(31)
                                        End If

                                    ElseIf .CurrentCell.ColumnIndex = 2 And .CurrentCell.Value = "" Then
                                        tab_Main.SelectTab(2)
                                        dgv_YarnTakenDetails.Focus()
                                        dgv_YarnTakenDetails.CurrentCell = .Rows(0).Cells(1)
                                        cbo_Grid_CountName.Focus()
                                        'ElseIf .CurrentCell.RowIndex = 1 And .CurrentCell.Value <> "" Then
                                    Else
                                        .CurrentCell = .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex + 1)
                                    End If

                                Else
                                    If .CurrentCell.ColumnIndex = 1 And .CurrentCell.Value = "" Then
                                        tab_Main.SelectTab(2)
                                        dgv_YarnTakenDetails.Focus()
                                        dgv_YarnTakenDetails.CurrentCell = .Rows(0).Cells(1)
                                        cbo_Grid_CountName.Focus()
                                    Else
                                        .CurrentCell = .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex + 1)

                                    End If
                                End If


                            End If

                        End If

                        Return True

                    ElseIf keyData = Keys.Up Then

                        If .CurrentCell.ColumnIndex <= 1 Then
                            If .CurrentCell.RowIndex = 0 Then

                                If dgv1.Name = dgv_SizingDetails_Set3.Name Then
                                    tab_SizingDetails.SelectTab(1)
                                    'dgv_SizingDetails_Set2.Focus()
                                    'dgv_SizingDetails_Set2.CurrentCell = dgv_SizingDetails_Set2.Rows(0).Cells(2)
                                    'dgv_SizingDetails_Set2.CurrentCell.Selected = True

                                ElseIf dgv1.Name = dgv_SizingDetails_Set2.Name Then
                                    tab_SizingDetails.SelectTab(0)
                                    'dgv_SizingDetails_Set1.Focus()
                                    'dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
                                    'dgv_SizingDetails_Set1.CurrentCell.Selected = True

                                Else
                                    If Trim(UCase(cbo_Type.Text)) = "WARPING" Then
                                        dtp_Date.Focus()
                                    Else

                                        tab_Main.SelectTab(0)
                                        tab_WarpingDeatils.SelectTab(0)

                                    End If

                                End If

                            Else

                                If .Columns(34).Visible = True Then
                                    .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(30)
                                ElseIf .Columns(31).Visible = True Then
                                    .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(31)
                                ElseIf .Columns(30).Visible = True Then
                                    .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(30)
                                ElseIf .Columns(29).Visible = True Then
                                    .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(29)
                                Else
                                    .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(7)
                                End If
                                '.CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(.Columns.Count - 3)
                                ''If Common_Procedures.settings.Statement_Production_Wages_For_Sizing <> 0 Then
                                ''    .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(30)
                                ''Else
                                ''    .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(7)
                                ''End If

                            End If

                        ElseIf .CurrentCell.ColumnIndex = 30 And .Columns(9).Visible = False Then
                            .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(7)

                        Else
                            .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)

                        End If

                        Return True

                    Else
                        Return MyBase.ProcessCmdKey(msg, keyData)

                    End If

                    '----------- YARN TAKEN DETAILS

                ElseIf dgv1.Name = dgv_YarnTakenDetails.Name Then

                    If keyData = Keys.Enter Or keyData = Keys.Down Then

                        If .CurrentCell.ColumnIndex >= .ColumnCount - 1 Then

                            If .CurrentCell.RowIndex = .RowCount - 1 Then
                                tab_Main.SelectTab(3)
                                'dgv_BabyConeDetails.Focus()
                                'dgv_BabyConeDetails.CurrentCell = dgv_BabyConeDetails.Rows(0).Cells(1)
                                'dgv_BabyConeDetails.CurrentCell.Selected = True

                            Else
                                .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)

                            End If

                        Else

                            If .CurrentCell.RowIndex = .RowCount - 1 And .CurrentCell.ColumnIndex >= 1 And Trim(.CurrentRow.Cells(1).Value) = "" Then
                                tab_Main.SelectTab(3)
                                'dgv_BabyConeDetails.Focus()
                                'dgv_BabyConeDetails.CurrentCell = dgv_BabyConeDetails.Rows(0).Cells(1)
                                'dgv_BabyConeDetails.CurrentCell.Selected = True

                            Else
                                .CurrentCell = .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex + 1)

                            End If

                        End If

                        Return True

                    ElseIf keyData = Keys.Up Then
                        If .CurrentCell.ColumnIndex <= 1 Then
                            If .CurrentCell.RowIndex = 0 Then
                                tab_Main.SelectTab(1)
                                tab_SizingDetails.SelectTab(0)
                                'dgv_SizingDetails_Set1.Focus()
                                'dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
                                'dgv_SizingDetails_Set1.CurrentCell.Selected = True

                            Else
                                .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(.Columns.Count - 1)

                            End If

                        Else
                            .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)

                        End If

                        Return True

                    Else
                        Return MyBase.ProcessCmdKey(msg, keyData)

                    End If


                    '----------- BABY CONE DETAILS

                ElseIf dgv1.Name = dgv_BabyConeDetails.Name Then

                    If keyData = Keys.Enter Or keyData = Keys.Down Then

                        If .CurrentCell.ColumnIndex >= .ColumnCount - 1 Then

                            If .CurrentCell.RowIndex = .RowCount - 1 Then
                                txt_WgtEmYBag.Focus()

                                'tab_Main.SelectTab(4)
                                'dgv_ChemicalDetails.Focus()
                                'dgv_ChemicalDetails.CurrentCell = dgv_ChemicalDetails.Rows(0).Cells(1)
                                'dgv_ChemicalDetails.CurrentCell.Selected = True
                                'If cbo_Grid_ItemName.Visible And cbo_Grid_ItemName.Enabled Then
                                '    cbo_Grid_ItemName.Focus()
                                'End If

                            Else
                                .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)

                            End If

                        Else

                            If .CurrentCell.RowIndex = .RowCount - 1 And .CurrentCell.ColumnIndex >= 1 And Trim(.CurrentRow.Cells(1).Value) = "" Then
                                txt_WgtEmYBag.Focus()
                                'tab_Main.SelectTab(4)
                                'dgv_ChemicalDetails.Focus()
                                'dgv_ChemicalDetails.CurrentCell = dgv_ChemicalDetails.Rows(0).Cells(1)
                                'dgv_ChemicalDetails.CurrentCell.Selected = True
                                'If cbo_Grid_ItemName.Visible And cbo_Grid_ItemName.Enabled Then
                                '    cbo_Grid_ItemName.Focus()
                                'End If

                            Else
                                .CurrentCell = .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex + 1)

                            End If

                        End If

                        Return True

                    ElseIf keyData = Keys.Up Then
                        If .CurrentCell.ColumnIndex <= 1 Then
                            If .CurrentCell.RowIndex = 0 Then
                                tab_Main.SelectTab(2)
                                'dgv_YarnTakenDetails.Focus()
                                'dgv_YarnTakenDetails.CurrentCell = dgv_YarnTakenDetails.Rows(0).Cells(1)
                                'dgv_YarnTakenDetails.CurrentCell.Selected = True
                                'If cbo_Grid_CountName.Visible And cbo_Grid_CountName.Enabled Then
                                '    cbo_Grid_CountName.Focus()
                                'End If

                            Else
                                .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(.Columns.Count - 1)

                            End If

                        Else
                            .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)

                        End If

                        Return True

                    Else
                        Return MyBase.ProcessCmdKey(msg, keyData)

                    End If


                    '----------- CHEMICAL DETAILS

                ElseIf dgv1.Name = dgv_ChemicalDetails.Name Then

                    If keyData = Keys.Enter Or keyData = Keys.Down Then

                        If .CurrentCell.ColumnIndex >= .ColumnCount - 2 Then

                            If .CurrentCell.RowIndex = .RowCount - 1 Then

                                tab_Main.SelectTab(0)
                                tab_WarpingDeatils.SelectTab(0)
                                'If dgv_WarpingDetails_Set1.Rows.Count <= 0 Then dgv_WarpingDetails_Set1.Rows.Add()
                                'dgv_WarpingDetails_Set1.Focus()
                                'dgv_WarpingDetails_Set1.CurrentCell = dgv_WarpingDetails_Set1.Rows(0).Cells(1)
                                'dgv_WarpingDetails_Set1.CurrentCell.Selected = False

                                txt_Remarks.Focus()

                            Else
                                .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)

                            End If

                        Else

                            If .CurrentCell.RowIndex = .RowCount - 1 And .CurrentCell.ColumnIndex >= 1 And Trim(.CurrentRow.Cells(1).Value) = "" Then

                                tab_Main.SelectTab(0)
                                tab_WarpingDeatils.SelectTab(0)
                                'If dgv_WarpingDetails_Set1.Rows.Count <= 0 Then dgv_WarpingDetails_Set1.Rows.Add()
                                'dgv_WarpingDetails_Set1.Focus()
                                'dgv_WarpingDetails_Set1.CurrentCell = dgv_WarpingDetails_Set1.Rows(0).Cells(1)
                                'dgv_WarpingDetails_Set1.CurrentCell.Selected = False

                                txt_Remarks.Focus()

                            Else
                                .CurrentCell = .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex + 1)

                            End If

                        End If

                        Return True

                    ElseIf keyData = Keys.Up Then
                        If .CurrentCell.ColumnIndex <= 1 Then
                            If .CurrentCell.RowIndex = 0 Then
                                If Trim(UCase(cbo_Type.Text)) = "WARPING" Then

                                    tab_Main.SelectTab(1)
                                    tab_SizingDetails.SelectTab(0)
                                Else

                                    tab_Main.SelectTab(3)
                                End If

                            Else
                                .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(.Columns.Count - 2)

                            End If

                        Else
                            .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)


                        End If

                        Return True

                    Else
                        Return MyBase.ProcessCmdKey(msg, keyData)

                    End If

                Else
                    Return MyBase.ProcessCmdKey(msg, keyData)

                End If

            End With

        Else

            Return MyBase.ProcessCmdKey(msg, keyData)

        End If

    End Function



    '    Protected Overrides Function ProcessCmdKey(ByRef msg As System.Windows.Forms.Message, ByVal keyData As System.Windows.Forms.Keys) As Boolean
    '        Dim dgv1 As New DataGridView
    '        Dim i As Integer
    '        Dim Pr_kyData As Keys

    '        If ActiveControl.Name = dgv_WarpingDetails_Set1.Name Or ActiveControl.Name = dgv_WarpingDetails_Set2.Name Or ActiveControl.Name = dgv_WarpingDetails_Set3.Name Or ActiveControl.Name = dgv_SizingDetails_Set1.Name Or ActiveControl.Name = dgv_SizingDetails_Set2.Name Or ActiveControl.Name = dgv_SizingDetails_Set3.Name Or ActiveControl.Name = dgv_YarnTakenDetails.Name Or ActiveControl.Name = dgv_ChemicalDetails.Name Or ActiveControl.Name = dgv_BabyConeDetails.Name Or TypeOf ActiveControl Is DataGridViewTextBoxEditingControl Then

    '            On Error Resume Next

    '            dgv1 = Nothing

    '            If ActiveControl.Name = dgv_WarpingDetails_Set1.Name Then
    '                dgv1 = dgv_WarpingDetails_Set1

    '            ElseIf ActiveControl.Name = dgv_WarpingDetails_Set2.Name Then
    '                dgv1 = dgv_WarpingDetails_Set2

    '            ElseIf ActiveControl.Name = dgv_WarpingDetails_Set3.Name Then
    '                dgv1 = dgv_WarpingDetails_Set3

    '            ElseIf ActiveControl.Name = dgv_SizingDetails_Set1.Name Then
    '                dgv1 = dgv_SizingDetails_Set1

    '            ElseIf ActiveControl.Name = dgv_SizingDetails_Set2.Name Then
    '                dgv1 = dgv_SizingDetails_Set2

    '            ElseIf ActiveControl.Name = dgv_SizingDetails_Set3.Name Then
    '                dgv1 = dgv_SizingDetails_Set3

    '            ElseIf ActiveControl.Name = dgv_YarnTakenDetails.Name Then
    '                dgv1 = dgv_YarnTakenDetails

    '            ElseIf ActiveControl.Name = dgv_BabyConeDetails.Name Then
    '                dgv1 = dgv_BabyConeDetails

    '            ElseIf ActiveControl.Name = dgv_ChemicalDetails.Name Then
    '                dgv1 = dgv_ChemicalDetails

    '            ElseIf dgv_WarpingDetails_Set1.IsCurrentRowDirty = True Then
    '                dgv1 = dgv_WarpingDetails_Set1

    '            ElseIf dgv_WarpingDetails_Set2.IsCurrentRowDirty = True Then
    '                dgv1 = dgv_WarpingDetails_Set2

    '            ElseIf dgv_WarpingDetails_Set3.IsCurrentRowDirty = True Then
    '                dgv1 = dgv_WarpingDetails_Set3

    '            ElseIf dgv_SizingDetails_Set1.IsCurrentRowDirty = True Then
    '                dgv1 = dgv_SizingDetails_Set1

    '            ElseIf dgv_SizingDetails_Set2.IsCurrentRowDirty = True Then
    '                dgv1 = dgv_SizingDetails_Set2

    '            ElseIf dgv_SizingDetails_Set3.IsCurrentRowDirty = True Then
    '                dgv1 = dgv_SizingDetails_Set3

    '            ElseIf dgv_YarnTakenDetails.IsCurrentRowDirty = True Then
    '                dgv1 = dgv_YarnTakenDetails

    '            ElseIf dgv_BabyConeDetails.IsCurrentRowDirty = True Then
    '                dgv1 = dgv_BabyConeDetails

    '            ElseIf dgv_ChemicalDetails.IsCurrentRowDirty = True Then
    '                dgv1 = dgv_ChemicalDetails

    '            ElseIf tab_Main.SelectedIndex = 0 Then
    '                If tab_WarpingDeatils.SelectedIndex = 0 Then
    '                    dgv1 = dgv_WarpingDetails_Set1

    '                ElseIf tab_WarpingDeatils.SelectedIndex = 1 Then
    '                    dgv1 = dgv_WarpingDetails_Set2

    '                ElseIf tab_WarpingDeatils.SelectedIndex = 2 Then
    '                    dgv1 = dgv_WarpingDetails_Set3

    '                End If

    '            ElseIf tab_Main.SelectedIndex = 1 Then

    '                If tab_SizingDetails.SelectedIndex = 0 Then
    '                    dgv1 = dgv_SizingDetails_Set1

    '                ElseIf tab_SizingDetails.SelectedIndex = 1 Then
    '                    dgv1 = dgv_SizingDetails_Set2

    '                ElseIf tab_SizingDetails.SelectedIndex = 2 Then
    '                    dgv1 = dgv_SizingDetails_Set3

    '                End If

    '            ElseIf tab_Main.SelectedIndex = 2 Then
    '                dgv1 = dgv_YarnTakenDetails

    '            ElseIf tab_Main.SelectedIndex = 3 Then
    '                dgv1 = dgv_BabyConeDetails

    '            ElseIf tab_Main.SelectedIndex = 4 Then
    '                dgv1 = dgv_ChemicalDetails

    '            Else
    '                Return MyBase.ProcessCmdKey(msg, keyData)
    '                Exit Function

    '            End If


    '            Pr_kyData = Prev_kyData
    '            Prev_kyData = keyData

    '            With dgv1

    '                '-------------------------- WARPING DETAILS (SET1)

    '                If dgv1.Name = dgv_WarpingDetails_Set1.Name Or dgv1.Name = dgv_WarpingDetails_Set2.Name Or dgv1.Name = dgv_WarpingDetails_Set3.Name Then

    '                    If (keyData = Keys.Enter Or keyData = Keys.Down Or keyData = 131085) Then


    '                        If .CurrentCell.ColumnIndex >= .ColumnCount - 1 Or (.CurrentCell.ColumnIndex >= 3 And .Columns(5).Visible = False) Or Pr_kyData = 131089 Then

    '                            If .CurrentCell.RowIndex = .RowCount - 1 Then

    '                                If .RowCount = 1 Then
    '                                    tab_Main.SelectTab(1)
    '                                    tab_SizingDetails.SelectTab(0)
    '                                    'dgv_SizingDetails_Set1.Focus()
    '                                    'dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
    '                                    'dgv_SizingDetails_Set1.CurrentCell.Selected = True

    '                                Else
    '                                    If dgv1.Name = dgv_WarpingDetails_Set1.Name Then
    '                                        tab_WarpingDeatils.SelectTab(1)
    '                                        'If dgv_WarpingDetails_Set2.Rows.Count <= 0 Then dgv_WarpingDetails_Set2.Rows.Add()
    '                                        'dgv_WarpingDetails_Set2.Focus()
    '                                        'dgv_WarpingDetails_Set2.CurrentCell = dgv_WarpingDetails_Set2.Rows(0).Cells(1)
    '                                        'dgv_WarpingDetails_Set2.CurrentCell.Selected = True

    '                                    ElseIf dgv1.Name = dgv_WarpingDetails_Set2.Name Then
    '                                        tab_WarpingDeatils.SelectTab(2)
    '                                        'If dgv_WarpingDetails_Set3.Rows.Count <= 0 Then dgv_WarpingDetails_Set3.Rows.Add()
    '                                        'dgv_WarpingDetails_Set3.Focus()
    '                                        'dgv_WarpingDetails_Set3.CurrentCell = dgv_WarpingDetails_Set3.Rows(0).Cells(1)
    '                                        'dgv_WarpingDetails_Set3.CurrentCell.Selected = True

    '                                    Else
    '                                        tab_Main.SelectTab(1)
    '                                        tab_SizingDetails.SelectTab(0)
    '                                        'dgv_SizingDetails_Set1.Focus()
    '                                        'dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
    '                                        'dgv_SizingDetails_Set1.CurrentCell.Selected = True

    '                                    End If

    '                                End If

    '                            ElseIf .CurrentCell.ColumnIndex = 3 And Trim(Common_Procedures.settings.CustomerCode) = "1036" Then
    '                                .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)

    '                            ElseIf .CurrentCell.ColumnIndex = 3 And .Columns(10).Visible = True Then
    '                                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(10)

    '                            ElseIf .CurrentCell.ColumnIndex = 3 And Trim(Common_Procedures.settings.CustomerCode) = "1263" Then
    '                                'If .CurrentCell.RowIndex > 0 Then
    '                                .Rows(.CurrentCell.RowIndex + 1).Cells(1).Value = Val(.Rows(.CurrentCell.RowIndex).Cells(1).Value).ToString
    '                                'End If
    '                                .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(2)

    '                            Else
    '                                .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)

    '                            End If

    '                        Else

    '                            If .CurrentCell.RowIndex = .RowCount - 1 And .CurrentCell.ColumnIndex >= 1 And ((.CurrentCell.ColumnIndex <> 1 And Val(.CurrentRow.Cells(1).Value) = 0) Or (.CurrentCell.ColumnIndex = 1 And Val(dgtxt_WarpingDetails_Set1.Text) = 0 And Val(dgtxt_WarpingDetails_Set2.Text) = 0 And Val(dgtxt_WarpingDetails_Set3.Text) = 0)) Then

    '                                If .RowCount = 1 Then
    '                                    tab_Main.SelectTab(1)
    '                                    tab_SizingDetails.SelectTab(0)
    '                                    'dgv_SizingDetails_Set1.Focus()
    '                                    'dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
    '                                    'dgv_SizingDetails_Set1.CurrentCell.Selected = True

    '                                Else
    '                                    If dgv1.Name = dgv_WarpingDetails_Set1.Name Then
    '                                        tab_WarpingDeatils.SelectTab(1)
    '                                        'If dgv_WarpingDetails_Set2.Rows.Count <= 0 Then dgv_WarpingDetails_Set2.Rows.Add()
    '                                        'dgv_WarpingDetails_Set2.Focus()
    '                                        'dgv_WarpingDetails_Set2.CurrentCell = dgv_WarpingDetails_Set2.Rows(0).Cells(1)
    '                                        'dgv_WarpingDetails_Set2.CurrentCell.Selected = True

    '                                    ElseIf dgv1.Name = dgv_WarpingDetails_Set2.Name Then
    '                                        tab_WarpingDeatils.SelectTab(2)
    '                                        'If dgv_WarpingDetails_Set3.Rows.Count <= 0 Then dgv_WarpingDetails_Set3.Rows.Add()
    '                                        'dgv_WarpingDetails_Set3.Focus()
    '                                        'dgv_WarpingDetails_Set3.CurrentCell = dgv_WarpingDetails_Set3.Rows(0).Cells(1)
    '                                        'dgv_WarpingDetails_Set3.CurrentCell.Selected = True

    '                                    Else
    '                                        tab_Main.SelectTab(1)
    '                                        tab_SizingDetails.SelectTab(0)
    '                                        'dgv_SizingDetails_Set1.Focus()
    '                                        'dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
    '                                        'dgv_SizingDetails_Set1.CurrentCell.Selected = True

    '                                    End If

    '                                End If

    '                            Else

    '                                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1263" Then
    '                                    If .CurrentCell.ColumnIndex = 3 Then
    '                                        .CurrentCell = .Rows(.CurrentRow.Index + 1).Cells(1)
    '                                    ElseIf .CurrentRow.Cells(1).Value <> "" And .CurrentCell.Value = "" Then 'Or .CurrentRow.Cells(3).Value = "" Then
    '                                        tab_Main.SelectTab(1)
    '                                        dgv_SizingDetails_Set1.Focus()
    '                                        dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
    '                                        dgv_SizingDetails_Set1.CurrentCell.Selected = True
    '                                    Else
    '                                        .CurrentCell = .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex + 1)
    '                                    End If

    '                                Else
    '                                    If .CurrentRow.Cells(1).Value <> "" And .CurrentCell.Value = "" Then
    '                                        tab_Main.SelectTab(1)
    '                                        dgv_SizingDetails_Set1.Focus()
    '                                        dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
    '                                        dgv_SizingDetails_Set1.CurrentCell.Selected = True
    '                                    Else
    '                                        .CurrentCell = .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex + 1)
    '                                    End If
    '                                End If
    '                            End If

    '                        End If

    '                        Return True

    '                    ElseIf keyData = Keys.Up Then

    '                        If .CurrentCell.ColumnIndex <= 1 Then
    '                            If .CurrentCell.RowIndex = 0 Then

    '                                If dgv1.Name = dgv_WarpingDetails_Set2.Name Then
    '                                    tab_WarpingDeatils.SelectTab(0)
    '                                    'If dgv_WarpingDetails_Set1.Rows.Count <= 0 Then dgv_WarpingDetails_Set1.Rows.Add()
    '                                    'dgv_WarpingDetails_Set1.CurrentCell = dgv_WarpingDetails_Set1.Rows(0).Cells(1)
    '                                    'dgv_WarpingDetails_Set1.Focus()
    '                                    'dgv_WarpingDetails_Set1.CurrentCell.Selected = True

    '                                ElseIf dgv1.Name = dgv_WarpingDetails_Set3.Name Then
    '                                    tab_WarpingDeatils.SelectTab(1)
    '                                    'If dgv_WarpingDetails_Set2.Rows.Count <= 0 Then dgv_WarpingDetails_Set2.Rows.Add()
    '                                    'dgv_WarpingDetails_Set2.Focus()
    '                                    'dgv_WarpingDetails_Set2.CurrentCell = dgv_WarpingDetails_Set2.Rows(0).Cells(1)
    '                                    'dgv_WarpingDetails_Set2.CurrentCell.Selected = True

    '                                Else
    '                                    If cbo_Warping_Machineno.Enabled And cbo_Warping_Machineno.Visible Then cbo_Warping_Machineno.Focus() Else txt_PcsLength.Focus()
    '                                    'If txt_Ends.Enabled And txt_Ends.Visible Then txt_Ends.Focus() Else txt_PcsLength.Focus()

    '                                End If

    '                            Else
    '                                .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(3) ' .Rows(.CurrentCell.RowIndex - 1).Cells(22)

    '                            End If

    '                        Else
    '                            .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)

    '                        End If

    '                        Return True

    '                    Else
    '                        Return MyBase.ProcessCmdKey(msg, keyData)

    '                    End If


    '                    '-------------------------- SIZING DETAILS (SET1)

    '                ElseIf dgv1.Name = dgv_SizingDetails_Set1.Name Or dgv1.Name = dgv_SizingDetails_Set2.Name Or dgv1.Name = dgv_SizingDetails_Set3.Name Then

    '                    If (keyData = Keys.Enter Or keyData = Keys.Down Or keyData = 131085) Then

    '                        If .CurrentCell.ColumnIndex >= .ColumnCount - 3 Or Pr_kyData = 131089 Then
    '                            'If .CurrentCell.ColumnIndex >= .ColumnCount - 1 Or (.CurrentCell.ColumnIndex >= 7 And .Columns(9).Visible = False) Or Pr_kyData = 131089 Then

    'LOOP2:
    '                            If .CurrentCell.RowIndex = .RowCount - 1 Then

    '                                If dgv1.Name = dgv_SizingDetails_Set1.Name Then
    '                                    dgv_SizingDetails_Set1.Rows.Add()


    '                                    'tab_SizingDetails.SelectTab(1)
    '                                    'dgv_SizingDetails_Set2.Focus()
    '                                    'dgv_SizingDetails_Set2.CurrentCell = dgv_SizingDetails_Set2.Rows(0).Cells(1)
    '                                    'dgv_SizingDetails_Set2.CurrentCell.Selected = True

    '                                ElseIf dgv1.Name = dgv_SizingDetails_Set2.Name Then
    '                                    dgv_SizingDetails_Set2.Rows.Add()

    '                                    'tab_SizingDetails.SelectTab(2)
    '                                    'dgv_SizingDetails_Set3.Focus()
    '                                    'dgv_SizingDetails_Set3.CurrentCell = dgv_SizingDetails_Set3.Rows(0).Cells(1)
    '                                    'dgv_SizingDetails_Set3.CurrentCell.Selected = True

    '                                Else
    '                                    dgv_SizingDetails_Set3.Rows.Add()

    '                                    'tab_Main.SelectTab(2)
    '                                    'dgv_YarnTakenDetails.Focus()
    '                                    'dgv_YarnTakenDetails.CurrentCell = dgv_YarnTakenDetails.Rows(0).Cells(1)
    '                                    'dgv_YarnTakenDetails.CurrentCell.Selected = True
    '                                    'If cbo_Grid_CountName.Visible And cbo_Grid_CountName.Enabled Then
    '                                    '    cbo_Grid_CountName.Focus()
    '                                    'End If

    '                                End If

    '                                'ElseIf .CurrentCell.ColumnIndex = 7 Then
    '                                '    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(8)

    '                                '.CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)

    '                            Else
    '                                .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)

    '                            End If

    '                        Else


    '                            If .CurrentCell.RowIndex = .RowCount - 1 And .CurrentCell.ColumnIndex >= 1 And ((.CurrentCell.ColumnIndex <> 1 And Val(.CurrentRow.Cells(1).Value) = 0) Or (.CurrentCell.ColumnIndex = 1 And Val(dgtxt_SizingDetails_Set1.Text) = 0 And Val(dgtxt_SizingDetails_Set2.Text) = 0 And Val(dgtxt_SizingDetails_Set3.Text) = 0)) Then

    '                                For i = 0 To .Columns.Count - 1
    '                                    .Rows(.CurrentCell.RowIndex).Cells(i).Value = ""
    '                                Next

    '                                If .RowCount = 1 Then
    '                                    If Trim(UCase(cbo_Type.Text)) = "WARPING" Then
    '                                        tab_Main.SelectTab(4)
    '                                    Else
    '                                        tab_Main.SelectTab(2)
    '                                    End If

    '                                Else
    '                                    If dgv1.Name = dgv_SizingDetails_Set1.Name Then

    '                                        tab_SizingDetails.SelectTab(1)

    '                                        'dgv_SizingDetails_Set2.Focus()
    '                                        'dgv_SizingDetails_Set2.CurrentCell = dgv_SizingDetails_Set2.Rows(0).Cells(1)
    '                                        'dgv_SizingDetails_Set2.CurrentCell.Selected = True

    '                                    ElseIf dgv1.Name = dgv_SizingDetails_Set2.Name Then
    '                                        tab_SizingDetails.SelectTab(2)
    '                                        'dgv_SizingDetails_Set3.Focus()
    '                                        'dgv_SizingDetails_Set3.CurrentCell = dgv_SizingDetails_Set3.Rows(0).Cells(1)
    '                                        'dgv_SizingDetails_Set3.CurrentCell.Selected = True

    '                                    Else
    '                                        If Trim(UCase(cbo_Type.Text)) = "WARPING" Then
    '                                            tab_Main.SelectTab(4)
    '                                        Else
    '                                            tab_Main.SelectTab(2)
    '                                        End If

    '                                    End If

    '                                End If

    '                                'ElseIf (.CurrentCell.ColumnIndex = 3) Then

    '                                '    If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1097" Then
    '                                '        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(2)
    '                                '    Else
    '                                '        .CurrentCell = .Rows(.CurrentRow.Index).Cells(4)
    '                                '    End If


    '                            ElseIf (.CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 8) And .Columns(9).Visible = False Then
    '                                .CurrentCell = .Rows(.CurrentRow.Index).Cells(30)
    '                                If .CurrentRow.Index = .Rows.Count - 1 And .CurrentRow.Cells(7).Value <> 0 Then
    '                                    .Rows.Add()

    '                                ElseIf (.CurrentCell.ColumnIndex = 7) And .Columns(9).Visible = False Then
    '                                    .CurrentCell = .Rows(.CurrentRow.Index).Cells(13)
    '                                End If

    '                            Else

    '                                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1263" Then
    '                                    If .CurrentCell.ColumnIndex = 3 Then
    '                                        .CurrentCell = .Rows(.CurrentRow.Index).Cells(5)
    '                                    ElseIf .CurrentCell.ColumnIndex = 5 Then
    '                                        If .CurrentCell.RowIndex = .RowCount - 1 Then
    '                                            GoTo LOOP2
    '                                        Else
    '                                            .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(31)
    '                                        End If

    '                                    ElseIf .CurrentCell.ColumnIndex = 2 And .CurrentCell.Value = "" Then
    '                                        tab_Main.SelectTab(2)
    '                                        dgv_YarnTakenDetails.Focus()
    '                                        dgv_YarnTakenDetails.CurrentCell = .Rows(0).Cells(1)
    '                                        cbo_Grid_CountName.Focus()
    '                                        'ElseIf .CurrentCell.RowIndex = 1 And .CurrentCell.Value <> "" Then
    '                                    Else
    '                                        .CurrentCell = .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex + 1)
    '                                    End If

    '                                Else
    '                                    If .CurrentCell.ColumnIndex = 2 And .CurrentCell.Value = "" Then
    '                                        tab_Main.SelectTab(2)
    '                                        dgv_YarnTakenDetails.Focus()
    '                                        dgv_YarnTakenDetails.CurrentCell = .Rows(0).Cells(1)
    '                                        cbo_Grid_CountName.Focus()
    '                                    Else
    '                                        .CurrentCell = .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex + 1)

    '                                    End If
    '                                End If


    '                            End If

    '                        End If

    '                        Return True

    '                    ElseIf keyData = Keys.Up Then

    '                        If .CurrentCell.ColumnIndex <= 1 Then
    '                            If .CurrentCell.RowIndex = 0 Then

    '                                If dgv1.Name = dgv_SizingDetails_Set3.Name Then
    '                                    tab_SizingDetails.SelectTab(1)
    '                                    'dgv_SizingDetails_Set2.Focus()
    '                                    'dgv_SizingDetails_Set2.CurrentCell = dgv_SizingDetails_Set2.Rows(0).Cells(2)
    '                                    'dgv_SizingDetails_Set2.CurrentCell.Selected = True

    '                                ElseIf dgv1.Name = dgv_SizingDetails_Set2.Name Then
    '                                    tab_SizingDetails.SelectTab(0)
    '                                    'dgv_SizingDetails_Set1.Focus()
    '                                    'dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
    '                                    'dgv_SizingDetails_Set1.CurrentCell.Selected = True

    '                                Else
    '                                    If Trim(UCase(cbo_Type.Text)) = "WARPING" Then
    '                                        dtp_Date.Focus()
    '                                    Else

    '                                        tab_Main.SelectTab(0)
    '                                        tab_WarpingDeatils.SelectTab(0)

    '                                    End If

    '                                End If

    '                            Else

    '                                If .Columns(34).Visible = True Then
    '                                    .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(30)
    '                                ElseIf .Columns(31).Visible = True Then
    '                                    .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(31)
    '                                ElseIf .Columns(30).Visible = True Then
    '                                    .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(30)
    '                                ElseIf .Columns(29).Visible = True Then
    '                                    .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(29)
    '                                Else
    '                                    .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(7)
    '                                End If
    '                                '.CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(.Columns.Count - 3)
    '                                ''If Common_Procedures.settings.Statement_Production_Wages_For_Sizing <> 0 Then
    '                                ''    .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(30)
    '                                ''Else
    '                                ''    .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(7)
    '                                ''End If

    '                            End If

    '                        ElseIf .CurrentCell.ColumnIndex = 30 And .Columns(9).Visible = False Then
    '                            .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(7)

    '                        Else
    '                            .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)

    '                        End If

    '                        Return True

    '                    Else
    '                        Return MyBase.ProcessCmdKey(msg, keyData)

    '                    End If

    '                    '----------- YARN TAKEN DETAILS

    '                ElseIf dgv1.Name = dgv_YarnTakenDetails.Name Then

    '                    If keyData = Keys.Enter Or keyData = Keys.Down Then

    '                        If .CurrentCell.ColumnIndex >= .ColumnCount - 1 Then

    '                            If .CurrentCell.RowIndex = .RowCount - 1 Then
    '                                tab_Main.SelectTab(3)
    '                                'dgv_BabyConeDetails.Focus()
    '                                'dgv_BabyConeDetails.CurrentCell = dgv_BabyConeDetails.Rows(0).Cells(1)
    '                                'dgv_BabyConeDetails.CurrentCell.Selected = True

    '                            Else
    '                                .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)

    '                            End If

    '                        Else

    '                            If .CurrentCell.RowIndex = .RowCount - 1 And .CurrentCell.ColumnIndex >= 1 And Trim(.CurrentRow.Cells(1).Value) = "" Then
    '                                tab_Main.SelectTab(3)
    '                                'dgv_BabyConeDetails.Focus()
    '                                'dgv_BabyConeDetails.CurrentCell = dgv_BabyConeDetails.Rows(0).Cells(1)
    '                                'dgv_BabyConeDetails.CurrentCell.Selected = True

    '                            Else
    '                                .CurrentCell = .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex + 1)

    '                            End If

    '                        End If

    '                        Return True

    '                    ElseIf keyData = Keys.Up Then
    '                        If .CurrentCell.ColumnIndex <= 1 Then
    '                            If .CurrentCell.RowIndex = 0 Then
    '                                tab_Main.SelectTab(1)
    '                                tab_SizingDetails.SelectTab(0)
    '                                'dgv_SizingDetails_Set1.Focus()
    '                                'dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
    '                                'dgv_SizingDetails_Set1.CurrentCell.Selected = True

    '                            Else
    '                                .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(.Columns.Count - 1)

    '                            End If

    '                        Else
    '                            .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)

    '                        End If

    '                        Return True

    '                    Else
    '                        Return MyBase.ProcessCmdKey(msg, keyData)

    '                    End If


    '                    '----------- BABY CONE DETAILS

    '                ElseIf dgv1.Name = dgv_BabyConeDetails.Name Then

    '                    If keyData = Keys.Enter Or keyData = Keys.Down Then

    '                        If .CurrentCell.ColumnIndex >= .ColumnCount - 1 Then

    '                            If .CurrentCell.RowIndex = .RowCount - 1 Then
    '                                txt_WgtEmYBag.Focus()

    '                                'tab_Main.SelectTab(4)
    '                                'dgv_ChemicalDetails.Focus()
    '                                'dgv_ChemicalDetails.CurrentCell = dgv_ChemicalDetails.Rows(0).Cells(1)
    '                                'dgv_ChemicalDetails.CurrentCell.Selected = True
    '                                'If cbo_Grid_ItemName.Visible And cbo_Grid_ItemName.Enabled Then
    '                                '    cbo_Grid_ItemName.Focus()
    '                                'End If

    '                            Else
    '                                .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)

    '                            End If

    '                        Else

    '                            If .CurrentCell.RowIndex = .RowCount - 1 And .CurrentCell.ColumnIndex >= 1 And Trim(.CurrentRow.Cells(1).Value) = "" Then
    '                                txt_WgtEmYBag.Focus()
    '                                'tab_Main.SelectTab(4)
    '                                'dgv_ChemicalDetails.Focus()
    '                                'dgv_ChemicalDetails.CurrentCell = dgv_ChemicalDetails.Rows(0).Cells(1)
    '                                'dgv_ChemicalDetails.CurrentCell.Selected = True
    '                                'If cbo_Grid_ItemName.Visible And cbo_Grid_ItemName.Enabled Then
    '                                '    cbo_Grid_ItemName.Focus()
    '                                'End If

    '                            Else
    '                                .CurrentCell = .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex + 1)

    '                            End If

    '                        End If

    '                        Return True

    '                    ElseIf keyData = Keys.Up Then
    '                        If .CurrentCell.ColumnIndex <= 1 Then
    '                            If .CurrentCell.RowIndex = 0 Then
    '                                tab_Main.SelectTab(2)
    '                                'dgv_YarnTakenDetails.Focus()
    '                                'dgv_YarnTakenDetails.CurrentCell = dgv_YarnTakenDetails.Rows(0).Cells(1)
    '                                'dgv_YarnTakenDetails.CurrentCell.Selected = True
    '                                'If cbo_Grid_CountName.Visible And cbo_Grid_CountName.Enabled Then
    '                                '    cbo_Grid_CountName.Focus()
    '                                'End If

    '                            Else
    '                                .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(.Columns.Count - 1)

    '                            End If

    '                        Else
    '                            .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)

    '                        End If

    '                        Return True

    '                    Else
    '                        Return MyBase.ProcessCmdKey(msg, keyData)

    '                    End If


    '                    '----------- CHEMICAL DETAILS

    '                ElseIf dgv1.Name = dgv_ChemicalDetails.Name Then

    '                    If keyData = Keys.Enter Or keyData = Keys.Down Then

    '                        If .CurrentCell.ColumnIndex >= .ColumnCount - 2 Then

    '                            If .CurrentCell.RowIndex = .RowCount - 1 Then

    '                                tab_Main.SelectTab(0)
    '                                tab_WarpingDeatils.SelectTab(0)
    '                                'If dgv_WarpingDetails_Set1.Rows.Count <= 0 Then dgv_WarpingDetails_Set1.Rows.Add()
    '                                'dgv_WarpingDetails_Set1.Focus()
    '                                'dgv_WarpingDetails_Set1.CurrentCell = dgv_WarpingDetails_Set1.Rows(0).Cells(1)
    '                                'dgv_WarpingDetails_Set1.CurrentCell.Selected = False

    '                                txt_Remarks.Focus()

    '                            Else
    '                                .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)

    '                            End If

    '                        Else

    '                            If .CurrentCell.RowIndex = .RowCount - 1 And .CurrentCell.ColumnIndex >= 1 And Trim(.CurrentRow.Cells(1).Value) = "" Then

    '                                tab_Main.SelectTab(0)
    '                                tab_WarpingDeatils.SelectTab(0)
    '                                'If dgv_WarpingDetails_Set1.Rows.Count <= 0 Then dgv_WarpingDetails_Set1.Rows.Add()
    '                                'dgv_WarpingDetails_Set1.Focus()
    '                                'dgv_WarpingDetails_Set1.CurrentCell = dgv_WarpingDetails_Set1.Rows(0).Cells(1)
    '                                'dgv_WarpingDetails_Set1.CurrentCell.Selected = False

    '                                txt_Remarks.Focus()

    '                            Else
    '                                .CurrentCell = .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex + 1)

    '                            End If

    '                        End If

    '                        Return True

    '                    ElseIf keyData = Keys.Up Then
    '                        If .CurrentCell.ColumnIndex <= 1 Then
    '                            If .CurrentCell.RowIndex = 0 Then
    '                                If Trim(UCase(cbo_Type.Text)) = "WARPING" Then

    '                                    tab_Main.SelectTab(1)
    '                                    tab_SizingDetails.SelectTab(0)
    '                                Else

    '                                    tab_Main.SelectTab(3)
    '                                End If

    '                            Else
    '                                .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(.Columns.Count - 2)

    '                            End If

    '                        Else
    '                            .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)


    '                        End If

    '                        Return True

    '                    Else
    '                        Return MyBase.ProcessCmdKey(msg, keyData)

    '                    End If

    '                Else
    '                    Return MyBase.ProcessCmdKey(msg, keyData)

    '                End If

    '            End With

    '        Else

    '            Return MyBase.ProcessCmdKey(msg, keyData)

    '        End If

    '    End Function


    Private Sub cbo_Ledger_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Ledger.GotFocus
        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "Ledger_AlaisHead", "Ledger_DisplayName", "((AccountsGroup_IdNo = 10  or Show_In_All_Entry = 1) and Close_Status = 0 )", "(Ledger_IdNo = 0)")
    End Sub

    Private Sub cbo_Ledger_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ledger.KeyDown
        vcbo_KeyDwnVal = e.KeyValue
        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Ledger, Nothing, Nothing, "Ledger_AlaisHead", "Ledger_DisplayName", "((AccountsGroup_IdNo = 10  or Show_In_All_Entry = 1) and Close_Status = 0 )", "(Ledger_IdNo = 0)")
        If (e.KeyValue = 38 And cbo_Ledger.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
            If cbo_Type.Visible And cbo_Type.Enabled Then
                cbo_Type.Focus()
            ElseIf cbo_SizingMachineNo.Visible And cbo_SizingMachineNo.Enabled Then
                cbo_SizingMachineNo.Focus()
            Else
                txt_Remarks.Focus()
            End If
        End If

        If (e.KeyValue = 40 And cbo_Ledger.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1074" Then '-----MITHUN SIZING MILLS
                If cbo_CountName.Visible And cbo_CountName.Enabled Then
                    cbo_CountName.Focus()
                ElseIf cbo_MillName.Visible And cbo_MillName.Enabled Then
                    cbo_MillName.Focus()
                Else
                    txt_Ends.Focus()
                End If
            Else
                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1263" Then '-----APA TEXTILES INDIA PVT LTD
                    If dtp_Date.Visible And dtp_Date.Enabled Then dtp_Date.Focus() Else cbo_CountName.Focus()
                Else
                    If cbo_Type.Visible And cbo_Type.Enabled Then
                        cbo_Type.Focus()
                    ElseIf cbo_SizingMachineNo.Visible And cbo_SizingMachineNo.Enabled Then
                        cbo_SizingMachineNo.Focus()
                    Else
                        txt_Remarks.Focus()
                    End If
                End If
            End If
        End If

    End Sub

    Private Sub cbo_Ledger_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Ledger.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Ledger, Nothing, "Ledger_AlaisHead", "Ledger_DisplayName", "((AccountsGroup_IdNo = 10  or Show_In_All_Entry = 1) and Close_Status = 0 )", "(Ledger_IdNo = 0)")

        If Asc(e.KeyChar) = 13 Then
            If Trim(cbo_Type.Text) = "WARPING" Then
                If MessageBox.Show("Do you want to select Warping :", "FOR WARPING SELECTION...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question) = DialogResult.Yes Then
                    btn_Selection_Click(sender, e)
                Else
                    dtp_Date.Focus()
                End If
            Else
                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1074" Then '-----MITHUN SIZING MILLS
                    If cbo_CountName.Visible And cbo_CountName.Enabled Then
                        cbo_CountName.Focus()
                    ElseIf cbo_MillName.Visible And cbo_MillName.Enabled Then
                        cbo_MillName.Focus()
                    Else
                        txt_Ends.Focus()
                    End If
                Else
                    dtp_Date.Focus()

                End If
            End If
        End If
    End Sub

    Private Sub cbo_Ledger_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ledger.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Common_Procedures.UR.Ledr_Wea_Siz_Rw_Trans_JbWrk_Creation = Common_Procedures.UR.Ledger_Creation
            Common_Procedures.MDI_LedType = ""
            Dim f As New Ledger_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Ledger.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()
        End If

    End Sub

    Private Sub cbo_CountName_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_CountName.GotFocus
        cbo_CountName.Tag = cbo_CountName.Text
        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "Count_Head", "Count_Name", "", "(Count_IdNo = 0)")
    End Sub

    Private Sub cbo_CountName_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_CountName.KeyDown
        vcbo_KeyDwnVal = e.KeyValue
        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_CountName, dtp_Date, cbo_MillName, "Count_Head", "Count_Name", "", "(Count_IdNo = 0)")
    End Sub

    Private Sub cbo_CountName_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_CountName.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_CountName, cbo_MillName, "Count_Head", "Count_Name", "", "(Count_IdNo = 0)")
    End Sub

    Private Sub cbo_CountName_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_CountName.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Sizing_Count_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_CountName.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_MillName_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_MillName.GotFocus
        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "Mill_Head", "Mill_Name", "", "(Mill_IdNo = 0)")
    End Sub

    Private Sub cbo_MillName_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_MillName.KeyDown
        vcbo_KeyDwnVal = e.KeyValue
        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_MillName, cbo_CountName, txt_Ends, "Mill_Head", "Mill_Name", "", "(Mill_IdNo = 0)")
    End Sub

    Private Sub cbo_MillName_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_MillName.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_MillName, txt_Ends, "Mill_Head", "Mill_Name", "", "(Mill_IdNo = 0)")
    End Sub

    Private Sub cbo_MillName_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_MillName.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Mill_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_MillName.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_BeamWidth_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_BeamWidth.GotFocus
        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "Beam_Width_Head", "Beam_Width_Name", "", "(Beam_Width_IdNo = 0)")
    End Sub

    Private Sub cbo_Beamwidth_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_BeamWidth.KeyDown
        vcbo_KeyDwnVal = e.KeyValue
        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_BeamWidth, txt_TapeLength, txt_PcsLength, "Beam_Width_Head", "Beam_Width_Name", "", "(Beam_Width_IdNo = 0)")
    End Sub

    Private Sub cbo_BeamWidth_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_BeamWidth.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_BeamWidth, txt_PcsLength, "Beam_Width_Head", "Beam_Width_Name", "", "(Beam_Width_IdNo = 0)")
    End Sub

    Private Sub cbo_BeamWidth_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_BeamWidth.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Beam_Width_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_BeamWidth.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub dgv_WarpingDetails_Set1_CellEndEdit(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_WarpingDetails_Set1.CellEndEdit
        dgv_WarpingDetails_Set1_CellLeave(sender, e)
    End Sub

    Private Sub dgv_WarpingDetails_Set1_CellEnter(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_WarpingDetails_Set1.CellEnter
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim rect As Rectangle
        Dim Wmtr() As String
        Dim Mtrs As Single = 0

        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        With dgv_WarpingDetails_Set1

            If Val(.CurrentRow.Cells(0).Value) = 0 Then
                .CurrentRow.Cells(0).Value = .CurrentRow.Index + 1
            End If


            If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1028" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1220" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1263" Then '---- Chinnu Sizing (Palladam)
                If e.RowIndex > 0 And e.ColumnIndex = 1 Then
                    If Common_Procedures.settings.CustomerCode = "1282" Then
                        If Val(.CurrentRow.Cells(1).Value) = 0 Then
                            .CurrentRow.Cells(1).Value = .Rows(e.RowIndex - 1).Cells(1).Value
                        End If
                    Else
                        If Val(.CurrentRow.Cells(1).Value) = 0 And e.RowIndex = .RowCount - 1 Then
                            .CurrentRow.Cells(1).Value = .Rows(e.RowIndex - 1).Cells(1).Value
                        End If
                    End If
                End If
            End If



            If e.ColumnIndex = 5 Then

                If e.RowIndex > 0 Then
                    If Trim(.CurrentRow.Cells(e.ColumnIndex).Value) = "" Then
                        .CurrentRow.Cells(e.ColumnIndex).Value = .Rows(e.RowIndex - 1).Cells(e.ColumnIndex).Value
                    End If
                End If

                If cbo_Ends1_Shift.Visible = False Or Val(cbo_Ends1_Shift.Tag) <> e.RowIndex Then

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Ends1_Shift.Left = .Left + rect.Left
                    cbo_Ends1_Shift.Top = .Top + rect.Top

                    cbo_Ends1_Shift.Width = rect.Width
                    cbo_Ends1_Shift.Height = rect.Height
                    cbo_Ends1_Shift.Text = .CurrentCell.Value

                    cbo_Ends1_Shift.Tag = Val(e.RowIndex)
                    cbo_Ends1_Shift.Visible = True

                    cbo_Ends1_Shift.BringToFront()
                    cbo_Ends1_Shift.Focus()

                End If

            Else
                cbo_Ends1_Shift.Visible = False
                cbo_Ends1_Shift.Tag = -1
                cbo_Ends1_Shift.Text = ""
            End If
            If e.ColumnIndex = 6 Then

                If cbo_Grid_BeamNo.Visible = False Or Val(cbo_Grid_BeamNo.Tag) <> e.RowIndex Then

                    cbo_Grid_BeamNo.Tag = -1
                    'Da = New SqlClient.SqlDataAdapter("select BeamNo_Name from BeamNo_Head order by BeamNo_Name", Con)
                    'Dt1 = New DataTable
                    'Da.Fill(Dt5)
                    'cbo_Grid_BeamNo.DataSource = Dt5
                    'cbo_Grid_BeamNo.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Grid_BeamNo.Left = .Left + rect.Left
                    cbo_Grid_BeamNo.Top = .Top + rect.Top

                    cbo_Grid_BeamNo.Width = rect.Width
                    cbo_Grid_BeamNo.Height = rect.Height
                    cbo_Grid_BeamNo.Text = .CurrentCell.Value

                    cbo_Grid_BeamNo.Tag = Val(e.RowIndex)
                    cbo_Grid_BeamNo.Visible = True

                    cbo_Grid_BeamNo.BringToFront()
                    cbo_Grid_BeamNo.Focus()


                End If


            Else
                cbo_Grid_BeamNo.Visible = False

            End If



            If e.ColumnIndex = 10 Then

                If e.RowIndex > 0 Then
                    If Trim(.CurrentRow.Cells(e.ColumnIndex).Value) = "" Then
                        .CurrentRow.Cells(e.ColumnIndex).Value = .Rows(e.RowIndex - 1).Cells(e.ColumnIndex).Value
                    End If
                End If

                If cbo_Grid_FrontWarper_1.Visible = False Or Val(cbo_Grid_FrontWarper_1.Tag) <> e.RowIndex Then

                    cbo_Grid_FrontWarper_1.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Grid_FrontWarper_1.DataSource = Dt1
                    cbo_Grid_FrontWarper_1.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Grid_FrontWarper_1.Left = .Left + rect.Left
                    cbo_Grid_FrontWarper_1.Top = .Top + rect.Top

                    cbo_Grid_FrontWarper_1.Width = rect.Width
                    cbo_Grid_FrontWarper_1.Height = rect.Height
                    cbo_Grid_FrontWarper_1.Text = .CurrentCell.Value

                    cbo_Grid_FrontWarper_1.Tag = Val(e.RowIndex)
                    cbo_Grid_FrontWarper_1.Visible = True

                    cbo_Grid_FrontWarper_1.BringToFront()
                    cbo_Grid_FrontWarper_1.Focus()


                End If

            Else
                cbo_Grid_FrontWarper_1.Visible = False
                cbo_Grid_FrontWarper_1.Tag = -1
                cbo_Grid_FrontWarper_1.Text = ""

            End If

            If e.ColumnIndex = 12 Then

                If e.RowIndex > 0 Then
                    If Trim(.CurrentRow.Cells(e.ColumnIndex).Value) = "" Then
                        .CurrentRow.Cells(e.ColumnIndex).Value = .Rows(e.RowIndex - 1).Cells(e.ColumnIndex).Value
                    End If
                End If

                If cbo_Grid_BackWarper1.Visible = False Or Val(cbo_Grid_BackWarper1.Tag) <> e.RowIndex Then

                    cbo_Grid_BackWarper1.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Grid_BackWarper1.DataSource = Dt1
                    cbo_Grid_BackWarper1.DisplayMember = "Employee_name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Grid_BackWarper1.Left = .Left + rect.Left
                    cbo_Grid_BackWarper1.Top = .Top + rect.Top

                    cbo_Grid_BackWarper1.Width = rect.Width
                    cbo_Grid_BackWarper1.Height = rect.Height
                    cbo_Grid_BackWarper1.Text = .CurrentCell.Value

                    cbo_Grid_BackWarper1.Tag = Val(e.RowIndex)
                    cbo_Grid_BackWarper1.Visible = True

                    cbo_Grid_BackWarper1.BringToFront()
                    cbo_Grid_BackWarper1.Focus()



                End If

            Else
                cbo_Grid_BackWarper1.Visible = False
                cbo_Grid_BackWarper1.Tag = -1
                cbo_Grid_BackWarper1.Text = ""

            End If


            If .CurrentCell.ColumnIndex = 14 Then

                If e.RowIndex > 0 Then
                    If Trim(.CurrentRow.Cells(e.ColumnIndex).Value) = "" Then
                        .CurrentRow.Cells(e.ColumnIndex).Value = .Rows(e.RowIndex - 1).Cells(e.ColumnIndex).Value
                    End If
                End If

                If cbo_Grid_Helper1.Visible = False Or Val(cbo_Grid_Helper1.Tag) <> e.RowIndex Then

                    cbo_Grid_Helper1.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Grid_Helper1.DataSource = Dt1
                    cbo_Grid_Helper1.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Grid_Helper1.Left = .Left + rect.Left
                    cbo_Grid_Helper1.Top = .Top + rect.Top

                    cbo_Grid_Helper1.Width = rect.Width
                    cbo_Grid_Helper1.Height = rect.Height
                    cbo_Grid_Helper1.Text = .CurrentCell.Value

                    cbo_Grid_Helper1.Tag = Val(e.RowIndex)
                    cbo_Grid_Helper1.Visible = True

                    cbo_Grid_Helper1.BringToFront()
                    cbo_Grid_Helper1.Focus()

                End If

            Else
                cbo_Grid_Helper1.Visible = False
                cbo_Grid_Helper1.Tag = -1
                cbo_Grid_Helper1.Text = ""

            End If

            If e.ColumnIndex = 16 Then

                If e.RowIndex > 0 Then
                    If Trim(.CurrentRow.Cells(e.ColumnIndex).Value) = "" Then
                        .CurrentRow.Cells(e.ColumnIndex).Value = .Rows(e.RowIndex - 1).Cells(e.ColumnIndex).Value
                    End If
                End If

                If cbo_Grid_FrontWarper2.Visible = False Or Val(cbo_Grid_FrontWarper2.Tag) <> e.RowIndex Then

                    cbo_Grid_FrontWarper2.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Grid_FrontWarper2.DataSource = Dt1
                    cbo_Grid_FrontWarper2.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Grid_FrontWarper2.Left = .Left + rect.Left
                    cbo_Grid_FrontWarper2.Top = .Top + rect.Top

                    cbo_Grid_FrontWarper2.Width = rect.Width
                    cbo_Grid_FrontWarper2.Height = rect.Height
                    cbo_Grid_FrontWarper2.Text = .CurrentCell.Value

                    cbo_Grid_FrontWarper2.Tag = Val(e.RowIndex)
                    cbo_Grid_FrontWarper2.Visible = True

                    cbo_Grid_FrontWarper2.BringToFront()
                    cbo_Grid_FrontWarper2.Focus()


                End If

            Else
                cbo_Grid_FrontWarper2.Visible = False
                cbo_Grid_FrontWarper2.Tag = -1
                cbo_Grid_FrontWarper2.Text = ""

            End If

            If e.ColumnIndex = 18 Then

                If e.RowIndex > 0 Then
                    If Trim(.CurrentRow.Cells(e.ColumnIndex).Value) = "" Then
                        .CurrentRow.Cells(e.ColumnIndex).Value = .Rows(e.RowIndex - 1).Cells(e.ColumnIndex).Value
                    End If
                End If

                If cbo_Grid_BackWarper2.Visible = False Or Val(cbo_Grid_BackWarper2.Tag) <> e.RowIndex Then

                    cbo_Grid_BackWarper2.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Grid_BackWarper2.DataSource = Dt1
                    cbo_Grid_BackWarper2.DisplayMember = "Employee_name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Grid_BackWarper2.Left = .Left + rect.Left
                    cbo_Grid_BackWarper2.Top = .Top + rect.Top

                    cbo_Grid_BackWarper2.Width = rect.Width
                    cbo_Grid_BackWarper2.Height = rect.Height
                    cbo_Grid_BackWarper2.Text = .CurrentCell.Value

                    cbo_Grid_BackWarper2.Tag = Val(e.RowIndex)
                    cbo_Grid_BackWarper2.Visible = True

                    cbo_Grid_BackWarper2.BringToFront()
                    cbo_Grid_BackWarper2.Focus()



                End If

            Else
                cbo_Grid_BackWarper2.Visible = False
                cbo_Grid_BackWarper2.Tag = -1
                cbo_Grid_BackWarper2.Text = ""

            End If

            If .CurrentCell.ColumnIndex = 20 Then

                If e.RowIndex > 0 Then
                    If Trim(.CurrentRow.Cells(e.ColumnIndex).Value) = "" Then
                        .CurrentRow.Cells(e.ColumnIndex).Value = .Rows(e.RowIndex - 1).Cells(e.ColumnIndex).Value
                    End If
                End If

                If cbo_Grid_Helper2.Visible = False Or Val(cbo_Grid_Helper2.Tag) <> e.RowIndex Then

                    cbo_Grid_Helper2.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Grid_Helper2.DataSource = Dt1
                    cbo_Grid_Helper2.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Grid_Helper2.Left = .Left + rect.Left
                    cbo_Grid_Helper2.Top = .Top + rect.Top

                    cbo_Grid_Helper2.Width = rect.Width
                    cbo_Grid_Helper2.Height = rect.Height
                    cbo_Grid_Helper2.Text = .CurrentCell.Value

                    cbo_Grid_Helper2.Tag = Val(e.RowIndex)
                    cbo_Grid_Helper2.Visible = True

                    cbo_Grid_Helper2.BringToFront()
                    cbo_Grid_Helper2.Focus()

                End If

            Else
                cbo_Grid_Helper2.Visible = False
                cbo_Grid_Helper2.Tag = -1
                cbo_Grid_Helper2.Text = ""

            End If

            If .CurrentCell.ColumnIndex = 11 Or .CurrentCell.ColumnIndex = 13 Then

                If Trim(.CurrentRow.Cells(.CurrentCell.ColumnIndex - 1).Value) <> "" And Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value) = 0 Then
                    Erase Wmtr
                    If Trim(txt_WarpMeters.Text) <> "" Then
                        Wmtr = Split(Trim(txt_WarpMeters.Text), ",")
                        If UBound(Wmtr) >= 0 Then
                            .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = Val(Wmtr(0))
                        End If
                    End If
                End If

            End If

            If .CurrentCell.ColumnIndex = 15 Then

                If Trim(.CurrentRow.Cells(.CurrentCell.ColumnIndex - 1).Value) <> "" And Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value) = 0 Then

                    Erase Wmtr

                    If Trim(txt_WarpMeters.Text) <> "" Then
                        Wmtr = Split(Trim(txt_WarpMeters.Text), ",")

                        If UBound(Wmtr) >= 0 Then
                            Mtrs = Format(Val(Wmtr(0)) * 2 / 3, "#########0.00")

                            .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = Val(Wmtr(0))

                            If Val(.CurrentRow.Cells(11).Value) = Val(Wmtr(0)) And Val(.CurrentRow.Cells(13).Value) = Val(Wmtr(0)) Then
                                .CurrentRow.Cells(11).Value = Mtrs
                                .CurrentRow.Cells(13).Value = Mtrs
                                .CurrentRow.Cells(15).Value = Mtrs
                            End If

                        End If

                    End If

                End If

            End If

            If .CurrentCell.ColumnIndex = 17 Then

                If Trim(.CurrentRow.Cells(.CurrentCell.ColumnIndex - 1).Value) <> "" And Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value) = 0 Then
                    Erase Wmtr
                    If Trim(txt_WarpMeters.Text) <> "" Then
                        Wmtr = Split(Trim(txt_WarpMeters.Text), ",")
                        If UBound(Wmtr) >= 0 Then

                            If Val(.CurrentRow.Cells(15).Value) = 0 Then
                                If Val(.CurrentRow.Cells(11).Value) = Val(Wmtr(0)) Then
                                    .CurrentRow.Cells(11).Value = Val(Format(Val(Wmtr(0)) / 2, "#########0.00"))
                                    .CurrentRow.Cells(17).Value = Val(Format(Val(Wmtr(0)) / 2, "#########0.00"))
                                End If

                            Else
                                Mtrs = Format(Val(Wmtr(0)) * 2 / 3, "#########0.00")
                                If Val(.CurrentRow.Cells(11).Value) = Val(Mtrs) And Val(.CurrentRow.Cells(15).Value) = Val(Mtrs) Then
                                    .CurrentRow.Cells(11).Value = Val(Format(Mtrs / 2, "#########0.00"))
                                    .CurrentRow.Cells(17).Value = Val(Format(Mtrs / 2, "#########0.00"))
                                End If

                            End If

                        End If

                    End If

                End If

            End If

            If .CurrentCell.ColumnIndex = 19 Then

                If Trim(.CurrentRow.Cells(.CurrentCell.ColumnIndex - 1).Value) <> "" And Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value) = 0 Then
                    Erase Wmtr
                    If Trim(txt_WarpMeters.Text) <> "" Then
                        Wmtr = Split(Trim(txt_WarpMeters.Text), ",")
                        If UBound(Wmtr) >= 0 Then

                            If Val(.CurrentRow.Cells(15).Value) = 0 Then
                                If Val(.CurrentRow.Cells(13).Value) = Val(Wmtr(0)) Then
                                    .CurrentRow.Cells(13).Value = Val(Format(Val(Wmtr(0)) / 2, "#########0.00"))
                                    .CurrentRow.Cells(19).Value = Val(Format(Val(Wmtr(0)) / 2, "#########0.00"))
                                End If

                            Else
                                Mtrs = Format(Val(Wmtr(0)) * 2 / 3, "#########0.00")
                                If Val(.CurrentRow.Cells(13).Value) = Val(Mtrs) And Val(.CurrentRow.Cells(15).Value) = Val(Mtrs) Then
                                    .CurrentRow.Cells(13).Value = Val(Format(Mtrs / 2, "#########0.00"))
                                    .CurrentRow.Cells(19).Value = Val(Format(Mtrs / 2, "#########0.00"))
                                End If

                            End If

                        End If

                    End If

                End If

            End If

            If .CurrentCell.ColumnIndex = 21 Then

                If Trim(.CurrentRow.Cells(.CurrentCell.ColumnIndex - 1).Value) <> "" And Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value) = 0 Then

                    Erase Wmtr

                    If Trim(txt_WarpMeters.Text) <> "" Then

                        Wmtr = Split(Trim(txt_WarpMeters.Text), ",")

                        If UBound(Wmtr) >= 0 Then

                            Mtrs = Format(Val(Wmtr(0)) * 2 / 3, "##########0.00")

                            If Val(.CurrentRow.Cells(11).Value) = Val(Mtrs / 2) And Val(.CurrentRow.Cells(13).Value) = Val(Mtrs / 2) And Val(.CurrentRow.Cells(15).Value) = Val(Mtrs) And Val(.CurrentRow.Cells(17).Value) = Val(Mtrs / 2) And Val(.CurrentRow.Cells(19).Value) = Val(Mtrs / 2) Then
                                Mtrs = Format(Val(Wmtr(0)) * 2 / 6, "#########0.00")
                                .CurrentRow.Cells(11).Value = Val(Mtrs)
                                .CurrentRow.Cells(13).Value = Val(Mtrs)
                                .CurrentRow.Cells(15).Value = Val(Mtrs)
                                .CurrentRow.Cells(17).Value = Val(Mtrs)
                                .CurrentRow.Cells(19).Value = Val(Mtrs)
                                .CurrentRow.Cells(21).Value = Val(Mtrs)
                            End If

                        End If

                    End If

                End If

            End If

        End With

    End Sub

    Private Sub dgv_WarpingDetails_Set1_CellLeave(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_WarpingDetails_Set1.CellLeave
        Dim Tm As String = ""

        Try

            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            With dgv_WarpingDetails_Set1
                If .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 4 Then
                    If Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value) <> 0 Then
                        .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = Format(Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value), "#########0.0")
                    Else
                        .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = ""
                    End If
                End If

                If .CurrentCell.ColumnIndex = 11 Or .CurrentCell.ColumnIndex = 13 Or .CurrentCell.ColumnIndex = 15 Or .CurrentCell.ColumnIndex = 17 Or .CurrentCell.ColumnIndex = 19 Or .CurrentCell.ColumnIndex = 21 Then
                    If Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value) <> 0 Then
                        .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = Format(Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value), "#########0.00")
                    Else
                        .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = ""
                    End If
                End If

                If .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 8 Then
                    Tm = Replace(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value, ".", ":")
                    If Trim(Tm) <> "" Then
                        If Trim(Tm) = Trim(Val(Tm)) Then
                            Tm = Trim(Tm) & ":00"
                        End If
                        If IsDate(Tm) = True Then
                            .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = Format(Convert.ToDateTime(Tm), "hh:mm tt").ToString
                        End If
                    End If
                End If

            End With

        Catch ex As Exception
            '-----

        End Try

    End Sub

    Private Sub dgv_WarpingDetails_Set1_CellValueChanged(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_WarpingDetails_Set1.CellValueChanged
        Dim TotMins As Long = 0
        Dim h As Long = 0
        Dim m As Long = 0
        Dim TmFrm As String = ""
        Dim TmTo As String = ""
        Dim vYrds_Mtrs_Value As String = 0
        Dim Ends1_wgt As String = 0
        Dim Ends2_wgt As String = 0
        Dim Ends3_wgt As String = 0
        Dim calc_Value As Single = 0

        Try

            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If IsNothing(dgv_WarpingDetails_Set1.CurrentCell) Then Exit Sub

            With dgv_WarpingDetails_Set1

                If .Visible Then

                    If .Rows.Count > 0 Then

                        If Common_Procedures.settings.CustomerCode <> "1282" Then

                            If .CurrentCell.ColumnIndex = 1 Or .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 23 Or .CurrentCell.ColumnIndex = 24 Or .CurrentCell.ColumnIndex = 25 Or .CurrentCell.ColumnIndex = 26 Or .CurrentCell.ColumnIndex = 27 Then

                                If .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Then
                                    .CurrentRow.Cells(4).Value = Format(Val(.CurrentRow.Cells(2).Value) - Val(.CurrentRow.Cells(3).Value), "#########0.0")
                                End If
                                TotalWarping_Calculation()

                            End If

                        End If

                        If Common_Procedures.settings.CustomerCode = "1282" Then
                            If .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 2 Then
                                '2 gwt 	3 twt 		4 nwt 	23 gwt		24 nwt
                                'If Val(.CurrentRow.Cells(3).Value) <> 0 Then
                                .CurrentRow.Cells(2).Value = Format(Val(.CurrentRow.Cells(4).Value) + Val(.CurrentRow.Cells(3).Value), "#########0.0")
                                .CurrentRow.Cells(4).Value = Format(Val(.CurrentRow.Cells(2).Value) - Val(.CurrentRow.Cells(3).Value), "#########0.0")
                                'End If

                                TotalWarping_Calculation()
                                'End If
                            End If

                        End If

                        'If (.CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 6 Or .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 8 Or .CurrentCell.ColumnIndex = 11 Or .CurrentCell.ColumnIndex = 13 Or .CurrentCell.ColumnIndex = 15 Or .CurrentCell.ColumnIndex = 17 Or .CurrentCell.ColumnIndex = 19 Or .CurrentCell.ColumnIndex = 21 Or .CurrentCell.ColumnIndex = 23) And Val(.CurrentCell.Value) <> 0 Then
                        If (.CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 6 Or .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 8 Or .CurrentCell.ColumnIndex = 11 Or .CurrentCell.ColumnIndex = 13 Or .CurrentCell.ColumnIndex = 15 Or .CurrentCell.ColumnIndex = 17 Or .CurrentCell.ColumnIndex = 19 Or .CurrentCell.ColumnIndex = 21 Or .CurrentCell.ColumnIndex = 23) And Val(.CurrentCell.Value) <> 0 Then


                            If Common_Procedures.settings.CustomerCode <> "1282" And Common_Procedures.settings.CustomerCode <> "1378" Then
                                If .CurrentRow.Index = .Rows.Count - 1 Then
                                    .Rows.Add()
                                End If
                            End If
                        End If


                        If .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 8 Then

                            TmFrm = .CurrentRow.Cells(7).Value
                            TmTo = .CurrentRow.Cells(8).Value

                            If Trim(TmFrm) <> "" And Trim(TmTo) <> "" Then

                                If IsDate(TmFrm) = True And IsDate(TmTo) = True Then
                                    TotMins = DateDiff("n", TmFrm, TmTo)

                                    h = Int(TotMins / 60)
                                    m = TotMins - (h * 60)

                                    .CurrentRow.Cells(9).Value = Format(h, "00") & ":" & Format(m, "00")

                                End If

                            End If

                        End If

                        'If .CurrentCell.ColumnIndex = 1 Or .CurrentCell.ColumnIndex = 4 Or .CurrentCell.ColumnIndex = 23 Or .CurrentCell.ColumnIndex = 24 Then

                        '    If Trim(cbo_Meters_Yards.Text) = "YARDS" Then
                        '        vYrds_Mtrs_Value = 1848
                        '    Else
                        '        vYrds_Mtrs_Value = 1689.81
                        '    End If

                        '    Ends1_wgt = 0
                        '    Ends2_wgt = 0
                        '    Ends3_wgt = 0

                        '    If Val(.CurrentRow.Cells(23).Value) <> 0 Then
                        '        Ends2_wgt = Format(((Val(.CurrentRow.Cells(23).Value) * Val(txt_WarpMeters.Text) / Val(vYrds_Mtrs_Value)) / Val(lbl_BeamCount.Text)), "#########0.000")
                        '    End If
                        '    If Val(.CurrentRow.Cells(24).Value) <> 0 Then
                        '        Ends3_wgt = Format(((Val(.CurrentRow.Cells(24).Value) * Val(txt_WarpMeters.Text) / Val(vYrds_Mtrs_Value)) / Val(lbl_BeamCount.Text)), "#########0.000")
                        '    End If

                        '    Ends1_wgt = Format(Val(.CurrentRow.Cells(4).Value) - Val(Ends2_wgt) - Val(Ends3_wgt), "##########0.000")

                        '    .CurrentRow.Cells(25).Value = Format(Val(Ends1_wgt), "##########0.000")
                        '    .CurrentRow.Cells(26).Value = Format(Val(Ends2_wgt), "##########0.000")
                        '    .CurrentRow.Cells(27).Value = Format(Val(Ends3_wgt), "##########0.000")

                        'End If

                    End If

                End If

            End With

        Catch ex As Exception
            '-----
            Dim s As String = ex.Message.ToString

        End Try
    End Sub

    Private Sub dgv_WarpingDetails_Set1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgv_WarpingDetails_Set1.KeyUp
        Dim i As Integer = 0

        Try
            If e.Control = True And UCase(Chr(e.KeyCode)) = "D" Then

                With dgv_WarpingDetails_Set1

                    If Trim(txt_InvoiceCode.Text) = "" Then

                        If .Rows.Count > 0 Then

                            If .CurrentRow.Index = .RowCount - 1 Then
                                For i = 1 To .Columns.Count - 1
                                    .Rows(.CurrentRow.Index).Cells(i).Value = ""
                                Next

                            Else
                                .Rows.RemoveAt(.CurrentRow.Index)

                            End If

                            TotalWarping_Calculation()

                        End If

                    Else
                        MessageBox.Show("Invoice Prepared", "DOES NOT DELETE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                        Exit Sub

                    End If

                End With

            End If

        Catch ex As Exception
            '-------

        End Try

    End Sub

    Private Sub dgv_WarpingDetails_Set1_RowsAdded(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewRowsAddedEventArgs) Handles dgv_WarpingDetails_Set1.RowsAdded
        Dim n As Integer = 0

        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If IsNothing(dgv_WarpingDetails_Set1.CurrentCell) Then Exit Sub
            With dgv_WarpingDetails_Set1
                n = .RowCount
                .Rows(n - 1).Cells(0).Value = Val(n)
            End With

        Catch ex As Exception
            '-----

        End Try
    End Sub

    Private Sub dgv_WarpingDetails_Set2_CellEndEdit(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_WarpingDetails_Set2.CellEndEdit
        dgv_WarpingDetails_Set2_CellLeave(sender, e)
    End Sub

    Private Sub dgv_WarpingDetails_Set2_CellEnter(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_WarpingDetails_Set2.CellEnter
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim rect As Rectangle
        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        With dgv_WarpingDetails_Set2

            If Val(.CurrentRow.Cells(0).Value) = 0 Then
                .CurrentRow.Cells(0).Value = .CurrentRow.Index + 1
            End If

            If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1028" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1220" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1263" Then '---- Chinnu Sizing (Palladam)
                If e.RowIndex > 0 And e.ColumnIndex = 1 Then
                    If Val(.CurrentRow.Cells(1).Value) = 0 And e.RowIndex = .RowCount - 1 Then
                        .CurrentRow.Cells(1).Value = .Rows(e.RowIndex - 1).Cells(1).Value
                    End If
                End If
            End If

            If e.ColumnIndex = 5 Then

                If cbo_Ends2_Shift.Visible = False Or Val(cbo_Ends2_Shift.Tag) <> e.RowIndex Then

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Ends2_Shift.Left = .Left + rect.Left
                    cbo_Ends2_Shift.Top = .Top + rect.Top

                    cbo_Ends2_Shift.Width = rect.Width
                    cbo_Ends2_Shift.Height = rect.Height
                    cbo_Ends2_Shift.Text = .CurrentCell.Value

                    cbo_Ends2_Shift.Tag = Val(e.RowIndex)
                    cbo_Ends2_Shift.Visible = True

                    cbo_Ends2_Shift.BringToFront()
                    cbo_Ends2_Shift.Focus()

                End If

            Else
                cbo_Ends2_Shift.Visible = False
                cbo_Ends2_Shift.Tag = -1
                cbo_Ends2_Shift.Text = ""
            End If
            If e.ColumnIndex = 10 Then

                If cbo_Ends2_FrontWarper1.Visible = False Or Val(cbo_Ends2_FrontWarper1.Tag) <> e.RowIndex Then

                    cbo_Ends2_FrontWarper1.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Ends2_FrontWarper1.DataSource = Dt1
                    cbo_Ends2_FrontWarper1.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Ends2_FrontWarper1.Left = .Left + rect.Left
                    cbo_Ends2_FrontWarper1.Top = .Top + rect.Top

                    cbo_Ends2_FrontWarper1.Width = rect.Width
                    cbo_Ends2_FrontWarper1.Height = rect.Height
                    cbo_Ends2_FrontWarper1.Text = .CurrentCell.Value

                    cbo_Ends2_FrontWarper1.Tag = Val(e.RowIndex)
                    cbo_Ends2_FrontWarper1.Visible = True

                    cbo_Ends2_FrontWarper1.BringToFront()
                    cbo_Ends2_FrontWarper1.Focus()


                End If

            Else
                cbo_Ends2_FrontWarper1.Visible = False
                cbo_Ends2_FrontWarper1.Tag = -1
                cbo_Ends2_FrontWarper1.Text = ""

            End If

            If e.ColumnIndex = 12 Then

                If cbo_Ends2_BackWarper1.Visible = False Or Val(cbo_Ends2_BackWarper1.Tag) <> e.RowIndex Then

                    cbo_Ends2_BackWarper1.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Ends2_BackWarper1.DataSource = Dt1
                    cbo_Ends2_BackWarper1.DisplayMember = "Employee_name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Ends2_BackWarper1.Left = .Left + rect.Left
                    cbo_Ends2_BackWarper1.Top = .Top + rect.Top

                    cbo_Ends2_BackWarper1.Width = rect.Width
                    cbo_Ends2_BackWarper1.Height = rect.Height
                    cbo_Ends2_BackWarper1.Text = .CurrentCell.Value

                    cbo_Ends2_BackWarper1.Tag = Val(e.RowIndex)
                    cbo_Ends2_BackWarper1.Visible = True

                    cbo_Ends2_BackWarper1.BringToFront()
                    cbo_Ends2_BackWarper1.Focus()



                End If

            Else
                cbo_Ends2_BackWarper1.Visible = False
                cbo_Ends2_BackWarper1.Tag = -1
                cbo_Ends2_BackWarper1.Text = ""

            End If


            If .CurrentCell.ColumnIndex = 14 Then

                If cbo_Ends2_Helper1.Visible = False Or Val(cbo_Ends2_Helper1.Tag) <> e.RowIndex Then

                    cbo_Ends2_Helper1.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Ends2_Helper1.DataSource = Dt1
                    cbo_Ends2_Helper1.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Ends2_Helper1.Left = .Left + rect.Left
                    cbo_Ends2_Helper1.Top = .Top + rect.Top

                    cbo_Ends2_Helper1.Width = rect.Width
                    cbo_Ends2_Helper1.Height = rect.Height
                    cbo_Ends2_Helper1.Text = .CurrentCell.Value

                    cbo_Ends2_Helper1.Tag = Val(e.RowIndex)
                    cbo_Ends2_Helper1.Visible = True

                    cbo_Ends2_Helper1.BringToFront()
                    cbo_Ends2_Helper1.Focus()

                End If

            Else
                cbo_Ends2_Helper1.Visible = False
                cbo_Ends2_Helper1.Tag = -1
                cbo_Ends2_Helper1.Text = ""

            End If
            If e.ColumnIndex = 16 Then

                If cbo_Ends2_FrontWarper2.Visible = False Or Val(cbo_Ends2_FrontWarper2.Tag) <> e.RowIndex Then

                    cbo_Ends2_FrontWarper2.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Ends2_FrontWarper2.DataSource = Dt1
                    cbo_Ends2_FrontWarper2.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Ends2_FrontWarper2.Left = .Left + rect.Left
                    cbo_Ends2_FrontWarper2.Top = .Top + rect.Top

                    cbo_Ends2_FrontWarper2.Width = rect.Width
                    cbo_Ends2_FrontWarper2.Height = rect.Height
                    cbo_Ends2_FrontWarper2.Text = .CurrentCell.Value

                    cbo_Ends2_FrontWarper2.Tag = Val(e.RowIndex)
                    cbo_Ends2_FrontWarper2.Visible = True

                    cbo_Ends2_FrontWarper2.BringToFront()
                    cbo_Ends2_FrontWarper2.Focus()


                End If

            Else
                cbo_Ends2_FrontWarper2.Visible = False
                cbo_Ends2_FrontWarper2.Tag = -1
                cbo_Ends2_FrontWarper2.Text = ""

            End If

            If e.ColumnIndex = 18 Then

                If cbo_Ends2_BackWarper2.Visible = False Or Val(cbo_Ends2_BackWarper2.Tag) <> e.RowIndex Then

                    cbo_Ends2_BackWarper2.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Ends2_BackWarper2.DataSource = Dt1
                    cbo_Ends2_BackWarper2.DisplayMember = "Employee_name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Ends2_BackWarper2.Left = .Left + rect.Left
                    cbo_Ends2_BackWarper2.Top = .Top + rect.Top

                    cbo_Ends2_BackWarper2.Width = rect.Width
                    cbo_Ends2_BackWarper2.Height = rect.Height
                    cbo_Ends2_BackWarper2.Text = .CurrentCell.Value

                    cbo_Ends2_BackWarper2.Tag = Val(e.RowIndex)
                    cbo_Ends2_BackWarper2.Visible = True

                    cbo_Ends2_BackWarper2.BringToFront()
                    cbo_Ends2_BackWarper2.Focus()



                End If

            Else
                cbo_Ends2_BackWarper2.Visible = False
                cbo_Ends2_BackWarper2.Tag = -1
                cbo_Ends2_BackWarper2.Text = ""

            End If


            If .CurrentCell.ColumnIndex = 20 Then

                If cbo_Ends2_Helper2.Visible = False Or Val(cbo_Ends2_Helper2.Tag) <> e.RowIndex Then

                    cbo_Ends2_Helper2.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Ends2_Helper2.DataSource = Dt1
                    cbo_Ends2_Helper2.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Ends2_Helper2.Left = .Left + rect.Left
                    cbo_Ends2_Helper2.Top = .Top + rect.Top

                    cbo_Ends2_Helper2.Width = rect.Width
                    cbo_Ends2_Helper2.Height = rect.Height
                    cbo_Ends2_Helper2.Text = .CurrentCell.Value

                    cbo_Ends2_Helper2.Tag = Val(e.RowIndex)
                    cbo_Ends2_Helper2.Visible = True

                    cbo_Ends2_Helper2.BringToFront()
                    cbo_Ends2_Helper2.Focus()

                End If

            Else
                cbo_Ends2_Helper2.Visible = False
                cbo_Ends2_Helper2.Tag = -1
                cbo_Ends2_Helper2.Text = ""

            End If
        End With
    End Sub

    Private Sub dgv_WarpingDetails_Set2_CellLeave(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_WarpingDetails_Set2.CellLeave
        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        With dgv_WarpingDetails_Set2
            If .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 4 Then
                If Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value) <> 0 Then
                    .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = Format(Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value), "#########0.0")
                End If
            End If
            If .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 8 Or .CurrentCell.ColumnIndex = 9 Or .CurrentCell.ColumnIndex = 11 Or .CurrentCell.ColumnIndex = 13 Or .CurrentCell.ColumnIndex = 15 Or .CurrentCell.ColumnIndex = 17 Or .CurrentCell.ColumnIndex = 19 Or .CurrentCell.ColumnIndex = 21 Then
                If Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value) <> 0 Then
                    .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = Format(Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value), "#########0.00")
                Else
                    .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = ""
                End If
            End If
        End With
    End Sub

    Private Sub dgv_WarpingDetails_Set2_CellValueChanged(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_WarpingDetails_Set2.CellValueChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            With dgv_WarpingDetails_Set2
                If .Visible Then

                    If IsNothing(.CurrentCell) Then Exit Sub

                    If .CurrentCell.ColumnIndex = 1 Or .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Then
                        If .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Then
                            .CurrentRow.Cells(4).Value = Format(Val(.CurrentRow.Cells(2).Value) - Val(.CurrentRow.Cells(3).Value), "#########0.0")
                        End If
                        TotalWarping_Calculation()
                    End If

                    If (.CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3) And Val(.CurrentCell.Value) <> 0 Then
                        If .CurrentRow.Index = .Rows.Count - 1 Then
                            .Rows.Add()
                        End If
                    End If
                End If
            End With



            ''If (.CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 6 Or .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 8 Or .CurrentCell.ColumnIndex = 11 Or .CurrentCell.ColumnIndex = 13 Or .CurrentCell.ColumnIndex = 15 Or .CurrentCell.ColumnIndex = 17 Or .CurrentCell.ColumnIndex = 19 Or .CurrentCell.ColumnIndex = 21 Or .CurrentCell.ColumnIndex = 23) And Val(.CurrentCell.Value) <> 0 Then
            'If (.CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 6 Or .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 8 Or .CurrentCell.ColumnIndex = 11 Or .CurrentCell.ColumnIndex = 13 Or .CurrentCell.ColumnIndex = 15 Or .CurrentCell.ColumnIndex = 17 Or .CurrentCell.ColumnIndex = 19 Or .CurrentCell.ColumnIndex = 21 Or .CurrentCell.ColumnIndex = 23) And Val(.CurrentCell.Value) <> 0 Then

            '    If Common_Procedures.settings.CustomerCode <> "1282" Then
            '        If .CurrentRow.Index = .Rows.Count - 1 Then
            '            .Rows.Add()
            '        End If
            '    End If
            'End If


        Catch ex As Exception
            '-----

        End Try
    End Sub

    Private Sub dgv_WarpingDetails_Set2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgv_WarpingDetails_Set2.KeyUp
        vcbo_KeyDwnVal = e.KeyValue
        Dim i As Integer

        If e.Control = True And UCase(Chr(e.KeyCode)) = "D" Then

            With dgv_WarpingDetails_Set2

                If Trim(txt_InvoiceCode.Text) = "" Then

                    If .CurrentRow.Index = .RowCount - 1 Then
                        For i = 1 To .Columns.Count - 1
                            .Rows(.CurrentRow.Index).Cells(i).Value = ""
                        Next

                    Else
                        .Rows.RemoveAt(.CurrentRow.Index)

                    End If

                    TotalWarping_Calculation()

                Else
                    MessageBox.Show("Invoice Prepared", "DOES NOT DELETE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                    Exit Sub

                End If

            End With

        End If

    End Sub

    Private Sub dgv_WarpingDetails_Set2_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgv_WarpingDetails_Set2.LostFocus
        On Error Resume Next
        If Not IsNothing(sender.CurrentCell) Then sender.CurrentCell.Selected = False
    End Sub

    Private Sub dgv_WarpingDetails_Set2_RowsAdded(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewRowsAddedEventArgs) Handles dgv_WarpingDetails_Set2.RowsAdded
        Dim n As Integer

        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        With dgv_WarpingDetails_Set2
            n = .RowCount
            .Rows(n - 1).Cells(0).Value = Val(n)
        End With
    End Sub

    Private Sub dgv_WarpingDetails_Set3_CellEndEdit(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_WarpingDetails_Set3.CellEndEdit
        dgv_WarpingDetails_Set3_CellLeave(sender, e)
    End Sub

    Private Sub dgv_WarpingDetails_Set3_CellEnter(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_WarpingDetails_Set3.CellEnter
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim rect As Rectangle
        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        With dgv_WarpingDetails_Set3

            If Val(.CurrentRow.Cells(0).Value) = 0 Then
                .CurrentRow.Cells(0).Value = .CurrentRow.Index + 1
            End If

            If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1028" Then '---- Chinnu Sizing (Palladam)
                If e.RowIndex > 0 And e.ColumnIndex = 1 Then
                    If Val(.CurrentRow.Cells(1).Value) = 0 And e.RowIndex = .RowCount - 1 Then
                        .CurrentRow.Cells(1).Value = .Rows(e.RowIndex - 1).Cells(1).Value
                    End If
                End If
            End If

            If e.ColumnIndex = 5 Then

                If Cbo_Ends3_Shift.Visible = False Or Val(Cbo_Ends3_Shift.Tag) <> e.RowIndex Then

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    Cbo_Ends3_Shift.Left = .Left + rect.Left
                    Cbo_Ends3_Shift.Top = .Top + rect.Top

                    Cbo_Ends3_Shift.Width = rect.Width
                    Cbo_Ends3_Shift.Height = rect.Height
                    Cbo_Ends3_Shift.Text = .CurrentCell.Value

                    Cbo_Ends3_Shift.Tag = Val(e.RowIndex)
                    Cbo_Ends3_Shift.Visible = True

                    Cbo_Ends3_Shift.BringToFront()
                    Cbo_Ends3_Shift.Focus()

                End If

            Else
                Cbo_Ends3_Shift.Visible = False
                Cbo_Ends3_Shift.Tag = -1
                Cbo_Ends3_Shift.Text = ""
            End If

            If e.ColumnIndex = 10 Then

                If cbo_Ends3_FrontWarper1.Visible = False Or Val(cbo_Ends3_FrontWarper1.Tag) <> e.RowIndex Then

                    cbo_Ends3_FrontWarper1.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Ends3_FrontWarper1.DataSource = Dt1
                    cbo_Ends3_FrontWarper1.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Ends3_FrontWarper1.Left = .Left + rect.Left
                    cbo_Ends3_FrontWarper1.Top = .Top + rect.Top

                    cbo_Ends3_FrontWarper1.Width = rect.Width
                    cbo_Ends3_FrontWarper1.Height = rect.Height
                    cbo_Ends3_FrontWarper1.Text = .CurrentCell.Value

                    cbo_Ends3_FrontWarper1.Tag = Val(e.RowIndex)
                    cbo_Ends3_FrontWarper1.Visible = True

                    cbo_Ends3_FrontWarper1.BringToFront()
                    cbo_Ends3_FrontWarper1.Focus()


                End If

            Else
                cbo_Ends3_FrontWarper1.Visible = False
                cbo_Ends3_FrontWarper1.Tag = -1
                cbo_Ends3_FrontWarper1.Text = ""

            End If

            If e.ColumnIndex = 12 Then

                If cbo_Ends3_BackWarper1.Visible = False Or Val(cbo_Ends3_BackWarper1.Tag) <> e.RowIndex Then

                    cbo_Ends3_BackWarper1.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Ends3_BackWarper1.DataSource = Dt1
                    cbo_Ends3_BackWarper1.DisplayMember = "Employee_name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Ends3_BackWarper1.Left = .Left + rect.Left
                    cbo_Ends3_BackWarper1.Top = .Top + rect.Top

                    cbo_Ends3_BackWarper1.Width = rect.Width
                    cbo_Ends3_BackWarper1.Height = rect.Height
                    cbo_Ends3_BackWarper1.Text = .CurrentCell.Value

                    cbo_Ends3_BackWarper1.Tag = Val(e.RowIndex)
                    cbo_Ends3_BackWarper1.Visible = True

                    cbo_Ends3_BackWarper1.BringToFront()
                    cbo_Ends3_BackWarper1.Focus()



                End If

            Else
                cbo_Ends3_BackWarper1.Visible = False
                cbo_Ends3_BackWarper1.Tag = -1
                cbo_Ends3_BackWarper1.Text = ""

            End If


            If .CurrentCell.ColumnIndex = 14 Then

                If cbo_Ends3_Helper1.Visible = False Or Val(cbo_Ends3_Helper1.Tag) <> e.RowIndex Then

                    cbo_Ends3_Helper1.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Ends3_Helper1.DataSource = Dt1
                    cbo_Ends3_Helper1.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Ends3_Helper1.Left = .Left + rect.Left
                    cbo_Ends3_Helper1.Top = .Top + rect.Top

                    cbo_Ends3_Helper1.Width = rect.Width
                    cbo_Ends3_Helper1.Height = rect.Height
                    cbo_Ends3_Helper1.Text = .CurrentCell.Value

                    cbo_Ends3_Helper1.Tag = Val(e.RowIndex)
                    cbo_Ends3_Helper1.Visible = True

                    cbo_Ends3_Helper1.BringToFront()
                    cbo_Ends3_Helper1.Focus()

                End If

            Else
                cbo_Ends3_Helper1.Visible = False
                cbo_Ends3_Helper1.Tag = -1
                cbo_Ends3_Helper1.Text = ""

            End If
            If e.ColumnIndex = 16 Then

                If cbo_Ends3_FrontWarper2.Visible = False Or Val(cbo_Ends3_FrontWarper2.Tag) <> e.RowIndex Then

                    cbo_Ends3_FrontWarper2.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Ends3_FrontWarper2.DataSource = Dt1
                    cbo_Ends3_FrontWarper2.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Ends3_FrontWarper2.Left = .Left + rect.Left
                    cbo_Ends3_FrontWarper2.Top = .Top + rect.Top

                    cbo_Ends3_FrontWarper2.Width = rect.Width
                    cbo_Ends3_FrontWarper2.Height = rect.Height
                    cbo_Ends3_FrontWarper2.Text = .CurrentCell.Value

                    cbo_Ends3_FrontWarper2.Tag = Val(e.RowIndex)
                    cbo_Ends3_FrontWarper2.Visible = True

                    cbo_Ends3_FrontWarper2.BringToFront()
                    cbo_Ends3_FrontWarper2.Focus()


                End If

            Else
                cbo_Ends3_FrontWarper2.Visible = False
                cbo_Ends3_FrontWarper2.Tag = -1
                cbo_Ends3_FrontWarper2.Text = ""

            End If

            If e.ColumnIndex = 18 Then

                If cbo_Ends3_BackWarper2.Visible = False Or Val(cbo_Ends3_BackWarper2.Tag) <> e.RowIndex Then

                    cbo_Ends3_BackWarper2.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Ends3_BackWarper2.DataSource = Dt1
                    cbo_Ends3_BackWarper2.DisplayMember = "Employee_name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Ends3_BackWarper2.Left = .Left + rect.Left
                    cbo_Ends3_BackWarper2.Top = .Top + rect.Top

                    cbo_Ends3_BackWarper2.Width = rect.Width
                    cbo_Ends3_BackWarper2.Height = rect.Height
                    cbo_Ends3_BackWarper2.Text = .CurrentCell.Value

                    cbo_Ends3_BackWarper2.Tag = Val(e.RowIndex)
                    cbo_Ends3_BackWarper2.Visible = True

                    cbo_Ends3_BackWarper2.BringToFront()
                    cbo_Ends3_BackWarper2.Focus()



                End If

            Else
                cbo_Ends3_BackWarper2.Visible = False
                cbo_Ends3_BackWarper2.Tag = -1
                cbo_Ends3_BackWarper2.Text = ""

            End If


            If .CurrentCell.ColumnIndex = 20 Then

                If cbo_Ends3_Helper2.Visible = False Or Val(cbo_Ends3_Helper2.Tag) <> e.RowIndex Then

                    cbo_Ends3_Helper2.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Ends3_Helper2.DataSource = Dt1
                    cbo_Ends3_Helper2.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Ends3_Helper2.Left = .Left + rect.Left
                    cbo_Ends3_Helper2.Top = .Top + rect.Top

                    cbo_Ends3_Helper2.Width = rect.Width
                    cbo_Ends3_Helper2.Height = rect.Height
                    cbo_Ends3_Helper2.Text = .CurrentCell.Value

                    cbo_Ends3_Helper2.Tag = Val(e.RowIndex)
                    cbo_Ends3_Helper2.Visible = True

                    cbo_Ends3_Helper2.BringToFront()
                    cbo_Ends3_Helper2.Focus()

                End If

            Else
                cbo_Ends3_Helper2.Visible = False
                cbo_Ends3_Helper2.Tag = -1
                cbo_Ends3_Helper2.Text = ""

            End If
        End With
    End Sub

    Private Sub dgv_WarpingDetails_Set3_CellLeave(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_WarpingDetails_Set3.CellLeave
        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        With dgv_WarpingDetails_Set3
            If .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 4 Then
                If Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value) <> 0 Then
                    .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = Format(Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value), "#########0.0")
                End If
            End If
            If .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 8 Or .CurrentCell.ColumnIndex = 9 Or .CurrentCell.ColumnIndex = 11 Or .CurrentCell.ColumnIndex = 13 Or .CurrentCell.ColumnIndex = 15 Or .CurrentCell.ColumnIndex = 17 Or .CurrentCell.ColumnIndex = 19 Or .CurrentCell.ColumnIndex = 21 Then
                If Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value) <> 0 Then
                    .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = Format(Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value), "#########0.00")
                Else
                    .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = ""
                End If
            End If
        End With
    End Sub

    Private Sub dgv_WarpingDetails_Set3_CellValueChanged(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_WarpingDetails_Set3.CellValueChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            With dgv_WarpingDetails_Set3
                If .Visible Then

                    If IsNothing(.CurrentCell) Then Exit Sub

                    If .CurrentCell.ColumnIndex = 1 Or .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Then
                        If .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Then
                            .CurrentRow.Cells(4).Value = Format(Val(.CurrentRow.Cells(2).Value) - Val(.CurrentRow.Cells(3).Value), "#########0.0")
                        End If
                        TotalWarping_Calculation()
                    End If
                    If (.CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3) And Val(.CurrentCell.Value) <> 0 Then
                        If .CurrentRow.Index = .Rows.Count - 1 Then
                            .Rows.Add()
                        End If
                    End If
                End If
            End With

        Catch ex As Exception
            '-----

        End Try
    End Sub

    Private Sub dgv_WarpingDetails_Set3_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgv_WarpingDetails_Set3.KeyUp
        Dim i As Integer

        If e.Control = True And UCase(Chr(e.KeyCode)) = "D" Then

            With dgv_WarpingDetails_Set3

                If Trim(txt_InvoiceCode.Text) = "" Then

                    If .CurrentRow.Index = .RowCount - 1 Then
                        For i = 1 To .Columns.Count - 1
                            .Rows(.CurrentRow.Index).Cells(i).Value = ""
                        Next

                    Else
                        .Rows.RemoveAt(.CurrentRow.Index)

                    End If

                    TotalWarping_Calculation()

                Else
                    MessageBox.Show("Invoice Prepared", "DOES NOT DELETE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                    Exit Sub

                End If

            End With

        End If

    End Sub

    Private Sub dgv_WarpingDetails_Set3_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgv_WarpingDetails_Set3.LostFocus
        On Error Resume Next
        If Not IsNothing(sender.CurrentCell) Then sender.CurrentCell.Selected = False
    End Sub

    Private Sub dgv_WarpingDetails_Set3_RowsAdded(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewRowsAddedEventArgs) Handles dgv_WarpingDetails_Set3.RowsAdded
        Dim n As Integer

        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        With dgv_WarpingDetails_Set3
            n = .RowCount
            .Rows(n - 1).Cells(0).Value = Val(n)
        End With
    End Sub

    Private Sub dgv_WarpingDetails_Total_Set1_CellValueChanged(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_WarpingDetails_Total_Set1.CellValueChanged
        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        'If e.ColumnIndex = 1 Then
        '    TotalEnds_Calculation()
        'End If
        If e.ColumnIndex = 1 Or e.ColumnIndex = 4 Or e.ColumnIndex = 23 Or e.ColumnIndex = 24 Then
            BeamCount_Calculation()
        End If
    End Sub

    Private Sub dgv_WarpingDetails_Total_Set2_CellValueChanged(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_WarpingDetails_Total_Set2.CellValueChanged
        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        'If e.ColumnIndex = 1 Then
        '    TotalEnds_Calculation()
        'End If
        If e.ColumnIndex = 1 Or e.ColumnIndex = 4 Then
            BeamCount_Calculation()
        End If
    End Sub

    Private Sub dgv_WarpingDetails_Total_Set3_CellValueChanged(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_WarpingDetails_Total_Set3.CellValueChanged
        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        'If e.ColumnIndex = 1 Then
        '    TotalEnds_Calculation()
        'End If
        If e.ColumnIndex = 1 Or e.ColumnIndex = 4 Then
            BeamCount_Calculation()
        End If
    End Sub

    Private Sub TotalEnds_Calculation()
        'Dim TotEnds As Integer

        'TotEnds = 0
        'If dgv_WarpingDetails_Total_Set1.RowCount > 0 Then
        '    TotEnds = Val(dgv_WarpingDetails_Total_Set1.Rows(0).Cells(1).Value())
        'End If
        'txt_Ends.Text = Val(TotEnds)

        'TotEnds = 0
        'If dgv_WarpingDetails_Total_Set2.RowCount > 0 Then
        '    TotEnds = Val(dgv_WarpingDetails_Total_Set2.Rows(0).Cells(1).Value())
        'End If
        'If Val(TotEnds) <> 0 Then
        '    txt_Ends.Text = Trim(txt_Ends.Text) & IIf(Trim(txt_Ends.Text) <> "", ",", "") & Val(TotEnds)
        'End If

        'TotEnds = 0
        'If dgv_WarpingDetails_Total_Set3.RowCount > 0 Then
        '    TotEnds = Val(dgv_WarpingDetails_Total_Set3.Rows(0).Cells(1).Value())
        'End If
        'If Val(TotEnds) <> 0 Then
        '    txt_Ends.Text = Trim(txt_Ends.Text) & IIf(Trim(txt_Ends.Text) <> "", ",", "") & Val(TotEnds)
        'End If

    End Sub

    Private Sub TotalWarping_Calculation()
        Dim Sno As Integer
        Dim TotWrpBms As Integer, TotWrpEnds As Integer, TotWrpEnds2 As Integer, TotWrpEnds3 As Integer
        Dim TotGrsWt As Single, TotTrWt As Single, TotNtWt As Single
        Dim GTtWrpBms As Integer, GTtWrpEnds As Integer
        Dim GTtGrsWt As Single, GTtTrWt As Single, GTtNtWt As Single

        Dim TotEnds1_Wgt As Single, TotEnds2_Wgt As Single, TotEnds3_Wgt As Single

        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        GTtWrpBms = 0
        GTtWrpEnds = 0
        GTtGrsWt = 0
        GTtTrWt = 0
        GTtNtWt = 0

        Sno = 0
        TotWrpBms = 0
        TotWrpEnds = 0
        TotGrsWt = 0
        TotTrWt = 0
        TotNtWt = 0
        TotWrpEnds2 = 0
        TotWrpEnds3 = 0

        With dgv_WarpingDetails_Set1
            For i = 0 To .RowCount - 1
                Sno = Sno + 1
                .Rows(i).Cells(0).Value = Sno
                If Val(.Rows(i).Cells(4).Value) <> 0 Then
                    TotWrpBms = TotWrpBms + 1
                    TotWrpEnds = TotWrpEnds + Val(.Rows(i).Cells(1).Value)
                    TotGrsWt = TotGrsWt + Val(.Rows(i).Cells(2).Value)
                    TotTrWt = TotTrWt + Val(.Rows(i).Cells(3).Value)
                    TotNtWt = TotNtWt + Val(.Rows(i).Cells(4).Value)

                    TotWrpEnds2 = TotWrpEnds2 + Val(.Rows(i).Cells(23).Value)
                    TotWrpEnds3 = TotWrpEnds3 + Val(.Rows(i).Cells(24).Value)


                    TotEnds1_Wgt = TotEnds1_Wgt + Val(.Rows(i).Cells(25).Value)
                    TotEnds2_Wgt = TotEnds2_Wgt + Val(.Rows(i).Cells(26).Value)
                    TotEnds3_Wgt = TotEnds3_Wgt + Val(.Rows(i).Cells(27).Value)


                End If
            Next
        End With

        With dgv_WarpingDetails_Total_Set1
            If .RowCount = 0 Then .Rows.Add()
            .Rows(0).Cells(0).Value = Val(TotWrpBms)
            .Rows(0).Cells(1).Value = Val(TotWrpEnds)
            .Rows(0).Cells(2).Value = Format(Val(TotGrsWt), "########0.0")
            .Rows(0).Cells(3).Value = Format(Val(TotTrWt), "########0.0")
            .Rows(0).Cells(4).Value = Format(Val(TotNtWt), "########0.0")

            .Rows(0).Cells(2).Value = Format(Val(.Rows(0).Cells(2).Value), "########0.000")
            .Rows(0).Cells(3).Value = Format(Val(.Rows(0).Cells(3).Value), "########0.000")
            .Rows(0).Cells(4).Value = Format(Val(.Rows(0).Cells(4).Value), "########0.000")

            .Rows(0).Cells(23).Value = Val(TotWrpEnds2)
            .Rows(0).Cells(24).Value = Val(TotWrpEnds3)

            .Rows(0).Cells(25).Value = Format(Val(TotEnds1_Wgt), "########0.000")
            .Rows(0).Cells(26).Value = Format(Val(TotEnds2_Wgt), "########0.000")
            .Rows(0).Cells(27).Value = Format(Val(TotEnds3_Wgt), "########0.000")

        End With

        GTtWrpBms = GTtWrpBms + TotWrpBms
        GTtWrpEnds = GTtWrpEnds + TotWrpEnds
        GTtGrsWt = GTtGrsWt + TotGrsWt
        GTtTrWt = GTtTrWt + TotTrWt
        GTtNtWt = GTtNtWt + TotNtWt
        'GTtWrpEnds = GTtWrpEnds + TotWrpEnds2
        'GTtWrpEnds = GTtWrpEnds + TotWrpEnds3

        Sno = 0
        TotWrpBms = 0
        TotWrpEnds = 0
        TotGrsWt = 0
        TotTrWt = 0
        TotNtWt = 0
        With dgv_WarpingDetails_Set2
            For i = 0 To .RowCount - 1
                Sno = Sno + 1
                .Rows(i).Cells(0).Value = Sno
                If Val(.Rows(i).Cells(4).Value) <> 0 Then
                    TotWrpBms = TotWrpBms + 1
                    TotWrpEnds = TotWrpEnds + Val(.Rows(i).Cells(1).Value)
                    TotGrsWt = TotGrsWt + Val(.Rows(i).Cells(2).Value)
                    TotTrWt = TotTrWt + Val(.Rows(i).Cells(3).Value)
                    TotNtWt = TotNtWt + Val(.Rows(i).Cells(4).Value)
                End If
            Next
        End With

        With dgv_WarpingDetails_Total_Set2
            If .RowCount = 0 Then .Rows.Add()
            .Rows(0).Cells(0).Value = Val(TotWrpBms)
            .Rows(0).Cells(1).Value = Val(TotWrpEnds)
            .Rows(0).Cells(2).Value = Format(Val(TotGrsWt), "########0.0")
            .Rows(0).Cells(3).Value = Format(Val(TotTrWt), "########0.0")
            .Rows(0).Cells(4).Value = Format(Val(TotNtWt), "########0.0")

            .Rows(0).Cells(2).Value = Format(Val(.Rows(0).Cells(2).Value), "########0.000")
            .Rows(0).Cells(3).Value = Format(Val(.Rows(0).Cells(3).Value), "########0.000")
            .Rows(0).Cells(4).Value = Format(Val(.Rows(0).Cells(4).Value), "########0.000")

        End With

        GTtWrpBms = GTtWrpBms + TotWrpBms
        GTtWrpEnds = GTtWrpEnds + TotWrpEnds
        GTtGrsWt = GTtGrsWt + TotGrsWt
        GTtTrWt = GTtTrWt + TotTrWt
        GTtNtWt = GTtNtWt + TotNtWt

        Sno = 0
        TotWrpBms = 0
        TotWrpEnds = 0
        TotGrsWt = 0
        TotTrWt = 0
        TotNtWt = 0
        With dgv_WarpingDetails_Set3
            For i = 0 To .RowCount - 1
                Sno = Sno + 1
                .Rows(i).Cells(0).Value = Sno
                If Val(.Rows(i).Cells(4).Value) <> 0 Then
                    TotWrpBms = TotWrpBms + 1
                    TotWrpEnds = TotWrpEnds + Val(.Rows(i).Cells(1).Value)
                    TotGrsWt = TotGrsWt + Val(.Rows(i).Cells(2).Value)
                    TotTrWt = TotTrWt + Val(.Rows(i).Cells(3).Value)
                    TotNtWt = TotNtWt + Val(.Rows(i).Cells(4).Value)
                End If
            Next
        End With

        With dgv_WarpingDetails_Total_Set3
            If .RowCount = 0 Then .Rows.Add()
            .Rows(0).Cells(0).Value = Val(TotWrpBms)
            .Rows(0).Cells(1).Value = Val(TotWrpEnds)
            .Rows(0).Cells(2).Value = Format(Val(TotGrsWt), "########0.0")
            .Rows(0).Cells(3).Value = Format(Val(TotTrWt), "########0.0")
            .Rows(0).Cells(4).Value = Format(Val(TotNtWt), "########0.0")

            .Rows(0).Cells(2).Value = Format(Val(.Rows(0).Cells(2).Value), "########0.000")
            .Rows(0).Cells(3).Value = Format(Val(.Rows(0).Cells(3).Value), "########0.000")
            .Rows(0).Cells(4).Value = Format(Val(.Rows(0).Cells(4).Value), "########0.000")

        End With

        GTtWrpBms = GTtWrpBms + TotWrpBms
        GTtWrpEnds = GTtWrpEnds + TotWrpEnds
        GTtGrsWt = GTtGrsWt + TotGrsWt
        GTtTrWt = GTtTrWt + TotTrWt
        GTtNtWt = GTtNtWt + TotNtWt

        lbl_Total_Warping_Beams.Text = GTtWrpBms
        lbl_Total_Warping_Ends.Text = GTtWrpEnds
        lbl_Total_Warping_GrossWeight.Text = Format(Val(GTtGrsWt), "#########0.0")
        lbl_Total_Warping_TareWeight.Text = Format(Val(GTtTrWt), "#########0.0")
        lbl_Total_Warping_NetWeight.Text = Format(Val(GTtNtWt), "#########0.0")

        lbl_Total_Warping_GrossWeight.Text = Format(Val(lbl_Total_Warping_GrossWeight.Text), "#########0.000")
        lbl_Total_Warping_TareWeight.Text = Format(Val(lbl_Total_Warping_TareWeight.Text), "#########0.000")
        lbl_Total_Warping_NetWeight.Text = Format(Val(lbl_Total_Warping_NetWeight.Text), "#########0.000")

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1102" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1163" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1078" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1087" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1112" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1144" Then
            lbl_ConsumedYarn.Text = Format(Val(GTtNtWt), "#########0.0")
            lbl_ConsumedYarn.Text = Format(Val(lbl_ConsumedYarn.Text), "#########0.000")
        Else
            lbl_ConsumedYarn.Text = Format(Val(GTtNtWt), "#########0.000")
        End If

    End Sub

    Private Sub TabPage5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles TabPage5.Click
        If dgv_WarpingDetails_Set1.Rows.Count <= 0 Then dgv_WarpingDetails_Set1.Rows.Add()
        dgv_WarpingDetails_Set1.Focus()
        dgv_WarpingDetails_Set1.CurrentCell = dgv_WarpingDetails_Set1.Rows(0).Cells(1)
        dgv_WarpingDetails_Set1.CurrentCell.Selected = True
    End Sub

    Private Sub TabPage6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles TabPage6.Click
        If dgv_WarpingDetails_Set2.Rows.Count <= 0 Then dgv_WarpingDetails_Set2.Rows.Add()
        dgv_WarpingDetails_Set2.Focus()
        dgv_WarpingDetails_Set2.CurrentCell = dgv_WarpingDetails_Set2.Rows(0).Cells(1)
        dgv_WarpingDetails_Set2.CurrentCell.Selected = True
    End Sub

    Private Sub TabPage9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles TabPage9.Click
        If dgv_WarpingDetails_Set3.Rows.Count <= 0 Then dgv_WarpingDetails_Set3.Rows.Add()
        dgv_WarpingDetails_Set3.Focus()
        dgv_WarpingDetails_Set3.CurrentCell = dgv_WarpingDetails_Set3.Rows(0).Cells(1)
        dgv_WarpingDetails_Set3.CurrentCell.Selected = True
    End Sub

    Private Sub tab_WarpingDeatils_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles tab_WarpingDeatils.SelectedIndexChanged
        If tab_WarpingDeatils.SelectedIndex = 0 Then
            If dgv_WarpingDetails_Set1.Rows.Count <= 0 Then dgv_WarpingDetails_Set1.Rows.Add()
            dgv_WarpingDetails_Set1.CurrentCell = dgv_WarpingDetails_Set1.Rows(0).Cells(1)
            dgv_WarpingDetails_Set1.Focus()
            dgv_WarpingDetails_Set1.CurrentCell.Selected = True

        ElseIf tab_WarpingDeatils.SelectedIndex = 1 Then
            If dgv_WarpingDetails_Set2.Rows.Count <= 0 Then dgv_WarpingDetails_Set2.Rows.Add()
            dgv_WarpingDetails_Set2.CurrentCell = dgv_WarpingDetails_Set2.Rows(0).Cells(1)
            dgv_WarpingDetails_Set2.Focus()
            dgv_WarpingDetails_Set2.CurrentCell.Selected = True

        ElseIf tab_WarpingDeatils.SelectedIndex = 2 Then
            If dgv_WarpingDetails_Set3.Rows.Count <= 0 Then dgv_WarpingDetails_Set3.Rows.Add()
            dgv_WarpingDetails_Set3.CurrentCell = dgv_WarpingDetails_Set3.Rows(0).Cells(1)
            dgv_WarpingDetails_Set3.Focus()
            dgv_WarpingDetails_Set3.CurrentCell.Selected = True

        End If
    End Sub

    Private Sub tab_Main_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tab_Main.SelectedIndexChanged
        If tab_Main.SelectedIndex = 0 Then
            tab_WarpingDeatils.SelectTab(0)
            If dgv_WarpingDetails_Set1.Rows.Count <= 0 Then dgv_WarpingDetails_Set1.Rows.Add()
            dgv_WarpingDetails_Set1.CurrentCell = dgv_WarpingDetails_Set1.Rows(0).Cells(1)
            dgv_WarpingDetails_Set1.Focus()
            dgv_WarpingDetails_Set1.CurrentCell.Selected = True

        ElseIf tab_Main.SelectedIndex = 1 Then
            tab_SizingDetails.SelectTab(0)
            If dgv_SizingDetails_Set1.Rows.Count <= 0 Then dgv_SizingDetails_Set1.Rows.Add()
            dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
            dgv_SizingDetails_Set1.Focus()
            dgv_SizingDetails_Set1.CurrentCell.Selected = True

        ElseIf tab_Main.SelectedIndex = 2 Then
            If dgv_YarnTakenDetails.Rows.Count > 0 Then


                dgv_YarnTakenDetails.CurrentCell = dgv_YarnTakenDetails.Rows(0).Cells(1)
                dgv_YarnTakenDetails.Focus()
                dgv_YarnTakenDetails.CurrentCell.Selected = True
                If cbo_Grid_CountName.Visible And cbo_Grid_CountName.Enabled Then
                    cbo_Grid_CountName.Focus()
                End If
            End If

        ElseIf tab_Main.SelectedIndex = 3 Then
            If dgv_BabyConeDetails.RowCount > 1 Then
                dgv_BabyConeDetails.CurrentCell = dgv_BabyConeDetails.Rows(0).Cells(1)
                dgv_BabyConeDetails.Focus()
                dgv_BabyConeDetails.CurrentCell.Selected = True
            End If
        ElseIf tab_Main.SelectedIndex = 4 Then
            dgv_ChemicalDetails.CurrentCell = dgv_ChemicalDetails.Rows(0).Cells(1)
            dgv_ChemicalDetails.Focus()
            dgv_ChemicalDetails.CurrentCell.Selected = True
            If cbo_Grid_ItemName.Visible And cbo_Grid_ItemName.Enabled Then
                cbo_Grid_ItemName.Focus()
            End If

        ElseIf tab_Main.SelectedIndex = 5 Then
            tab_StockDetails.SelectTab(0)
            dgv_YarnStockDetails.Focus()
            Stock_calulation()
            If dgv_YarnStockDetails.Rows.Count > 0 Then
                dgv_YarnStockDetails.CurrentCell = dgv_YarnStockDetails.Rows(0).Cells(0)
            End If

        End If
    End Sub

    Private Sub dgv_SizingDetails_Set1_CellEndEdit(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_SizingDetails_Set1.CellEndEdit
        dgv_SizingDetails_Set1_CellLeave(sender, e)
    End Sub

    Private Sub dgv_SizingDetails_Set1_CellEnter(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_SizingDetails_Set1.CellEnter
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim rect As Rectangle
        Dim vTotSizMtrs As Single = 0

        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub

        With dgv_SizingDetails_Set1
            If Val(.CurrentRow.Cells(0).Value) = 0 Then
                .CurrentRow.Cells(0).Value = .CurrentRow.Index + 1
            End If

            dgv_SizDet_CelVal = .Rows(e.RowIndex).Cells(e.ColumnIndex).Value

            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1220" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1263" Then '---- Meenashi Sizing (Somanur)
                If e.RowIndex = 0 And e.ColumnIndex = 1 Then
                    If Trim(.CurrentRow.Cells(1).Value) = "" Then

                        vTotSizMtrs = 0
                        If dgv_SizingDetails_Total_Set1.RowCount > 0 Then
                            If Val(dgv_SizingDetails_Total_Set1.Rows(0).Cells(5).Value()) <> 0 Then
                                vTotSizMtrs = Val(dgv_SizingDetails_Total_Set1.Rows(0).Cells(7).Value())
                            End If
                        End If

                        If vTotSizMtrs = 0 Then
                            .CurrentRow.Cells(1).Value = get_Max_Sizing_BeamNo()
                        End If

                    End If
                End If

                If e.RowIndex > 0 And (e.ColumnIndex = 1 Or e.ColumnIndex = 2) Then
                    If Val(.CurrentRow.Cells(1).Value) = 0 And e.RowIndex = .RowCount - 1 Then
                        .CurrentRow.Cells(1).Value = Val(.Rows(e.RowIndex - 1).Cells(1).Value) + 1
                    End If
                    If e.ColumnIndex = 1 And e.RowIndex = .RowCount - 1 And Val(.CurrentRow.Cells(5).Value) = 0 And Val(.CurrentRow.Cells(6).Value) = 0 And Val(.CurrentRow.Cells(7).Value) = 0 Then
                        .CurrentRow.Cells(1).Value = Val(.Rows(e.RowIndex - 1).Cells(1).Value) + 1
                    End If
                End If

            End If


            If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1028" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1220" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1263" Then '---- Chinnu Sizing (Palladam)

                If e.RowIndex > 0 And e.ColumnIndex = 1 Then
                    If Val(.CurrentRow.Cells(1).Value) = 0 And e.RowIndex = .RowCount - 1 Then
                        .CurrentRow.Cells(1).Value = Val(.Rows(e.RowIndex - 1).Cells(1).Value) + 1
                        .CurrentRow.Cells(5).Value = .Rows(e.RowIndex - 1).Cells(5).Value
                        .CurrentRow.Cells(6).Value = .Rows(e.RowIndex - 1).Cells(6).Value
                        .CurrentRow.Cells(7).Value = .Rows(e.RowIndex - 1).Cells(7).Value
                        '.Rows.Add()
                    End If
                    If e.ColumnIndex = 1 And e.RowIndex = .RowCount - 1 And Val(.CurrentRow.Cells(5).Value) = 0 And Val(.CurrentRow.Cells(6).Value) = 0 And Val(.CurrentRow.Cells(7).Value) = 0 Then
                        .CurrentRow.Cells(1).Value = Val(.Rows(e.RowIndex - 1).Cells(1).Value) + 1
                        .CurrentRow.Cells(5).Value = .Rows(e.RowIndex - 1).Cells(5).Value
                        .CurrentRow.Cells(6).Value = .Rows(e.RowIndex - 1).Cells(6).Value
                        .CurrentRow.Cells(7).Value = .Rows(e.RowIndex - 1).Cells(7).Value
                        '.Rows.Add()
                    End If
                End If

            End If

            If Common_Procedures.settings.CustomerCode <> "1220" Then
                'If Val(.CurrentRow.Cells(6).Value) = 0 And Val(txt_PcsLength.Text) <> 0 Then .CurrentRow.Cells(6).Value = Val(txt_PcsLength.Text)
                If Val(txt_PcsLength.Text) <> 0 Then .CurrentRow.Cells(6).Value = Val(txt_PcsLength.Text)
            End If


            If e.ColumnIndex = 9 Then

                If e.RowIndex > 0 Then
                    If Trim(.CurrentRow.Cells(e.ColumnIndex).Value) = "" Then
                        .CurrentRow.Cells(e.ColumnIndex).Value = .Rows(e.RowIndex - 1).Cells(e.ColumnIndex).Value
                    End If
                End If

                If cbo_Sizing1_Shift.Visible = False Or Val(cbo_Sizing1_Shift.Tag) <> e.RowIndex Then

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing1_Shift.Left = .Left + rect.Left
                    cbo_Sizing1_Shift.Top = .Top + rect.Top

                    cbo_Sizing1_Shift.Width = rect.Width
                    cbo_Sizing1_Shift.Height = rect.Height
                    cbo_Sizing1_Shift.Text = .CurrentCell.Value

                    cbo_Sizing1_Shift.Tag = Val(e.RowIndex)
                    cbo_Sizing1_Shift.Visible = True

                    cbo_Sizing1_Shift.BringToFront()
                    cbo_Sizing1_Shift.Focus()

                End If

            Else
                cbo_Sizing1_Shift.Visible = False
                cbo_Sizing1_Shift.Tag = -1
                cbo_Sizing1_Shift.Text = ""
            End If

            If e.ColumnIndex = 13 Then

                If e.RowIndex > 0 Then
                    If Trim(.CurrentRow.Cells(e.ColumnIndex).Value) = "" Then
                        .CurrentRow.Cells(e.ColumnIndex).Value = .Rows(e.RowIndex - 1).Cells(e.ColumnIndex).Value
                    End If
                End If

                If cbo_Sizing1_FrontSizer1.Visible = False Or Val(cbo_Sizing1_FrontSizer1.Tag) <> e.RowIndex Then

                    cbo_Sizing1_FrontSizer1.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing1_FrontSizer1.DataSource = Dt1
                    cbo_Sizing1_FrontSizer1.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing1_FrontSizer1.Left = .Left + rect.Left
                    cbo_Sizing1_FrontSizer1.Top = .Top + rect.Top

                    cbo_Sizing1_FrontSizer1.Width = rect.Width
                    cbo_Sizing1_FrontSizer1.Height = rect.Height
                    cbo_Sizing1_FrontSizer1.Text = .CurrentCell.Value

                    cbo_Sizing1_FrontSizer1.Tag = Val(e.RowIndex)
                    cbo_Sizing1_FrontSizer1.Visible = True

                    cbo_Sizing1_FrontSizer1.BringToFront()
                    cbo_Sizing1_FrontSizer1.Focus()


                End If

            Else
                cbo_Sizing1_FrontSizer1.Visible = False
                cbo_Sizing1_FrontSizer1.Tag = -1
                cbo_Sizing1_FrontSizer1.Text = ""

            End If

            If e.ColumnIndex = 15 Then

                If e.RowIndex > 0 Then
                    If Trim(.CurrentRow.Cells(e.ColumnIndex).Value) = "" Then
                        .CurrentRow.Cells(e.ColumnIndex).Value = .Rows(e.RowIndex - 1).Cells(e.ColumnIndex).Value
                    End If
                End If

                If cbo_Sizing1_BackSizer1.Visible = False Or Val(cbo_Sizing1_BackSizer1.Tag) <> e.RowIndex Then

                    cbo_Sizing1_BackSizer1.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing1_BackSizer1.DataSource = Dt1
                    cbo_Sizing1_BackSizer1.DisplayMember = "Employee_name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing1_BackSizer1.Left = .Left + rect.Left
                    cbo_Sizing1_BackSizer1.Top = .Top + rect.Top

                    cbo_Sizing1_BackSizer1.Width = rect.Width
                    cbo_Sizing1_BackSizer1.Height = rect.Height
                    cbo_Sizing1_BackSizer1.Text = .CurrentCell.Value

                    cbo_Sizing1_BackSizer1.Tag = Val(e.RowIndex)
                    cbo_Sizing1_BackSizer1.Visible = True

                    cbo_Sizing1_BackSizer1.BringToFront()
                    cbo_Sizing1_BackSizer1.Focus()



                End If

            Else
                cbo_Sizing1_BackSizer1.Visible = False
                cbo_Sizing1_BackSizer1.Tag = -1
                cbo_Sizing1_BackSizer1.Text = ""

            End If


            If .CurrentCell.ColumnIndex = 17 Then

                If e.RowIndex > 0 Then
                    If Trim(.CurrentRow.Cells(e.ColumnIndex).Value) = "" Then
                        .CurrentRow.Cells(e.ColumnIndex).Value = .Rows(e.RowIndex - 1).Cells(e.ColumnIndex).Value
                    End If
                End If

                If cbo_Sizing1_Boiler1.Visible = False Or Val(cbo_Sizing1_Boiler1.Tag) <> e.RowIndex Then

                    cbo_Sizing1_Boiler1.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing1_Boiler1.DataSource = Dt1
                    cbo_Sizing1_Boiler1.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing1_Boiler1.Left = .Left + rect.Left
                    cbo_Sizing1_Boiler1.Top = .Top + rect.Top

                    cbo_Sizing1_Boiler1.Width = rect.Width
                    cbo_Sizing1_Boiler1.Height = rect.Height
                    cbo_Sizing1_Boiler1.Text = .CurrentCell.Value

                    cbo_Sizing1_Boiler1.Tag = Val(e.RowIndex)
                    cbo_Sizing1_Boiler1.Visible = True

                    cbo_Sizing1_Boiler1.BringToFront()
                    cbo_Sizing1_Boiler1.Focus()

                End If

            Else
                cbo_Sizing1_Boiler1.Visible = False
                cbo_Sizing1_Boiler1.Tag = -1
                cbo_Sizing1_Boiler1.Text = ""

            End If

            If e.ColumnIndex = 19 Then

                If e.RowIndex > 0 Then
                    If Trim(.CurrentRow.Cells(e.ColumnIndex).Value) = "" Then
                        .CurrentRow.Cells(e.ColumnIndex).Value = .Rows(e.RowIndex - 1).Cells(e.ColumnIndex).Value
                    End If
                End If

                If cbo_Sizing1_Cooker.Visible = False Or Val(cbo_Sizing1_Cooker.Tag) <> e.RowIndex Then

                    cbo_Sizing1_Cooker.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing1_Cooker.DataSource = Dt1
                    cbo_Sizing1_Cooker.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing1_Cooker.Left = .Left + rect.Left
                    cbo_Sizing1_Cooker.Top = .Top + rect.Top

                    cbo_Sizing1_Cooker.Width = rect.Width
                    cbo_Sizing1_Cooker.Height = rect.Height
                    cbo_Sizing1_Cooker.Text = .CurrentCell.Value

                    cbo_Sizing1_Cooker.Tag = Val(e.RowIndex)
                    cbo_Sizing1_Cooker.Visible = True

                    cbo_Sizing1_Cooker.BringToFront()
                    cbo_Sizing1_Cooker.Focus()


                End If

            Else
                cbo_Sizing1_Cooker.Visible = False
                cbo_Sizing1_Cooker.Tag = -1
                cbo_Sizing1_Cooker.Text = ""

            End If

            If e.ColumnIndex = 21 Then

                If e.RowIndex > 0 Then
                    If Trim(.CurrentRow.Cells(e.ColumnIndex).Value) = "" Then
                        .CurrentRow.Cells(e.ColumnIndex).Value = .Rows(e.RowIndex - 1).Cells(e.ColumnIndex).Value
                    End If
                End If

                If cbo_Sizing1_FrontSizer2.Visible = False Or Val(cbo_Sizing1_FrontSizer2.Tag) <> e.RowIndex Then

                    cbo_Sizing1_FrontSizer2.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing1_FrontSizer2.DataSource = Dt1
                    cbo_Sizing1_FrontSizer2.DisplayMember = "Employee_name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing1_FrontSizer2.Left = .Left + rect.Left
                    cbo_Sizing1_FrontSizer2.Top = .Top + rect.Top

                    cbo_Sizing1_FrontSizer2.Width = rect.Width
                    cbo_Sizing1_FrontSizer2.Height = rect.Height
                    cbo_Sizing1_FrontSizer2.Text = .CurrentCell.Value

                    cbo_Sizing1_FrontSizer2.Tag = Val(e.RowIndex)
                    cbo_Sizing1_FrontSizer2.Visible = True

                    cbo_Sizing1_FrontSizer2.BringToFront()
                    cbo_Sizing1_FrontSizer2.Focus()



                End If

            Else
                cbo_Sizing1_FrontSizer2.Visible = False
                cbo_Sizing1_FrontSizer2.Tag = -1
                cbo_Sizing1_FrontSizer2.Text = ""

            End If


            If .CurrentCell.ColumnIndex = 23 Then

                If e.RowIndex > 0 Then
                    If Trim(.CurrentRow.Cells(e.ColumnIndex).Value) = "" Then
                        .CurrentRow.Cells(e.ColumnIndex).Value = .Rows(e.RowIndex - 1).Cells(e.ColumnIndex).Value
                    End If
                End If

                If cbo_Sizing1_BackSizer2.Visible = False Or Val(cbo_Sizing1_BackSizer2.Tag) <> e.RowIndex Then

                    cbo_Sizing1_BackSizer2.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing1_BackSizer2.DataSource = Dt1
                    cbo_Sizing1_BackSizer2.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing1_BackSizer2.Left = .Left + rect.Left
                    cbo_Sizing1_BackSizer2.Top = .Top + rect.Top

                    cbo_Sizing1_BackSizer2.Width = rect.Width
                    cbo_Sizing1_BackSizer2.Height = rect.Height
                    cbo_Sizing1_BackSizer2.Text = .CurrentCell.Value

                    cbo_Sizing1_BackSizer2.Tag = Val(e.RowIndex)
                    cbo_Sizing1_BackSizer2.Visible = True

                    cbo_Sizing1_BackSizer2.BringToFront()
                    cbo_Sizing1_BackSizer2.Focus()

                End If

            Else
                cbo_Sizing1_BackSizer2.Visible = False
                cbo_Sizing1_BackSizer2.Tag = -1
                cbo_Sizing1_BackSizer2.Text = ""

            End If


            If .CurrentCell.ColumnIndex = 25 Then

                If e.RowIndex > 0 Then
                    If Trim(.CurrentRow.Cells(e.ColumnIndex).Value) = "" Then
                        .CurrentRow.Cells(e.ColumnIndex).Value = .Rows(e.RowIndex - 1).Cells(e.ColumnIndex).Value
                    End If
                End If

                If cbo_Sizing1_Cooker2.Visible = False Or Val(cbo_Sizing1_Cooker2.Tag) <> e.RowIndex Then

                    cbo_Sizing1_Cooker2.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing1_Cooker2.DataSource = Dt1
                    cbo_Sizing1_Cooker2.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing1_Cooker2.Left = .Left + rect.Left
                    cbo_Sizing1_Cooker2.Top = .Top + rect.Top

                    cbo_Sizing1_Cooker2.Width = rect.Width
                    cbo_Sizing1_Cooker2.Height = rect.Height
                    cbo_Sizing1_Cooker2.Text = .CurrentCell.Value

                    cbo_Sizing1_Cooker2.Tag = Val(e.RowIndex)
                    cbo_Sizing1_Cooker2.Visible = True

                    cbo_Sizing1_Cooker2.BringToFront()
                    cbo_Sizing1_Cooker2.Focus()

                End If

            Else
                cbo_Sizing1_Cooker2.Visible = False
                cbo_Sizing1_Cooker2.Tag = -1
                cbo_Sizing1_Cooker2.Text = ""

            End If

            If .CurrentCell.ColumnIndex = 27 Then

                If e.RowIndex > 0 Then
                    If Trim(.CurrentRow.Cells(e.ColumnIndex).Value) = "" Then
                        .CurrentRow.Cells(e.ColumnIndex).Value = .Rows(e.RowIndex - 1).Cells(e.ColumnIndex).Value
                    End If
                End If

                If cbo_Sizing1_Boiler2.Visible = False Or Val(cbo_Sizing1_Boiler2.Tag) <> e.RowIndex Then

                    cbo_Sizing1_Boiler2.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing1_Boiler2.DataSource = Dt1
                    cbo_Sizing1_Boiler2.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing1_Boiler2.Left = .Left + rect.Left
                    cbo_Sizing1_Boiler2.Top = .Top + rect.Top

                    cbo_Sizing1_Boiler2.Width = rect.Width
                    cbo_Sizing1_Boiler2.Height = rect.Height
                    cbo_Sizing1_Boiler2.Text = .CurrentCell.Value

                    cbo_Sizing1_Boiler2.Tag = Val(e.RowIndex)
                    cbo_Sizing1_Boiler2.Visible = True

                    cbo_Sizing1_Boiler2.BringToFront()
                    cbo_Sizing1_Boiler2.Focus()

                End If

            Else
                cbo_Sizing1_Boiler2.Visible = False
                cbo_Sizing1_Boiler2.Tag = -1
                cbo_Sizing1_Boiler2.Text = ""

            End If

            If e.ColumnIndex = 31 Then

                If e.RowIndex > 0 Then
                    If Trim(.CurrentRow.Cells(e.ColumnIndex).Value) = "" Then
                        .CurrentRow.Cells(e.ColumnIndex).Value = .Rows(e.RowIndex - 1).Cells(e.ColumnIndex).Value
                    End If
                End If

                If cbo_Sizing1_Vendor.Visible = False Or Val(cbo_Sizing1_Vendor.Tag) <> e.RowIndex Then

                    'dgv_ActCtrlName = dgv_Details.Name

                    cbo_Sizing1_Vendor.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Vendor_Name from Vendor_Head Order by Vendor_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing1_Vendor.DataSource = Dt1
                    cbo_Sizing1_Vendor.DisplayMember = "Vendor_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing1_Vendor.Left = .Left + rect.Left
                    cbo_Sizing1_Vendor.Top = .Top + rect.Top
                    cbo_Sizing1_Vendor.Width = rect.Width
                    cbo_Sizing1_Vendor.Height = rect.Height

                    cbo_Sizing1_Vendor.Text = .CurrentCell.Value

                    cbo_Sizing1_Vendor.Tag = Val(e.RowIndex)
                    cbo_Sizing1_Vendor.Visible = True

                    cbo_Sizing1_Vendor.BringToFront()
                    cbo_Sizing1_Vendor.Focus()

                End If

            Else

                cbo_Sizing1_Vendor.Visible = False
                cbo_Sizing1_Vendor.Tag = -1
                cbo_Sizing1_Vendor.Text = ""

            End If

        End With
    End Sub

    Private Sub dgv_SizingDetails_Set1_CellLeave(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_SizingDetails_Set1.CellLeave
        With dgv_SizingDetails_Set1

            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub


            If .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 4 Then
                If Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value) <> 0 Then
                    .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = Format(Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value), "#########0.0")
                End If
            End If
            If .CurrentCell.ColumnIndex = 6 Or .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 10 Or .CurrentCell.ColumnIndex = 11 Or .CurrentCell.ColumnIndex = 12 Or .CurrentCell.ColumnIndex = 14 Or .CurrentCell.ColumnIndex = 16 Or .CurrentCell.ColumnIndex = 18 Or .CurrentCell.ColumnIndex = 20 Or .CurrentCell.ColumnIndex = 22 Or .CurrentCell.ColumnIndex = 24 Or .CurrentCell.ColumnIndex = 26 Or .CurrentCell.ColumnIndex = 28 Or .CurrentCell.ColumnIndex = 30 Or .CurrentCell.ColumnIndex = 34 Then
                If Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value) <> 0 Then
                    .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = Format(Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value), "#########0.00")
                End If
            End If
            If .CurrentCell.ColumnIndex = 32 Or .CurrentCell.ColumnIndex = 33 Then
                If Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value) <> 0 Then
                    .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = Format(Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value), "#########0.000")
                End If
            End If
        End With
    End Sub

    Private Sub dgv_SizingDetails_Set1_CellValueChanged(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_SizingDetails_Set1.CellValueChanged
        Dim GrsWgt As Double = 0
        Dim Pickup As Single = 0
        Dim aNetWt As Single = 0

        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub

            If IsNothing(dgv_SizingDetails_Set1.CurrentCell) Then Exit Sub

            With dgv_SizingDetails_Set1
                If .Visible Then

                    If e.ColumnIndex = 1 Or e.ColumnIndex = 2 Or e.ColumnIndex = 3 Or e.ColumnIndex = 5 Or e.ColumnIndex = 6 Or e.ColumnIndex = 7 Or e.ColumnIndex = 30 Or e.ColumnIndex = 31 Or e.ColumnIndex = 32 Then
                        If e.ColumnIndex = 2 Or e.ColumnIndex = 3 Or e.ColumnIndex = 30 Then
                            If (e.ColumnIndex = 3 And Val(.Rows(e.RowIndex).Cells(30).Value) <> 0) Or (e.ColumnIndex = 30 And Val(dgv_SizDet_CelVal) <> Val(.Rows(e.RowIndex).Cells(e.ColumnIndex).Value)) Then
                                GrsWgt = Sizing_Beam_Weight_Calculation_From_PickUp(1, Val(.Rows(e.RowIndex).Cells(7).Value), Val(.Rows(e.RowIndex).Cells(30).Value), Val(.Rows(e.RowIndex).Cells(3).Value))
                                .Rows(e.RowIndex).Cells(2).Value = Format(Val(GrsWgt), "#########0.0")
                            End If

                            .Rows(e.RowIndex).Cells(4).Value = Format(Val(.Rows(e.RowIndex).Cells(2).Value) - Val(.Rows(e.RowIndex).Cells(3).Value), "#########0.0")
                        End If

                        If e.ColumnIndex = 5 Or e.ColumnIndex = 6 Then
                            If Val(.Rows(e.RowIndex).Cells(5).Value) <> 0 And Val(.Rows(e.RowIndex).Cells(6).Value) <> 0 Then
                                .Rows(e.RowIndex).Cells(7).Value = Format(Val(.Rows(e.RowIndex).Cells(5).Value) * Val(.Rows(e.RowIndex).Cells(6).Value), "#########0.000")
                            End If
                        End If


                        If (e.ColumnIndex = 2 Or e.ColumnIndex = 3 Or e.ColumnIndex = 5 Or e.ColumnIndex = 6 Or e.ColumnIndex = 7) And Val(.CurrentCell.Value) <> 0 Then
                            If .Rows(e.RowIndex).Index = .Rows.Count - 1 Then
                                .Rows.Add()
                            End If
                        End If
                        If e.ColumnIndex = 3 Or e.ColumnIndex = 32 Then ' Or e.ColumnIndex = 33 Or e.ColumnIndex = 34 Then

                            aNetWt = 0
                            If Val(.Rows(e.RowIndex).Cells(32).Value) <> 0 Then
                                aNetWt = Format(Val(.Rows(e.RowIndex).Cells(32).Value) - Val(.Rows(e.RowIndex).Cells(3).Value), "#########0.000")
                            End If
                            .Rows(e.RowIndex).Cells(33).Value = Format(Val(aNetWt), "#########0.000")

                            PickUp_BeamNoWise_Calculation(1, e.RowIndex, e.ColumnIndex, dgv_SizingDetails_Set1, dgv_WarpingDetails_Total_Set1)
                        End If

                        TotalSizing_Calculation()

                    End If
                    'If e.ColumnIndex = 7 Then
                    '    If .Rows(e.RowIndex).Index = .Rows.Count - 1 And .Rows(e.RowIndex).Cells(7).Value <> 0 Then
                    '        .Rows.Add()
                    '    End If
                    'End If
                End If

            End With

        Catch ex As Exception
            '----

        End Try


    End Sub

    Private Sub dgv_SizingDetails_Set1_CellValueChanged1111(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs)
        Dim GrsWgt As Double = 0
        Dim Pickup As Single = 0
        Dim aNetWt As Single = 0

        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            With dgv_SizingDetails_Set1
                If .Visible Then

                    If .CurrentCell.ColumnIndex = 1 Or .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 5 Or .CurrentCell.ColumnIndex = 6 Or .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 30 Or .CurrentCell.ColumnIndex = 31 Or .CurrentCell.ColumnIndex = 32 Then 'Or .CurrentCell.ColumnIndex = 33 Or .CurrentCell.ColumnIndex = 34 Then
                        If .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 30 Then
                            If (.CurrentCell.ColumnIndex = 3 And Val(.CurrentRow.Cells(30).Value) <> 0) Or .CurrentCell.ColumnIndex = 30 Then
                                GrsWgt = Sizing_Beam_Weight_Calculation_From_PickUp(1, Val(.CurrentRow.Cells(7).Value), Val(.CurrentRow.Cells(30).Value), Val(.CurrentRow.Cells(3).Value))
                                .CurrentRow.Cells(2).Value = Format(Val(GrsWgt), "#########0.000")
                            End If
                            .CurrentRow.Cells(4).Value = Format(Val(.CurrentRow.Cells(2).Value) - Val(.CurrentRow.Cells(3).Value), "#########0.0")
                        End If

                        If .CurrentCell.ColumnIndex = 5 Or .CurrentCell.ColumnIndex = 6 Then
                            If Val(.CurrentRow.Cells(5).Value) <> 0 And Val(.CurrentRow.Cells(6).Value) <> 0 Then
                                .CurrentRow.Cells(7).Value = Format(Val(.CurrentRow.Cells(5).Value) * Val(.CurrentRow.Cells(6).Value), "#########0.000")
                            End If
                        End If


                        If (.CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 5 Or .CurrentCell.ColumnIndex = 6 Or .CurrentCell.ColumnIndex = 7) And Val(.CurrentCell.Value) <> 0 Then
                            If .CurrentRow.Index = .Rows.Count - 1 Then
                                .Rows.Add()
                            End If
                        End If
                        If .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 32 Then ' Or .CurrentCell.ColumnIndex = 33 Or .CurrentCell.ColumnIndex = 34 Then

                            aNetWt = 0
                            If Val(.CurrentRow.Cells(32).Value) <> 0 Then
                                aNetWt = Format(Val(.CurrentRow.Cells(32).Value) - Val(.CurrentRow.Cells(3).Value), "#########0.000")
                            End If
                            .CurrentRow.Cells(33).Value = Format(Val(aNetWt), "#########0.000")

                            PickUp_BeamNoWise_Calculation(1, e.RowIndex, e.ColumnIndex, dgv_SizingDetails_Set1, dgv_WarpingDetails_Total_Set1)
                        End If

                        TotalSizing_Calculation()

                    End If
                    'If .CurrentCell.ColumnIndex = 7 Then
                    '    If .CurrentRow.Index = .Rows.Count - 1 And .CurrentRow.Cells(7).Value <> 0 Then
                    '        .Rows.Add()
                    '    End If
                    'End If
                End If

            End With
        Catch ex As Exception
            '----

        End Try


    End Sub

    Private Sub dgv_SizingDetails_Set1_EditingControlShowing(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewEditingControlShowingEventArgs) Handles dgv_SizingDetails_Set1.EditingControlShowing
        dgtxt_SizingDetails_Set1 = CType(dgv_SizingDetails_Set1.EditingControl, DataGridViewTextBoxEditingControl)
    End Sub

    Private Sub dgv_SizingDetails_Set1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgv_SizingDetails_Set1.KeyUp
        Dim i As Integer

        If e.Control = True And UCase(Chr(e.KeyCode)) = "D" Then

            With dgv_SizingDetails_Set1

                If Trim(.Rows(.CurrentRow.Index).Cells(8).Value) = "" Then

                    If .CurrentRow.Index = .RowCount - 1 Then
                        For i = 1 To .Columns.Count - 1
                            .Rows(.CurrentRow.Index).Cells(i).Value = ""
                        Next

                    Else
                        .Rows.RemoveAt(.CurrentRow.Index)

                    End If

                    TotalSizing_Calculation()

                Else
                    MessageBox.Show("Pavu already delivered", "DOES NOT DELETE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                    Exit Sub

                End If

            End With

        End If

    End Sub

    Private Sub dgv_SizingDetails_Set1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgv_SizingDetails_Set1.LostFocus
        On Error Resume Next
        If Not IsNothing(dgv_SizingDetails_Set1.CurrentCell) Then dgv_SizingDetails_Set1.CurrentCell.Selected = False
    End Sub

    Private Sub dgv_SizingDetails_Set1_RowsAdded(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewRowsAddedEventArgs) Handles dgv_SizingDetails_Set1.RowsAdded
        Dim n As Integer

        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub



        If IsNothing(dgv_SizingDetails_Set1.CurrentCell) Then Exit Sub

        With dgv_SizingDetails_Set1
            n = .RowCount
            .Rows(n - 1).Cells(0).Value = Val(n)
        End With

    End Sub

    Private Sub dgv_SizingDetails_Set2_CellEndEdit(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_SizingDetails_Set2.CellEndEdit
        dgv_SizingDetails_Set2_CellLeave(sender, e)
    End Sub

    Private Sub dgv_SizingDetails_Set2_CellEnter(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_SizingDetails_Set2.CellEnter
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim rect As Rectangle

        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub

        With dgv_SizingDetails_Set2

            dgv_SizDet_CelVal = .Rows(e.RowIndex).Cells(e.ColumnIndex).Value

            If Val(.CurrentRow.Cells(0).Value) = 0 Then
                .CurrentRow.Cells(0).Value = .CurrentRow.Index + 1
            End If
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1028" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1220" Then '---- Chinnu Sizing (Palladam)
                If e.RowIndex > 0 And e.ColumnIndex = 1 Then
                    If Val(.CurrentRow.Cells(1).Value) = 0 And e.RowIndex = .RowCount - 1 Then
                        .CurrentRow.Cells(1).Value = Val(.Rows(e.RowIndex - 1).Cells(1).Value) + 1
                        .CurrentRow.Cells(5).Value = .Rows(e.RowIndex - 1).Cells(5).Value
                        .CurrentRow.Cells(6).Value = .Rows(e.RowIndex - 1).Cells(6).Value
                        .CurrentRow.Cells(7).Value = .Rows(e.RowIndex - 1).Cells(7).Value
                    End If
                    If e.ColumnIndex = 1 And e.RowIndex = .RowCount - 1 And Val(.CurrentRow.Cells(5).Value) = 0 And Val(.CurrentRow.Cells(6).Value) = 0 And Val(.CurrentRow.Cells(7).Value) = 0 Then
                        .CurrentRow.Cells(1).Value = Val(.Rows(e.RowIndex - 1).Cells(1).Value) + 1
                        .CurrentRow.Cells(5).Value = .Rows(e.RowIndex - 1).Cells(5).Value
                        .CurrentRow.Cells(6).Value = .Rows(e.RowIndex - 1).Cells(6).Value
                        .CurrentRow.Cells(7).Value = .Rows(e.RowIndex - 1).Cells(7).Value
                    End If
                End If
            End If

            If e.ColumnIndex = 9 Then

                If cbo_Sizing2_Shift.Visible = False Or Val(cbo_Sizing2_Shift.Tag) <> e.RowIndex Then

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing2_Shift.Left = .Left + rect.Left
                    cbo_Sizing2_Shift.Top = .Top + rect.Top

                    cbo_Sizing2_Shift.Width = rect.Width
                    cbo_Sizing2_Shift.Height = rect.Height
                    cbo_Sizing2_Shift.Text = .CurrentCell.Value

                    cbo_Sizing2_Shift.Tag = Val(e.RowIndex)
                    cbo_Sizing2_Shift.Visible = True

                    cbo_Sizing2_Shift.BringToFront()
                    cbo_Sizing2_Shift.Focus()

                End If

            Else
                cbo_Sizing2_Shift.Visible = False
                cbo_Sizing2_Shift.Tag = -1
                cbo_Sizing2_Shift.Text = ""
            End If

            If e.ColumnIndex = 13 Then

                If cbo_Sizing2_FrontSizer1.Visible = False Or Val(cbo_Sizing2_FrontSizer1.Tag) <> e.RowIndex Then

                    cbo_Sizing2_FrontSizer1.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing2_FrontSizer1.DataSource = Dt1
                    cbo_Sizing2_FrontSizer1.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing2_FrontSizer1.Left = .Left + rect.Left
                    cbo_Sizing2_FrontSizer1.Top = .Top + rect.Top

                    cbo_Sizing2_FrontSizer1.Width = rect.Width
                    cbo_Sizing2_FrontSizer1.Height = rect.Height
                    cbo_Sizing2_FrontSizer1.Text = .CurrentCell.Value

                    cbo_Sizing2_FrontSizer1.Tag = Val(e.RowIndex)
                    cbo_Sizing2_FrontSizer1.Visible = True

                    cbo_Sizing2_FrontSizer1.BringToFront()
                    cbo_Sizing2_FrontSizer1.Focus()


                End If

            Else
                cbo_Sizing2_FrontSizer1.Visible = False
                cbo_Sizing2_FrontSizer1.Tag = -1
                cbo_Sizing2_FrontSizer1.Text = ""

            End If

            If e.ColumnIndex = 15 Then

                If cbo_Sizing2_BackSizer1.Visible = False Or Val(cbo_Sizing2_BackSizer1.Tag) <> e.RowIndex Then

                    cbo_Sizing2_BackSizer1.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing2_BackSizer1.DataSource = Dt1
                    cbo_Sizing2_BackSizer1.DisplayMember = "Employee_name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing2_BackSizer1.Left = .Left + rect.Left
                    cbo_Sizing2_BackSizer1.Top = .Top + rect.Top

                    cbo_Sizing2_BackSizer1.Width = rect.Width
                    cbo_Sizing2_BackSizer1.Height = rect.Height
                    cbo_Sizing2_BackSizer1.Text = .CurrentCell.Value

                    cbo_Sizing2_BackSizer1.Tag = Val(e.RowIndex)
                    cbo_Sizing2_BackSizer1.Visible = True

                    cbo_Sizing2_BackSizer1.BringToFront()
                    cbo_Sizing2_BackSizer1.Focus()



                End If

            Else
                cbo_Sizing2_BackSizer1.Visible = False
                cbo_Sizing2_BackSizer1.Tag = -1
                cbo_Sizing2_BackSizer1.Text = ""

            End If


            If .CurrentCell.ColumnIndex = 17 Then

                If cbo_Sizing2_Boiler1.Visible = False Or Val(cbo_Sizing2_Boiler1.Tag) <> e.RowIndex Then

                    cbo_Sizing2_Boiler1.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing2_Boiler1.DataSource = Dt1
                    cbo_Sizing2_Boiler1.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing2_Boiler1.Left = .Left + rect.Left
                    cbo_Sizing2_Boiler1.Top = .Top + rect.Top

                    cbo_Sizing2_Boiler1.Width = rect.Width
                    cbo_Sizing2_Boiler1.Height = rect.Height
                    cbo_Sizing2_Boiler1.Text = .CurrentCell.Value

                    cbo_Sizing2_Boiler1.Tag = Val(e.RowIndex)
                    cbo_Sizing2_Boiler1.Visible = True

                    cbo_Sizing2_Boiler1.BringToFront()
                    cbo_Sizing2_Boiler1.Focus()

                End If

            Else
                cbo_Sizing2_Boiler1.Visible = False
                cbo_Sizing2_Boiler1.Tag = -1
                cbo_Sizing2_Boiler1.Text = ""

            End If
            If e.ColumnIndex = 19 Then

                If cbo_Sizing2_Cooker.Visible = False Or Val(cbo_Sizing2_Cooker.Tag) <> e.RowIndex Then

                    cbo_Sizing2_Cooker.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing2_Cooker.DataSource = Dt1
                    cbo_Sizing2_Cooker.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing2_Cooker.Left = .Left + rect.Left
                    cbo_Sizing2_Cooker.Top = .Top + rect.Top

                    cbo_Sizing2_Cooker.Width = rect.Width
                    cbo_Sizing2_Cooker.Height = rect.Height
                    cbo_Sizing2_Cooker.Text = .CurrentCell.Value

                    cbo_Sizing2_Cooker.Tag = Val(e.RowIndex)
                    cbo_Sizing2_Cooker.Visible = True

                    cbo_Sizing2_Cooker.BringToFront()
                    cbo_Sizing2_Cooker.Focus()


                End If

            Else
                cbo_Sizing2_Cooker.Visible = False
                cbo_Sizing2_Cooker.Tag = -1
                cbo_Sizing2_Cooker.Text = ""

            End If

            If e.ColumnIndex = 21 Then

                If cbo_Sizing2_FrontSizer2.Visible = False Or Val(cbo_Sizing2_FrontSizer2.Tag) <> e.RowIndex Then

                    cbo_Sizing2_FrontSizer2.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing2_FrontSizer2.DataSource = Dt1
                    cbo_Sizing2_FrontSizer2.DisplayMember = "Employee_name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing2_FrontSizer2.Left = .Left + rect.Left
                    cbo_Sizing2_FrontSizer2.Top = .Top + rect.Top

                    cbo_Sizing2_FrontSizer2.Width = rect.Width
                    cbo_Sizing2_FrontSizer2.Height = rect.Height
                    cbo_Sizing2_FrontSizer2.Text = .CurrentCell.Value

                    cbo_Sizing2_FrontSizer2.Tag = Val(e.RowIndex)
                    cbo_Sizing2_FrontSizer2.Visible = True

                    cbo_Sizing2_FrontSizer2.BringToFront()
                    cbo_Sizing2_FrontSizer2.Focus()



                End If

            Else
                cbo_Sizing2_FrontSizer2.Visible = False
                cbo_Sizing2_FrontSizer2.Tag = -1
                cbo_Sizing2_FrontSizer2.Text = ""

            End If


            If .CurrentCell.ColumnIndex = 23 Then

                If cbo_Sizing2_BackSizer2.Visible = False Or Val(cbo_Sizing2_BackSizer2.Tag) <> e.RowIndex Then

                    cbo_Sizing2_BackSizer2.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing2_BackSizer2.DataSource = Dt1
                    cbo_Sizing2_BackSizer2.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing2_BackSizer2.Left = .Left + rect.Left
                    cbo_Sizing2_BackSizer2.Top = .Top + rect.Top

                    cbo_Sizing2_BackSizer2.Width = rect.Width
                    cbo_Sizing2_BackSizer2.Height = rect.Height
                    cbo_Sizing2_BackSizer2.Text = .CurrentCell.Value

                    cbo_Sizing2_BackSizer2.Tag = Val(e.RowIndex)
                    cbo_Sizing2_BackSizer2.Visible = True

                    cbo_Sizing2_BackSizer2.BringToFront()
                    cbo_Sizing2_BackSizer2.Focus()

                End If

            Else
                cbo_Sizing2_BackSizer2.Visible = False
                cbo_Sizing2_BackSizer2.Tag = -1
                cbo_Sizing2_BackSizer2.Text = ""

            End If


            If .CurrentCell.ColumnIndex = 25 Then

                If cbo_Sizing2_Cooker2.Visible = False Or Val(cbo_Sizing2_Cooker2.Tag) <> e.RowIndex Then

                    cbo_Sizing2_Cooker2.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing2_Cooker2.DataSource = Dt1
                    cbo_Sizing2_Cooker2.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing2_Cooker2.Left = .Left + rect.Left
                    cbo_Sizing2_Cooker2.Top = .Top + rect.Top

                    cbo_Sizing2_Cooker2.Width = rect.Width
                    cbo_Sizing2_Cooker2.Height = rect.Height
                    cbo_Sizing2_Cooker2.Text = .CurrentCell.Value

                    cbo_Sizing2_Cooker2.Tag = Val(e.RowIndex)
                    cbo_Sizing2_Cooker2.Visible = True

                    cbo_Sizing2_Cooker2.BringToFront()
                    cbo_Sizing2_Cooker2.Focus()

                End If

            Else
                cbo_Sizing2_Cooker2.Visible = False
                cbo_Sizing2_Cooker2.Tag = -1
                cbo_Sizing2_Cooker2.Text = ""

            End If

            If .CurrentCell.ColumnIndex = 27 Then

                If cbo_Sizing2_Boiler2.Visible = False Or Val(cbo_Sizing2_Boiler2.Tag) <> e.RowIndex Then

                    cbo_Sizing2_Boiler2.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing2_Boiler2.DataSource = Dt1
                    cbo_Sizing2_Boiler2.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing2_Boiler2.Left = .Left + rect.Left
                    cbo_Sizing2_Boiler2.Top = .Top + rect.Top

                    cbo_Sizing2_Boiler2.Width = rect.Width
                    cbo_Sizing2_Boiler2.Height = rect.Height
                    cbo_Sizing2_Boiler2.Text = .CurrentCell.Value

                    cbo_Sizing2_Boiler2.Tag = Val(e.RowIndex)
                    cbo_Sizing2_Boiler2.Visible = True

                    cbo_Sizing2_Boiler2.BringToFront()
                    cbo_Sizing2_Boiler2.Focus()

                End If

            Else
                cbo_Sizing2_Boiler2.Visible = False
                cbo_Sizing2_Boiler2.Tag = -1
                cbo_Sizing2_Boiler2.Text = ""

            End If

            If e.ColumnIndex = 31 Then

                If cbo_Sizing2_Vendor.Visible = False Or Val(cbo_Sizing2_Vendor.Tag) <> e.RowIndex Then

                    'dgv_ActCtrlName = dgv_Details.Name

                    cbo_Sizing2_Vendor.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Vendor_Name from Vendor_Head Order by Vendor_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing2_Vendor.DataSource = Dt1
                    cbo_Sizing2_Vendor.DisplayMember = "Vendor_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing2_Vendor.Left = .Left + rect.Left  '  .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False).Left
                    cbo_Sizing2_Vendor.Top = .Top + rect.Top  ' .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False).Top
                    cbo_Sizing2_Vendor.Width = rect.Width  ' .CurrentCell.Size.Width
                    cbo_Sizing2_Vendor.Height = rect.Height  ' rect.Height

                    cbo_Sizing2_Vendor.Text = .CurrentCell.Value  '  Trim(.CurrentRow.Cells(e.ColumnIndex).Value)

                    cbo_Sizing2_Vendor.Tag = Val(e.RowIndex)
                    cbo_Sizing2_Vendor.Visible = True

                    cbo_Sizing2_Vendor.BringToFront()
                    cbo_Sizing2_Vendor.Focus()



                End If

            Else

                cbo_Sizing2_Vendor.Visible = False
                cbo_Sizing2_Vendor.Tag = -1
                cbo_Sizing2_Vendor.Text = ""

            End If


        End With
    End Sub

    Private Sub dgv_SizingDetails_Set2_CellLeave(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_SizingDetails_Set2.CellLeave
        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        With dgv_SizingDetails_Set2
            If .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 4 Then
                If Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value) <> 0 Then
                    .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = Format(Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value), "#########0.0")
                End If
            End If
            If .CurrentCell.ColumnIndex = 6 Or .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 10 Or .CurrentCell.ColumnIndex = 11 Or .CurrentCell.ColumnIndex = 12 Or .CurrentCell.ColumnIndex = 14 Or .CurrentCell.ColumnIndex = 16 Or .CurrentCell.ColumnIndex = 18 Or .CurrentCell.ColumnIndex = 20 Or .CurrentCell.ColumnIndex = 22 Or .CurrentCell.ColumnIndex = 24 Or .CurrentCell.ColumnIndex = 26 Or .CurrentCell.ColumnIndex = 28 Or .CurrentCell.ColumnIndex = 30 Or .CurrentCell.ColumnIndex = 34 Then
                If Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value) <> 0 Then
                    .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = Format(Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value), "#########0.00")
                End If
            End If
            If .CurrentCell.ColumnIndex = 32 Or .CurrentCell.ColumnIndex = 33 Then
                If Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value) <> 0 Then
                    .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = Format(Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value), "#########0.000")
                End If
            End If
        End With
    End Sub

    Private Sub dgv_SizingDetails_Set2_CellValueChanged(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_SizingDetails_Set2.CellValueChanged
        Dim GrsWgt As Double = 0
        Dim Pickup As Single = 0
        Dim aNetWt As Single = 0

        Try
            If IsNothing(dgv_SizingDetails_Set2.CurrentCell) Then Exit Sub

            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            With dgv_SizingDetails_Set2
                If .Visible Then

                    If IsNothing(.CurrentCell) Then Exit Sub

                    If .CurrentCell.ColumnIndex = 1 Or .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 5 Or .CurrentCell.ColumnIndex = 6 Or .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 30 Or .CurrentCell.ColumnIndex = 31 Or .CurrentCell.ColumnIndex = 32 Then 'Or .CurrentCell.ColumnIndex = 33 Or .CurrentCell.ColumnIndex = 34 Then
                        If .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 30 Then
                            If (.CurrentCell.ColumnIndex = 3 And Val(.CurrentRow.Cells(30).Value) <> 0) Or (.CurrentCell.ColumnIndex = 30 And Val(dgv_SizDet_CelVal) <> Val(.Rows(e.RowIndex).Cells(e.ColumnIndex).Value)) Then
                                GrsWgt = Sizing_Beam_Weight_Calculation_From_PickUp(2, Val(.CurrentRow.Cells(7).Value), Val(.CurrentRow.Cells(30).Value), Val(.CurrentRow.Cells(3).Value))
                                .CurrentRow.Cells(2).Value = Format(Val(GrsWgt), "#########0.000")
                            End If
                            .CurrentRow.Cells(4).Value = Format(Val(.CurrentRow.Cells(2).Value) - Val(.CurrentRow.Cells(3).Value), "#########0.0")
                        End If

                        If .CurrentCell.ColumnIndex = 5 Or .CurrentCell.ColumnIndex = 6 Then
                            If Val(.CurrentRow.Cells(5).Value) <> 0 And Val(.CurrentRow.Cells(6).Value) <> 0 Then
                                .CurrentRow.Cells(7).Value = Format(Val(.CurrentRow.Cells(5).Value) * Val(.CurrentRow.Cells(6).Value), "#########0.000")
                            End If
                        End If


                        If (.CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 5 Or .CurrentCell.ColumnIndex = 6 Or .CurrentCell.ColumnIndex = 7) And Val(.CurrentCell.Value) <> 0 Then
                            If .CurrentRow.Index = .Rows.Count - 1 Then
                                .Rows.Add()
                            End If
                        End If
                        If .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 32 Then ' Or .CurrentCell.ColumnIndex = 33 Or .CurrentCell.ColumnIndex = 34 Then

                            aNetWt = 0
                            If Val(.CurrentRow.Cells(32).Value) <> 0 Then
                                aNetWt = Format(Val(.CurrentRow.Cells(32).Value) - Val(.CurrentRow.Cells(3).Value), "#########0.000")
                            End If
                            .CurrentRow.Cells(33).Value = Format(Val(aNetWt), "#########0.000")
                            PickUp_BeamNoWise_Calculation(2, e.RowIndex, e.ColumnIndex, dgv_SizingDetails_Set2, dgv_WarpingDetails_Total_Set2)
                        End If

                        TotalSizing_Calculation()

                    End If
                    'If .CurrentCell.ColumnIndex = 7 Then
                    '    If .CurrentRow.Index = .Rows.Count - 1 And .CurrentRow.Cells(7).Value <> 0 Then
                    '        .Rows.Add()
                    '    End If
                    'End If
                End If

            End With
        Catch ex As Exception
            '----

        End Try


    End Sub

    Private Sub dgv_SizingDetails_Set2_EditingControlShowing(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewEditingControlShowingEventArgs) Handles dgv_SizingDetails_Set2.EditingControlShowing
        dgtxt_SizingDetails_Set2 = CType(dgv_SizingDetails_Set2.EditingControl, DataGridViewTextBoxEditingControl)
    End Sub

    Private Sub dgv_SizingDetails_Set2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgv_SizingDetails_Set2.KeyUp
        Dim i As Integer

        If e.Control = True And UCase(Chr(e.KeyCode)) = "D" Then

            With dgv_SizingDetails_Set2

                If Trim(.Rows(.CurrentRow.Index).Cells(8).Value) = "" Then

                    If .CurrentRow.Index = .RowCount - 1 Then
                        For i = 1 To .Columns.Count - 1
                            .Rows(.CurrentRow.Index).Cells(i).Value = ""
                        Next

                    Else
                        .Rows.RemoveAt(.CurrentRow.Index)

                    End If

                    TotalSizing_Calculation()

                Else
                    MessageBox.Show("Pavu already delivered", "DOES NOT DELETE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                    Exit Sub

                End If

            End With

        End If

    End Sub

    Private Sub dgv_SizingDetails_Set2_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgv_SizingDetails_Set2.LostFocus
        On Error Resume Next
        If Not IsNothing(sender.CurrentCell) Then sender.CurrentCell.Selected = False
    End Sub

    Private Sub dgv_SizingDetails_Set2_RowsAdded(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewRowsAddedEventArgs) Handles dgv_SizingDetails_Set2.RowsAdded
        Dim n As Integer

        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        With dgv_SizingDetails_Set2
            n = .RowCount
            .Rows(n - 1).Cells(0).Value = Val(n)
        End With
    End Sub

    Private Sub dgv_SizingDetails_Set3_CellEndEdit(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_SizingDetails_Set3.CellEndEdit
        dgv_SizingDetails_Set3_CellLeave(sender, e)
    End Sub

    Private Sub dgv_SizingDetails_Set3_CellEnter(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_SizingDetails_Set3.CellEnter

        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim rect As Rectangle

        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub


        With dgv_SizingDetails_Set3
            dgv_SizDet_CelVal = .Rows(e.RowIndex).Cells(e.ColumnIndex).Value

            If Val(.CurrentRow.Cells(0).Value) = 0 Then
                .CurrentRow.Cells(0).Value = .CurrentRow.Index + 1
            End If
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1028" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1220" Then '---- Chinnu Sizing (Palladam)
                If e.RowIndex > 0 And e.ColumnIndex = 1 Then
                    If Val(.CurrentRow.Cells(1).Value) = 0 And e.RowIndex = .RowCount - 1 Then
                        .CurrentRow.Cells(1).Value = Val(.Rows(e.RowIndex - 1).Cells(1).Value) + 1
                        .CurrentRow.Cells(5).Value = .Rows(e.RowIndex - 1).Cells(5).Value
                        .CurrentRow.Cells(6).Value = .Rows(e.RowIndex - 1).Cells(6).Value
                        .CurrentRow.Cells(7).Value = .Rows(e.RowIndex - 1).Cells(7).Value
                    End If
                    If e.ColumnIndex = 1 And e.RowIndex = .RowCount - 1 And Val(.CurrentRow.Cells(5).Value) = 0 And Val(.CurrentRow.Cells(6).Value) = 0 And Val(.CurrentRow.Cells(7).Value) = 0 Then
                        .CurrentRow.Cells(1).Value = Val(.Rows(e.RowIndex - 1).Cells(1).Value) + 1
                        .CurrentRow.Cells(5).Value = .Rows(e.RowIndex - 1).Cells(5).Value
                        .CurrentRow.Cells(6).Value = .Rows(e.RowIndex - 1).Cells(6).Value
                        .CurrentRow.Cells(7).Value = .Rows(e.RowIndex - 1).Cells(7).Value
                    End If
                End If
            End If


            If e.ColumnIndex = 9 Then

                If cbo_Sizing3_Shift.Visible = False Or Val(cbo_Sizing3_Shift.Tag) <> e.RowIndex Then

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing3_Shift.Left = .Left + rect.Left
                    cbo_Sizing3_Shift.Top = .Top + rect.Top

                    cbo_Sizing3_Shift.Width = rect.Width
                    cbo_Sizing3_Shift.Height = rect.Height
                    cbo_Sizing3_Shift.Text = .CurrentCell.Value

                    cbo_Sizing3_Shift.Tag = Val(e.RowIndex)
                    cbo_Sizing3_Shift.Visible = True

                    cbo_Sizing3_Shift.BringToFront()
                    cbo_Sizing3_Shift.Focus()

                End If

            Else
                cbo_Sizing3_Shift.Visible = False
                cbo_Sizing3_Shift.Tag = -1
                cbo_Sizing3_Shift.Text = ""
            End If

            If e.ColumnIndex = 13 Then

                If cbo_Sizing3_FrontSizer1.Visible = False Or Val(cbo_Sizing3_FrontSizer1.Tag) <> e.RowIndex Then

                    cbo_Sizing3_FrontSizer1.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing3_FrontSizer1.DataSource = Dt1
                    cbo_Sizing3_FrontSizer1.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing3_FrontSizer1.Left = .Left + rect.Left
                    cbo_Sizing3_FrontSizer1.Top = .Top + rect.Top

                    cbo_Sizing3_FrontSizer1.Width = rect.Width
                    cbo_Sizing3_FrontSizer1.Height = rect.Height
                    cbo_Sizing3_FrontSizer1.Text = .CurrentCell.Value

                    cbo_Sizing3_FrontSizer1.Tag = Val(e.RowIndex)
                    cbo_Sizing3_FrontSizer1.Visible = True

                    cbo_Sizing3_FrontSizer1.BringToFront()
                    cbo_Sizing3_FrontSizer1.Focus()


                End If

            Else
                cbo_Sizing3_FrontSizer1.Visible = False
                cbo_Sizing3_FrontSizer1.Tag = -1
                cbo_Sizing3_FrontSizer1.Text = ""

            End If

            If e.ColumnIndex = 15 Then

                If cbo_Sizing3_BackSizer1.Visible = False Or Val(cbo_Sizing3_BackSizer1.Tag) <> e.RowIndex Then

                    cbo_Sizing3_BackSizer1.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing3_BackSizer1.DataSource = Dt1
                    cbo_Sizing3_BackSizer1.DisplayMember = "Employee_name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing3_BackSizer1.Left = .Left + rect.Left
                    cbo_Sizing3_BackSizer1.Top = .Top + rect.Top

                    cbo_Sizing3_BackSizer1.Width = rect.Width
                    cbo_Sizing3_BackSizer1.Height = rect.Height
                    cbo_Sizing3_BackSizer1.Text = .CurrentCell.Value

                    cbo_Sizing3_BackSizer1.Tag = Val(e.RowIndex)
                    cbo_Sizing3_BackSizer1.Visible = True

                    cbo_Sizing3_BackSizer1.BringToFront()
                    cbo_Sizing3_BackSizer1.Focus()



                End If

            Else
                cbo_Sizing3_BackSizer1.Visible = False
                cbo_Sizing3_BackSizer1.Tag = -1
                cbo_Sizing3_BackSizer1.Text = ""

            End If


            If .CurrentCell.ColumnIndex = 17 Then

                If cbo_Sizing3_Boiler1.Visible = False Or Val(cbo_Sizing3_Boiler1.Tag) <> e.RowIndex Then

                    cbo_Sizing3_Boiler1.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing3_Boiler1.DataSource = Dt1
                    cbo_Sizing3_Boiler1.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing3_Boiler1.Left = .Left + rect.Left
                    cbo_Sizing3_Boiler1.Top = .Top + rect.Top

                    cbo_Sizing3_Boiler1.Width = rect.Width
                    cbo_Sizing3_Boiler1.Height = rect.Height
                    cbo_Sizing3_Boiler1.Text = .CurrentCell.Value

                    cbo_Sizing3_Boiler1.Tag = Val(e.RowIndex)
                    cbo_Sizing3_Boiler1.Visible = True

                    cbo_Sizing3_Boiler1.BringToFront()
                    cbo_Sizing3_Boiler1.Focus()

                End If

            Else
                cbo_Sizing3_Boiler1.Visible = False
                cbo_Sizing3_Boiler1.Tag = -1
                cbo_Sizing3_Boiler1.Text = ""

            End If
            If e.ColumnIndex = 19 Then

                If cbo_Sizing3_Cooker.Visible = False Or Val(cbo_Sizing3_Cooker.Tag) <> e.RowIndex Then

                    cbo_Sizing3_Cooker.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing3_Cooker.DataSource = Dt1
                    cbo_Sizing3_Cooker.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing3_Cooker.Left = .Left + rect.Left
                    cbo_Sizing3_Cooker.Top = .Top + rect.Top

                    cbo_Sizing3_Cooker.Width = rect.Width
                    cbo_Sizing3_Cooker.Height = rect.Height
                    cbo_Sizing3_Cooker.Text = .CurrentCell.Value

                    cbo_Sizing3_Cooker.Tag = Val(e.RowIndex)
                    cbo_Sizing3_Cooker.Visible = True

                    cbo_Sizing3_Cooker.BringToFront()
                    cbo_Sizing3_Cooker.Focus()


                End If

            Else
                cbo_Sizing3_Cooker.Visible = False
                cbo_Sizing3_Cooker.Tag = -1
                cbo_Sizing3_Cooker.Text = ""

            End If

            If e.ColumnIndex = 21 Then

                If cbo_Sizing3_FrontSizer2.Visible = False Or Val(cbo_Sizing3_FrontSizer2.Tag) <> e.RowIndex Then

                    cbo_Sizing3_FrontSizer2.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing3_FrontSizer2.DataSource = Dt1
                    cbo_Sizing3_FrontSizer2.DisplayMember = "Employee_name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing3_FrontSizer2.Left = .Left + rect.Left
                    cbo_Sizing3_FrontSizer2.Top = .Top + rect.Top

                    cbo_Sizing3_FrontSizer2.Width = rect.Width
                    cbo_Sizing3_FrontSizer2.Height = rect.Height
                    cbo_Sizing3_FrontSizer2.Text = .CurrentCell.Value

                    cbo_Sizing3_FrontSizer2.Tag = Val(e.RowIndex)
                    cbo_Sizing3_FrontSizer2.Visible = True

                    cbo_Sizing3_FrontSizer2.BringToFront()
                    cbo_Sizing3_FrontSizer2.Focus()



                End If

            Else
                cbo_Sizing3_FrontSizer2.Visible = False
                cbo_Sizing3_FrontSizer2.Tag = -1
                cbo_Sizing3_FrontSizer2.Text = ""

            End If


            If .CurrentCell.ColumnIndex = 23 Then

                If cbo_Sizing3_BackSizer2.Visible = False Or Val(cbo_Sizing3_BackSizer2.Tag) <> e.RowIndex Then

                    cbo_Sizing3_BackSizer2.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing3_BackSizer2.DataSource = Dt1
                    cbo_Sizing3_BackSizer2.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing3_BackSizer2.Left = .Left + rect.Left
                    cbo_Sizing3_BackSizer2.Top = .Top + rect.Top

                    cbo_Sizing3_BackSizer2.Width = rect.Width
                    cbo_Sizing3_BackSizer2.Height = rect.Height
                    cbo_Sizing3_BackSizer2.Text = .CurrentCell.Value

                    cbo_Sizing3_BackSizer2.Tag = Val(e.RowIndex)
                    cbo_Sizing3_BackSizer2.Visible = True

                    cbo_Sizing3_BackSizer2.BringToFront()
                    cbo_Sizing3_BackSizer2.Focus()

                End If

            Else
                cbo_Sizing3_BackSizer2.Visible = False
                cbo_Sizing3_BackSizer2.Tag = -1
                cbo_Sizing3_BackSizer2.Text = ""

            End If


            If .CurrentCell.ColumnIndex = 25 Then

                If cbo_Sizing3_Cooker2.Visible = False Or Val(cbo_Sizing3_Cooker2.Tag) <> e.RowIndex Then

                    cbo_Sizing3_Cooker2.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing3_Cooker2.DataSource = Dt1
                    cbo_Sizing3_Cooker2.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing3_Cooker2.Left = .Left + rect.Left
                    cbo_Sizing3_Cooker2.Top = .Top + rect.Top

                    cbo_Sizing3_Cooker2.Width = rect.Width
                    cbo_Sizing3_Cooker2.Height = rect.Height
                    cbo_Sizing3_Cooker2.Text = .CurrentCell.Value

                    cbo_Sizing3_Cooker2.Tag = Val(e.RowIndex)
                    cbo_Sizing3_Cooker2.Visible = True

                    cbo_Sizing3_Cooker2.BringToFront()
                    cbo_Sizing3_Cooker2.Focus()

                End If

            Else
                cbo_Sizing3_Cooker2.Visible = False
                cbo_Sizing3_Cooker2.Tag = -1
                cbo_Sizing3_Cooker2.Text = ""

            End If

            If .CurrentCell.ColumnIndex = 27 Then

                If cbo_Sizing3_Boiler2.Visible = False Or Val(cbo_Sizing3_Boiler2.Tag) <> e.RowIndex Then

                    cbo_Sizing3_Boiler2.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head order by Employee_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing3_Boiler2.DataSource = Dt1
                    cbo_Sizing3_Boiler2.DisplayMember = "Employee_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing3_Boiler2.Left = .Left + rect.Left
                    cbo_Sizing3_Boiler2.Top = .Top + rect.Top

                    cbo_Sizing3_Boiler2.Width = rect.Width
                    cbo_Sizing3_Boiler2.Height = rect.Height
                    cbo_Sizing3_Boiler2.Text = .CurrentCell.Value

                    cbo_Sizing3_Boiler2.Tag = Val(e.RowIndex)
                    cbo_Sizing3_Boiler2.Visible = True

                    cbo_Sizing3_Boiler2.BringToFront()
                    cbo_Sizing3_Boiler2.Focus()

                End If

            Else
                cbo_Sizing3_Boiler2.Visible = False
                cbo_Sizing3_Boiler2.Tag = -1
                cbo_Sizing3_Boiler2.Text = ""

            End If
            If e.ColumnIndex = 31 Then

                If cbo_Sizing3_Vendor.Visible = False Or Val(cbo_Sizing3_Vendor.Tag) <> e.RowIndex Then

                    'dgv_ActCtrlName = dgv_Details.Name

                    cbo_Sizing3_Vendor.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Vendor_Name from Vendor_Head Order by Vendor_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Sizing3_Vendor.DataSource = Dt1
                    cbo_Sizing3_Vendor.DisplayMember = "Vendor_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Sizing3_Vendor.Left = .Left + rect.Left  '  .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False).Left
                    cbo_Sizing3_Vendor.Top = .Top + rect.Top  ' .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False).Top
                    cbo_Sizing3_Vendor.Width = rect.Width  ' .CurrentCell.Size.Width
                    cbo_Sizing3_Vendor.Height = rect.Height  ' rect.Height

                    cbo_Sizing3_Vendor.Text = .CurrentCell.Value  '  Trim(.CurrentRow.Cells(e.ColumnIndex).Value)

                    cbo_Sizing3_Vendor.Tag = Val(e.RowIndex)
                    cbo_Sizing3_Vendor.Visible = True

                    cbo_Sizing3_Vendor.BringToFront()
                    cbo_Sizing3_Vendor.Focus()



                End If

            Else

                cbo_Sizing3_Vendor.Visible = False
                cbo_Sizing3_Vendor.Tag = -1
                cbo_Sizing3_Vendor.Text = ""

            End If

        End With
    End Sub

    Private Sub dgv_SizingDetails_Set3_CellLeave(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_SizingDetails_Set3.CellLeave
        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        With dgv_SizingDetails_Set3
            If .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 4 Then
                If Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value) <> 0 Then
                    .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = Format(Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value), "#########0.0")
                End If
            End If
            If .CurrentCell.ColumnIndex = 6 Or .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 10 Or .CurrentCell.ColumnIndex = 11 Or .CurrentCell.ColumnIndex = 12 Or .CurrentCell.ColumnIndex = 14 Or .CurrentCell.ColumnIndex = 16 Or .CurrentCell.ColumnIndex = 18 Or .CurrentCell.ColumnIndex = 20 Or .CurrentCell.ColumnIndex = 22 Or .CurrentCell.ColumnIndex = 24 Or .CurrentCell.ColumnIndex = 26 Or .CurrentCell.ColumnIndex = 28 Or .CurrentCell.ColumnIndex = 30 Or .CurrentCell.ColumnIndex = 34 Then
                If Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value) <> 0 Then
                    .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = Format(Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value), "#########0.00")
                End If
            End If
            If .CurrentCell.ColumnIndex = 32 Or .CurrentCell.ColumnIndex = 33 Then
                If Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value) <> 0 Then
                    .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = Format(Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value), "#########0.000")
                End If
            End If
        End With
    End Sub


    Private Sub dgv_SizingDetails_Set3_CellValueChanged(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_SizingDetails_Set3.CellValueChanged
        Dim GrsWgt As Double = 0
        Dim Pickup As Single = 0
        Dim aNetWt As Single = 0

        Try

            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub

            With dgv_SizingDetails_Set3

                If IsNothing(.CurrentCell) Then Exit Sub

                If .Visible Then

                    If .CurrentCell.ColumnIndex = 1 Or .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 5 Or .CurrentCell.ColumnIndex = 6 Or .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 30 Or .CurrentCell.ColumnIndex = 31 Or .CurrentCell.ColumnIndex = 32 Then 'Or .CurrentCell.ColumnIndex = 33 Or .CurrentCell.ColumnIndex = 34 Then
                        If .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 30 Then
                            If (.CurrentCell.ColumnIndex = 3 And Val(.CurrentRow.Cells(30).Value) <> 0) Or (.CurrentCell.ColumnIndex = 30 And Val(dgv_SizDet_CelVal) <> Val(.Rows(e.RowIndex).Cells(e.ColumnIndex).Value)) Then
                                GrsWgt = Sizing_Beam_Weight_Calculation_From_PickUp(3, Val(.CurrentRow.Cells(7).Value), Val(.CurrentRow.Cells(30).Value), Val(.CurrentRow.Cells(3).Value))
                                .CurrentRow.Cells(2).Value = Format(Val(GrsWgt), "#########0.000")
                            End If
                            .CurrentRow.Cells(4).Value = Format(Val(.CurrentRow.Cells(2).Value) - Val(.CurrentRow.Cells(3).Value), "#########0.0")
                        End If

                        If .CurrentCell.ColumnIndex = 5 Or .CurrentCell.ColumnIndex = 6 Then
                            If Val(.CurrentRow.Cells(5).Value) <> 0 And Val(.CurrentRow.Cells(6).Value) <> 0 Then
                                .CurrentRow.Cells(7).Value = Format(Val(.CurrentRow.Cells(5).Value) * Val(.CurrentRow.Cells(6).Value), "#########0.000")
                            End If
                        End If


                        If (.CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 5 Or .CurrentCell.ColumnIndex = 6 Or .CurrentCell.ColumnIndex = 7) And Val(.CurrentCell.Value) <> 0 Then
                            If .CurrentRow.Index = .Rows.Count - 1 Then
                                .Rows.Add()
                            End If
                        End If
                        If .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 32 Then ' Or .CurrentCell.ColumnIndex = 33 Or .CurrentCell.ColumnIndex = 34 Then

                            aNetWt = 0
                            If Val(.CurrentRow.Cells(32).Value) <> 0 Then
                                aNetWt = Format(Val(.CurrentRow.Cells(32).Value) - Val(.CurrentRow.Cells(3).Value), "#########0.000")
                            End If
                            .CurrentRow.Cells(33).Value = Format(Val(aNetWt), "#########0.000")
                            PickUp_BeamNoWise_Calculation(1, e.RowIndex, e.ColumnIndex, dgv_SizingDetails_Set3, dgv_WarpingDetails_Total_Set3)
                        End If

                        TotalSizing_Calculation()

                    End If
                    'If .CurrentCell.ColumnIndex = 7 Then
                    '    If .CurrentRow.Index = .Rows.Count - 1 And .CurrentRow.Cells(7).Value <> 0 Then
                    '        .Rows.Add()
                    '    End If
                    'End If
                End If

            End With
        Catch ex As Exception
            '----

        End Try

    End Sub

    Private Sub dgv_SizingDetails_Set3_EditingControlShowing(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewEditingControlShowingEventArgs) Handles dgv_SizingDetails_Set3.EditingControlShowing
        dgtxt_SizingDetails_Set3 = CType(dgv_SizingDetails_Set3.EditingControl, DataGridViewTextBoxEditingControl)
    End Sub

    Private Sub dgv_SizingDetails_Set3_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgv_SizingDetails_Set3.KeyUp
        Dim i As Integer

        If e.Control = True And UCase(Chr(e.KeyCode)) = "D" Then

            With dgv_SizingDetails_Set3

                If Trim(.Rows(.CurrentRow.Index).Cells(8).Value) = "" Then

                    If .CurrentRow.Index = .RowCount - 1 Then
                        For i = 1 To .Columns.Count - 1
                            .Rows(.CurrentRow.Index).Cells(i).Value = ""
                        Next

                    Else
                        .Rows.RemoveAt(.CurrentRow.Index)

                    End If

                    TotalSizing_Calculation()

                Else
                    MessageBox.Show("Pavu already delivered", "DOES NOT DELETE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                    Exit Sub

                End If

            End With

        End If

    End Sub

    Private Sub dgv_SizingDetails_Set3_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgv_SizingDetails_Set3.LostFocus
        On Error Resume Next
        If Not IsNothing(sender.CurrentCell) Then sender.CurrentCell.Selected = False
    End Sub

    Private Sub dgv_SizingDetails_Set3_RowsAdded(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewRowsAddedEventArgs) Handles dgv_SizingDetails_Set3.RowsAdded
        Dim n As Integer

        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        With dgv_SizingDetails_Set3
            n = .RowCount
            .Rows(n - 1).Cells(0).Value = Val(n)
        End With

    End Sub

    Private Sub TotalSizing_Calculation()
        Dim Sno As Integer
        Dim TotSizBms As Integer
        Dim TotGrsWt As Single, TotTrWt As Single, TotNtWt As Single
        Dim TotAGrsWt As Single, TotANetWt As Single
        Dim TotPcs As Single, TotMtrs As Single
        Dim GTtSizBms As Integer
        Dim GTtGrsWt As Single, GTtTrWt As Single, GTtNtWt As Single, GTtActNtWt As Single
        Dim GTtPcs As Single, GTtMtrs As Single
        Dim vDup_PcsLen As String, vPc_Len As String


        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        If Siz_EmpRws_Ad_STS = True Then Exit Sub

        GTtSizBms = 0
        GTtGrsWt = 0
        GTtTrWt = 0
        GTtNtWt = 0
        GTtPcs = 0
        GTtMtrs = 0
        GTtActNtWt = 0

        Sno = 0
        TotSizBms = 0
        TotGrsWt = 0
        TotTrWt = 0
        TotNtWt = 0
        TotPcs = 0
        TotMtrs = 0
        TotAGrsWt = 0
        TotANetWt = 0

        vDup_PcsLen = "" : vPc_Len = ""

        With dgv_SizingDetails_Set1
            For i = 0 To .RowCount - 1
                Sno = Sno + 1
                .Rows(i).Cells(0).Value = Sno
                If Val(.Rows(i).Cells(7).Value) <> 0 Then
                    TotSizBms = TotSizBms + 1
                    TotGrsWt = TotGrsWt + Val(.Rows(i).Cells(2).Value)
                    TotTrWt = TotTrWt + Val(.Rows(i).Cells(3).Value)
                    TotNtWt = TotNtWt + Val(.Rows(i).Cells(4).Value)
                    TotPcs = TotPcs + Val(.Rows(i).Cells(5).Value)
                    TotMtrs = TotMtrs + Val(.Rows(i).Cells(7).Value)
                    TotAGrsWt = TotAGrsWt + Val(.Rows(i).Cells(32).Value)
                    TotANetWt = TotANetWt + Val(.Rows(i).Cells(33).Value)



                    If Val(.Rows(i).Cells(6).Value) <> 0 Then
                        If InStr(1, Trim(UCase(vDup_PcsLen)), "~" & Trim(Val(.Rows(i).Cells(6).Value)) & "~") = 0 Then
                            vPc_Len = Trim(vPc_Len) & IIf(Trim(vPc_Len) <> "", ", ", "") & Trim(Val(.Rows(i).Cells(6).Value))
                            vDup_PcsLen = Trim(vDup_PcsLen) & "~" & Trim(Val(.Rows(i).Cells(6).Value)) & "~"
                        End If
                    End If

                End If
            Next
        End With

        With dgv_SizingDetails_Total_Set1
            If .RowCount = 0 Then .Rows.Add()
            .Rows(0).Cells(1).Value = Val(TotSizBms)
            .Rows(0).Cells(2).Value = Format(Val(TotGrsWt), "########0.0")
            .Rows(0).Cells(3).Value = Format(Val(TotTrWt), "########0.0")
            .Rows(0).Cells(4).Value = Format(Val(TotNtWt), "########0.0")
            .Rows(0).Cells(5).Value = Format(Val(TotPcs), "########0.00")

            .Rows(0).Cells(7).Value = Format(Val(TotMtrs), "########0.00")
            .Rows(0).Cells(32).Value = Format(Val(TotAGrsWt), "########0.0")
            .Rows(0).Cells(33).Value = Format(Val(TotANetWt), "########0.0")
        End With

        GTtSizBms = GTtSizBms + TotSizBms
        GTtGrsWt = GTtGrsWt + TotGrsWt
        GTtTrWt = GTtTrWt + TotTrWt
        GTtNtWt = GTtNtWt + TotNtWt
        GTtPcs = GTtPcs + TotPcs
        GTtMtrs = GTtMtrs + TotMtrs
        GTtActNtWt = GTtActNtWt + TotANetWt
        Sno = 0
        TotSizBms = 0
        TotGrsWt = 0
        TotTrWt = 0
        TotNtWt = 0
        TotPcs = 0
        TotMtrs = 0
        TotAGrsWt = 0
        TotANetWt = 0
        With dgv_SizingDetails_Set2
            For i = 0 To .RowCount - 1
                Sno = Sno + 1
                .Rows(i).Cells(0).Value = Sno
                If Val(.Rows(i).Cells(7).Value) <> 0 Then
                    TotSizBms = TotSizBms + 1
                    TotGrsWt = TotGrsWt + Val(.Rows(i).Cells(2).Value)
                    TotTrWt = TotTrWt + Val(.Rows(i).Cells(3).Value)
                    TotNtWt = TotNtWt + Val(.Rows(i).Cells(4).Value)
                    TotPcs = TotPcs + Val(.Rows(i).Cells(5).Value)
                    TotMtrs = TotMtrs + Val(.Rows(i).Cells(7).Value)
                    TotAGrsWt = TotAGrsWt + Val(.Rows(i).Cells(32).Value)
                    TotANetWt = TotANetWt + Val(.Rows(i).Cells(33).Value)


                    If Val(.Rows(i).Cells(6).Value) <> 0 Then
                        If InStr(1, Trim(UCase(vDup_PcsLen)), "~" & Trim(Val(.Rows(i).Cells(6).Value)) & "~") = 0 Then
                            vPc_Len = Trim(vPc_Len) & IIf(Trim(vPc_Len) <> "", ", ", "") & Trim(Val(.Rows(i).Cells(6).Value))
                            vDup_PcsLen = Trim(vDup_PcsLen) & "~" & Trim(Val(.Rows(i).Cells(6).Value)) & "~"
                        End If
                    End If

                End If
            Next
        End With

        With dgv_SizingDetails_Total_Set2
            If .RowCount = 0 Then .Rows.Add()
            .Rows(0).Cells(1).Value = Val(TotSizBms)
            .Rows(0).Cells(2).Value = Format(Val(TotGrsWt), "########0.0")
            .Rows(0).Cells(3).Value = Format(Val(TotTrWt), "########0.0")
            .Rows(0).Cells(4).Value = Format(Val(TotNtWt), "########0.0")
            .Rows(0).Cells(5).Value = Format(Val(TotPcs), "########0.00")
            .Rows(0).Cells(7).Value = Format(Val(TotMtrs), "########0.00")
            .Rows(0).Cells(32).Value = Format(Val(TotAGrsWt), "########0.0")
            .Rows(0).Cells(33).Value = Format(Val(TotANetWt), "########0.0")
        End With

        GTtSizBms = GTtSizBms + TotSizBms
        GTtGrsWt = GTtGrsWt + TotGrsWt
        GTtTrWt = GTtTrWt + TotTrWt
        GTtNtWt = GTtNtWt + TotNtWt
        GTtPcs = GTtPcs + TotPcs
        GTtMtrs = GTtMtrs + TotMtrs
        GTtActNtWt = GTtActNtWt + TotANetWt

        Sno = 0
        TotSizBms = 0
        TotGrsWt = 0
        TotTrWt = 0
        TotNtWt = 0
        TotPcs = 0
        TotMtrs = 0
        TotAGrsWt = 0
        TotANetWt = 0
        With dgv_SizingDetails_Set3
            For i = 0 To .RowCount - 1
                Sno = Sno + 1
                .Rows(i).Cells(0).Value = Sno
                If Val(.Rows(i).Cells(7).Value) <> 0 Then
                    TotSizBms = TotSizBms + 1
                    TotGrsWt = TotGrsWt + Val(.Rows(i).Cells(2).Value)
                    TotTrWt = TotTrWt + Val(.Rows(i).Cells(3).Value)
                    TotNtWt = TotNtWt + Val(.Rows(i).Cells(4).Value)
                    TotPcs = TotPcs + Val(.Rows(i).Cells(5).Value)
                    TotMtrs = TotMtrs + Val(.Rows(i).Cells(7).Value)
                    TotAGrsWt = TotAGrsWt + Val(.Rows(i).Cells(32).Value)
                    TotANetWt = TotANetWt + Val(.Rows(i).Cells(33).Value)



                    If Val(.Rows(i).Cells(6).Value) <> 0 Then
                        If InStr(1, Trim(UCase(vDup_PcsLen)), "~" & Trim(Val(.Rows(i).Cells(6).Value)) & "~") = 0 Then
                            vPc_Len = Trim(vPc_Len) & IIf(Trim(vPc_Len) <> "", ", ", "") & Trim(Val(.Rows(i).Cells(6).Value))
                            vDup_PcsLen = Trim(vDup_PcsLen) & "~" & Trim(Val(.Rows(i).Cells(6).Value)) & "~"
                        End If
                    End If

                End If
            Next
        End With

        With dgv_SizingDetails_Total_Set3
            If .RowCount = 0 Then .Rows.Add()
            .Rows(0).Cells(1).Value = Val(TotSizBms)
            .Rows(0).Cells(2).Value = Format(Val(TotGrsWt), "########0.0")
            .Rows(0).Cells(3).Value = Format(Val(TotTrWt), "########0.0")
            .Rows(0).Cells(4).Value = Format(Val(TotNtWt), "########0.0")
            .Rows(0).Cells(5).Value = Format(Val(TotPcs), "########0.00")
            .Rows(0).Cells(7).Value = Format(Val(TotMtrs), "########0.00")
            .Rows(0).Cells(32).Value = Format(Val(TotAGrsWt), "########0.0")
            .Rows(0).Cells(33).Value = Format(Val(TotANetWt), "########0.0")
        End With

        GTtSizBms = GTtSizBms + TotSizBms
        GTtGrsWt = GTtGrsWt + TotGrsWt
        GTtTrWt = GTtTrWt + TotTrWt
        GTtNtWt = GTtNtWt + TotNtWt
        GTtPcs = GTtPcs + TotPcs
        GTtMtrs = GTtMtrs + TotMtrs
        GTtActNtWt = GTtActNtWt + TotANetWt

        lbl_Total_Sizing_Beams.Text = GTtSizBms
        lbl_Total_Sizing_GrossWeight.Text = Format(Val(GTtGrsWt), "#########0.0")
        lbl_Total_Sizing_GrossWeight.Text = Format(Val(lbl_Total_Sizing_GrossWeight.Text), "#########0.000")
        lbl_Total_Sizing_TareWeight.Text = Format(Val(GTtTrWt), "#########0.0")
        lbl_Total_Sizing_TareWeight.Text = Format(Val(lbl_Total_Sizing_TareWeight.Text), "#########0.000")
        lbl_Total_Sizing_NetWeight.Text = Format(Val(GTtNtWt), "#########0.0")
        lbl_Total_Sizing_ActualNetWeight.Text = Format(Val(GTtActNtWt), "#########0.0")
        lbl_Total_Sizing_NetWeight.Text = Format(Val(lbl_Total_Sizing_NetWeight.Text), "#########0.000")
        lbl_Total_Sizing_Pcs.Text = Val(GTtPcs)
        lbl_Total_Sizing_Meters.Text = Format(Val(GTtMtrs), "#########0.00")
        lbl_Tot_Sizing_Beams.Text = GTtSizBms
        lbl_Tot_Sizing_Meters.Text = Format(Val(GTtMtrs), "#########0.00")



    End Sub

    Private Sub tab_SizingDetails_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles tab_SizingDetails.SelectedIndexChanged
        If tab_SizingDetails.SelectedIndex = 0 Then
            If dgv_SizingDetails_Set1.Rows.Count <= 0 Then dgv_SizingDetails_Set1.Rows.Add()
            dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
            dgv_SizingDetails_Set1.Focus()
            dgv_SizingDetails_Set1.CurrentCell.Selected = True

        ElseIf tab_SizingDetails.SelectedIndex = 1 Then
            If dgv_SizingDetails_Set2.Rows.Count <= 0 Then dgv_SizingDetails_Set2.Rows.Add()
            dgv_SizingDetails_Set2.CurrentCell = dgv_SizingDetails_Set2.Rows(0).Cells(1)
            dgv_SizingDetails_Set2.Focus()
            dgv_SizingDetails_Set2.CurrentCell.Selected = True

        ElseIf tab_SizingDetails.SelectedIndex = 2 Then
            If dgv_SizingDetails_Set3.Rows.Count <= 0 Then dgv_SizingDetails_Set3.Rows.Add()
            dgv_SizingDetails_Set3.CurrentCell = dgv_SizingDetails_Set3.Rows(0).Cells(1)
            dgv_SizingDetails_Set3.Focus()
            dgv_SizingDetails_Set3.CurrentCell.Selected = True

        End If
    End Sub

    Private Sub dgv_YarnTakenDetails_CellEndEdit(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_YarnTakenDetails.CellEndEdit
        dgv_YarnTakenDetails_CellLeave(sender, e)
    End Sub

    Private Sub dgv_YarnTakenDetails_CellEnter(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_YarnTakenDetails.CellEnter
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim rect As Rectangle
        Dim CntID As Integer
        Dim MilID As Integer
        Dim Cns_Bg As Single, Wt_Cn As Single

        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        With dgv_YarnTakenDetails

            If Val(.CurrentRow.Cells(0).Value) = 0 Then
                .CurrentRow.Cells(0).Value = .CurrentRow.Index + 1
            End If

            If e.ColumnIndex = 1 And Trim(UCase(cbo_Type.Text)) <> "WARPING" Then

                If cbo_Grid_CountName.Visible = False Or Val(cbo_Grid_CountName.Tag) <> e.RowIndex Then

                    cbo_Grid_CountName.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Count_Name from Count_Head order by Count_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Grid_CountName.DataSource = Dt1
                    cbo_Grid_CountName.DisplayMember = "Count_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Grid_CountName.Left = .Left + rect.Left
                    cbo_Grid_CountName.Top = .Top + rect.Top

                    cbo_Grid_CountName.Width = rect.Width
                    cbo_Grid_CountName.Height = rect.Height
                    cbo_Grid_CountName.Text = .CurrentCell.Value

                    cbo_Grid_CountName.Tag = Val(e.RowIndex)
                    cbo_Grid_CountName.Visible = True

                    cbo_Grid_CountName.BringToFront()
                    cbo_Grid_CountName.Focus()



                End If

            Else
                cbo_Grid_CountName.Visible = False
                cbo_Grid_CountName.Tag = -1
                cbo_Grid_CountName.Text = ""

            End If

            If e.ColumnIndex = 2 And Trim(UCase(cbo_Type.Text)) <> "WARPING" Then

                If cbo_Grid_YarnType.Visible = False Or Val(cbo_Grid_YarnType.Tag) <> e.RowIndex Then

                    cbo_Grid_YarnType.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Yarn_Type from YarnType_Head order by Yarn_Type", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Grid_YarnType.DataSource = Dt1
                    cbo_Grid_YarnType.DisplayMember = "Yarn_Type"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Grid_YarnType.Left = .Left + rect.Left
                    cbo_Grid_YarnType.Top = .Top + rect.Top

                    cbo_Grid_YarnType.Width = rect.Width
                    cbo_Grid_YarnType.Height = rect.Height
                    cbo_Grid_YarnType.Text = .CurrentCell.Value

                    cbo_Grid_YarnType.Tag = Val(e.RowIndex)
                    cbo_Grid_YarnType.Visible = True

                    cbo_Grid_YarnType.BringToFront()
                    cbo_Grid_YarnType.Focus()


                End If

            Else
                cbo_Grid_YarnType.Visible = False
                cbo_Grid_YarnType.Tag = -1
                cbo_Grid_YarnType.Text = ""

            End If

            If e.ColumnIndex = 3 And Trim(UCase(cbo_Type.Text)) <> "WARPING" And Trim(UCase(.CurrentRow.Cells(2).Value)) = "BABY" Then

                If cbo_Grid_SetNo.Visible = False Or Val(cbo_Grid_SetNo.Tag) <> e.RowIndex Then

                    cbo_Grid_SetNo.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select distinct(setcode_forSelection) from Stock_BabyCone_Processing_Details order by setcode_forSelection", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Grid_SetNo.DataSource = Dt1
                    cbo_Grid_SetNo.DisplayMember = "distinct(setcode_forSelection)"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Grid_SetNo.Left = .Left + rect.Left
                    cbo_Grid_SetNo.Top = .Top + rect.Top

                    cbo_Grid_SetNo.Width = rect.Width
                    cbo_Grid_SetNo.Height = rect.Height
                    cbo_Grid_SetNo.Text = .CurrentCell.Value

                    cbo_Grid_SetNo.Tag = Val(e.RowIndex)
                    cbo_Grid_SetNo.Visible = True

                    cbo_Grid_SetNo.BringToFront()
                    cbo_Grid_SetNo.Focus()


                End If

            Else
                cbo_Grid_SetNo.Visible = False
                cbo_Grid_SetNo.Tag = -1
                cbo_Grid_SetNo.Text = ""

            End If

            If .CurrentCell.ColumnIndex = 4 And Trim(UCase(cbo_Type.Text)) <> "WARPING" Then

                If cbo_Grid_MillName.Visible = False Or Val(cbo_Grid_MillName.Tag) <> e.RowIndex Then

                    cbo_Grid_MillName.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Mill_Name from Mill_Head order by Mill_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Grid_MillName.DataSource = Dt1
                    cbo_Grid_MillName.DisplayMember = "Mill_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Grid_MillName.Left = .Left + rect.Left
                    cbo_Grid_MillName.Top = .Top + rect.Top

                    cbo_Grid_MillName.Width = rect.Width
                    cbo_Grid_MillName.Height = rect.Height
                    cbo_Grid_MillName.Text = .CurrentCell.Value

                    cbo_Grid_MillName.Tag = Val(e.RowIndex)
                    cbo_Grid_MillName.Visible = True

                    cbo_Grid_MillName.BringToFront()
                    cbo_Grid_MillName.Focus()


                End If

            Else
                cbo_Grid_MillName.Visible = False
                cbo_Grid_MillName.Tag = -1
                cbo_Grid_MillName.Text = ""

            End If

            If .CurrentCell.ColumnIndex = 5 And Val(.CurrentRow.Cells(6).Value) = 0 Then

                CntID = Common_Procedures.Count_NameToIdNo(Con, .CurrentRow.Cells(1).Value)
                MilID = Common_Procedures.Mill_NameToIdNo(Con, .CurrentRow.Cells(4).Value)

                If CntID <> 0 And MilID <> 0 And Trim(UCase(.CurrentRow.Cells(2).Value)) = "MILL" Then

                    Cns_Bg = 0 : Wt_Cn = 0
                    Da = New SqlClient.SqlDataAdapter("select * from Mill_Count_Details where mill_idno = " & Str(Val(MilID)) & " and count_idno = " & Str(Val(CntID)), Con)
                    Da.Fill(Dt)

                    If Dt.Rows.Count > 0 Then
                        Cns_Bg = Val(Dt.Rows(0).Item("Cones_Bag").ToString)
                        Wt_Cn = Val(Dt.Rows(0).Item("Weight_Cone").ToString)
                    End If

                    Dt.Clear()
                    Dt.Dispose()
                    Da.Dispose()

                    If Val(Wt_Cn) <> 0 Then
                        .CurrentRow.Cells(6).Value = Format(Val(Wt_Cn), "#########0.000")
                    End If

                End If

            End If


            If .CurrentCell.ColumnIndex = 9 And Val(.CurrentRow.Cells(9).Value) = 0 Then

                If cbo_Grid_WareHouse.Visible = False Or Val(cbo_Grid_WareHouse.Tag) <> e.RowIndex Then

                    cbo_Grid_WareHouse.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Ledger_Name from ledger_Head where ledger_type='Godown' order by Ledger_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Grid_WareHouse.DataSource = Dt1
                    cbo_Grid_WareHouse.DisplayMember = "Ledger_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Grid_WareHouse.Left = .Left + rect.Left
                    cbo_Grid_WareHouse.Top = .Top + rect.Top

                    cbo_Grid_WareHouse.Width = rect.Width
                    cbo_Grid_WareHouse.Height = rect.Height
                    cbo_Grid_WareHouse.Text = .CurrentCell.Value

                    cbo_Grid_WareHouse.Tag = Val(e.RowIndex)
                    cbo_Grid_WareHouse.Visible = True

                    cbo_Grid_WareHouse.BringToFront()
                    cbo_Grid_WareHouse.Focus()

                End If

            Else
                cbo_Grid_WareHouse.Visible = False
                cbo_Grid_WareHouse.Tag = -1
                cbo_Grid_WareHouse.Text = ""

            End If
        End With

    End Sub

    Private Sub dgv_YarnTakenDetails_CellLeave(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_YarnTakenDetails.CellLeave
        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        With dgv_YarnTakenDetails
            If .CurrentCell.ColumnIndex = 6 Or .CurrentCell.ColumnIndex = 8 Then
                If Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value) <> 0 Then
                    .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = Format(Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value), "#########0.000")
                End If
            End If
            If .CurrentCell.ColumnIndex = 3 Then
                If Trim(.CurrentRow.Cells(2).Value) = "BABY" And Trim(.CurrentRow.Cells(3).Value) <> "" Then
                    get_BabyCone_Details(.CurrentRow.Index)
                End If
            End If
        End With
    End Sub

    Private Sub get_BabyCone_Details(ByVal CurRw As Integer)
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim CntID As Integer
        Dim NewCode As String
        Dim Ent_Bgs As Integer, Ent_Cns As Integer
        Dim Ent_Wgt As Single

        With dgv_YarnTakenDetails

            CntID = Common_Procedures.Count_NameToIdNo(Con, .Rows(CurRw).Cells(1).Value)

            If CntID <> 0 And Trim(.Rows(CurRw).Cells(3).Value) <> "" And Trim(UCase(.Rows(CurRw).Cells(2).Value)) = "BABY" Then

                NewCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

                Da = New SqlClient.SqlDataAdapter("select a.*, b.mill_name, c.bags as DelvEnt_Bags, c.cones as DelvEnt_cones, c.Weight as DelvEnt_Weight from Stock_BabyCone_Processing_Details a INNER JOIN mill_head b ON  a.mill_idno = b.mill_idno LEFT OUTER JOIN Specification_YarnTaken_Details c ON c.Set_Code = '" & Trim(NewCode) & "' and c.yarn_type = 'BABY' and c.BabyCone_setcode_forSelection = a.SetCode_ForSelection where a.setcode_forSelection = '" & Trim(.Rows(CurRw).Cells(3).Value) & "' and a.count_idno = " & Str(Val(CntID)), Con)
                Da.Fill(Dt)

                If Dt.Rows.Count > 0 Then

                    Ent_Bgs = 0 : Ent_Cns = 0 : Ent_Wgt = 0

                    If IsDBNull(Dt.Rows(0).Item("DelvEnt_Bags").ToString) = False Then Ent_Bgs = Val(Dt.Rows(0).Item("DelvEnt_Bags").ToString)
                    If IsDBNull(Dt.Rows(0).Item("DelvEnt_cones").ToString) = False Then Ent_Cns = Val(Dt.Rows(0).Item("DelvEnt_cones").ToString)
                    If IsDBNull(Dt.Rows(0).Item("DelvEnt_Weight").ToString) = False Then Ent_Wgt = Val(Dt.Rows(0).Item("DelvEnt_Weight").ToString)

                    .Rows(CurRw).Cells(4).Value = Dt.Rows(0).Item("Mill_Name").ToString
                    .Rows(CurRw).Cells(5).Value = Format(Val(Dt.Rows(0).Item("Baby_Bags").ToString) - Val(Dt.Rows(0).Item("Delivered_Bags").ToString) + Ent_Bgs, "#########0.000")
                    .Rows(CurRw).Cells(7).Value = Format(Val(Dt.Rows(0).Item("Baby_Cones").ToString) - Val(Dt.Rows(0).Item("Delivered_Cones").ToString) + Ent_Cns, "#########0.000")
                    .Rows(CurRw).Cells(8).Value = Format(Val(Dt.Rows(0).Item("Baby_Weight").ToString) - Val(Dt.Rows(0).Item("Delivered_Weight").ToString) + Ent_Wgt, "#########0.000")
                    .Rows(CurRw).Cells(6).Value = Format(Val(.Rows(CurRw).Cells(8).Value) / Val(.Rows(CurRw).Cells(7).Value), "#########0.000")

                    TotalYarnTaken_Calculation()

                End If

                Dt.Clear()
                Dt.Dispose()
                Da.Dispose()

            End If
        End With
    End Sub

    Private Sub dgv_YarnTakenDetails_CellValueChanged(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_YarnTakenDetails.CellValueChanged
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim CntID As Integer
        Dim MilID As Integer
        Dim Cns_Bg As Single, Wt_Cn As Single

        On Error Resume Next

        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub

        If IsNothing(dgv_YarnTakenDetails.CurrentCell) Then Exit Sub

        With dgv_YarnTakenDetails
            If .Visible Then

                If .CurrentCell.ColumnIndex = 5 Then

                    CntID = Common_Procedures.Count_NameToIdNo(Con, .CurrentRow.Cells(1).Value)
                    MilID = Common_Procedures.Mill_NameToIdNo(Con, .CurrentRow.Cells(4).Value)

                    If CntID <> 0 And MilID <> 0 And Trim(UCase(.CurrentRow.Cells(2).Value)) = "MILL" Then

                        Cns_Bg = 0 : Wt_Cn = 0
                        Da = New SqlClient.SqlDataAdapter("select * from Mill_Count_Details where mill_idno = " & Str(Val(MilID)) & " and count_idno = " & Str(Val(CntID)), Con)
                        Da.Fill(Dt)

                        If Dt.Rows.Count > 0 Then
                            Cns_Bg = Val(Dt.Rows(0).Item("Cones_Bag").ToString)
                            Wt_Cn = Val(Dt.Rows(0).Item("Weight_Cone").ToString)
                        End If

                        Dt.Clear()
                        Dt.Dispose()
                        Da.Dispose()

                        If Val(Cns_Bg) <> 0 Then
                            .CurrentRow.Cells(7).Value = Val(.CurrentRow.Cells(5).Value) * Val(Cns_Bg)
                        End If
                        If Val(Wt_Cn) <> 0 Then
                            .CurrentRow.Cells(6).Value = Format(Val(Wt_Cn), "#########0.000")
                            .CurrentRow.Cells(8).Value = Format(Val(.CurrentRow.Cells(7).Value) * Val(Wt_Cn), "#########0.000")
                        End If

                    End If

                End If

                If .CurrentCell.ColumnIndex = 5 Or .CurrentCell.ColumnIndex = 6 Or .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 8 Then
                    If .CurrentCell.ColumnIndex = 6 Or .CurrentCell.ColumnIndex = 7 Then
                        If Val(.CurrentRow.Cells(6).Value) <> 0 And Val(.CurrentRow.Cells(7).Value) <> 0 Then
                            .CurrentRow.Cells(8).Value = Format(Val(.CurrentRow.Cells(6).Value) * Val(.CurrentRow.Cells(7).Value), "#########0.000")
                        End If
                    End If
                    TotalYarnTaken_Calculation()
                End If
            End If
        End With
    End Sub

    Private Sub dgv_YarnTakenDetails_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgv_YarnTakenDetails.KeyUp
        Dim i As Integer

        If e.Control = True And UCase(Chr(e.KeyCode)) = "D" Then

            With dgv_YarnTakenDetails

                If .CurrentRow.Index = .RowCount - 1 Then
                    For i = 1 To .Columns.Count - 1
                        .Rows(.CurrentRow.Index).Cells(i).Value = ""
                    Next

                Else
                    .Rows.RemoveAt(.CurrentRow.Index)

                End If

                TotalYarnTaken_Calculation()

            End With
        End If

    End Sub

    Private Sub dgv_YarnTakenDetails_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgv_YarnTakenDetails.LostFocus
        On Error Resume Next
        If Not IsNothing(sender.CurrentCell) Then sender.CurrentCell.Selected = False
    End Sub

    Private Sub dgv_YarnTakenDetails_RowsAdded(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewRowsAddedEventArgs) Handles dgv_YarnTakenDetails.RowsAdded
        Dim n As Integer

        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        With dgv_YarnTakenDetails
            n = .RowCount
            .Rows(n - 1).Cells(0).Value = Val(n)
        End With
    End Sub

    Private Sub TotalYarnTaken_Calculation()
        Dim Sno As Integer
        Dim TotBags As Single, TotCones As Single, TotWeight As Single

        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        Sno = 0
        TotBags = 0
        TotCones = 0
        TotWeight = 0
        With dgv_YarnTakenDetails
            For i = 0 To .RowCount - 1
                Sno = Sno + 1
                .Rows(i).Cells(0).Value = Sno
                If Val(.Rows(i).Cells(8).Value) <> 0 Then
                    TotBags = TotBags + Val(.Rows(i).Cells(5).Value)
                    TotCones = TotCones + Val(.Rows(i).Cells(7).Value)
                    TotWeight = TotWeight + Val(.Rows(i).Cells(8).Value)
                End If
            Next
        End With

        With dgv_YarnTakenDetails_Total
            If .RowCount = 0 Then .Rows.Add()
            .Rows(0).Cells(5).Value = Val(TotBags)
            .Rows(0).Cells(7).Value = Val(TotCones)
            .Rows(0).Cells(8).Value = Format(Val(TotWeight), "########0.000")
        End With

        lbl_YarnTaken.Text = Format(Val(TotWeight), "#########0.000")

    End Sub

    Private Sub dgv_BabyConeDetails_CellEndEdit(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_BabyConeDetails.CellEndEdit
        dgv_BabyConeDetails_CellLeave(sender, e)
    End Sub

    Private Sub dgv_BabyConeDetails_CellEnter(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_BabyConeDetails.CellEnter
        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        With dgv_BabyConeDetails
            If Val(.CurrentRow.Cells(0).Value) = 0 Then
                .CurrentRow.Cells(0).Value = .CurrentRow.Index + 1
            End If
        End With
    End Sub

    Private Sub dgv_BabyConeDetails_CellLeave(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_BabyConeDetails.CellLeave
        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        With dgv_BabyConeDetails
            If .CurrentCell.ColumnIndex = 3 Then
                If Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value) <> 0 Then
                    If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1102" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1163" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1144" Then
                        .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = Format(Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value), "#########0.0")
                    Else
                        .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = Format(Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value), "#########0.000")

                    End If
                    '  .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = Format(Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value), "#########0.000")
                End If
            End If
        End With
    End Sub

    Private Sub dgv_BabyConeDetails_CellValueChanged(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_BabyConeDetails.CellValueChanged
        On Error Resume Next
        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        If IsNothing(dgv_BabyConeDetails.CurrentCell) Then Exit Sub
        With dgv_BabyConeDetails
            If .Visible Then
                If .CurrentCell.ColumnIndex = 1 Or .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Then
                    Total_BabyCone_Calculation()
                End If
            End If
        End With
    End Sub

    Private Sub dgv_BabyConeDetails_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgv_BabyConeDetails.KeyUp
        Dim i As Integer

        If e.Control = True And UCase(Chr(e.KeyCode)) = "D" Then

            With dgv_BabyConeDetails

                If Val(txt_BabyCone_DeliveryWeight.Text) = 0 Then

                    If .CurrentRow.Index = .RowCount - 1 Then
                        For i = 1 To .Columns.Count - 1
                            .Rows(.CurrentRow.Index).Cells(i).Value = ""
                        Next

                    Else
                        .Rows.RemoveAt(.CurrentRow.Index)

                    End If

                    Total_BabyCone_Calculation()


                Else
                    MessageBox.Show("BabyCone delivered", "DOES NOT DELETE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                    Exit Sub

                End If

            End With

        End If

    End Sub

    Private Sub dgv_BabyConeDetails_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgv_BabyConeDetails.LostFocus
        On Error Resume Next
        If Not IsNothing(dgv_BabyConeDetails.CurrentCell) Then dgv_BabyConeDetails.CurrentCell.Selected = False
    End Sub

    Private Sub dgv_BabyConeDetails_RowsAdded(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewRowsAddedEventArgs) Handles dgv_BabyConeDetails.RowsAdded
        Dim n As Integer

        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        If IsNothing(dgv_BabyConeDetails.CurrentCell) Then Exit Sub
        With dgv_BabyConeDetails
            n = .RowCount
            .Rows(n - 1).Cells(0).Value = Val(n)
        End With
    End Sub

    Private Sub Total_BabyCone_Calculation()
        Dim Sno As Integer = 0
        Dim TotBags As Single, TotCones As Single, TotWeight As Single

        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        Sno = 0
        TotBags = 0
        TotCones = 0
        TotWeight = 0
        With dgv_BabyConeDetails
            For i = 0 To .RowCount - 1
                Sno = Sno + 1
                .Rows(i).Cells(0).Value = Sno
                If Val(.Rows(i).Cells(3).Value) <> 0 Then
                    TotBags = TotBags + Val(.Rows(i).Cells(1).Value)
                    TotCones = TotCones + Val(.Rows(i).Cells(2).Value)
                    TotWeight = TotWeight + Val(.Rows(i).Cells(3).Value)
                End If
            Next
        End With

        With dgv_BabyConeDetails_Total
            If .RowCount = 0 Then .Rows.Add()
            .Rows(0).Cells(1).Value = Val(TotBags)
            .Rows(0).Cells(2).Value = Val(TotCones)
            .Rows(0).Cells(3).Value = Format(Val(TotWeight), "########0.000")
        End With


        BabyCone_TareWeight_Calculation(0)

        BabyCone_NetWeight_Calculation()


    End Sub

    Private Sub BabyCone_NetWeight_Calculation()
        Dim Sno As Integer
        Dim TotWgt As Integer
        Dim TotBags As Single, TotCones As Single, TotWeight As Single

        Sno = 0
        TotWgt = 0
        TotBags = 0
        TotCones = 0
        TotWeight = 0

        With dgv_BabyConeDetails_Total
            If .RowCount = 0 Then .Rows.Add()
            TotWeight = .Rows(0).Cells(3).Value
        End With

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1102" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1144" Then

            If Trim(UCase(cbo_Type.Text)) <> "WARPING" Then lbl_BabyCone_NetWeight.Text = Format(Val(TotWeight) - Val(txt_BabyCone_TareWeight.Text), "########0.0")

            lbl_BabyConeWeight.Text = Format(Val(lbl_BabyCone_NetWeight.Text), "#########0.0")

            TotWgt = Val(lbl_BabyCone_NetWeight.Text)

            If TotWgt < 100 Then
                TotWgt = TotWgt - 2
            Else
                TotWgt = TotWgt - 3
            End If

            lbl_BabyConeWeight.Text = Format(Val(TotWgt), "#########0")

        Else

            lbl_BabyCone_NetWeight.Text = Format(Val(TotWeight) - Val(txt_BabyCone_TareWeight.Text), "########0.000")

            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1282" Then
                lbl_BabyConeWeight.Text = Format(Val(lbl_BabyCone_NetWeight.Text), "#########0.0")
            End If

            lbl_BabyConeWeight.Text = Format(Val(lbl_BabyCone_NetWeight.Text), "#########0.000")

            TotWgt = Val(lbl_BabyCone_NetWeight.Text)

        End If

        txt_RewindingCones.Text = ""
        If chk_RewindingStatus.Checked = True Then
            If Common_Procedures.settings.CustomerCode = "1288" Then
                txt_RewindingCones.Text = Format(Val(lbl_BabyConeWeight.Text) / 1.9, "#########0")
            Else
                txt_RewindingCones.Text = Format(Val(lbl_BabyConeWeight.Text) / 1.5, "#########0")
            End If

        End If

    End Sub

    Private Sub dgv_ChemicalDetails_CellEndEdit(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_ChemicalDetails.CellEndEdit
        dgv_ChemicalDetails_CellLeave(sender, e)
    End Sub

    Private Sub dgv_ChemicalDetails_CellEnter(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_ChemicalDetails.CellEnter
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim rect As Rectangle

        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        With dgv_ChemicalDetails
            If Val(.CurrentRow.Cells(0).Value) = 0 Then
                .CurrentRow.Cells(0).Value = .CurrentRow.Index + 1
            End If

            If e.ColumnIndex = 1 Then

                If cbo_Grid_ItemName.Visible = False Or Val(cbo_Grid_ItemName.Tag) <> e.RowIndex Then

                    cbo_Grid_ItemName.Tag = -1
                    Da = New SqlClient.SqlDataAdapter("select Item_Name from Sizing_Item_Head order by Item_Name", Con)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    cbo_Grid_ItemName.DataSource = Dt1
                    cbo_Grid_ItemName.DisplayMember = "Item_Name"

                    rect = .GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, False)

                    cbo_Grid_ItemName.Left = .Left + rect.Left
                    cbo_Grid_ItemName.Top = .Top + rect.Top

                    cbo_Grid_ItemName.Width = rect.Width
                    cbo_Grid_ItemName.Height = rect.Height
                    cbo_Grid_ItemName.Text = .CurrentCell.Value

                    cbo_Grid_ItemName.Tag = Val(e.RowIndex)
                    cbo_Grid_ItemName.Visible = True

                    cbo_Grid_ItemName.BringToFront()
                    cbo_Grid_ItemName.Focus()

                Else
                    'If cbo_Grid_ItemName.Enabled Then
                    '    cbo_Grid_ItemName.BringToFront()
                    '    cbo_Grid_ItemName.Focus()
                    'End If

                End If

            Else
                cbo_Grid_ItemName.Visible = False
                cbo_Grid_ItemName.Tag = -1
                cbo_Grid_ItemName.Text = ""

            End If

        End With
    End Sub

    Private Sub dgv_ChemicalDetails_CellLeave(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_ChemicalDetails.CellLeave
        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        With dgv_ChemicalDetails
            If .CurrentCell.ColumnIndex = 1 Then
                If Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value) <> 0 Then
                    .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = Format(Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value), "#########0.000")
                End If
            End If
            If .CurrentCell.ColumnIndex = 11 Then
                If Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value) <> 0 Then
                    .CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = Format(Val(.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value), "#########0.00")
                End If
            End If
        End With
    End Sub

    Private Sub dgv_ChemicalDetails_CellValueChanged(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_ChemicalDetails.CellValueChanged
        On Error Resume Next
        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub

        If IsNothing(dgv_ChemicalDetails.CurrentCell) Then Exit Sub

        With dgv_ChemicalDetails
            If .Visible Then

                If .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 4 Or .CurrentCell.ColumnIndex = 5 Or .CurrentCell.ColumnIndex = 6 Or .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 8 Then
                    .CurrentRow.Cells(9).Value = Format(Val(.CurrentRow.Cells(2).Value) + Val(.CurrentRow.Cells(3).Value) + Val(.CurrentRow.Cells(4).Value) + Val(.CurrentRow.Cells(5).Value) + Val(.CurrentRow.Cells(6).Value) + Val(.CurrentRow.Cells(7).Value) + Val(.CurrentRow.Cells(8).Value), "#########0.000")
                    Total_Chemical_Calculation()
                End If

                If .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 4 Or .CurrentCell.ColumnIndex = 5 Or .CurrentCell.ColumnIndex = 6 Or .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 8 Or .CurrentCell.ColumnIndex = 9 Or .CurrentCell.ColumnIndex = 10 Then
                    .CurrentRow.Cells(11).Value = Format(Val(.CurrentRow.Cells(9).Value) * Val(.CurrentRow.Cells(10).Value), "#########0.00")
                    Total_Chemical_Calculation()
                End If

                'If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1102" Then
                '    If .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 4 Or .CurrentCell.ColumnIndex = 5 Or .CurrentCell.ColumnIndex = 6 Or .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 8 Or .CurrentCell.ColumnIndex = 9 Then
                '        ' If .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 4 Or .CurrentCell.ColumnIndex = 5 Or .CurrentCell.ColumnIndex = 6 Then
                '        .CurrentRow.Cells(7).Value = Format(Val(.CurrentRow.Cells(2).Value) + Val(.CurrentRow.Cells(3).Value) + Val(.CurrentRow.Cells(4).Value) + Val(.CurrentRow.Cells(5).Value) + Val(.CurrentRow.Cells(6).Value), "#########0.000")
                '        'End If
                '        ' If .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 8 Then
                '        .CurrentRow.Cells(9).Value = Format(Val(.CurrentRow.Cells(7).Value) * Val(.CurrentRow.Cells(8).Value), "#########0.00")
                '        'End If
                '        Total_Chemical_Calculation()

                '    End If
                'Else
                '    .CurrentRow.Cells(9).Value = Format(Val(.CurrentRow.Cells(7).Value) * Val(.CurrentRow.Cells(8).Value), "#########0.00")
                '    Total_Chemical_Calculation()
                'End If
            End If
        End With
    End Sub

    Private Sub dgv_ChemicalDetails_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgv_ChemicalDetails.KeyUp
        Dim i As Integer

        If e.Control = True And UCase(Chr(e.KeyCode)) = "D" Then

            With dgv_ChemicalDetails

                If .CurrentRow.Index = .RowCount - 1 Then
                    For i = 1 To .Columns.Count - 1
                        .Rows(.CurrentRow.Index).Cells(i).Value = ""
                    Next

                Else
                    .Rows.RemoveAt(.CurrentRow.Index)

                End If

                Total_Chemical_Calculation()


            End With

        End If
    End Sub

    Private Sub dgv_ChemicalDetails_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgv_ChemicalDetails.LostFocus
        On Error Resume Next
        If Not IsNothing(sender.CurrentCell) Then sender.CurrentCell.Selected = False
    End Sub

    Private Sub dgv_ChemicalDetails_RowsAdded(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewRowsAddedEventArgs) Handles dgv_ChemicalDetails.RowsAdded
        Dim n As Integer

        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        If IsNothing(dgv_ChemicalDetails.CurrentCell) Then Exit Sub
        With dgv_ChemicalDetails
            n = .RowCount
            .Rows(n - 1).Cells(0).Value = Val(n)
        End With
    End Sub

    Private Sub Total_Chemical_Calculation()
        Dim Sno As Integer
        Dim TotQty As Single, TotAmt As Single

        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
        Sno = 0
        TotQty = 0
        TotAmt = 0
        With dgv_ChemicalDetails
            For i = 0 To .RowCount - 1
                Sno = Sno + 1
                .Rows(i).Cells(0).Value = Sno
                If Val(.Rows(i).Cells(9).Value) <> 0 Then
                    TotQty = TotQty + Val(.Rows(i).Cells(9).Value)
                    TotAmt = TotAmt + Val(.Rows(i).Cells(11).Value)
                End If
            Next
        End With

        With dgv_ChemicalDetails_Total
            If .RowCount = 0 Then .Rows.Add()
            .Rows(0).Cells(9).Value = Format(Val(TotQty), "########0.000")
            .Rows(0).Cells(11).Value = Format(Val(TotAmt), "########0.00")
        End With

    End Sub

    Private Sub cbo_Grid_ItemName_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Grid_ItemName.GotFocus
        vCbo_ItmNm = cbo_Grid_ItemName.Text
    End Sub

    Private Sub cbo_Grid_ItemName_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Grid_ItemName.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Grid_ItemName, Nothing, Nothing, "Sizing_Item_Head", "Item_Name", "", "(Item_IdNo = 0)")

        With dgv_ChemicalDetails

            If (e.KeyValue = 38 And cbo_Grid_ItemName.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then

                If Val(.CurrentCell.RowIndex) <= 0 Then
                    If txt_ExcessShort_Adjustment.Visible Then
                        txt_ExcessShort_Adjustment.Focus()
                    Else
                        tab_Main.SelectTab(3)
                        dgv_BabyConeDetails.Focus()
                        dgv_BabyConeDetails.CurrentCell = dgv_BabyConeDetails.Rows(0).Cells(1)
                        dgv_BabyConeDetails.CurrentCell.Selected = True
                    End If

                Else
                    .Focus()
                    .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(10)
                    .CurrentCell.Selected = True
                End If
            End If

            If (e.KeyValue = 40 And cbo_Grid_ItemName.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If

        End With

    End Sub

    Private Sub cbo_Grid_ItemName_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Grid_ItemName.KeyPress
        Dim da As New SqlClient.SqlDataAdapter
        Dim dt As New DataTable


        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Grid_ItemName, Nothing, "Sizing_Item_Head", "Item_Name", "", "(Item_IdNo = 0)")

        If Asc(e.KeyChar) = 13 Then

            With dgv_ChemicalDetails

                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_ItemName.Text)

                If .CurrentCell.RowIndex = .RowCount - 1 And .CurrentCell.ColumnIndex >= 1 And Trim(.CurrentRow.Cells(1).Value) = "" Then

                    tab_Main.SelectTab(0)
                    tab_WarpingDeatils.SelectTab(0)
                    'If dgv_WarpingDetails_Set1.Rows.Count <= 0 Then dgv_WarpingDetails_Set1.Rows.Add()
                    'dgv_WarpingDetails_Set1.Focus()
                    'dgv_WarpingDetails_Set1.CurrentCell.Selected = False

                    txt_Remarks.Focus()

                Else
                    .Focus()
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    .CurrentCell.Selected = True

                End If
            End With

        End If


    End Sub


    Private Sub cbo_Grid_ItemName_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Grid_ItemName.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Sizing_Item_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Grid_ItemName.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Grid_ItemName_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Grid_ItemName.LostFocus
        Dim da As SqlClient.SqlDataAdapter
        Dim dt As New DataTable

        If Trim(UCase(vCbo_ItmNm)) <> Trim(UCase(cbo_Grid_ItemName.Text)) Then
            If Val(dgv_ChemicalDetails.Rows(dgv_ChemicalDetails.CurrentCell.RowIndex).Cells(10).Value) = 0 Then
                da = New SqlClient.SqlDataAdapter("select a.* from Sizing_Item_Head a where a.item_name = '" & Trim(cbo_Grid_ItemName.Text) & "'", Con)
                da.Fill(dt)
                If dt.Rows.Count > 0 Then
                    dgv_ChemicalDetails.Rows(dgv_ChemicalDetails.CurrentCell.RowIndex).Cells(10).Value = Format(Val(dt.Rows(0)("Cost_Rate").ToString), "#########0.00")
                End If
                dt.Dispose()
                da.Dispose()
            End If
        End If

    End Sub


    Private Sub cbo_Grid_ItemName_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Grid_ItemName.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Grid_ItemName.Visible Then
                If IsNothing(dgv_ChemicalDetails.CurrentCell) Then Exit Sub
                With dgv_ChemicalDetails
                    If Val(cbo_Grid_ItemName.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 1 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_ItemName.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub

    Private Sub cbo_Grid_CountName_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Grid_CountName.GotFocus
        Dim Cnt_ID As Integer = 0
        Dim CountCondt As String = ""

        Cnt_ID = Common_Procedures.Count_NameToIdNo(Con, cbo_CountName.Text)

        CountCondt = ""
        If dgv_YarnTakenDetails.Rows.Count > 0 Then
            If Val(cbo_Grid_CountName.Tag) <= 0 Then
                CountCondt = "(Count_IdNo = " & Str(Val(Cnt_ID)) & ")"
            End If
        End If

        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "Count_Head", "Count_Name", CountCondt, "(Count_IdNo = 0)")

    End Sub

    Private Sub cbo_Grid_CountName_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Grid_CountName.KeyDown
        Dim Cnt_ID As Integer = 0
        Dim CountCondt As String = ""

        Cnt_ID = Common_Procedures.Count_NameToIdNo(Con, cbo_CountName.Text)

        CountCondt = ""
        If dgv_YarnTakenDetails.Rows.Count > 0 Then
            If Val(cbo_Grid_CountName.Tag) <= 0 Then
                CountCondt = "(Count_IdNo = " & Str(Val(Cnt_ID)) & ")"
            End If
        End If

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Grid_CountName, Nothing, Nothing, "Count_Head", "Count_Name", CountCondt, "(Count_IdNo = 0)")

        With dgv_YarnTakenDetails

            If (e.KeyValue = 38 And cbo_Grid_CountName.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then

                If Val(.CurrentCell.RowIndex) <= 0 Then
                    tab_Main.SelectTab(1)
                    tab_SizingDetails.SelectTab(0)
                    'dgv_SizingDetails_Set1.Focus()
                    'dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
                    'dgv_SizingDetails_Set1.CurrentCell.Selected = True

                Else
                    .Focus()
                    .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(8)
                    .CurrentCell.Selected = True

                End If
            End If

            If (e.KeyValue = 40 And cbo_Grid_CountName.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then

                If .CurrentCell.RowIndex = .RowCount - 1 And .CurrentCell.ColumnIndex >= 1 And Trim(.CurrentRow.Cells(1).Value) = "" Then
                    tab_Main.SelectTab(3)
                    dgv_BabyConeDetails.Focus()
                    dgv_BabyConeDetails.CurrentCell = dgv_BabyConeDetails.Rows(0).Cells(1)
                    dgv_BabyConeDetails.CurrentCell.Selected = True

                Else
                    .Focus()
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    .CurrentCell.Selected = True

                End If

            End If

        End With

    End Sub

    Private Sub cbo_Grid_CountName_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Grid_CountName.KeyPress
        Dim da As New SqlClient.SqlDataAdapter
        Dim dt As New DataTable
        Dim Cnt_ID As Integer = 0
        Dim CountCondt As String = ""

        Cnt_ID = Common_Procedures.Count_NameToIdNo(Con, cbo_CountName.Text)

        CountCondt = ""
        If dgv_YarnTakenDetails.Rows.Count > 0 Then
            If Val(cbo_Grid_CountName.Tag) <= 0 Then
                CountCondt = "(Count_IdNo = " & Str(Val(Cnt_ID)) & ")"
            End If
        End If

        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Grid_CountName, Nothing, "Count_Head", "Count_Name", CountCondt, "(Count_IdNo = 0)")

        If Asc(e.KeyChar) = 13 Then

            With dgv_YarnTakenDetails

                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_CountName.Text)
                If .CurrentCell.RowIndex = .RowCount - 1 And .CurrentCell.ColumnIndex >= 1 And Trim(.CurrentRow.Cells(1).Value) = "" Then
                    tab_Main.SelectTab(3)
                    dgv_BabyConeDetails.Focus()
                    dgv_BabyConeDetails.CurrentCell = dgv_BabyConeDetails.Rows(0).Cells(1)
                    dgv_BabyConeDetails.CurrentCell.Selected = True

                Else
                    .Focus()
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    .CurrentCell.Selected = True

                End If
            End With

        End If

    End Sub

    Private Sub cbo_Grid_CountName_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Grid_CountName.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Count_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Grid_CountName.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Grid_CountName_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Grid_CountName.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Grid_CountName.Visible Then
                If IsNothing(dgv_YarnTakenDetails.CurrentCell) Then Exit Sub
                With dgv_YarnTakenDetails
                    If Val(cbo_Grid_CountName.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 1 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_CountName.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub

    Private Sub cbo_Grid_MillName_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Grid_MillName.GotFocus
        Dim Mil_ID As Integer = 0
        Dim Mill_Condt As String = ""

        Mil_ID = Common_Procedures.Mill_NameToIdNo(Con, cbo_MillName.Text)

        Mill_Condt = ""
        If dgv_YarnTakenDetails.Rows.Count > 0 Then
            If dgv_YarnTakenDetails.CurrentCell.RowIndex = 0 Then
                Mill_Condt = "(Mill_IdNo = " & Str(Val(Mil_ID)) & ")"
            End If
        End If

        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "Mill_Head", "Mill_Name", Mill_Condt, "(Mill_IdNo = 0)")

    End Sub

    Private Sub cbo_Grid_MillName_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Grid_MillName.KeyPress
        Dim Mil_ID As Integer = 0
        Dim Mill_Condt As String = ""

        Mil_ID = Common_Procedures.Mill_NameToIdNo(Con, cbo_MillName.Text)

        Mill_Condt = ""
        If dgv_YarnTakenDetails.Rows.Count > 0 Then
            If dgv_YarnTakenDetails.CurrentCell.RowIndex = 0 Then
                Mill_Condt = "(Mill_IdNo = " & Str(Val(Mil_ID)) & ")"
            End If
        End If

        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Grid_MillName, Nothing, "Mill_Head", "Mill_Name", Mill_Condt, "(Mill_IdNo = 0)")

        If Asc(e.KeyChar) = 13 Then
            With dgv_YarnTakenDetails
                If .Rows.Count > 0 Then
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_MillName.Text)
                    .Focus()
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    .CurrentCell.Selected = True
                End If
            End With
        End If
    End Sub

    Private Sub cbo_Grid_MillName_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Grid_MillName.KeyDown
        Dim dep_idno As Integer = 0
        Dim Mil_ID As Integer = 0
        Dim Mill_Condt As String = ""

        Mil_ID = Common_Procedures.Mill_NameToIdNo(Con, cbo_MillName.Text)

        Mill_Condt = ""
        If dgv_YarnTakenDetails.Rows.Count > 0 Then
            If dgv_YarnTakenDetails.CurrentCell.RowIndex = 0 Then
                Mill_Condt = "(Mill_IdNo = " & Str(Val(Mil_ID)) & ")"
            End If
        End If

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Grid_MillName, Nothing, Nothing, "Mill_Head", "Mill_Name", Mill_Condt, "(Mill_IdNo = 0)")

        With dgv_YarnTakenDetails

            If (e.KeyValue = 38 And cbo_Grid_MillName.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                If .Rows.Count > 0 Then
                    .Focus()
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                    .CurrentCell.Selected = True
                End If
            End If

            If (e.KeyValue = 40 And cbo_Grid_MillName.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                If .Rows.Count > 0 Then
                    .Focus()
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    .CurrentCell.Selected = True
                End If
            End If

        End With

    End Sub

    Private Sub cbo_Grid_MillName_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Grid_MillName.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Mill_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Grid_MillName.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Grid_MillName_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Grid_MillName.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Grid_MillName.Visible Then
                If IsNothing(dgv_YarnTakenDetails.CurrentCell) Then Exit Sub
                With dgv_YarnTakenDetails
                    If Val(cbo_Grid_MillName.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 4 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_MillName.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub

    Private Sub cbo_Grid_YarnType_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Grid_YarnType.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Grid_YarnType, Nothing, Nothing, "YarnType_Head", "Yarn_Type", "", "(Yarn_Type = '')")

        With dgv_YarnTakenDetails

            If (e.KeyValue = 38 And cbo_Grid_YarnType.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Grid_YarnType.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If

        End With

    End Sub

    Private Sub cbo_Grid_YarnType_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Grid_YarnType.KeyPress

        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Grid_YarnType, Nothing, "YarnType_Head", "Yarn_Type", "", "(Yarn_Type = '')")

        If Asc(e.KeyChar) = 13 Then
            With dgv_YarnTakenDetails
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_YarnType.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If

    End Sub

    Private Sub cbo_Grid_YarnType_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Grid_YarnType.GotFocus
        With cbo_Grid_YarnType
            If Trim(.Text) = "" Then .Text = "MILL"
            Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "YarnType_Head", "Yarn_Type", "", "(Yarn_Type = '')")
        End With
    End Sub

    Private Sub cbo_Grid_YarnType_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Grid_YarnType.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Grid_YarnType.Visible Then
                If IsNothing(dgv_YarnTakenDetails.CurrentCell) Then Exit Sub
                With dgv_YarnTakenDetails
                    If Val(cbo_Grid_YarnType.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 2 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_YarnType.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub

    Private Sub txt_Ends_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txt_Ends.KeyDown
        If e.KeyCode = 38 Then
            If cbo_MillName.Enabled Then cbo_MillName.Focus() Else dtp_Date.Focus()
        End If
        If e.KeyCode = 40 Then
            If txt_WarpMeters.Enabled Then txt_WarpMeters.Focus() Else cbo_LoomType.Focus()
        End If
    End Sub

    Private Sub txt_Ends_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txt_Ends.KeyPress
        If Asc(e.KeyChar) = 13 Then
            If txt_WarpMeters.Enabled Then txt_WarpMeters.Focus() Else cbo_LoomType.Focus()


            'cbo_Meters_Yards.Focus()
            'If Trim(UCase(cbo_Type.Text)) = "WARPING" Then

            '    tab_Main.SelectTab(1)
            '    tab_SizingDetails.SelectTab(0)
            '    If dgv_SizingDetails_Set1.Rows.Count <= 0 Then dgv_SizingDetails_Set1.Rows.Add()
            '    dgv_SizingDetails_Set1.Focus()
            '    dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
            '    dgv_SizingDetails_Set1.CurrentCell.Selected = True

            'Else

            '    tab_Main.SelectTab(0)
            '    tab_WarpingDeatils.SelectTab(0)
            '    If dgv_WarpingDetails_Set1.Rows.Count <= 0 Then dgv_WarpingDetails_Set1.Rows.Add()
            '    dgv_WarpingDetails_Set1.Focus()
            '    dgv_WarpingDetails_Set1.CurrentCell = dgv_WarpingDetails_Set1.Rows(0).Cells(1)
            '    dgv_WarpingDetails_Set1.CurrentCell.Selected = True

            'End If

        End If
    End Sub

    Private Sub txt_Remarks_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txt_Remarks.KeyDown
        If e.KeyCode = 38 Then
            If Trim(UCase(cbo_Type.Text)) = "WARPING" Then
                tab_Main.SelectTab(1)
                tab_SizingDetails.SelectTab(0)
                If dgv_SizingDetails_Set1.Rows.Count <= 0 Then dgv_SizingDetails_Set1.Rows.Add()
                dgv_SizingDetails_Set1.Focus()
                dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
                dgv_SizingDetails_Set1.CurrentCell.Selected = True
            Else
                tab_Main.SelectTab(0)
                tab_WarpingDeatils.SelectTab(0)
                If dgv_WarpingDetails_Set1.Rows.Count <= 0 Then dgv_WarpingDetails_Set1.Rows.Add()
                dgv_WarpingDetails_Set1.Focus()
                dgv_WarpingDetails_Set1.CurrentCell = dgv_WarpingDetails_Set1.Rows(0).Cells(1)
                dgv_WarpingDetails_Set1.CurrentCell.Selected = True
            End If


        End If

        If e.KeyCode = 40 Then
            cbo_Type.Focus()
        End If

    End Sub

    Private Sub txt_Remarks_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txt_Remarks.KeyPress
        If Asc(e.KeyChar) = 13 Then
            If Not txt_SortNo.Visible Then
                If MessageBox.Show("Do you want to save ?", "FOR SAVING...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) = DialogResult.Yes Then
                    save_record()
                Else
                    cbo_Type.Focus()
                End If
            Else
                txt_SortNo.Focus()
            End If
        End If

    End Sub

    Private Sub txt_BabyCone_TareWeight_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txt_BabyCone_TareWeight.KeyDown
        If e.KeyCode = 40 Then chk_RewindingStatus.Focus() ' SendKeys.Send("{TAB}")
        If e.KeyCode = 38 Then
            SendKeys.Send("+{Tab}")
            'dgv_BabyConeDetails.Focus()
            'dgv_BabyConeDetails.CurrentCell = dgv_BabyConeDetails.Rows(0).Cells(1)
            'dgv_BabyConeDetails.CurrentCell.Selected = True
        End If
    End Sub

    Private Sub txt_BabyCone_TareWeight_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txt_BabyCone_TareWeight.KeyPress
        If Asc(e.KeyChar) = 13 Then chk_RewindingStatus.Focus() '  SendKeys.Send("{TAB}")
    End Sub

    Private Sub cbo_Rw_MillName_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Rw_MillName.GotFocus
        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "Mill_Head", "Mill_Name", "", "(Mill_IdNo = 0)")
    End Sub

    Private Sub cbo_Rw_MillName_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Rw_MillName.KeyDown
        vcbo_KeyDwnVal = e.KeyValue
        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Rw_MillName, txt_RewindingCones, Nothing, "Mill_Head", "Mill_Name", "", "(Mill_IdNo = 0)")

        If (e.KeyValue = 40 And cbo_Rw_MillName.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then

            If txt_RwExcSht.Visible = True And txt_RwExcSht.Enabled = True Then
                txt_RwExcSht.Focus()
            Else
                If txt_ExcessShort_Adjustment.Visible Then
                    txt_ExcessShort_Adjustment.Focus()
                Else
                    tab_Main.SelectTab(4)
                    dgv_ChemicalDetails.Focus()
                    dgv_ChemicalDetails.CurrentCell = dgv_ChemicalDetails.Rows(0).Cells(1)
                    dgv_ChemicalDetails.CurrentCell.Selected = True
                End If
            End If

            '    'dgv_ChemicalDetails.Focus()
            '    'dgv_ChemicalDetails.CurrentCell = dgv_ChemicalDetails.Rows(0).Cells(1)
            '    'dgv_ChemicalDetails.CurrentCell.Selected = True
            '    'If cbo_Grid_ItemName.Enabled And cbo_Grid_ItemName.Visible Then
            '    '    cbo_Grid_ItemName.Focus()
            '    'End If

        End If

    End Sub


    Private Sub cbo_Rw_MillName_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Rw_MillName.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Rw_MillName, Nothing, "Mill_Head", "Mill_Name", "", "(Mill_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then

            If txt_RwExcSht.Visible = True And txt_RwExcSht.Enabled = True Then
                txt_RwExcSht.Focus()
            Else
                If txt_ExcessShort_Adjustment.Visible And txt_ExcessShort_Adjustment.Enabled Then
                    txt_ExcessShort_Adjustment.Focus()
                Else
                    tab_Main.SelectTab(4)
                    dgv_ChemicalDetails.Focus()
                    dgv_ChemicalDetails.CurrentCell = dgv_ChemicalDetails.Rows(0).Cells(1)
                    cbo_Grid_ItemName.Focus()
                End If
            End If

            'dgv_ChemicalDetails.Focus()
            'dgv_ChemicalDetails.CurrentCell = dgv_ChemicalDetails.Rows(0).Cells(1)
            'dgv_ChemicalDetails.CurrentCell.Selected = True
            'If cbo_Grid_ItemName.Enabled And cbo_Grid_ItemName.Visible Then
            '    cbo_Grid_ItemName.Focus()
            'End If

        End If
    End Sub

    Private Sub cbo_Rw_MillName_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Rw_MillName.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Mill_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Rw_MillName.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If

    End Sub

    Private Sub chk_RewindingStatus_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chk_RewindingStatus.CheckedChanged
        If chk_RewindingStatus.Checked = True Then
            txt_RewindingCones.Enabled = True
            cbo_Rw_MillName.Enabled = True
            Total_BabyCone_Calculation()
        Else
            txt_RewindingCones.Text = ""
            txt_RewindingCones.Enabled = False
            cbo_Rw_MillName.Enabled = False
        End If
    End Sub

    Private Sub chk_RewindingStatus_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles chk_RewindingStatus.KeyDown
        If e.KeyCode = 38 Then txt_BabyCone_TareWeight.Focus() ' SendKeys.Send("+{TAB}")
        If e.KeyCode = 40 Then
            If chk_RewindingStatus.Checked = True Then
                txt_RewindingCones.Focus()

            ElseIf txt_RwExcSht.Enabled And txt_RwExcSht.Visible Then
                txt_RwExcSht.Focus()

            ElseIf txt_ExcessShort_Adjustment.Enabled And txt_ExcessShort_Adjustment.Visible Then
                txt_ExcessShort_Adjustment.Focus()

            Else
                tab_Main.SelectTab(4)
                'dgv_ChemicalDetails.Focus()
                'dgv_ChemicalDetails.CurrentCell = dgv_ChemicalDetails.Rows(0).Cells(1)
                'dgv_ChemicalDetails.CurrentCell.Selected = True
                'If cbo_Grid_ItemName.Enabled And cbo_Grid_ItemName.Visible Then
                '    cbo_Grid_ItemName.Focus()
                'End If

            End If
        End If
    End Sub

    Private Sub chk_RewindingStatus_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles chk_RewindingStatus.KeyPress
        If Asc(e.KeyChar) = 13 Then
            If chk_RewindingStatus.Checked Then
                txt_RewindingCones.Focus()

            ElseIf txt_RwExcSht.Enabled And txt_RwExcSht.Visible Then
                txt_RwExcSht.Focus()

            ElseIf txt_ExcessShort_Adjustment.Visible And txt_ExcessShort_Adjustment.Enabled Then
                txt_ExcessShort_Adjustment.Focus()

            Else
                tab_Main.SelectTab(4)
                'dgv_ChemicalDetails.Focus()
                'dgv_ChemicalDetails.CurrentCell = dgv_ChemicalDetails.Rows(0).Cells(1)
                'dgv_ChemicalDetails.CurrentCell.Selected = True
                'If cbo_Grid_ItemName.Enabled And cbo_Grid_ItemName.Visible Then
                '    cbo_Grid_ItemName.Focus()
                'End If

            End If
        End If

    End Sub

    Private Sub BeamCount_Calculation()
        Dim eds() As String
        Dim Wpm() As String
        Dim wwg() As String
        Dim BmCntAr() As String
        Dim bmc As String = "", TotBmCnt As String = ""
        Dim i As Integer
        Dim Mtr_Divisor As Single, Yrd_Divisor As Single, v As Single
        Dim sWarpWgt As String = 0
        Dim vTotWrpEnds As String = ""
        Dim vTotWrpEnds2 As String = ""
        Dim vTotWrpEnds3 As String = ""
        Dim vTotWgt As String = 0

        On Error Resume Next

        If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub

        If chk_SocietySet.Checked = True Then
            lbl_BeamCount.Text = Val(cbo_CountName.Text)

        Else

            Mtr_Divisor = 0
            Yrd_Divisor = 0
            'If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1006" Then Mtr_Divisor = 1695 '---- Divya Sizing (Thekkalur)
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1012" Then Mtr_Divisor = 1690 '---- Avinashi Sizing (Avinashi)
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1036" Then Mtr_Divisor = 1693 '---- Kalaimagal Sizing (Avinashi)
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1263" Then Mtr_Divisor = 1693.6 '---- APA TEXTILES INDIA PVT LTD (SOMANUR)
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1123" Then Mtr_Divisor = 1689.81 '---- Shanthi Sizing(Somanur)  or  SRI NIKITHA SIZING MILLS (SOMANUR)

            If Val(Yrd_Divisor) = 0 Then Yrd_Divisor = 1848
            If Val(Mtr_Divisor) = 0 Then Mtr_Divisor = 1690 ' 1693

            vTotWrpEnds = ""
            sWarpWgt = ""
            If dgv_WarpingDetails_Total_Set1.RowCount > 0 Then
                vTotWrpEnds = Trim(Val(dgv_WarpingDetails_Total_Set1.Rows(0).Cells(1).Value))
                sWarpWgt = Trim(Val(dgv_WarpingDetails_Total_Set1.Rows(0).Cells(4).Value))

                vTotWrpEnds2 = Trim(Val(dgv_WarpingDetails_Total_Set1.Rows(0).Cells(23).Value))
                vTotWrpEnds3 = Trim(Val(dgv_WarpingDetails_Total_Set1.Rows(0).Cells(24).Value))

            End If
            If dgv_WarpingDetails_Total_Set2.RowCount > 0 Then
                If Val(dgv_WarpingDetails_Total_Set2.Rows(0).Cells(4).Value()) <> 0 Then
                    vTotWrpEnds = vTotWrpEnds & "," & Trim(Val(dgv_WarpingDetails_Total_Set2.Rows(0).Cells(1).Value))
                    sWarpWgt = Trim(sWarpWgt) & "," & Trim(Val(dgv_WarpingDetails_Total_Set2.Rows(0).Cells(4).Value))
                End If
            End If
            If dgv_WarpingDetails_Total_Set3.RowCount > 0 Then
                If Val(dgv_WarpingDetails_Total_Set3.Rows(0).Cells(4).Value()) <> 0 Then
                    vTotWrpEnds = vTotWrpEnds & "," & Trim(Val(dgv_WarpingDetails_Total_Set3.Rows(0).Cells(1).Value))
                    sWarpWgt = Trim(sWarpWgt) & "," & Trim(Val(dgv_WarpingDetails_Total_Set3.Rows(0).Cells(4).Value))
                End If
            End If

            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1220" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1282" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1263" Then '---- Sri Meenakshi Sizing (Somanur)
                eds = Split(vTotWrpEnds, ",")
            Else
                eds = Split(txt_Ends.Text, ",")
            End If
            Wpm = Split(txt_WarpMeters.Text, ",")
            wwg = Split(sWarpWgt, ",")

            bmc = ""
            TotBmCnt = ""
            vTotWgt = 0

            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1123" Then  'Shanthi Sizing or Nithya Sizing

                For i = 0 To UBound(eds)

                    If Val(eds(i)) <> 0 Then

                        v = 0
                        If Trim(UCase(cbo_Meters_Yards.Text)) = "YARDS" Then
                            v = Format(Val(eds(i)) * Val(Wpm(i)) / Val(Yrd_Divisor), "########0.00")
                        Else
                            v = Format(Val(eds(i)) * Val(Wpm(i)) / Val(Mtr_Divisor), "########0.00")
                        End If

                        vTotWgt = Val(vTotWgt) + Val(wwg(i))

                        TotBmCnt = Val(TotBmCnt) + Val(Format(Val(v), "########0.00"))

                    End If

                Next i

                bmc = Format(Val(TotBmCnt) / Val(vTotWgt), "#########0.00")


            Else

                For i = 0 To UBound(wwg)

                    If Val(wwg(i)) <> 0 Then

                        v = 0
                        If Trim(UCase(cbo_Meters_Yards.Text)) = "YARDS" Then
                            v = Format(Val(eds(i)) * Val(Wpm(i)) / Val(Yrd_Divisor) / Val(wwg(i)), "########0.00")
                        Else
                            v = Format(Val(eds(i)) * Val(Wpm(i)) / Val(Mtr_Divisor) / Val(wwg(i)), "########0.00")
                        End If

                        bmc = Trim(bmc) & IIf(Trim(bmc) <> "", ", ", "") & Trim(Format(Val(v), "########0.00"))

                        TotBmCnt = Val(TotBmCnt) + Val(Format(Val(v), "########0.00"))

                    End If

                Next i

            End If


            lbl_BeamCount.Text = bmc

            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1282" Then '---- BRT
                BmCntAr = Split(lbl_BeamCount.Text, ",")

                If UBound(BmCntAr) > 0 Then
                    lbl_BeamCount.Text = Trim(Format(Val(TotBmCnt) / (UBound(BmCntAr) + 1), "########0.00"))
                End If

            End If

        End If

    End Sub

    Private Sub txt_WarpMeters_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txt_WarpMeters.KeyDown
        If e.KeyCode = 38 Then txt_Ends.Focus() ' cbo_Meters_Yards.Focus()
        If e.KeyCode = 40 Then
            cbo_LoomType.Focus()
            '    'tab_Main.SelectTab(0)
            '    'tab_WarpingDeatils.SelectTab(0)
            '    'If dgv_WarpingDetails_Set1.Rows.Count <= 0 Then dgv_WarpingDetails_Set1.Rows.Add()
            '    'dgv_WarpingDetails_Set1.Focus()
            '    'dgv_WarpingDetails_Set1.CurrentCell = dgv_WarpingDetails_Set1.Rows(0).Cells(1)
            '    'dgv_WarpingDetails_Set1.CurrentCell.Selected = True
        End If
    End Sub

    Private Sub txt_WarpMeters_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txt_WarpMeters.TextChanged
        BeamCount_Calculation()
        Elongation_Calculation()
    End Sub

    Private Sub txt_Ends_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txt_Ends.TextChanged
        BeamCount_Calculation()
    End Sub

    Private Sub Excess_Calculation()
        Dim Exsh As String = ""
        Dim vTotYrnTknWeight As String = ""

        If FrmLdSTS = True Then Exit Sub
        If NoCaclSTS = True Then Exit Sub

        If btn_ExcessShort_Input.Visible = False Then '---- Sri Meenakshi Sizing (Somanur)  or  Shanthi Sizing(Somanur)  or  SRI NIKITHA SIZING MILLS (SOMANUR)

            vTotYrnTknWeight = 0
            If dgv_YarnTakenDetails_Total.RowCount > 0 Then
                vTotYrnTknWeight = Format(Val(dgv_YarnTakenDetails_Total.Rows(0).Cells(8).Value), "##########0.000")
            End If

            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1263" Then
                Exsh = Format(Val(lbl_Total_Warping_NetWeight.Text) + Val(lbl_BabyCone_NetWeight.Text) - Val(vTotYrnTknWeight) + Val(txt_ExcessShort_Adjustment.Text), "##########0.0000")
            Else
                Exsh = Format(Val(lbl_Total_Warping_NetWeight.Text) + Val(lbl_BabyCone_NetWeight.Text) - Val(vTotYrnTknWeight), "##########0.0000")
            End If

            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1102" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1163" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1144" Then
                lbl_ExcessShort.Text = Format(Val(Exsh), "##########0.0")
            Else
                lbl_ExcessShort.Text = Format(Val(Exsh), "##########0.000")
            End If
        End If


    End Sub

    Private Sub dgv_YarnTakenDetails_Total_CellValueChanged(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_YarnTakenDetails_Total.CellValueChanged
        If e.ColumnIndex = 8 Then
            If Trim(UCase(cbo_Type.Text)) <> "WARPING" Then Excess_Calculation()
        End If
    End Sub

    Private Sub lbl_BabyCone_NetWeight_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles lbl_BabyCone_NetWeight.TextChanged
        If Trim(UCase(cbo_Type.Text)) <> "WARPING" Then Excess_Calculation()
    End Sub

    Private Sub lbl_Total_Warping_NetWeight_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles lbl_Total_Warping_NetWeight.TextChanged
        If Trim(UCase(cbo_Type.Text)) <> "WARPING" Then
            Excess_Calculation()

            PickUp_Calculation()
        End If
    End Sub

    Private Sub PickUp_Calculation()
        Dim P_Up As Double = 0
        Dim P_up_Act As Double = 0
        Dim vWGT As String = 0
        Dim vTapLen As String = 0
        Dim vWrpEnds1 As String = 0
        Dim vWrpEnds2 As String = 0
        Dim vWrpEnds3 As String = 0
        Dim vSizMtrs1 As String = 0, vSizWgt1 As String = 0
        Dim vSizMtrs2 As String = 0, vSizWgt2 As String = 0
        Dim vSizMtrs3 As String = 0, vSizWgt3 As String = 0
        Dim TotPckUP As String = ""
        Dim Inx As Integer = 0


        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1282" Then '---- BRT Sizing (Somanur)

            vTapLen = 39.36
            If Val(txt_TapeLength.Text) <> 0 Then vTapLen = Val(txt_TapeLength.Text)


            vWrpEnds1 = 0
            vWrpEnds2 = 0
            vWrpEnds3 = 0
            If dgv_WarpingDetails_Total_Set1.RowCount > 0 Then
                If Val(dgv_WarpingDetails_Total_Set1.Rows(0).Cells(4).Value()) <> 0 Then
                    vWrpEnds1 = Trim(Val(dgv_WarpingDetails_Total_Set1.Rows(0).Cells(1).Value))
                End If
            End If
            If dgv_WarpingDetails_Total_Set2.RowCount > 0 Then
                If Val(dgv_WarpingDetails_Total_Set2.Rows(0).Cells(4).Value()) <> 0 Then
                    vWrpEnds2 = Trim(Val(dgv_WarpingDetails_Total_Set2.Rows(0).Cells(1).Value))
                End If
            End If
            If dgv_WarpingDetails_Total_Set3.RowCount > 0 Then
                If Val(dgv_WarpingDetails_Total_Set3.Rows(0).Cells(4).Value()) <> 0 Then
                    vWrpEnds3 = Trim(Val(dgv_WarpingDetails_Total_Set3.Rows(0).Cells(1).Value))
                End If
            End If


            vSizMtrs1 = 0
            vSizMtrs2 = 0
            vSizMtrs3 = 0
            vSizWgt1 = 0
            vSizWgt2 = 0
            vSizWgt3 = 0
            If dgv_SizingDetails_Total_Set1.RowCount > 0 Then
                vSizWgt1 = Trim(Val(dgv_SizingDetails_Total_Set1.Rows(0).Cells(4).Value))
                vSizMtrs1 = Trim(Val(dgv_SizingDetails_Total_Set1.Rows(0).Cells(7).Value))
            End If
            If dgv_SizingDetails_Total_Set2.RowCount > 0 Then
                vSizWgt2 = Trim(Val(dgv_SizingDetails_Total_Set2.Rows(0).Cells(4).Value))
                vSizMtrs2 = Trim(Val(dgv_SizingDetails_Total_Set2.Rows(0).Cells(7).Value))
            End If
            If dgv_SizingDetails_Total_Set3.RowCount > 0 Then
                vSizWgt3 = Trim(Val(dgv_SizingDetails_Total_Set3.Rows(0).Cells(4).Value))
                vSizMtrs3 = Trim(Val(dgv_SizingDetails_Total_Set3.Rows(0).Cells(7).Value))
            End If


            TotPckUP = ""


            Inx = 0


            vWGT = 0
            If Val(vWrpEnds1) <> 0 Then
                If Val(lbl_BeamCount.Text) <> 0 Then
                    vWGT = Format(((Val(vSizMtrs1) * Val(vTapLen) / 36 / 1848) * Val(vWrpEnds1)) / Val(lbl_BeamCount.Text), "##########0.0000")
                    Inx = Inx + 1
                End If
            End If
            P_up_Act = 0
            If Val(vWGT) <> 0 Then
                P_up_Act = Format((Val(vSizWgt1) - Val(vWGT)) / Val(vWGT) * 100, "########0.000")
            End If
            TotPckUP = Val(TotPckUP) + Val(Format(Val(P_up_Act), "########0.00"))

            vWGT = 0
            If Val(vWrpEnds2) <> 0 Then
                If Val(lbl_BeamCount.Text) <> 0 Then
                    vWGT = Format(((Val(vSizMtrs2) * Val(vTapLen) / 36 / 1848) * Val(vWrpEnds2)) / Val(lbl_BeamCount.Text), "##########0.0000")
                    Inx = Inx + 1
                End If
            End If
            P_up_Act = 0
            If Val(vWGT) <> 0 Then
                P_up_Act = Format((Val(vSizWgt2) - Val(vWGT)) / Val(vWGT) * 100, "########0.000")
            End If
            TotPckUP = Val(TotPckUP) + Val(Format(Val(P_up_Act), "########0.00"))

            vWGT = 0
            If Val(vWrpEnds3) <> 0 Then
                If Val(lbl_BeamCount.Text) <> 0 Then
                    vWGT = Format(((Val(vSizMtrs3) * Val(vTapLen) / 36 / 1848) * Val(vWrpEnds3)) / Val(lbl_BeamCount.Text), "##########0.0000")
                    Inx = Inx + 1
                End If
            End If
            P_up_Act = 0
            If Val(vWGT) <> 0 Then
                P_up_Act = Format((Val(vSizWgt3) - Val(vWGT)) / Val(vWGT) * 100, "########0.000")
            End If
            TotPckUP = Val(TotPckUP) + Val(Format(Val(P_up_Act), "########0.00"))

            lbl_PickUp_Perc.Text = ""
            If Inx <> 0 Then
                lbl_PickUp_Perc.Text = Trim(Format(Val(TotPckUP) / Inx, "########0.00"))
            End If

            txt_PickUpPerc_Party.Text = lbl_PickUp_Perc.Text



        Else

            P_up_Act = 0
            If Val(lbl_Total_Sizing_NetWeight.Text) <> 0 Then
                P_up_Act = Format((Val(lbl_Total_Sizing_NetWeight.Text) - Val(lbl_Total_Warping_NetWeight.Text)) / Val(lbl_Total_Warping_NetWeight.Text) * 100, "########0.000")
            End If
            lbl_PickUp_Perc.Text = Format(Val(P_up_Act), "######0.00")

            P_Up = 0
            If Val(lbl_Total_Sizing_ActualNetWeight.Text) <> 0 Then
                P_Up = Format((Val(lbl_Total_Sizing_ActualNetWeight.Text) - Val(lbl_Total_Warping_NetWeight.Text)) / Val(lbl_Total_Warping_NetWeight.Text) * 100, "########0.000")
            End If
            txt_PickUpPerc_Party.Text = Format(Val(P_Up), "######0.00")

        End If

    End Sub


    Private Function Sizing_Beam_Weight_Calculation_From_PickUp(ByVal SizingSlNo As Double, ByVal SizingMtr As Double, ByVal PckUpPerc As Double, ByVal TareWgt As Double) As Double
        Dim Wgt As Double = 0
        Dim Mtrs As Double, Wgt_Mtr As Double, GrsWt As Double, X As Double
        Dim Wpm() As String
        Dim Wwg() As String
        Dim sWarpWgt As String
        Dim WrpMtr As Double = 0, WrpWgt As Double = 0

        Sizing_Beam_Weight_Calculation_From_PickUp = 0

        Try
            sWarpWgt = ""
            If dgv_WarpingDetails_Total_Set1.RowCount > 0 Then
                sWarpWgt = Trim(Val(dgv_WarpingDetails_Total_Set1.Rows(0).Cells(4).Value()))
            Else
                sWarpWgt = "0"
            End If
            If dgv_WarpingDetails_Total_Set2.RowCount > 0 Then
                sWarpWgt = Trim(sWarpWgt) & "," & Trim(Val(dgv_WarpingDetails_Total_Set2.Rows(0).Cells(4).Value()))
            Else
                sWarpWgt = Trim(sWarpWgt) & ",0"
            End If
            If dgv_WarpingDetails_Total_Set3.RowCount > 0 Then
                sWarpWgt = Trim(sWarpWgt) & "," & Trim(Val(dgv_WarpingDetails_Total_Set3.Rows(0).Cells(4).Value()))
            Else
                sWarpWgt = Trim(sWarpWgt) & ",0"
            End If

            Wpm = Split(txt_WarpMeters.Text, ",")
            Wwg = Split(sWarpWgt, ",")

            WrpMtr = 0
            If (SizingSlNo - 1) <= UBound(Wpm) Then
                WrpMtr = Val(Wpm(SizingSlNo - 1))
            End If

            WrpWgt = 0
            If (SizingSlNo - 1) <= UBound(Wwg) Then
                WrpWgt = Val(Wwg(SizingSlNo - 1))
            End If

            Mtrs = 0
            If Trim(UCase(cbo_Meters_Yards.Text)) = "YARDS" Then
                Mtrs = Val(WrpMtr) / 1.0936
                '        or
                'Mtrs  = Val(WrpMtr) * 0.9144
            Else
                Mtrs = Val(WrpMtr)
            End If

            If Val(txt_TapeLength.Text) <> 0 Then Mtrs = Mtrs * 39.37 / Val(txt_TapeLength.Text)

            Wgt_Mtr = 0
            If Mtrs <> 0 Then Wgt_Mtr = Val(WrpWgt) / Mtrs
            X = Wgt_Mtr * Val(SizingMtr)

            GrsWt = (X + (X * Val(PckUpPerc) / 100)) + Val(TareWgt)

            Select Case GrsWt - Int(GrsWt)
                Case Is < 0.1
                    GrsWt = Int(GrsWt)
                Case Is < 0.2
                    GrsWt = Int(GrsWt) + 0.2
                Case Is < 0.3
                    GrsWt = Int(GrsWt) + 0.2
                Case Is < 0.4
                    GrsWt = Int(GrsWt) + 0.4
                Case Is < 0.5
                    GrsWt = Int(GrsWt) + 0.4
                Case Is < 0.6
                    GrsWt = Int(GrsWt) + 0.6
                Case Is < 0.7
                    GrsWt = Int(GrsWt) + 0.6
                Case Is < 0.8
                    GrsWt = Int(GrsWt) + 0.8
                Case Is < 0.9
                    GrsWt = Int(GrsWt) + 0.8
                Case Else
                    GrsWt = Int(GrsWt) + 1
            End Select

            Sizing_Beam_Weight_Calculation_From_PickUp = Format(Val(GrsWt), "#########0.000")

        Catch ex As Exception
            MessageBox.Show(ex.Message, "ERROR IN BEAMWISE WEIGHT CALCULATION...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Function

    Private Sub Elongation_Calculation()
        Dim X As Single
        Dim ElgPerc As Single = 0
        Dim ElgMtr As Single = 0
        Dim vTotWrpMtrs As Single
        Dim a() As String

        vTotWrpMtrs = 0

        a = Split(Trim(txt_WarpMeters.Text), ",")
        For i = 0 To UBound(a)
            vTotWrpMtrs = vTotWrpMtrs + Val(a(i))
        Next


        X = 0
        If Trim(UCase(cbo_Meters_Yards.Text)) = "YARDS" Then
            If Val(txt_TapeLength.Text) > 0 Then
                X = (Val(vTotWrpMtrs) * 36) / Val(txt_TapeLength.Text)
            Else
                X = (Val(vTotWrpMtrs) * 36) / 39.37
            End If
        Else
            If Val(txt_TapeLength.Text) > 0 Then
                X = (Val(vTotWrpMtrs) * 39.37) / Val(txt_TapeLength.Text)
            Else
                X = (Val(vTotWrpMtrs) * 39.37) / 39.37
            End If
        End If

        ElgPerc = 0
        ElgMtr = 0
        If X <> 0 Then
            ElgMtr = Val(lbl_Total_Sizing_Meters.Text) - X
            ElgPerc = Val(ElgMtr) / X * 100
        End If
        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1263" Then
            lbl_Elongation_Mtr.Text = Format(Val(ElgMtr) + (Val(lbl_Tot_Sizing_Beams.Text) * 8), "#####0.00")
        Else
            lbl_Elongation_Mtr.Text = Format(Val(ElgMtr), "#####0.00")
        End If
        lbl_Elongation_Perc.Text = Format(Val(ElgPerc), "#####0.00")

    End Sub

    Private Sub lbl_Total_Sizing_NetWeight_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles lbl_Total_Sizing_NetWeight.TextChanged
        PickUp_Calculation()
    End Sub
    Private Sub lbl_Total_Sizing_ActualNetWeight_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles lbl_Total_Sizing_ActualNetWeight.TextChanged
        PickUp_Calculation()
    End Sub

    Private Sub txt_TapeLength_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txt_TapeLength.TextChanged
        Elongation_Calculation()
    End Sub

    Private Sub lbl_Total_Sizing_Meters_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles lbl_Total_Sizing_Meters.TextChanged
        Elongation_Calculation()
    End Sub

    Private Sub Stock_calulation()
        Dim cmd As New SqlClient.SqlCommand
        Dim Da As SqlClient.SqlDataAdapter
        Dim Dt1 As DataTable
        Dim DtHd As DataTable
        Dim Bm_Rcpt_No As String, Bm_Ret_No As String
        Dim Bg_Rcpt_No As String, Bg_Ret_No As String
        Dim Cn_Rcpt_No As String, Cn_Ret_No As String
        Dim Yarn_Rcpt_No As String, Yarn_Ret_No As String
        Dim Bg_OpStk As Double, Bg_Rcpt As Double, Bg_Ret As Double, Bg_Bal As Double
        Dim Bm_OpStk As Double, Bm_Rcpt As Double, Bm_Ret As Double, Bm_Used As Double, Bm_Bal As Double
        Dim Cn_OpStk As Double, Cn_Rcpt As Double, Cn_Ret As Double, Cn_Bal As Double
        Dim Tot_ConsYrnWt As String = 0
        Dim Rcpt_Yarn As String = 0, Tot_Yarn As String = 0, Delv_Yarn As String = 0
        Dim Exsh As String = 0, Rcpt_MillYarn As String = 0, Rcpt_RWYarn As String = 0
        Dim Tot_YrnTknWt As String = 0, Tot_BabyCnWt As String = 0
        Dim RwExSh_Yarn As String = 0, RwExSh_StNo As String
        Dim Yarn_Tranfr_Wt As String = 0, Yarn_Tranfr_No As String
        Dim Yarn_ExcSht_Wt As String = 0, Yarn_ExcSht_No As String
        Dim Tot As Double, Tot1 As Double, Tot2 As Double
        Dim i As Long
        Dim SetNo_Beam As String, SetNo_Yarn As String
        Dim Curr_SetDt As Date
        Dim SetDt1_Beam As Date, SetDt2_Beam As Date, SetDt1_Yarn As Date, SetDt2_Yarn As Date
        Dim Cnt_Cond As String
        Dim Led_IdNo As Integer
        Dim OrdBy As String, OrdBy_StNo As Double, SetOrdBy_Beam As Double
        Dim Und_IdNo As Long, Auinc_StNo As Long
        Dim Led_GrpIdNos As String, Cnt_GrpIdNos As String, Cmp_Cond As String
        Dim New_Code As String
        Dim Cnt_IdNo As Integer, Cnt_UndIdNo As Integer
        Dim n As Integer
        Dim TotDB As String, TotCR As String
        Dim Amt_OpBal As Double, Amt_Rcpt As Double, Cur_SetAmt As Double, Bal_Amt As Double, Discount_Amt As Double
        Dim Amt_RcptNo As String
        Dim YrnStk_Condt As String
        Dim AcCmp_Cond As String = ""
        Dim Dup_YarnRcptNo As String = ""
        Dim Nr As Long = 0
        Dim YrnStk_OtherCountPrtculrs_Condt As String
        Dim SetDt1_PrevDt As Date
        Dim vInv_No As String = ""

        New_Code = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

        OrdBy = Format(Val(Common_Procedures.OrderBy_CodeToValue(Trim(lbl_SetNo.Text))), "##########0.00")

        OrdBy_StNo = 0

        Auinc_StNo = 0

        Da = New SqlClient.SqlDataAdapter("select a.*,d.Invoice_no as invnumber from Specification_Head a Left Outer JOIN Invoice_Head d ON a.Invoice_Code = d.Invoice_Code where a.company_idno = " & Str(Val(lbl_Company.Tag)) & " and a.set_code = '" & Trim(New_Code) & "' order by a.For_orderBy", Con)
        DtHd = New DataTable
        Da.Fill(DtHd)
        If DtHd.Rows.Count > 0 Then
            Auinc_StNo = Val(DtHd.Rows(0).Item("auto_setno").ToString)
            vInv_No = DtHd.Rows(0).Item("invnumber").ToString
        End If


        If Auinc_StNo = 0 Then
            Da = New SqlClient.SqlDataAdapter("select  max(Auto_SetNo) from Specification_Head", Con)
            Dt1 = New DataTable
            Da.Fill(Dt1)
            If Dt1.Rows.Count > 0 Then
                Auinc_StNo = Val(Dt1.Rows(0)(0).ToString)
            End If
            Dt1.Clear()
            If Auinc_StNo = 0 Then Auinc_StNo = 1
        End If

        dgv_YarnStockDetails.Rows.Clear()
        dgv_YarnStockSummary.Rows.Clear()
        dgv_EmptyBeamStockDetails.Rows.Clear()
        dgv_EmptyBagStockDetails.Rows.Clear()
        dgv_EmptyConeStockDetails.Rows.Clear()
        dgv_AmountDetails.Rows.Clear()

        ' If New_Entry = True Then Exit Sub

        SetNo_Beam = "" : SetNo_Yarn = ""
        SetOrdBy_Beam = 0

        Cmp_Cond = ""
        If Val(Common_Procedures.settings.StatementPrint_InStock_Combine_AllCompany) = 0 Then
            Cmp_Cond = " a.Company_IdNo = " & Str(Val(lbl_Company.Tag)) & "  "
            '    Cmp_Cond = " a.Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and "
        End If

        Cmp_Cond = Trim(Cmp_Cond) & IIf(Trim(Cmp_Cond) <> "", " and ", "") & " a.SoftwareType_IdNo = " & Str(Val(Common_Procedures.SoftwareTypes.Sizing_Software)) & " and "

        If DtHd.Rows.Count > 0 Then
            Led_IdNo = Val(DtHd.Rows(0).Item("ledger_idno").ToString)

        End If

        If New_Entry = True Then
            Led_IdNo = Common_Procedures.Ledger_AlaisNameToIdNo(Con, cbo_Ledger.Text)
        End If

        Und_IdNo = Val(Led_IdNo)
        'Rs1 = New ADODB.Recordset
        'Rs1.Open("select * from ledger_head where ledger_idno = " & Str(Val(Und_IdNo)), Con, adOpenStatic, adLockReadOnly)
        'If Not (Rs1.BOF And Rs1.EOF) Then
        '    Rs1.MoveFirst()
        '    If Rs1!Under_LedgerIdno <> "" Then Und_IdNo = Val(Rs1!Under_LedgerIdno)
        'End If
        'Rs1.Close()
        'Rs1 = Nothing
        If Und_IdNo = 0 Then Und_IdNo = Val(Led_IdNo)

        'Da = New SqlClient.SqlDataAdapter("select * from ledger_head where Under_LedgerIdno = " & Str(Val(Und_IdNo)), Con)
        'Dt1 = New DataTable
        'Da.Fill(Dt1)

        'Led_GrpIdNos = ""
        'If Dt1.Rows.Count > 0 Then
        '    For i = 0 To Dt1.Rows.Count - 1
        '        Led_GrpIdNos = Trim(Led_GrpIdNos) & IIf(Trim(Led_GrpIdNos) <> "", ", ", "") & Trim(Val(Dt1.Rows(i).Item("Ledger_Idno")))
        '    Next
        'End If
        'If Trim(Led_GrpIdNos) <> "" Then
        '    Led_GrpIdNos = "(" & Led_GrpIdNos & ")"
        'Else
        Led_GrpIdNos = "(" & Trim(Val(Led_IdNo)) & ")"
        'End If
        If DtHd.Rows.Count > 0 Then
            Cnt_IdNo = Val(DtHd.Rows(0).Item("count_idno").ToString)
        End If

        If New_Entry = True Then
            Cnt_IdNo = Common_Procedures.Count_NameToIdNo(Con, cbo_CountName.Text)
        End If

        Cnt_UndIdNo = Val(Cnt_IdNo)

        Da = New SqlClient.SqlDataAdapter("select * from count_head where count_idno = " & Str(Val(Cnt_UndIdNo)), Con)
        Dt1 = New DataTable
        Da.Fill(Dt1)
        If Dt1.Rows.Count > 0 Then
            If IsDBNull(Dt1.Rows(0).Item("Count_StockUnder_IdNo").ToString) = False Then
                If Val(Dt1.Rows(0).Item("Count_StockUnder_IdNo").ToString) <> 0 Then Cnt_UndIdNo = Val(Dt1.Rows(0).Item("Count_StockUnder_IdNo").ToString)
            End If
        End If
        Dt1.Clear()

        Da = New SqlClient.SqlDataAdapter("select * from count_head where Count_StockUnder_IdNo <> 0 and Count_StockUnder_IdNo = " & Str(Val(Cnt_UndIdNo)), Con)
        Dt1 = New DataTable
        Da.Fill(Dt1)

        Cnt_GrpIdNos = ""
        If Dt1.Rows.Count > 0 Then
            For i = 0 To Dt1.Rows.Count - 1
                Cnt_GrpIdNos = Trim(Cnt_GrpIdNos) & IIf(Trim(Cnt_GrpIdNos) <> "", ", ", "") & Trim(Val(Dt1.Rows(i).Item("Count_IdNo")))
            Next
        End If
        If Trim(Cnt_GrpIdNos) <> "" Then
            Cnt_GrpIdNos = "(" & Cnt_GrpIdNos & ")"
        Else
            Cnt_GrpIdNos = "(" & Trim(Val(Cnt_IdNo)) & ")"
        End If

        Cnt_Cond = "(a.count_idno = " & Str(Cnt_IdNo) & " or a.count_idno IN " & Trim(Cnt_GrpIdNos) & ")"

        OrdBy_StNo = Format(Val(Common_Procedures.OrderBy_CodeToValue(lbl_SetNo.Text)), "########0.00")

        cmd.Connection = Con
        cmd.Parameters.Clear()
        If New_Entry = True Then
            cmd.Parameters.AddWithValue("@SetDate", dtp_Date.Value)
            Curr_SetDt = dtp_Date.Value
        Else
            If DtHd.Rows.Count > 0 Then
                cmd.Parameters.AddWithValue("@SetDate", DtHd.Rows(0).Item("set_date"))
                Curr_SetDt = DtHd.Rows(0).Item("set_date")
            Else
                cmd.Parameters.AddWithValue("@SetDate", Common_Procedures.Company_FromDate)
                Curr_SetDt = Common_Procedures.Company_FromDate
            End If
        End If
        cmd.Parameters.AddWithValue("@CompFromDate", Common_Procedures.Company_FromDate)


        '----   Getting Previous SetNo & SetDate For Beam
        SetDt1_Beam = Common_Procedures.Company_FromDate
        SetDt2_Beam = Common_Procedures.Company_FromDate

        cmd.CommandText = "select a.*,d.Invoice_no from Specification_Head a Left Outer JOIN Invoice_Head d ON a.Invoice_Code = d.Invoice_Code where " & Cmp_Cond & " a.ledger_idno in " & Trim(Led_GrpIdNos) & " and (a.Set_Date < @SetDate or ( a.Set_Date = @SetDate and a.for_orderby < " & Str(Format(Val(OrdBy_StNo), "########0.00")) & ") or ( a.Set_Date = @SetDate and a.for_orderby = " & Str(Val(OrdBy_StNo)) & " and a.Auto_SetNo < " & Str(Val(Auinc_StNo)) & ")  ) order by a.set_date desc, a.for_orderby desc, a.Auto_SetNo desc"
        Da = New SqlClient.SqlDataAdapter(cmd)
        Dt1 = New DataTable
        Da.Fill(Dt1)

        If Dt1.Rows.Count > 0 Then
            SetNo_Beam = Dt1.Rows(0).Item("set_no").ToString
            SetDt1_Beam = Dt1.Rows(0).Item("set_date")
            SetDt2_Beam = DateAdd("d", 1, SetDt1_Beam)
            SetOrdBy_Beam = Dt1.Rows(0).Item("for_OrderBy").ToString
            If Microsoft.VisualBasic.Right(Dt1.Rows(0).Item("set_code").ToString, 5) <> Common_Procedures.FnYearCode Then OrdBy_StNo = OrdBy_StNo + Val(Dt1.Rows(0).Item("For_OrderBy").ToString())
        End If
        Dt1.Clear()

        cmd.Parameters.AddWithValue("@BeamSetDate1", SetDt1_Beam.Date)
        cmd.Parameters.AddWithValue("@BeamSetDate2", SetDt2_Beam.Date)

        '----   Opening Stock for Beam

        prn_EmpBm_Op = 0 : prn_EmpBm_Rcpt = 0 : prn_EmpBm_Delv = 0 : prn_EmpBm_Cons = 0
        prn_EmpBm_OpStNo = "" : prn_EmpBm_RcptNo = "" : prn_EmpBm_DcNo = ""

        Bm_OpStk = 0

        cmd.CommandText = "select sum(a.Empty_Beam) as Op_EmpBeam from Stock_Empty_BeamBagCone_Processing_Details a where " & Cmp_Cond & " a.ReceivedFrom_Idno IN " & Trim(Led_GrpIdNos) & " and a.Reference_Date < @BeamSetDate2"
        Da = New SqlClient.SqlDataAdapter(cmd)
        Dt1 = New DataTable
        Da.Fill(Dt1)
        If Dt1.Rows.Count > 0 Then
            If IsDBNull(Dt1.Rows(0).Item("Op_EmpBeam").ToString) = False Then Bm_OpStk = Val(Dt1.Rows(0).Item("Op_EmpBeam").ToString)
        End If
        Dt1.Clear()

        cmd.CommandText = "select sum(a.Empty_Beam) as Op_EmpBeam from Stock_Empty_BeamBagCone_Processing_Details a where " & Cmp_Cond & " a.Reference_Code NOT LIKE '" & Trim(PkCondition_TIN) & "%' and a.Reference_Code NOT LIKE '" & Trim(PkCondition_GST) & "%' and a.Reference_Code NOT LIKE '" & Trim(PkCondition_MACHINE3) & "%' and a.Reference_Code NOT LIKE '" & Trim(PkCondition_MACHINE4) & "%' and a.DeliveryTo_Idno IN " & Trim(Led_GrpIdNos) & " and a.Reference_Date < @BeamSetDate2"
        Da = New SqlClient.SqlDataAdapter(cmd)
        Dt1 = New DataTable
        Da.Fill(Dt1)
        If Dt1.Rows.Count > 0 Then
            If IsDBNull(Dt1.Rows(0).Item("Op_EmpBeam").ToString) = False Then Bm_OpStk = Bm_OpStk - Val(Dt1.Rows(0).Item("Op_EmpBeam").ToString)
        End If
        Dt1.Clear()


        If DateDiff("d", SetDt1_Beam, Curr_SetDt) = 0 Then
            cmd.CommandText = "select sum(a.Total_Pavu_Beam) from Specification_Head a where " & Cmp_Cond & " a.ledger_idno IN " & Trim(Led_GrpIdNos) & " and (a.Set_Date < @BeamSetDate1 or ( a.Set_Date = @BeamSetDate1 and a.for_orderby < " & Str(Format(Val(OrdBy_StNo), "########0.00")) & ") or ( a.Set_Date = @BeamSetDate1 and a.for_orderby = " & Str(Format(Val(OrdBy_StNo), "########0.00")) & " and a.Auto_setNo < " & Str(Val(Auinc_StNo)) & ") )"
        Else
            cmd.CommandText = "select sum(a.Total_Pavu_Beam) from Specification_Head a where " & Cmp_Cond & " a.ledger_idno IN " & Trim(Led_GrpIdNos) & " and a.Set_Date < @BeamSetDate2"
        End If


        'If New_Entry = True Then

        '    If DateDiff("d", SetDt1_Beam, dtp_Date.Value) = 0 Then
        '        cmd.CommandText = "select sum(a.Total_Pavu_Beam) from Specification_Head a where " & Cmp_Cond & " a.ledger_idno IN " & Trim(Led_GrpIdNos) & " and (a.Set_Date < @BeamSetDate1 or ( a.Set_Date = @BeamSetDate1 and a.for_orderby < " & Str(Format(Val(OrdBy_StNo), "########0.00")) & ") or ( a.Set_Date = @BeamSetDate1 and a.for_orderby = " & Str(Format(Val(OrdBy_StNo), "########0.00")) & " and a.Auto_setNo < " & Str(Val(Auinc_StNo)) & ") )"
        '    Else
        '        cmd.CommandText = "select sum(a.Total_Pavu_Beam) from Specification_Head a where " & Cmp_Cond & " a.ledger_idno IN " & Trim(Led_GrpIdNos) & " and a.Set_Date < @BeamSetDate2"
        '    End If

        'Else

        '    If DateDiff("d", SetDt1_Beam, Common_Procedures.Company_FromDate) = 0 Then
        '        cmd.CommandText = "select sum(a.Total_Pavu_Beam) from Specification_Head a where " & Cmp_Cond & " a.ledger_idno IN " & Trim(Led_GrpIdNos) & " and (a.Set_Date < @BeamSetDate1 or ( a.Set_Date = @BeamSetDate1 and a.for_orderby < " & Str(Format(Val(OrdBy_StNo), "########0.00")) & ") or ( a.Set_Date = @BeamSetDate1 and a.for_orderby = " & Str(Format(Val(OrdBy_StNo), "########0.00")) & " and a.Auto_setNo < " & Str(Val(Auinc_StNo)) & ") )"
        '    Else
        '        cmd.CommandText = "select sum(a.Total_Pavu_Beam) from Specification_Head a where " & Cmp_Cond & " a.ledger_idno IN " & Trim(Led_GrpIdNos) & " and a.Set_Date < @BeamSetDate2"
        '    End If

        'End If

        Da = New SqlClient.SqlDataAdapter(cmd)
        Dt1 = New DataTable
        Da.Fill(Dt1)
        If Dt1.Rows.Count > 0 Then
            If IsDBNull(Dt1.Rows(0)(0).ToString) = False Then Bm_OpStk = Bm_OpStk - Val(Dt1.Rows(0)(0).ToString)
        End If
        Dt1.Clear()

        '----  Rolls Receipt
        Bm_Rcpt = 0 : Bm_Rcpt_No = ""

        cmd.CommandText = "select a.company_idno, a.Reference_Code, a.Reference_No, a.for_OrderBy, a.Party_Bill_No, sum(a.Empty_Beam) as Beam from Stock_Empty_BeamBagCone_Processing_Details a where " & Cmp_Cond & " (a.Reference_Code like 'SEBRE-%' or a.Reference_Code like 'YNREC-%') and a.ReceivedFrom_Idno IN " & Trim(Led_GrpIdNos) & " and a.Reference_Date between @BeamSetDate2 and @SetDate and a.Empty_Beam <> 0 group by a.company_idno, a.Reference_Code, a.Reference_No, a.for_OrderBy, a.Party_Bill_No having sum(a.Empty_Beam) <> 0 order by a.for_OrderBy, a.Reference_No, a.Reference_Code"
        'cmd.CommandText = "select a.company_idno, a.Reference_Code, a.Reference_No, a.for_OrderBy, a.Party_Bill_No, sum(a.Empty_Beam) as Beam from Stock_Empty_BeamBagCone_Processing_Details a where " & Cmp_Cond & " (a.Reference_Code like 'EBREC-%' or a.Reference_Code like 'YNREC-%') and a.ReceivedFrom_Idno IN " & Trim(Led_GrpIdNos) & " and a.Reference_Date between @BeamSetDate2 and @SetDate and a.Empty_Beam <> 0 group by a.company_idno, a.Reference_Code, a.Reference_No, a.for_OrderBy, a.Party_Bill_No having sum(a.Empty_Beam) <> 0 order by a.for_OrderBy, a.Reference_No, a.Reference_Code"
        Da = New SqlClient.SqlDataAdapter(cmd)
        Dt1 = New DataTable
        Da.Fill(Dt1)

        If Dt1.Rows.Count > 0 Then
            For i = 0 To Dt1.Rows.Count - 1
                Bm_Rcpt_No = Trim(Bm_Rcpt_No) & IIf(Trim(Bm_Rcpt_No) <> "", ", ", "") & Trim(Dt1.Rows(i).Item("Party_Bill_No").ToString)
                Bm_Rcpt = Bm_Rcpt + Val(Dt1.Rows(i).Item("Beam").ToString)
            Next
        End If
        Dt1.Clear()


        '----  Rolls Return
        Bm_Ret = 0 : Bm_Ret_No = ""

        cmd.CommandText = "select a.company_idno, a.Reference_Code, a.Reference_No, a.for_OrderBy, a.Party_Bill_No, sum(a.Empty_Beam) as Beam from Stock_Empty_BeamBagCone_Processing_Details a where " & Cmp_Cond & " (a.Reference_Code like 'EBDLV-%' or a.Reference_Code like 'YNDLV-%'or a.Reference_Code like 'YNRET-%') and a.DeliveryTo_Idno IN " & Trim(Led_GrpIdNos) & " and a.Reference_Date between @BeamSetDate2 and @SetDate and a.Empty_Beam <> 0 group by a.company_idno, a.Reference_Code, a.Reference_No, a.for_OrderBy, a.Party_Bill_No having sum(a.Empty_Beam) <> 0 order by a.for_OrderBy, a.Reference_No, a.Reference_Code"
        Da = New SqlClient.SqlDataAdapter(cmd)
        Dt1 = New DataTable
        Da.Fill(Dt1)

        If Dt1.Rows.Count > 0 Then
            For i = 0 To Dt1.Rows.Count - 1
                Bm_Ret_No = Trim(Bm_Ret_No) & IIf(Trim(Bm_Ret_No) <> "", ", ", "") & Trim(Dt1.Rows(i).Item("Party_Bill_No").ToString)
                Bm_Ret = Bm_Ret + Val(Dt1.Rows(i).Item("Beam").ToString)
            Next
        End If
        Dt1.Clear()

        '---   Counsumed Rolls
        If New_Entry = False Then
            If DtHd.Rows.Count > 0 Then
                Bm_Used = Val(DtHd.Rows(0).Item("total_pavu_beam").ToString)
            Else
                Bm_Used = Val(lbl_Total_Sizing_Beams.Text)
            End If
        Else
            Bm_Used = Val(lbl_Total_Sizing_Beams.Text)
        End If

        'Starting Display Empty Beam Stock

        TotDB = 0
        TotCR = 0

        With dgv_EmptyBeamStockDetails

            .Rows.Clear()

            '----  Rolls On Hand
            n = .Rows.Add
            .Rows(n).Cells(0).Value = " Rolls on hand " & IIf(Trim(SetNo_Beam) <> "", "(B/F Set No : " & Trim(SetNo_Beam) & ")", "")
            .Rows(n).Cells(1).Value = IIf(Bm_OpStk > 0, Val(Bm_OpStk), "")
            .Rows(n).Cells(2).Value = IIf(Bm_OpStk < 0, Math.Abs(Val(Bm_OpStk)), "")
            Bm_Bal = Val(Bm_OpStk)
            .Rows(n).Cells(3).Value = Val(Bm_Bal)

            If Val(Bm_OpStk) > 0 Then
                TotDB = Val(Bm_OpStk)
            Else
                TotCR = Val(Bm_OpStk)
            End If

            prn_EmpBm_OpStNo = Trim(SetNo_Beam)
            prn_EmpBm_Op = Val(Bm_OpStk)

            '----  RollsReceived
            n = .Rows.Add
            .Rows(n).Cells(0).Value = " Rolls Received ( " & Trim(Bm_Rcpt_No) & ")"
            .Rows(n).Cells(1).Value = Val(Bm_Rcpt)
            .Rows(n).Cells(2).Value = ""
            Bm_Bal = Val(Bm_Bal) + Val(Bm_Rcpt)
            .Rows(n).Cells(3).Value = Val(Bm_Bal)
            TotDB = Val(TotDB) + Val(Bm_Rcpt)

            prn_EmpBm_Rcpt = Val(Bm_Rcpt)
            prn_EmpBm_RcptNo = Trim(Bm_Rcpt_No)


            '----  ConsumedRolls
            n = .Rows.Add
            .Rows(n).Cells(0).Value = " Consumed Rolls "
            .Rows(n).Cells(1).Value = ""
            .Rows(n).Cells(2).Value = Val(Bm_Used)
            Bm_Bal = Val(Bm_Bal) - Val(Bm_Used)
            .Rows(n).Cells(3).Value = Val(Bm_Bal)
            TotCR = Val(TotCR) + Val(Bm_Used)

            prn_EmpBm_Cons = Val(Bm_Used)


            '----  Return Rolls
            n = .Rows.Add
            .Rows(n).Cells(0).Value = " Delivery Rolls  ( " & Trim(Bm_Ret_No) & ")"
            .Rows(n).Cells(1).Value = ""
            .Rows(n).Cells(2).Value = Val(Bm_Ret)
            Bm_Bal = Val(Bm_Bal) - Val(Bm_Ret)
            .Rows(n).Cells(3).Value = Val(Bm_Bal)
            TotCR = Val(TotCR) + Val(Bm_Ret)

            prn_EmpBm_Delv = Val(Bm_Ret)
            prn_EmpBm_DcNo = Trim(Bm_Ret_No)


            dgv_EmptyBeamStockDetails_Total.Rows.Clear()
            n = dgv_EmptyBeamStockDetails_Total.Rows.Add()
            dgv_EmptyBeamStockDetails_Total.Rows(n).Cells(0).Value = " TOTAL"
            dgv_EmptyBeamStockDetails_Total.Rows(n).Cells(1).Value = Val(TotDB)
            dgv_EmptyBeamStockDetails_Total.Rows(n).Cells(2).Value = Val(TotCR)
            dgv_EmptyBeamStockDetails_Total.Rows(n).Cells(3).Value = Val(Bm_Bal)

        End With


        ' ------------- EmptyBeam Stock Summary - WidthWise

        cmd.CommandText = "truncate table " & Trim(Common_Procedures.ReportTempTable) & ""
        cmd.ExecuteNonQuery()

        cmd.CommandText = "insert into " & Trim(Common_Procedures.ReportTempTable) & " (   name1          ,           int1             ) " &
                            " Select                b.Beam_Width_Name, sum(abs(a.Empty_Beam)) from Stock_Empty_BeamBagCone_Processing_Details a LEFT OUTER JOIN Beam_Width_Head b ON a.Beam_Width_IdNo = b.Beam_Width_IdNo Where " & Cmp_Cond & " a.Reference_Code NOT LIKE '" & Trim(PkCondition_TIN) & "%' and a.Reference_Code NOT LIKE '" & Trim(PkCondition_GST) & "%' and a.Reference_Code NOT LIKE '" & Trim(PkCondition_MACHINE3) & "%' and  a.Reference_Code NOT LIKE '" & Trim(PkCondition_MACHINE4) & "%' and a.ReceivedFrom_Idno in " & Trim(Led_GrpIdNos) & " and a.Reference_Date <= @SetDate group by b.Beam_Width_Name"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "insert into " & Trim(Common_Procedures.ReportTempTable) & " (   name1  ,              int1             ) " &
                    " Select                b.Beam_Width_Name, -1*sum(abs(a.Empty_Beam)) from Stock_Empty_BeamBagCone_Processing_Details a LEFT OUTER JOIN Beam_Width_Head b ON a.Beam_Width_IdNo = b.Beam_Width_IdNo Where " & Cmp_Cond & " a.Reference_Code NOT LIKE '" & Trim(PkCondition_TIN) & "%' and a.Reference_Code NOT LIKE '" & Trim(PkCondition_GST) & "%' and a.Reference_Code NOT LIKE '" & Trim(PkCondition_MACHINE3) & "%' and a.Reference_Code NOT LIKE '" & Trim(PkCondition_MACHINE4) & "%' and a.DeliveryTo_Idno in " & Trim(Led_GrpIdNos) & " and a.Reference_Date <= @SetDate  group by b.Beam_Width_Name"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "insert into " & Trim(Common_Procedures.ReportTempTable) & " (   name1  ,              int1             ) " &
                            " Select                b.Beam_Width_Name, -1*sum(abs(a.Empty_Beam))  from Stock_Empty_BeamBagCone_Processing_Details a LEFT OUTER JOIN Beam_Width_Head b ON a.Beam_Width_IdNo = b.Beam_Width_IdNo INNER JOIN Specification_Head c ON a.Reference_Code = (CASE WHEN c.Set_Code LIKE '" & Trim(PkCondition_GST) & "%' THEN '" & Trim(PkCondition_GST) & "'  WHEN c.Set_Code LIKE '" & Trim(PkCondition_MACHINE3) & "%' THEN '" & Trim(PkCondition_MACHINE3) & "'  WHEN c.Set_Code LIKE '" & Trim(PkCondition_MACHINE4) & "%' THEN '" & Trim(PkCondition_MACHINE4) & "' ELSE '" & Trim(PkCondition_TIN) & "' END) + c.Set_Code and a.company_idno = c.company_idno Where " & Cmp_Cond & " (a.Reference_Code LIKE '" & Trim(PkCondition_TIN) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_GST) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_MACHINE3) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_MACHINE4) & "%') and a.DeliveryTo_Idno IN " & Trim(Led_GrpIdNos) & " and (a.Reference_Date < @SetDate or (a.Reference_Date = @SetDate and a.for_orderby < " & Str(Format(Val(OrdBy_StNo), "########0.00")) & ")  or ( a.Reference_Date = @SetDate and a.for_orderby = " & Str(Format(Val(OrdBy_StNo), "########0.00")) & " and c.Auto_setNo <= " & Str(Auinc_StNo) & ") )  group by b.Beam_Width_Name"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "truncate table Temp_Statement_EmptyBeam_Stock_Summary"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "insert into Temp_Statement_EmptyBeam_Stock_Summary( Beam_Width_Name, Empty_Beam ) select name1 as Beam_Width_Name, sum(int1) as Empty_Beam from " & Trim(Common_Procedures.ReportTempTable) & " group by name1 having sum(int1) <> 0 order by name1"
        cmd.ExecuteNonQuery()


        '*****************  END BEAM  ********************


        '----   Opening Stock for Empty bag

        prn_EmpBg_Op = 0 : prn_EmpBg_Rcpt = 0 : prn_EmpBg_Delv = 0
        prn_EmpBg_OpStNo = "" : prn_EmpBg_RcptNo = "" : prn_EmpBg_DcNo = ""

        Bg_OpStk = 0

        cmd.CommandText = "select sum(a.Empty_Bags) as Op_EmpBags from Stock_Empty_BeamBagCone_Processing_Details a where " & Cmp_Cond & " a.ReceivedFrom_Idno IN " & Trim(Led_GrpIdNos) & " and a.Reference_Date < @BeamSetDate2"
        Da = New SqlClient.SqlDataAdapter(cmd)
        Dt1 = New DataTable
        Da.Fill(Dt1)
        If Dt1.Rows.Count > 0 Then
            If IsDBNull(Dt1.Rows(0).Item("Op_EmpBags").ToString) = False Then Bg_OpStk = Val(Dt1.Rows(0).Item("Op_EmpBags").ToString)
        End If
        Dt1.Clear()

        cmd.CommandText = "select sum(a.Empty_Bags) as Op_EmpBags from Stock_Empty_BeamBagCone_Processing_Details a where " & Cmp_Cond & " a.DeliveryTo_Idno IN " & Trim(Led_GrpIdNos) & " and a.Reference_Date < @BeamSetDate2"
        Da = New SqlClient.SqlDataAdapter(cmd)
        Dt1 = New DataTable
        Da.Fill(Dt1)
        If Dt1.Rows.Count > 0 Then
            If IsDBNull(Dt1.Rows(0).Item("Op_EmpBags").ToString) = False Then Bg_OpStk = Bg_OpStk - Val(Dt1.Rows(0).Item("Op_EmpBags").ToString)
        End If
        Dt1.Clear()

        '----  Receipt EmptyBags
        Bg_Rcpt = 0 : Bg_Rcpt_No = ""

        cmd.CommandText = "select a.company_idno, a.Reference_Code, a.Reference_No, a.for_OrderBy, a.Party_Bill_No, sum(a.Empty_Bags) as bags from Stock_Empty_BeamBagCone_Processing_Details a where " & Cmp_Cond & " a.ReceivedFrom_Idno IN " & Trim(Led_GrpIdNos) & " and a.Reference_Date between @BeamSetDate2 and @SetDate and a.Empty_Bags <> 0 group by a.company_idno, a.Reference_Code, a.Reference_No, a.for_OrderBy, a.Party_Bill_No having sum(a.Empty_Bags) <> 0 order by a.for_OrderBy, a.Reference_No, a.Reference_Code"
        Da = New SqlClient.SqlDataAdapter(cmd)
        Dt1 = New DataTable
        Da.Fill(Dt1)

        If Dt1.Rows.Count > 0 Then
            For i = 0 To Dt1.Rows.Count - 1
                Bg_Rcpt_No = Trim(Bg_Rcpt_No) & IIf(Trim(Bg_Rcpt_No) <> "", ", ", "") & Trim(Dt1.Rows(i).Item("Party_Bill_No").ToString)
                Bg_Rcpt = Bg_Rcpt + Val(Dt1.Rows(i).Item("bags").ToString)
            Next
        End If
        Dt1.Clear()


        '----  Delivery EmptyBags
        Bg_Ret = 0 : Bg_Ret_No = ""

        cmd.CommandText = "select a.company_idno, a.Reference_Code, a.Reference_No, a.for_OrderBy, a.Party_Bill_No, sum(a.Empty_Bags) as bags from Stock_Empty_BeamBagCone_Processing_Details a where " & Cmp_Cond & " a.DeliveryTo_Idno IN " & Trim(Led_GrpIdNos) & " and a.Reference_Date between @BeamSetDate2 and @SetDate and a.Empty_Bags <> 0 group by a.company_idno, a.Reference_Code, a.Reference_No, a.for_OrderBy, a.Party_Bill_No having sum(a.Empty_Bags) <> 0 order by a.for_OrderBy, a.Reference_No, a.Reference_Code"
        Da = New SqlClient.SqlDataAdapter(cmd)
        Dt1 = New DataTable
        Da.Fill(Dt1)

        If Dt1.Rows.Count > 0 Then
            For i = 0 To Dt1.Rows.Count - 1
                Bg_Ret_No = Trim(Bg_Ret_No) & IIf(Trim(Bg_Ret_No) <> "", ", ", "") & Trim(Dt1.Rows(i).Item("Party_Bill_No").ToString)
                Bg_Ret = Bg_Ret + Val(Dt1.Rows(i).Item("bags").ToString)
            Next
        End If
        Dt1.Clear()

        'Starting Display Empty Bag Stock

        TotDB = 0
        TotCR = 0

        With dgv_EmptyBagStockDetails

            .Rows.Clear()

            '----  Rolls On Hand
            n = .Rows.Add
            .Rows(n).Cells(0).Value = " EmptyBags on hand " & IIf(Trim(SetNo_Beam) <> "", "(B/F Set No : " & Trim(SetNo_Beam) & ")", "")
            .Rows(n).Cells(1).Value = IIf(Bg_OpStk > 0, Val(Bg_OpStk), "")
            .Rows(n).Cells(2).Value = IIf(Bg_OpStk < 0, Math.Abs(Val(Bg_OpStk)), "")
            Bg_Bal = Val(Bg_OpStk)
            .Rows(n).Cells(3).Value = Val(Bg_Bal)

            If Val(Bg_OpStk) > 0 Then
                TotDB = Val(Bg_OpStk)
            Else
                TotCR = Val(Bg_OpStk)
            End If

            prn_EmpBg_Op = Val(Bg_OpStk)
            prn_EmpBg_OpStNo = Trim(SetNo_Beam)

            '----  RollsReceived
            n = .Rows.Add
            .Rows(n).Cells(0).Value = " Bags Received ( " & Trim(Bg_Rcpt_No) & ")"
            .Rows(n).Cells(1).Value = Val(Bg_Rcpt)
            .Rows(n).Cells(2).Value = ""
            Bg_Bal = Val(Bg_Bal) + Val(Bg_Rcpt)
            .Rows(n).Cells(3).Value = Val(Bg_Bal)
            TotDB = Val(TotDB) + Val(Bg_Rcpt)

            prn_EmpBg_Rcpt = Val(Bg_Rcpt)
            prn_EmpBg_RcptNo = Trim(Bg_Rcpt_No)


            ''----  Consumed Empty bags
            'n = .Rows.Add
            '.Rows(n).Cells(0).Value = " Used bags "
            '.Rows(n).Cells(1).Value = ""
            '.Rows(n).Cells(2).Value = Val(Bm_Used)
            'Bm_Bal = Val(Bm_Bal) - Val(Bm_Used)
            '.Rows(n).Cells(3).Value = Val(Bm_Bal)
            'TotCR = Val(TotCR) + Val(Bm_Used)


            '----  Return EmptyBags
            n = .Rows.Add
            .Rows(n).Cells(0).Value = " Delivery Bags  ( " & Trim(Bg_Ret_No) & ")"
            .Rows(n).Cells(1).Value = ""
            .Rows(n).Cells(2).Value = Val(Bg_Ret)
            Bg_Bal = Val(Bg_Bal) - Val(Bg_Ret)
            .Rows(n).Cells(3).Value = Val(Bg_Bal)
            TotCR = Val(TotCR) + Val(Bg_Ret)

            prn_EmpBg_Delv = Val(Bg_Ret)
            prn_EmpBg_DcNo = Trim(Bg_Ret_No)

            dgv_EmptyBagStockDetails_Total.Rows.Clear()
            n = dgv_EmptyBagStockDetails_Total.Rows.Add()
            dgv_EmptyBagStockDetails_Total.Rows(n).Cells(0).Value = " TOTAL"
            dgv_EmptyBagStockDetails_Total.Rows(n).Cells(1).Value = Val(TotDB)
            dgv_EmptyBagStockDetails_Total.Rows(n).Cells(2).Value = Val(TotCR)
            dgv_EmptyBagStockDetails_Total.Rows(n).Cells(3).Value = Val(Bg_Bal)

        End With

        '*****************  END EMPTY BAG ********************

        '----   Opening Stock for Empty CONE
        Cn_OpStk = 0


        cmd.CommandText = "select sum(a.Empty_Cones) as Op_EmpCones from Stock_Empty_BeamBagCone_Processing_Details a where " & Cmp_Cond & " a.ReceivedFrom_Idno IN " & Trim(Led_GrpIdNos) & " and a.Reference_Date < @BeamSetDate2"
        Da = New SqlClient.SqlDataAdapter(cmd)
        Dt1 = New DataTable
        Da.Fill(Dt1)
        If Dt1.Rows.Count > 0 Then
            If IsDBNull(Dt1.Rows(0).Item("Op_EmpCones").ToString) = False Then Cn_OpStk = Val(Dt1.Rows(0).Item("Op_EmpCones").ToString)
        End If
        Dt1.Clear()

        cmd.CommandText = "select sum(a.Empty_Cones) as Op_EmpCones from Stock_Empty_BeamBagCone_Processing_Details a where " & Cmp_Cond & " a.DeliveryTo_Idno IN " & Trim(Led_GrpIdNos) & " and a.Reference_Date < @BeamSetDate2"
        Da = New SqlClient.SqlDataAdapter(cmd)
        Dt1 = New DataTable
        Da.Fill(Dt1)
        If Dt1.Rows.Count > 0 Then
            If IsDBNull(Dt1.Rows(0).Item("Op_EmpCones").ToString) = False Then Cn_OpStk = Cn_OpStk - Val(Dt1.Rows(0).Item("Op_EmpCones").ToString)
        End If
        Dt1.Clear()

        '----  Receipt EmptyBags
        Cn_Rcpt = 0 : Cn_Rcpt_No = ""

        cmd.CommandText = "select a.company_idno, a.Reference_Code, a.Reference_No, a.for_OrderBy, a.Party_Bill_No, sum(a.Empty_Cones) as cones from Stock_Empty_BeamBagCone_Processing_Details a where " & Cmp_Cond & " a.ReceivedFrom_Idno IN " & Trim(Led_GrpIdNos) & " and a.Reference_Date between @BeamSetDate2 and @SetDate and a.Empty_Cones <> 0 group by a.company_idno, a.Reference_Code, a.Reference_No, a.for_OrderBy, a.Party_Bill_No having sum(a.Empty_Cones) <> 0 order by a.for_OrderBy, a.Reference_No, a.Reference_Code"
        Da = New SqlClient.SqlDataAdapter(cmd)
        Dt1 = New DataTable
        Da.Fill(Dt1)

        If Dt1.Rows.Count > 0 Then
            For i = 0 To Dt1.Rows.Count - 1
                Cn_Rcpt_No = Trim(Cn_Rcpt_No) & IIf(Trim(Cn_Rcpt_No) <> "", ", ", "") & Trim(Dt1.Rows(i).Item("Party_Bill_No").ToString)
                Cn_Rcpt = Cn_Rcpt + Val(Dt1.Rows(i).Item("cones").ToString)
            Next
        End If
        Dt1.Clear()

        '----  Delivery EmptyCones
        Cn_Ret = 0 : Cn_Ret_No = ""

        cmd.CommandText = "select a.company_idno, a.Reference_Code, a.Reference_No, a.for_OrderBy, a.Party_Bill_No, sum(a.Empty_Cones) as cones from Stock_Empty_BeamBagCone_Processing_Details a where " & Cmp_Cond & " a.DeliveryTo_Idno IN " & Trim(Led_GrpIdNos) & " and a.Reference_Date between @BeamSetDate2 and @SetDate and a.Empty_Cones <> 0 group by a.company_idno, a.Reference_Code, a.Reference_No, a.for_OrderBy, a.Party_Bill_No having sum(a.Empty_Cones) <> 0 order by a.for_OrderBy, a.Reference_No, a.Reference_Code"
        Da = New SqlClient.SqlDataAdapter(cmd)
        Dt1 = New DataTable
        Da.Fill(Dt1)

        If Dt1.Rows.Count > 0 Then
            For i = 0 To Dt1.Rows.Count - 1
                Cn_Ret_No = Trim(Cn_Ret_No) & IIf(Trim(Cn_Ret_No) <> "", ", ", "") & Trim(Dt1.Rows(i).Item("Party_Bill_No").ToString)
                Cn_Ret = Cn_Ret + Val(Dt1.Rows(i).Item("cones").ToString)
            Next
        End If
        Dt1.Clear()

        'Starting Display Empty Cone Stock

        TotDB = 0
        TotCR = 0

        With dgv_EmptyConeStockDetails

            .Rows.Clear()

            '----  Cones On Hand
            n = .Rows.Add
            .Rows(n).Cells(0).Value = " EmptyCones on hand " & IIf(Trim(SetNo_Beam) <> "", "(B/F Set No : " & Trim(SetNo_Beam) & ")", "")
            .Rows(n).Cells(1).Value = IIf(Cn_OpStk > 0, Val(Cn_OpStk), "")
            .Rows(n).Cells(2).Value = IIf(Cn_OpStk < 0, Math.Abs(Val(Cn_OpStk)), "")
            Cn_Bal = Val(Cn_OpStk)
            .Rows(n).Cells(3).Value = Val(Cn_Bal)

            If Val(Cn_OpStk) > 0 Then
                TotDB = Val(Cn_OpStk)
            Else
                TotCR = Val(Cn_OpStk)
            End If

            '----  Cones Received
            n = .Rows.Add
            .Rows(n).Cells(0).Value = " Cones Received ( " & Trim(Cn_Rcpt_No) & ")"
            .Rows(n).Cells(1).Value = Val(Cn_Rcpt)
            .Rows(n).Cells(2).Value = ""
            Cn_Bal = Val(Cn_Bal) + Val(Cn_Rcpt)
            .Rows(n).Cells(3).Value = Val(Cn_Bal)
            TotDB = Val(TotDB) + Val(Cn_Rcpt)


            ''----  Consumed Empty cones
            'n = .Rows.Add
            '.Rows(n).Cells(0).Value = " Used bags "
            '.Rows(n).Cells(1).Value = ""
            '.Rows(n).Cells(2).Value = Val(Bm_Used)
            'Bm_Bal = Val(Bm_Bal) - Val(Bm_Used)
            '.Rows(n).Cells(3).Value = Val(Bm_Bal)
            'TotCR = Val(TotCR) + Val(Bm_Used)


            '----  Return EmptyCones
            n = .Rows.Add
            .Rows(n).Cells(0).Value = " Delivery Cones ( " & Trim(Cn_Ret_No) & ")"
            .Rows(n).Cells(1).Value = ""
            .Rows(n).Cells(2).Value = Val(Cn_Ret)
            Cn_Bal = Val(Cn_Bal) - Val(Cn_Ret)
            .Rows(n).Cells(3).Value = Val(Cn_Bal)
            TotCR = Val(TotCR) + Val(Cn_Ret)


            dgv_EmptyConeStockDetails_Total.Rows.Clear()
            n = dgv_EmptyConeStockDetails_Total.Rows.Add()
            dgv_EmptyConeStockDetails_Total.Rows(n).Cells(0).Value = " TOTAL"
            dgv_EmptyConeStockDetails_Total.Rows(n).Cells(1).Value = Val(TotDB)
            dgv_EmptyConeStockDetails_Total.Rows(n).Cells(2).Value = Val(TotCR)
            dgv_EmptyConeStockDetails_Total.Rows(n).Cells(3).Value = Val(Cn_Bal)

        End With

        '*****************  END EMPTY CONE ********************

        '----   Opening Balance for Amount


        prn_Amt_Op = 0 : prn_Amt_Rcpt = 0 : prn_Amt_CurSet = 0
        prn_Amt_OpStNo = "" : prn_Amt_RcptNo = ""

        Amt_OpBal = 0
        Amt_Rcpt = 0 : Amt_RcptNo = ""

        cmd.Parameters.AddWithValue("@AmountSetDate", SetDt2_Beam.Date)

        SetDt1_PrevDt = DateAdd("d", -1, SetDt1_Beam)
        cmd.Parameters.AddWithValue("@AmountSetDate1_PrevDate", SetDt1_PrevDt.Date)

        AcCmp_Cond = ""
        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1012" Then '---- Avinashi Sizing (Avinashi)
            AcCmp_Cond = " a.Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and "

        Else
            If Val(Common_Procedures.settings.StatementPrint_InStock_Combine_AllCompany) = 0 Then
                AcCmp_Cond = " a.Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and "
            End If

        End If

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1078" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1087" Then '---- Kalaimagal Sizing (Palladam)

            cmd.CommandText = "select abs(sum(a.voucher_amount)) as Op_Balance from voucher_details a where " & AcCmp_Cond & " a.ledger_idno IN " & Trim(Led_GrpIdNos) & " and a.voucher_date < @BeamSetDate2 and a.voucher_amount < 0 and  ( (a.entry_identification NOT LIKE 'SZINV-%' and a.entry_identification NOT LIKE 'GSINV-%') or a.entry_identification is Null ) "
            'cmd.CommandText = "select sum(a.voucher_amount) as Op_Balance from voucher_details a, voucher_head b where " & AcCmp_Cond & " a.ledger_idno IN " & Trim(Led_GrpIdNos) & " and a.voucher_date between @AmountSetDate1_PrevDate and @setdate and ( (b.entry_identification NOT LIKE 'SZINV-%' and b.entry_identification NOT LIKE 'GSINV-%') or b.entry_identification is Null ) and a.voucher_code = b.voucher_code and a.company_idno = b.company_idno"
            Da = New SqlClient.SqlDataAdapter(cmd)
            Dt1 = New DataTable
            Da.Fill(Dt1)
            If Dt1.Rows.Count > 0 Then
                If IsDBNull(Dt1.Rows(0).Item("Op_Balance").ToString) = False Then Amt_OpBal = Amt_OpBal + Val(Dt1.Rows(0).Item("Op_Balance").ToString)
            End If
            Dt1.Clear()

            If DateDiff("d", SetDt1_Beam, Curr_SetDt) = 0 Then
                cmd.CommandText = "select sum(b.net_amount) as Inv_OpBalance from Specification_Head a, invoice_head b where " & AcCmp_Cond & " a.ledger_idno IN " & Trim(Led_GrpIdNos) & " and (a.Set_Date < @BeamSetDate1 or ( a.Set_Date = @BeamSetDate1 and a.for_orderby < " & Str(Format(Val(OrdBy_StNo), "########0.00")) & ") or ( a.Set_Date = @BeamSetDate1 and a.for_orderby = " & Str(Format(Val(OrdBy_StNo), "########0.00")) & " and a.Auto_setNo < " & Str(Val(Auinc_StNo)) & ") )  and a.Set_Code = b.Set_Code and a.invoice_code = b.invoice_code"
            Else
                cmd.CommandText = "select sum(b.net_amount) as Inv_OpBalance from Specification_Head a, invoice_head b where " & AcCmp_Cond & " a.ledger_idno IN " & Trim(Led_GrpIdNos) & " and a.Set_Date < @BeamSetDate2  and a.Set_Code = b.Set_Code and a.invoice_code = b.invoice_code"
            End If
            'cmd.CommandText = "select sum(b.net_amount) as Inv_OpBalance from Specification_Head a, invoice_head b Where " & AcCmp_Cond & " a.ledger_idno IN " & Trim(Led_GrpIdNos) & " and ( (a.Set_Date >= @AmountSetDate1_PrevDate and a.Set_Date < @SetDate) or ( a.Set_Date = @SetDate and a.for_orderby < " & Str(Format(Val(OrdBy_StNo), "########0.00")) & ") ) and a.Set_Code = b.Set_Code and a.invoice_code = b.invoice_code"
            Da = New SqlClient.SqlDataAdapter(cmd)
            Dt1 = New DataTable
            Da.Fill(Dt1)
            If Dt1.Rows.Count > 0 Then
                If IsDBNull(Dt1.Rows(0).Item("Inv_OpBalance").ToString) = False Then Amt_OpBal = Amt_OpBal + Val(Dt1.Rows(0).Item("Inv_OpBalance").ToString)
            End If
            Dt1.Clear()

            cmd.CommandText = "select sum(a.voucher_amount) as Op_Balance from voucher_details a where " & AcCmp_Cond & " a.ledger_idno IN " & Trim(Led_GrpIdNos) & " and a.voucher_date < @BeamSetDate2 and a.voucher_amount > 0"
            Da = New SqlClient.SqlDataAdapter(cmd)
            Dt1 = New DataTable
            Da.Fill(Dt1)
            If Dt1.Rows.Count > 0 Then
                If IsDBNull(Dt1.Rows(0).Item("Op_Balance").ToString) = False Then Amt_OpBal = Amt_OpBal - Val(Dt1.Rows(0).Item("Op_Balance").ToString)
            End If
            Dt1.Clear()

            '----  Amount Receipt
            cmd.CommandText = "select b.entry_identification, a.voucher_no, a.voucher_amount from voucher_details a, voucher_head b where " & AcCmp_Cond & " a.ledger_idno IN " & Trim(Led_GrpIdNos) & " and a.voucher_date between @BeamSetDate2 and @SetDate and ( (b.entry_identification NOT LIKE 'SZINV-%' and b.entry_identification NOT LIKE 'GSINV-%') or b.entry_identification is Null ) and a.voucher_code = b.voucher_code and a.company_idno = b.company_idno order by a.voucher_date, a.For_OrderBy, a.Voucher_No, a.For_OrderByCode"
            Da = New SqlClient.SqlDataAdapter(cmd)
            Dt1 = New DataTable
            Da.Fill(Dt1)
            If Dt1.Rows.Count > 0 Then
                For i = 0 To Dt1.Rows.Count - 1
                    Amt_RcptNo = Trim(Amt_RcptNo) & IIf(Trim(Amt_RcptNo) <> "", ", ", "") & Trim(Dt1.Rows(i).Item("voucher_no").ToString)
                    Amt_Rcpt = Amt_Rcpt + Val(Dt1.Rows(i).Item("voucher_amount").ToString)
                Next
            End If
            Dt1.Clear()


            'cmd.CommandText = "select a.company_idno, a.Reference_Code, a.Reference_No, a.for_OrderBy, a.Party_Bill_No, sum(a.Empty_Beam) as Beam from Stock_Empty_BeamBagCone_Processing_Details a where " & Cmp_Cond & " (a.Reference_Code like 'EBREC-%' or a.Reference_Code like 'YNREC-%') and a.ReceivedFrom_Idno IN " & Trim(Led_GrpIdNos) & " and a.Reference_Date between @BeamSetDate2 and @SetDate and a.Empty_Beam <> 0 group by a.company_idno, a.Reference_Code, a.Reference_No, a.for_OrderBy, a.Party_Bill_No having sum(a.Empty_Beam) <> 0 order by a.for_OrderBy, a.Reference_No, a.Reference_Code"
            'Da = New SqlClient.SqlDataAdapter(cmd)
            'Dt1 = New DataTable
            'Da.Fill(Dt1)

            'If Dt1.Rows.Count > 0 Then
            '    For i = 0 To Dt1.Rows.Count - 1
            '        Bm_Rcpt_No = Trim(Bm_Rcpt_No) & IIf(Trim(Bm_Rcpt_No) <> "", ", ", "") & Trim(Dt1.Rows(i).Item("Party_Bill_No").ToString)
            '        Bm_Rcpt = Bm_Rcpt + Val(Dt1.Rows(i).Item("Beam").ToString)
            '    Next
            'End If
            'Dt1.Clear()

        Else

            If DateDiff("d", SetDt1_Beam, Curr_SetDt) = 0 And OrdBy_StNo > SetOrdBy_Beam Then

                cmd.CommandText = "select sum(a.voucher_amount) as Op_Balance from voucher_details a where " & AcCmp_Cond & " a.ledger_idno IN " & Trim(Led_GrpIdNos) & " and a.voucher_date < @AmountSetDate1_PrevDate"
                Da = New SqlClient.SqlDataAdapter(cmd)
                Dt1 = New DataTable
                Da.Fill(Dt1)
                If Dt1.Rows.Count > 0 Then
                    If IsDBNull(Dt1.Rows(0).Item("Op_Balance").ToString) = False Then Amt_OpBal = -1 * Val(Dt1.Rows(0).Item("Op_Balance").ToString)
                End If
                Dt1.Clear()

                cmd.CommandText = "select sum(a.voucher_amount) as Op_Balance from voucher_details a, voucher_head b where " & AcCmp_Cond & " a.ledger_idno IN " & Trim(Led_GrpIdNos) & " and a.voucher_date between @AmountSetDate1_PrevDate and @setdate and ( (b.entry_identification NOT LIKE 'SZINV-%' and b.entry_identification NOT LIKE 'GSINV-%') or b.entry_identification is Null ) and a.voucher_code = b.voucher_code and a.company_idno = b.company_idno"
                Da = New SqlClient.SqlDataAdapter(cmd)
                Dt1 = New DataTable
                Da.Fill(Dt1)
                If Dt1.Rows.Count > 0 Then
                    If IsDBNull(Dt1.Rows(0).Item("Op_Balance").ToString) = False Then Amt_OpBal = Amt_OpBal - Val(Dt1.Rows(0).Item("Op_Balance").ToString)
                End If
                Dt1.Clear()

                cmd.CommandText = "select sum(b.net_amount) as Inv_OpBalance from Specification_Head a, invoice_head b Where " & AcCmp_Cond & " a.ledger_idno IN " & Trim(Led_GrpIdNos) & " and ( (a.Set_Date >= @AmountSetDate1_PrevDate and a.Set_Date < @SetDate) or ( a.Set_Date = @SetDate and a.for_orderby < " & Str(Format(Val(OrdBy_StNo), "########0.00")) & ") ) and a.Set_Code = b.Set_Code and a.invoice_code = b.invoice_code"
                Da = New SqlClient.SqlDataAdapter(cmd)
                Dt1 = New DataTable
                Da.Fill(Dt1)
                If Dt1.Rows.Count > 0 Then
                    If IsDBNull(Dt1.Rows(0).Item("Inv_OpBalance").ToString) = False Then Amt_OpBal = Amt_OpBal + Val(Dt1.Rows(0).Item("Inv_OpBalance").ToString)
                End If
                Dt1.Clear()

                'cmd.CommandText = "select sum(a.voucher_amount) as Op_Balance from voucher_details a where " & AcCmp_Cond & " a.ledger_idno IN " & Trim(Led_GrpIdNos) & " and a.voucher_date < @CompFromDate"
                'Da = New SqlClient.SqlDataAdapter(cmd)
                'Dt1 = New DataTable
                'Da.Fill(Dt1)
                'If Dt1.Rows.Count > 0 Then
                '    If IsDBNull(Dt1.Rows(0).Item("Op_Balance").ToString) = False Then Amt_OpBal = -1 * Val(Dt1.Rows(0).Item("Op_Balance").ToString)
                'End If
                'Dt1.Clear()

                'cmd.CommandText = "select sum(a.voucher_amount) as Op_Balance from voucher_details a, voucher_head b where " & AcCmp_Cond & " a.ledger_idno IN " & Trim(Led_GrpIdNos) & " and a.voucher_date between @CompFromDate and @setdate and ( (b.entry_identification NOT LIKE 'SZINV-%' and b.entry_identification NOT LIKE 'GSINV-%') or b.entry_identification is Null ) and a.voucher_code = b.voucher_code and a.company_idno = b.company_idno"
                'Da = New SqlClient.SqlDataAdapter(cmd)
                'Dt1 = New DataTable
                'Da.Fill(Dt1)
                'If Dt1.Rows.Count > 0 Then
                '    If IsDBNull(Dt1.Rows(0).Item("Op_Balance").ToString) = False Then Amt_OpBal = Amt_OpBal - Val(Dt1.Rows(0).Item("Op_Balance").ToString)
                'End If
                'Dt1.Clear()

                'cmd.CommandText = "select sum(b.net_amount) as Inv_OpBalance from Specification_Head a, invoice_head b Where " & AcCmp_Cond & " a.ledger_idno IN " & Trim(Led_GrpIdNos) & " and ( (a.Set_Date >= @CompFromDate and a.Set_Date < @SetDate) or ( a.Set_Date = @SetDate and a.for_orderby < " & Str(Format(Val(OrdBy_StNo), "########0.00")) & ") ) and a.Set_Code = b.Set_Code and a.invoice_code = b.invoice_code"
                'Da = New SqlClient.SqlDataAdapter(cmd)
                'Dt1 = New DataTable
                'Da.Fill(Dt1)
                'If Dt1.Rows.Count > 0 Then
                '    If IsDBNull(Dt1.Rows(0).Item("Inv_OpBalance").ToString) = False Then Amt_OpBal = Amt_OpBal + Val(Dt1.Rows(0).Item("Inv_OpBalance").ToString)
                'End If
                'Dt1.Clear()

            Else

                cmd.CommandText = "select sum(a.voucher_amount) as Op_Balance from voucher_details a where " & AcCmp_Cond & " a.ledger_idno IN " & Trim(Led_GrpIdNos) & " and a.voucher_date < @AmountSetDate"
                Da = New SqlClient.SqlDataAdapter(cmd)
                Dt1 = New DataTable
                Da.Fill(Dt1)
                If Dt1.Rows.Count > 0 Then
                    If IsDBNull(Dt1.Rows(0).Item("Op_Balance").ToString) = False Then Amt_OpBal = -1 * Val(Dt1.Rows(0).Item("Op_Balance").ToString)
                End If
                Dt1.Clear()

                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1042" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1310" Then '---- RajaMurugan Sizing (Karumanthapatti)      or       M.R.M Sizing (Avinashi) - MRM 

                    cmd.CommandText = "select b.entry_identification, a.voucher_no, a.voucher_amount from voucher_details a, voucher_head b where " & AcCmp_Cond & " a.ledger_idno IN " & Trim(Led_GrpIdNos) & " and a.voucher_date between @AmountSetDate and @SetDate and (b.entry_identification NOT LIKE 'CSDIS-%' and ( (b.entry_identification NOT LIKE 'SZINV-%' and b.entry_identification NOT LIKE 'GSINV-%') or b.entry_identification is Null) ) and a.voucher_code = b.voucher_code and a.company_idno = b.company_idno order by a.voucher_date, a.For_OrderBy, a.Voucher_No, a.For_OrderByCode"
                    Da = New SqlClient.SqlDataAdapter(cmd)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)

                    If Dt1.Rows.Count > 0 Then
                        For i = 0 To Dt1.Rows.Count - 1
                            Amt_RcptNo = Trim(Amt_RcptNo) & IIf(Trim(Amt_RcptNo) <> "", ", ", "") & Trim(Dt1.Rows(i).Item("voucher_no").ToString)
                            Amt_Rcpt = Amt_Rcpt + Val(Dt1.Rows(i).Item("voucher_amount").ToString)
                        Next
                    End If
                    Dt1.Clear()

                    '---Discount
                    cmd.CommandText = "select b.entry_identification, a.voucher_no, a.voucher_amount from voucher_details a, voucher_head b where " & AcCmp_Cond & " a.ledger_idno IN " & Trim(Led_GrpIdNos) & " and a.voucher_date between @AmountSetDate and @SetDate and b.entry_identification  LIKE 'CSDIS-%'  and a.voucher_code = b.voucher_code and a.company_idno = b.company_idno order by a.voucher_date, a.For_OrderBy, a.Voucher_No, a.For_OrderByCode"
                    Da = New SqlClient.SqlDataAdapter(cmd)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)

                    If Dt1.Rows.Count > 0 Then
                        For i = 0 To Dt1.Rows.Count - 1
                            Discount_Amt = Discount_Amt + Val(Dt1.Rows(i).Item("voucher_amount").ToString)
                        Next
                    End If
                    Dt1.Clear()

                Else

                    cmd.CommandText = "select b.entry_identification, a.voucher_no, a.voucher_amount from voucher_details a, voucher_head b where " & AcCmp_Cond & " a.ledger_idno IN " & Trim(Led_GrpIdNos) & " and a.voucher_date between @AmountSetDate and @SetDate and ( (b.entry_identification NOT LIKE 'SZINV-%' and b.entry_identification NOT LIKE 'GSINV-%') or b.entry_identification is Null ) and a.voucher_code = b.voucher_code and a.company_idno = b.company_idno order by a.voucher_date, a.For_OrderBy, a.Voucher_No, a.For_OrderByCode"
                    Da = New SqlClient.SqlDataAdapter(cmd)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)

                    If Dt1.Rows.Count > 0 Then
                        For i = 0 To Dt1.Rows.Count - 1
                            Amt_RcptNo = Trim(Amt_RcptNo) & IIf(Trim(Amt_RcptNo) <> "", ", ", "") & Trim(Dt1.Rows(i).Item("voucher_no").ToString)
                            Amt_Rcpt = Amt_Rcpt + Val(Dt1.Rows(i).Item("voucher_amount").ToString)
                        Next
                    End If
                    Dt1.Clear()
                End If

            End If



        End If

        Cur_SetAmt = 0
        prn_Invoice_no = ""
        cmd.CommandText = "select * from invoice_head Where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(New_Code) & "'"
        Da = New SqlClient.SqlDataAdapter(cmd)
        Dt1 = New DataTable
        Da.Fill(Dt1)
        If Dt1.Rows.Count > 0 Then

            Cur_SetAmt = Val(Dt1.Rows(0).Item("Net_Amount").ToString)
            prn_Invoice_no = Trim(Dt1.Rows(0).Item("Invoice_No").ToString)

        End If
        Dt1.Clear()
        Da.Dispose()


        'Starting Display Amount Details

        TotDB = 0
        TotCR = 0

        With dgv_AmountDetails

            .Rows.Clear()

            '----  Cash On Hand
            n = .Rows.Add
            .Rows(n).Cells(0).Value = " Opening Balance " & IIf(Trim(SetNo_Beam) <> "", "(B/F Set No : " & Trim(SetNo_Beam) & ")", "")
            .Rows(n).Cells(1).Value = IIf(Amt_OpBal > 0, Common_Procedures.Currency_Format(Val(Amt_OpBal)), "")
            .Rows(n).Cells(2).Value = IIf(Amt_OpBal < 0, Common_Procedures.Currency_Format(Math.Abs(Val(Amt_OpBal))), "")
            Bal_Amt = Val(Amt_OpBal)
            .Rows(n).Cells(3).Value = Common_Procedures.Currency_Format(Val(Bal_Amt))

            If Val(Amt_OpBal) > 0 Then
                TotDB = Val(Amt_OpBal)
            Else
                TotCR = Val(Amt_OpBal)
            End If

            prn_Amt_Op = Val(Amt_OpBal)
            prn_Amt_OpStNo = Trim(SetNo_Beam)


            '----  Amount Received
            n = .Rows.Add
            .Rows(n).Cells(0).Value = " Received Amount ( " & Trim(Amt_RcptNo) & ")"
            .Rows(n).Cells(1).Value = ""
            .Rows(n).Cells(2).Value = Common_Procedures.Currency_Format(Val(Amt_Rcpt))
            Bal_Amt = Val(Bal_Amt) - Val(Amt_Rcpt)
            .Rows(n).Cells(3).Value = Common_Procedures.Currency_Format(Val(Bal_Amt))
            TotCR = Val(TotCR) + Math.Abs(Val(Amt_Rcpt))

            prn_Amt_Rcpt = Val(Amt_Rcpt)
            prn_Amt_RcptNo = Trim(Amt_RcptNo)


            '----  this set amount
            n = .Rows.Add
            .Rows(n).Cells(0).Value = " Current Set Amount"
            .Rows(n).Cells(1).Value = Common_Procedures.Currency_Format(Val(Cur_SetAmt))
            .Rows(n).Cells(2).Value = ""
            Bal_Amt = Val(Bal_Amt) + Val(Cur_SetAmt)
            .Rows(n).Cells(3).Value = Common_Procedures.Currency_Format(Val(Bal_Amt))
            TotDB = Val(TotDB) + Val(Cur_SetAmt)


            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1042" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1310" Then '---- RajaMurugan Sizing (Karumanthapatti)
                prn_Amt_CurSet = Val(Cur_SetAmt)
                prn_Disc_Amt_CurSet = Val(Discount_Amt)
            Else
                prn_Amt_CurSet = Val(Cur_SetAmt)
            End If


            dgv_AmountDetails_Total.Rows.Clear()
            n = dgv_AmountDetails_Total.Rows.Add()
            dgv_AmountDetails_Total.Rows(n).Cells(0).Value = " TOTAL"
            dgv_AmountDetails_Total.Rows(n).Cells(1).Value = Common_Procedures.Currency_Format(Val(TotDB))
            dgv_AmountDetails_Total.Rows(n).Cells(2).Value = Common_Procedures.Currency_Format(Val(TotCR))
            dgv_AmountDetails_Total.Rows(n).Cells(3).Value = Common_Procedures.Currency_Format(Val(Bal_Amt))



        End With

        '*****************  END AMOUNT DETAILS ********************

        If Val(Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn) = 2 Then
            YrnStk_Condt = "(Posting_For <> 'YARNTAKEN')"

        Else
            YrnStk_Condt = "(Posting_For <> 'CONSUMEDYARN')"

        End If


        '---  Getting Previous SetNo & SetDate For Yarn ( Count Wise )
        SetDt1_Yarn = Common_Procedures.Company_FromDate
        SetDt2_Yarn = Common_Procedures.Company_FromDate
        OrdBy_StNo = Format(Val(Common_Procedures.OrderBy_CodeToValue(lbl_SetNo.Text)), "########0.00")

        cmd.CommandText = "select a.* from Specification_Head a where " & Cmp_Cond & " a.ledger_idno IN " & Trim(Led_GrpIdNos) & " and " & Trim(Cnt_Cond) & " and (a.Set_Date < @SetDate or (a.Set_Date = @SetDate and a.for_orderby < " & Str(Format(Val(OrdBy_StNo), "########0.00")) & ") or (a.Set_Date = @SetDate and a.for_orderby = " & Str(Format(Val(OrdBy_StNo), "########0.00")) & " and a.Auto_SetNo < " & Str(Auinc_StNo) & ") ) order by a.set_date desc, a.for_orderby desc, a.Auto_SetNo desc"
        Da = New SqlClient.SqlDataAdapter(cmd)
        Dt1 = New DataTable
        Da.Fill(Dt1)

        If Dt1.Rows.Count > 0 Then
            SetNo_Yarn = Dt1.Rows(0).Item("set_no").ToString
            SetDt1_Yarn = Dt1.Rows(0).Item("set_date")
            SetDt2_Yarn = DateAdd("d", 1, SetDt1_Yarn)

            If Microsoft.VisualBasic.Right(Dt1.Rows(0).Item("set_code").ToString, 5) <> Common_Procedures.FnYearCode Then OrdBy_StNo = OrdBy_StNo + Val(Dt1.Rows(0).Item("For_OrderBy").ToString())
        End If
        Dt1.Clear()

        cmd.Parameters.AddWithValue("@YarnSetDate1", SetDt1_Yarn.Date)
        cmd.Parameters.AddWithValue("@YarnSetDate2", SetDt2_Yarn.Date)

        cmd.CommandText = "truncate table " & Trim(Common_Procedures.ReportTempTable) & ""
        cmd.ExecuteNonQuery()

        cmd.CommandText = "insert into " & Trim(Common_Procedures.ReportTempTable) & "(weight1) select a.weight from Stock_Yarn_Processing_Details a where " & Cmp_Cond & " a.Reference_Code NOT LIKE '" & Trim(PkCondition_TIN) & "%' and a.Reference_Code NOT LIKE '" & Trim(PkCondition_GST) & "%' and a.Reference_Code NOT LIKE '" & Trim(PkCondition_MACHINE3) & "%' and a.Reference_Code NOT LIKE '" & Trim(PkCondition_MACHINE4) & "%' and a.ReceivedFrom_Idno in " & Trim(Led_GrpIdNos) & " and " & Trim(Cnt_Cond) & " and  " & YrnStk_Condt & " and a.Reference_Date < @YarnSetDate2"
        cmd.ExecuteNonQuery()

        If DateDiff("d", SetDt1_Yarn.Date, Curr_SetDt.Date) = 0 Then
            cmd.CommandText = "insert into " & Trim(Common_Procedures.ReportTempTable) & "(weight1) select a.weight from Stock_Yarn_Processing_Details a, Specification_Head b where " & Cmp_Cond & "  ( a.Reference_Code LIKE '" & Trim(PkCondition_TIN) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_GST) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_MACHINE3) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_MACHINE4) & "%' ) and a.ReceivedFrom_Idno IN " & Trim(Led_GrpIdNos) & " and " & Trim(Cnt_Cond) & " and  " & YrnStk_Condt & " and (a.Reference_Date < @YarnSetDate1 or ( Reference_Date = @YarnSetDate1 and a.for_orderby < " & Str(Format(Val(OrdBy_StNo), "########0.00")) & ")  or ( Reference_Date = @YarnSetDate1 and a.for_orderby = " & Str(Format(Val(OrdBy_StNo), "########0.00")) & " and b.Auto_setNo < " & Str(Val(Auinc_StNo)) & ") ) and a.Reference_Code = ( CASE WHEN b.Set_Code LIKE '" & Trim(PkCondition_GST) & "%' THEN '" & Trim(PkCondition_GST) & "' WHEN b.Set_Code LIKE '" & Trim(PkCondition_MACHINE3) & "%' THEN '" & Trim(PkCondition_MACHINE3) & "' WHEN b.Set_Code LIKE '" & Trim(PkCondition_MACHINE4) & "%' THEN '" & Trim(PkCondition_MACHINE4) & "' ELSE '" & Trim(PkCondition_TIN) & "' END) + b.Set_Code and a.company_idno = b.company_idno"
        Else
            cmd.CommandText = "insert into " & Trim(Common_Procedures.ReportTempTable) & "(weight1) select a.weight from Stock_Yarn_Processing_Details a where " & Cmp_Cond & " ( a.Reference_Code LIKE '" & Trim(PkCondition_TIN) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_GST) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_MACHINE3) & "%'  or a.Reference_Code LIKE '" & Trim(PkCondition_MACHINE4) & "%' ) and a.ReceivedFrom_Idno IN " & Trim(Led_GrpIdNos) & " and " & Trim(Cnt_Cond) & " and  " & YrnStk_Condt & " and a.Reference_Date < @YarnSetDate2"
        End If
        cmd.ExecuteNonQuery()



        cmd.CommandText = "insert into " & Trim(Common_Procedures.ReportTempTable) & "(weight1) select -1*a.weight from Stock_Yarn_Processing_Details a where " & Cmp_Cond & " a.Reference_Code NOT LIKE '" & Trim(PkCondition_TIN) & "%' and a.Reference_Code NOT LIKE '" & Trim(PkCondition_GST) & "%' and  a.Reference_Code NOT LIKE '" & Trim(PkCondition_MACHINE3) & "%' and  a.Reference_Code NOT LIKE '" & Trim(PkCondition_MACHINE4) & "%' and a.DeliveryTo_Idno IN " & Trim(Led_GrpIdNos) & " and " & Trim(Cnt_Cond) & " and  " & YrnStk_Condt & " and a.Reference_Date < @YarnSetDate2"
        cmd.ExecuteNonQuery()

        If DateDiff("d", SetDt1_Yarn.Date, Curr_SetDt.Date) = 0 Then
            cmd.CommandText = "insert into " & Trim(Common_Procedures.ReportTempTable) & "(weight1) select -1*a.weight from Stock_Yarn_Processing_Details a, Specification_Head b where " & Cmp_Cond & " (a.Reference_Code LIKE '" & Trim(PkCondition_TIN) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_GST) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_MACHINE3) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_MACHINE4) & "%') and a.DeliveryTo_Idno IN " & Trim(Led_GrpIdNos) & " and " & Trim(Cnt_Cond) & " and  " & YrnStk_Condt & " and (a.Reference_Date < @YarnSetDate1 or (a.Reference_Date = @YarnSetDate1 and a.for_orderby < " & Str(Format(Val(OrdBy_StNo), "########0.00")) & ")  or ( b.Set_Date = @YarnSetDate1 and a.for_orderby = " & Str(Format(Val(OrdBy_StNo), "########0.00")) & " and b.Auto_setNo < " & Str(Val(Auinc_StNo)) & ") )  and a.Reference_Code = (CASE WHEN b.Set_Code LIKE '" & Trim(PkCondition_GST) & "%' THEN '" & Trim(PkCondition_GST) & "' WHEN b.Set_Code LIKE '" & Trim(PkCondition_MACHINE3) & "%' THEN '" & Trim(PkCondition_MACHINE3) & "' WHEN b.Set_Code LIKE '" & Trim(PkCondition_MACHINE4) & "%' THEN '" & Trim(PkCondition_MACHINE4) & "' ELSE '" & Trim(PkCondition_TIN) & "' END) + b.Set_Code  and a.company_idno = b.company_idno"
        Else
            cmd.CommandText = "insert into " & Trim(Common_Procedures.ReportTempTable) & "(weight1) select -1*a.weight from Stock_Yarn_Processing_Details a where " & Cmp_Cond & " (a.Reference_Code LIKE '" & Trim(PkCondition_TIN) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_GST) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_MACHINE3) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_MACHINE4) & "%') and a.DeliveryTo_Idno IN " & Trim(Led_GrpIdNos) & " and " & Trim(Cnt_Cond) & " and  " & YrnStk_Condt & " and a.Reference_Date < @YarnSetDate2"
        End If
        cmd.ExecuteNonQuery()

        TotDB = 0
        TotCR = 0
        Tot_Yarn = 0

        Da = New SqlClient.SqlDataAdapter("select sum(weight1) as OpYarn from " & Trim(Common_Procedures.ReportTempTable) & "", Con)
        Dt1 = New DataTable
        Da.Fill(Dt1)

        If Dt1.Rows.Count > 0 Then
            If IsDBNull(Dt1.Rows(0).Item("OpYarn").ToString) = False Then Tot_Yarn = Format(Val(Dt1.Rows(0).Item("OpYarn").ToString), "###########0.000")
        End If
        Dt1.Clear()


        '----- Start Display Yarn Details

        prn_Yrn_OpWt = 0 : prn_Yrn_RcptWt = 0 : prn_Yrn_DelvWt = 0
        prn_Yrn_ConsWt = 0 : prn_Yrn_ExShWt = 0
        prn_Yrn_TknWt = 0 : prn_Yrn_BayCnWt = 0
        prn_Yrn_RwExShWt = 0 : prn_Yrn_RwExShStNo = ""
        prn_Yrn_TranfrWt = 0 : prn_Yrn_TranfrNo = ""
        prn_Yrn_ExcSht_Wt = 0 : prn_Yrn_ExcSht_No = ""
        prn_Yrn_OpStNo = "" : prn_Yrn_RcptNo = "" : prn_Yrn_DcNo = ""
        prn_Yrn_MillRcptWt = 0 : prn_Yrn_RWRcptWt = 0

        With dgv_YarnStockDetails

            .Rows.Clear()

            '----- Yarn on hand

            n = .Rows.Add()
            .Rows(n).Cells(0).Value = " Yarn on hand " & IIf(SetNo_Yarn <> "", " ( B/F SetNo : " & Trim(SetNo_Yarn) & " )", "")
            .Rows(n).Cells(1).Value = IIf(Val(Tot_Yarn) > 0, Format(Val(Tot_Yarn), "#########0.000"), "")
            .Rows(n).Cells(2).Value = IIf(Val(Tot_Yarn) < 0, Format(Math.Abs(Val(Tot_Yarn)), "#########0.000"), "")
            .Rows(n).Cells(3).Value = Format(Val(Tot_Yarn), "#########0.000")

            If Val(Tot_Yarn) > 0 Then
                TotDB = Val(Tot_Yarn)
            Else
                TotCR = Val(Tot_Yarn)
            End If

            prn_Yrn_OpStNo = Trim(SetNo_Yarn)
            prn_Yrn_OpWt = Val(Tot_Yarn)


            '----- Yarn Receipt
            Rcpt_Yarn = 0 : Yarn_Rcpt_No = "" : Rcpt_MillYarn = 0 : Rcpt_RWYarn = 0

            cmd.CommandText = "select a.company_idno, a.Reference_Code, a.Reference_No, a.for_orderby, a.Party_Bill_No, sum(a.weight) as Yarn_Weight , a.yarn_type from Stock_Yarn_Processing_Details a where " & Cmp_Cond & " a.Reference_Code LIKE 'YNREC-%' and a.ReceivedFrom_Idno IN " & Trim(Led_GrpIdNos) & " and " & Trim(Cnt_Cond) & " and a.Reference_Date between @YarnSetDate2 and @SetDate group by a.company_idno, a.Reference_Code, a.Reference_No, a.for_orderby, a.Party_Bill_No , A.yarn_type order by a.for_orderby, a.Reference_No, a.Reference_Code, a.Party_Bill_No "
            Da = New SqlClient.SqlDataAdapter(cmd)
            Dt1 = New DataTable
            Da.Fill(Dt1)

            Dup_YarnRcptNo = ""
            If Dt1.Rows.Count > 0 Then
                For i = 0 To Dt1.Rows.Count - 1

                    If InStr(1, Trim(UCase(Dup_YarnRcptNo)), "~" & Trim(UCase(Dt1.Rows(i).Item("Party_Bill_No").ToString)) & "~") = 0 Then
                        Yarn_Rcpt_No = Trim(Yarn_Rcpt_No) & IIf(Trim(Yarn_Rcpt_No) <> "", ", ", "") & Trim(Dt1.Rows(i).Item("Party_Bill_No").ToString)
                        Dup_YarnRcptNo = Dup_YarnRcptNo & "~" & Trim(Dt1.Rows(i).Item("Party_Bill_No").ToString) & "~"
                    End If

                    If Trim(UCase(Dt1.Rows(i).Item("Yarn_TYPE").ToString)) = "MILL" Then
                        Rcpt_MillYarn = Format(Val(Rcpt_MillYarn) + Val(Dt1.Rows(i).Item("Yarn_Weight").ToString), "##########0.000")
                    Else
                        Rcpt_RWYarn = Format(Val(Rcpt_RWYarn) + Val(Dt1.Rows(i).Item("Yarn_Weight").ToString), "##########0.000")
                    End If

                    Rcpt_Yarn = Format(Val(Rcpt_Yarn) + Val(Dt1.Rows(i).Item("Yarn_Weight").ToString), "#########0.00")
                Next
            End If
            Dt1.Clear()

            TotDB = TotDB + Val(Rcpt_Yarn)
            Tot_Yarn = Format(Val(Tot_Yarn) + Val(Rcpt_Yarn), "#########0.00")

            cmd.CommandText = "select a.company_idno, a.Reference_Code, a.Reference_No, a.for_orderby, a.Party_Bill_No, sum(a.weight) as Yarn_Weight , Tm.mill_name from Stock_Yarn_Processing_Details a LEFT OUTER JOIN Mill_Head Tm ON a.Mill_IdNo = Tm.Mill_IdNo where " & Cmp_Cond & " a.Reference_Code LIKE 'YNREC-%'  and a.ReceivedFrom_Idno IN " & Trim(Led_GrpIdNos) & " and " & Trim(Cnt_Cond) & " and a.Reference_Date between @YarnSetDate2 and @SetDate group by a.company_idno, a.Reference_Code, a.Reference_No, a.for_orderby, a.Party_Bill_No , Tm.mill_name order by a.for_orderby, a.Reference_No, a.Reference_Code, a.Party_Bill_No "
            Da = New SqlClient.SqlDataAdapter(cmd)
            Dt1 = New DataTable
            Da.Fill(Dt1)

            cmd.CommandText = "Truncate table " & Trim(Common_Procedures.EntryTempTable) & ""
            cmd.ExecuteNonQuery()

            If Dt1.Rows.Count > 0 Then
                For i = 0 To Dt1.Rows.Count - 1

                    cmd.CommandText = "Insert into " & Trim(Common_Procedures.EntryTempTable) & "( Name1        ,     Name2       ,   Weight1   ) values (  '" & Trim(UCase(Dt1.Rows(i).Item("Party_Bill_No").ToString)) & " ' ,  '" & Trim(UCase(Dt1.Rows(i).Item("mill_name").ToString)) & "',   " & Val(Dt1.Rows(i).Item("Yarn_Weight").ToString) & " )"
                    cmd.ExecuteNonQuery()

                    'If InStr(1, Trim(UCase(Dup_YarnRcptNo)), "~" & Trim(UCase(Dt1.Rows(i).Item("Party_Bill_No").ToString)) & "~") = 0 Then
                    '    Yarn_Rcpt_No = Trim(Yarn_Rcpt_No) & IIf(Trim(Yarn_Rcpt_No) <> "", ", ", "") & Trim(Dt1.Rows(i).Item("Party_Bill_No").ToString)
                    '    Dup_YarnRcptNo = Dup_YarnRcptNo & "~" & Trim(Dt1.Rows(i).Item("Party_Bill_No").ToString) & "~"
                    'End If

                    'If Trim(UCase(Dt1.Rows(i).Item("mill_name").ToString)) = "MILL" Then
                    '    Rcpt_MillYarn = Rcpt_MillYarn + Val(Dt1.Rows(i).Item("Yarn_Weight").ToString)
                    'End If

                    'Rcpt_Yarn = Rcpt_Yarn + Val(Dt1.Rows(i).Item("Yarn_Weight").ToString)

                Next
            End If
            Dt1.Clear()

            n = .Rows.Add()
            .Rows(n).Cells(0).Value = " Yarn Receipt ( " & Trim(Yarn_Rcpt_No) & ")"
            .Rows(n).Cells(1).Value = Format(Val(Rcpt_Yarn), "#########0.000")
            .Rows(n).Cells(2).Value = ""
            .Rows(n).Cells(3).Value = Format(Val(Tot_Yarn), "#########0.000")

            prn_Yrn_RcptNo = Trim(Yarn_Rcpt_No)
            prn_Yrn_RcptWt = Val(Rcpt_Yarn)
            prn_Yrn_MillRcptWt = Val(Rcpt_MillYarn)
            prn_Yrn_RWRcptWt = Val(Rcpt_RWYarn)


            '----- Consumed Yarn
            If New_Entry = False Then

                Tot_ConsYrnWt = Format(Val(DtHd.Rows(0).Item("total_warping_net_weight").ToString), "###########0.000")
                prn_Yrn_ConsWt = Val(Tot_ConsYrnWt)

                '------ Excess/Short
                Exsh = Format(Val(DtHd.Rows(0).Item("excess_short_yarn").ToString), "##########0.000")
                prn_Yrn_ExShWt = Val(Exsh)

            End If


            '----- Yarn Taken
            Tot_YrnTknWt = 0
            Da = New SqlClient.SqlDataAdapter("select sum(a.weight) from Specification_YarnTaken_Details a where a.Set_Code = '" & Trim(New_Code) & "' and " & Trim(Cnt_Cond), Con)
            Dt1 = New DataTable
            Da.Fill(Dt1)

            If Dt1.Rows.Count > 0 Then
                If IsDBNull(Dt1.Rows(0)(0).ToString) = False Then
                    Tot_YrnTknWt = Format(Val(Dt1.Rows(0)(0).ToString), "#########0.000")
                End If
            End If
            Dt1.Clear()
            prn_Yrn_TknWt = Val(Tot_YrnTknWt)

            '----- BabyCone Wt
            If New_Entry = False Then
                Tot_BabyCnWt = Format(Val(DtHd.Rows(0).Item("total_baby_net_weight").ToString), "###########0.000")
                prn_Yrn_BayCnWt = Val(Tot_BabyCnWt)
            End If

            If Val(Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn) = 2 Then

                Tot_Yarn = Format(Val(Tot_Yarn) - Val(Tot_ConsYrnWt), "############0.000")
                TotCR = TotCR + Val(Tot_ConsYrnWt)

                n = .Rows.Add()
                .Rows(n).Cells(0).Value = " Consumed Yarn "
                .Rows(n).Cells(1).Value = ""
                .Rows(n).Cells(2).Value = Format(Val(Tot_ConsYrnWt), "#########0.000")
                .Rows(n).Cells(3).Value = Format(Val(Tot_Yarn), "###########0.000")

                Tot_Yarn = Format(Val(Tot_Yarn) + Val(Exsh), "##########0.000")

                n = .Rows.Add()
                If Val(Exsh) >= 0 Then
                    .Rows(n).Cells(0).Value = " Excess"
                    .Rows(n).Cells(1).Value = Format(Val(Exsh), "#########0.000")
                    TotDB = TotDB + Val(Exsh)
                Else
                    .Rows(n).Cells(0).Value = " Short"
                    .Rows(n).Cells(2).Value = Format(Math.Abs(Val(Exsh)), "#########0.000")
                    TotCR = TotCR + Math.Abs(Val(Exsh))
                End If
                .Rows(n).Cells(3).Value = Format(Val(Tot_Yarn), "#########0.000")



            Else

                '----- Yarn Taken
                Tot_Yarn = Format(Val(Tot_Yarn) - Val(Tot_YrnTknWt), "###########0.000")
                TotCR = TotCR + Val(Tot_YrnTknWt)

                n = .Rows.Add()
                .Rows(n).Cells(0).Value = " Yarn Taken"
                .Rows(n).Cells(1).Value = ""
                .Rows(n).Cells(2).Value = Format(Val(Tot_YrnTknWt), "#########0.000")
                .Rows(n).Cells(3).Value = Format(Val(Tot_Yarn), "#########0.000")

                '------ BabyCone

                Tot_Yarn = Format(Val(Tot_Yarn) + Val(Tot_BabyCnWt), "##########0.000")
                TotDB = TotDB + Val(Tot_BabyCnWt)

                n = .Rows.Add()
                .Rows(n).Cells(0).Value = " Baby Cone"
                .Rows(n).Cells(1).Value = Format(Val(Tot_BabyCnWt), "##########0.000")
                .Rows(n).Cells(3).Value = Format(Val(Tot_Yarn), "###########0.000")

            End If


            '----- Yarn Delivery
            Yarn_Ret_No = ""
            Delv_Yarn = 0

            cmd.CommandText = "select a.company_idno, a.Reference_Code, a.Reference_No, a.for_orderby, a.Party_Bill_No, sum(a.weight) as Yarn_Weight from Stock_Yarn_Processing_Details a where " & Cmp_Cond & " a.Reference_Code LIKE 'SYDEL-%' and a.DeliveryTo_Idno IN " & Trim(Led_GrpIdNos) & " and " & Trim(Cnt_Cond) & " and a.Reference_Date between @YarnSetDate2 and @SetDate group by a.company_idno, a.Reference_Code, a.Reference_No, a.for_orderby, a.Party_Bill_No order by a.for_orderby, a.Reference_No, a.Reference_Code, a.Party_Bill_No"
            Da = New SqlClient.SqlDataAdapter(cmd)
            Dt1 = New DataTable
            Da.Fill(Dt1)

            If Dt1.Rows.Count > 0 Then
                For i = 0 To Dt1.Rows.Count - 1
                    Yarn_Ret_No = Trim(Yarn_Ret_No) & IIf(Trim(Yarn_Ret_No) <> "", ", ", "") & Trim(Dt1.Rows(i).Item("Party_Bill_No").ToString)
                    Delv_Yarn = Format(Val(Delv_Yarn) + Val(Dt1.Rows(i).Item("Yarn_Weight").ToString), "###########0.000")
                Next
            End If
            Dt1.Clear()

            Tot_Yarn = Format(Val(Tot_Yarn) - Val(Delv_Yarn), "##########0.000")
            TotCR = TotCR + Val(Delv_Yarn)

            n = .Rows.Add()
            .Rows(n).Cells(0).Value = " Yarn Delivery ( " & Trim(Yarn_Ret_No) & ")"
            .Rows(n).Cells(1).Value = ""
            .Rows(n).Cells(2).Value = Format(Val(Delv_Yarn), "#########0.000")
            .Rows(n).Cells(3).Value = Format(Val(Tot_Yarn), "#########0.000")

            prn_Yrn_DcNo = Trim(Yarn_Ret_No)
            prn_Yrn_DelvWt = Val(Delv_Yarn)

            '----- R/W Exc/Sht
            RwExSh_StNo = ""
            RwExSh_Yarn = 0

            cmd.CommandText = "select a.company_idno, a.Reference_Code, a.Reference_No, a.for_orderby, a.Reference_Date, a.Party_Bill_No, a.Set_No, (sum(a.weight) * ( case when a.DeliveryTo_Idno IN " & Trim(Led_GrpIdNos) & " then -1 else 1 end) ) as Yarn_Weight from Stock_Yarn_Processing_Details a where " & Cmp_Cond & " a.Reference_Code LIKE 'REXSH-%' and (a.ReceivedFrom_Idno IN " & Trim(Led_GrpIdNos) & " or a.DeliveryTo_Idno IN " & Trim(Led_GrpIdNos) & ") and " & Trim(Cnt_Cond) & " and a.Reference_Date between @YarnSetDate2 and @SetDate group by a.company_idno, a.Reference_Code, a.Reference_No, a.for_orderby, a.Reference_Date, a.Party_Bill_No, a.Set_No, a.DeliveryTo_Idno order by a.Reference_Date, a.for_orderby, a.Reference_No, a.Reference_Code, a.Party_Bill_No, a.Set_No"
            Da = New SqlClient.SqlDataAdapter(cmd)
            Dt1 = New DataTable
            Da.Fill(Dt1)

            If Dt1.Rows.Count > 0 Then
                For i = 0 To Dt1.Rows.Count - 1
                    RwExSh_StNo = Trim(RwExSh_StNo) & IIf(Trim(RwExSh_StNo) <> "", ", ", "") & Trim(Dt1.Rows(i).Item("Set_No").ToString)
                    RwExSh_Yarn = Format(Val(RwExSh_Yarn) + Val(Dt1.Rows(i).Item("Yarn_Weight").ToString), "##########0.000")
                Next
            End If
            Dt1.Clear()

            If Val(RwExSh_Yarn) <> 0 Then

                Tot_Yarn = Format(Val(Tot_Yarn) + Val(RwExSh_Yarn), "###########0.000")
                n = .Rows.Add()
                If Val(RwExSh_Yarn) >= 0 Then
                    .Rows(n).Cells(0).Value = " Rewinding Excess ( " & Trim(RwExSh_StNo) & ")"
                    .Rows(n).Cells(1).Value = Format(Val(RwExSh_Yarn), "#########0.000")
                    TotDB = TotDB + Val(RwExSh_Yarn)
                Else
                    .Rows(n).Cells(0).Value = " Rewinding Short ( " & Trim(RwExSh_StNo) & ")"
                    .Rows(n).Cells(2).Value = Format(Math.Abs(Val(RwExSh_Yarn)), "#########0.000")
                    TotCR = TotCR + Math.Abs(Val(RwExSh_Yarn))
                End If
                .Rows(n).Cells(3).Value = Format(Val(Tot_Yarn), "#########0.000")

                prn_Yrn_RwExShStNo = Trim(RwExSh_StNo)
                prn_Yrn_RwExShWt = Val(RwExSh_Yarn)

            End If

            '----- Yarn Transfer
            Yarn_Tranfr_No = ""
            Yarn_Tranfr_Wt = 0

            cmd.CommandText = "select a.company_idno, a.Reference_Code, a.Reference_No, a.for_orderby, a.Reference_Date, a.Party_Bill_No, (sum(a.weight) * ( case when a.DeliveryTo_Idno IN " & Trim(Led_GrpIdNos) & " then -1 else 1 end) ) as Yarn_Weight from Stock_Yarn_Processing_Details a where " & Cmp_Cond & " a.Reference_Code LIKE 'YNTRA-%' and (a.ReceivedFrom_Idno IN " & Trim(Led_GrpIdNos) & " or a.DeliveryTo_Idno IN " & Trim(Led_GrpIdNos) & ") and " & Trim(Cnt_Cond) & " and a.Reference_Date between @YarnSetDate2 and @SetDate group by a.company_idno, a.Reference_Code, a.Reference_No, a.for_orderby, a.Reference_Date, a.Party_Bill_No, a.DeliveryTo_Idno order by a.Reference_Date, a.for_orderby, a.Reference_No, a.Reference_Code, a.Party_Bill_No"
            Da = New SqlClient.SqlDataAdapter(cmd)
            Dt1 = New DataTable
            Da.Fill(Dt1)

            If Dt1.Rows.Count > 0 Then
                For i = 0 To Dt1.Rows.Count - 1
                    Yarn_Tranfr_No = Trim(Yarn_Tranfr_No) & IIf(Trim(Yarn_Tranfr_No) <> "", ", ", "") & Trim(Dt1.Rows(i).Item("Party_Bill_No").ToString)
                    Yarn_Tranfr_Wt = Format(Val(Yarn_Tranfr_Wt) + Val(Dt1.Rows(i).Item("Yarn_Weight").ToString), "##########0.000")
                Next
            End If
            Dt1.Clear()

            If Val(Yarn_Tranfr_Wt) <> 0 Then

                Tot_Yarn = Format(Val(Tot_Yarn) + Val(Yarn_Tranfr_Wt), "###########0.000")
                n = .Rows.Add()
                If Val(Yarn_Tranfr_Wt) >= 0 Then
                    .Rows(n).Cells(0).Value = " Add Yarn Transfer ( " & Trim(Yarn_Tranfr_No) & ")"
                    .Rows(n).Cells(1).Value = Format(Val(Yarn_Tranfr_Wt), "#########0.000")
                    TotDB = TotDB + Val(Yarn_Tranfr_Wt)
                Else
                    .Rows(n).Cells(0).Value = " Less Yarn Transfer ( " & Trim(Yarn_Tranfr_No) & ")"
                    .Rows(n).Cells(2).Value = Format(Math.Abs(Val(Yarn_Tranfr_Wt)), "#########0.000")
                    TotCR = TotCR + Math.Abs(Val(Yarn_Tranfr_Wt))
                End If
                .Rows(n).Cells(3).Value = Format(Val(Tot_Yarn), "#########0.000")

                prn_Yrn_TranfrNo = Trim(Yarn_Tranfr_No)
                prn_Yrn_TranfrWt = Val(Yarn_Tranfr_Wt)

            End If

            '----- Yarn Excess/Short
            Yarn_ExcSht_No = ""
            Yarn_ExcSht_Wt = 0

            cmd.CommandText = "select a.company_idno, a.Reference_Code, a.Reference_No, a.for_orderby, a.Reference_Date, a.Party_Bill_No, (sum(a.weight) * ( case when a.DeliveryTo_Idno IN " & Trim(Led_GrpIdNos) & " then -1 else 1 end) ) as Yarn_Weight from Stock_Yarn_Processing_Details a where " & Cmp_Cond & " a.Reference_Code LIKE 'YEXSH-%' and (a.ReceivedFrom_Idno IN " & Trim(Led_GrpIdNos) & " or a.DeliveryTo_Idno IN " & Trim(Led_GrpIdNos) & ") and " & Trim(Cnt_Cond) & " and a.Reference_Date between @YarnSetDate2 and @SetDate group by a.company_idno, a.Reference_Code, a.Reference_No, a.for_orderby, a.Reference_Date, a.Party_Bill_No, a.DeliveryTo_Idno order by a.Reference_Date, a.for_orderby, a.Reference_No, a.Reference_Code, a.Party_Bill_No"
            Da = New SqlClient.SqlDataAdapter(cmd)
            Dt1 = New DataTable
            Da.Fill(Dt1)

            If Dt1.Rows.Count > 0 Then
                For i = 0 To Dt1.Rows.Count - 1
                    Yarn_ExcSht_No = Trim(Yarn_ExcSht_No) & IIf(Trim(Yarn_ExcSht_No) <> "", ", ", "") & Trim(Dt1.Rows(i).Item("Party_Bill_No").ToString)
                    Yarn_ExcSht_Wt = Format(Val(Yarn_ExcSht_Wt) + Val(Dt1.Rows(i).Item("Yarn_Weight").ToString), "###########0.000")
                Next
            End If
            Dt1.Clear()

            If Val(Yarn_ExcSht_Wt) <> 0 Then

                Tot_Yarn = Format(Val(Tot_Yarn) + Val(Yarn_ExcSht_Wt), "##########0.000")
                n = .Rows.Add()
                If Val(Yarn_ExcSht_Wt) >= 0 Then
                    .Rows(n).Cells(0).Value = " Add Yarn Adjustment (Excess) ( " & Trim(Yarn_ExcSht_No) & ")"
                    .Rows(n).Cells(1).Value = Format(Val(Yarn_ExcSht_Wt), "#########0.000")
                    TotDB = TotDB + Val(Yarn_ExcSht_Wt)
                Else
                    .Rows(n).Cells(0).Value = " Less Yarn Adjustment (Short) ( " & Trim(Yarn_ExcSht_No) & ")"
                    .Rows(n).Cells(2).Value = Format(Math.Abs(Val(Yarn_ExcSht_Wt)), "#########0.000")
                    TotCR = TotCR + Math.Abs(Val(Yarn_ExcSht_Wt))
                End If
                .Rows(n).Cells(3).Value = Format(Val(Tot_Yarn), "#########0.000")

                prn_Yrn_ExcSht_No = Trim(Yarn_ExcSht_No)
                prn_Yrn_ExcSht_Wt = Val(Yarn_ExcSht_Wt)

            End If


            dgv_YarnStockDetails_Total.Rows.Clear()
            n = dgv_YarnStockDetails_Total.Rows.Add()
            dgv_YarnStockDetails_Total.Rows(n).Cells(0).Value = " TOTAL"
            dgv_YarnStockDetails_Total.Rows(n).Cells(1).Value = Format(Val(TotDB), "#########0.000")
            dgv_YarnStockDetails_Total.Rows(n).Cells(2).Value = Format(Val(TotCR), "#########0.000")
            dgv_YarnStockDetails_Total.Rows(n).Cells(3).Value = Format(Val(Tot_Yarn), "#########0.000")

        End With

        ' ------------- Yarn Stock Summary - Set Count

        'If Val(Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn) = 2 Then
        '    YrnStk_Condt = "(Posting_For <> 'YARNTAKEN')"

        'Else
        YrnStk_Condt = "(Posting_For <> 'CONSUMEDYARN')"

        'End If

        cmd.CommandText = "truncate table " & Trim(Common_Procedures.ReportTempTable) & ""
        cmd.ExecuteNonQuery()

        cmd.CommandText = "insert into " & Trim(Common_Procedures.ReportTempTable) & " ( name3,       name1,                                                                                    name2,   int1,    int2,   weight1  ) " &
        "Select                        a.Reference_Code, a.Yarn_Type, (CASE WHEN a.Yarn_Type = 'BABY' and a.Set_Code <> '' THEN a.Set_No ELSE b.mill_name END), a.bags, a.cones, a.weight   from Stock_Yarn_Processing_Details a, mill_head b where " & Cmp_Cond & " a.Reference_Code NOT LIKE '" & Trim(PkCondition_TIN) & "%' and a.Reference_Code NOT LIKE '" & Trim(PkCondition_GST) & "%' and a.Reference_Code NOT LIKE '" & Trim(PkCondition_MACHINE3) & "%' and a.Reference_Code NOT LIKE '" & Trim(PkCondition_MACHINE4) & "%' and a.ReceivedFrom_Idno in " & Trim(Led_GrpIdNos) & " and " & Trim(Cnt_Cond) & " and " & YrnStk_Condt & " and a.Reference_Date <= @SetDate and a.mill_idno = b.mill_idno"
        cmd.ExecuteNonQuery()


        cmd.CommandText = "insert into " & Trim(Common_Procedures.ReportTempTable) & "(name3,       name1,                                                                                    name2,   int1,    int2,  weight1   ) " &
        "Select                        a.Reference_Code, a.Yarn_Type, (CASE WHEN a.Yarn_Type = 'BABY' and a.Set_Code <> '' THEN a.Set_No ELSE b.mill_name END), a.bags, a.cones, a.weight from Stock_Yarn_Processing_Details a, mill_head b, Specification_Head c where " & Cmp_Cond & " (a.Reference_Code LIKE '" & Trim(PkCondition_TIN) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_GST) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_MACHINE3) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_MACHINE4) & "%') and ReceivedFrom_Idno in " & Trim(Led_GrpIdNos) & " and " & Trim(Cnt_Cond) & " and " & YrnStk_Condt & " and (a.Reference_Date < @SetDate or ( a.Reference_Date = @SetDate and a.for_orderby < " & Str(Format(Val(OrdBy), "########0.00")) & ")  or ( a.Reference_Date = @SetDate and a.for_orderby = " & Str(Format(Val(OrdBy), "########0.00")) & " and c.Auto_setNo <= " & Str(Val(Auinc_StNo)) & ") ) and a.mill_idno = b.mill_idno and a.Reference_Code = (CASE WHEN c.Set_Code LIKE '" & Trim(PkCondition_GST) & "%' THEN '" & Trim(PkCondition_GST) & "' WHEN c.Set_Code LIKE '" & Trim(PkCondition_MACHINE3) & "%' THEN '" & Trim(PkCondition_MACHINE3) & "' WHEN c.Set_Code LIKE '" & Trim(PkCondition_MACHINE4) & "%' THEN '" & Trim(PkCondition_MACHINE4) & "' ELSE '" & Trim(PkCondition_TIN) & "' END) + c.Set_Code  and a.company_idno = c.company_idno"
        cmd.ExecuteNonQuery()


        'cmd.CommandText = "insert into " & Trim(Common_Procedures.ReportTempTable) & "(name3,       name1,                                                                                    name2,   int1,    int2,  weight1   ) " &
        '"Select                        a.Reference_Code, a.Yarn_Type, (CASE WHEN a.Yarn_Type = 'BABY' and a.Set_Code <> '' THEN a.Set_No ELSE b.mill_name END), a.bags, a.cones, a.weight from Stock_Yarn_Processing_Details a, mill_head b, Specification_Head c where " & Cmp_Cond & " (a.Reference_Code LIKE '" & Trim(PkCondition_TIN) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_GST) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_MACHINE3) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_MACHINE4) & "%') and ReceivedFrom_Idno in " & Trim(Led_GrpIdNos) & " and " & Trim(Cnt_Cond) & " and " & YrnStk_Condt & " and (a.Reference_Date < @SetDate or ( a.Reference_Date = @SetDate and a.for_orderby < " & Str(Format(Val(OrdBy_StNo), "########0.00")) & ")  or ( a.Reference_Date = @SetDate and a.for_orderby = " & Str(Format(Val(OrdBy_StNo), "########0.00")) & " and c.Auto_setNo <= " & Str(Val(Auinc_StNo)) & ") ) and a.mill_idno = b.mill_idno and a.Reference_Code = (CASE WHEN c.Set_Code LIKE '" & Trim(PkCondition_GST) & "%' THEN '" & Trim(PkCondition_GST) & "' WHEN c.Set_Code LIKE '" & Trim(PkCondition_MACHINE3) & "%' THEN '" & Trim(PkCondition_MACHINE3) & "' WHEN c.Set_Code LIKE '" & Trim(PkCondition_MACHINE4) & "%' THEN '" & Trim(PkCondition_MACHINE4) & "' ELSE '" & Trim(PkCondition_TIN) & "' END) + c.Set_Code  and a.company_idno = c.company_idno"
        'cmd.ExecuteNonQuery()


        cmd.CommandText = "insert into " & Trim(Common_Procedures.ReportTempTable) & "(name3,       name1,                                                                                    name2,      int1,       int2,   weight1        ) " &
        "Select                        a.Reference_Code, a.Yarn_Type, (CASE WHEN a.Yarn_Type = 'BABY' and a.Set_Code <> '' THEN a.Set_No ELSE b.mill_name END), -1*a.bags, -1*a.cones, -1*a.weight from Stock_Yarn_Processing_Details a, mill_head b where " & Cmp_Cond & " a.Reference_Code NOT LIKE '" & Trim(PkCondition_TIN) & "%' and a.Reference_Code NOT LIKE '" & Trim(PkCondition_GST) & "%' and  a.Reference_Code NOT LIKE '" & Trim(PkCondition_MACHINE3) & "%' and  a.Reference_Code NOT LIKE '" & Trim(PkCondition_MACHINE4) & "%' and a.DeliveryTo_Idno IN " & Trim(Led_GrpIdNos) & " and " & Trim(Cnt_Cond) & " and " & YrnStk_Condt & " and a.Reference_Date <= @SetDate and a.mill_idno = b.mill_idno"
        cmd.ExecuteNonQuery()


        cmd.CommandText = "insert into " & Trim(Common_Procedures.ReportTempTable) & "(name3,       name1,                                                                                    name2,      int1,       int2,  weight1     ) " &
        "Select                        a.Reference_Code, a.Yarn_Type, (CASE WHEN a.Yarn_Type = 'BABY' and a.Set_Code <> '' THEN a.Set_No ELSE b.mill_name END), -1*a.bags, -1*a.cones, -1*a.weight from Stock_Yarn_Processing_Details a, mill_head b, Specification_Head c where " & Cmp_Cond & " (a.Reference_Code LIKE '" & Trim(PkCondition_TIN) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_GST) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_MACHINE3) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_MACHINE4) & "%') and a.DeliveryTo_Idno IN " & Trim(Led_GrpIdNos) & " and " & Trim(Cnt_Cond) & " and " & YrnStk_Condt & " and (a.Reference_Date < @SetDate or ( a.Reference_Date = @SetDate and a.for_orderby < " & Str(Format(Val(OrdBy), "########0.00")) & " )  or ( a.Reference_Date = @SetDate and a.for_orderby = " & Str(Format(Val(OrdBy), "########0.00")) & " and c.Auto_setNo <= " & Str(Auinc_StNo) & ") ) and a.mill_idno = b.mill_idno and a.Reference_Code = (CASE WHEN c.Set_Code LIKE '" & Trim(PkCondition_GST) & "%' THEN '" & Trim(PkCondition_GST) & "'  WHEN c.Set_Code LIKE '" & Trim(PkCondition_MACHINE3) & "%' THEN '" & Trim(PkCondition_MACHINE3) & "'  WHEN c.Set_Code LIKE '" & Trim(PkCondition_MACHINE4) & "%' THEN '" & Trim(PkCondition_MACHINE4) & "' ELSE '" & Trim(PkCondition_TIN) & "' END) + c.Set_Code and a.company_idno = c.company_idno"
        cmd.ExecuteNonQuery()


        'cmd.CommandText = "insert into " & Trim(Common_Procedures.ReportTempTable) & "(name3,       name1,                                                                                    name2,      int1,       int2,  weight1     ) " &
        '"Select                        a.Reference_Code, a.Yarn_Type, (CASE WHEN a.Yarn_Type = 'BABY' and a.Set_Code <> '' THEN a.Set_No ELSE b.mill_name END), -1*a.bags, -1*a.cones, -1*a.weight from Stock_Yarn_Processing_Details a, mill_head b, Specification_Head c where " & Cmp_Cond & " (a.Reference_Code LIKE '" & Trim(PkCondition_TIN) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_GST) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_MACHINE3) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_MACHINE4) & "%') and a.DeliveryTo_Idno IN " & Trim(Led_GrpIdNos) & " and " & Trim(Cnt_Cond) & " and " & YrnStk_Condt & " and (a.Reference_Date < @SetDate or ( a.Reference_Date = @SetDate and a.for_orderby < " & Str(Format(Val(OrdBy_StNo), "########0.00")) & " )  or ( a.Reference_Date = @SetDate and a.for_orderby = " & Str(Format(Val(OrdBy_StNo), "########0.00")) & " and c.Auto_setNo <= " & Str(Auinc_StNo) & ") ) and a.mill_idno = b.mill_idno and a.Reference_Code = (CASE WHEN c.Set_Code LIKE '" & Trim(PkCondition_GST) & "%' THEN '" & Trim(PkCondition_GST) & "'  WHEN c.Set_Code LIKE '" & Trim(PkCondition_MACHINE3) & "%' THEN '" & Trim(PkCondition_MACHINE3) & "'  WHEN c.Set_Code LIKE '" & Trim(PkCondition_MACHINE4) & "%' THEN '" & Trim(PkCondition_MACHINE4) & "' ELSE '" & Trim(PkCondition_TIN) & "' END) + c.Set_Code and a.company_idno = c.company_idno"
        'cmd.ExecuteNonQuery()

        cmd.CommandText = "truncate table Temp_Statement_Yarn_Stock_Summary"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "insert into Temp_Statement_Yarn_Stock_Summary( Order_By, Count_Name, Yarn_Type, Mill_Name, Bags, Cones, Weight ) select (case when name1 = 'MILL' then 1 when name1 = 'R/W' then 2 else 3 end) as Orderby, '' as CountName, name1 as Yarn_Type, name2 as mill_name, sum(int1) as bags, sum(int2) as cones, sum(weight1) as Weight from " & Trim(Common_Procedures.ReportTempTable) & " group by name1, name2 having sum(weight1) <> 0 order by name1 desc, name2"
        cmd.ExecuteNonQuery()

        Da = New SqlClient.SqlDataAdapter("select name1 as Yarn_Type, name2 as mill_name, sum(int1) as bags, sum(int2) as cones, sum(weight1) as Weight from " & Trim(Common_Procedures.ReportTempTable) & " group by name1, name2 having sum(weight1) <> 0 order by name1 desc, name2", Con)
        Dt1 = New DataTable
        Da.Fill(Dt1)

        With dgv_YarnStockSummary

            .Rows.Clear()
            Tot = 0
            Tot1 = 0
            Tot2 = 0

            If Dt1.Rows.Count > 0 Then
                For i = 0 To Dt1.Rows.Count - 1

                    n = .Rows.Add
                    .Rows(n).Cells(0).Value = Dt1.Rows(i).Item("Yarn_Type").ToString
                    .Rows(n).Cells(1).Value = Dt1.Rows(i).Item("mill_name").ToString
                    .Rows(n).Cells(2).Value = Dt1.Rows(i).Item("bags").ToString
                    .Rows(n).Cells(3).Value = Dt1.Rows(i).Item("cones").ToString
                    .Rows(n).Cells(4).Value = Format(Val(Dt1.Rows(i).Item("weight").ToString), "#########0.000")


                    Tot = Tot + Val(Dt1.Rows(i).Item("weight").ToString)
                    Tot1 = Tot1 + Val(Dt1.Rows(i).Item("cones").ToString)
                    Tot2 = Tot2 + Val(Dt1.Rows(i).Item("bags").ToString)

                Next
            End If

            dgv_YarnStockSummary_Total.Rows.Clear()
            n = dgv_YarnStockSummary_Total.Rows.Add
            dgv_YarnStockSummary_Total.Rows(n).Cells(0).Value = ""
            dgv_YarnStockSummary_Total.Rows(n).Cells(1).Value = " TOTAL"
            dgv_YarnStockSummary_Total.Rows(n).Cells(2).Value = Tot2
            dgv_YarnStockSummary_Total.Rows(n).Cells(3).Value = Tot1
            dgv_YarnStockSummary_Total.Rows(n).Cells(4).Value = Format(Val(Tot), "#########0.000")

        End With

        ' ------------- Yarn Stock Summary - Other Count


        If Val(Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn) = 2 Then
            YrnStk_Condt = "(Posting_For <> 'YARNTAKEN')"

        Else
            YrnStk_Condt = "(Posting_For <> 'CONSUMEDYARN')"

        End If

        If Common_Procedures.settings.StatementPrint_Yarn_Other_Count_Particulars_Show_Running_Count_Also = 1 Then
            YrnStk_OtherCountPrtculrs_Condt = " "
        Else
            YrnStk_OtherCountPrtculrs_Condt = " (NOT " & Trim(Cnt_Cond) & ") and "
        End If


        cmd.CommandText = "truncate table " & Trim(Common_Procedures.ReportTempTable) & ""
        Nr = cmd.ExecuteNonQuery()

        cmd.CommandText = "insert into " & Trim(Common_Procedures.ReportTempTable) & "(name3, name1, int1, int2, weight1) select a.Reference_Code, d.Count_Name, a.bags, a.cones, a.weight from Stock_Yarn_Processing_Details a, count_head b, count_head d where " & Cmp_Cond & " a.Reference_Code NOT LIKE '" & Trim(PkCondition_TIN) & "%' and a.Reference_Code NOT LIKE '" & Trim(PkCondition_GST) & "%' and a.Reference_Code NOT LIKE '" & Trim(PkCondition_MACHINE3) & "%' and a.Reference_Code NOT LIKE '" & Trim(PkCondition_MACHINE4) & "%' and a.ReceivedFrom_Idno in " & Trim(Led_GrpIdNos) & " and " & YrnStk_OtherCountPrtculrs_Condt & " " & YrnStk_Condt & " and a.Reference_Date <= @SetDate and a.count_idno = b.count_idno and b.Count_StockUnder_IdNo = d.count_idno"
        Nr = cmd.ExecuteNonQuery()

        cmd.CommandText = "insert into " & Trim(Common_Procedures.ReportTempTable) & "(name3, name1, int1, int2, weight1) select a.Reference_Code, d.Count_Name, a.bags, a.cones, a.weight from Stock_Yarn_Processing_Details a, count_head b, Specification_Head c, count_head d where " & Cmp_Cond & " ( a.Reference_Code LIKE '" & Trim(PkCondition_TIN) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_GST) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_MACHINE3) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_MACHINE4) & "%' ) and ReceivedFrom_Idno in " & Trim(Led_GrpIdNos) & " and  " & YrnStk_OtherCountPrtculrs_Condt & "  " & YrnStk_Condt & " and (a.Reference_Date < @SetDate or ( a.Reference_Date = @SetDate and a.for_orderby < " & Str(Format(Val(OrdBy_StNo), "########0.00")) & ")  or ( a.Reference_Date = @SetDate and a.for_orderby = " & Str(Format(Val(OrdBy_StNo), "########0.00")) & " and c.Auto_setNo <= " & Str(Val(Auinc_StNo)) & ") ) and a.count_idno = b.count_idno and a.Reference_Code =  (CASE WHEN c.Set_Code LIKE '" & Trim(PkCondition_GST) & "%' THEN '" & Trim(PkCondition_GST) & "' WHEN c.Set_Code LIKE '" & Trim(PkCondition_MACHINE3) & "%' THEN '" & Trim(PkCondition_MACHINE3) & "' WHEN c.Set_Code LIKE '" & Trim(PkCondition_MACHINE4) & "%' THEN '" & Trim(PkCondition_MACHINE4) & "' ELSE '" & Trim(PkCondition_TIN) & "' END) + c.Set_Code  and a.company_idno = c.company_idno and b.Count_StockUnder_IdNo = d.count_idno"
        Nr = cmd.ExecuteNonQuery()

        cmd.CommandText = "insert into " & Trim(Common_Procedures.ReportTempTable) & "(name3, name1, int1, int2, weight1) select a.Reference_Code, d.Count_Name, -1*a.bags, -1*a.cones, -1*a.weight from Stock_Yarn_Processing_Details a, count_head b, count_head d  where " & Cmp_Cond & " (a.Reference_Code NOT LIKE '" & Trim(PkCondition_TIN) & "%' and a.Reference_Code NOT LIKE '" & Trim(PkCondition_GST) & "%' and a.Reference_Code NOT LIKE '" & Trim(PkCondition_MACHINE3) & "%' and a.Reference_Code NOT LIKE '" & Trim(PkCondition_MACHINE4) & "%' ) and a.DeliveryTo_Idno IN " & Trim(Led_GrpIdNos) & " and  " & YrnStk_OtherCountPrtculrs_Condt & "  " & YrnStk_Condt & " and a.Reference_Date <= @SetDate and a.count_idno = b.count_idno and b.Count_StockUnder_IdNo = d.count_idno"
        Nr = cmd.ExecuteNonQuery()

        cmd.CommandText = "insert into " & Trim(Common_Procedures.ReportTempTable) & "(name3, name1, int1, int2, weight1) select a.Reference_Code, d.Count_Name, -1*a.bags, -1*a.cones, -1*a.weight from Stock_Yarn_Processing_Details a, count_head b, Specification_Head c, count_head d where " & Cmp_Cond & " (a.Reference_Code LIKE '" & Trim(PkCondition_TIN) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_GST) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_MACHINE3) & "%' or a.Reference_Code LIKE '" & Trim(PkCondition_MACHINE4) & "%') and a.DeliveryTo_Idno IN " & Trim(Led_GrpIdNos) & " and  " & YrnStk_OtherCountPrtculrs_Condt & "  " & YrnStk_Condt & " and (a.Reference_Date < @SetDate or (a.Reference_Date = @SetDate and a.for_orderby < " & Str(Format(Val(OrdBy_StNo), "########0.00")) & ")  or ( a.Reference_Date = @SetDate and a.for_orderby = " & Str(Format(Val(OrdBy_StNo), "########0.00")) & " and c.Auto_setNo <= " & Str(Auinc_StNo) & ") ) and a.count_idno = b.count_idno  and a.Reference_Code =  (CASE WHEN c.Set_Code LIKE '" & Trim(PkCondition_GST) & "%' THEN '" & Trim(PkCondition_GST) & "' WHEN c.Set_Code LIKE '" & Trim(PkCondition_MACHINE3) & "%' THEN '" & Trim(PkCondition_MACHINE3) & "' WHEN c.Set_Code LIKE '" & Trim(PkCondition_MACHINE4) & "%' THEN '" & Trim(PkCondition_MACHINE4) & "' ELSE '" & Trim(PkCondition_TIN) & "' END) + c.Set_Code and a.company_idno = c.company_idno and b.Count_StockUnder_IdNo = d.count_idno"
        Nr = cmd.ExecuteNonQuery()

        cmd.CommandText = "truncate table Temp_Statement_Other_Yarn_Stock_Summary"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "insert into Temp_Statement_Other_Yarn_Stock_Summary( Count_Name, Bags, Cones, Weight ) select name1 as CountName, sum(int1) as bags, sum(int2) as cones, sum(weight1) as Weight from " & Trim(Common_Procedures.ReportTempTable) & " group by name1 having sum(weight1) <> 0"
        cmd.ExecuteNonQuery()

        'Da = New SqlClient.SqlDataAdapter("select name1 as count_name, sum(int1) as bags, sum(int2) as cones, sum(weight1) as Weight from " & Trim(Common_Procedures.ReportTempTable) & " group by name1 having sum(weight1) <> 0 order by name1", Con)
        'Dt1 = New DataTable
        'Da.Fill(Dt1)

        'With dgv_YarnStockSummary

        '    .Rows.Clear()
        '    Tot = 0
        '    Tot1 = 0
        '    Tot2 = 0

        '    If Dt1.Rows.Count > 0 Then
        '        For i = 0 To Dt1.Rows.Count - 1

        '            n = .Rows.Add
        '            .Rows(n).Cells(0).Value = Dt1.Rows(i).Item("Yarn_Type").ToString
        '            .Rows(n).Cells(1).Value = Dt1.Rows(i).Item("mill_name").ToString
        '            .Rows(n).Cells(2).Value = Dt1.Rows(i).Item("bags").ToString
        '            .Rows(n).Cells(3).Value = Dt1.Rows(i).Item("cones").ToString
        '            .Rows(n).Cells(4).Value = Format(Val(Dt1.Rows(i).Item("weight").ToString), "#########0.000")


        '            Tot = Tot + Val(Dt1.Rows(i).Item("weight").ToString)
        '            Tot1 = Tot1 + Val(Dt1.Rows(i).Item("cones").ToString)
        '            Tot2 = Tot2 + Val(Dt1.Rows(i).Item("bags").ToString)

        '        Next
        '    End If

        '    dgv_YarnStockSummary_Total.Rows.Clear()
        '    n = dgv_YarnStockSummary_Total.Rows.Add
        '    dgv_YarnStockSummary_Total.Rows(n).Cells(0).Value = ""
        '    dgv_YarnStockSummary_Total.Rows(n).Cells(1).Value = " TOTAL"
        '    dgv_YarnStockSummary_Total.Rows(n).Cells(2).Value = Tot2
        '    dgv_YarnStockSummary_Total.Rows(n).Cells(3).Value = Tot1
        '    dgv_YarnStockSummary_Total.Rows(n).Cells(4).Value = Format(Val(Tot), "#########0.000")

        'End With

        DtHd.Dispose()
        Dt1.Dispose()
        Da.Dispose()
        cmd.Dispose()

    End Sub

    Private Sub dgv_WarpingDetails_Set1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgv_WarpingDetails_Set1.LostFocus
        On Error Resume Next
        If Not IsNothing(dgv_WarpingDetails_Set1.CurrentCell) Then dgv_WarpingDetails_Set1.CurrentCell.Selected = False
    End Sub

    Private Sub txt_BabyCone_TareWeight_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txt_BabyCone_TareWeight.TextChanged
        'Total_BabyCone_Calculation()
        BabyCone_NetWeight_Calculation()
    End Sub

    Private Sub dgtxt_ChemicalDetails_EditingControlShowing(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewEditingControlShowingEventArgs) Handles dgv_ChemicalDetails.EditingControlShowing
        dgtxt_ChemicalDetails = CType(dgv_ChemicalDetails.EditingControl, DataGridViewTextBoxEditingControl)
    End Sub

    Private Sub dgtxt_ChemicalDetails_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgtxt_ChemicalDetails.Enter
        dgv_ChemicalDetails.EditingControl.BackColor = Color.Lime
        dgv_ChemicalDetails.EditingControl.ForeColor = Color.Blue
        dgtxt_ChemicalDetails.SelectAll()
    End Sub

    Private Sub dgtxt_ChemicalDetails_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles dgtxt_ChemicalDetails.KeyPress
        With dgv_ChemicalDetails

            If .Visible Then

                'If .CurrentCell.ColumnIndex = 7 Then
                '    If Val(.Rows(.CurrentCell.RowIndex).Cells(2).Value) <> 0 Then
                '        e.Handled = True
                '    End If
                'End If

                If Common_Procedures.Accept_NumericOnly(Asc(e.KeyChar)) = 0 Then
                    e.Handled = True
                End If
            End If
        End With
    End Sub

    Private Sub dgv_YarnTakenDetails_EditingControlShowing(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewEditingControlShowingEventArgs) Handles dgv_YarnTakenDetails.EditingControlShowing
        dgtxt_YarnTakenDetails = CType(dgv_YarnTakenDetails.EditingControl, DataGridViewTextBoxEditingControl)
    End Sub

    Private Sub dgtxt_YarnTakenDetails_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgtxt_YarnTakenDetails.Enter
        dgv_YarnTakenDetails.EditingControl.BackColor = Color.Lime
        dgv_YarnTakenDetails.EditingControl.ForeColor = Color.Blue
        dgtxt_YarnTakenDetails.SelectAll()
    End Sub

    Private Sub dgtxt_YarnTakenDetails_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles dgtxt_YarnTakenDetails.KeyPress
        If Common_Procedures.Accept_NumericOnly(Asc(e.KeyChar)) = 0 Then
            e.Handled = True
        End If
    End Sub

    Private Sub dgtxt_SizingDetails_Set1_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgtxt_SizingDetails_Set1.Enter
        dgv_SizingDetails_Set1.EditingControl.BackColor = Color.Lime
        dgv_SizingDetails_Set1.EditingControl.ForeColor = Color.Blue
        dgtxt_SizingDetails_Set1.SelectAll()
    End Sub

    Private Sub dgtxt_SizingDetails_Set1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgtxt_SizingDetails_Set1.KeyDown
        If dgv_SizingDetails_Set1.CurrentCell.ColumnIndex <> 2 And dgv_SizingDetails_Set1.CurrentCell.ColumnIndex <> 3 And dgv_SizingDetails_Set1.CurrentCell.ColumnIndex <> 4 And dgv_SizingDetails_Set1.CurrentCell.ColumnIndex <> 30 And Trim(dgv_SizingDetails_Set1.Rows(dgv_SizingDetails_Set1.CurrentCell.RowIndex).Cells(8).Value) <> "" Then
            e.SuppressKeyPress = True
            e.Handled = True
        End If
    End Sub

    Private Sub dgtxt_SizingDetails_Set1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles dgtxt_SizingDetails_Set1.KeyPress
        Try
            With dgv_SizingDetails_Set1
                'If .CurrentCell.ColumnIndex <> 2 And .CurrentCell.ColumnIndex <> 3 And .CurrentCell.ColumnIndex <> 4 And Trim(dgv_SizingDetails_Set1.Rows(dgv_SizingDetails_Set1.CurrentCell.RowIndex).Cells(8).Value) <> "" Then
                '    e.Handled = True
                'Else
                If .CurrentCell.ColumnIndex > 1 Then
                    If .CurrentCell.ColumnIndex = 1 Or .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 4 Or .CurrentCell.ColumnIndex = 5 Or .CurrentCell.ColumnIndex = 6 Or .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 8 Or .CurrentCell.ColumnIndex = 10 Or .CurrentCell.ColumnIndex = 11 Or .CurrentCell.ColumnIndex = 12 Or .CurrentCell.ColumnIndex = 14 Or .CurrentCell.ColumnIndex = 16 Or .CurrentCell.ColumnIndex = 18 Or .CurrentCell.ColumnIndex = 20 Or .CurrentCell.ColumnIndex = 22 Or .CurrentCell.ColumnIndex = 24 Or .CurrentCell.ColumnIndex = 26 Or .CurrentCell.ColumnIndex = 28 Or .CurrentCell.ColumnIndex = 30 Then
                        If Common_Procedures.Accept_NumericOnly(Asc(e.KeyChar)) = 0 Then e.Handled = True
                    End If
                End If
                'End If
            End With

        Catch ex As Exception
            '------

        End Try

    End Sub

    Private Sub dgtxt_SizingDetails_Set2_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgtxt_SizingDetails_Set2.Enter
        dgv_SizingDetails_Set2.EditingControl.BackColor = Color.Lime
        dgv_SizingDetails_Set2.EditingControl.ForeColor = Color.Blue
        dgtxt_SizingDetails_Set2.SelectAll()
    End Sub

    Private Sub dgtxt_SizingDetails_Set2_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgtxt_SizingDetails_Set2.KeyDown
        If dgv_SizingDetails_Set2.CurrentCell.ColumnIndex <> 2 And dgv_SizingDetails_Set2.CurrentCell.ColumnIndex <> 3 And dgv_SizingDetails_Set2.CurrentCell.ColumnIndex <> 4 And dgv_SizingDetails_Set1.CurrentCell.ColumnIndex <> 30 And Trim(dgv_SizingDetails_Set2.Rows(dgv_SizingDetails_Set2.CurrentCell.RowIndex).Cells(8).Value) <> "" Then
            e.SuppressKeyPress = True
            e.Handled = True
        End If
    End Sub

    Private Sub dgtxt_SizingDetails_Set2_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles dgtxt_SizingDetails_Set2.KeyPress

        Try
            With dgv_SizingDetails_Set2
                'If .CurrentCell.ColumnIndex <> 2 And .CurrentCell.ColumnIndex <> 3 And .CurrentCell.ColumnIndex <> 4 And Trim(.Rows(.CurrentCell.RowIndex).Cells(8).Value) <> "" Then
                '    e.Handled = True
                'Else
                If .CurrentCell.ColumnIndex > 1 Then
                    If .CurrentCell.ColumnIndex = 1 Or .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 4 Or .CurrentCell.ColumnIndex = 5 Or .CurrentCell.ColumnIndex = 6 Or .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 8 Or .CurrentCell.ColumnIndex = 10 Or .CurrentCell.ColumnIndex = 11 Or .CurrentCell.ColumnIndex = 12 Or .CurrentCell.ColumnIndex = 14 Or .CurrentCell.ColumnIndex = 16 Or .CurrentCell.ColumnIndex = 18 Or .CurrentCell.ColumnIndex = 20 Or .CurrentCell.ColumnIndex = 22 Or .CurrentCell.ColumnIndex = 24 Or .CurrentCell.ColumnIndex = 26 Or .CurrentCell.ColumnIndex = 28 Or .CurrentCell.ColumnIndex = 30 Then
                        If Common_Procedures.Accept_NumericOnly(Asc(e.KeyChar)) = 0 Then e.Handled = True
                    End If
                End If
                'End If
            End With

        Catch ex As Exception
            '
        End Try

    End Sub

    Private Sub dgtxt_SizingDetails_Set3_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgtxt_SizingDetails_Set3.Enter
        dgv_SizingDetails_Set3.EditingControl.BackColor = Color.Lime
        dgv_SizingDetails_Set3.EditingControl.ForeColor = Color.Blue
        dgtxt_SizingDetails_Set3.SelectAll()
    End Sub

    Private Sub dgtxt_SizingDetails_Set3_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgtxt_SizingDetails_Set3.KeyDown
        If dgv_SizingDetails_Set3.CurrentCell.ColumnIndex <> 2 And dgv_SizingDetails_Set3.CurrentCell.ColumnIndex <> 3 And dgv_SizingDetails_Set3.CurrentCell.ColumnIndex <> 4 And dgv_SizingDetails_Set1.CurrentCell.ColumnIndex <> 30 And Trim(dgv_SizingDetails_Set3.Rows(dgv_SizingDetails_Set3.CurrentCell.RowIndex).Cells(8).Value) <> "" Then
            e.SuppressKeyPress = True
            e.Handled = True
        End If
    End Sub

    Private Sub dgtxt_SizingDetails_Set3_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles dgtxt_SizingDetails_Set3.KeyPress

        With dgv_SizingDetails_Set3
            'If .CurrentCell.ColumnIndex <> 2 And .CurrentCell.ColumnIndex <> 3 And .CurrentCell.ColumnIndex <> 4 And Trim(.Rows(.CurrentCell.RowIndex).Cells(8).Value) <> "" Then
            '    e.Handled = True
            'Else
            If .CurrentCell.ColumnIndex > 1 Then
                If .CurrentCell.ColumnIndex = 1 Or .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 4 Or .CurrentCell.ColumnIndex = 5 Or .CurrentCell.ColumnIndex = 6 Or .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 8 Or .CurrentCell.ColumnIndex = 10 Or .CurrentCell.ColumnIndex = 11 Or .CurrentCell.ColumnIndex = 12 Or .CurrentCell.ColumnIndex = 14 Or .CurrentCell.ColumnIndex = 16 Or .CurrentCell.ColumnIndex = 18 Or .CurrentCell.ColumnIndex = 20 Or .CurrentCell.ColumnIndex = 22 Or .CurrentCell.ColumnIndex = 24 Or .CurrentCell.ColumnIndex = 26 Or .CurrentCell.ColumnIndex = 28 Or .CurrentCell.ColumnIndex = 30 Then
                    If Common_Procedures.Accept_NumericOnly(Asc(e.KeyChar)) = 0 Then e.Handled = True
                End If
            End If
            'End If
        End With

    End Sub

    Private Sub dgv_WarpingDetails_Set1_EditingControlShowing(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewEditingControlShowingEventArgs) Handles dgv_WarpingDetails_Set1.EditingControlShowing
        dgtxt_WarpingDetails_Set1 = CType(dgv_WarpingDetails_Set1.EditingControl, DataGridViewTextBoxEditingControl)
    End Sub

    Private Sub dgv_WarpingDetails_Set2_EditingControlShowing(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewEditingControlShowingEventArgs) Handles dgv_WarpingDetails_Set2.EditingControlShowing
        dgtxt_WarpingDetails_Set2 = CType(dgv_WarpingDetails_Set2.EditingControl, DataGridViewTextBoxEditingControl)
    End Sub

    Private Sub dgv_WarpingDetails_Set3_EditingControlShowing(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewEditingControlShowingEventArgs) Handles dgv_WarpingDetails_Set3.EditingControlShowing
        dgtxt_WarpingDetails_Set3 = CType(dgv_WarpingDetails_Set3.EditingControl, DataGridViewTextBoxEditingControl)
    End Sub

    Private Sub dgtxt_WarpingDetails_Set1_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgtxt_WarpingDetails_Set1.Enter
        dgv_WarpingDetails_Set1.EditingControl.BackColor = Color.Lime
        dgv_WarpingDetails_Set1.EditingControl.ForeColor = Color.Blue
        dgtxt_WarpingDetails_Set1.SelectAll()
    End Sub

    Private Sub dgtxt_WarpingDetails_Set1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgtxt_WarpingDetails_Set1.KeyDown
        If Trim(txt_InvoiceCode.Text) <> "" Then
            e.SuppressKeyPress = True
            e.Handled = True
        End If
    End Sub

    Private Sub dgtxt_WarpingDetails_Set1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles dgtxt_WarpingDetails_Set1.KeyPress
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable

        Try

            With dgv_WarpingDetails_Set1
                If Trim(txt_InvoiceCode.Text) <> "" Then
                    e.Handled = True
                Else
                    If .CurrentCell.ColumnIndex = 1 Or .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 4 Or .CurrentCell.ColumnIndex = 11 Or .CurrentCell.ColumnIndex = 13 Or .CurrentCell.ColumnIndex = 15 Or .CurrentCell.ColumnIndex = 17 Or .CurrentCell.ColumnIndex = 19 Or .CurrentCell.ColumnIndex = 21 Or .CurrentCell.ColumnIndex = 23 Or .CurrentCell.ColumnIndex = 24 Then
                        If Common_Procedures.Accept_NumericOnly(Asc(e.KeyChar)) = 0 Then e.Handled = True

                    End If

                    If .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 8 Then
                        If UCase(e.KeyChar) = "D" Or UCase(e.KeyChar) = "T" Then

                            Da = New SqlClient.SqlDataAdapter("select getdate() as servertime", Con)
                            Dt1 = New DataTable
                            Da.Fill(Dt1)

                            If Dt1.Rows.Count > 0 Then
                                dgtxt_WarpingDetails_Set1.Text = Format(Convert.ToDateTime(Dt1.Rows(0).Item("servertime").ToString), "hh:mm tt").ToString
                                '.CurrentRow.Cells(.CurrentCell.ColumnIndex).Value = dgtxt_WarpingDetails_Set1.Text
                            End If
                            Dt1.Clear()

                            Dt1.Dispose()
                            Da.Dispose()

                            e.Handled = True

                            dgtxt_WarpingDetails_Set1.SelectAll()

                        ElseIf UCase(e.KeyChar) = "A" Or UCase(e.KeyChar) = "P" Then

                            If Trim(dgtxt_WarpingDetails_Set1.Text) = Trim(Val(dgtxt_WarpingDetails_Set1.Text)) Then
                                dgtxt_WarpingDetails_Set1.Text = Trim(dgtxt_WarpingDetails_Set1.Text) & ":00"
                            End If
                            If Microsoft.VisualBasic.Right(Trim(dgtxt_WarpingDetails_Set1.Text), 1) = ":" Then
                                dgtxt_WarpingDetails_Set1.Text = Trim(dgtxt_WarpingDetails_Set1.Text) & "00"
                            End If
                            dgtxt_WarpingDetails_Set1.Text = Trim(Replace(dgtxt_WarpingDetails_Set1.Text, "AM", ""))
                            dgtxt_WarpingDetails_Set1.Text = Trim(Replace(dgtxt_WarpingDetails_Set1.Text, "PM", ""))
                            If UCase(e.KeyChar) = "A" Then
                                dgtxt_WarpingDetails_Set1.Text = Microsoft.VisualBasic.Left(dgtxt_WarpingDetails_Set1.Text, 5) & " AM"
                            Else
                                dgtxt_WarpingDetails_Set1.Text = Microsoft.VisualBasic.Left(dgtxt_WarpingDetails_Set1.Text, 5) & " PM"
                            End If

                            e.Handled = True

                            SendKeys.Send("{END}")

                        ElseIf Asc(e.KeyChar) = 46 Then
                            e.KeyChar = ":"

                        Else
                            If Common_Procedures.Accept_NumericOnly(Asc(e.KeyChar)) = 0 Then e.Handled = True

                        End If

                    End If

                End If
            End With

        Catch ex As Exception
            '-----

        End Try

    End Sub

    Private Sub dgtxt_WarpingDetails_Set2_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgtxt_WarpingDetails_Set2.Enter
        dgv_WarpingDetails_Set2.EditingControl.BackColor = Color.Lime
        dgv_WarpingDetails_Set2.EditingControl.ForeColor = Color.Blue
        dgtxt_WarpingDetails_Set2.SelectAll()
    End Sub

    Private Sub dgtxt_WarpingDetails_Set2_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgtxt_WarpingDetails_Set2.KeyDown
        If Trim(txt_InvoiceCode.Text) <> "" Then
            e.SuppressKeyPress = True
            e.Handled = True
        End If
    End Sub

    Private Sub dgtxt_WarpingDetails_Set2_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles dgtxt_WarpingDetails_Set2.KeyPress
        With dgv_WarpingDetails_Set2
            If Trim(txt_InvoiceCode.Text) <> "" Then
                e.Handled = True
            Else
                If .CurrentCell.ColumnIndex = 1 Or .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 4 Or .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 8 Or .CurrentCell.ColumnIndex = 9 Or .CurrentCell.ColumnIndex = 11 Or .CurrentCell.ColumnIndex = 13 Or .CurrentCell.ColumnIndex = 15 Or .CurrentCell.ColumnIndex = 17 Or .CurrentCell.ColumnIndex = 19 Or .CurrentCell.ColumnIndex = 21 Then
                    If Common_Procedures.Accept_NumericOnly(Asc(e.KeyChar)) = 0 Then e.Handled = True

                End If
            End If
        End With

    End Sub

    Private Sub dgtxt_WarpingDetails_Set3_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgtxt_WarpingDetails_Set3.Enter
        dgv_WarpingDetails_Set3.EditingControl.BackColor = Color.Lime
        dgv_WarpingDetails_Set3.EditingControl.ForeColor = Color.Blue
        dgtxt_WarpingDetails_Set3.SelectAll()
    End Sub

    Private Sub dgtxt_WarpingDetails_Set3_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgtxt_WarpingDetails_Set3.KeyDown
        If Trim(txt_InvoiceCode.Text) <> "" Then
            e.SuppressKeyPress = True
            e.Handled = True
        End If
    End Sub

    Private Sub dgtxt_WarpingDetails_Set3_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles dgtxt_WarpingDetails_Set3.KeyPress

        With dgv_WarpingDetails_Set3
            If Trim(txt_InvoiceCode.Text) <> "" Then
                e.Handled = True
            Else
                If .CurrentCell.ColumnIndex = 1 Or .CurrentCell.ColumnIndex = 2 Or .CurrentCell.ColumnIndex = 3 Or .CurrentCell.ColumnIndex = 4 Or .CurrentCell.ColumnIndex = 7 Or .CurrentCell.ColumnIndex = 8 Or .CurrentCell.ColumnIndex = 9 Or .CurrentCell.ColumnIndex = 11 Or .CurrentCell.ColumnIndex = 13 Or .CurrentCell.ColumnIndex = 15 Or .CurrentCell.ColumnIndex = 17 Or .CurrentCell.ColumnIndex = 19 Or .CurrentCell.ColumnIndex = 21 Then
                    If Common_Procedures.Accept_NumericOnly(Asc(e.KeyChar)) = 0 Then e.Handled = True

                End If
            End If
        End With
    End Sub

    Private Sub dgv_BabyConeDetails_EditingControlShowing(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewEditingControlShowingEventArgs) Handles dgv_BabyConeDetails.EditingControlShowing
        dgtxt_BabyConeDetails = CType(dgv_BabyConeDetails.EditingControl, DataGridViewTextBoxEditingControl)
    End Sub

    Private Sub dgtxt_BabyConeDetails_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgtxt_BabyConeDetails.Enter
        dgv_BabyConeDetails.EditingControl.BackColor = Color.Lime
        dgv_BabyConeDetails.EditingControl.ForeColor = Color.Blue
        dgtxt_BabyConeDetails.SelectAll()
    End Sub

    Private Sub dgtxt_BabyConeDetails_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgtxt_BabyConeDetails.KeyDown
        If Val(txt_BabyCone_DeliveryWeight.Text) <> 0 Then
            e.SuppressKeyPress = True
            e.Handled = True
        End If
    End Sub

    Private Sub dgtxt_BabyConeDetails_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles dgtxt_BabyConeDetails.KeyPress

        If Val(txt_BabyCone_DeliveryWeight.Text) <> 0 Or Trim(txt_InvoiceCode.Text) <> "" Or Val(txt_InvoiceCode.Text) <> 0 Then
            e.Handled = True

        Else
            If Common_Procedures.Accept_NumericOnly(Asc(e.KeyChar)) = 0 Then e.Handled = True

        End If

    End Sub
    Private Sub dgv_YarnStockDetails_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgv_YarnStockDetails.LostFocus
        On Error Resume Next
        If Not IsNothing(sender.CurrentCell) Then sender.CurrentCell.Selected = False
    End Sub

    Private Sub dgv_YarnStockSummary_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgv_YarnStockSummary.LostFocus
        On Error Resume Next
        If Not IsNothing(sender.CurrentCell) Then sender.CurrentCell.Selected = False
    End Sub

    Private Sub dgv_AmountDetails_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgv_AmountDetails.LostFocus
        On Error Resume Next
        If Not IsNothing(sender.CurrentCell) Then sender.CurrentCell.Selected = False
    End Sub

    Private Sub dgtxt_WarpingDetails_Set1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgtxt_WarpingDetails_Set1.KeyUp
        dgv_WarpingDetails_Set1_KeyUp(sender, e)
    End Sub

    Private Sub dgtxt_WarpingDetails_Set2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgtxt_WarpingDetails_Set2.KeyUp
        dgv_WarpingDetails_Set2_KeyUp(sender, e)
    End Sub

    Private Sub dgtxt_WarpingDetails_Set3_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgtxt_WarpingDetails_Set3.KeyUp
        dgv_WarpingDetails_Set3_KeyUp(sender, e)
    End Sub

    Private Sub dgtxt_SizingDetails_Set1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgtxt_SizingDetails_Set1.KeyUp
        dgv_SizingDetails_Set1_KeyUp(sender, e)
    End Sub

    Private Sub dgtxt_SizingDetails_Set2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgtxt_SizingDetails_Set2.KeyUp
        dgv_SizingDetails_Set2_KeyUp(sender, e)
    End Sub

    Private Sub dgtxt_SizingDetails_Set3_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgtxt_SizingDetails_Set3.KeyUp
        dgv_SizingDetails_Set3_KeyUp(sender, e)
    End Sub

    Private Sub dgtxt_YarnTakenDetails_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgtxt_YarnTakenDetails.KeyUp
        dgv_YarnTakenDetails_KeyUp(sender, e)
    End Sub

    Private Sub dgtxt_BabyConeDetails_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgtxt_BabyConeDetails.KeyUp
        dgv_BabyConeDetails_KeyUp(sender, e)
    End Sub

    Private Sub dgtxt_ChemicalDetails_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgtxt_ChemicalDetails.KeyUp
        dgv_ChemicalDetails_KeyUp(sender, e)
    End Sub

    Private Sub dgv_EmptyConeStockDetails_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgv_EmptyConeStockDetails.LostFocus
        On Error Resume Next
        If Not IsNothing(sender.CurrentCell) Then sender.CurrentCell.Selected = False
    End Sub

    Private Sub dgv_EmptyBeamStockDetails_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgv_EmptyBeamStockDetails.LostFocus
        On Error Resume Next
        If Not IsNothing(sender.CurrentCell) Then sender.CurrentCell.Selected = False
    End Sub

    Private Sub dgv_EmptyBagStockDetails_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgv_EmptyBagStockDetails.LostFocus
        On Error Resume Next
        If Not IsNothing(sender.CurrentCell) Then sender.CurrentCell.Selected = False
    End Sub

    Private Sub chk_SocietySet_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chk_SocietySet.CheckedChanged
        BeamCount_Calculation()
    End Sub

    Private Sub chk_SocietySet_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles chk_SocietySet.KeyDown
        If e.KeyCode = 38 Then SendKeys.Send("+{TAB}")
        If e.KeyCode = 40 Then btn_save.Focus() ' SendKeys.Send("{TAB}")
    End Sub

    Private Sub chk_SocietySet_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles chk_SocietySet.KeyPress
        If Asc(e.KeyChar) = 13 Then
            If MessageBox.Show("Do you want to save ?", "FOR SAVING...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) = DialogResult.Yes Then
                save_record()
            Else
                If cbo_Ledger.Enabled And cbo_Ledger.Visible Then cbo_Ledger.Focus()
            End If
        End If
    End Sub

    Private Sub txt_RwExcSht_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txt_RwExcSht.KeyDown
        If e.KeyValue = 38 Or (e.Control = True And e.KeyValue = 38) Then
            If cbo_Rw_MillName.Enabled Then
                cbo_Rw_MillName.Focus()
            Else
                chk_RewindingStatus.Focus()
            End If
        End If
        If e.KeyValue = 40 Or (e.Control = True And e.KeyValue = 40) Then
            txt_ExcessShort_Adjustment.Focus()
        End If
    End Sub

    Private Sub txt_RwExcSht_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txt_RwExcSht.KeyPress
        If Asc(e.KeyChar) = 13 Then
            tab_Main.SelectTab(4)
        End If
    End Sub

    Private Sub btn_save_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_save.Click
        save_record()
    End Sub

    Private Sub btn_Print_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_Print.Click
        Common_Procedures.Print_OR_Preview_Status = 1
        Print_PDF_Status = False
        print_record()
    End Sub

    Private Sub btn_PDF_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_PDF.Click
        Common_Procedures.Print_OR_Preview_Status = 1
        Print_PDF_Status = True
        'printing_statement()
        print_record()
        Print_PDF_Status = False
    End Sub

    Private Sub btn_SMS_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_SMS.Click
        'Dim request As HttpWebRequest
        'Dim response As HttpWebResponse = Nothing
        'Dim url As String
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim NewCode As String
        Dim i As Integer = 0
        Dim smstxt As String = ""
        Dim PhNo As String = ""
        Dim Led_IdNo As Integer = 0

        Try

            Led_IdNo = Common_Procedures.Ledger_AlaisNameToIdNo(Con, cbo_Ledger.Text)
            'If Led_IdNo  = 0 Then Exit Sub

            PhNo = Common_Procedures.get_FieldValue(Con, "Ledger_Head", "Ledger_MobileNo", "(Ledger_IdNo = " & Str(Val(Led_IdNo)) & ")")

            If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1102" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1144" Then
                smstxt = "SPECIFICATION " & vbCrLf
            End If

            smstxt = smstxt & "SETNO : " & Trim(lbl_SetNo.Tag) & vbCrLf & "DATE-" & Trim(dtp_Date.Text)

            If Common_Procedures.settings.CustomerCode = "1031" Then
                smstxt = smstxt & vbCrLf & "Mill Name : " & Trim(cbo_MillName.Text)
            End If


            smstxt = smstxt & vbCrLf & "Avg.Count : " & Trim(Val(lbl_BeamCount.Text))


            If Common_Procedures.settings.CustomerCode = "1031" Then
                smstxt = smstxt & vbCrLf & "Warp KG : " & Trim(Val(lbl_Total_Warping_NetWeight.Text))
            Else
                smstxt = smstxt & vbCrLf & "Consumed : " & Trim(Val(lbl_Total_Warping_NetWeight.Text))
            End If


            If Common_Procedures.settings.CustomerCode <> "1031" Then
                If Val(lbl_ExcessShort.Text) < 0 Then
                    smstxt = smstxt & vbCrLf & "Short : " & Trim(Math.Abs(Val(lbl_ExcessShort.Text)))
                Else
                    smstxt = smstxt & vbCrLf & "Excess : " & Trim(Val(lbl_ExcessShort.Text))
                End If
            End If

            NewCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

            da2 = New SqlClient.SqlDataAdapter("select sum(a.Bags) as TotalBags from Specification_YarnTaken_Details a  where a.Yarn_Type = 'MILL' and  a.Set_Code = '" & Trim(NewCode) & "'", Con)
            dt2 = New DataTable
            da2.Fill(dt2)

            If dt2.Rows.Count > 0 Then
                For i = 0 To dt2.Rows.Count - 1
                    If Val(dt2.Rows(i).Item("TotalBags").ToString) <> 0 Then
                        smstxt = smstxt & vbCrLf & "BAGS : " & Trim((cbo_MillName.Text)) & " - " & Trim(Val(dt2.Rows(i).Item("TotalBags").ToString))
                    End If
                Next i
            End If
            dt2.Clear()

            smstxt = smstxt & vbCrLf & "Siz Meters : " & Trim(Val(lbl_Total_Sizing_Meters.Text))

            da2 = New SqlClient.SqlDataAdapter("select sum(a.Net_Amount) as TotalAmount from Invoice_Head a  where a.Set_Code = '" & Trim(NewCode) & "'", Con)
            dt2 = New DataTable
            da2.Fill(dt2)

            If dt2.Rows.Count > 0 Then
                For i = 0 To dt2.Rows.Count - 1
                    If Val(dt2.Rows(i).Item("TotalAmount").ToString) <> 0 Then
                        smstxt = smstxt & vbCrLf & "Inv.Amount : " & Trim(Val(dt2.Rows(i).Item("TotalAmount").ToString))
                    End If

                Next i
            End If
            dt2.Clear()

            smstxt = smstxt & vbCrLf & "No.of.Pavu : " & Trim(Val(lbl_Tot_Sizing_Beams.Text))

            smstxt = smstxt & vbCrLf & " Thanks! " & vbCrLf
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1102" Then
                smstxt = smstxt & "GKT SIZING "
            Else '
                smstxt = smstxt & Common_Procedures.Company_IdNoToName(Con, Val(lbl_Company.Tag))
            End If

            If Common_Procedures.settings.CustomerCode = "1102" Then
                Sms_Entry.vSmsPhoneNo = Trim(PhNo) & "," & "9361188135"
            Else
                Sms_Entry.vSmsPhoneNo = Trim(PhNo)
            End If
            Sms_Entry.vSmsMessage = Trim(smstxt)


            Dim f1 As New Sms_Entry


            f1.MdiParent = MDIParent1
            f1.Show()

            ' ''url = "http://sms.shamsoft.in/app/smsapi/index.php?key=355C7A0B5595B2&routeid=73&type=text&contacts=" & Trim(PhNo) & "&senderid=WEBSMS&msg=" & Trim(smstxt)

            ' ''--THIS IS Working (jenilla)
            ''url = "http://103.16.101.52:8080/bulksms/bulksms?username=nila-jenial&password=nila123&type=0&dlr=1&destination=918508403222&source=JENIAL&message=" & Trim(smstxt)

            ' ''THIS IS OK
            ' ''url = "http://sms.shamsoft.in/app/smsapi/index.php?key=355C7A0B5595B2&routeid=73&type=text&contacts=8508403222&senderid=WEBSMS&msg=Hello+People%2C+have+a+great+day"

            ' ''url = "http://sms.shamsoft.in/app/smsapi/index.php?key=355C7A0B5595B2&routeid=14&type=text&contacts=97656XXXXX,98012XXXXX&senderid=DEMO&msg=Hello+People%2C+have+a+great+day"

            ' ''url = "http://103.16.101.52:8080/bulksms/bulksms?username=nila-jenial&password=nila123&type=0&dlr=1&destination=918508403222&source=JENIAL&message=testmsg"

            ' ''url = "http://103.16.101.52:8080/bulksms/bulksms?username=nila-jenial&password=nila123&type=0&dlr=1&destination=918508403222&source=JENIAL&message=testmsg"

            ''request = DirectCast(WebRequest.Create(url), HttpWebRequest)

            ''response = DirectCast(request.GetResponse(), HttpWebResponse)

            ''If Trim(UCase(response.StatusDescription)) = "OK" Then
            ''    MessageBox.Show("Sucessfully Sent...", "FOR SENDING SMS...", MessageBoxButtons.OKCancel, MessageBoxIcon.Information)
            ''    'MessageBox.Show("Response: " & response.StatusDescription)
            ''Else
            ''    MessageBox.Show("Failed to sent SMS...", "FOR SENDING SMS...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            ''End If

            ' ''WebBrowser1.Navigate("http://103.16.101.52:8080/bulksms/bulksms?username=nila-jenial&password=nila123&type=0&dlr=1&destination=918508403222&source=JENIAL&message=testmsg")
            ' ''MsgBox("sms send")

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT SEND SMS...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub btn_EMail_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_EMail.Click
        Dim Led_IdNo As Integer
        Dim MailTxt As String

        Try


            Led_IdNo = Common_Procedures.Ledger_AlaisNameToIdNo(Con, cbo_Ledger.Text)
            'If Led_IdNo  = 0 Then Exit Sub


            MailTxt = "SIZING SPECIFICATION " & vbCrLf & vbCrLf

            MailTxt = MailTxt & "SET.NO:" & Trim(lbl_SetNo.Tag) & vbCrLf & "SET.DATE:" & Trim(dtp_Date.Text) & vbCrLf

            'For i = 0 To dgv_Details.Rows.Count - 1

            '    If Val(dgv_Details.Rows(i).Cells(5).Value) <> 0 Then
            '        MailTxt = Trim(MailTxt) & IIf(Trim(MailTxt) <> "", vbCrLf, "") & Trim(dgv_Details.Rows(i).Cells(3).Value) & "       -          " & Val(dgv_Details.Rows(i).Cells(5).Value) & " " & Trim(dgv_Details.Rows(i).Cells(6).Value)
            '    End If

            'Next

            EMAIL_Entry.vMailID = Common_Procedures.get_FieldValue(Con, "Ledger_Head", "Ledger_Mail", "(Ledger_IdNo = " & Str(Val(Led_IdNo)) & ")")
            EMAIL_Entry.vSubJect = "Specification for SetNo : " & Trim(lbl_SetNo.Tag)
            EMAIL_Entry.vMessage = Trim(MailTxt)

            Dim f1 As New EMAIL_Entry
            f1.MdiParent = MDIParent1
            f1.Show()

            ' ''MailTxt = "SIZING SPECIFICATION " & vbCrLf & vbCrLf

            ' ''MailTxt = MailTxt & "SET.NO:" & Trim(lbl_SetNo.Tag) & vbCrLf & "SET.DATE:" & Trim(dtp_Date.Text) & vbCrLf

            '' ''For i = 0 To dgv_Details.Rows.Count - 1

            '' ''    If Val(dgv_Details.Rows(i).Cells(5).Value) <> 0 Then
            '' ''        MailTxt = Trim(MailTxt) & IIf(Trim(MailTxt) <> "", vbCrLf, "") & Trim(dgv_Details.Rows(i).Cells(3).Value) & "       -          " & Val(dgv_Details.Rows(i).Cells(5).Value) & " " & Trim(dgv_Details.Rows(i).Cells(6).Value)
            '' ''    End If

            '' ''Next


            ' ''Dim SmtpServer As New SmtpClient()
            ' ''Dim mail As New MailMessage()
            ' ''Dim MailTxt As String

            ' ''MailTxt = "SIZING SPECIFICATION " & vbCrLf & vbCrLf

            ' ''MailTxt = MailTxt & "SET.NO:" & Trim(lbl_SetNo.Tag) & vbCrLf & "SET.DATE:" & Trim(dtp_Date.Text) & vbCrLf

            '' ''For i = 0 To dgv_Details.Rows.Count - 1

            '' ''    If Val(dgv_Details.Rows(i).Cells(5).Value) <> 0 Then
            '' ''        MailTxt = Trim(MailTxt) & IIf(Trim(MailTxt) <> "", vbCrLf, "") & Trim(dgv_Details.Rows(i).Cells(3).Value) & "       -          " & Val(dgv_Details.Rows(i).Cells(5).Value) & " " & Trim(dgv_Details.Rows(i).Cells(6).Value)
            '' ''    End If

            '' ''Next

            ' ''SmtpServer.Port = 587
            ' ''SmtpServer.Host = "smtp.gmail.com"
            ' ''SmtpServer.UseDefaultCredentials = False
            ' ''SmtpServer.EnableSsl = True

            ' ''SmtpServer.Credentials = New Net.NetworkCredential("tsoft.tirupur@gmail.com", "GOLD@tn39av7417")
            '' ''SmtpServer.Credentials = New Net.NetworkCredential("varalakshmithanges@gmail.com", "GOLD@tn39av7417")
            '' ''SmtpServer.Credentials = New Net.NetworkCredential("varalakshmithanges@gmail.com", "gold&VL@19=rj")
            '' ''SmtpServer.Credentials = New Net.NetworkCredential("t.thanges@gmail.com", "gold@tn39av7417")
            '' ''SmtpServer.Credentials = New Net.NetworkCredential("t.thanges@gmail.com", "cikysrpmkzbwliuc")
            '' ''SmtpServer.Credentials = New Net.NetworkCredential("varalakshmithanges@gmail.com", "thanges19")
            '' ''SmtpServer.Credentials = New Net.NetworkCredential("tsoft.tirupur@gmail.com", "8508403221")
            '' ''SmtpServer.Credentials = New Net.NetworkCredential("t.thanges@gmail.com", "rj17052012")

            ' ''mail = New MailMessage()
            '' ''mail.From = New MailAddress("varalakshmithanges@gmail.com")
            ' ''mail.From = New MailAddress("tsoft.tirupur@gmail.com")
            '' ''mail.From = New MailAddress("t.thanges@gmail.com")
            '' ''srirajatex@gmail.com
            ' ''mail.To.Add("thanges@rediffmail.com")
            ' ''mail.Subject = "Sizing Specification"
            ' ''mail.Body = Trim(MailTxt)

            ' ''Dim attachment As System.Net.Mail.Attachment
            ' ''attachment = New System.Net.Mail.Attachment("your attachment file")
            ' ''mail.Attachments.Add(attachment)

            ' ''SmtpServer.Send(mail)

            ' ''MessageBox.Show("Mail send Sucessfully", "FOR MAILING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Information)

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT SEND MAIL...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub btn_close_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_close.Click
        On Error Resume Next
        Me.Close()
    End Sub

    Public Sub print_record() Implements Interface_MDIActions.print_record

        If Common_Procedures.UserRight_NEWCheck(Common_Procedures.UserRightsCheckFor.PrintEntry, Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_STATEMENT, New_Entry) = False Then Exit Sub

        If Common_Procedures.settings.StatementPrint_PrintingOptionSelection = 1 Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1036" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1102" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1163" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1106" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1078" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1087" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1112" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1042" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1133" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1144" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1165" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1284" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1288" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1310" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1354" Then

            If Common_Procedures.settings.StatementPrint_BabyConeDetails = 1 Then
                chk_BabyCnDet.Checked = True
            Else
                chk_BabyCnDet.Checked = False
            End If
            If Common_Procedures.settings.StatementPrint_EmptyBagStockDetails = 1 Then
                chk_EmtyGunDet.Checked = True
            Else
                chk_EmtyGunDet.Checked = False
            End If
            If Common_Procedures.settings.StatementPrint_EmptyBagStockSimple = 1 Then
                chk_EmtyGunSmp.Checked = True
            Else
                chk_EmtyGunSmp.Checked = False
            End If
            If Common_Procedures.settings.StatementPrint_YarnStockSummary = 1 Then
                chk_YrnStkSum.Checked = True
            Else
                chk_YrnStkSum.Checked = False
            End If
            If Common_Procedures.settings.StatementPrint_YarnTakenDetails = 1 Then
                chk_YrnTakDet.Checked = True
            Else
                chk_YrnTakDet.Checked = False
            End If
            If Common_Procedures.settings.StatementPrint_Yarn_Other_Count_Particulars = 1 Then
                chk_YrnStkOtherCountParticulars.Checked = True
            Else
                chk_YrnStkOtherCountParticulars.Checked = False
            End If
            If Common_Procedures.settings.StatementPrint_AmountDetails = 1 Then
                chk_AmtDet.Checked = True
            Else
                chk_AmtDet.Checked = False
            End If

            If Common_Procedures.settings.StatementPrint_PickUp_Percentage = 1 Then
                chk_Pickup.Checked = True
            Else
                chk_Pickup.Checked = False
            End If

            If Common_Procedures.settings.StatementPrint_Elongation_Percentage = 1 Then
                chk_Elongation.Checked = True
            Else
                chk_Elongation.Checked = False
            End If

            pnl_StatementPrint.Visible = True
            pnl_Back.Enabled = False

        Else

            StmtPrintFrmt = Trim(UCase(Common_Procedures.settings.StatementPrint_Format))
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1034" Then '---- Asia Sizing (Palladam)
                pnl_Print.Visible = True
                pnl_Back.Enabled = False
                If btn_Print_Preprint.Enabled And btn_Print_Preprint.Visible Then
                    btn_Print_Preprint.Focus()
                End If

            ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1282" Then '---- Asia Sizing (Palladam)
                pnl_Print.Visible = True
                pnl_Back.Enabled = False
                If btn_Print_Preprint.Enabled And btn_Print_Preprint.Visible Then
                    btn_Print_Preprint.Focus()
                End If

            ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then
                pnl_Print.Visible = True
                pnl_Back.Enabled = False
                If btn_A4.Enabled And btn_A4.Visible Then
                    btn_A4.Focus()
                End If

            Else
                printing_statement()

            End If

        End If

    End Sub

    Private Sub btn_ClseStmtPrt_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btn_ClseStmtPrt.Click
        btn_StatmtCancel_Click(sender, e)
    End Sub

    Private Sub btn_StmtPrntOk_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btn_StmtPrntOk.Click
        pnl_StatementPrint.Visible = False
        pnl_Back.Enabled = True

        If chk_BabyCnDet.Checked = True Then
            Common_Procedures.settings.StatementPrint_BabyConeDetails = 1
        Else
            Common_Procedures.settings.StatementPrint_BabyConeDetails = 0
        End If

        If chk_EmtyGunDet.Checked = True Then
            Common_Procedures.settings.StatementPrint_EmptyBagStockDetails = 1
        Else
            Common_Procedures.settings.StatementPrint_EmptyBagStockDetails = 0
        End If
        If chk_EmtyGunSmp.Checked = True Then
            Common_Procedures.settings.StatementPrint_EmptyBagStockSimple = 1
        Else
            Common_Procedures.settings.StatementPrint_EmptyBagStockSimple = 0
        End If
        If chk_YrnStkSum.Checked = True Then
            Common_Procedures.settings.StatementPrint_YarnStockSummary = 1
        Else
            Common_Procedures.settings.StatementPrint_YarnStockSummary = 0
        End If
        If chk_YrnTakDet.Checked = True Then
            Common_Procedures.settings.StatementPrint_YarnTakenDetails = 1
        Else
            Common_Procedures.settings.StatementPrint_YarnTakenDetails = 0
        End If
        If chk_YrnStkOtherCountParticulars.Checked = True Then
            Common_Procedures.settings.StatementPrint_Yarn_Other_Count_Particulars = 1
        Else
            Common_Procedures.settings.StatementPrint_Yarn_Other_Count_Particulars = 0
        End If
        If chk_AmtDet.Checked = True Then
            Common_Procedures.settings.StatementPrint_AmountDetails = 1
        Else
            Common_Procedures.settings.StatementPrint_AmountDetails = 0
        End If

        If chk_Pickup.Checked = True Then
            Common_Procedures.settings.StatementPrint_PickUp_Percentage = 1
        Else
            Common_Procedures.settings.StatementPrint_PickUp_Percentage = 0
        End If

        If chk_Elongation.Checked = True Then
            Common_Procedures.settings.StatementPrint_Elongation_Percentage = 1
        Else
            Common_Procedures.settings.StatementPrint_Elongation_Percentage = 0
        End If

        StmtPrintFrmt = Trim(UCase(Common_Procedures.settings.StatementPrint_Format))
        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1034" Then '---- Asia Sizing (Palladam)
            pnl_Print.Visible = True
            pnl_Back.Enabled = False
            If btn_Print_Preprint.Enabled And btn_Print_Preprint.Visible Then
                btn_Print_Preprint.Focus()
            End If

        Else
            printing_statement()

        End If

    End Sub

    Private Sub btn_StatmtCancel_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btn_StatmtCancel.Click
        pnl_StatementPrint.Visible = False
        pnl_Back.Enabled = True
    End Sub

    Private Sub printing_statement()
        Dim da1 As New SqlClient.SqlDataAdapter
        Dim dt1 As New DataTable
        Dim NewCode As String
        Dim ps As Printing.PaperSize
        Dim Def_PrntrNm As String = ""
        Dim PpSzSTS As Boolean = False

        NewCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

        Try

            da1 = New SqlClient.SqlDataAdapter("select a.*, b.*, c.* from Specification_Head a INNER JOIN Company_Head b ON a.Company_IdNo = b.Company_IdNo INNER JOIN Ledger_Head c ON a.Ledger_IdNo = c.Ledger_IdNo where a.set_code = '" & Trim(NewCode) & "'", Con)
            da1.Fill(dt1)

            If dt1.Rows.Count <= 0 Then

                MessageBox.Show("This is New Entry", "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                Exit Sub

            End If

            dt1.Dispose()
            da1.Dispose()

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            Exit Sub

        End Try


        StmtPrint_InvDetails_Status = False
        If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1036" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1220" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1263" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1354" Then ' -----------KALAMAGAL & MEENASHI SIZING
            If Trim(UCase(StmtPrintFrmt)) = "FORMAT-5" Or Trim(UCase(Common_Procedures.settings.StatementPrint_Format)) = "FORMAT-5_1097" Or Trim(UCase(StmtPrintFrmt)) = "FORMAT-6" Or Trim(UCase(StmtPrintFrmt)) = "FORMAT-7" Or Trim(UCase(StmtPrintFrmt)) = "FORMAT-12" Then

                Dim mymsgbox As New Tsoft_MessageBox("Do you want to print Sizing Specification With Invoice", "WITH INVOICE,WITHOUT INVOICE,CANCEL", "FOR SPECIFICATION PRINTING......", "IF With Invoice is selected, Specification will be printed along with Invoice Details", MesssageBoxIcons.Questions, 2)
                mymsgbox.ShowDialog()

                If mymsgbox.MessageBoxResult = 1 Then
                    StmtPrint_InvDetails_Status = True

                ElseIf mymsgbox.MessageBoxResult = 2 Then
                    StmtPrint_InvDetails_Status = False

                Else

                    Exit Sub

                End If

                'Select Case MessageBox.Show("Do you want to print Specification With Invoice?", "FOR SPECIFICATION PRINTING...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2)
                '    Case Windows.Forms.DialogResult.Yes
                '        StmtPrint_InvDetails_Status = True
                '    Case Windows.Forms.DialogResult.No
                '        StmtPrint_InvDetails_Status = False
                '    Case Else
                '        Exit Sub
                'End Select

            End If
        End If

        prn_InpOpts = ""
        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1220" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1263" Then ' -----------MEENASHI SIZING
            prn_InpOpts = InputBox("Select    -   0. None" & Chr(13) & "                  1. Original" & Chr(13) & "                  2. Duplicate" & Chr(13) & "                  3. Triplicate" & Chr(13) & "                  4. Extra Copy" & Space(10) & "                  5. All", "FOR STATEMENT PRINTING...", "12")
            prn_InpOpts = Replace(Trim(prn_InpOpts), "5", "1234")
        End If


        If Trim(UCase(StmtPrintFrmt)) = "FORMAT-11" Or Trim(UCase(StmtPrintFrmt)) = "FORMAT-10" Or Trim(UCase(StmtPrintFrmt)) = "FORMAT-10_1354" Or Trim(UCase(StmtPrintFrmt)) = "FORMAT-2" Or Trim(UCase(StmtPrintFrmt)) = "FORMAT-5" Or Trim(UCase(Common_Procedures.settings.StatementPrint_Format)) = "FORMAT-5_1097" Or Trim(UCase(StmtPrintFrmt)) = "FORMAT-6" Or Trim(UCase(StmtPrintFrmt)) = "FORMAT-7" Then
            For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
                If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.A4 Then
                    ps = PrintDocument1.PrinterSettings.PaperSizes(i)
                    PrintDocument1.DefaultPageSettings.PaperSize = ps
                    Exit For
                End If
            Next

        ElseIf Trim(UCase(StmtPrintFrmt)) = "FORMAT-8" Then
            Dim pkCustomSize1 As New System.Drawing.Printing.PaperSize("PAPER 14.5X8", 1450, 800)
            PrintDocument1.PrinterSettings.DefaultPageSettings.PaperSize = pkCustomSize1
            PrintDocument1.DefaultPageSettings.PaperSize = pkCustomSize1


        ElseIf Trim(UCase(StmtPrintFrmt)) = "FORMAT-9" Or Trim(UCase(StmtPrintFrmt)) = "FORMAT-12" Then
            For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
                If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.GermanStandardFanfold Then
                    ps = PrintDocument1.PrinterSettings.PaperSizes(i)
                    PrintDocument1.PrinterSettings.DefaultPageSettings.PaperSize = ps
                    PrintDocument1.DefaultPageSettings.PaperSize = ps
                    PpSzSTS = True
                    Exit For
                End If
            Next

            If PpSzSTS = False Then
                Dim pkCustomSize1 As New System.Drawing.Printing.PaperSize("PAPER 9X12", 900, 1200)
                PrintDocument1.PrinterSettings.DefaultPageSettings.PaperSize = pkCustomSize1
                PrintDocument1.DefaultPageSettings.PaperSize = pkCustomSize1

            End If

        Else

            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1106" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1284" Then '---- Vijayakala Sizing (Sonamur)
                For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
                    If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.A4 Then
                        ps = PrintDocument1.PrinterSettings.PaperSizes(i)
                        PrintDocument1.DefaultPageSettings.PaperSize = ps
                        Exit For
                    End If
                Next
            ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then '---- wintrack
                For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
                    If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.A4 Then
                        ps = PrintDocument1.PrinterSettings.PaperSizes(i)
                        PrintDocument1.DefaultPageSettings.PaperSize = ps
                        Exit For
                    End If
                Next
            Else
                Dim pkCustomSize1 As New System.Drawing.Printing.PaperSize("PAPER 9X12", 900, 1200)
                PrintDocument1.PrinterSettings.DefaultPageSettings.PaperSize = pkCustomSize1
                PrintDocument1.DefaultPageSettings.PaperSize = pkCustomSize1

            End If


        End If

        If Val(Common_Procedures.Print_OR_Preview_Status) = 1 Then

            Try

                If Print_PDF_Status = True Then

                    ''create AcroPDF object
                    'Dim pdf As New AcroPDFLib.AcroPDF()
                    ''set source PDF file
                    'pdf.src = "c:\input.pdf"
                    ''print all pages
                    'pdf.printAll()

                    'Dim pdf As New AcroPDFLibAcroPDF()


                    'Dim FilePath As String = "c:\Stmt.pdf"
                    ''DocumentToSave = PrintDocument1
                    'Dim PrintController As New AcrobatAccessLib.
                    'Dim PrintController As New Aspose.Pdf.Generator.PrintController
                    'PrintController.FileName = FilePath
                    'PrintDocument1.PrintController = PrintController
                    'PrintDocument1.Print()


                    ' ''--Cute PDF
                    'PrintDocument1.DocumentName = "Statement"
                    'PrintDocument1.PrinterSettings.PrinterName = "CutePDF Writer"
                    'PrintDocument1.PrinterSettings.PrintFileName = "c:\Statement.pdf"
                    'PrintDocument1.Print()

                    '--for dopdf
                    'PrintDocument1.DocumentName = "Statement"
                    'PrintDocument1.PrinterSettings.PrinterName = "doPDF v7"
                    'PrintDocument1.DefaultPageSettings.PrinterSettings.PrintToFile = True
                    'PrintDocument1.DefaultPageSettings.PrinterSettings.PrintFileName = "c:\Stmt.pdf"
                    ''PrintDocument1.DefaultPageSettings.PrinterSettings.PrintFileName = "c:\Statement_" & Trim(lbl_SetNo.Tag) & ".pdf"
                    'PrintDocument1.PrinterSettings.PrintToFile = True
                    'PrintDocument1.PrinterSettings.PrintFileName = "c:\Stmt.pdf"
                    ''PrintDocument1.PrinterSettings.PrintFileName = "c:\Statement_" & Trim(lbl_SetNo.Tag) & ".pdf"

                    ' ''PrintDocument1.PrintController = StandardPrintController()
                    'PrintDocument1.Print()

                    '--This is actual & correct 
                    Def_PrntrNm = PrintDocument1.PrinterSettings.PrinterName
                    PrintDocument1.DocumentName = "Statement"
                    PrintDocument1.PrinterSettings.PrinterName = "doPDF v7"
                    PrintDocument1.PrinterSettings.PrintFileName = "c:\Statement.pdf"
                    PrintDocument1.Print()

                    PrintDocument1.PrinterSettings.PrinterName = Trim(Def_PrntrNm)

                Else

                    If Val(Common_Procedures.settings.Printing_Show_PrintDialogue) = 1 Then
                        PrintDocument1.PrinterSettings.FromPage = 1
                        PrintDocument1.PrinterSettings.ToPage = 1

                        PrintDialog1.PrinterSettings = PrintDocument1.PrinterSettings
                        PrintDialog1.AllowSomePages = True
                        PrintDialog1.AllowSelection = True
                        PrintDialog1.Document = PrintDocument1
                        If PrintDialog1.ShowDialog() = Windows.Forms.DialogResult.OK Then
                            PrintDocument1.PrinterSettings = PrintDialog1.PrinterSettings

                            PrintDocument1.DefaultPageSettings.PrinterSettings.PrintRange = PrintDialog1.PrinterSettings.PrintRange

                            'StmtPrint_InvDetails_Status = False
                            'If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1036" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1220" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1263" Then ' -----------KALAMAGAL & MEENASHI SIZING
                            '    If Trim(UCase(StmtPrintFrmt)) = "FORMAT-5" Or Trim(UCase(Common_Procedures.settings.StatementPrint_Format)) = "FORMAT-5_1097" Or Trim(UCase(StmtPrintFrmt)) = "FORMAT-6" Or Trim(UCase(StmtPrintFrmt)) = "FORMAT-12" Then
                            '        Select Case MessageBox.Show("Do you want to print Specification With Invoice?", "FOR SPECIFICATION PRINTING...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2)
                            '            Case Windows.Forms.DialogResult.Yes
                            '                StmtPrint_InvDetails_Status = True
                            '            Case Windows.Forms.DialogResult.No
                            '                StmtPrint_InvDetails_Status = False
                            '            Case Else
                            '                Exit Sub
                            '        End Select
                            '    End If
                            'End If


                            If Trim(UCase(StmtPrintFrmt)) = "FORMAT-9" Or Trim(UCase(StmtPrintFrmt)) = "FORMAT-2" Or Trim(UCase(StmtPrintFrmt)) = "FORMAT-5" Or Trim(UCase(Common_Procedures.settings.StatementPrint_Format)) = "FORMAT-5_1097" Or Trim(UCase(StmtPrintFrmt)) = "FORMAT-6" Or Trim(UCase(StmtPrintFrmt)) = "FORMAT-7" Then
                                For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
                                    If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.A4 Then
                                        ps = PrintDocument1.PrinterSettings.PaperSizes(i)
                                        PrintDocument1.DefaultPageSettings.PaperSize = ps
                                        Exit For
                                    End If
                                Next

                            ElseIf Trim(UCase(StmtPrintFrmt)) = "FORMAT-8" Then
                                Dim pkCustomSize1 As New System.Drawing.Printing.PaperSize("PAPER 14.5X8", 1450, 800)
                                PrintDocument1.PrinterSettings.DefaultPageSettings.PaperSize = pkCustomSize1
                                PrintDocument1.DefaultPageSettings.PaperSize = pkCustomSize1


                            ElseIf Trim(UCase(StmtPrintFrmt)) = "FORMAT-9" Or Trim(UCase(StmtPrintFrmt)) = "FORMAT-12" Then
                                For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
                                    If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.GermanStandardFanfold Then
                                        ps = PrintDocument1.PrinterSettings.PaperSizes(i)
                                        PrintDocument1.PrinterSettings.DefaultPageSettings.PaperSize = ps
                                        PrintDocument1.DefaultPageSettings.PaperSize = ps
                                        PpSzSTS = True
                                        Exit For
                                    End If
                                Next

                                If PpSzSTS = False Then
                                    Dim pkCustomSize1 As New System.Drawing.Printing.PaperSize("PAPER 9X12", 900, 1200)
                                    PrintDocument1.PrinterSettings.DefaultPageSettings.PaperSize = pkCustomSize1
                                    PrintDocument1.DefaultPageSettings.PaperSize = pkCustomSize1

                                End If

                            Else

                                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1106" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1284" Then '---- Vijayakala Sizing (Sonamur)
                                    For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
                                        If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.A4 Then
                                            ps = PrintDocument1.PrinterSettings.PaperSizes(i)
                                            PrintDocument1.DefaultPageSettings.PaperSize = ps
                                            Exit For
                                        End If
                                    Next

                                Else
                                    Dim pkCustomSize1 As New System.Drawing.Printing.PaperSize("PAPER 9X12", 900, 1200)
                                    PrintDocument1.PrinterSettings.DefaultPageSettings.PaperSize = pkCustomSize1
                                    PrintDocument1.DefaultPageSettings.PaperSize = pkCustomSize1

                                End If

                            End If

                            PrintDocument1.Print()

                        End If

                    Else

                        PrintDocument1.Print()

                    End If

                End If

            Catch ex As Exception
                MessageBox.Show("The printing operation failed" & vbCrLf & ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

            End Try

        Else

            Try

                Dim ppd As New PrintPreviewDialog


                ppd.Document = PrintDocument1

                ppd.WindowState = FormWindowState.Maximized
                ppd.StartPosition = FormStartPosition.CenterScreen

                AddHandler ppd.Shown, AddressOf PrintPreview_Shown
                ppd.ShowDialog()


            Catch ex As Exception
                MsgBox("The printing operation failed" & vbCrLf & ex.Message, MsgBoxStyle.Critical, "DOES NOT SHOW PRINT PREVIEW...")

            End Try

        End If

        Print_PDF_Status = False

    End Sub

    Private Sub PrintDocument1_BeginPrint(ByVal sender As Object, ByVal e As System.Drawing.Printing.PrintEventArgs) Handles PrintDocument1.BeginPrint
        Dim da1 As New SqlClient.SqlDataAdapter
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim NewCode As String

        TtSizGrsWgt = 0 : TtSizTrWgt = 0 : TtSizNetWgt = 0
        TtSizPcs = 0 : TtSizMtrs = 0 : TtSizBms = 0
        SlNo = 0
        prn_Pgno = 0

        NewCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

        prn_HdDt = New DataTable
        prn_DetDt = New DataTable
        prn_DetIndx = 0
        prn_DetSNo = 0
        prn_PageNo = 0
        prn_Count = 0

        Prn_YrnStkSumm_2ndPage_STS = False
        Prn_YrnStkSumm_StartIndx = 0
        Prn_SizingDetails_2ndPage_STS = False
        Prn_SizingDetails_StartIndx = 0
        Prn_YrnTknDet_2ndPage_STS = False
        Prn_YrnTknDet_StartIndx = 0
        Prn_SizInvoice_2ndPage_STS = False
        Prn_SizInvoice_StartIndx = 0

        Prn_TtSizBms = 0
        Prn_TtSizGrsWgt = 0 : Prn_TtSizTrWgt = 0 : Prn_TtSizNetWgt = 0
        Prn_TtSizPcs = 0 : Prn_TtSizMtrs = 0
        prn_SizSlNo = 0

        Prn_TtYSBgs = 0 : Prn_TtYSCns = 0 : Prn_TtYSWgt = 0 : Prn_TtEmpBms = 0

        Try

            da1 = New SqlClient.SqlDataAdapter("select a.*, b.*, c.*, d.count_name, d.Count_Gst_Perc, e.mill_name, f.Beam_Width_Name,ti.Invoice_No,ti.Invoice_Date,ti.set_Code, ti.Sizing_Text1, ti.Sizing_Weight1, Sizing_Rate1, ti.sizing_Amount1, ti.Sizing_Text2, ti.Sizing_Weight2, ti.Sizing_Rate2, ti.Sizing_Amount2, ti.Sizing_Text3, ti.Sizing_Weight3,ti.Sizing_Rate3, ti.Sizing_Amount3,ti.SampleSet_Text,ti.SampleSet_Amount,ti.VanRent_Text,ti.VanRent_Amount, ti.Discount_Text,ti.Discount_Type,ti.Discount_Percentage, ti.Net_Amount, ti.Tax_Type, ti.CGST_Percentage, ti.CGST_Amount, ti.SGST_Percentage, ti.SGST_Amount,ti.IGST_Percentage, ti.IGST_Amount,ti.Add_Less,ti.Vehicle_No,ti.Gross_Amount,ti.Freight, tI.Packing_Amount as Pack_amt, tI.Rewinding_Amount as Rewind_Amt, ti.Welding_Amount as Weld_Amt, ti.OtherCharges_Amount as Other_Chrg, ti.Discount_Amount as Disc_Amt, ti.Vat_Amount1, ti.Vat_Text1,ti.Vat_Assessable_Percentage1,ti.Vat_Assessable_Value1, ti.Vat_Amount2,  ti.Vat_Text2, ti.Vat_Assessable_Percentage2, ti.Vat_Assessable_Value2,ti.Packing_Text,ti.Packing_Rate as Pack_Rate,ti.Rewinding_Text,ti.Rewinding_Weight as Rewind_qty, ti.Rewinding_Rate as Rewind_Rate, ti.Packing_Rate, ti.Welding_Beam,ti.Welding_Text,ti.Welding_Rate as Weld_Rate, ti.Packing_Beam , ti.*,Csh.State_Name as Company_State_Name, Csh.State_Code as Company_State_Code, Lsh.State_Name as Ledger_State_Name, Lsh.State_Code as Ledger_State_Code from Specification_Head a INNER JOIN Company_Head b ON a.Company_IdNo = b.Company_IdNo  LEFT OUTER JOIN State_Head Csh ON b.Company_State_IdNo = csh.State_IdNo INNER JOIN Ledger_Head c ON a.Ledger_IdNo = c.Ledger_IdNo  LEFT OUTER JOIN State_Head Lsh ON c.ledger_State_IdNo = Lsh.State_IdNo INNER JOIN Count_Head d ON a.Count_IdNo = d.Count_IdNo INNER JOIN Mill_Head e ON a.Mill_IdNo = e.Mill_IdNo LEFT OUTER JOIN Beam_Width_Head f ON a.Beam_Width_IdNo = f.Beam_Width_IdNo LEFT OUTER JOIN Invoice_Head tI ON a.Invoice_Code = tI.Invoice_Code and a.Set_Code = tI.Set_Code Where a.set_code = '" & Trim(NewCode) & "'", Con)
            prn_HdDt = New DataTable
            da1.Fill(prn_HdDt)

            If prn_HdDt.Rows.Count <= 0 Then

                MessageBox.Show("This is New Entry", "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

            End If

            da1.Dispose()

            If Common_Procedures.settings.CustomerCode = "1144" Then
                da2 = New SqlClient.SqlDataAdapter("select sum(a.Bags) as TotalBags from Specification_YarnTaken_Details a  where a.Yarn_Type = 'MILL' and  a.Set_Code = '" & Trim(NewCode) & "'", Con)
                prn_AddDt = New DataTable
                da2.Fill(prn_AddDt)

                If prn_AddDt.Rows.Count > 0 Then
                    For i = 0 To prn_AddDt.Rows.Count - 1
                        If Val(prn_AddDt.Rows(i).Item("TotalBags").ToString) <> 0 Then
                            Mill_Bags = Trim((cbo_MillName.Text)) & " - " & Trim(Val(prn_AddDt.Rows(i).Item("TotalBags").ToString))
                        End If
                    Next i
                End If
                prn_AddDt.Clear()



            End If
            da2.Dispose()

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub PrintDocument1_EndPrint(ByVal sender As Object, ByVal e As System.Drawing.Printing.PrintEventArgs) Handles PrintDocument1.EndPrint
        If Val(Common_Procedures.Print_OR_Preview_Status) = 1 Then
            chk_Printed.Checked = True
            Update_PrintOut_Status()
        End If
    End Sub

    Private Sub PrintDocument1_PrintPage(ByVal sender As System.Object, ByVal e As System.Drawing.Printing.PrintPageEventArgs) Handles PrintDocument1.PrintPage

        If prn_HdDt.Rows.Count <= 0 Then Exit Sub

        If Trim(UCase(StmtPrintFrmt)) = "FORMAT-1" Then
            Printing_Format1(e)
        ElseIf Trim(UCase(StmtPrintFrmt)) = "FORMAT-2" Then
            Printing_Format2(e)
        ElseIf Trim(UCase(StmtPrintFrmt)) = "FORMAT-3" Then
            Printing_Format3(e)
        ElseIf Trim(UCase(StmtPrintFrmt)) = "FORMAT-4" Then
            Printing_Format4(e)
        ElseIf Trim(UCase(StmtPrintFrmt)) = "FORMAT-5" Then
            Printing_Format5(e)
        ElseIf Trim(UCase(StmtPrintFrmt)) = "FORMAT-6" Then
            Printing_Format6(e)
        ElseIf Trim(UCase(StmtPrintFrmt)) = "FORMAT-7" Then
            Printing_Format7(e)
        ElseIf Trim(UCase(StmtPrintFrmt)) = "FORMAT-8" Then
            Printing_Format8(e)
        ElseIf Trim(UCase(StmtPrintFrmt)) = "FORMAT-9" Then
            Printing_Format9(e)
        ElseIf Trim(UCase(StmtPrintFrmt)) = "FORMAT-10" Then
            Printing_Format10(e)
        ElseIf Trim(UCase(StmtPrintFrmt)) = "FORMAT-11" Then
            Printing_Format11(e)
        ElseIf Trim(UCase(StmtPrintFrmt)) = "FORMAT-12" Then
            Printing_Format12(e)
        ElseIf Trim(UCase(StmtPrintFrmt)) = "FORMAT-13" Then
            Printing_Format13(e)
        ElseIf Trim(UCase(StmtPrintFrmt)) = "FORMAT-14" Then
            Printing_Format14(e)
        ElseIf Trim(UCase(StmtPrintFrmt)) = "FORMAT-5_1097" Then
            Printing_Format5_1097(e)
            'Or Trim(UCase(Common_Procedures.settings.StatementPrint_Format)) = "FORMAT-5_1097"
            'Printing_Format5(e)
        ElseIf Trim(UCase(StmtPrintFrmt)) = "FORMAT-15" Then
            Printing_Format15(e)
        Else
            Printing_Format2(e)
        End If

    End Sub

    Private Sub Printing_Format1(ByRef e As System.Drawing.Printing.PrintPageEventArgs)
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Da2 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim EntryCode As String
        Dim pFont As Font, p1Font As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim ItmNm1 As String = "", ItmNm2 As String = ""
        'Dim ps As Printing.PaperSize
        Dim SNo As Integer
        Dim Det_Top As Single
        Dim i As Integer = 0, j As Integer = 0, k As Integer = 0
        Dim TtWrpEnds As Single
        Dim TtWrpGrsWgt As Single, TtWrpTrWgt As Single, TtWrpNetWgt As Single
        Dim Wpm() As String, WrpYrd As Single
        Dim TtSizBms As Single
        Dim TtSizGrsWgt As Single, TtSizTrWgt As Single, TtSizNetWgt As Single
        Dim TtSizPcs As Single, TtSizMtrs As Single
        Dim PL1 As Single
        Dim W1 As Single
        Dim Bal_Yrn_Wt As Single, Bal_Bms As Single, Bal_Bgs As Single, Bal_Amt As Single
        Dim NoofItems_PerPage As Integer

        Dim pkCustomSize1 As New System.Drawing.Printing.PaperSize("PAPER 9X12", 900, 1200)
        PrintDocument1.PrinterSettings.DefaultPageSettings.PaperSize = pkCustomSize1
        PrintDocument1.DefaultPageSettings.PaperSize = pkCustomSize1

        'For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
        '    'If PrintDocument1.PrinterSettings.PaperSizes(I).Kind = Printing.PaperKind.A4 Then
        '    If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.GermanStandardFanfold Then
        '        ps = PrintDocument1.PrinterSettings.PaperSizes(i)
        '        PrintDocument1.DefaultPageSettings.PaperSize = ps
        '        Exit For
        '    End If
        'Next

        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 30 ' 65
            .Right = 30
            .Top = 40
            .Bottom = 30
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        pFont = New Font("Calibri", 10, FontStyle.Regular)

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With
        If PrintDocument1.DefaultPageSettings.Landscape = True Then
            With PrintDocument1.DefaultPageSettings.PaperSize
                PrintWidth = .Height - TMargin - BMargin
                PrintHeight = .Width - RMargin - LMargin
                PageWidth = .Height - TMargin
                PageHeight = .Width - RMargin
            End With
        End If

        TxtHgt = 18  ' e.Graphics.MeasureString("A", pFont).Height  ' 20

        Erase LnAr
        Erase ClArr

        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = Val(30) : ClArr(2) = 45 : ClArr(3) = 50 : ClArr(4) = 52 : ClArr(5) = 48 : ClArr(6) = 53
        ClArr(7) = Val(30) : ClArr(8) = 50 : ClArr(9) = 53 : ClArr(10) = 47 : ClArr(11) = 53 : ClArr(12) = 48 : ClArr(13) = 65
        ClArr(14) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13))

        CurY = TMargin

        NoofItems_PerPage = 30

        EntryCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

        Try

            If prn_HdDt.Rows.Count > 0 Then

                prn_Yrn_OpWt = 0 : prn_Yrn_RcptWt = 0 : prn_Yrn_DelvWt = 0
                prn_Yrn_ConsWt = 0 : prn_Yrn_ExShWt = 0
                prn_Yrn_OpStNo = "" : prn_Yrn_RcptNo = "" : prn_Yrn_DcNo = ""

                prn_EmpBm_Op = 0 : prn_EmpBm_Rcpt = 0 : prn_EmpBm_Delv = 0 : prn_EmpBm_Cons = 0
                prn_EmpBm_OpStNo = "" : prn_EmpBm_RcptNo = "" : prn_EmpBm_DcNo = ""

                prn_EmpBg_Op = 0 : prn_EmpBg_Rcpt = 0 : prn_EmpBg_Delv = 0
                prn_EmpBg_OpStNo = "" : prn_EmpBg_RcptNo = "" : prn_EmpBg_DcNo = ""

                prn_Amt_Op = 0 : prn_Amt_Rcpt = 0 : prn_Amt_CurSet = 0
                prn_Amt_OpStNo = "" : prn_Amt_RcptNo = ""

                Stock_calulation()

                Printing_Format1_PageHeader(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, prn_PageNo, CurY, LnAr, ClArr)

                Det_Top = CurY

                If Val(prn_PageNo) <= 1 Then

                    '---------- WARPING DETAILS

                    Wpm = Split(Trim(prn_HdDt.Rows(0).Item("warp_meters").ToString), ",")

                    Da1 = New SqlClient.SqlDataAdapter("select distinct(Warp_SlNo) from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' Order by Warp_SlNo", Con)
                    Dt1 = New DataTable
                    Da1.Fill(Dt1)

                    If Dt1.Rows.Count > 0 Then

                        For k = 0 To Dt1.Rows.Count - 1

                            CurY = CurY - 10

                            Da2 = New SqlClient.SqlDataAdapter("select * from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Warp_SlNo = " & Str(Val(Dt1.Rows(k).Item("Warp_SlNo").ToString)) & " Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            WrpYrd = Val(Wpm(k))

                            SNo = 0
                            TtWrpEnds = 0
                            TtWrpGrsWgt = 0 : TtWrpTrWgt = 0 : TtWrpNetWgt = 0

                            If Dt2.Rows.Count > 0 Then

                                For i = 0 To Dt2.Rows.Count - 1

                                    SNo = SNo + 1

                                    CurY = CurY + TxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + 8, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Ends_Name").ToString)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                                    TtWrpEnds = TtWrpEnds + Val(Dt2.Rows(i).Item("Ends_Name").ToString)
                                    TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                    TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                    TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)

                                Next i

                            End If

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                            CurY = CurY + TxtHgt - 10
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtWrpEnds)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        Next k

                        'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2), CurY, LMargin + ClArr(1) + ClArr(2), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), LnAr(3))

                    End If


                    '---------- AMOUNT DETAILS

                    W1 = e.Graphics.MeasureString("Current Set Amount : ", pFont).Width

                    CurY = CurY + TxtHgt + 10

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    Common_Procedures.Print_To_PrintDocument(e, "AMOUNT BALANCE DETAILS", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                    CurY = CurY + TxtHgt + 5

                    Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", LMargin + 25, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1 + 25, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Op)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 25, CurY, 1, 0, pFont)

                    If Trim(prn_Amt_OpStNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Amt_OpStNo) & ")", LMargin + 35, CurY, 0, 0, pFont)
                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Received Amount", LMargin + 25, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1 + 25, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Rcpt)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 25, CurY, 1, 0, pFont)

                    If Trim(prn_Amt_RcptNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Amt_RcptNo) & ")", LMargin + 35, CurY, 0, 0, p1Font)
                    End If


                    CurY = CurY + TxtHgt + 2

                    Common_Procedures.Print_To_PrintDocument(e, "Current Set Amount", LMargin + 25, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1 + 25, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_CurSet)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 25, CurY, 1, 0, pFont)

                    Bal_Amt = prn_Amt_Op - prn_Amt_Rcpt + prn_Amt_CurSet

                    CurY = CurY + TxtHgt + 10
                    e.Graphics.DrawLine(Pens.Black, LMargin + W1 + 20, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 20, CurY)

                    CurY = CurY + TxtHgt - 10
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Amount", LMargin + 25, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1 + 25, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(Bal_Amt)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 25, CurY, 1, 0, p1Font)

                    CurY = CurY + TxtHgt + 10
                    e.Graphics.DrawLine(Pens.Black, LMargin + W1 + 20, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 20, CurY)


                    '---------- YARN STOCK DETAILS

                    CurY = Det_Top

                    CurY = CurY + 3

                    PL1 = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13)

                    W1 = e.Graphics.MeasureString("Opening Balance : ", pFont).Width

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    'p1Font = New Font("Calibri", 13, FontStyle.Bold Or FontStyle.Underline)  ---  Working
                    Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                    CurY = CurY + TxtHgt + 5

                    Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_OpWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_OpStNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Yrn_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Received", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_RcptWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_RcptNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Yrn_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Consumed Yarn", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_ConsWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Delivery", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_DelvWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_DcNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_Yrn_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    CurY = CurY + TxtHgt
                    If Val(prn_Yrn_ExShWt) < 0 Then
                        Common_Procedures.Print_To_PrintDocument(e, "Short Yarn", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    Else
                        Common_Procedures.Print_To_PrintDocument(e, "Excess Yarn", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    End If


                    Bal_Yrn_Wt = prn_Yrn_OpWt + prn_Yrn_RcptWt - prn_Yrn_DelvWt - prn_Yrn_ConsWt + prn_Yrn_ExShWt

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    CurY = CurY + 10
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Yarn", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Bal_Yrn_Wt), "#########0.000"), PageWidth - 5, CurY, 1, 0, p1Font)

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    '---------- EMPTY BEAM STOCK DETAILS


                    CurY = CurY + TxtHgt

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    Common_Procedures.Print_To_PrintDocument(e, "EMPTY BEAM STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                    CurY = CurY + TxtHgt + 5

                    Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Op), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_EmpBm_OpStNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBm_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Beams Received", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Rcpt), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_EmpBm_RcptNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBm_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Consumed Beams", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Cons), PageWidth - 5, CurY, 1, 0, pFont)

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Beams Delivered", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Delv), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_EmpBm_DcNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBm_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If


                    Bal_Bms = prn_EmpBm_Op + prn_EmpBm_Rcpt - prn_EmpBm_Delv - prn_EmpBm_Cons

                    CurY = CurY + TxtHgt
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    CurY = CurY + 10
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Beams", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bms), PageWidth - 5, CurY, 1, 0, p1Font)

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)



                    '---------- EMPTY BAG STOCK DETAILS


                    CurY = CurY + TxtHgt

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    Common_Procedures.Print_To_PrintDocument(e, "EMPTY BAGS STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                    CurY = CurY + TxtHgt + 5

                    Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Op), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_EmpBg_OpStNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBg_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Bags Received", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Rcpt), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_EmpBg_RcptNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBg_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If


                    CurY = CurY + TxtHgt + 2

                    Common_Procedures.Print_To_PrintDocument(e, "Bags Delivered", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Delv), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_EmpBg_DcNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBg_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    Bal_Bgs = prn_EmpBg_Op + prn_EmpBg_Rcpt - prn_EmpBg_Delv

                    CurY = CurY + TxtHgt + 10
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    CurY = CurY + TxtHgt - 10
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Bags", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bgs), PageWidth - 5, CurY, 1, 0, p1Font)

                    CurY = CurY + TxtHgt + 10
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                End If

                '---------- SIZING DETAILS

                CurY = Det_Top

                Da1 = New SqlClient.SqlDataAdapter("select distinct(Sizing_SlNo) from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' Order by Sizing_SlNo", Con)
                Dt1 = New DataTable
                Da1.Fill(Dt1)

                If Dt1.Rows.Count > 0 Then

                    For k = 0 To Dt1.Rows.Count - 1

                        CurY = CurY - 10

                        Da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' and Sizing_SlNo = " & Str(Val(Dt1.Rows(k).Item("Sizing_SlNo").ToString)) & " Order by sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0
                        TtSizBms = 0
                        TtSizGrsWgt = 0 : TtSizTrWgt = 0 : TtSizNetWgt = 0
                        TtSizPcs = 0 : TtSizMtrs = 0

                        If Dt2.Rows.Count > 0 Then

                            For i = 0 To Dt2.Rows.Count - 1

                                'If NoofDets > NoofItems_PerPage Then
                                '    CurY = CurY + TxtHgt

                                '    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                                '    NoofDets = NoofDets + 1

                                '    Printing_Format1_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, False)

                                '    e.HasMorePages = True

                                '    Return

                                'End If

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Beam_No").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Noof_Pcs").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Meters").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                                TtSizBms = TtSizBms + 1
                                TtSizGrsWgt = TtSizGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                TtSizTrWgt = TtSizTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                TtSizNetWgt = TtSizNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)
                                TtSizPcs = TtSizPcs + Val(Dt2.Rows(i).Item("Noof_Pcs").ToString)
                                TtSizMtrs = TtSizMtrs + Val(Dt2.Rows(i).Item("Meters").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtSizBms)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizPcs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizMtrs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)


                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                    Next k

                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(3))

                End If

                '---------- FOOTER

                Printing_Format1_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, True)

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

        e.HasMorePages = False

    End Sub

    Private Sub Printing_Format1_PageHeader(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim p1Font As Font
        Dim Cmp_Name As String, Cmp_Add1 As String, Cmp_Add2 As String
        Dim Cmp_PhNo As String, Cmp_TinNo As String, Cmp_CstNo As String
        Dim strHeight As Single
        Dim C1 As Single, C2 As Single, C3 As Single
        Dim W1 As Single, W2 As Single
        Dim ExcSht_Str As String


        PageNo = PageNo + 1

        CurY = TMargin

        da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' Order by sl_no", Con)
        da2.Fill(dt2)

        If dt2.Rows.Count > 30 Then
            Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(PageNo)), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
        End If
        dt2.Clear()

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY

        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
        Cmp_PhNo = "" : Cmp_TinNo = "" : Cmp_CstNo = ""

        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
        Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString
        Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString
        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = "PHONE NO.:" & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_TinNo").ToString) <> "" Then
            Cmp_TinNo = "TIN NO.: " & prn_HdDt.Rows(0).Item("Company_TinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
            Cmp_CstNo = "CST NO.: " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
        End If

        CurY = CurY + TxtHgt - 10
        p1Font = New Font("Calibri", 18, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font)
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

        CurY = CurY + strHeight
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1, LMargin, CurY, 2, PrintWidth, pFont)

        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont)
        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, pFont)
        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, Cmp_TinNo, LMargin + 10, CurY, 0, 0, pFont)
        Common_Procedures.Print_To_PrintDocument(e, Cmp_CstNo, PageWidth - 10, CurY, 1, 0, pFont)

        CurY = CurY + TxtHgt + 10
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(2) = CurY

        C1 = 370 ' Val(ClAr(1)) + Val(ClAr(2)) + Val(ClAr(3)) + Val(ClAr(4)) + Val(ClAr(5)) + Val(ClAr(6)) + Val(ClAr(7))
        C2 = 215 ' Val(ClAr(8)) + Val(ClAr(9)) + Val(ClAr(10)) + Val(ClAr(11)) + Val(ClAr(12)) + Val(ClAr(13))
        C3 = PageWidth - (LMargin + C1 + C2)

        W1 = e.Graphics.MeasureString("Average Count : ", pFont).Width
        W2 = e.Graphics.MeasureString("Tape Length : ", pFont).Width  ' 20

        Try

            If Val(PageNo) <= 1 Then
                p1Font = New Font("Calibri", 14, FontStyle.Bold)

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "TO : ", LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Set No", LMargin + C1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Set_No").ToString), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font)
                Common_Procedures.Print_To_PrintDocument(e, "Mill Name", LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString), 20), LMargin + C1 + C2 + W2 + 25, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Set No    : " & Trim(prn_HdDt.Rows(0).Item("Set_No").ToString), LMargin + C1 + 10, CurY, 0, 0, p1Font)
                'Common_Procedures.Print_To_PrintDocument(e, "Mill : " & Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                p1Font = New Font("Calibri", 10, FontStyle.Bold)
                Common_Procedures.Print_To_PrintDocument(e, "     " & "M/S." & prn_HdDt.Rows(0).Item("Ledger_MainName").ToString, LMargin + 10, CurY, 0, 0, p1Font)
                Common_Procedures.Print_To_PrintDocument(e, "DATE", LMargin + C1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Set_Date").ToString)), LMargin + C1 + W1 + 25, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Ends_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "DATE                 :  " & Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Set_Date").ToString)), LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Ends : " & Trim(prn_HdDt.Rows(0).Item("Ends_Name").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address1").ToString, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Count Name", LMargin + C1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Count_Name").ToString), LMargin + C1 + W1 + 25, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Tape Length", LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("tape_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Count Name : " & Trim(prn_HdDt.Rows(0).Item("Count_Name").ToString), LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Tape Length : " & Trim(prn_HdDt.Rows(0).Item("tape_length").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                If Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString) >= 0 Then
                    ExcSht_Str = "Excess"
                    'ExcSht_Str = "Excess        : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                Else
                    ExcSht_Str = "Short"
                    'ExcSht_Str = "Short         : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                End If
                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address2").ToString, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ExcSht_Str, LMargin + C1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000"), LMargin + C1 + W1 + 25, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Beam Width", LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Beam_Width_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, ExcSht_Str, LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Beam Width : " & Trim(prn_HdDt.Rows(0).Item("Beam_Width_Name").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address3").ToString, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Average Count", LMargin + C1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("beam_count").ToString), LMargin + C1 + W1 + 25, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Mark", LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("pcs_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Average Count : " & Trim(prn_HdDt.Rows(0).Item("beam_count").ToString), LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Mark : " & Trim(prn_HdDt.Rows(0).Item("pcs_length").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address4").ToString, LMargin + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt + 10
                e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

                e.Graphics.DrawLine(Pens.Black, LMargin + C1, CurY, LMargin + C1, LnAr(2))
                e.Graphics.DrawLine(Pens.Black, LMargin + C1 + C2, CurY, LMargin + C1 + C2, LnAr(2))

            End If
            LnAr(3) = CurY

            CurY = CurY + TxtHgt - 10
            p1Font = New Font("Calibri", 12, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "WARPING DETAILS", LMargin, CurY, 2, ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), p1Font)
            Common_Procedures.Print_To_PrintDocument(e, "SIZING DETAILS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), p1Font)
            Common_Procedures.Print_To_PrintDocument(e, "PARTICULARS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY + TxtHgt, 2, ClAr(14), p1Font)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY)
            LnAr(4) = CurY

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Meter", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(4), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(5), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "BeamNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 2, ClAr(9), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 2, ClAr(10), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(11), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Pcs", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Meters", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY, 2, ClAr(13), pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(5) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub Printing_Format1_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PageHeight As Single, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal is_LastPage As Boolean)
        Dim p1Font As Font
        Dim Cmp_Name As String
        Dim LS As Single

        Try

            LS = PageHeight - 135

            If CurY >= LS Then
                CurY = CurY + TxtHgt
            Else
                CurY = LS
            End If

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(6) = CurY

            CurY = CurY + 10

            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            p1Font = New Font("Calibri", 12, FontStyle.Bold)
            Common_Procedures.Print_To_PrintDocument(e, "For " & Cmp_Name, PageWidth - 15, CurY, 1, 0, p1Font)

            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, "Prepared By", LMargin + 20, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Checked By", LMargin + 300, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Authorised Signatory", PageWidth - 15, CurY, 1, 0, pFont)
            CurY = CurY + TxtHgt + 10

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(7) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(1))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(6), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(6), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(1))
            p1Font = New Font("Calibri", 7, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "Software by TSOFT SOLUTIONS, Tirupur. Ph : 8508403222, 0421-4337417", LMargin + 8, CurY + 5, 0, 0, p1Font)

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub Printing_Format2(ByRef e As System.Drawing.Printing.PrintPageEventArgs)
        Dim Cmd As New SqlClient.SqlCommand
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Da2 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim EntryCode As String
        Dim pFont As Font, p1Font As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim ItmNm1 As String = "", ItmNm2 As String = ""
        Dim SNo As Integer
        Dim Det_Top As Single
        Dim i As Integer = 0, j As Integer = 0, k As Integer = 0
        Dim TtWrpEnds As Single
        Dim TtWrpGrsWgt As Single, TtWrpTrWgt As Single, TtWrpNetWgt As Single, TtWrpYrd As Single
        Dim Wpm() As String, WrpYrd As Single
        Dim TtSizBms As Single
        Dim TtSizGrsWgt As Single, TtSizTrWgt As Single, TtSizNetWgt As Single
        Dim TtSizPcs As Single, TtSizMtrs As Single
        Dim TtYSBgs As Single, TtYSCns As Single, TtYSWgt As Single
        Dim TtOYSWgt As Single
        Dim PL1 As Single
        Dim W1 As Single
        Dim Bal_Yrn_Wt As Single, Bal_Bms As Single, Bal_Bgs As Single, Bal_Amt As Single
        Dim NoofItems_PerPage As Integer
        Dim ps As Printing.PaperSize
        Dim OthCntPrintSTS As Integer = 0
        Dim prn_Siz_Detail As Integer = 0
        Dim LS As Single = 0

        For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(i)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                Exit For
            End If
        Next

        With PrintDocument1.DefaultPageSettings.Margins
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1155" Then '----KRG TEXTILE MILLS (PALLADAM)
                .Left = 15 '10 ' 65
                .Right = 25
            Else
                .Left = 5 '10 ' 65
                .Right = 40
            End If

            .Top = 30
            .Bottom = 25
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        pFont = New Font("Calibri", 9, FontStyle.Regular)
        'pFont = New Font("Calibri", 10, FontStyle.Regular)

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With

        'TxtHgt = e.Graphics.MeasureString("A", pFont).Height  ' 20
        TxtHgt = 16  ' 17   ' 18  ' e.Graphics.MeasureString("A", pFont).Height  ' 20

        Erase LnAr
        Erase ClArr

        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}


        Printing_Format2_Set_Tablix_ColumnWidth(ClArr, LMargin, PageWidth, Common_Procedures.settings.CustomerCode, 0)
        'If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1155" Then '----KRG TEXTILE MILLS (PALLADAM)
        '    ClArr(1) = 25 : ClArr(2) = 40 + 32 : ClArr(3) = 48 + 32 : ClArr(4) = 0 : ClArr(5) = 0 : ClArr(6) = 48 + 32
        '    ClArr(7) = 25 : ClArr(8) = 50 + 5 : ClArr(9) = 52 + 5 : ClArr(10) = 50 + 5 : ClArr(11) = 48 + 5 : ClArr(12) = 0 : ClArr(13) = 50 + 5
        'Else
        '    ClArr(1) = 25 : ClArr(2) = 40 : ClArr(3) = 48 : ClArr(4) = 50 : ClArr(5) = 46 : ClArr(6) = 48
        '    ClArr(7) = 25 : ClArr(8) = 50 : ClArr(9) = 52 : ClArr(10) = 50 : ClArr(11) = 48 : ClArr(12) = 55 : ClArr(13) = 50
        'End If
        'ClArr(14) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13))

        ''ClArr(1) = Val(30) : ClArr(2) = 45 : ClArr(3) = 50 : ClArr(4) = 52 : ClArr(5) = 48 : ClArr(6) = 53
        ''ClArr(7) = Val(30) : ClArr(8) = 50 : ClArr(9) = 53 : ClArr(10) = 47 : ClArr(11) = 53 : ClArr(12) = 48 : ClArr(13) = 65
        ''ClArr(14) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13))

        CurY = TMargin

        NoofItems_PerPage = 30

        EntryCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

        Try

            If prn_HdDt.Rows.Count > 0 Then

                prn_Yrn_OpWt = 0 : prn_Yrn_RcptWt = 0 : prn_Yrn_DelvWt = 0
                prn_Yrn_ConsWt = 0 : prn_Yrn_ExShWt = 0
                prn_Yrn_OpStNo = "" : prn_Yrn_RcptNo = "" : prn_Yrn_DcNo = ""

                prn_EmpBm_Op = 0 : prn_EmpBm_Rcpt = 0 : prn_EmpBm_Delv = 0 : prn_EmpBm_Cons = 0
                prn_EmpBm_OpStNo = "" : prn_EmpBm_RcptNo = "" : prn_EmpBm_DcNo = ""

                prn_EmpBg_Op = 0 : prn_EmpBg_Rcpt = 0 : prn_EmpBg_Delv = 0
                prn_EmpBg_OpStNo = "" : prn_EmpBg_RcptNo = "" : prn_EmpBg_DcNo = ""

                prn_Amt_Op = 0 : prn_Amt_Rcpt = 0 : prn_Amt_CurSet = 0
                prn_Amt_OpStNo = "" : prn_Amt_RcptNo = ""
                prn_Invoice_no = ""

                Cmd.Connection = Con
                Cmd.CommandText = "truncate table Temp_Statement_Yarn_Stock_Summary"
                Cmd.ExecuteNonQuery()

                Stock_calulation()

                Printing_Format2_PageHeader(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, prn_PageNo, CurY, LnAr, ClArr)

                Det_Top = CurY

                If Val(prn_PageNo) <= 1 Then

                    '----------------------------------------------------------------------------------------------------
                    '**********************     WARPING DETAILS     **********************
                    '----------------------------------------------------------------------------------------------------

                    'dgv_WarpingDetails_Set1.Columns(25).Value = Dt2.Rows(i).Item("Ends1_Weight").ToString
                    'dgv_WarpingDetails_Set1.Rows(n).Cells(26).Value = Dt2.Rows(i).Item("Ends2_Weight").ToString
                    'dgv_WarpingDetails_Set1.Rows(n).Cells(27).Value = Dt2.Rows(i).Item("Ends3_Weight").ToString

                    Wpm = Split(Trim(prn_HdDt.Rows(0).Item("warp_meters").ToString), ",")

                    If dgv_WarpingDetails_Set1.Columns(23).Visible = True And dgv_WarpingDetails_Set1.Columns(24).Visible = True And dgv_WarpingDetails_Set1.Columns(25).Visible = True And dgv_WarpingDetails_Set1.Columns(26).Visible = True And dgv_WarpingDetails_Set1.Columns(27).Visible = True Then

                        Dim vEndsCondt As String = ""
                        Dim vEndsNm As String = ""
                        Dim vWrpGrsWt As String = ""
                        Dim vWrpTrWt As String = ""
                        Dim vWrpNetWt As String = ""



                        For k = 1 To UBound(Wpm) + 1

                            CurY = CurY - 10

                            vEndsCondt = ""
                            If k = 1 Then
                                vEndsCondt = "(Ends_Name <> 0 and Ends1_Weight <> 0)"
                            ElseIf k = 2 Then
                                vEndsCondt = "(Ends2_Name <> 0 and Ends2_Weight <> 0)"
                            ElseIf k = 3 Then
                                vEndsCondt = "(Ends3_Name <> 0 and Ends3_Weight <> 0)"
                            End If

                            Da2 = New SqlClient.SqlDataAdapter("select * from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Warp_SlNo = 1 and " & vEndsCondt & " Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            WrpYrd = Val(Wpm(k - 1))

                            SNo = 0
                            TtWrpEnds = 0
                            TtWrpGrsWgt = 0 : TtWrpTrWgt = 0 : TtWrpNetWgt = 0

                            If Dt2.Rows.Count > 0 Then

                                For i = 0 To Dt2.Rows.Count - 1

                                    SNo = SNo + 1

                                    CurY = CurY + TxtHgt

                                    vEndsNm = ""
                                    vWrpGrsWt = ""
                                    vWrpTrWt = ""
                                    vWrpNetWt = ""

                                    If k = 1 Then
                                        vEndsNm = Trim(Val(Dt2.Rows(i).Item("Ends_Name").ToString))
                                        vWrpGrsWt = Trim(Format(Val(Dt2.Rows(i).Item("Ends1_Weight").ToString) + Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"))
                                        vWrpTrWt = Trim(Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"))
                                        vWrpNetWt = Trim(Format(Val(Dt2.Rows(i).Item("Ends1_Weight").ToString), "########0.0"))

                                    ElseIf k = 2 Then
                                        vEndsNm = Trim(Val(Dt2.Rows(i).Item("Ends2_Name").ToString))
                                        vWrpGrsWt = Trim(Format(Val(Dt2.Rows(i).Item("Ends2_Weight").ToString) + Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"))
                                        vWrpTrWt = Trim(Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"))
                                        vWrpNetWt = Trim(Format(Val(Dt2.Rows(i).Item("Ends2_Weight").ToString), "########0.0"))

                                    ElseIf k = 3 Then
                                        vEndsNm = Trim(Val(Dt2.Rows(i).Item("Ends3_Name").ToString))
                                        vWrpGrsWt = Trim(Format(Val(Dt2.Rows(i).Item("Ends3_Weight").ToString) + Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"))
                                        vWrpTrWt = Trim(Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"))
                                        vWrpNetWt = Trim(Format(Val(Dt2.Rows(i).Item("Ends3_Weight").ToString), "########0.0"))

                                    End If

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + 8, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(vEndsNm), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 3, CurY, 1, 0, pFont)
                                    If Val(ClArr(4)) > 0 Then
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(vWrpGrsWt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 3, CurY, 1, 0, pFont)
                                    End If
                                    If Val(ClArr(5)) > 0 Then
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(vWrpTrWt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 3, CurY, 1, 0, pFont)
                                    End If
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(vWrpNetWt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 3, CurY, 1, 0, pFont)

                                    TtWrpEnds = TtWrpEnds + Val(vEndsNm)
                                    TtWrpGrsWgt = TtWrpGrsWgt + Val(vWrpGrsWt)
                                    TtWrpYrd = TtWrpYrd + Val(Dt2.Rows(i).Item("warp_meters").ToString)
                                    TtWrpTrWgt = TtWrpTrWgt + Val(vWrpTrWt)
                                    TtWrpNetWgt = TtWrpNetWgt + Val(vWrpNetWt)

                                Next i

                            End If

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                            CurY = CurY + TxtHgt - 10
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtWrpEnds)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                            If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1155" Then
                                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1282" Then
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtWrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 3, CurY, 1, 0, pFont)
                                Else
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 3, CurY, 1, 0, pFont)
                                End If
                            End If

                            If Val(ClArr(4)) > 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 3, CurY, 1, 0, pFont)
                            End If

                            If Val(ClArr(5)) > 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 3, CurY, 1, 0, pFont)
                            End If

                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 3, CurY, 1, 0, pFont)

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        Next k

                        'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2), CurY, LMargin + ClArr(1) + ClArr(2), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3), LnAr(4))
                        If Val(ClArr(4)) > 0 Then
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + 6, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + 6, LnAr(4))
                        End If

                        If Val(ClArr(5)) > 0 Then
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), LnAr(4))
                        End If

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), LnAr(3))

                    Else





                        Da1 = New SqlClient.SqlDataAdapter("select distinct(Warp_SlNo) from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' Order by Warp_SlNo", Con)
                        Dt1 = New DataTable
                        Da1.Fill(Dt1)

                        If Dt1.Rows.Count > 0 Then

                            For k = 0 To Dt1.Rows.Count - 1

                                CurY = CurY - 10

                                Da2 = New SqlClient.SqlDataAdapter("select * from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Warp_SlNo = " & Str(Val(Dt1.Rows(k).Item("Warp_SlNo").ToString)) & " Order by sl_no", Con)
                                Dt2 = New DataTable
                                Da2.Fill(Dt2)

                                WrpYrd = Val(Wpm(k))

                                SNo = 0
                                TtWrpEnds = 0
                                TtWrpGrsWgt = 0 : TtWrpTrWgt = 0 : TtWrpNetWgt = 0

                                If Dt2.Rows.Count > 0 Then

                                    For i = 0 To Dt2.Rows.Count - 1

                                        SNo = SNo + 1

                                        CurY = CurY + TxtHgt

                                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + 8, CurY, 0, 0, pFont)
                                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Ends_Name").ToString)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 3, CurY, 1, 0, pFont)
                                        If Val(ClArr(4)) > 0 Then
                                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 3, CurY, 1, 0, pFont)
                                        End If
                                        If Val(ClArr(5)) > 0 Then
                                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 3, CurY, 1, 0, pFont)
                                        End If

                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 3, CurY, 1, 0, pFont)

                                        TtWrpEnds = TtWrpEnds + Val(Dt2.Rows(i).Item("Ends_Name").ToString)
                                        TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                        TtWrpYrd = TtWrpYrd + Val(Dt2.Rows(i).Item("warp_meters").ToString)
                                        TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                        TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)

                                    Next i

                                End If

                                CurY = CurY + TxtHgt + 10
                                e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                                CurY = CurY + TxtHgt - 10
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtWrpEnds)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                                If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1155" Then
                                    If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1282" Then
                                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtWrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 3, CurY, 1, 0, pFont)
                                    Else
                                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 3, CurY, 1, 0, pFont)
                                    End If
                                End If

                                If Val(ClArr(4)) > 0 Then
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 3, CurY, 1, 0, pFont)
                                End If

                                If Val(ClArr(5)) > 0 Then
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 3, CurY, 1, 0, pFont)
                                End If

                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 3, CurY, 1, 0, pFont)

                                CurY = CurY + TxtHgt + 10
                                e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                            Next k

                            'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(4))
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1), LnAr(4))
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2), CurY, LMargin + ClArr(1) + ClArr(2), LnAr(4))
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3), LnAr(4))
                            If Val(ClArr(4)) > 0 Then
                                e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + 6, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + 6, LnAr(4))
                            End If
                            If Val(ClArr(5)) > 0 Then
                                e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), LnAr(4))
                            End If

                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), LnAr(3))

                        End If

                    End If

                    '----------------------------------------------------------------------------------------------------
                    '**********************     BABY CONE DETAILS       **********************
                    '----------------------------------------------------------------------------------------------------

                    Printing_Format2_Set_Tablix_ColumnWidth(ClArr, LMargin, PageWidth, "", 0)

                    If Val(Common_Procedures.settings.StatementPrint_BabyConeDetails) = 1 Then

                        CurY = CurY + TxtHgt ' + 10
                        'CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                        'p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "BABYCONE DETAILS", LMargin + ClArr(1), CurY, 2, ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), p1Font)

                        CurY = CurY + TxtHgt + 5 ' + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), CurY)
                        CurY = CurY + 5 ' + 10

                        Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1), CurY, 2, ClArr(2), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "BAGS", LMargin + ClArr(1) + ClArr(2), CurY, 2, ClArr(3), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, 2, ClArr(4), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, 2, ClArr(5) + (ClArr(6) \ 2), pFont)

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), CurY)
                        CurY = CurY + TxtHgt


                        Da2 = New SqlClient.SqlDataAdapter("select * from Specification_BabyCone_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Gross_Weight <> 0 Order by sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - 10

                            For i = 0 To Dt2.Rows.Count - 1

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + 10, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2) - 5, CurY, 1, 0, pFont)

                                'TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Bags").ToString)
                                'TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Cones").ToString)
                                'TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_gross_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 5 ' + 10
                        Common_Procedures.Print_To_PrintDocument(e, "Tare Weight ", LMargin + ClArr(1) + ClArr(2) + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_tare_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_net_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), CurY)

                    End If

                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         YARN STOCK SUMMARY FOR OTHER COUNT    **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_Yarn_Other_Count_Particulars) = 1 Then

                        CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "OTHER COUNT PARTICULARS", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                        CurY = CurY + TxtHgt + 5

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)
                        CurY = CurY + 5

                        Common_Procedures.Print_To_PrintDocument(e, "COUNT NAME", LMargin + ClArr(1) + 15, CurY, 0, ClArr(2) + ClArr(3) + ClArr(4), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, 2, ClArr(5) + ClArr(6) - ClArr(1), pFont)

                        CurY = CurY + TxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)
                        CurY = CurY + TxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select * from Temp_Statement_Other_Yarn_Stock_Summary where Weight <> 0 Order by Count_Name", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0
                        TtOYSWgt = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - 5

                            For i = 0 To Dt2.Rows.Count - 1

                                'If NoofDets > NoofItems_PerPage Then
                                '    CurY = CurY + TxtHgt
                                '    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)
                                '    NoofDets = NoofDets + 1
                                '    Printing_Format3_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, False)
                                '    e.HasMorePages = True
                                '    Return
                                'End If

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(Dt2.Rows(i).Item("Count_Name").ToString), 12), LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)

                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1) - 15, CurY, 1, 0, pFont)

                                TtOYSWgt = TtOYSWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)

                    End If


                    '----------------------------------------------------------------------------------------------------
                    '**********************      YARN STOCK DETAILS     **********************
                    '----------------------------------------------------------------------------------------------------

                    CurY = Det_Top

                    CurY = CurY + 3

                    PL1 = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13)

                    W1 = e.Graphics.MeasureString("Opening Balance : ", pFont).Width

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    'p1Font = New Font("Calibri", 13, FontStyle.Bold Or FontStyle.Underline)  ---  Working
                    Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                    CurY = CurY + TxtHgt + 5

                    Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_OpWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_OpStNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Yrn_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Received", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_RcptWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_RcptNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Yrn_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    If Val(Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn) = 2 Then
                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "Consumed Yarn", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_ConsWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_ExShWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Short Yarn", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)
                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Excess Yarn", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)
                        End If

                    Else
                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "Yarn Taken", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_TknWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "BabyCone Weight", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_BayCnWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    End If


                    CurY = CurY + TxtHgt
                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Delivery", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_DelvWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_DcNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_Yrn_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    If Val(prn_Yrn_RwExShWt) <> 0 Then

                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_RwExShWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Short", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Excess", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_RwExShStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Set.No. :  " & Trim(prn_Yrn_RwExShStNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                    End If

                    If Val(prn_Yrn_TranfrWt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_TranfrWt) < 0 Then

                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Math.Abs(Val(prn_Yrn_TranfrWt))), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else

                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Math.Abs(Val(prn_Yrn_TranfrWt))), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_TranfrNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_TranfrNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                    End If

                    If Val(prn_Yrn_ExcSht_Wt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_ExcSht_Wt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Exc)", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Math.Abs(Val(prn_Yrn_ExcSht_Wt))), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else

                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Sht)", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Math.Abs(Val(prn_Yrn_ExcSht_Wt))), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_ExcSht_No) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_ExcSht_No) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                    End If


                    Bal_Yrn_Wt = prn_Yrn_OpWt + prn_Yrn_RcptWt - prn_Yrn_DelvWt - prn_Yrn_ConsWt + prn_Yrn_ExShWt + prn_Yrn_RwExShWt + prn_Yrn_TranfrWt + prn_Yrn_ExcSht_Wt

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    CurY = CurY + 10
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Yarn", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Bal_Yrn_Wt), "#########0.000"), PageWidth - 5, CurY, 1, 0, p1Font)

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)


                    '----------------------------------------------------------------------------------------------------
                    '**********************      EMPTY BEAM STOCK DETAILS       **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then

                        CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "EMPTY BEAM STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                        CurY = CurY + TxtHgt + 5

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Op), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBm_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBm_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Beams Received", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Rcpt), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBm_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBm_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Consumed Beams", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Cons), PageWidth - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Beams Delivered", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Delv), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBm_DcNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBm_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        Bal_Bms = prn_EmpBm_Op + prn_EmpBm_Rcpt - prn_EmpBm_Delv - prn_EmpBm_Cons

                        CurY = CurY + TxtHgt
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                        CurY = CurY + 10
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance Beams", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bms), PageWidth - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    End If

                    '----------------------------------------------------------------------------------------------------
                    '**********************      EMPTY BAG STOCK DETAILS        **********************
                    '----------------------------------------------------------------------------------------------------
                    If Val(Common_Procedures.settings.StatementPrint_EmptyBagStockDetails) = 1 Then

                        CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "EMPTY BAGS STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                        CurY = CurY + TxtHgt + 5

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Op), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBg_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Bags Received", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Rcpt), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBg_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If


                        CurY = CurY + TxtHgt + 2

                        Common_Procedures.Print_To_PrintDocument(e, "Bags Delivered", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Delv), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_DcNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBg_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        Bal_Bgs = prn_EmpBg_Op + prn_EmpBg_Rcpt - prn_EmpBg_Delv

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                        CurY = CurY + TxtHgt - 10
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance Bags", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bgs), PageWidth - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    End If

                    '----------------------------------------------------------------------------------------------------
                    '**********************          AMOUNT DETAILS     **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_AmountDetails) = 1 Then

                        W1 = e.Graphics.MeasureString("Opening Balance  : ", pFont).Width

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "AMOUNT BALANCE DETAILS", PL1, CurY, 2, ClArr(14), p1Font)

                        CurY = CurY + TxtHgt + 5

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Op)), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_Amt_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Amt_OpStNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "Received Amount", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Rcpt)), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_Amt_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Amt_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If


                        CurY = CurY + TxtHgt + 2
                        Common_Procedures.Print_To_PrintDocument(e, "Set Amount", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_CurSet)), PageWidth - 5, CurY, 1, 0, pFont)

                        Bal_Amt = prn_Amt_Op - prn_Amt_Rcpt + prn_Amt_CurSet

                        If Trim(prn_Invoice_no) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Inv No. :  " & Trim(prn_Invoice_no) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        CurY = CurY + TxtHgt + 10

                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                        CurY = CurY + TxtHgt - 10
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance Amount", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(Bal_Amt)), PageWidth - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)


                    End If

                    '-------------------------------------------------------------------------------------------------
                    '**********************         PICK UP %             **********************
                    '-------------------------------------------------------------------------------------------------


                    If Val(Common_Procedures.settings.StatementPrint_PickUp_Percentage) = 1 Then

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "Pickup %", PL1 + 5, CurY, 0, 0, p1Font)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        If Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString) <> 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString), "#########0.00"), PageWidth - 5, CurY, 1, 0, pFont)
                        Else
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("pickup_percentage").ToString), "#########0.00"), PageWidth - 5, CurY, 1, 0, pFont)
                        End If

                        CurY = CurY + 5

                    End If


                    '-------------------------------------------------------------------------------------------------
                    '**********************         ELONGATION UP %             **********************
                    '-------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_Elongation_Percentage) = 1 Then

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "Elongation %", PL1 + 5, CurY, 0, 0, p1Font)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("elongation_percentage").ToString), "#########0.00"), PageWidth - 5, CurY, 1, 0, pFont)

                        CurY = CurY + 5

                    End If


                End If



                '----------------------------------------------------------------------------------------------------
                '**********************      SIZING DETAILS     **********************
                '----------------------------------------------------------------------------------------------------

                Printing_Format2_Set_Tablix_ColumnWidth(ClArr, LMargin, PageWidth, Common_Procedures.settings.CustomerCode, 0)

                CurY = Det_Top

                If Val(prn_PageNo) <= 1 Or Prn_SizingDetails_2ndPage_STS = True Then

                    Da1 = New SqlClient.SqlDataAdapter("select distinct(Sizing_SlNo) from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' Order by Sizing_SlNo", Con)
                    Dt1 = New DataTable
                    Da1.Fill(Dt1)
                    Dim vendor_name As String = ""

                    If Dt1.Rows.Count > 0 Then

                        For k = 0 To Dt1.Rows.Count - 1

                            CurY = CurY - 10

                            Da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and Sizing_SlNo = " & Str(Val(Dt1.Rows(k).Item("Sizing_SlNo").ToString)) & " Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            SNo = 0
                            TtSizBms = 0
                            TtSizGrsWgt = 0 : TtSizTrWgt = 0 : TtSizNetWgt = 0
                            TtSizPcs = 0 : TtSizMtrs = 0

                            If Dt2.Rows.Count > 0 Then

                                For i = Prn_SizingDetails_StartIndx To Dt2.Rows.Count - 1

                                    prn_Siz_Detail = 42

                                    If (i > 0 And i Mod prn_Siz_Detail = 0 And Prn_SizingDetails_2ndPage_STS = False) Or CurY >= 1100 Then

                                        p1Font = New Font("Calibri", 9.5, FontStyle.Bold)
                                        CurY = CurY + TxtHgt + 5
                                        Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14) - 5, CurY, 1, 0, p1Font)

                                        LS = PageHeight - 125

                                        If CurY >= LS Then
                                            CurY = CurY + TxtHgt
                                        Else
                                            CurY = LS
                                        End If

                                        'CurY = CurY + TxtHgt - 5
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14), CurY)

                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), LnAr(4))


                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), LnAr(4))
                                        If Val(ClArr(12)) > 0 Then
                                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), LnAr(4))
                                        End If
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(4))

                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14), LnAr(3))

                                        Prn_SizingDetails_2ndPage_STS = True
                                        Prn_SizingDetails_StartIndx = i
                                        Prn_YrnTknDet_2ndPage_STS = True
                                        Prn_YrnStkSumm_2ndPage_STS = True

                                        GoTo YRNSTKSUMM_1000

                                    End If

                                    SNo = SNo + 1

                                    CurY = CurY + TxtHgt

                                    vendor_name = Common_Procedures.Vendor_IdNoToName(Con, Val(Dt2.Rows(i).Item("Vendor_idno").ToString))

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Sl_No").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Beam_No").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                                    If Common_Procedures.settings.CustomerCode = "1078" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1087" Then
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Meters").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont, , True)
                                        Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(vendor_name, 5), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + 5, CurY, 0, 0, pFont, , True)
                                    Else
                                        If Val(ClArr(12)) > 0 Then
                                            If Val(Dt2.Rows(i).Item("Noof_Pcs").ToString) <> 0 Then
                                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Noof_Pcs").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                            End If
                                        End If
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Meters").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 2, CurY, 1, 0, pFont)
                                    End If
                                    TtSizBms = TtSizBms + 1
                                    TtSizGrsWgt = TtSizGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                    TtSizTrWgt = TtSizTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                    TtSizNetWgt = TtSizNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)
                                    TtSizPcs = TtSizPcs + Val(Dt2.Rows(i).Item("Noof_Pcs").ToString)
                                    TtSizMtrs = TtSizMtrs + Val(Dt2.Rows(i).Item("Meters").ToString)

                                    Prn_TtSizBms = Prn_TtSizBms + 1
                                    Prn_TtSizGrsWgt = Prn_TtSizGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                    Prn_TtSizTrWgt = Prn_TtSizTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                    Prn_TtSizNetWgt = Prn_TtSizNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)
                                    Prn_TtSizPcs = Prn_TtSizPcs + Val(Dt2.Rows(i).Item("Noof_Pcs").ToString)
                                    Prn_TtSizMtrs = Prn_TtSizMtrs + Val(Dt2.Rows(i).Item("Meters").ToString)

                                Next i

                            End If

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                            CurY = CurY + TxtHgt - 10
                            'Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Prn_TtSizBms)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                            If Common_Procedures.settings.CustomerCode = "1078" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1087" Then
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizMtrs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 50, pFont, , True)
                                '  Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizMtrs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                            Else
                                If Val(ClArr(12)) > 0 Then
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizPcs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                End If

                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizMtrs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 2, CurY, 1, 0, pFont)

                            End If


                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                        Next k

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), LnAr(4))
                        If Val(ClArr(12)) > 0 Then
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), LnAr(4))
                        End If

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(3))

                        Prn_SizingDetails_2ndPage_STS = False

                    End If

                End If

SIZDET_1000:


                Printing_Format2_Set_Tablix_ColumnWidth(ClArr, LMargin, PageWidth, "", 0)

                '----------------------------------------------------------------------------------------------------
                '**********************      YARN TAKEN DETAILS     **********************
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_YarnTakenDetails) = 1 Then

                    If Val(prn_PageNo) <= 1 Or Prn_YrnTknDet_2ndPage_STS = True Then

                        If CurY >= 1050 Then
                            Prn_YrnTknDet_2ndPage_STS = True
                            Prn_YrnStkSumm_2ndPage_STS = True
                            GoTo YRNSTKSUMM_1000
                        End If

                        CurY = CurY + TxtHgt   ' + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                        'p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "YARN TAKEN DETAILS", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), p1Font)

                        CurY = CurY + TxtHgt + 3  ' + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)
                        CurY = CurY + 5

                        Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, 2, ClArr(8), pFont)
                        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1155" Then '----KRG TEXTILE MILLS (PALLADAM)
                            Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, 2, ClArr(9) + ClArr(10) + ClArr(11), pFont)
                            'Common_Procedures.Print_To_PrintDocument(e, "COUNT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, 2, ClArr(11), pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, 2, ClArr(9) + ClArr(10), pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "COUNT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, 2, ClArr(11), pFont)

                        End If
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, 2, ClArr(12), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, 2, ClArr(13), pFont)

                        CurY = CurY + TxtHgt + 5   ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)
                        CurY = CurY + TxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select a.*, b.Count_Name, c.Mill_Name from Specification_YarnTaken_Details a INNER JOIN Count_Head b on a.Count_IdNo = b.Count_IdNo INNER JOIN Mill_Head c on a.Mill_IdNo = c.Mill_IdNo where a.company_idno = " & Str(Val(lbl_Company.Tag)) & " and a.Set_Code = '" & Trim(EntryCode) & "' Order by a.sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - 10

                            For i = Prn_YrnTknDet_StartIndx To Dt2.Rows.Count - 1

                                If CurY >= 1100 Then

                                    p1Font = New Font("Calibri", 10, FontStyle.Bold)

                                    CurY = CurY + TxtHgt
                                    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, p1Font)
                                    CurY = CurY + 5 ' 10

                                    Prn_YrnTknDet_2ndPage_STS = True
                                    Prn_YrnStkSumm_2ndPage_STS = True
                                    Prn_YrnTknDet_StartIndx = i

                                    GoTo YRNTKNDET_1000

                                End If

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Mill_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + 5, CurY, 0, 0, pFont)
                                If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1155" Then '----KRG TEXTILE MILLS (PALLADAM)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Count_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + 15, CurY, 3, 0, pFont)
                                End If

                                Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 10, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 5  ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                        'Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_bags").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 10, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_yarn_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 5  ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                        Prn_YrnTknDet_2ndPage_STS = False

                    End If

                Else
                    Prn_YrnTknDet_2ndPage_STS = False

                End If

YRNTKNDET_1000:
                '----------------------------------------------------------------------------------------------------
                '**********************      YARN STOCK SUMMARY     **********************
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_YarnStockSummary) = 1 Then

                    Printing_Format2_Set_Tablix_ColumnWidth(ClArr, LMargin, PageWidth, Common_Procedures.settings.CustomerCode, 4)

                    If Val(prn_PageNo) <= 1 Or Prn_YrnStkSumm_2ndPage_STS = True Then

                        If CurY >= 925 Then
                            Prn_YrnStkSumm_2ndPage_STS = True
                            GoTo YRNSTKSUMM_1000
                        End If

                        CurY = CurY + TxtHgt '+ 10

                        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                        'p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK SUMMARY", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), p1Font)

                        CurY = CurY + TxtHgt + 3  ' + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)
                        CurY = CurY + 5  ' + 10




                        Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, 2, ClArr(8), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, 2, ClArr(9) + ClArr(10) + ClArr(11), pFont)
                        'Common_Procedures.Print_To_PrintDocument(e, "BAGS", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, 2, ClArr(11), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, 2, ClArr(12), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, 2, ClArr(13), pFont)

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)
                        CurY = CurY + TxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select * from Temp_Statement_Yarn_Stock_Summary where Weight <> 0 Order by Order_By, Mill_Name", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0
                        TtYSBgs = 0 : TtYSCns = 0 : TtYSWgt = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - 10

                            For i = Prn_YrnStkSumm_StartIndx To Dt2.Rows.Count - 1

                                If CurY >= 975 Then

                                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                                    CurY = CurY + TxtHgt
                                    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, p1Font)
                                    CurY = CurY + 5

                                    Prn_YrnStkSumm_2ndPage_STS = True
                                    Prn_YrnStkSumm_StartIndx = i

                                    GoTo YRNSTKSUMM_1000

                                End If

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(i + 1)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Mill_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + 5, CurY, 0, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Bags").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 10, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                                TtYSBgs = TtYSBgs + Val(Dt2.Rows(i).Item("Bags").ToString)
                                TtYSCns = TtYSCns + Val(Dt2.Rows(i).Item("Cones").ToString)
                                TtYSWgt = TtYSWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                                Prn_TtYSBgs = Prn_TtYSBgs + Val(Dt2.Rows(i).Item("Bags").ToString)
                                Prn_TtYSCns = Prn_TtYSCns + Val(Dt2.Rows(i).Item("Cones").ToString)
                                Prn_TtYSWgt = Prn_TtYSWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                        'Common_Procedures.Print_To_PrintDocument(e, Val(TtYSBgs), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Prn_TtYSCns), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 10, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtYSWgt), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                        Prn_YrnStkSumm_2ndPage_STS = False

                    End If

                Else
                    Prn_YrnStkSumm_2ndPage_STS = False

                End If

YRNSTKSUMM_1000:

                '---------- FOOTER

                Printing_Format2_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, True)

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

        If Prn_YrnStkSumm_2ndPage_STS = True Or Prn_SizingDetails_2ndPage_STS = True Or Prn_YrnTknDet_2ndPage_STS = True Then
            Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(prn_PageNo)), PageWidth - 10, TMargin - TxtHgt, 1, 0, pFont)
            e.HasMorePages = True

        Else
            e.HasMorePages = False

        End If


    End Sub

    Private Sub Printing_Format2_Set_Tablix_ColumnWidth(ByRef ClArr() As Single, ByVal LMargin As Single, ByVal PageWidth As Single, ByVal ccno As String, ByVal vMODENTID As Integer)
        If Trim(UCase(ccno)) = "1155" Then '----KRG TEXTILE MILLS (PALLADAM)
            If vMODENTID = 4 Then
                ClArr(1) = 25 : ClArr(2) = 40 + 32 : ClArr(3) = 48 + 32 : ClArr(4) = 0 : ClArr(5) = 0 : ClArr(6) = 48 + 32
                ClArr(7) = 25 : ClArr(8) = 50 : ClArr(9) = 52 : ClArr(10) = 50 : ClArr(11) = 48 - 30 : ClArr(12) = 55 + 10 : ClArr(13) = 50 + 20

            Else
                ClArr(1) = 25 : ClArr(2) = 40 + 32 : ClArr(3) = 48 + 32 : ClArr(4) = 0 : ClArr(5) = 0 : ClArr(6) = 48 + 32
                ClArr(7) = 25 : ClArr(8) = 50 + 10 : ClArr(9) = 52 + 10 : ClArr(10) = 50 + 10 : ClArr(11) = 48 + 10 : ClArr(12) = 0 : ClArr(13) = 50 + 15

            End If

        Else
            ClArr(1) = 25 : ClArr(2) = 40 : ClArr(3) = 48 : ClArr(4) = 50 : ClArr(5) = 46 : ClArr(6) = 48
            ClArr(7) = 25 : ClArr(8) = 50 : ClArr(9) = 52 : ClArr(10) = 50 : ClArr(11) = 48 : ClArr(12) = 55 : ClArr(13) = 50
        End If
        ClArr(14) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13))
    End Sub

    Private Sub Printing_Format2_PageHeader(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim p1Font As Font
        Dim Cmp_Name As String, Cmp_Add1 As String, Cmp_Add2 As String
        Dim Cmp_PhNo As String, Cmp_Email As String, Cmp_TinNo As String, Cmp_CstNo As String
        Dim strHeight As Single
        Dim C1 As Single, C2 As Single, C3 As Single
        Dim W1 As Single, W2 As Single
        Dim ExcSht_Str As String
        Dim Gst_dt As Date
        Dim Entry_dt As Date
        Dim strWidth As Single = 0
        Dim CurX As Single = 0
        Dim Cmp_StateCap As String, Cmp_StateNm As String, Cmp_StateCode As String, Cmp_GSTIN_Cap As String, Cmp_GSTIN_No As String
        Dim Cmp_PanNo As String = ""


        PageNo = PageNo + 1

        CurY = TMargin

        If PageNo > 1 Then
            If Prn_YrnStkSumm_2ndPage_STS = True Or Prn_SizingDetails_2ndPage_STS = True Or Prn_YrnTknDet_2ndPage_STS = True Or Prn_SizInvoice_2ndPage_STS = True Then
                Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(PageNo)), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
            End If
        End If

        'da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' Order by sl_no", Con)
        'da2.Fill(dt2)
        'If dt2.Rows.Count > 30 Then
        '    Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(PageNo)), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
        'End If
        'dt2.Clear()

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY
        Dim br = New SolidBrush(Color.FromArgb(191, 43, 133))
        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
        Cmp_PhNo = "" : Cmp_Email = "" : Cmp_TinNo = "" : Cmp_CstNo = ""
        Cmp_StateCap = "" : Cmp_StateNm = "" : Cmp_StateCode = "" : Cmp_GSTIN_Cap = "" : Cmp_GSTIN_No = ""
        Cmp_PanNo = ""

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1078" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1087" Then '---- Kalaimagal Textiles (Palladam)

            If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
                Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
                Cmp_Name = Replace(Cmp_Name, Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString), "")
                Cmp_Add1 = Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString)
                Cmp_Add2 = prn_HdDt.Rows(0).Item("Sizing_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Sizing_Address2").ToString & " " & prn_HdDt.Rows(0).Item("Sizing_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Sizing_Address4").ToString

            Else
                Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
                Cmp_Add1 = prn_HdDt.Rows(0).Item("Sizing_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Sizing_Address2").ToString
                Cmp_Add2 = prn_HdDt.Rows(0).Item("Sizing_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Sizing_Address4").ToString

            End If

            If Trim(prn_HdDt.Rows(0).Item("Sizing_PhoneNo").ToString) <> "" Then
                Cmp_PhNo = "PHONE No. : " & prn_HdDt.Rows(0).Item("Sizing_PhoneNo").ToString
            End If
            If Trim(prn_HdDt.Rows(0).Item("Sizing_EMail").ToString) <> "" Then
                Cmp_Email = "EMail : " & prn_HdDt.Rows(0).Item("Sizing_EMail").ToString
            End If

        Else

            If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
                Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
                Cmp_Name = Replace(Cmp_Name, Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString), "")
                Cmp_Add1 = Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString)
                Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

            Else
                Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
                Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString
                Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

            End If

            If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
                Cmp_PhNo = "PHONE No. : " & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
            End If
            If Trim(prn_HdDt.Rows(0).Item("Company_EMail").ToString) <> "" Then
                Cmp_Email = "EMail : " & prn_HdDt.Rows(0).Item("Company_EMail").ToString
            End If


        End If



        If Trim(prn_HdDt.Rows(0).Item("Company_TinNo").ToString) <> "" Then
            Cmp_TinNo = "TIN NO.: " & prn_HdDt.Rows(0).Item("Company_TinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
            Cmp_CstNo = "CST NO.: " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_State_Name").ToString) <> "" Then
            Cmp_StateCap = "STATE : "
            Cmp_StateNm = prn_HdDt.Rows(0).Item("Company_State_Name").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_State_Code").ToString) <> "" Then
            Cmp_StateCode = "CODE :" & prn_HdDt.Rows(0).Item("Company_State_Code").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString) <> "" Then
            Cmp_GSTIN_Cap = "GSTIN : "
            Cmp_GSTIN_No = prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_PanNo").ToString) <> "" Then
            Cmp_PanNo = "PAN :" & prn_HdDt.Rows(0).Item("Company_PanNo").ToString
        End If

        If Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) <> "UNACCOUNT" Then
            CurY = CurY + TxtHgt - 10


            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1087" Then
                p1Font = New Font("Americana Std", 20, FontStyle.Bold)
            Else
                p1Font = New Font("Calibri", 14, FontStyle.Bold)
            End If





            If Common_Procedures.settings.CustomerCode = "1106" Then
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font, Brushes.Green)

            ElseIf Common_Procedures.settings.CustomerCode = "1087" Then
                Common_Procedures.Print_To_PrintDocument(e, StrConv(Cmp_Name, VbStrConv.ProperCase), LMargin, CurY, 2, PrintWidth, p1Font)

            Else
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font)
            End If

            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            'If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1087" Then
            '    If InStr(1, Trim(UCase(Cmp_Name)), "SRI BHAGAVAN TEXTILES") > 0 Then  ' ---- SRI BHAGAVAN TEXTILES - PALLADAM
            '        e.Graphics.DrawImage(DirectCast(Global.Textile.My.Resources.Resources.SRI_BHAGAVAN_TEX_LOGO, Drawing.Image), LMargin + 10, CurY - 5, 100, 80)

            '    End If
            'End If

            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1078" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1112" Then '---- Kalaimagal Sizing (Palladam)
                e.Graphics.DrawImage(DirectCast(Global.Textile.My.Resources.Resources.KmtOe, Drawing.Image), LMargin + 20, CurY - 5, 100, 80)
            ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1284" Then '---- VEL Sizing (PALLADAM)
                ' e.Graphics.DrawImage(DirectCast(Global.Textile.My.Resources.Resources.Company_Logo_VelSizing_Palladam, Drawing.Image), LMargin + 20, CurY - 5, 100, 80)
            Else
                If Trim(prn_HdDt.Rows(0).Item("Company_logo_Image").ToString) <> "" Then

                    If IsDBNull(prn_HdDt.Rows(0).Item("Company_logo_Image")) = False Then

                        Dim imageData As Byte() = DirectCast(prn_HdDt.Rows(0).Item("Company_logo_Image"), Byte())
                        If Not imageData Is Nothing Then
                            Using ms As New MemoryStream(imageData, 0, imageData.Length)
                                ms.Write(imageData, 0, imageData.Length)

                                If imageData.Length > 0 Then

                                    e.Graphics.DrawImage(DirectCast(Image.FromStream(ms), Drawing.Image), LMargin + 15, CurY - 5, 80, 80)

                                End If

                            End Using

                        End If

                    End If

                End If
            End If

            If Common_Procedures.settings.CustomerCode = "1351" Then
                Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, PrintWidth - 1, CurY + 2, 1, 0, pFont)
            End If

            CurY = CurY + strHeight
            If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
                p1Font = New Font("Calibri", 12, FontStyle.Bold)
            Else
                p1Font = New Font("Calibri", 9, FontStyle.Regular)
            End If
            If Common_Procedures.settings.CustomerCode = "1106" Then
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1, LMargin, CurY, 2, PrintWidth, p1Font, br)
            Else
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1, LMargin, CurY, 2, PrintWidth, p1Font)
            End If
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            CurY = CurY + TxtHgt
            If Common_Procedures.settings.CustomerCode = "1106" Then
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont, br)
            Else
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont)
            End If
            If Common_Procedures.settings.CustomerCode <> "1351" Then
                CurY = CurY + TxtHgt
                If Common_Procedures.settings.CustomerCode = "1106" Then
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, pFont, br)
                Else
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, pFont)
                End If
            End If


            CurY = CurY + TxtHgt



            Gst_dt = #7/1/2017#
            Entry_dt = dtp_Date.Value

            If DateDiff("d", Gst_dt.ToShortDateString, Entry_dt.ToShortDateString) < 0 Then
                If Common_Procedures.settings.CustomerCode = "1106" Then
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_TinNo, LMargin + 10, CurY, 0, 0, pFont, br)
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_Email, LMargin, CurY, 2, PrintWidth, pFont, br)
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_CstNo, PageWidth - 10, CurY, 1, 0, pFont, br)
                Else
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_TinNo, LMargin + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_Email, LMargin, CurY, 2, PrintWidth, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_CstNo, PageWidth - 10, CurY, 1, 0, pFont)
                End If

            Else
                If Common_Procedures.settings.CustomerCode = "1106" Then
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_GSTIN_Cap & Cmp_GSTIN_No, LMargin + 10, CurY, 0, 0, pFont, br)
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_Email, LMargin, CurY, 2, PrintWidth, pFont, br)
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_PanNo, PageWidth - 10, CurY, 1, 0, pFont, br)
                Else
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_GSTIN_Cap & Cmp_GSTIN_No, LMargin + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_Email, LMargin, CurY, 2, PrintWidth, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_PanNo, PageWidth - 10, CurY, 1, 0, pFont)
                End If

                'p1Font = New Font("Calibri", 11, FontStyle.Bold)
                'strWidth = e.Graphics.MeasureString(Trim(Cmp_StateCap & Cmp_GSTIN_Cap), p1Font).Width
                'strWidth = e.Graphics.MeasureString(Trim(Cmp_StateCap & Cmp_StateNm & "     " & Cmp_GSTIN_Cap & Cmp_GSTIN_No), pFont).Width
                'If PrintWidth > strWidth Then
                '    CurX = LMargin + (PrintWidth - strWidth) / 2
                'Else
                '    CurX = LMargin
                'End If

                'p1Font = New Font("Calibri", 11, FontStyle.Bold)
                'Common_Procedures.Print_To_PrintDocument(e, Cmp_StateCap, CurX, CurY, 0, 0, p1Font)
                'strWidth = e.Graphics.MeasureString(Cmp_StateCap, p1Font).Width
                'CurX = CurX + strWidth
                'Common_Procedures.Print_To_PrintDocument(e, Cmp_StateNm, CurX, CurY, 0, 0, pFont)

                'strWidth = e.Graphics.MeasureString(Cmp_StateNm, pFont).Width
                'p1Font = New Font("Calibri", 11, FontStyle.Bold)
                'CurX = CurX + strWidth
                'Common_Procedures.Print_To_PrintDocument(e, "     " & Cmp_GSTIN_Cap, CurX, CurY, 0, PrintWidth, p1Font)
                'strWidth = e.Graphics.MeasureString("     " & Cmp_GSTIN_Cap, p1Font).Width
                'CurX = CurX + strWidth
                'Common_Procedures.Print_To_PrintDocument(e, Cmp_GSTIN_No, CurX, CurY, 0, 0, pFont)

            End If


            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        End If
        LnAr(2) = CurY

        C1 = 370 ' Val(ClAr(1)) + Val(ClAr(2)) + Val(ClAr(3)) + Val(ClAr(4)) + Val(ClAr(5)) + Val(ClAr(6)) + Val(ClAr(7))
        C2 = 215 ' Val(ClAr(8)) + Val(ClAr(9)) + Val(ClAr(10)) + Val(ClAr(11)) + Val(ClAr(12)) + Val(ClAr(13))
        C3 = PageWidth - (LMargin + C1 + C2)

        W1 = e.Graphics.MeasureString("Average Count : ", pFont).Width
        W2 = e.Graphics.MeasureString("Tape Length : ", pFont).Width  ' 20

        Try

            If Val(PageNo) <= 1 Then

                p1Font = New Font("Calibri", 12, FontStyle.Bold)
                strHeight = e.Graphics.MeasureString("Average Count : ", p1Font).Height

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "TO : ", LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Set No", LMargin + C1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Set_No").ToString), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font)
                Common_Procedures.Print_To_PrintDocument(e, "Mill Name", LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString), 15), LMargin + C1 + C2 + W2 + 25, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Set No    : " & Trim(prn_HdDt.Rows(0).Item("Set_No").ToString), LMargin + C1 + 10, CurY, 0, 0, p1Font)
                'Common_Procedures.Print_To_PrintDocument(e, "Mill : " & Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + strHeight
                p1Font = New Font("Calibri", 10, FontStyle.Bold)
                Common_Procedures.Print_To_PrintDocument(e, "     " & "M/S." & prn_HdDt.Rows(0).Item("Ledger_MainName").ToString, LMargin + 10, CurY, 0, 0, p1Font)
                Common_Procedures.Print_To_PrintDocument(e, "DATE", LMargin + C1 + 10, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Set_Date").ToString)), LMargin + C1 + W1 + 25, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + C1 + C2 + 10, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Ends_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + 3, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "DATE                 :  " & Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Set_Date").ToString)), LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Ends : " & Trim(prn_HdDt.Rows(0).Item("Ends_Name").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address1").ToString, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Count Name", LMargin + C1 + 10, CurY + 9, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + 9, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Count_Name").ToString), LMargin + C1 + W1 + 25, CurY + 9, 0, 0, pFont)

                If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1155" Then '----KRG TEXTILE MILLS (PALLADAM)
                    Common_Procedures.Print_To_PrintDocument(e, "Tape Length", LMargin + C1 + C2 + 10, CurY + 9, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 9, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("tape_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY + 9, 0, 0, pFont)
                End If


                'Common_Procedures.Print_To_PrintDocument(e, "Count Name : " & Trim(prn_HdDt.Rows(0).Item("Count_Name").ToString), LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Tape Length : " & Trim(prn_HdDt.Rows(0).Item("tape_length").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                If Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString) >= 0 Then
                    ExcSht_Str = "Excess"
                    'ExcSht_Str = "Excess        : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                Else
                    ExcSht_Str = "Short"
                    'ExcSht_Str = "Short         : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                End If
                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address2").ToString, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ExcSht_Str, LMargin + C1 + 10, CurY + 14, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + 14, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000"), LMargin + C1 + W1 + 25, CurY + 14, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Beam Width", LMargin + C1 + C2 + 10, CurY + 14, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 14, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Beam_Width_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + 14, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, ExcSht_Str, LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Beam Width : " & Trim(prn_HdDt.Rows(0).Item("Beam_Width_Name").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address3").ToString, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Average Count", LMargin + C1 + 10, CurY + 18, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + 18, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("beam_count").ToString), LMargin + C1 + W1 + 25, CurY + 18, 0, 0, pFont)
                If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1155" Then '----KRG TEXTILE MILLS (PALLADAM)
                    Common_Procedures.Print_To_PrintDocument(e, "Mark", LMargin + C1 + C2 + 10, CurY + 18, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 18, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("pcs_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY + 18, 0, 0, pFont)
                End If

                'Common_Procedures.Print_To_PrintDocument(e, "Average Count : " & Trim(prn_HdDt.Rows(0).Item("beam_count").ToString), LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Mark : " & Trim(prn_HdDt.Rows(0).Item("pcs_length").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                If Trim(prn_HdDt.Rows(0).Item("Ledger_Address4").ToString) <> "" Then
                    Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address4").ToString, LMargin + 10, CurY, 0, 0, pFont)
                    If Trim(prn_HdDt.Rows(0).Item("ledger_GSTinNo").ToString) <> "" Then
                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "     GSTIN : " & prn_HdDt.Rows(0).Item("ledger_GSTinNo").ToString, LMargin + 10, CurY, 0, 0, pFont)
                    End If

                Else
                    If Trim(prn_HdDt.Rows(0).Item("ledger_GSTinNo").ToString) <> "" Then
                        Common_Procedures.Print_To_PrintDocument(e, "     GSTIN : " & prn_HdDt.Rows(0).Item("ledger_GSTinNo").ToString, LMargin + 10, CurY, 0, 0, pFont)
                    End If

                End If




                CurY = CurY + TxtHgt + 10
                e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

                e.Graphics.DrawLine(Pens.Black, LMargin + C1, CurY, LMargin + C1, LnAr(2))
                e.Graphics.DrawLine(Pens.Black, LMargin + C1 + C2, CurY, LMargin + C1 + C2, LnAr(2))

            End If
            LnAr(3) = CurY

            CurY = CurY + TxtHgt - 10
            p1Font = New Font("Calibri", 12, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "WARPING DETAILS", LMargin, CurY, 2, ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), p1Font)
            Common_Procedures.Print_To_PrintDocument(e, "SIZING DETAILS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), p1Font)
            Common_Procedures.Print_To_PrintDocument(e, "PARTICULARS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY + TxtHgt, 2, ClAr(14), p1Font)

            CurY = CurY + TxtHgt + 5 ' + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY)
            LnAr(4) = CurY

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Meter", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            If Val(ClAr(4)) > 0 Then
                Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(4), pFont)
            End If
            If Val(ClAr(5)) > 0 Then
                Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(5), pFont)
            End If

            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "BeamNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 2, ClAr(9), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 2, ClAr(10), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(11), pFont)
            If Common_Procedures.settings.CustomerCode = "1078" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1087" Then
                Common_Procedures.Print_To_PrintDocument(e, "Meters", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Vendor", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY, 2, ClAr(13), pFont)
            Else
                If Val(ClAr(12)) > 0 Then
                    Common_Procedures.Print_To_PrintDocument(e, "Pcs", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)
                End If
                Common_Procedures.Print_To_PrintDocument(e, "Meters", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY, 2, ClAr(13), pFont)

            End If

            CurY = CurY + TxtHgt + 5 ' + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(5) = CurY

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub Printing_Format2_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PageHeight As Single, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal is_LastPage As Boolean)
        Dim p1Font As Font
        Dim Cmp_Name As String
        Dim LS As Single

        Try

            LS = PageHeight - 125  ' 135

            If CurY > LS Then
                CurY = CurY + TxtHgt
            Else
                CurY = LS
            End If

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(6) = CurY

            CurY = CurY + 10

            If Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) <> "UNACCOUNT" Then

                If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
                    Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
                    Cmp_Name = Replace(Cmp_Name, Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString), "")

                Else
                    Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString

                End If

                p1Font = New Font("Calibri", 12, FontStyle.Bold)
                If Common_Procedures.settings.CustomerCode = "1106" Then
                    Common_Procedures.Print_To_PrintDocument(e, "For " & Cmp_Name, PageWidth - 15, CurY, 1, 0, p1Font, Brushes.Green)
                Else
                    Common_Procedures.Print_To_PrintDocument(e, "For " & Cmp_Name, PageWidth - 15, CurY, 1, 0, p1Font)
                End If
            End If

            'CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, "Prepared By", LMargin + 20, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Checked By", LMargin + 275, CurY, 0, 0, pFont)
            If Common_Procedures.settings.CustomerCode = "1106" Then
                Dim br = New SolidBrush(Color.FromArgb(191, 43, 133))
                Common_Procedures.Print_To_PrintDocument(e, "Authorised Signatory", PageWidth - 15, CurY, 1, 0, pFont, br)
            Else

                Common_Procedures.Print_To_PrintDocument(e, "Authorised Signatory", PageWidth - 15, CurY, 1, 0, pFont)
            End If
            CurY = CurY + TxtHgt + 10

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(7) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(1))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(6), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(6), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(1))
            p1Font = New Font("Calibri", 7, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "Software by TSOFT SOLUTIONS, Tirupur. Ph : 8508403222, 0421-4337417", LMargin + 8, CurY + 5, 0, 0, p1Font)

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub Printing_Format3(ByRef e As System.Drawing.Printing.PrintPageEventArgs)
        Dim Cmd As New SqlClient.SqlCommand
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Da2 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim EntryCode As String
        Dim pFont As Font, p1Font As Font, spFont As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single, sTxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim ItmNm1 As String = "", ItmNm2 As String = ""
        Dim SNo As Integer
        Dim Det_Top As Single
        Dim i As Integer = 0, j As Integer = 0, k As Integer = 0
        Dim TtWrpEnds As Single
        Dim TtWrpGrsWgt As Single, TtWrpTrWgt As Single, TtWrpNetWgt As Single
        Dim Wpm() As String, WrpYrd As Single
        Dim TtSizBms As Single
        Dim TtSizGrsWgt As Single, TtSizTrWgt As Single, TtSizNetWgt As Single
        Dim TtSizPcs As Single, TtSizMtrs As Single
        Dim TtYSBgs As Single, TtYSCns As Single, TtYSWgt As Single
        Dim PL1 As Single
        Dim W1 As Single
        Dim Bal_Yrn_Wt As Single, Bal_Bgs As Single, Bal_Amt As Single
        Dim NoofItems_PerPage As Integer
        Dim YInc As Single = 0
        Dim ps As Printing.PaperSize

        'If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1106" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1284" Then '---- Vijayakala Sizing (Sonamur) AND SHREE VEL SIZING (PALLADAM)
        For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(i)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                Exit For
            End If
        Next

        'Else
        '    Dim pkCustomSize1 As New System.Drawing.Printing.PaperSize("PAPER 9X12", 900, 1200)
        '    PrintDocument1.PrinterSettings.DefaultPageSettings.PaperSize = pkCustomSize1
        '    PrintDocument1.DefaultPageSettings.PaperSize = pkCustomSize1

        'End If


        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 30
            .Right = 30
            .Top = 20  ' 30
            .Bottom = 30
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        'printFont = New Font("Draft 12cpi", 10)
        'pFont = New Font("Calibri", 9, FontStyle.Regular)
        pFont = New Font("Calibri", 9.5, FontStyle.Regular)
        'pFont = New Font("Calibri", 10, FontStyle.Regular)

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With

        TxtHgt = 17.75   'e.Graphics.MeasureString("A", pFont).Height  ' 18  ' 20
        'TxtHgt = 17.8 ' e.Graphics.MeasureString("A", pFont).Height  ' 18  ' 20

        Erase LnAr
        Erase ClArr

        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = Val(30) : ClArr(2) = 45 : ClArr(3) = 50 : ClArr(4) = 52 : ClArr(5) = 48 : ClArr(6) = 53
        ClArr(7) = Val(30) : ClArr(8) = 50 : ClArr(9) = 53 : ClArr(10) = 47 : ClArr(11) = 53 : ClArr(12) = 48 : ClArr(13) = 65
        ClArr(14) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13))

        CurY = TMargin

        NoofItems_PerPage = 30

        EntryCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

        Try

            If prn_HdDt.Rows.Count > 0 Then

                '---------------------------------------------------------------------------------------------------- 
                '**********************         STOCK CALCULATION             **********************
                '----------------------------------------------------------------------------------------------------

                prn_Yrn_OpWt = 0 : prn_Yrn_RcptWt = 0 : prn_Yrn_DelvWt = 0
                prn_Yrn_ConsWt = 0 : prn_Yrn_ExShWt = 0
                prn_Yrn_TknWt = 0 : prn_Yrn_BayCnWt = 0
                prn_Yrn_RwExShWt = 0 : prn_Yrn_RwExShStNo = ""
                prn_Yrn_TranfrWt = 0 : prn_Yrn_TranfrNo = ""
                prn_Yrn_ExcSht_Wt = 0 : prn_Yrn_ExcSht_No = ""
                prn_Yrn_OpStNo = "" : prn_Yrn_RcptNo = "" : prn_Yrn_DcNo = ""
                prn_Yrn_MillRcptWt = 0 : prn_Yrn_RWRcptWt = 0

                prn_EmpBm_Op = 0 : prn_EmpBm_Rcpt = 0 : prn_EmpBm_Delv = 0 : prn_EmpBm_Cons = 0
                prn_EmpBm_OpStNo = "" : prn_EmpBm_RcptNo = "" : prn_EmpBm_DcNo = ""

                prn_EmpBg_Op = 0 : prn_EmpBg_Rcpt = 0 : prn_EmpBg_Delv = 0
                prn_EmpBg_OpStNo = "" : prn_EmpBg_RcptNo = "" : prn_EmpBg_DcNo = ""

                prn_Amt_Op = 0 : prn_Amt_Rcpt = 0 : prn_Amt_CurSet = 0
                prn_Amt_OpStNo = "" : prn_Amt_RcptNo = ""

                Cmd.Connection = Con

                Cmd.CommandText = "truncate table Temp_Statement_Yarn_Stock_Summary"
                Cmd.ExecuteNonQuery()

                Cmd.CommandText = "truncate table Temp_Statement_Other_Yarn_Stock_Summary"
                Cmd.ExecuteNonQuery()

                Stock_calulation()

                '---------------------------------------------------------------------------------------------------- 
                '**********************         HEADER             **********************
                '----------------------------------------------------------------------------------------------------

                Printing_Format3_PageHeader(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, prn_PageNo, CurY, LnAr, ClArr)

                Det_Top = CurY

                If Val(prn_PageNo) <= 1 Then

                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         WARPING DETAILS             **********************
                    '----------------------------------------------------------------------------------------------------

                    Wpm = Split(Trim(prn_HdDt.Rows(0).Item("warp_meters").ToString), ",")

                    Da1 = New SqlClient.SqlDataAdapter("select distinct(Warp_SlNo) from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' Order by Warp_SlNo", Con)
                    Dt1 = New DataTable
                    Da1.Fill(Dt1)

                    If Dt1.Rows.Count > 0 Then

                        For k = 0 To Dt1.Rows.Count - 1

                            CurY = CurY - 10

                            Da2 = New SqlClient.SqlDataAdapter("select * from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Warp_SlNo = " & Str(Val(Dt1.Rows(k).Item("Warp_SlNo").ToString)) & " Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            WrpYrd = Val(Wpm(k))

                            SNo = 0
                            TtWrpEnds = 0
                            TtWrpGrsWgt = 0 : TtWrpTrWgt = 0 : TtWrpNetWgt = 0

                            If Dt2.Rows.Count > 0 Then

                                For i = 0 To Dt2.Rows.Count - 1

                                    SNo = SNo + 1

                                    CurY = CurY + TxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + 8, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Ends_Name").ToString)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                                    TtWrpEnds = TtWrpEnds + Val(Dt2.Rows(i).Item("Ends_Name").ToString)
                                    TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                    TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                    TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)

                                Next i

                            End If

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                            CurY = CurY + TxtHgt - 10
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtWrpEnds)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        Next k

                        'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2), CurY, LMargin + ClArr(1) + ClArr(2), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), LnAr(3))

                    End If

                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         BABY CONE DETAILS              **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_BabyConeDetails) = 1 Then

                        YInc = 5

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 12, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "BABYCONE DETAILS", LMargin + ClArr(1), CurY, 2, ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, p1Font)

                        CurY = CurY + TxtHgt + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)
                        CurY = CurY + YInc

                        Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1), CurY, 2, ClArr(2), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "BAGS", LMargin + ClArr(1) + ClArr(2), CurY, 2, ClArr(3), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, 2, ClArr(4), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + 15, CurY, 2, ClArr(5) + ClArr(6) - 30 + 15, pFont)

                        CurY = CurY + TxtHgt + YInc
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)
                        CurY = CurY + TxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select * from Specification_BabyCone_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Gross_Weight <> 0 Order by sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - YInc

                            For i = 0 To Dt2.Rows.Count - 1

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + 10, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30 - 5 + 20, CurY, 1, 0, pFont)

                                'TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Bags").ToString)
                                'TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Cones").ToString)
                                'TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + YInc
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)

                        CurY = CurY + TxtHgt - YInc
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_gross_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30 - 5 + 20, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + YInc
                        'Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString), "########0") & " X " & Format(Val(prn_HdDt.Rows(0).Item("EmptyBag_weight").ToString), "########0.000") & " + " & Format(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString), "########0") & " X " & Format(Val(prn_HdDt.Rows(0).Item("EmptyCone_weight").ToString), "########0.000"), LMargin + 8, CurY, 0, 0, pFont)
                        'Common_Procedures.Print_To_PrintDocument(e, " = Tare Wgt ", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + 12, CurY, 0, 0, pFont)
                        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then
                            Common_Procedures.Print_To_PrintDocument(e, "Tare Wgt" & " (" & Format(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString), "########0") & " X " & Format(Val(prn_HdDt.Rows(0).Item("EmptyBag_weight").ToString), "########0.000") & " + " & Format(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString), "########0") & " X " & Format(Val(prn_HdDt.Rows(0).Item("EmptyCone_weight").ToString), "########0.000") & " ) = ", LMargin + 8, CurY, 0, 0, pFont)
                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Tare Weight ", LMargin + ClArr(1) + ClArr(2) + 5, CurY, 0, 0, pFont)
                        End If

                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_tare_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30 - 5 + 20, CurY, 1, 0, pFont)


                        CurY = CurY + TxtHgt + YInc
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)

                        CurY = CurY + TxtHgt - YInc
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_net_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30 - 5 + 20, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + YInc
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)

                    End If


                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         YARN STOCK SUMMARY             **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_YarnStockSummary) = 1 Then

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK SUMMARY", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                        CurY = CurY + TxtHgt + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)
                        CurY = CurY + 10

                        Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + 2, CurY, 2, ClArr(1) + 15, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + ClArr(1) + 15, CurY, 2, ClArr(2) + ClArr(3) - 15 + ClArr(4) - 25, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 25, CurY, 2, ClArr(5), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 25, CurY, 2, ClArr(6) + 25, pFont)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)
                        CurY = CurY + TxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select * from Temp_Statement_Yarn_Stock_Summary where Weight <> 0 Order by Order_By, Mill_Name", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0
                        TtYSBgs = 0 : TtYSCns = 0 : TtYSWgt = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - 10

                            For i = 0 To Dt2.Rows.Count - 1

                                'If NoofDets > NoofItems_PerPage Then
                                '    CurY = CurY + TxtHgt
                                '    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)
                                '    NoofDets = NoofDets + 1
                                '    Printing_Format3_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, False)
                                '    e.HasMorePages = True
                                '    Return
                                'End If

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                'Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + 7, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(Dt2.Rows(i).Item("Mill_Name").ToString), 12), LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)

                                Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 25 + ClArr(5) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                                'Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Mill_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + 5, CurY, 0, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Bags").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                                TtYSBgs = TtYSBgs + Val(Dt2.Rows(i).Item("Bags").ToString)
                                TtYSCns = TtYSCns + Val(Dt2.Rows(i).Item("Cones").ToString)
                                TtYSWgt = TtYSWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(TtYSCns), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 25 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtYSWgt), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                    End If

                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         YARN STOCK PARTICULARS              **********************
                    '----------------------------------------------------------------------------------------------------

                    CurY = Det_Top

                    CurY = CurY + 3

                    PL1 = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13)

                    W1 = e.Graphics.MeasureString("Opening Balance   : ", pFont).Width

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    'p1Font = New Font("Calibri", 13, FontStyle.Bold Or FontStyle.Underline)  ---  Working
                    Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                    CurY = CurY + TxtHgt + 5

                    Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_OpWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_OpStNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Yrn_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                    End If

                    CurY = CurY + TxtHgt

                    'Common_Procedures.Print_To_PrintDocument(e, "Yarn Received", PL1 + 5, CurY, 0, 0, pFont)
                    'Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    'Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_RcptWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Received (Mill)", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_MillRcptWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Received (R/W)", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_RWRcptWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)


                    If Trim(prn_Yrn_RcptNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Yrn_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    If Val(Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn) = 2 Then

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Consumed Yarn", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_ConsWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_ExShWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Short Yarn", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Excess Yarn", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                    Else

                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "Yarn Taken", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_TknWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "Baby Cone", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_BayCnWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Delivery", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_DelvWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_DcNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_Yrn_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    If Val(prn_Yrn_RwExShWt) <> 0 Then

                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_RwExShWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Short", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Excess", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_RwExShStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Set.No. :  " & Trim(prn_Yrn_RwExShStNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                    End If

                    If Val(prn_Yrn_TranfrWt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_TranfrWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_TranfrWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_TranfrWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_TranfrNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_TranfrNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                    End If

                    If Val(prn_Yrn_ExcSht_Wt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_ExcSht_Wt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Exc)", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExcSht_Wt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Sht)", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExcSht_Wt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_ExcSht_No) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_ExcSht_No) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If
                    End If

                    If Val(Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn) = 2 Then
                        Bal_Yrn_Wt = prn_Yrn_OpWt + prn_Yrn_RcptWt - prn_Yrn_DelvWt - prn_Yrn_ConsWt + prn_Yrn_ExShWt + prn_Yrn_RwExShWt + prn_Yrn_TranfrWt + prn_Yrn_ExcSht_Wt
                    Else
                        Bal_Yrn_Wt = prn_Yrn_OpWt + prn_Yrn_RcptWt - prn_Yrn_DelvWt - prn_Yrn_TknWt + prn_Yrn_BayCnWt + prn_Yrn_RwExShWt + prn_Yrn_TranfrWt + prn_Yrn_ExcSht_Wt
                    End If

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    CurY = CurY + 10
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Yarn", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Bal_Yrn_Wt), "#########0.000"), PageWidth - 5, CurY, 1, 0, p1Font)

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)


                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         EMPTY GUNNIES STOCK DETAILS              **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_EmptyBagStockDetails) = 1 Then

                        CurY = CurY + TxtHgt + (TxtHgt \ 2)

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "EMPTY GUNNIES STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                        CurY = CurY + TxtHgt + 5

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Op), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBg_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Bags Received", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Rcpt), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBg_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If


                        CurY = CurY + TxtHgt + 2

                        Common_Procedures.Print_To_PrintDocument(e, "Bags Delivered", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Delv), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_DcNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBg_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        Bal_Bgs = prn_EmpBg_Op + prn_EmpBg_Rcpt - prn_EmpBg_Delv

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                        CurY = CurY + TxtHgt - 10
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance Bags", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bgs), PageWidth - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    End If

                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         EMPTY GUNNIES STOCK (SIMPLE)              **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_EmptyBagStockSimple) = 1 Then

                        Bal_Bgs = prn_EmpBg_Op + prn_EmpBg_Rcpt - prn_EmpBg_Delv

                        CurY = CurY + TxtHgt + 10

                        'p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Empty Gunnies", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bgs), PageWidth - 5, CurY, 1, 0, pFont)

                        CurY = CurY + 5

                    End If


                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         AMOUNT DETAILS              **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_AmountDetails) = 1 Then

                        W1 = e.Graphics.MeasureString("Current Set Amount : ", pFont).Width

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "AMOUNT BALANCE DETAILS", PL1, CurY, 2, ClArr(14), p1Font)

                        CurY = CurY + TxtHgt + 5

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Op)), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_Amt_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Amt_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Received Amount", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Rcpt)), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_Amt_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Amt_RcptNo) & ")", PL1 + 5, CurY, 0, 0, p1Font)
                        End If


                        CurY = CurY + TxtHgt + 2

                        Common_Procedures.Print_To_PrintDocument(e, "Current Set Amount", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_CurSet)), PageWidth - 5, CurY, 1, 0, pFont)

                        Bal_Amt = prn_Amt_Op - prn_Amt_Rcpt + prn_Amt_CurSet

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                        CurY = CurY + TxtHgt - 10
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance Amount", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(Bal_Amt)), PageWidth - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    End If


                    '-------------------------------------------------------------------------------------------------
                    '**********************         PICK UP %             **********************
                    '-------------------------------------------------------------------------------------------------


                    If Val(Common_Procedures.settings.StatementPrint_PickUp_Percentage) = 1 Then

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "Pickup %", PL1 + 5, CurY, 0, 0, p1Font)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("pickup_percentage").ToString), "#########0.00"), PageWidth - 5, CurY, 1, 0, pFont)

                        CurY = CurY + 5

                    End If

                    '-------------------------------------------------------------------------------------------------
                    '**********************         ELONGATION UP %             **********************
                    '-------------------------------------------------------------------------------------------------


                    If Val(Common_Procedures.settings.StatementPrint_Elongation_Percentage) = 1 Then

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "Elongation %", PL1 + 5, CurY, 0, 0, p1Font)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("elongation_percentage").ToString), "#########0.00"), PageWidth - 5, CurY, 1, 0, pFont)

                        CurY = CurY + 5

                    End If

                End If

                '---------------------------------------------------------------------------------------------------- 
                '**********************         SIZING DETAILS              **********************
                '----------------------------------------------------------------------------------------------------

                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1012" Then '---- Avinashi Sizing (Avinashi)
                    If Val(prn_HdDt.Rows(0).Item("Rw_ExcessShort").ToString) <> 0 Then
                        CurY = CurY + TxtHgt + TxtHgt + TxtHgt
                        'If Val(prn_HdDt.Rows(0).Item("Rw_ExcessShort").ToString) Then
                        '    Common_Procedures.Print_To_PrintDocument(e, "R/W Excess", PL1 + 5, CurY, 0, 0, pFont)
                        'Else
                        Common_Procedures.Print_To_PrintDocument(e, "R/W Short", PL1 + 5, CurY, 0, 0, pFont)
                        'End If

                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_HdDt.Rows(0).Item("Rw_ExcessShort").ToString)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)
                    End If

                End If

                '---------------------------------------------------------------------------------------------------- 
                '**********************         SIZING DETAILS              **********************
                '----------------------------------------------------------------------------------------------------

                spFont = New Font("Calibri", 9, FontStyle.Regular)
                sTxtHgt = 17

                CurY = Det_Top

                Da1 = New SqlClient.SqlDataAdapter("select distinct(Sizing_SlNo) from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' Order by Sizing_SlNo", Con)
                Dt1 = New DataTable
                Da1.Fill(Dt1)

                If Dt1.Rows.Count > 0 Then

                    For k = 0 To Dt1.Rows.Count - 1

                        CurY = CurY - 5  ' 10

                        Da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' and Sizing_SlNo = " & Str(Val(Dt1.Rows(k).Item("Sizing_SlNo").ToString)) & " Order by sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0
                        TtSizBms = 0
                        TtSizGrsWgt = 0 : TtSizTrWgt = 0 : TtSizNetWgt = 0
                        TtSizPcs = 0 : TtSizMtrs = 0

                        If Dt2.Rows.Count > 0 Then

                            For i = 0 To Dt2.Rows.Count - 1

                                'If NoofDets > NoofItems_PerPage Then
                                '    CurY = CurY + TxtHgt
                                '    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)
                                '    NoofDets = NoofDets + 1
                                '    Printing_Format3_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, False)
                                '    e.HasMorePages = True
                                '    Return
                                'End If

                                SNo = SNo + 1

                                CurY = CurY + sTxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Beam_No").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Noof_Pcs").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Meters").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                                TtSizBms = TtSizBms + 1
                                TtSizGrsWgt = TtSizGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                TtSizTrWgt = TtSizTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                TtSizNetWgt = TtSizNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)
                                TtSizPcs = TtSizPcs + Val(Dt2.Rows(i).Item("Noof_Pcs").ToString)
                                TtSizMtrs = TtSizMtrs + Val(Dt2.Rows(i).Item("Meters").ToString)

                            Next i

                        End If

                        CurY = CurY + sTxtHgt + 5 ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                        CurY = CurY + sTxtHgt - 5 ' 10
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtSizBms)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizPcs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizMtrs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)


                        CurY = CurY + sTxtHgt + 5 ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                    Next k

                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(3))

                End If

                '---------------------------------------------------------------------------------------------------- 
                '**********************         YARN TAKEN DETAILS              **********************
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_YarnTakenDetails) = 1 Then

                    CurY = CurY + TxtHgt + 5 ' 10

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    Common_Procedures.Print_To_PrintDocument(e, "YARN TAKEN DETAILS", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), p1Font)

                    CurY = CurY + sTxtHgt + 5 ' 10

                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)
                    CurY = CurY + 10

                    Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7), pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, 2, ClArr(8), pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, 2, ClArr(9) + ClArr(10), pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "COUNT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, 2, ClArr(11), pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, 2, ClArr(12), pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, 2, ClArr(13), pFont)

                    CurY = CurY + sTxtHgt + 5 ' 10
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)
                    CurY = CurY + sTxtHgt

                    Da2 = New SqlClient.SqlDataAdapter("select a.*, b.Count_Name, c.Mill_Name from Specification_YarnTaken_Details a INNER JOIN Count_Head b on a.Count_IdNo = b.Count_IdNo INNER JOIN Mill_Head c on a.Mill_IdNo = c.Mill_IdNo where a.company_idno = " & Str(Val(lbl_Company.Tag)) & " and a.Set_Code = '" & Trim(EntryCode) & "' Order by a.sl_no", Con)
                    Dt2 = New DataTable
                    Da2.Fill(Dt2)

                    SNo = 0

                    If Dt2.Rows.Count > 0 Then

                        CurY = CurY - sTxtHgt - 5 ' 10

                        For i = 0 To Dt2.Rows.Count - 1

                            SNo = SNo + 1

                            CurY = CurY + sTxtHgt

                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Mill_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Count_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                        Next i

                    End If

                    CurY = CurY + sTxtHgt + 5  ' 10
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                    CurY = CurY + sTxtHgt - 5  '10
                    Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                    'Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_bags").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_yarn_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                    CurY = CurY + sTxtHgt + 5  ' 10
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                End If


                '---------------------------------------------------------------------------------------------------- 
                '**********************         FOOTER             **********************
                '----------------------------------------------------------------------------------------------------

                Printing_Format3_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, True)

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

        e.HasMorePages = False

    End Sub

    Private Sub Printing_Format3_PageHeader(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim p1Font As Font
        Dim Cmp_Name As String, Cmp_Add1 As String, Cmp_Add2 As String
        Dim Cmp_PhNo As String, Cmp_TinNo As String, Cmp_CstNo As String
        Dim strHeight As Single
        Dim C1 As Single, C2 As Single, C3 As Single, C4 As Single
        Dim W1 As Single, W2 As Single, W3 As Single
        Dim ExcSht_Str As String
        Dim Bal_Bms As Integer = 0
        Dim YInc As Single = 0
        Dim MilNm1 As String, MilNm2 As String
        Dim I As Integer = 0
        Dim Gst_dt As Date
        Dim Entry_dt As Date
        Dim CurX As Single
        Dim strWidth As Single
        Dim Cmp_StateCap As String, Cmp_StateNm As String, Cmp_StateCode As String, Cmp_GSTIN_Cap As String, Cmp_GSTIN_No As String
        Dim Cmp_PanNo As String



        PageNo = PageNo + 1

        CurY = TMargin

        da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' Order by sl_no", Con)
        da2.Fill(dt2)

        If dt2.Rows.Count > 30 Then
            Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(PageNo)), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
        End If
        dt2.Clear()

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY

        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
        Cmp_PhNo = "" : Cmp_TinNo = "" : Cmp_CstNo = ""
        Cmp_StateCap = "" : Cmp_StateNm = "" : Cmp_StateCode = "" : Cmp_GSTIN_Cap = "" : Cmp_GSTIN_No = ""

        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
        Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString
        Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString
        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = "PHONE NO.:" & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_TinNo").ToString) <> "" Then
            Cmp_TinNo = "TIN NO.: " & prn_HdDt.Rows(0).Item("Company_TinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
            Cmp_CstNo = "CST NO.: " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_State_Name").ToString) <> "" Then
            Cmp_StateCap = "STATE : "
            Cmp_StateNm = prn_HdDt.Rows(0).Item("Company_State_Name").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_State_Code").ToString) <> "" Then
            Cmp_StateCode = "CODE :" & prn_HdDt.Rows(0).Item("Company_State_Code").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString) <> "" Then
            Cmp_GSTIN_Cap = "GSTIN : "
            Cmp_GSTIN_No = prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_State_Name").ToString) <> "" Then
            Cmp_StateCap = "STATE : "
            Cmp_StateNm = prn_HdDt.Rows(0).Item("Company_State_Name").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_State_Code").ToString) <> "" Then
            Cmp_StateCode = "CODE :" & prn_HdDt.Rows(0).Item("Company_State_Code").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString) <> "" Then
            Cmp_GSTIN_Cap = "GSTIN : "
            Cmp_GSTIN_No = prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_PanNo").ToString) <> "" Then
            Cmp_PanNo = "PAN :" & prn_HdDt.Rows(0).Item("Company_PanNo").ToString
        End If

        CurY = CurY + TxtHgt - 10
        p1Font = New Font("Calibri", 18, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font)
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

        CurY = CurY + strHeight
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1 & " " & Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont)

        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, pFont)
        CurY = CurY + TxtHgt - 5

        Gst_dt = #7/1/2017#
        Entry_dt = dtp_Date.Value

        If DateDiff("d", Gst_dt.ToShortDateString, Entry_dt.ToShortDateString) < 0 Then
            Common_Procedures.Print_To_PrintDocument(e, Cmp_TinNo, LMargin + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_CstNo, PageWidth - 10, CurY, 1, 0, pFont)

        Else

            p1Font = New Font("Calibri", 11, FontStyle.Bold)
            strWidth = e.Graphics.MeasureString(Trim(Cmp_StateCap & Cmp_GSTIN_Cap), p1Font).Width
            strWidth = e.Graphics.MeasureString(Trim(Cmp_StateCap & Cmp_StateNm & "     " & Cmp_GSTIN_Cap & Cmp_GSTIN_No), pFont).Width
            If PrintWidth > strWidth Then
                CurX = LMargin + (PrintWidth - strWidth) / 2
            Else
                CurX = LMargin
            End If

            p1Font = New Font("Calibri", 11, FontStyle.Bold)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_StateCap, CurX, CurY, 0, 0, p1Font)
            strWidth = e.Graphics.MeasureString(Cmp_StateCap, p1Font).Width
            CurX = CurX + strWidth
            Common_Procedures.Print_To_PrintDocument(e, Cmp_StateNm, CurX, CurY, 0, 0, pFont)

            strWidth = e.Graphics.MeasureString(Cmp_StateNm, pFont).Width
            p1Font = New Font("Calibri", 11, FontStyle.Bold)
            CurX = CurX + strWidth
            Common_Procedures.Print_To_PrintDocument(e, "     " & Cmp_GSTIN_Cap, CurX, CurY, 0, PrintWidth, p1Font)
            strWidth = e.Graphics.MeasureString("     " & Cmp_GSTIN_Cap, p1Font).Width
            CurX = CurX + strWidth
            Common_Procedures.Print_To_PrintDocument(e, Cmp_GSTIN_No, CurX, CurY, 0, 0, pFont)

        End If


        CurY = CurY + TxtHgt + 5  ' 10
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(2) = CurY

        If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
            C1 = Val(ClAr(1)) + Val(ClAr(2)) + Val(ClAr(3)) + Val(ClAr(4)) + Val(ClAr(5)) + Val(ClAr(6))
            C2 = 200
            C3 = 200
            C4 = PageWidth - (LMargin + C1 + C2 + C3)

        Else

            C1 = 370 ' Val(ClAr(1)) + Val(ClAr(2)) + Val(ClAr(3)) + Val(ClAr(4)) + Val(ClAr(5)) + Val(ClAr(6)) + Val(ClAr(7))
            C2 = 215 ' Val(ClAr(8)) + Val(ClAr(9)) + Val(ClAr(10)) + Val(ClAr(11)) + Val(ClAr(12)) + Val(ClAr(13))
            C3 = PageWidth - (LMargin + C1 + C2)
            C4 = 0

        End If

        W1 = e.Graphics.MeasureString("Average Count : ", pFont).Width
        W2 = e.Graphics.MeasureString("Tape Length : ", pFont).Width
        W3 = e.Graphics.MeasureString("Consumed Rolls  : ", pFont).Width

        Try

            If Val(PageNo) <= 1 Then

                MilNm1 = Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString)
                MilNm2 = ""
                If Len(MilNm1) > 15 Then
                    For I = 15 To 1 Step -1
                        If Mid$(Trim(MilNm1), I, 1) = " " Or Mid$(Trim(MilNm1), I, 1) = "," Or Mid$(Trim(MilNm1), I, 1) = "." Or Mid$(Trim(MilNm1), I, 1) = "-" Or Mid$(Trim(MilNm1), I, 1) = "/" Or Mid$(Trim(MilNm1), I, 1) = "_" Or Mid$(Trim(MilNm1), I, 1) = "(" Or Mid$(Trim(MilNm1), I, 1) = ")" Or Mid$(Trim(MilNm1), I, 1) = "\" Or Mid$(Trim(MilNm1), I, 1) = "[" Or Mid$(Trim(MilNm1), I, 1) = "]" Or Mid$(Trim(MilNm1), I, 1) = "{" Or Mid$(Trim(MilNm1), I, 1) = "}" Then Exit For
                    Next I
                    If I = 0 Then I = 15
                    MilNm2 = Microsoft.VisualBasic.Right(Trim(MilNm1), Len(MilNm1) - I)
                    MilNm1 = Microsoft.VisualBasic.Left(Trim(MilNm1), I - 1)
                End If

                p1Font = New Font("Calibri", 14, FontStyle.Bold)

                CurY = CurY + TxtHgt - 5
                Common_Procedures.Print_To_PrintDocument(e, "TO : ", LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Set No", LMargin + C1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Set_No").ToString), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font)

                If Len(Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString)) > 15 Then
                    p1Font = New Font("Calibri", 8, FontStyle.Regular)
                Else
                    p1Font = New Font("Calibri", 10, FontStyle.Regular)
                End If

                Common_Procedures.Print_To_PrintDocument(e, "Mill Name", LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(MilNm1), LMargin + C1 + C2 + W2 + 25, CurY, 0, 0, p1Font)
                If Trim(MilNm2) <> "" Then
                    Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(MilNm2), 15), LMargin + C1 + C2 + W2 + 25, CurY + 12, 0, 0, p1Font)
                End If

                If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                    Common_Procedures.Print_To_PrintDocument(e, "Opening Rolls", LMargin + C1 + C2 + C3 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + C3 + W3 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Op), LMargin + C1 + C2 + C3 + W3 + 25, CurY, 0, 0, pFont)
                End If

                YInc = 10
                CurY = CurY + TxtHgt
                If Len(Trim(prn_HdDt.Rows(0).Item("Ledger_MainName").ToString)) <= 30 Then
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                ElseIf Len(Trim(prn_HdDt.Rows(0).Item("Ledger_MainName").ToString)) <= 35 Then
                    p1Font = New Font("Calibri", 9, FontStyle.Bold)
                Else
                    p1Font = New Font("Calibri", 8, FontStyle.Regular)
                End If

                Common_Procedures.Print_To_PrintDocument(e, "     " & "M/S." & prn_HdDt.Rows(0).Item("Ledger_MainName").ToString, LMargin + 10, CurY, 0, 0, p1Font)

                Common_Procedures.Print_To_PrintDocument(e, "DATE", LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Set_Date").ToString)), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Ends_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)
                If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                    If Trim(prn_EmpBm_OpStNo) <> "" Then
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBm_OpStNo) & ")", LMargin + C1 + C2 + C3 + 10 + 10, CurY, 0, 0, p1Font)
                        'Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + C3 + W3 + 10, CurY, 0, 0, pFont)
                        'Common_Procedures.Print_To_PrintDocument(e, "", LMargin + C1 + C2 + C3 + W3 + 25, CurY, 0, 0, pFont)
                    End If
                End If

                YInc = 20

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address1").ToString, LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Count Name", LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Count_Name").ToString), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Tape Length", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("tape_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)

                If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                    Common_Procedures.Print_To_PrintDocument(e, "Rolls Received : ", LMargin + C1 + C2 + C3 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + C3 + W3 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Rcpt), LMargin + C1 + C2 + C3 + W3 + 25, CurY, 0, 0, pFont)
                End If

                YInc = 30

                If Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString) >= 0 Then
                    ExcSht_Str = "Excess Yarn"
                    'ExcSht_Str = "Excess        : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                Else
                    ExcSht_Str = "Short Yarn"
                    'ExcSht_Str = "Short         : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                End If
                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address2").ToString, LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, ExcSht_Str, LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000"), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Beam Width", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Beam_Width_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)

                If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                    If Trim(prn_EmpBm_RcptNo) <> "" Then
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBm_RcptNo) & ")", LMargin + C1 + C2 + C3 + 10 + 10, CurY, 0, 0, p1Font)
                    End If
                End If

                YInc = 45

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address3").ToString, LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Average Count", LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("beam_count").ToString), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Mark", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("pcs_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)

                If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                    Common_Procedures.Print_To_PrintDocument(e, "Consumed Rolls", LMargin + C1 + C2 + C3 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + C3 + W3 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Cons), LMargin + C1 + C2 + C3 + W3 + 25, CurY, 0, 0, pFont)
                End If

                YInc = 25

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address4").ToString, LMargin + 10, CurY, 0, 0, pFont)
                If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                    Common_Procedures.Print_To_PrintDocument(e, "Rolls Delivery", LMargin + C1 + C2 + C3 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + C3 + W3 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Delv), LMargin + C1 + C2 + C3 + W3 + 25, CurY, 0, 0, pFont)
                End If

                CurY = CurY + TxtHgt
                If Trim(prn_HdDt.Rows(0).Item("Ledger_TinNo").ToString) <> "" Then
                    Common_Procedures.Print_To_PrintDocument(e, "     Tin No : " & prn_HdDt.Rows(0).Item("Ledger_TinNo").ToString, LMargin + 10, CurY, 0, 0, pFont)
                End If
                If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                    If Trim(prn_EmpBm_DcNo) <> "" Then
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBm_DcNo) & ")", LMargin + C1 + C2 + C3 + 10 + 10, CurY, 0, 0, p1Font)
                    End If
                End If

                Bal_Bms = prn_EmpBm_Op + prn_EmpBm_Rcpt - prn_EmpBm_Delv - prn_EmpBm_Cons

                YInc = 30

                CurY = CurY + TxtHgt
                If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Rolls", LMargin + C1 + C2 + C3 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + C3 + W3 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bms), LMargin + C1 + C2 + C3 + W3 + 25, CurY, 0, 0, pFont)
                End If

                CurY = CurY + TxtHgt + 5  ' 10
                e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

                e.Graphics.DrawLine(Pens.Black, LMargin + C1, CurY, LMargin + C1, LnAr(2))
                e.Graphics.DrawLine(Pens.Black, LMargin + C1 + C2, CurY, LMargin + C1 + C2, LnAr(2))
                If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                    e.Graphics.DrawLine(Pens.Black, LMargin + C1 + C2 + C3, CurY, LMargin + C1 + C2 + C3, LnAr(2))
                End If
            End If
            LnAr(3) = CurY

            CurY = CurY + TxtHgt - 10
            p1Font = New Font("Calibri", 12, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "WARPING DETAILS", LMargin, CurY, 2, ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), p1Font)
            Common_Procedures.Print_To_PrintDocument(e, "SIZING DETAILS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), p1Font)
            Common_Procedures.Print_To_PrintDocument(e, "PARTICULARS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY + TxtHgt, 2, ClAr(14), p1Font)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY)
            LnAr(4) = CurY

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Meter", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(4), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(5), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "BeamNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 2, ClAr(9), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 2, ClAr(10), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(11), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Pcs", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Meters", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY, 2, ClAr(13), pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(5) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub Printing_Format3_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PageHeight As Single, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal is_LastPage As Boolean)
        Dim p1Font As Font
        Dim Cmp_Name As String
        Dim LS As Single

        Try

            LS = PageHeight - 135

            'If CurY >= LS Then
            '    CurY = CurY + TxtHgt
            'Else
            CurY = LS
            'End If

            'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            'LnAr(6) = CurY

            CurY = CurY + 10

            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            If Len(Trim(Cmp_Name)) > 25 Then
                p1Font = New Font("Calibri", 10, FontStyle.Bold)
            Else
                p1Font = New Font("Calibri", 12, FontStyle.Bold)
            End If
            Common_Procedures.Print_To_PrintDocument(e, "For " & Cmp_Name, PageWidth - 15, CurY, 1, 0, p1Font)
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            'Common_Procedures.Print_To_PrintDocument(e, "Prepared By", LMargin + 20, CurY, 0, 0, pFont)
            'Common_Procedures.Print_To_PrintDocument(e, "Checked By", LMargin + 300, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Authorised Signatory", PageWidth - 15, CurY, 1, 0, pFont)

            CurY = CurY + TxtHgt + 10

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(7) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(1))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(7), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(7), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(1))
            p1Font = New Font("Calibri", 7, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "Software by TSOFT SOLUTIONS, Tirupur. Ph : 8508403222, 0421-4337417", LMargin + 8, CurY + 5, 0, 0, p1Font)

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub Printing_Format4(ByRef e As System.Drawing.Printing.PrintPageEventArgs)
        Dim Cmd As New SqlClient.SqlCommand
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Da2 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim EntryCode As String
        Dim pFont As Font, p1Font As Font, spFont As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single, sTxtHgt As Single, wTxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim ItmNm1 As String = "", ItmNm2 As String = ""
        Dim SNo As Integer
        Dim Det_Top As Single
        Dim i As Integer = 0, j As Integer = 0, k As Integer = 0
        Dim P1 As Single, P2 As Single
        Dim TtWrpEnds As Single
        Dim TtWrpGrsWgt As Single, TtWrpTrWgt As Single, TtWrpNetWgt As Single, TtOYSWgt As Single
        Dim Wpm() As String, WrpYrd As Single
        Dim TtSizBms As Single
        Dim TtSizGrsWgt As Single, TtSizTrWgt As Single, TtSizNetWgt As Single
        Dim TtSizPcs As Single, TtSizMtrs As Single
        Dim PL1 As Single, PL2 As Single
        Dim W1 As Single, W2 As Single
        Dim LF1 As Single, LF2 As Single
        Dim Bal_Yrn_Wt As Single, Bal_Bgs As Single, Bal_Amt As Single
        Dim Bal_Bms As Integer
        Dim NoofItems_PerPage As Integer
        Dim YInc As Single = 0
        Dim NoofDets As Integer = 0
        Dim EmBmPrintSTS As Integer = 0
        Dim OthCntPrintSTS As Integer = 0
        Dim EmpBgPrintSTS As Integer = 0
        Dim Z As Single = 0, X As Single = 0
        Dim YrnTknPrintSTS As Integer = 0
        Dim ByCnPrintSTS As Integer = 0
        Dim Tp_AmtDet As Single = 0
        Dim CurY2 As Single = 0
        'Dim ps As Printing.PaperSize

        Dim pkCustomSize1 As New System.Drawing.Printing.PaperSize("PAPER 9X12", 900, 1200)
        PrintDocument1.PrinterSettings.DefaultPageSettings.PaperSize = pkCustomSize1
        PrintDocument1.DefaultPageSettings.PaperSize = pkCustomSize1

        'For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
        '    'If PrintDocument1.PrinterSettings.PaperSizes(I).Kind = Printing.PaperKind.A4 Then
        '    If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.GermanStandardFanfold Then
        '        ps = PrintDocument1.PrinterSettings.PaperSizes(i)
        '        PrintDocument1.DefaultPageSettings.PaperSize = ps
        '        Exit For
        '    End If
        'Next

        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 30
            .Right = 30
            .Top = 5 ' 10
            .Bottom = 30 ' 45
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        pFont = New Font("Calibri", 11, FontStyle.Regular)
        'printFont = New Font("Draft 12cpi", 10)
        'pFont = New Font("Calibri", 9, FontStyle.Regular)
        'pFont = New Font("Calibri", 9.5, FontStyle.Regular)


        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With

        'TxtHgt = e.Graphics.MeasureString("A", pFont).Height
        TxtHgt = 17.9 ' 18 ' 19  ' 17.75   'e.Graphics.MeasureString("A", pFont).Height  ' 18  ' 20
        'TxtHgt = 17.8 ' e.Graphics.MeasureString("A", pFont).Height  ' 18  ' 20

        Erase LnAr
        Erase ClArr

        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = Val(38) : ClArr(2) = 60 : ClArr(3) = 67 : ClArr(4) = 70 : ClArr(5) = 65 : ClArr(6) = 70
        ClArr(7) = Val(38) : ClArr(8) = 70 : ClArr(9) = 70 : ClArr(10) = 65 : ClArr(11) = 70 : ClArr(12) = 65
        ClArr(13) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12))

        'ClArr(1) = Val(30) : ClArr(2) = 45 : ClArr(3) = 50 : ClArr(4) = 52 : ClArr(5) = 48 : ClArr(6) = 53
        'ClArr(7) = Val(30) : ClArr(8) = 50 : ClArr(9) = 53 : ClArr(10) = 47 : ClArr(11) = 53 : ClArr(12) = 48 : ClArr(13) = 65
        'ClArr(14) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13))

        P1 = ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6)
        P2 = PageWidth - P1

        CurY = TMargin

        NoofItems_PerPage = 32

        EntryCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

        Try

            If prn_HdDt.Rows.Count > 0 Then

                Da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' Order by sl_no", Con)
                Da2.Fill(Dt2)
                If Dt2.Rows.Count > 30 Then
                    TxtHgt = TxtHgt - 1
                End If
                Dt2.Clear()

                '---------------------------------------------------------------------------------------------------- 
                '**********************         STOCK CALCULATION             **********************
                '----------------------------------------------------------------------------------------------------

                prn_Yrn_OpWt = 0 : prn_Yrn_RcptWt = 0 : prn_Yrn_DelvWt = 0
                prn_Yrn_ConsWt = 0 : prn_Yrn_ExShWt = 0
                prn_Yrn_TknWt = 0 : prn_Yrn_BayCnWt = 0
                prn_Yrn_RwExShWt = 0 : prn_Yrn_RwExShStNo = ""
                prn_Yrn_TranfrWt = 0 : prn_Yrn_TranfrNo = ""
                prn_Yrn_ExcSht_Wt = 0 : prn_Yrn_ExcSht_No = ""
                prn_Yrn_OpStNo = "" : prn_Yrn_RcptNo = "" : prn_Yrn_DcNo = ""

                prn_EmpBm_Op = 0 : prn_EmpBm_Rcpt = 0 : prn_EmpBm_Delv = 0 : prn_EmpBm_Cons = 0
                prn_EmpBm_OpStNo = "" : prn_EmpBm_RcptNo = "" : prn_EmpBm_DcNo = ""

                prn_EmpBg_Op = 0 : prn_EmpBg_Rcpt = 0 : prn_EmpBg_Delv = 0
                prn_EmpBg_OpStNo = "" : prn_EmpBg_RcptNo = "" : prn_EmpBg_DcNo = ""

                prn_Amt_Op = 0 : prn_Amt_Rcpt = 0 : prn_Amt_CurSet = 0
                prn_Amt_OpStNo = "" : prn_Amt_RcptNo = ""

                Cmd.Connection = Con

                Cmd.CommandText = "truncate table Temp_Statement_Yarn_Stock_Summary"
                Cmd.ExecuteNonQuery()

                Cmd.CommandText = "truncate table Temp_Statement_Other_Yarn_Stock_Summary"
                Cmd.ExecuteNonQuery()

                Stock_calulation()

                '---------------------------------------------------------------------------------------------------- 
                '**********************         HEADER             **********************
                '----------------------------------------------------------------------------------------------------

                Printing_Format4_PageHeader(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, prn_PageNo, CurY, LnAr, ClArr, NoofItems_PerPage)

                Det_Top = CurY

                If Val(prn_PageNo) <= 1 Then

                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         WARPING DETAILS             **********************
                    '----------------------------------------------------------------------------------------------------

                    Wpm = Split(Trim(prn_HdDt.Rows(0).Item("warp_meters").ToString), ",")


                    Da1 = New SqlClient.SqlDataAdapter("select distinct(Warp_SlNo) from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' Order by Warp_SlNo", Con)
                    Dt1 = New DataTable
                    Da1.Fill(Dt1)

                    If Dt1.Rows.Count > 0 Then

                        If Dt1.Rows.Count > 10 Then
                            wTxtHgt = 17
                        Else
                            wTxtHgt = TxtHgt
                        End If

                        For k = 0 To Dt1.Rows.Count - 1

                            CurY = CurY - 10

                            Da2 = New SqlClient.SqlDataAdapter("select * from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Warp_SlNo = " & Str(Val(Dt1.Rows(k).Item("Warp_SlNo").ToString)) & " Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            WrpYrd = Val(Wpm(k))

                            SNo = 0
                            TtWrpEnds = 0
                            TtWrpGrsWgt = 0 : TtWrpTrWgt = 0 : TtWrpNetWgt = 0

                            If Dt2.Rows.Count > 0 Then

                                For i = 0 To Dt2.Rows.Count - 1

                                    SNo = SNo + 1

                                    CurY = CurY + wTxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + 8, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Ends_Name").ToString)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                                    TtWrpEnds = TtWrpEnds + Val(Dt2.Rows(i).Item("Ends_Name").ToString)
                                    TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                    TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                    TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)

                                Next i

                            End If

                            CurY = CurY + wTxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                            CurY = CurY + wTxtHgt - 10
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtWrpEnds)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                            CurY = CurY + wTxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        Next k

                        'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2), CurY, LMargin + ClArr(1) + ClArr(2), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), LnAr(3))

                    End If


                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         YARN STOCK PARTICULARS              **********************
                    '----------------------------------------------------------------------------------------------------

                    'CurY = Det_Top

                    CurY = CurY + TxtHgt

                    PL1 = LMargin + 5
                    'PL1 = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13)

                    W1 = e.Graphics.MeasureString("Opening Balance   : ", pFont).Width
                    W2 = 120
                    LF1 = 15

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    'p1Font = New Font("Calibri", 13, FontStyle.Bold Or FontStyle.Underline)  ---  Working
                    Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK", PL1 + LF1, CurY, 2, W1 + W2, p1Font)

                    CurY = CurY + TxtHgt + 5

                    Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_OpWt), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_OpStNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Yrn_OpStNo) & ")", PL1 + LF1 + 20, CurY, 0, 0, pFont)
                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Received", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_RcptWt), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_RcptNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Yrn_RcptNo) & ")", PL1 + LF1 + 20, CurY, 0, 0, p1Font)
                    End If

                    If Val(Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn) = 2 Then

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Consumed Yarn", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_ConsWt), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_ExShWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Short Yarn", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Excess Yarn", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        End If

                    Else

                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "Yarn Taken", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_TknWt), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "Baby Cone", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_BayCnWt), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Delivery", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_DelvWt), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_DcNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_Yrn_DcNo) & ")", PL1 + LF1 + 20, CurY, 0, 0, p1Font)
                    End If

                    If Val(prn_Yrn_RwExShWt) <> 0 Then

                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_RwExShWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Short", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Excess", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_RwExShStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Set.No. :  " & Trim(prn_Yrn_RwExShStNo) & ")", PL1 + LF1 + 20, CurY, 0, 0, p1Font)
                        End If

                    End If

                    If Val(prn_Yrn_TranfrWt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_TranfrWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_TranfrWt)), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_TranfrWt)), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_TranfrNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_TranfrNo) & ")", PL1 + LF1 + 20, CurY, 0, 0, p1Font)
                        End If
                    End If

                    If Val(prn_Yrn_ExcSht_Wt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_ExcSht_Wt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Exc)", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExcSht_Wt)), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Sht)", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExcSht_Wt)), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_ExcSht_No) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_ExcSht_No) & ")", PL1 + LF1 + 20, CurY, 0, 0, p1Font)
                        End If
                    End If

                    If Val(Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn) = 2 Then
                        Bal_Yrn_Wt = prn_Yrn_OpWt + prn_Yrn_RcptWt - prn_Yrn_DelvWt - prn_Yrn_ConsWt + prn_Yrn_ExShWt + prn_Yrn_RwExShWt + prn_Yrn_TranfrWt + prn_Yrn_ExcSht_Wt
                    Else
                        Bal_Yrn_Wt = prn_Yrn_OpWt + prn_Yrn_RcptWt - prn_Yrn_DelvWt - prn_Yrn_TknWt + prn_Yrn_BayCnWt + prn_Yrn_RwExShWt + prn_Yrn_TranfrWt + prn_Yrn_ExcSht_Wt
                    End If

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + LF1 + W1 + 20, CurY, PL1 + LF1 + W1 + W2, CurY)

                    CurY = CurY + 10
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Yarn", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Bal_Yrn_Wt), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, p1Font)

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + LF1 + W1 + 20, CurY, PL1 + LF1 + W1 + W2, CurY)


                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         BABY CONE DETAILS              **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_BabyConeDetails) = 1 Then

                        ByCnPrintSTS = 1
                        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then
                            ByCnPrintSTS = 0
                            If MessageBox.Show("Do you want to Print Baby Cone Details...?", "FOR PRINTING...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) = Windows.Forms.DialogResult.Yes Then
                                ByCnPrintSTS = 1
                            End If
                        End If

                        If ByCnPrintSTS = 1 Then

                            YInc = 5

                            CurY = CurY + TxtHgt + 10

                            p1Font = New Font("Calibri", 12, FontStyle.Underline)
                            Common_Procedures.Print_To_PrintDocument(e, "BABYCONE DETAILS", LMargin + ClArr(1), CurY, 2, ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, p1Font)

                            CurY = CurY + TxtHgt + 10

                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)
                            CurY = CurY + YInc

                            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1), CurY, 2, ClArr(2), pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "BAGS", LMargin + ClArr(1) + ClArr(2), CurY, 2, ClArr(3), pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, 2, ClArr(4), pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, 2, ClArr(5) + ClArr(6) - 30, pFont)

                            CurY = CurY + TxtHgt + YInc
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)
                            CurY = CurY + TxtHgt


                            Da2 = New SqlClient.SqlDataAdapter("select * from Specification_BabyCone_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Gross_Weight <> 0 Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            SNo = 0

                            If Dt2.Rows.Count > 0 Then

                                CurY = CurY - TxtHgt - YInc

                                For i = 0 To Dt2.Rows.Count - 1

                                    SNo = SNo + 1

                                    CurY = CurY + TxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + 10, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30 - 5, CurY, 1, 0, pFont)

                                    'TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Bags").ToString)
                                    'TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Cones").ToString)
                                    'TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                                Next i

                            End If

                            CurY = CurY + TxtHgt + YInc
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)

                            CurY = CurY + TxtHgt - YInc
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_gross_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30 - 5, CurY, 1, 0, pFont)

                            CurY = CurY + TxtHgt + YInc
                            Common_Procedures.Print_To_PrintDocument(e, "Tare Weight " & " (" & Format(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString), "########0") & " X " & Format(Val(prn_HdDt.Rows(0).Item("EmptyBag_weight").ToString), "########0.000") & " + " & Format(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString), "########0") & " X " & Format(Val(prn_HdDt.Rows(0).Item("EmptyCone_weight").ToString), "########0.000") & " ) = ", LMargin + 10, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_tare_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30 - 5, CurY, 1, 0, pFont)

                            CurY = CurY + TxtHgt + YInc
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)

                            CurY = CurY + TxtHgt - YInc
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_net_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30 - 5, CurY, 1, 0, pFont)

                            CurY = CurY + TxtHgt + YInc
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)

                        End If

                    End If


                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         YARN STOCK SUMMARY FOR OTHER COUNT    **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_Yarn_Other_Count_Particulars) = 1 Then

                        OthCntPrintSTS = 1
                        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then
                            OthCntPrintSTS = 0
                            If MessageBox.Show("Do you want to Print Other Count Particulars?", "FOR PRINTING...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) = Windows.Forms.DialogResult.Yes Then
                                OthCntPrintSTS = 1
                            End If
                        End If

                        If OthCntPrintSTS = 1 Then

                            CurY = CurY + TxtHgt

                            p1Font = New Font("Calibri", 11, FontStyle.Underline)
                            Common_Procedures.Print_To_PrintDocument(e, "OTHER COUNT PARTICULARS", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                            CurY = CurY + TxtHgt + 5

                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)
                            CurY = CurY + 5

                            Common_Procedures.Print_To_PrintDocument(e, "COUNT NAME", LMargin + ClArr(1) + 15, CurY, 0, ClArr(2) + ClArr(3) + ClArr(4), pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, 2, ClArr(5) + ClArr(6) - ClArr(1), pFont)

                            CurY = CurY + TxtHgt + 5
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)
                            CurY = CurY + TxtHgt

                            Da2 = New SqlClient.SqlDataAdapter("select * from Temp_Statement_Other_Yarn_Stock_Summary where Weight <> 0 Order by Count_Name", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            SNo = 0
                            TtOYSWgt = 0

                            If Dt2.Rows.Count > 0 Then

                                CurY = CurY - TxtHgt - 5

                                For i = 0 To Dt2.Rows.Count - 1

                                    'If NoofDets > NoofItems_PerPage Then
                                    '    CurY = CurY + TxtHgt
                                    '    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)
                                    '    NoofDets = NoofDets + 1
                                    '    Printing_Format3_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, False)
                                    '    e.HasMorePages = True
                                    '    Return
                                    'End If

                                    SNo = SNo + 1

                                    CurY = CurY + TxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(Dt2.Rows(i).Item("Count_Name").ToString), 12), LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)

                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1) - 15, CurY, 1, 0, pFont)

                                    TtOYSWgt = TtOYSWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                                Next i

                            End If

                            CurY = CurY + TxtHgt + 5
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)

                            'CurY = CurY + TxtHgt - 5
                            'Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)
                            'Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtOYSWgt), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1) - 15, CurY, 1, 0, pFont)

                            'CurY = CurY + TxtHgt + 5
                            'e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)

                        End If

                    End If

                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         EMPTY BEAM STOCK DETAILS              **********************
                    '----------------------------------------------------------------------------------------------------

                    EmBmPrintSTS = 1
                    If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then
                        If Val(prn_HdDt.Rows(0).Item("SocietySet_Status").ToString) = 1 Then
                            EmBmPrintSTS = 0
                            If MessageBox.Show("Do you want to Print Empty Beam Details ?", "FOR PRINTING...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) = Windows.Forms.DialogResult.Yes Then
                                EmBmPrintSTS = 1
                            End If
                        End If
                    End If

                    If EmBmPrintSTS = 1 Then

                        CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "EMPTY BEAM STOCK", PL1 + LF1, CurY, 2, W1 + W2, p1Font)

                        CurY = CurY + TxtHgt + 5

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Op), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBm_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBm_OpStNo) & ")", PL1 + LF1 + 20, CurY, 0, 0, pFont)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Beams Received", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Rcpt), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBm_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBm_RcptNo) & ")", PL1 + LF1 + 20, CurY, 0, 0, p1Font)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Consumed Beams", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Cons), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Beams Delivered", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Delv), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBm_DcNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBm_DcNo) & ")", PL1 + LF1 + 20, CurY, 0, 0, p1Font)
                        End If

                        Bal_Bms = prn_EmpBm_Op + prn_EmpBm_Rcpt - prn_EmpBm_Delv - prn_EmpBm_Cons

                        CurY = CurY + TxtHgt
                        e.Graphics.DrawLine(Pens.Black, PL1 + LF1 + W1 + 20, CurY, PL1 + LF1 + W1 + W2 + 5, CurY)

                        CurY = CurY + 10
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance Beams", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bms), PL1 + LF1 + W1 + W2, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, PL1 + LF1 + W1 + 20, CurY, PL1 + LF1 + W1 + W2 + 5, CurY)

                    End If


                End If

                '---------------------------------------------------------------------------------------------------- 
                '**********************         SIZING DETAILS              **********************
                '----------------------------------------------------------------------------------------------------

                spFont = New Font("Calibri", 9, FontStyle.Regular)

                NoofDets = 0

                CurY = Det_Top

                PL2 = LMargin + P1


                Da1 = New SqlClient.SqlDataAdapter("select distinct(Sizing_SlNo) from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' Order by Sizing_SlNo", Con)
                Dt1 = New DataTable
                Da1.Fill(Dt1)

                If Dt1.Rows.Count > 0 Then

                    Z = 0 : X = 0
                    If Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString) <> 0 Then

                        If Val(prn_HdDt.Rows(0).Item("Total_Pavu_Beam").ToString) <> 0 Then

                            Z = Format((Val(prn_HdDt.Rows(0).Item("Total_Warping_Net_Weight").ToString) * Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString) / 100) + Val(prn_HdDt.Rows(0).Item("Total_Warping_Net_Weight").ToString), "#########0.0")
                            X = Format(Z - Val(prn_HdDt.Rows(0).Item("Total_Pavu_Net_Weight").ToString), "#########0.0")
                            X = Format(X / Val(prn_HdDt.Rows(0).Item("Total_Pavu_Beam").ToString), "########0.00")

                        End If

                    End If

                    For k = 0 To Dt1.Rows.Count - 1

                        CurY = CurY - 5  ' 10

                        Da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' and Sizing_SlNo = " & Str(Val(Dt1.Rows(k).Item("Sizing_SlNo").ToString)) & " Order by sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0
                        TtSizBms = 0
                        TtSizGrsWgt = 0 : TtSizTrWgt = 0 : TtSizNetWgt = 0
                        TtSizPcs = 0 : TtSizMtrs = 0

                        If Dt2.Rows.Count > 0 Then

                            If Dt2.Rows.Count > 25 Then
                                sTxtHgt = 16
                            Else
                                sTxtHgt = 17
                            End If

                            For i = 0 To Dt2.Rows.Count - 1

                                'If NoofDets > NoofItems_PerPage Then
                                '    CurY = CurY + TxtHgt
                                '    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)
                                '    NoofDets = NoofDets + 1
                                '    Printing_Format4_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, False)
                                '    e.HasMorePages = True
                                '    NoofDets = 0
                                '    Return
                                'End If

                                If Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString) <> 0 Then
                                    If k = Dt1.Rows.Count - 1 And i = Dt2.Rows.Count - 1 Then
                                        X = Format(Z - Format((Prn_TtSizNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)), "########0.0"), "########0.0")
                                        'X = Format(Z - (TtSizNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString) + X), "########0.0")
                                    End If
                                End If

                                SNo = SNo + 1

                                CurY = CurY + sTxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Beam_No").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString) + X, "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString) + X, "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Noof_Pcs").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Meters").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                                NoofDets = NoofDets + 1

                                TtSizBms = TtSizBms + 1
                                TtSizGrsWgt = TtSizGrsWgt + Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString) + X, "########0.0")
                                TtSizTrWgt = TtSizTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                TtSizNetWgt = TtSizNetWgt + Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString) + X, "########0.0")
                                Prn_TtSizNetWgt = Prn_TtSizNetWgt + Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString) + X, "########0.0")
                                TtSizPcs = TtSizPcs + Val(Dt2.Rows(i).Item("Noof_Pcs").ToString)
                                TtSizMtrs = TtSizMtrs + Val(Dt2.Rows(i).Item("Meters").ToString)

                            Next i

                        End If

                        CurY = CurY + sTxtHgt + 5 ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                        CurY = CurY + sTxtHgt - 5 ' 10
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtSizBms)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizPcs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizMtrs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)


                        CurY = CurY + sTxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                    Next k

                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(3))

                End If

                '---------------------------------------------------------------------------------------------------- 
                '**********************         YARN TAKEN DETAILS              **********************
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_YarnTakenDetails) = 1 Then

                    YrnTknPrintSTS = 1
                    If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then
                        YrnTknPrintSTS = 0
                        If MessageBox.Show("Do you want to Print Yarn Taken Details...?", "FOR PRINTING...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) = Windows.Forms.DialogResult.Yes Then
                            YrnTknPrintSTS = 1
                        End If
                    End If

                    If YrnTknPrintSTS = 1 Then

                        CurY = CurY + TxtHgt + 5 ' 10

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "YARN TAKEN DETAILS", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), p1Font)

                        CurY = CurY + sTxtHgt + 5 ' 10

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)
                        CurY = CurY + 10

                        Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, 2, ClArr(8), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, 2, ClArr(9) + ClArr(10), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "COUNT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, 2, ClArr(11), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, 2, ClArr(12), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, 2, ClArr(13), pFont)

                        CurY = CurY + sTxtHgt + 5 ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)
                        CurY = CurY + sTxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select a.*, b.Count_Name, c.Mill_Name from Specification_YarnTaken_Details a INNER JOIN Count_Head b on a.Count_IdNo = b.Count_IdNo INNER JOIN Mill_Head c on a.Mill_IdNo = c.Mill_IdNo where a.company_idno = " & Str(Val(lbl_Company.Tag)) & " and a.Set_Code = '" & Trim(EntryCode) & "' Order by a.sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - sTxtHgt - 5 ' 10

                            For i = 0 To Dt2.Rows.Count - 1

                                SNo = SNo + 1

                                CurY = CurY + sTxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Mill_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Count_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                            Next i

                        End If

                        CurY = CurY + sTxtHgt + 5  ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                        CurY = CurY + sTxtHgt - 5  '10
                        Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                        'Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_bags").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_yarn_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + sTxtHgt + 5  ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                    End If

                End If


                '---------------------------------------------------------------------------------------------------- 
                '**********************         AMOUNT DETAILS              **********************
                '----------------------------------------------------------------------------------------------------

                Tp_AmtDet = CurY
                If Val(Common_Procedures.settings.StatementPrint_AmountDetails) = 1 Then

                    W1 = e.Graphics.MeasureString("Current Set Amount : ", pFont).Width
                    W2 = 110
                    LF2 = 15

                    If sTxtHgt >= 17 Then
                        sTxtHgt = TxtHgt
                    End If

                    CurY = CurY + sTxtHgt + IIf(sTxtHgt >= 17, 5, 0)

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    Common_Procedures.Print_To_PrintDocument(e, "AMOUNT BALANCE DETAILS", PL2 + LF2, CurY, 2, W1 + W2, p1Font)

                    CurY = CurY + sTxtHgt + IIf(sTxtHgt >= 17, 5, 0)

                    Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL2 + LF2 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL2 + LF2 + W1 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Op)), PL2 + LF2 + W1 + W2, CurY, 1, 0, pFont)

                    If Trim(prn_Amt_OpStNo) <> "" Then
                        CurY = CurY + sTxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Amt_OpStNo) & ")", PL2 + LF2 + 20, CurY, 0, 0, pFont)
                    End If

                    CurY = CurY + sTxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Received Amount", PL2 + LF2 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL2 + LF2 + W1 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Rcpt)), PL2 + LF2 + W1 + W2, CurY, 1, 0, pFont)

                    If Trim(prn_Amt_RcptNo) <> "" Then
                        CurY = CurY + sTxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Amt_RcptNo) & ")", PL2 + LF2 + 20, CurY, 0, 0, p1Font)
                    End If

                    CurY = CurY + sTxtHgt + 2

                    Common_Procedures.Print_To_PrintDocument(e, "Current Set Amount", PL2 + LF2 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL2 + LF2 + W1 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_CurSet)), PL2 + LF2 + W1 + W2, CurY, 1, 0, pFont)

                    Bal_Amt = prn_Amt_Op - prn_Amt_Rcpt + prn_Amt_CurSet

                    CurY = CurY + sTxtHgt + IIf(sTxtHgt >= 17, 10, 5)
                    e.Graphics.DrawLine(Pens.Black, PL2 + LF2 + W1 + 20, CurY, PL2 + LF2 + W1 + W2 + 5, CurY)

                    CurY = CurY + sTxtHgt - IIf(sTxtHgt >= 17, 10, 5)
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Amount", PL2 + LF2 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL2 + LF2 + W1 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(Bal_Amt)), PL2 + LF2 + W1 + W2, CurY, 1, 0, p1Font)

                    CurY = CurY + sTxtHgt + IIf(sTxtHgt >= 17, 10, 5)
                    e.Graphics.DrawLine(Pens.Black, PL2 + LF2 + W1 + 20, CurY, PL2 + LF2 + W1 + W2 + 5, CurY)

                End If

                '---------------------------------------------------------------------------------------------------- 
                '**********************         EMPTY GUNNIES STOCK (SIMPLE)              **********************
                '----------------------------------------------------------------------------------------------------

                CurY2 = 0
                If Val(Common_Procedures.settings.StatementPrint_EmptyBagStockSimple) = 1 Then

                    CurY2 = Tp_AmtDet

                    EmpBgPrintSTS = 1
                    If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then
                        EmpBgPrintSTS = 0
                        If MessageBox.Show("Do you want to Print Empty Gunnies Stock?", "FOR PRINTING...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) = Windows.Forms.DialogResult.Yes Then
                            EmpBgPrintSTS = 1
                        End If
                    End If

                    If EmpBgPrintSTS = 1 Then

                        Bal_Bgs = prn_EmpBg_Op + prn_EmpBg_Rcpt - prn_EmpBg_Delv

                        CurY2 = CurY2 + TxtHgt + 5

                        p1Font = New Font("Calibri", 11, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Empty Gunnies", PL2 + LF2 + W1 + W2 + 20, CurY2, 0, 0, p1Font)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL2 + LF2 + W1 + W2 + W1, CurY2, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bgs), PL2 + LF2 + W1 + W2 + W1 + 20, CurY2, 0, 0, pFont)

                        CurY2 = CurY2 + 10

                    End If

                    If CurY2 > CurY Then
                        CurY = CurY2
                    End If

                End If

                '---------------------------------------------------------------------------------------------------- 
                '**********************         FOOTER             **********************
                '----------------------------------------------------------------------------------------------------

                Printing_Format4_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, True)

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

        e.HasMorePages = False

    End Sub

    Private Sub Printing_Format4_PageHeader(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal NoofItems_PerPage As Integer)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim p1Font As Font
        Dim Cmp_Name As String, Cmp_Add1 As String, Cmp_Add2 As String
        Dim Cmp_PhNo As String, Cmp_TinNo As String, Cmp_CstNo As String
        Dim strHeight As Single
        Dim C1 As Single, C2 As Single, C3 As Single, C4 As Single
        Dim P1 As Single, P2 As Single
        Dim W1 As Single, W2 As Single, W3 As Single
        Dim ExcSht_Str As String
        Dim Bal_Bms As Integer = 0
        Dim YInc As Single = 0
        Dim MilNm1 As String, MilNm2 As String
        Dim I As Integer = 0
        Dim CmpNmAddSTS As Boolean = False

        PageNo = PageNo + 1

        CurY = TMargin

        da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' Order by sl_no", Con)
        da2.Fill(dt2)
        If dt2.Rows.Count > NoofItems_PerPage Then
            Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(PageNo)), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
        End If
        dt2.Clear()

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY

        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
        Cmp_PhNo = "" : Cmp_TinNo = "" : Cmp_CstNo = ""

        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then
            Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address2").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString
        Else
            Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString
        End If

        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = "PHONE NO.:" & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_TinNo").ToString) <> "" Then
            Cmp_TinNo = "TIN NO.: " & prn_HdDt.Rows(0).Item("Company_TinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
            Cmp_CstNo = "CST NO.: " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
        End If

        CmpNmAddSTS = False

        If Trim(Cmp_Name) <> "" And Microsoft.VisualBasic.Len(Trim(Cmp_Name)) > 1 Then
            CurY = CurY + TxtHgt - 10
            p1Font = New Font("Calibri", 18, FontStyle.Bold)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height
            CmpNmAddSTS = True
        End If
        If Trim(Cmp_Add1) <> "" Then
            CurY = CurY + strHeight - 5
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then
                p1Font = New Font("Calibri", 14, FontStyle.Bold)
            Else
                p1Font = New Font("Calibri", 12, FontStyle.Regular)
            End If
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1, LMargin, CurY, 2, PrintWidth, p1Font)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height
            CmpNmAddSTS = True
        End If

        If Trim(Cmp_Add2) <> "" Then
            CurY = CurY + strHeight - 5
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont)
            CmpNmAddSTS = True
        End If

        'CurY = CurY + TxtHgt
        'Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont)
        'If Trim(Cmp_PhNo) <> "" Then
        '    CurY = CurY + TxtHgt
        '    Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, pFont)
        '    CmpNmAddSTS = True
        'End If

        If Trim(Cmp_PhNo) <> "" Or Trim(Cmp_TinNo) <> "" Or Trim(Cmp_TinNo) <> "" Then
            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, Cmp_TinNo, LMargin + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_CstNo, PageWidth - 10, CurY, 1, 0, pFont)
            CmpNmAddSTS = True
        End If

        If CmpNmAddSTS = True Then
            CurY = CurY + TxtHgt + 5  ' 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        End If

        LnAr(2) = CurY

        C1 = 370 ' Val(ClAr(1)) + Val(ClAr(2)) + Val(ClAr(3)) + Val(ClAr(4)) + Val(ClAr(5)) + Val(ClAr(6)) + Val(ClAr(7))
        C2 = 215 ' Val(ClAr(8)) + Val(ClAr(9)) + Val(ClAr(10)) + Val(ClAr(11)) + Val(ClAr(12)) + Val(ClAr(13))
        C3 = PageWidth - (LMargin + C1 + C2)
        C4 = 0

        'End If

        P1 = ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6)
        P2 = PageWidth - P1

        W1 = e.Graphics.MeasureString("Average Count : ", pFont).Width
        W2 = e.Graphics.MeasureString("Tape Length : ", pFont).Width
        W3 = e.Graphics.MeasureString("Consumed Rolls  : ", pFont).Width

        Try

            If Val(PageNo) <= 1 Then

                MilNm1 = Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString)
                MilNm2 = ""
                If Len(MilNm1) > 15 Then
                    For I = 15 To 1 Step -1
                        If Mid$(Trim(MilNm1), I, 1) = " " Or Mid$(Trim(MilNm1), I, 1) = "," Or Mid$(Trim(MilNm1), I, 1) = "." Or Mid$(Trim(MilNm1), I, 1) = "-" Or Mid$(Trim(MilNm1), I, 1) = "/" Or Mid$(Trim(MilNm1), I, 1) = "_" Or Mid$(Trim(MilNm1), I, 1) = "(" Or Mid$(Trim(MilNm1), I, 1) = ")" Or Mid$(Trim(MilNm1), I, 1) = "\" Or Mid$(Trim(MilNm1), I, 1) = "[" Or Mid$(Trim(MilNm1), I, 1) = "]" Or Mid$(Trim(MilNm1), I, 1) = "{" Or Mid$(Trim(MilNm1), I, 1) = "}" Then Exit For
                    Next I
                    If I = 0 Then I = 15
                    MilNm2 = Microsoft.VisualBasic.Right(Trim(MilNm1), Len(MilNm1) - I)
                    MilNm1 = Microsoft.VisualBasic.Left(Trim(MilNm1), I - 1)
                End If

                p1Font = New Font("Calibri", 14, FontStyle.Bold)

                CurY = CurY + TxtHgt - 5
                Common_Procedures.Print_To_PrintDocument(e, "TO : ", LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Set No", LMargin + C1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Set_No").ToString), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font)

                If Len(Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString)) > 15 Then
                    p1Font = New Font("Calibri", 9, FontStyle.Regular)
                Else
                    p1Font = New Font("Calibri", 10, FontStyle.Regular)
                End If

                Common_Procedures.Print_To_PrintDocument(e, "Mill Name", LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(MilNm1), LMargin + C1 + C2 + W2 + 25, CurY, 0, 0, p1Font)
                If Trim(MilNm2) <> "" Then
                    Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(MilNm2), 15), LMargin + C1 + C2 + W2 + 25, CurY + 12, 0, 0, p1Font)
                End If

                YInc = 10
                CurY = CurY + TxtHgt
                If Len(Trim(prn_HdDt.Rows(0).Item("Ledger_MainName").ToString)) <= 30 Then
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                ElseIf Len(Trim(prn_HdDt.Rows(0).Item("Ledger_MainName").ToString)) <= 35 Then
                    p1Font = New Font("Calibri", 9, FontStyle.Bold)
                Else
                    p1Font = New Font("Calibri", 8, FontStyle.Regular)
                End If

                Common_Procedures.Print_To_PrintDocument(e, "     " & "M/S." & prn_HdDt.Rows(0).Item("Ledger_MainName").ToString, LMargin + 10, CurY, 0, 0, p1Font)

                Common_Procedures.Print_To_PrintDocument(e, "DATE", LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Set_Date").ToString)), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Ends_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)

                YInc = 20

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address1").ToString, LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Count Name", LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Count_Name").ToString), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Tape Length", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("tape_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)


                YInc = 30

                If Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString) >= 0 Then
                    ExcSht_Str = "Excess Yarn"
                    'ExcSht_Str = "Excess        : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                Else
                    ExcSht_Str = "Short Yarn"
                    'ExcSht_Str = "Short         : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                End If
                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address2").ToString, LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, ExcSht_Str, LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000"), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Beam Width", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Beam_Width_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)


                YInc = 45

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address3").ToString, LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Average Count", LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("beam_count").ToString), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Mark", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("pcs_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)

                YInc = 25

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address4").ToString, LMargin + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                If Trim(prn_HdDt.Rows(0).Item("Ledger_TinNo").ToString) <> "" Then
                    Common_Procedures.Print_To_PrintDocument(e, "     Tin No : " & prn_HdDt.Rows(0).Item("Ledger_TinNo").ToString, LMargin + 10, CurY, 0, 0, pFont)
                End If

                CurY = CurY + TxtHgt + 15
                e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

                e.Graphics.DrawLine(Pens.Black, LMargin + C1, CurY, LMargin + C1, LnAr(2))
                e.Graphics.DrawLine(Pens.Black, LMargin + C1 + C2, CurY, LMargin + C1 + C2, LnAr(2))

            End If
            LnAr(3) = CurY

            CurY = CurY + TxtHgt - 10
            p1Font = New Font("Calibri", 12, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "WARPING DETAILS", LMargin, CurY, 2, P1, p1Font)
            Common_Procedures.Print_To_PrintDocument(e, "SIZING DETAILS", LMargin + P1, CurY, 2, P2, p1Font)


            'Common_Procedures.Print_To_PrintDocument(e, "WARPING DETAILS", LMargin, CurY, 2, ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), p1Font)
            'Common_Procedures.Print_To_PrintDocument(e, "SIZING DETAILS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), p1Font)
            'Common_Procedures.Print_To_PrintDocument(e, "PARTICULARS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY + TxtHgt, 2, ClAr(14), p1Font)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY)
            LnAr(4) = CurY

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Meter", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(4), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(5), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "BeamNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 2, ClAr(9), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 2, ClAr(10), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(11), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Pcs", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Meters", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY, 2, ClAr(13), pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(5) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub Printing_Format4_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PageHeight As Single, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal is_LastPage As Boolean)
        Dim p1Font As Font
        Dim Cmp_Name As String
        Dim LS As Single
        Dim STS As Boolean = False

        Try

            LS = PageHeight - 125

            STS = True
            If CurY >= LS Then
                CurY = CurY + TxtHgt
                STS = False
            Else
                CurY = LS
            End If

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, PageWidth, CurY)
            'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(6) = CurY

            CurY = CurY + 10

            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            p1Font = New Font("Calibri", 12, FontStyle.Bold)
            Common_Procedures.Print_To_PrintDocument(e, "For " & Cmp_Name, PageWidth - 15, CurY, 1, 0, p1Font)

            If STS = True Then
                CurY = CurY + TxtHgt
                'CurY = CurY + TxtHgt
            End If

            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            'Common_Procedures.Print_To_PrintDocument(e, "Prepared By", LMargin + 20, CurY, 0, 0, pFont)
            'Common_Procedures.Print_To_PrintDocument(e, "Checked By", LMargin + 300, CurY, 0, 0, pFont)

            Common_Procedures.Print_To_PrintDocument(e, "Checked By", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + 20, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Authorised Signatory", PageWidth - 15, CurY, 1, 0, pFont)
            CurY = CurY + TxtHgt + 10

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(7) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(1))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(7), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(6), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(1))
            p1Font = New Font("Calibri", 7, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "Software by TSOFT SOLUTIONS, Tirupur. Ph : 8508403222, 0421-4337417", LMargin + 8, CurY + 5, 0, 0, p1Font)

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub Printing_Format5(ByRef e As System.Drawing.Printing.PrintPageEventArgs)
        Dim Cmd As New SqlClient.SqlCommand
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Da2 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim EntryCode As String
        Dim pFont As Font, p1Font As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single, SzTxtHgt As Single
        Dim LnAr(15) As Single, ClArr(20) As Single
        Dim ItmNm1 As String = "", ItmNm2 As String = ""
        Dim SNo As Integer
        Dim Det_Top As Single
        Dim i As Integer = 0, j As Integer = 0, k As Integer = 0
        Dim TtWrpEnds As Single
        Dim TtWrpGrsWgt As Single, TtWrpTrWgt As Single, TtWrpNetWgt As Single
        Dim Wpm() As String, WrpYrd As Single
        Dim TtSizBms As Single
        Dim TtSizGrsWgt As Single, TtSizTrWgt As Single, TtSizNetWgt As Single
        Dim TtSizPcs As Single, TtSizMtrs As Single
        Dim TtYSBgs As Single, TtYSCns As Single, TtYSWgt As Single
        Dim TtOYSWgt As Single
        Dim PL1 As Single, InvLft As Single
        Dim W1 As Single
        Dim Bal_Yrn_Wt As Single, Bal_Bms As Single, Bal_Bgs As Single, Bal_Amt As Single
        Dim NoofItems_PerPage As Integer
        Dim ps As Printing.PaperSize
        Dim OthCntPrintSTS As Integer = 0
        Dim InvClW1 As Single, InvClW2 As Single, InvClW3 As Single, InvClW4 As Single
        Dim NoofInvDets As Integer = 0
        Dim InvTxt1 As String, InvTxt2 As String
        Dim InvNetAmt As Double, InvRndOff As Double
        Dim prn_Siz_Detail As Integer = 0
        Dim Z As Single = 0, X As Single = 0
        Dim YrnTknPrintSTS As Integer = 0
        Dim ByCnPrintSTS As Integer = 0
        Dim Tp_AmtDet As Single = 0
        Dim CurY2 As Single = 0
        Dim Y1 As Single = 0, Y2 As Single = 0
        Dim nMillName As String
        Dim TtWrYards As Single

        For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(i)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                Exit For
            End If
        Next

        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 10 ' 20
            .Right = 50 ' 40
            .Top = 15  ' 30
            .Bottom = 25
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        pFont = New Font("Calibri", 9, FontStyle.Regular)
        'pFont = New Font("Calibri", 10, FontStyle.Regular)

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With

        'TxtHgt = e.Graphics.MeasureString("A", pFont).Height  ' 20
        TxtHgt = 15 ' 16  ' 17   ' 18  ' e.Graphics.MeasureString("A", pFont).Height  ' 20
        SzTxtHgt = 15

        Erase LnAr
        Erase ClArr

        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        ClArr = New Single(20) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1047" Then '---- Mahalakshmi Textiles (Somanur)
            ClArr(1) = Val(30) : ClArr(2) = 52 : ClArr(3) = 62 : ClArr(4) = 0 : ClArr(5) = 0 : ClArr(6) = 62
            ClArr(7) = Val(30) : ClArr(8) = 65 : ClArr(9) = 0 : ClArr(10) = 0 : ClArr(11) = 60 : ClArr(12) = 50 : ClArr(13) = 70 : ClArr(14) = 50
        Else
            ClArr(1) = Val(30) : ClArr(2) = 50 : ClArr(3) = 60 : ClArr(4) = 0 : ClArr(5) = 0 : ClArr(6) = 60
            ClArr(7) = Val(25) : ClArr(8) = 50 : ClArr(9) = 52 : ClArr(10) = 46 : ClArr(11) = 48 : ClArr(12) = 44 : ClArr(13) = 60 : ClArr(14) = 40
        End If
        ClArr(15) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14))

        'ClArr(1) = Val(25) : ClArr(2) = 40 : ClArr(3) = 48 : ClArr(4) = 50 : ClArr(5) = 46 : ClArr(6) = 48
        'ClArr(7) = Val(25) : ClArr(8) = 50 : ClArr(9) = 52 : ClArr(10) = 46 : ClArr(11) = 48 : ClArr(12) = 44 : ClArr(13) = 60
        'ClArr(14) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13))

        CurY = TMargin

        NoofItems_PerPage = 30

        EntryCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

        Try

            If prn_HdDt.Rows.Count > 0 Then

                prn_Yrn_OpWt = 0 : prn_Yrn_RcptWt = 0 : prn_Yrn_DelvWt = 0
                prn_Yrn_ConsWt = 0 : prn_Yrn_ExShWt = 0
                prn_Yrn_OpStNo = "" : prn_Yrn_RcptNo = "" : prn_Yrn_DcNo = ""

                prn_EmpBm_Op = 0 : prn_EmpBm_Rcpt = 0 : prn_EmpBm_Delv = 0 : prn_EmpBm_Cons = 0
                prn_EmpBm_OpStNo = "" : prn_EmpBm_RcptNo = "" : prn_EmpBm_DcNo = ""

                prn_EmpBg_Op = 0 : prn_EmpBg_Rcpt = 0 : prn_EmpBg_Delv = 0
                prn_EmpBg_OpStNo = "" : prn_EmpBg_RcptNo = "" : prn_EmpBg_DcNo = ""

                prn_Amt_Op = 0 : prn_Amt_Rcpt = 0 : prn_Amt_CurSet = 0
                prn_Amt_OpStNo = "" : prn_Amt_RcptNo = ""

                Cmd.Connection = Con
                Cmd.CommandText = "truncate table Temp_Statement_Yarn_Stock_Summary"
                Cmd.ExecuteNonQuery()

                Stock_calulation()

                Printing_Format5_PageHeader(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, prn_PageNo, CurY, LnAr, ClArr)

                Det_Top = CurY

                If Val(prn_PageNo) <= 1 Then

                    '----------------------------------------------------------------------------------------------------
                    '**********************     WARPING DETAILS     **********************
                    '----------------------------------------------------------------------------------------------------

                    Wpm = Split(Trim(prn_HdDt.Rows(0).Item("warp_meters").ToString), ",")

                    Da1 = New SqlClient.SqlDataAdapter("select distinct(Warp_SlNo) from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' Order by Warp_SlNo", Con)
                    Dt1 = New DataTable
                    Da1.Fill(Dt1)

                    If Dt1.Rows.Count > 0 Then

                        For k = 0 To Dt1.Rows.Count - 1

                            CurY = CurY - 10

                            Da2 = New SqlClient.SqlDataAdapter("select * from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Warp_SlNo = " & Str(Val(Dt1.Rows(k).Item("Warp_SlNo").ToString)) & " Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            WrpYrd = Val(Wpm(k))

                            SNo = 0
                            TtWrpEnds = 0
                            TtWrpGrsWgt = 0 : TtWrpTrWgt = 0 : TtWrpNetWgt = 0

                            If Dt2.Rows.Count > 0 Then

                                For i = 0 To Dt2.Rows.Count - 1

                                    SNo = SNo + 1

                                    CurY = CurY + TxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + 8, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Ends_Name").ToString)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                    If Val(ClArr(4)) <> 0 Then
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                    End If
                                    If Val(ClArr(5)) <> 0 Then
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                                    End If
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                                    TtWrpEnds = TtWrpEnds + Val(Dt2.Rows(i).Item("Ends_Name").ToString)
                                    TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                    TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                    TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)
                                    TtWrYards = TtWrYards + Val(Dt2.Rows(i).Item("warp_meters").ToString)
                                Next i

                            End If

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                            CurY = CurY + TxtHgt - 10
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtWrpEnds)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)

                            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1102" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1348" Then
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtWrYards)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                            Else
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                            End If

                            'Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                            If Val(ClArr(4)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                            End If
                            If Val(ClArr(5)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                            End If
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        Next k

                        'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2), CurY, LMargin + ClArr(1) + ClArr(2), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3), LnAr(4))
                        If Val(ClArr(4)) <> 0 Then
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), LnAr(4))
                        End If
                        If Val(ClArr(5)) <> 0 Then
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), LnAr(4))
                        End If
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), LnAr(3))

                    End If

                End If

                '----------------------------------------------------------------------------------------------------
                '**********************     BABY CONE DETAILS       ***************  (Space not enough so diabled,  , If babyCone Details in Single(Only total bags), then it is ok and can be enabled)
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_BabyConeDetails) = 1 Then

                    If Val(prn_PageNo) <= 1 Then

                        CurY = CurY + TxtHgt ' + 10
                        'CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                        'p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "BABYCONE DETAILS", LMargin + ClArr(1), CurY, 2, ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), p1Font)

                        CurY = CurY + TxtHgt + 5 ' + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), CurY)
                        CurY = CurY + 5 ' + 10

                        Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin, CurY, 2, ClArr(1), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "BAGS", LMargin + ClArr(1), CurY, 2, ClArr(2), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2), CurY, 2, ClArr(3), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, 2, ClArr(5) + (ClArr(6)), pFont)

                        'Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1), CurY, 2, ClArr(2), pFont)
                        'Common_Procedures.Print_To_PrintDocument(e, "BAGS", LMargin + ClArr(1) + ClArr(2), CurY, 2, ClArr(3), pFont)
                        'Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, 2, ClArr(4), pFont)
                        'Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, 2, ClArr(5) + (ClArr(6) \ 2), pFont)

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + 5, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6)), CurY)
                        CurY = CurY + TxtHgt


                        Da2 = New SqlClient.SqlDataAdapter("select * from Specification_BabyCone_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Gross_Weight <> 0 Order by sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - 10

                            For i = 0 To Dt2.Rows.Count - 1

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + 10, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Bags").ToString)), LMargin + ClArr(1) + ClArr(2) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6)) - 5, CurY, 1, 0, pFont)

                                'Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + 10, CurY, 0, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2) - 5, CurY, 1, 0, pFont)


                                'TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Bags").ToString)
                                'TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Cones").ToString)
                                'TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + 5, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6)), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString)), LMargin + ClArr(1) + ClArr(2) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_gross_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6)) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 5 ' + 10
                        Common_Procedures.Print_To_PrintDocument(e, "Tare Weight ", LMargin + ClArr(1) + ClArr(2) + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_tare_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6)) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + 5, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6)), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString)), LMargin + ClArr(1) + ClArr(2) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_net_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6)) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + 5, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6)), CurY)

                    End If

                End If

                '---------------------------------------------------------------------------------------------------- 
                '**********************         YARN STOCK SUMMARY FOR OTHER COUNT    **********************
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_Yarn_Other_Count_Particulars) = 1 Then

                    If Val(prn_PageNo) <= 1 Then

                        CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "OTHER COUNT PARTICULARS", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                        CurY = CurY + TxtHgt + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)
                        CurY = CurY + 5

                        Common_Procedures.Print_To_PrintDocument(e, "COUNT NAME", LMargin + ClArr(1) + 15, CurY, 0, ClArr(2) + ClArr(3) + ClArr(4), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, 2, ClArr(5) + ClArr(6) - ClArr(1), pFont)

                        CurY = CurY + TxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)
                        CurY = CurY + TxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select * from Temp_Statement_Other_Yarn_Stock_Summary where Weight <> 0 Order by Count_Name", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0
                        TtOYSWgt = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - 5

                            For i = 0 To Dt2.Rows.Count - 1

                                'If NoofDets > NoofItems_PerPage Then
                                '    CurY = CurY + TxtHgt
                                '    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)
                                '    NoofDets = NoofDets + 1
                                '    Printing_Format3_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, False)
                                '    e.HasMorePages = True
                                '    Return
                                'End If

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(Dt2.Rows(i).Item("Count_Name").ToString), 12), LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)

                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1) - 15, CurY, 1, 0, pFont)

                                TtOYSWgt = TtOYSWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)

                    End If

                End If

                '----------------------------------------------------------------------------------------------------
                '**********************      YARN STOCK SUMMARY FOR THIS SET'S COUNT        **********************
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_YarnStockSummary) = 1 Then

                    If Val(prn_PageNo) <= 1 Or Prn_YrnStkSumm_2ndPage_STS = True Then

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK SUMMARY", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                        CurY = CurY + TxtHgt + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)
                        CurY = CurY + 10

                        Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + 2, CurY, 2, ClArr(1) + 15, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + ClArr(1) + 15, CurY, 2, ClArr(2) + ClArr(3) - 15 + ClArr(4) - 25, pFont)
                        If Val(ClArr(4)) <> 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 25, CurY, 2, ClArr(5), pFont)
                        End If
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 25, CurY, 2, ClArr(6) + 25, pFont)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)
                        CurY = CurY + TxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select * from Temp_Statement_Yarn_Stock_Summary where Weight <> 0 Order by Order_By, Mill_Name", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0
                        TtYSBgs = 0 : TtYSCns = 0 : TtYSWgt = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - 10

                            For i = Prn_YrnStkSumm_StartIndx To Dt2.Rows.Count - 1

                                If CurY >= 975 Then

                                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                                    CurY = CurY + TxtHgt
                                    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, p1Font)
                                    CurY = CurY + 5

                                    Prn_YrnStkSumm_2ndPage_STS = True
                                    Prn_YrnStkSumm_StartIndx = i

                                    GoTo YRNSTKSUMM_1000
                                End If

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(Dt2.Rows(i).Item("Mill_Name").ToString), 12), LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)
                                If Val(ClArr(4)) <> 0 Then
                                    Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 25 + ClArr(5) - 5, CurY, 1, 0, pFont)
                                End If
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                                Prn_TtYSBgs = Prn_TtYSBgs + Val(Dt2.Rows(i).Item("Bags").ToString)
                                Prn_TtYSCns = Prn_TtYSCns + Val(Dt2.Rows(i).Item("Cones").ToString)
                                Prn_TtYSWgt = Prn_TtYSWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)
                        If Val(ClArr(4)) <> 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, Val(Prn_TtYSCns), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 25 - 5, CurY, 1, 0, pFont)
                        End If
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtYSWgt), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        Prn_YrnStkSumm_2ndPage_STS = False

                    End If

                End If

YRNSTKSUMM_1000:
                '----------------------------------------------------------------------------------------------------
                '**********************      YARN STOCK DETAILS     **********************
                '----------------------------------------------------------------------------------------------------

                CurY = Det_Top

                CurY = CurY + 3

                PL1 = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14)

                W1 = e.Graphics.MeasureString("Opening Balance : ", pFont).Width

                If Val(prn_PageNo) <= 1 Then

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    'p1Font = New Font("Calibri", 13, FontStyle.Bold Or FontStyle.Underline)  ---  Working
                    Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                    CurY = CurY + TxtHgt + 5

                    Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_OpWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_OpStNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Yrn_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Received", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_RcptWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_RcptNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Yrn_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Consumed Yarn", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_ConsWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    CurY = CurY + TxtHgt
                    If Val(prn_Yrn_ExShWt) < 0 Then
                        Common_Procedures.Print_To_PrintDocument(e, "Short Yarn", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    Else
                        Common_Procedures.Print_To_PrintDocument(e, "Excess Yarn", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    End If

                    CurY = CurY + TxtHgt
                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Delivery", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_DelvWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_DcNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_Yrn_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    If Val(prn_Yrn_RwExShWt) <> 0 Then

                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_RwExShWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Short", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Excess", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_RwExShStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Set.No. :  " & Trim(prn_Yrn_RwExShStNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                    End If

                    If Val(prn_Yrn_TranfrWt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_TranfrWt) < 0 Then

                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Math.Abs(Val(prn_Yrn_TranfrWt))), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else

                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Math.Abs(Val(prn_Yrn_TranfrWt))), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_TranfrNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_TranfrNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                    End If

                    If Val(prn_Yrn_ExcSht_Wt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_ExcSht_Wt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Exc)", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Math.Abs(Val(prn_Yrn_ExcSht_Wt))), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else

                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Sht)", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Math.Abs(Val(prn_Yrn_ExcSht_Wt))), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_ExcSht_No) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_ExcSht_No) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                    End If


                    Bal_Yrn_Wt = prn_Yrn_OpWt + prn_Yrn_RcptWt - prn_Yrn_DelvWt - prn_Yrn_ConsWt + prn_Yrn_ExShWt + prn_Yrn_RwExShWt + prn_Yrn_TranfrWt + prn_Yrn_ExcSht_Wt

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    CurY = CurY + 10
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Yarn", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Bal_Yrn_Wt), "#########0.000"), PageWidth - 5, CurY, 1, 0, p1Font)

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                End If

                '----------------------------------------------------------------------------------------------------
                '**********************      EMPTY BEAM STOCK DETAILS       **********************
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then

                    If Val(prn_PageNo) <= 1 Then

                        CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "EMPTY BEAM STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                        CurY = CurY + TxtHgt + 5

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Op), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBm_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBm_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Beams Received", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Rcpt), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBm_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBm_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Consumed Beams", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Cons), PageWidth - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Beams Delivered", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Delv), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBm_DcNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBm_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        Bal_Bms = prn_EmpBm_Op + prn_EmpBm_Rcpt - prn_EmpBm_Delv - prn_EmpBm_Cons

                        CurY = CurY + TxtHgt
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                        CurY = CurY + 10
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance Beams", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bms), PageWidth - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    End If

                End If

                '----------------------------------------------------------------------------------------------------
                '**********************      EMPTY BAG STOCK DETAILS        **********************
                '----------------------------------------------------------------------------------------------------
                If Val(Common_Procedures.settings.StatementPrint_EmptyBagStockDetails) = 1 Then

                    If Val(prn_PageNo) <= 1 Then

                        CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "EMPTY BAGS STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                        CurY = CurY + TxtHgt + 5

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Op), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBg_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Bags Received", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Rcpt), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBg_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If


                        CurY = CurY + TxtHgt + 2

                        Common_Procedures.Print_To_PrintDocument(e, "Bags Delivered", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Delv), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_DcNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBg_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        Bal_Bgs = prn_EmpBg_Op + prn_EmpBg_Rcpt - prn_EmpBg_Delv

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                        CurY = CurY + TxtHgt - 10
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance Bags", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bgs), PageWidth - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    End If

                End If

                '---------------------------------------------------------------------------------------------------- 
                '**********************         EMPTY GUNNIES STOCK (SIMPLE)              **********************
                '----------------------------------------------------------------------------------------------------

                If Val(prn_PageNo) <= 1 Then

                    If Val(Common_Procedures.settings.StatementPrint_EmptyBagStockSimple) = 1 Then

                        Bal_Bgs = prn_EmpBg_Op + prn_EmpBg_Rcpt - prn_EmpBg_Delv

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "EMPTY BAGS STOCK", PL1 + 5, CurY, 0, 0, p1Font)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PageWidth - 52, CurY, 0, 0, pFont)
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bgs), PageWidth - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + 5

                    End If

                End If

                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1102" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1163" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1144" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1348" Then '---- Ganesh karthik Sizing (Somanur)
                    If Val(prn_PageNo) <= 1 Then
                        If Trim(prn_HdDt.Rows(0).Item("remarks").ToString) <> "" Then


                            CurY = CurY + TxtHgt + 10
                            If Common_Procedures.settings.CustomerCode = "1102" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1348" Then
                                Y1 = CurY + 0.5
                                Y2 = CurY + TxtHgt + 5
                                p1Font = New Font("Cambria", 10, FontStyle.Bold)
                                Common_Procedures.FillRegionRectangle(e, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14), Y1, PageWidth, Y2)

                                Common_Procedures.Print_To_PrintDocument_GK(e, "WARP BREAKS  ", PL1 + 5, CurY, 0, 0, p1Font)
                                Common_Procedures.Print_To_PrintDocument_GK(e, ":", PageWidth - 52, CurY, 0, 0, pFont)

                                Common_Procedures.Print_To_PrintDocument_GK(e, prn_HdDt.Rows(0).Item("remarks").ToString, PageWidth - 5, CurY, 1, 0, p1Font)
                            Else
                                p1Font = New Font("Calibri", 11, FontStyle.Regular)
                                Common_Procedures.Print_To_PrintDocument(e, "WARP BREAKS  ", PL1 + 5, CurY, 0, 0, p1Font)
                                Common_Procedures.Print_To_PrintDocument(e, ":", PageWidth - 52, CurY, 0, 0, pFont)
                                p1Font = New Font("Calibri", 10, FontStyle.Bold)
                                Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("remarks").ToString, PageWidth - 5, CurY, 1, 0, p1Font)
                            End If




                            If Common_Procedures.settings.CustomerCode <> "1102" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1348" Then
                                CurY = CurY + TxtHgt + 10
                                p1Font = New Font("Calibri", 11, FontStyle.Regular)
                                Common_Procedures.Print_To_PrintDocument(e, "PICK UP %   ", PL1 + 5, CurY, 0, 0, p1Font)
                                Common_Procedures.Print_To_PrintDocument(e, ":", PageWidth - 52, CurY, 0, 0, pFont)
                                p1Font = New Font("Calibri", 10, FontStyle.Bold)
                                Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("pickup_percentage").ToString & " %", PageWidth - 5, CurY, 1, 0, p1Font)
                            End If

                            CurY = CurY + 5


                        End If

                    End If

                End If

                '----------------------------------------------------------------------------------------------------
                '**********************          AMOUNT DETAILS     **********************
                '----------------------------------------------------------------------------------------------------

                If Val(prn_PageNo) <= 1 Then

                    If Val(Common_Procedures.settings.StatementPrint_AmountDetails) = 1 Then

                        W1 = e.Graphics.MeasureString("Opening Balance  : ", pFont).Width

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "AMOUNT BALANCE DETAILS", PL1, CurY, 2, ClArr(14), p1Font)

                        CurY = CurY + TxtHgt + 5

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Op)), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_Amt_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Amt_OpStNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "Received Amount", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Rcpt)), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_Amt_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Amt_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If


                        CurY = CurY + TxtHgt + 2
                        Common_Procedures.Print_To_PrintDocument(e, "Set Amount", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_CurSet)), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1042" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1310" Then '---- RajaMurugan Sizing (Karumanthapatti)
                            CurY = CurY + TxtHgt + 2
                            Common_Procedures.Print_To_PrintDocument(e, "Discount Amount ", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(-1 * prn_Disc_Amt_CurSet)), PageWidth - 5, CurY, 1, 0, pFont)

                            Bal_Amt = ((prn_Amt_Op - Math.Abs(prn_Amt_Rcpt)) + prn_Amt_CurSet) - prn_Disc_Amt_CurSet
                        Else
                            Bal_Amt = (prn_Amt_Op - prn_Amt_Rcpt + prn_Amt_CurSet)
                        End If



                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                        CurY = CurY + TxtHgt - 10
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance Amount", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(Bal_Amt)), PageWidth - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    End If

                End If

                '-------------------------------------------------------------------------------------------------
                '**********************         PICK UP %             **********************
                '-------------------------------------------------------------------------------------------------

                If Val(prn_PageNo) <= 1 Then

                    If Val(Common_Procedures.settings.StatementPrint_PickUp_Percentage) = 1 Then

                        CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "Pickup %", PL1 + 5, CurY, 0, 0, p1Font)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        p1Font = New Font("Calibri", 11, FontStyle.Bold)
                        If Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString) <> 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString), "#########0.00") & " %", PageWidth - 5, CurY, 1, 0, p1Font)
                        Else
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("pickup_percentage").ToString), "#########0.00") & " %", PageWidth - 5, CurY, 1, 0, p1Font)
                        End If

                        CurY = CurY + 5

                    End If

                End If
                '-------------------------------------------------------------------------------------------------
                '**********************         ELONGATION UP %             **********************
                '-------------------------------------------------------------------------------------------------

                If Val(prn_PageNo) <= 1 Then

                    If Val(Common_Procedures.settings.StatementPrint_Elongation_Percentage) = 1 Then

                        CurY = CurY + TxtHgt
                        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "Elongation %", PL1 + 5, CurY, 0, 0, p1Font)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        p1Font = New Font("Calibri", 11, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("elongation_percentage").ToString), "#########0.00") & " %", PageWidth - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + 5

                    End If

                End If

                '----------------------------------------------------------------------------------------------------
                '**********************          YARN RECEIPT DETAILS     **********************
                '----------------------------------------------------------------------------------------------------
                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1102" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1144" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1348" Then

                    If Val(prn_PageNo) <= 1 Then

                        '   If Val(Common_Procedures.settings.StatementPrint_AmountDetails) = 1 Then

                        W1 = e.Graphics.MeasureString("Opening Balance  : ", pFont).Width

                        '-------------------
                        Dim Tot_Yrn As Double = 0

                        Da1 = New SqlClient.SqlDataAdapter("select  Name1, Name2 , Weight1  from " & Trim(Common_Procedures.EntryTempTable) & " ", Con)
                        Dt1 = New DataTable
                        Da1.Fill(Dt1)

                        If Dt1.Rows.Count > 0 Then

                            CurY = CurY + TxtHgt + 10

                            p1Font = New Font("Calibri", 11, FontStyle.Underline)
                            Common_Procedures.Print_To_PrintDocument(e, "YARN RECEIPT DETAILS", PL1, CurY, 2, ClArr(14), p1Font)

                            CurY = CurY + TxtHgt + 5
                            Common_Procedures.Print_To_PrintDocument(e, "Rec No", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "Mill", PL1 + 80, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "Weight", PageWidth - 5, CurY, 1, 0, pFont)
                            CurY = CurY + 5

                            e.Graphics.DrawLine(Pens.Black, PL1, CurY + TxtHgt, PageWidth, CurY + TxtHgt)
                            For i = 0 To Dt1.Rows.Count - 1
                                CurY = CurY + TxtHgt
                                p1Font = New Font("Calibri", 8, FontStyle.Regular)
                                nMillName = Dt1.Rows(i).Item("Name2").ToString
                                Common_Procedures.Print_To_PrintDocument(e, Dt1.Rows(i).Item("Name1").ToString, PL1 + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(nMillName), 17), PL1 + 40, CurY, 0, 0, p1Font)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt1.Rows(i).Item("Weight1").ToString), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)
                                Tot_Yrn = Tot_Yrn + Format(Val(Dt1.Rows(i).Item("Weight1").ToString), "#########0.000")
                            Next

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                            CurY = CurY + TxtHgt - 10
                            p1Font = New Font("Calibri", 10, FontStyle.Bold)
                            Common_Procedures.Print_To_PrintDocument(e, "Total", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Tot_Yrn), "#########0.000"), PageWidth - 5, CurY, 1, 0, p1Font)

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)
                        End If
                        '------------------------------------------------------
                    End If

                End If

                '----------------------------------------------------------------------------------------------------
                '**********************      SIZING DETAILS     **********************
                '----------------------------------------------------------------------------------------------------

                CurY = Det_Top


                If Val(prn_PageNo) <= 1 Or Prn_SizingDetails_2ndPage_STS = True Then

                    Da1 = New SqlClient.SqlDataAdapter("select distinct(Sizing_SlNo) from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' Order by Sizing_SlNo", Con)
                    Dt1 = New DataTable
                    Da1.Fill(Dt1)

                    If Dt1.Rows.Count > 0 Then

                        Z = 0 : X = 0
                        If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1042" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1310" Then
                            If Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString) <> 0 Then

                                If Val(prn_HdDt.Rows(0).Item("Total_Pavu_Beam").ToString) <> 0 Then

                                    Z = Format((Val(prn_HdDt.Rows(0).Item("Total_Warping_Net_Weight").ToString) * Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString) / 100) + Val(prn_HdDt.Rows(0).Item("Total_Warping_Net_Weight").ToString), "#########0.0")
                                    X = Format(Z - Val(prn_HdDt.Rows(0).Item("Total_Pavu_Net_Weight").ToString), "#########0.0")
                                    X = Format(X / Val(prn_HdDt.Rows(0).Item("Total_Pavu_Beam").ToString), "########0.00")

                                End If

                            End If
                        End If

                        For k = 0 To Dt1.Rows.Count - 1

                            CurY = CurY - 10

                            Da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and Sizing_SlNo = " & Str(Val(Dt1.Rows(k).Item("Sizing_SlNo").ToString)) & " Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            SNo = 0
                            TtSizBms = 0
                            TtSizGrsWgt = 0 : TtSizTrWgt = 0 : TtSizNetWgt = 0
                            TtSizPcs = 0 : TtSizMtrs = 0
                            Prn_TtSizBms = 0 ' Prn_TtSizBms + 1
                            Prn_TtSizGrsWgt = 0
                            Prn_TtSizTrWgt = 0
                            Prn_TtSizNetWgt = 0
                            Prn_TtSizPcs = 0
                            Prn_TtSizMtrs = 0

                            If Dt2.Rows.Count > 0 Then

                                For i = Prn_SizingDetails_StartIndx To Dt2.Rows.Count - 1

                                    If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1036" Then
                                        prn_Siz_Detail = 38
                                    Else
                                        prn_Siz_Detail = 45
                                    End If


                                    If (i > 0 And i Mod prn_Siz_Detail = 0 And Prn_SizingDetails_2ndPage_STS = False) Or CurY >= 1100 Then

                                        If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1042" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1310" Then
                                            If Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString) <> 0 Then
                                                If k = Dt1.Rows.Count - 1 And i = Dt2.Rows.Count - 1 Then
                                                    X = Format(Z - Format((Prn_TtSizNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)), "########0.0"), "########0.0")
                                                    'X = Format(Z - (TtSizNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString) + X), "########0.0")
                                                End If
                                            End If
                                        End If

                                        p1Font = New Font("Calibri", 9.5, FontStyle.Bold)
                                        CurY = CurY + TxtHgt + 5
                                        Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14) - 5, CurY, 1, 0, p1Font)

                                        CurY = CurY + TxtHgt + 5 ' 10
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14), CurY)

                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), LnAr(4))


                                        If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1036" Then
                                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), LnAr(4))
                                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), LnAr(4))
                                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(4))

                                        Else
                                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + 10, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + 10, LnAr(4))
                                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + 25, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + 25, LnAr(4))
                                            ' e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(4))

                                        End If

                                        'e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), LnAr(4))
                                        'e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), LnAr(4))
                                        'e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(4))


                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14), LnAr(3))

                                        Prn_SizingDetails_2ndPage_STS = True
                                        Prn_SizingDetails_StartIndx = i
                                        Prn_YrnTknDet_2ndPage_STS = True
                                        Prn_SizInvoice_2ndPage_STS = True

                                        GoTo SIZDET_1000

                                    End If


                                    SNo = SNo + 1

                                    CurY = CurY + SzTxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Sl_No").ToString) - (k * 100)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 2, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Beam_No").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                    If Val(ClArr(9)) <> 0 Then
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString) + X, "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                                    End If
                                    If Val(ClArr(10)) <> 0 Then
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                                    End If

                                    If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1036" Then
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString) + X, "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                                        If Val(Dt2.Rows(i).Item("Noof_Pcs").ToString) <> 0 Then
                                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Noof_Pcs").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                        End If
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Meters").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                                        If Val(Dt2.Rows(i).Item("Meters_Pc").ToString) <> 0 Then
                                            Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Meters_Pc").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14) - 5, CurY, 1, 0, pFont)
                                        End If

                                    Else
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString) + X, "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + 5, CurY, 1, 0, pFont)
                                        If Val(Dt2.Rows(i).Item("Noof_Pcs").ToString) <> 0 Then
                                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Noof_Pcs").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + 15, CurY, 1, 0, pFont)
                                        End If
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Meters").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14) - 5, CurY, 1, 0, pFont)

                                    End If


                                    Prn_TtSizBms = Prn_TtSizBms + 1
                                    Prn_TtSizGrsWgt = Prn_TtSizGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString) + X
                                    Prn_TtSizTrWgt = Prn_TtSizTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                    Prn_TtSizNetWgt = Prn_TtSizNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString) + X
                                    Prn_TtSizPcs = Prn_TtSizPcs + Val(Dt2.Rows(i).Item("Noof_Pcs").ToString)
                                    Prn_TtSizMtrs = Prn_TtSizMtrs + Val(Dt2.Rows(i).Item("Meters").ToString)

                                Next i

                            End If

                            CurY = CurY + SzTxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14), CurY)

                            CurY = CurY + SzTxtHgt - 10
                            'Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Prn_TtSizBms)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                            If Val(ClArr(9)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                            End If
                            If Val(ClArr(10)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                            End If
                            If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1036" Then
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizPcs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizMtrs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                            Else
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizPcs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + 15, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizMtrs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14) - 5, CurY, 1, 0, pFont)

                            End If

                            CurY = CurY + SzTxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14), CurY)

                        Next k

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), LnAr(4))
                        If Val(ClArr(9)) <> 0 Then
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), LnAr(4))
                        End If
                        If Val(ClArr(9)) <> 0 Then
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), LnAr(4))
                        End If

                        If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1036" Then
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), LnAr(4))
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), LnAr(4))
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(4))

                        Else
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + 10, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + 10, LnAr(4))
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + 25, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + 25, LnAr(4))
                            ' e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(4))

                        End If

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14), LnAr(3))

                        Prn_SizingDetails_2ndPage_STS = False

                    End If

                End If

SIZDET_1000:
                '----------------------------------------------------------------------------------------------------
                '*****************      YARN TAKEN DETAILS     ************* 
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_YarnTakenDetails) = 1 Then

                    If Val(prn_PageNo) <= 1 Or Prn_YrnTknDet_2ndPage_STS = True Then

                        If CurY >= 1050 Then
                            Prn_YrnTknDet_2ndPage_STS = True
                            Prn_SizInvoice_2ndPage_STS = True
                            GoTo YRNTKNDET_1000
                        End If

                        CurY = CurY + SzTxtHgt   ' + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                        'p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "YARN TAKEN DETAILS", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), p1Font)

                        CurY = CurY + SzTxtHgt + 3  ' + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + 40, CurY)
                        CurY = CurY + 5

                        Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, 2, ClArr(8), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, 2, ClArr(9) + ClArr(10), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "COUNT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + 40, CurY, 2, ClArr(11), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + 40, CurY, 2, ClArr(12), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + 40, CurY, 2, ClArr(13), pFont)

                        CurY = CurY + SzTxtHgt + 5   ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + 40, CurY)
                        CurY = CurY + SzTxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select a.*, b.Count_Name, c.Mill_Name from Specification_YarnTaken_Details a INNER JOIN Count_Head b on a.Count_IdNo = b.Count_IdNo INNER JOIN Mill_Head c on a.Mill_IdNo = c.Mill_IdNo where a.company_idno = " & Str(Val(lbl_Company.Tag)) & " and a.Set_Code = '" & Trim(EntryCode) & "' Order by a.sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - SzTxtHgt - 10

                            For i = Prn_YrnTknDet_StartIndx To Dt2.Rows.Count - 1

                                If CurY >= 1100 Then

                                    p1Font = New Font("Calibri", 10, FontStyle.Bold)

                                    CurY = CurY + TxtHgt
                                    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, p1Font)
                                    CurY = CurY + 5 ' 10

                                    Prn_YrnTknDet_2ndPage_STS = True
                                    Prn_SizInvoice_2ndPage_STS = True
                                    Prn_YrnTknDet_StartIndx = i

                                    GoTo YRNTKNDET_1000

                                End If

                                SNo = SNo + 1

                                CurY = CurY + SzTxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Mill_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Count_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + 55, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + 40 - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + 40 - 5, CurY, 1, 0, pFont)

                            Next i

                        End If

                        CurY = CurY + SzTxtHgt + 5  ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + 40, CurY)

                        CurY = CurY + SzTxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                        'Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_bags").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + 40 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_yarn_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + 40 - 5, CurY, 1, 0, pFont)

                        CurY = CurY + SzTxtHgt + 5  ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + 40, CurY)

                        Prn_YrnTknDet_2ndPage_STS = False

                    End If

                Else
                    Prn_YrnTknDet_2ndPage_STS = False

                End If


YRNTKNDET_1000:

                '----------------------------------------------------------------------------------------------------
                '**********************      INVOCIE DETAILS    **********************
                '----------------------------------------------------------------------------------------------------

                If StmtPrint_InvDetails_Status = True Then

                    If Val(prn_PageNo) <= 1 Or Prn_SizInvoice_2ndPage_STS = True Then

                        If CurY >= 900 Then

                            Dim LS As Single

                            LS = PageHeight - 150

                            If CurY >= LS Then
                                CurY = CurY + TxtHgt
                            Else
                                CurY = LS
                            End If

                            p1Font = New Font("Calibri", 10, FontStyle.Bold)
                            Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14) - 5, CurY, 1, 0, p1Font)
                            CurY = CurY + 5 ' 10

                            Prn_SizInvoice_2ndPage_STS = True
                            GoTo SIZINVOICE_1000
                        End If

                        If Val(ClArr(9) + ClArr(10)) = 0 Then
                            InvLft = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6)
                            InvClW1 = ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + 45 : InvClW2 = ClArr(11) + 10 : InvClW3 = ClArr(12) + 2

                        Else
                            InvLft = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6)
                            InvClW1 = ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + 10 : InvClW2 = ClArr(11) + 10 : InvClW3 = ClArr(12) + 10

                            'InvLft = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 100
                            'InvClW1 = ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 20 : InvClW2 = ClArr(11) - 30 : InvClW3 = ClArr(12) - 30
                        End If
                        InvClW4 = (ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14)) - (InvClW1 + InvClW2 + InvClW3)

                        CurY = CurY + SzTxtHgt '+ 10

                        p1Font = New Font("Calibri", 11, FontStyle.Bold)
                        'p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "INVOICE DETAILS", InvLft, CurY, 2, InvClW1 + InvClW2 + InvClW3 + InvClW4, p1Font)

                        CurY = CurY + SzTxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, InvLft, CurY, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4, CurY)

                        CurY = CurY + SzTxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, "INVOCIE NO.  :  " & prn_HdDt.Rows(0).Item("Invoice_No").ToString, InvLft + 10, CurY, 0, 0, pFont)

                        If Val(ClArr(9) + ClArr(10)) = 0 Then
                            If Trim(prn_HdDt.Rows(0).Item("Invoice_Date").ToString) <> "" Then
                                If IsDBNull(prn_HdDt.Rows(0).Item("Invoice_Date").ToString) = False Then
                                    Common_Procedures.Print_To_PrintDocument(e, "INVOICE DATE  :  " & Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Invoice_Date").ToString)), InvLft + InvClW1 + 10, CurY, 0, 0, pFont)
                                Else
                                    Common_Procedures.Print_To_PrintDocument(e, "INVOICE DATE  :  ", InvLft + InvClW1 + 50, CurY, 0, 0, pFont)
                                End If
                            End If

                        Else

                            If Trim(prn_HdDt.Rows(0).Item("Invoice_Date").ToString) <> "" Then
                                If IsDBNull(prn_HdDt.Rows(0).Item("Invoice_Date").ToString) = False Then
                                    Common_Procedures.Print_To_PrintDocument(e, "INVOICE DATE  :  " & Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Invoice_Date").ToString)), InvLft + InvClW1 + 10, CurY, 0, 0, pFont)
                                Else
                                    Common_Procedures.Print_To_PrintDocument(e, "INVOICE DATE  :  ", InvLft + InvClW1 + 10, CurY, 0, 0, pFont)
                                End If

                            End If

                        End If


                        CurY = CurY + SzTxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, InvLft, CurY, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4, CurY)

                        CurY = CurY + SzTxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, "PARTICULARS", InvLft, CurY, 2, InvClW1, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "QUANTITY", InvLft + InvClW1, CurY, 2, InvClW2, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "RATE", InvLft + InvClW1 + InvClW2, CurY, 2, InvClW3, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "AMOUNT", InvLft + InvClW1 + InvClW2 + InvClW3, CurY, 2, InvClW4, pFont)

                        CurY = CurY + SzTxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, InvLft, CurY, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4, CurY)

                        p1Font = New Font("Calibri", 8, FontStyle.Regular)

                        NoofInvDets = 0

                        CurY = CurY - 5

                        If Val(prn_HdDt.Rows(0).Item("Sizing_Amount1").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Sizing_Text1").ToString), InvLft + 5, CurY, 0, 0, p1Font)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Weight1").ToString, InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Rate1").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Amount1").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1
                        End If

                        If Val(prn_HdDt.Rows(0).Item("Sizing_Amount2").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Text2").ToString, InvLft + 5, CurY, 0, 0, p1Font)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Weight2").ToString, InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Rate2").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Amount2").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1
                        End If
                        If Val(prn_HdDt.Rows(0).Item("Sizing_Amount3").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Text3").ToString, InvLft + 5, CurY, 0, 0, p1Font)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Weight3").ToString, InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Rate3").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Amount3").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1
                        End If

                        If Val(prn_HdDt.Rows(0).Item("pack_Amt").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt

                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Packing_Text").ToString, InvLft + 5, CurY, 0, 0, p1Font)
                            Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("Packing_Beam").ToString), InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Pack_Rate").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("pack_Amt").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1
                        End If

                        If Val(prn_HdDt.Rows(0).Item("Rewind_Amt").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Rewinding_Text").ToString, InvLft + 5, CurY, 0, 0, p1Font)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Rewind_Qty").ToString, InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Rewind_Rate").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Rewind_Amt").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1
                        End If

                        If Val(prn_HdDt.Rows(0).Item("weld_Amt").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt

                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Welding_Text").ToString, InvLft + 5, CurY, 0, 0, p1Font)
                            Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("Welding_Beam").ToString), InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Weld_Rate").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("weld_Amt").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1

                        End If

                        If Val(prn_HdDt.Rows(0).Item("Sampleset_Amount").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sampleset_Text").ToString, InvLft + 5, CurY, 0, 0, p1Font)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sampleset_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1
                        End If

                        If Val(prn_HdDt.Rows(0).Item("Vanrent_Amount").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Vanrent_Text").ToString, InvLft + 5, CurY, 0, 0, p1Font)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Vanrent_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1
                        End If

                        If Val(prn_HdDt.Rows(0).Item("Other_Chrg").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("OtherCharges_Text").ToString, InvLft + 5, CurY, 0, 0, p1Font)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Other_Chrg").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1
                        End If

                        If Val(prn_HdDt.Rows(0).Item("Disc_Amt").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt

                            If Trim(UCase(prn_HdDt.Rows(0).Item("Discount_Type").ToString)) = "PERCENTAGE" Then
                                InvTxt1 = Trim(prn_HdDt.Rows(0).Item("Discount_Text").ToString) & "  @ " & Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString) & " %"
                                InvTxt2 = ""

                            Else
                                If Common_Procedures.settings.CustomerCode = "1102" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1348" Then
                                    InvTxt1 = Trim(prn_HdDt.Rows(0).Item("Discount_Text").ToString) & "  @ " & Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString) & " Rupees/Kg"
                                Else
                                    InvTxt1 = Trim(prn_HdDt.Rows(0).Item("Discount_Text").ToString) & "  @ " & Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString) & " Paise/Kg"
                                End If

                                InvTxt2 = ""
                                'If Val(Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString)) = Val(Format(Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString), "#########0.00").ToString) Then
                                '    InvTxt2 = Format(Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString), "#########0.00").ToString
                                'Else
                                '    InvTxt2 = Format(Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString), "#########0.000").ToString
                                'End If

                            End If

                            Common_Procedures.Print_To_PrintDocument(e, InvTxt1, InvLft + 5, CurY, 0, 0, p1Font)
                            'Common_Procedures.Print_To_PrintDocument(e, InvTxt2, InvLft + InvClW1 + InvClW2 + InvClW3  - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("Disc_Amt").ToString), InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1

                        End If

                        'For i = NoofInvDets + 1 To 10
                        '    CurY = CurY + TxtHgt
                        'Next

                        If Val(prn_HdDt.Rows(0).Item("CGST_Amount").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, "CGST - " & prn_HdDt.Rows(0).Item("CGST_Percentage").ToString & " %", InvLft + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("CGST_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1
                        End If

                        If Val(prn_HdDt.Rows(0).Item("SGST_Amount").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, "SGST - " & prn_HdDt.Rows(0).Item("SGST_Percentage").ToString & " %", InvLft + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("SGST_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1
                        End If

                        If Val(prn_HdDt.Rows(0).Item("IGST_Amount").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, "IGST - " & prn_HdDt.Rows(0).Item("IGST_Percentage").ToString & " %", InvLft + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("IGST_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1
                        End If

                        'For i = NoofInvDets + 1 To 10
                        '    CurY = CurY + TxtHgt
                        'Next

                        InvNetAmt = Val(prn_HdDt.Rows(0).Item("Sizing_Amount1").ToString) + Val(prn_HdDt.Rows(0).Item("Sizing_Amount2").ToString) + Val(prn_HdDt.Rows(0).Item("Sizing_Amount3").ToString) + Val(prn_HdDt.Rows(0).Item("Vat_Amount1").ToString) + Val(prn_HdDt.Rows(0).Item("Vat_Amount2").ToString) + Val(prn_HdDt.Rows(0).Item("SampleSet_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("VanRent_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("Pack_Amt").ToString) + Val(prn_HdDt.Rows(0).Item("Rewind_Amt").ToString) + Val(prn_HdDt.Rows(0).Item("Weld_Amt").ToString) + Val(prn_HdDt.Rows(0).Item("Other_Chrg").ToString) - Val(prn_HdDt.Rows(0).Item("Disc_Amt").ToString) + Val(prn_HdDt.Rows(0).Item("CGST_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("sGST_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("iGST_Amount").ToString)

                        'InvNetAmt = Val(prn_HdDt.Rows(0).Item("Sizing_Amount1").ToString) + Val(prn_HdDt.Rows(0).Item("Sizing_Amount2").ToString) + Val(prn_HdDt.Rows(0).Item("Sizing_Amount3").ToString) + Val(prn_HdDt.Rows(0).Item("Vat_Amount1").ToString) + Val(prn_HdDt.Rows(0).Item("Vat_Amount2").ToString) + Val(prn_HdDt.Rows(0).Item("SampleSet_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("VanRent_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("Packing_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("Rewinding_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("Welding_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("OtherCharges_Amount").ToString) - Val(prn_HdDt.Rows(0).Item("Discount_Amount").ToString)

                        InvRndOff = Val(prn_HdDt.Rows(0).Item("Net_Amount").ToString) - Val(InvNetAmt)
                        CurY = CurY + SzTxtHgt
                        If Val(InvRndOff) <> 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "ROUND OFF", InvLft + 5, CurY, 0, 0, p1Font)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(InvRndOff), "########0.00"), InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1
                        End If

                        CurY = CurY + SzTxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, InvLft, CurY, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4, CurY)

                        CurY = CurY + SzTxtHgt - 5
                        p1Font = New Font("Calibri", 9, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "NET AMOUNT", InvLft + InvClW1 + InvClW2, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Net_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + SzTxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, InvLft, CurY, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4, CurY)

                        Prn_SizInvoice_2ndPage_STS = False

                    End If

                Else
                    Prn_SizInvoice_2ndPage_STS = False

                End If

SIZINVOICE_1000:

                '---------- FOOTER

                Printing_Format5_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, True)

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

        If Prn_YrnStkSumm_2ndPage_STS = True Or Prn_SizingDetails_2ndPage_STS = True Or Prn_YrnTknDet_2ndPage_STS = True Or Prn_SizInvoice_2ndPage_STS = True Then
            Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(prn_PageNo)), PageWidth - 10, TMargin - TxtHgt, 1, 0, pFont)
            e.HasMorePages = True

        Else

            If Trim(prn_InpOpts) <> "" Then
                If prn_Count < Len(Trim(prn_InpOpts)) Then


                    If Val(prn_InpOpts) <> "0" Then
                        prn_DetIndx = 0
                        prn_DetSNo = 0
                        prn_PageNo = 0

                        e.HasMorePages = True
                        Return
                    End If

                End If
            End If

            e.HasMorePages = False

        End If

    End Sub

    Private Sub Printing_Format5_PageHeader(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim p1Font As Font
        Dim Cmp_Name As String, Cmp_Add1 As String, Cmp_Add2 As String
        Dim Cmp_PhNo As String, Cmp_Email As String, Cmp_TinNo As String, Cmp_CstNo As String
        Dim strHeight As Single
        Dim C1 As Single, C2 As Single, C3 As Single
        Dim W1 As Single, W2 As Single
        Dim ExcSht_Str As String
        Dim PrntCompHeading As Boolean = False
        Dim Cmp_StateCap As String, Cmp_StateNm As String, Cmp_StateCode As String, Cmp_GSTIN_Cap As String, Cmp_GSTIN_No As String
        Dim Gst_dt As Date
        Dim Entry_dt As Date
        Dim CurX As Single = 0
        Dim strWidth As Single = 0
        Dim S As String = ""
        Dim Ledname1 As String
        Dim Ledname2 As String
        Dim i As Integer

        PageNo = PageNo + 1

        CurY = TMargin

        'da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' Order by sl_no", Con)
        'dt2 = New DataTable
        'da2.Fill(dt2)
        'If dt2.Rows.Count > 30 Then
        '    Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(PageNo)), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
        'End If
        'dt2.Clear()

        prn_Count = prn_Count + 1

        prn_OriDupTri = ""
        If Trim(prn_InpOpts) <> "" Then
            If prn_Count <= Len(Trim(prn_InpOpts)) Then

                S = Mid$(Trim(prn_InpOpts), prn_Count, 1)

                If Val(S) = 1 Then
                    prn_OriDupTri = "ORIGINAL"
                ElseIf Val(S) = 2 Then
                    prn_OriDupTri = "DUPLICATE"
                ElseIf Val(S) = 3 Then
                    prn_OriDupTri = "TRIPLICATE"
                ElseIf Val(S) = 4 Then
                    prn_OriDupTri = "EXTRA COPY"
                Else
                    If Trim(prn_InpOpts) <> "0" And Val(prn_InpOpts) = "0" And Len(Trim(prn_InpOpts)) > 3 Then
                        prn_OriDupTri = Trim(prn_InpOpts)
                    End If
                End If

            End If
        End If

        If Trim(prn_OriDupTri) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, Trim(prn_OriDupTri), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
        End If

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY

        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
        Cmp_PhNo = "" : Cmp_Email = "" : Cmp_TinNo = "" : Cmp_CstNo = ""
        Cmp_StateCap = "" : Cmp_StateNm = "" : Cmp_StateCode = "" : Cmp_GSTIN_Cap = "" : Cmp_GSTIN_No = ""

        If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            Cmp_Name = Replace(Cmp_Name, Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString), "")
            Cmp_Add1 = Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString)
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        Else
            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        End If

        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = "PHONE NO.:" & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_EMail").ToString) <> "" Then
            Cmp_Email = "EMail : " & prn_HdDt.Rows(0).Item("Company_EMail").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_TinNo").ToString) <> "" Then
            Cmp_TinNo = "TIN NO.: " & prn_HdDt.Rows(0).Item("Company_TinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
            Cmp_CstNo = "CST NO.: " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_State_Name").ToString) <> "" Then
            Cmp_StateCap = "STATE : "
            Cmp_StateNm = prn_HdDt.Rows(0).Item("Company_State_Name").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_State_Code").ToString) <> "" Then
            Cmp_StateCode = "CODE :" & prn_HdDt.Rows(0).Item("Company_State_Code").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString) <> "" Then
            Cmp_GSTIN_Cap = "GSTIN : "
            Cmp_GSTIN_No = prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString
        End If

        PrntCompHeading = True
        If StmtPrint_InvDetails_Status = True Then
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1038" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1047" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1037" Then '---- Prakash Sizing & Mahalakshmi Sizing
                PrntCompHeading = False

            ElseIf Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) = "UNACCOUNT" Then
                PrntCompHeading = False

            End If

        Else
            If Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) = "UNACCOUNT" Then
                PrntCompHeading = False

            End If

        End If

        If PrntCompHeading = True Then

            CurY = CurY + TxtHgt - 10
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1348" Then '---- ATHAVAN TEXS SIZING UNIT (SOMANUR)  or  HARI RAM COTTON SIZING UNIT (SOMANUR)
                p1Font = New Font("Brush Script MT", 30, FontStyle.Bold Or FontStyle.Italic)
            Else
                p1Font = New Font("Calibri", 14, FontStyle.Bold)
            End If

            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1043" Then '---- Selvanayaki Sizing (Karumanthapatti)
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font, Brushes.Red)
            Else
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font)
            End If

            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            CurY = CurY + strHeight
            If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
                p1Font = New Font("Calibri", 12, FontStyle.Bold)
            Else
                p1Font = New Font("Calibri", 9, FontStyle.Regular)
            End If
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1043" Then '---- Selvanayaki Sizing (Karumanthapatti)
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1, LMargin, CurY, 2, PrintWidth, p1Font, Brushes.Green)
            Else
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1, LMargin, CurY, 2, PrintWidth, p1Font)
            End If

            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            CurY = CurY + TxtHgt
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1043" Then '---- Selvanayaki Sizing (Karumanthapatti)
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont, Brushes.Green)
            Else
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont)
            End If

            CurY = CurY + TxtHgt
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1043" Then '---- Selvanayaki Sizing (Karumanthapatti)
                Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, pFont, Brushes.Green)
            Else
                Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, pFont)
            End If

            CurY = CurY + TxtHgt
            Gst_dt = #7/1/2017#
            Entry_dt = dtp_Date.Value

            If DateDiff("d", Gst_dt.ToShortDateString, Entry_dt.ToShortDateString) < 0 Then

                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1043" Then '---- Selvanayaki Sizing (Karumanthapatti)
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_TinNo, LMargin + 10, CurY, 0, 0, pFont, Brushes.Green)
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_Email, LMargin, CurY, 2, PrintWidth, pFont, Brushes.Green)
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_CstNo, PageWidth - 10, CurY, 1, 0, pFont, Brushes.Green)
                Else
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_TinNo, LMargin + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_Email, LMargin, CurY, 2, PrintWidth, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_CstNo, PageWidth - 10, CurY, 1, 0, pFont)
                End If

            Else

                p1Font = New Font("Calibri", 11, FontStyle.Bold)
                strWidth = e.Graphics.MeasureString(Trim(Cmp_StateCap & Cmp_GSTIN_Cap), p1Font).Width
                strWidth = e.Graphics.MeasureString(Trim(Cmp_StateCap & Cmp_StateNm & "     " & Cmp_GSTIN_Cap & Cmp_GSTIN_No), pFont).Width
                If PrintWidth > strWidth Then
                    CurX = LMargin + (PrintWidth - strWidth) / 2
                Else
                    CurX = LMargin
                End If

                p1Font = New Font("Calibri", 11, FontStyle.Bold)
                Common_Procedures.Print_To_PrintDocument(e, Cmp_StateCap, CurX, CurY, 0, 0, p1Font)
                strWidth = e.Graphics.MeasureString(Cmp_StateCap, p1Font).Width
                CurX = CurX + strWidth
                Common_Procedures.Print_To_PrintDocument(e, Cmp_StateNm, CurX, CurY, 0, 0, pFont)

                strWidth = e.Graphics.MeasureString(Cmp_StateNm, pFont).Width
                p1Font = New Font("Calibri", 11, FontStyle.Bold)
                CurX = CurX + strWidth
                Common_Procedures.Print_To_PrintDocument(e, "     " & Cmp_GSTIN_Cap, CurX, CurY, 0, PrintWidth, p1Font)
                strWidth = e.Graphics.MeasureString("     " & Cmp_GSTIN_Cap, p1Font).Width
                CurX = CurX + strWidth
                Common_Procedures.Print_To_PrintDocument(e, Cmp_GSTIN_No, CurX, CurY, 0, 0, pFont)

            End If



            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

        End If

        LnAr(2) = CurY

        C1 = 340 ' Val(ClAr(1)) + Val(ClAr(2)) + Val(ClAr(3)) + Val(ClAr(4)) + Val(ClAr(5)) + Val(ClAr(6)) + Val(ClAr(7))
        C2 = 190  '215 ' Val(ClAr(8)) + Val(ClAr(9)) + Val(ClAr(10)) + Val(ClAr(11)) + Val(ClAr(12)) + Val(ClAr(13))
        C3 = PageWidth - (LMargin + C1 + C2)

        W1 = e.Graphics.MeasureString("Average Count : ", pFont).Width
        W2 = e.Graphics.MeasureString("Tape Length : ", pFont).Width  ' 20

        Try

            If Val(PageNo) <= 1 Then

                p1Font = New Font("Calibri", 12, FontStyle.Bold)
                strHeight = e.Graphics.MeasureString("Average Count : ", p1Font).Height

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "TO : ", LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Set No", LMargin + C1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Set_No").ToString), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font)
                Common_Procedures.Print_To_PrintDocument(e, "Mill Name", LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString), 15), LMargin + C1 + C2 + W2 + 25, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Set No    : " & Trim(prn_HdDt.Rows(0).Item("Set_No").ToString), LMargin + C1 + 10, CurY, 0, 0, p1Font)
                'Common_Procedures.Print_To_PrintDocument(e, "Mill : " & Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                Ledname1 = Trim(prn_HdDt.Rows(0).Item("Ledger_MainName").ToString)
                '  End If

                Ledname2 = ""

                If Len(Ledname1) > 40 Then
                    For i = 40 To 1 Step -1
                        If Mid$(Trim(Ledname1), i, 1) = " " Or Mid$(Trim(Ledname1), i, 1) = "," Or Mid$(Trim(Ledname1), i, 1) = "." Or Mid$(Trim(Ledname1), i, 1) = "-" Or Mid$(Trim(Ledname1), i, 1) = "/" Or Mid$(Trim(Ledname1), i, 1) = "_" Or Mid$(Trim(Ledname1), i, 1) = "(" Or Mid$(Trim(Ledname1), i, 1) = ")" Or Mid$(Trim(Ledname1), i, 1) = "\" Or Mid$(Trim(Ledname1), i, 1) = "[" Or Mid$(Trim(Ledname1), i, 1) = "]" Or Mid$(Trim(Ledname1), i, 1) = "{" Or Mid$(Trim(Ledname1), i, 1) = "}" Then Exit For
                    Next i
                    If i = 0 Then i = 40
                    Ledname2 = Microsoft.VisualBasic.Right(Trim(Ledname1), Len(Ledname1) - i)
                    Ledname1 = Microsoft.VisualBasic.Left(Trim(Ledname1), i - 1)
                End If

                CurY = CurY + strHeight
                p1Font = New Font("Calibri", 9, FontStyle.Bold)
                'Common_Procedures.Print_To_PrintDocument(e, "     " & "M/S." & prn_HdDt.Rows(0).Item("Ledger_MainName").ToString, LMargin + 10, CurY, 0, 0, p1Font)
                Common_Procedures.Print_To_PrintDocument(e, "     " & "M/S." & Ledname1, LMargin + 10, CurY, 0, 0, p1Font)

                If Trim(Ledname2) <> "" Then
                    CurY = CurY + TxtHgt
                    Common_Procedures.Print_To_PrintDocument(e, "     " & Trim(Ledname2), LMargin + 10, CurY, 0, 0, p1Font)
                    'NoofDets = NoofDets + 1
                End If

                Common_Procedures.Print_To_PrintDocument(e, "DATE", LMargin + C1 + 10, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Set_Date").ToString), "dd-MM-yyyy").ToString, LMargin + C1 + W1 + 25, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + C1 + C2 + 10, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Ends_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + 3, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "DATE                 :  " & Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Set_Date").ToString)), LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Ends : " & Trim(prn_HdDt.Rows(0).Item("Ends_Name").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address1").ToString, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Count Name", LMargin + C1 + 10, CurY + 9, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + 9, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Count_Name").ToString), LMargin + C1 + W1 + 25, CurY + 9, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Tape Length", LMargin + C1 + C2 + 10, CurY + 9, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 9, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("tape_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY + 9, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Count Name : " & Trim(prn_HdDt.Rows(0).Item("Count_Name").ToString), LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Tape Length : " & Trim(prn_HdDt.Rows(0).Item("tape_length").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                If Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString) >= 0 Then
                    ExcSht_Str = "Excess"
                    'ExcSht_Str = "Excess        : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                Else
                    ExcSht_Str = "Short"
                    'ExcSht_Str = "Short         : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                End If
                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address2").ToString, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ExcSht_Str, LMargin + C1 + 10, CurY + 14, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + 14, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000"), LMargin + C1 + W1 + 25, CurY + 14, 0, 0, pFont)

                If Common_Procedures.settings.CustomerCode <> "1144" Then
                    Common_Procedures.Print_To_PrintDocument(e, "Beam Width", LMargin + C1 + C2 + 10, CurY + 14, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 14, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Beam_Width_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + 14, 0, 0, pFont)
                Else
                    Common_Procedures.Print_To_PrintDocument(e, "BAGS ", LMargin + C1 + C2 + 10, CurY + 14, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 14, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Trim(Mill_Bags), LMargin + C1 + C2 + W2 + 25, CurY + 14, 0, 0, pFont)
                End If








                'Common_Procedures.Print_To_PrintDocument(e, ExcSht_Str, LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Beam Width : " & Trim(prn_HdDt.Rows(0).Item("Beam_Width_Name").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address3").ToString, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Average Count", LMargin + C1 + 10, CurY + 18, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + 18, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("beam_count").ToString), LMargin + C1 + W1 + 25, CurY + 18, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Mark", LMargin + C1 + C2 + 10, CurY + 18, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 18, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("pcs_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY + 18, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Average Count : " & Trim(prn_HdDt.Rows(0).Item("beam_count").ToString), LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Mark : " & Trim(prn_HdDt.Rows(0).Item("pcs_length").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address4").ToString, LMargin + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt + 10
                e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

                e.Graphics.DrawLine(Pens.Black, LMargin + C1, CurY, LMargin + C1, LnAr(2))
                e.Graphics.DrawLine(Pens.Black, LMargin + C1 + C2, CurY, LMargin + C1 + C2, LnAr(2))

            End If
            LnAr(3) = CurY

            CurY = CurY + TxtHgt - 10
            p1Font = New Font("Calibri", 12, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "WARPING DETAILS", LMargin, CurY, 2, ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), p1Font)
            Common_Procedures.Print_To_PrintDocument(e, "SIZING DETAILS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14), p1Font)
            Common_Procedures.Print_To_PrintDocument(e, "PARTICULARS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14), CurY + TxtHgt, 2, ClAr(15), p1Font)

            CurY = CurY + TxtHgt + 5 ' + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14), CurY)
            LnAr(4) = CurY

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            If Trim(UCase(prn_HdDt.Rows(0).Item("Meters_Yards").ToString)) = "YARDS" Then
                Common_Procedures.Print_To_PrintDocument(e, "Yards", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            Else
                Common_Procedures.Print_To_PrintDocument(e, "Meter", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            End If
            If Val(ClAr(4)) <> 0 Then
                Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(4), pFont)
            End If
            If Val(ClAr(5)) <> 0 Then
                Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(5), pFont)
            End If
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "BeamNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            If Val(ClAr(9)) <> 0 Then
                Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 2, ClAr(9), pFont)
            End If
            If Val(ClAr(10)) <> 0 Then
                Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 2, ClAr(10), pFont)
            End If
            'Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(11), pFont)
            'Common_Procedures.Print_To_PrintDocument(e, "Pcs", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)
            'Common_Procedures.Print_To_PrintDocument(e, "Meters", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY, 2, ClAr(13), pFont)
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1036" Then
                Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(11), pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Pcs", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Meters", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY, 2, ClAr(13), pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Mark", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY, 2, ClAr(14), pFont)

            Else
                Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + 5, CurY, 2, ClAr(11), pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Pcs", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + 25, CurY, 2, ClAr(12), pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Meters", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) - 10, CurY, 2, ClAr(14), pFont)

            End If

            CurY = CurY + TxtHgt + 5 ' + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(5) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub Printing_Format5_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PageHeight As Single, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal is_LastPage As Boolean)
        Dim p1Font As Font
        Dim Cmp_Name As String
        Dim LS As Single
        Dim PrntCompHeading As Boolean = False

        Try

            LS = PageHeight - 125  ' 135

            If CurY >= LS Then
                CurY = CurY + TxtHgt
            Else
                CurY = LS
            End If

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(6) = CurY


            PrntCompHeading = True
            If StmtPrint_InvDetails_Status = True Then
                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1038" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1047" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1037" Then '---- Prakash Sizing & Mahalakshmi Sizing
                    PrntCompHeading = False

                ElseIf Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) = "UNACCOUNT" Then
                    PrntCompHeading = False

                End If

            Else
                If Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) = "UNACCOUNT" Then
                    PrntCompHeading = False

                End If

            End If


            CurY = CurY + 10
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1102" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1144" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1348" Then '---- Ganesh karthik Sizing (Somanur)
                If PrntCompHeading = True Then

                    If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
                        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
                        Cmp_Name = Replace(Cmp_Name, Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString), "")

                    Else
                        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString

                    End If

                    p1Font = New Font("Calibri", 12, FontStyle.Bold)
                    If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1043" Then '---- Selvanayaki Sizing (Karumanthapatti)
                        Common_Procedures.Print_To_PrintDocument(e, "For " & Cmp_Name, PageWidth - 15, CurY, 1, 0, p1Font, Brushes.Red)
                    Else
                        Common_Procedures.Print_To_PrintDocument(e, "For " & Cmp_Name, PageWidth - 15, CurY, 1, 0, p1Font)
                    End If

                End If
            End If

            CurY = CurY + TxtHgt
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1102" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1144" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1348" Then '---- Ganesh karthik Sizing (Somanur)
                p1Font = New Font("Calibri", 20, FontStyle.Bold)
                Common_Procedures.Print_To_PrintDocument(e, "WELL SIZED IS HALF WOVEN", LMargin, CurY, 2, PageWidth, pFont)
            End If
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt + 5

            If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1102" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1144" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1348" Then '---- Ganesh karthik Sizing (Somanur)
                Common_Procedures.Print_To_PrintDocument(e, "Prepared By", LMargin + 20, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Checked By", LMargin + 275, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Authorised Signatory", PageWidth - 15, CurY, 1, 0, pFont)
            End If

            CurY = CurY + TxtHgt + 10

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(7) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(1))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(6), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14), LnAr(6), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(1))
            p1Font = New Font("Calibri", 7, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "Software by TSOFT SOLUTIONS, Tirupur. Ph : 8508403222, 0421-4337417", LMargin + 8, CurY + 5, 0, 0, p1Font)

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub Printing_Format12(ByRef e As System.Drawing.Printing.PrintPageEventArgs)
        Dim Cmd As New SqlClient.SqlCommand
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Da2 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim EntryCode As String
        Dim pFont As Font, p1Font As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single, SzTxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim ItmNm1 As String = "", ItmNm2 As String = ""
        Dim SNo As Integer
        Dim Det_Top As Single
        Dim i As Integer = 0, j As Integer = 0, k As Integer = 0
        Dim TtWrpEnds As Single
        Dim TtWrpGrsWgt As Single, TtWrpTrWgt As Single, TtWrpNetWgt As Single, TtWrYards As Single
        Dim Wpm() As String, WrpYrd As Single
        Dim TtSizBms As Single
        Dim TtSizGrsWgt As Single, TtSizTrWgt As Single, TtSizNetWgt As Single
        Dim TtSizPcs As Single, TtSizMtrs As Single
        Dim TtYSBgs As Single, TtYSCns As Single, TtYSWgt As Single
        Dim TtOYSWgt As Single
        Dim PL1 As Single, PW1 As Single, InvLft As Single
        Dim W1 As Single
        Dim Bal_Yrn_Wt As Single, Bal_Bms As Single, Bal_Bgs As Single, Bal_Amt As Single
        Dim NoofItems_PerPage As Integer
        Dim ps As Printing.PaperSize
        Dim OthCntPrintSTS As Integer = 0
        Dim InvClW1 As Single, InvClW2 As Single, InvClW3 As Single, InvClW4 As Single
        Dim NoofInvDets As Integer = 0
        Dim InvTxt1 As String, InvTxt2 As String
        Dim InvNetAmt As Double, InvRndOff As Double
        Dim PpSzSTS As Boolean = False

        'For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
        '    If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.A4 Then
        '        ps = PrintDocument1.PrinterSettings.PaperSizes(i)
        '        PrintDocument1.DefaultPageSettings.PaperSize = ps
        '        Exit For
        '    End If
        'Next


        If PpSzSTS = False Then
            For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
                If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.GermanStandardFanfold Then
                    ps = PrintDocument1.PrinterSettings.PaperSizes(i)
                    PrintDocument1.PrinterSettings.DefaultPageSettings.PaperSize = ps
                    PrintDocument1.DefaultPageSettings.PaperSize = ps
                    PpSzSTS = True
                    Exit For
                End If
            Next

            If PpSzSTS = False Then
                For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
                    If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.A4 Then
                        ps = PrintDocument1.PrinterSettings.PaperSizes(i)
                        PrintDocument1.PrinterSettings.DefaultPageSettings.PaperSize = ps
                        PrintDocument1.DefaultPageSettings.PaperSize = ps
                        Exit For
                    End If
                Next
            End If

        End If


        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 12 ' 20
            .Right = 55 ' 40
            .Top = 15  ' 30
            .Bottom = 25
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        pFont = New Font("Calibri", 11, FontStyle.Bold)

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With

        'TxtHgt = e.Graphics.MeasureString("A", pFont).Height  ' 20
        TxtHgt = 15.75 ' 15 ' 16  ' 17   ' 18  ' e.Graphics.MeasureString("A", pFont).Height  ' 20
        SzTxtHgt = 15.75  ' 15

        Erase LnAr
        Erase ClArr

        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = 30 : ClArr(2) = 56 : ClArr(3) = 62 : ClArr(4) = 65 : ClArr(5) = 58 : ClArr(6) = 65
        ClArr(7) = 30 : ClArr(8) = 60 : ClArr(9) = 60 : ClArr(10) = 58 : ClArr(11) = 67 : ClArr(12) = 54
        ClArr(13) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12))

        'ClArr(1) = 25 : ClArr(2) = 40 : ClArr(3) = 48 : ClArr(4) = 50 : ClArr(5) = 46 : ClArr(6) = 48
        'ClArr(7) = 25 : ClArr(8) = 50 : ClArr(9) = 52 : ClArr(10) = 46 : ClArr(11) = 48 : ClArr(12) = 44 : ClArr(13) = 60
        'ClArr(14) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13))

        CurY = TMargin

        NoofItems_PerPage = 30

        EntryCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

        Try

            If prn_HdDt.Rows.Count > 0 Then

                prn_Yrn_OpWt = 0 : prn_Yrn_RcptWt = 0 : prn_Yrn_DelvWt = 0
                prn_Yrn_ConsWt = 0 : prn_Yrn_ExShWt = 0
                prn_Yrn_OpStNo = "" : prn_Yrn_RcptNo = "" : prn_Yrn_DcNo = ""

                prn_EmpBm_Op = 0 : prn_EmpBm_Rcpt = 0 : prn_EmpBm_Delv = 0 : prn_EmpBm_Cons = 0
                prn_EmpBm_OpStNo = "" : prn_EmpBm_RcptNo = "" : prn_EmpBm_DcNo = ""

                prn_EmpBg_Op = 0 : prn_EmpBg_Rcpt = 0 : prn_EmpBg_Delv = 0
                prn_EmpBg_OpStNo = "" : prn_EmpBg_RcptNo = "" : prn_EmpBg_DcNo = ""

                prn_Amt_Op = 0 : prn_Amt_Rcpt = 0 : prn_Amt_CurSet = 0
                prn_Amt_OpStNo = "" : prn_Amt_RcptNo = ""

                Cmd.Connection = Con
                Cmd.CommandText = "truncate table Temp_Statement_Yarn_Stock_Summary"
                Cmd.ExecuteNonQuery()

                Stock_calulation()

                Printing_Format12_PageHeader(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, prn_PageNo, CurY, LnAr, ClArr)

                Det_Top = CurY
                p1Font = New Font("Calibri", 12, FontStyle.Bold)
                If Val(prn_PageNo) <= 1 Then

                    '----------------------------------------------------------------------------------------------------
                    '**********************     WARPING DETAILS     **********************
                    '----------------------------------------------------------------------------------------------------

                    Wpm = Split(Trim(prn_HdDt.Rows(0).Item("warp_meters").ToString), ",")

                    Da1 = New SqlClient.SqlDataAdapter("select distinct(Warp_SlNo) from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' Order by Warp_SlNo", Con)
                    Dt1 = New DataTable
                    Da1.Fill(Dt1)

                    If Dt1.Rows.Count > 0 Then

                        For k = 0 To Dt1.Rows.Count - 1

                            CurY = CurY - 10

                            Da2 = New SqlClient.SqlDataAdapter("select * from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Warp_SlNo = " & Str(Val(Dt1.Rows(k).Item("Warp_SlNo").ToString)) & " Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            WrpYrd = Val(Wpm(k))

                            SNo = 0
                            TtWrpEnds = 0
                            TtWrpGrsWgt = 0 : TtWrpTrWgt = 0 : TtWrpNetWgt = 0 : TtWrYards = 0

                            If Dt2.Rows.Count > 0 Then

                                For i = 0 To Dt2.Rows.Count - 1

                                    SNo = SNo + 1

                                    CurY = CurY + TxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + 8, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Ends_Name").ToString)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                                    'If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1163" Then
                                    ' Common_Procedures.Print_To_PrintDocument(e, (Val(prn_HdDt.Rows(0).Item("warp_meters").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                    'Else
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                    'End If
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                                    TtWrpEnds = TtWrpEnds + Val(Dt2.Rows(i).Item("Ends_Name").ToString)
                                    TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                    TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                    TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)
                                    TtWrYards = TtWrYards + Val(Dt2.Rows(i).Item("warp_meters").ToString)
                                Next i

                            End If

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                            CurY = CurY + TxtHgt - 10
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtWrpEnds)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1163" Then
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtWrYards)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                            Else
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                            End If

                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, p1Font)

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        Next k

                        'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2), CurY, LMargin + ClArr(1) + ClArr(2), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), LnAr(3))

                    End If

                    '----------------------------------------------------------------------------------------------------
                    '**********************     BABY CONE DETAILS       ***************  (Space not enough so diabled,  , If babyCone Details in Single(Only total bags), then it is ok and can be enabled)
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_BabyConeDetails) = -1000 Then

                        CurY = CurY + TxtHgt ' + 10
                        'CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                        'p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "BABYCONE DETAILS", LMargin + ClArr(1), CurY, 2, ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), p1Font)

                        CurY = CurY + TxtHgt + 5 ' + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), CurY)
                        CurY = CurY + 5 ' + 10

                        Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1), CurY, 2, ClArr(2), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "BAGS", LMargin + ClArr(1) + ClArr(2), CurY, 2, ClArr(3), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, 2, ClArr(4), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, 2, ClArr(5) + (ClArr(6) \ 2), pFont)

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), CurY)
                        CurY = CurY + TxtHgt


                        Da2 = New SqlClient.SqlDataAdapter("select * from Specification_BabyCone_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Gross_Weight <> 0 Order by sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - 10

                            For i = 0 To Dt2.Rows.Count - 1

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + 10, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2) - 5, CurY, 1, 0, pFont)

                                'TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Bags").ToString)
                                'TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Cones").ToString)
                                'TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_gross_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 5 ' + 10
                        Common_Procedures.Print_To_PrintDocument(e, "Tare Weight ", LMargin + ClArr(1) + ClArr(2) + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_tare_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_net_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), CurY)

                    End If

                    '----------------------------------------------------------------------------------------------------
                    '**********************      YARN STOCK SUMMARY FOR THIS SET'S COUNT  -  space not enough so diabled      **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_YarnStockSummary) = -1000 Then


                        CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK SUMMARY", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                        CurY = CurY + TxtHgt + 5

                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)
                        CurY = CurY + 10

                        Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + 2, CurY, 2, ClArr(1) + 15, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + ClArr(1) + 15, CurY, 2, ClArr(2) + ClArr(3) - 15 + ClArr(4) - 25, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 25, CurY, 2, ClArr(5), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 25, CurY, 2, ClArr(6) + 25, pFont)

                        CurY = CurY + TxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)
                        CurY = CurY + TxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select * from Temp_Statement_Yarn_Stock_Summary where Weight <> 0 Order by Order_By, Mill_Name", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0
                        TtYSBgs = 0 : TtYSCns = 0 : TtYSWgt = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - 10

                            For i = 0 To Dt2.Rows.Count - 1

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(Dt2.Rows(i).Item("Mill_Name").ToString), 12), LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)

                                Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 25 + ClArr(5) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                                TtYSBgs = TtYSBgs + Val(Dt2.Rows(i).Item("Bags").ToString)
                                TtYSCns = TtYSCns + Val(Dt2.Rows(i).Item("Cones").ToString)
                                TtYSWgt = TtYSWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(TtYSCns), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 25 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtYSWgt), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                    End If

                    '----------------------------------------------------------------------------------------------------
                    '**********************      YARN STOCK DETAILS     **********************
                    '----------------------------------------------------------------------------------------------------

                    CurY = CurY + TxtHgt

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    Common_Procedures.Print_To_PrintDocument(e, "YARN PARTICULARS", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                    CurY = CurY + TxtHgt + 5


                    'CurY = Det_Top
                    'CurY = CurY + 3

                    PL1 = LMargin + ClArr(1)
                    PW1 = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5)
                    'PL1 = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13)

                    W1 = e.Graphics.MeasureString("Opening Balance : ", pFont).Width

                    'p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    ''p1Font = New Font("Calibri", 13, FontStyle.Bold Or FontStyle.Underline)  ---  Working
                    'Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                    'CurY = CurY + TxtHgt + 5

                    Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_OpWt), "#########0.000"), PW1 - 10, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_OpStNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Yrn_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Received", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_RcptWt), "#########0.000"), PW1 - 10, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_RcptNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Yrn_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Consumed Yarn", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_ConsWt), "#########0.000"), PW1 - 10, CurY, 1, 0, pFont)

                    CurY = CurY + TxtHgt
                    If Val(prn_Yrn_ExShWt) < 0 Then
                        Common_Procedures.Print_To_PrintDocument(e, "Short Yarn", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PW1 - 10, CurY, 1, 0, pFont)

                    Else
                        Common_Procedures.Print_To_PrintDocument(e, "Excess Yarn", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PW1 - 10, CurY, 1, 0, pFont)

                    End If

                    CurY = CurY + TxtHgt
                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Delivery", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_DelvWt), "#########0.000"), PW1 - 10, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_DcNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_Yrn_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    If Val(prn_Yrn_RwExShWt) <> 0 Then

                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_RwExShWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Short", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PW1 - 10, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Excess", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PW1 - 10, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_RwExShStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Set.No. :  " & Trim(prn_Yrn_RwExShStNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                    End If

                    If Val(prn_Yrn_TranfrWt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_TranfrWt) < 0 Then

                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Math.Abs(Val(prn_Yrn_TranfrWt))), "#########0.000"), PW1 - 10, CurY, 1, 0, pFont)

                        Else

                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Math.Abs(Val(prn_Yrn_TranfrWt))), "#########0.000"), PW1 - 10, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_TranfrNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_TranfrNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                    End If

                    If Val(prn_Yrn_ExcSht_Wt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_ExcSht_Wt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Exc)", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Math.Abs(Val(prn_Yrn_ExcSht_Wt))), "#########0.000"), PW1 - 10, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Sht)", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Math.Abs(Val(prn_Yrn_ExcSht_Wt))), "#########0.000"), PW1 - 10, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_ExcSht_No) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_ExcSht_No) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                    End If


                    Bal_Yrn_Wt = prn_Yrn_OpWt + prn_Yrn_RcptWt - prn_Yrn_DelvWt - prn_Yrn_ConsWt + prn_Yrn_ExShWt + prn_Yrn_RwExShWt + prn_Yrn_TranfrWt + prn_Yrn_ExcSht_Wt

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PW1, CurY)

                    CurY = CurY + 5
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Yarn", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Bal_Yrn_Wt), "#########0.000"), PW1 - 10, CurY, 1, 0, p1Font)

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PW1, CurY)


                    '----------------------------------------------------------------------------------------------------
                    '**********************      EMPTY BEAM STOCK DETAILS       **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then

                        CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "EMPTY BEAM STOCK", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                        CurY = CurY + TxtHgt + 5

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Op), PW1 - 10, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBm_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBm_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Beams Received", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Rcpt), PW1 - 10, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBm_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBm_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Consumed Beams", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Cons), PW1 - 10, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Beams Delivered", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Delv), PW1 - 10, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBm_DcNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBm_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        Bal_Bms = prn_EmpBm_Op + prn_EmpBm_Rcpt - prn_EmpBm_Delv - prn_EmpBm_Cons

                        CurY = CurY + TxtHgt
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PW1, CurY)

                        CurY = CurY + 5
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance Beams", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bms), PW1 - 10, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PW1, CurY)

                    End If

                    '----------------------------------------------------------------------------------------------------
                    '**********************      EMPTY BAG STOCK DETAILS        **********************
                    '----------------------------------------------------------------------------------------------------
                    If Val(Common_Procedures.settings.StatementPrint_EmptyBagStockDetails) = 1 Then

                        CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "EMPTY BAGS STOCK", PL1, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Op), PW1 - 10, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBg_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Bags Received", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Rcpt), PW1 - 10, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBg_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Bags Delivered", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Delv), PW1 - 10, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_DcNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBg_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        Bal_Bgs = prn_EmpBg_Op + prn_EmpBg_Rcpt - prn_EmpBg_Delv

                        CurY = CurY + TxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PW1, CurY)

                        CurY = CurY + TxtHgt - 5
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance Bags", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bgs), PW1 - 10, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PW1, CurY)

                    End If

                End If


                '---------------------------------------------------------------------------------------------------- 
                '**********************         EMPTY GUNNIES STOCK (SIMPLE)              **********************
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_EmptyBagStockSimple) = 1 Then

                    'EmpBgPrintSTS = 1
                    'If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then
                    '    EmpBgPrintSTS = 0
                    '    If MessageBox.Show("Do you want to Print Empty Gunnies Stock?", "FOR PRINTING...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) = Windows.Forms.DialogResult.Yes Then
                    '        EmpBgPrintSTS = 1
                    '    End If
                    'End If

                    'If EmpBgPrintSTS = 1 Then

                    Bal_Bgs = prn_EmpBg_Op + prn_EmpBg_Rcpt - prn_EmpBg_Delv

                    CurY = CurY + TxtHgt + 5

                    p1Font = New Font("Calibri", 11, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Empty Gunnies", PL1 + 5, CurY, 0, 0, p1Font)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bgs), PW1 - 10, CurY, 1, 0, pFont)

                    CurY = CurY + 20

                    'End If


                End If

                '-------------------------------------------------------------------------------------------------
                '**********************         PICK UP %             **********************
                '-------------------------------------------------------------------------------------------------

                If Val(prn_PageNo) <= 1 Then

                    If Val(Common_Procedures.settings.StatementPrint_PickUp_Percentage) = 1 Then

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "Pickup %", PL1 + 5, CurY, 0, 0, p1Font)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        If Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString) <> 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString), "#########0.00"), PW1 - 10, CurY, 1, 0, pFont)
                        Else
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("pickup_percentage").ToString), "#########0.00"), PW1 - 10, CurY, 1, 0, pFont)
                        End If


                        CurY = CurY + 5

                    End If

                End If
                '-------------------------------------------------------------------------------------------------
                '**********************         ELONGATION UP %             **********************
                '-------------------------------------------------------------------------------------------------

                If Val(prn_PageNo) <= 1 Then

                    If Val(Common_Procedures.settings.StatementPrint_Elongation_Percentage) = 1 Then

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "Elongation %", PL1 + 5, CurY, 0, 0, p1Font)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("elongation_percentage").ToString), "#########0.00"), PW1 - 10, CurY, 1, 0, pFont)

                        CurY = CurY + 5

                    End If

                End If

                '---------------------------------------------------------------------------------------------------- 
                '**********************         YARN STOCK SUMMARY FOR OTHER COUNT    **********************
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_Yarn_Other_Count_Particulars) = 1 Then

                    CurY = CurY + TxtHgt

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    Common_Procedures.Print_To_PrintDocument(e, "OTHER COUNT PARTICULARS", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                    CurY = CurY + TxtHgt + 5

                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)
                    CurY = CurY + 5

                    Common_Procedures.Print_To_PrintDocument(e, "COUNT NAME", LMargin + ClArr(1) + 15, CurY, 0, ClArr(2) + ClArr(3) + ClArr(4), pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, 2, ClArr(5) + ClArr(6) - ClArr(1), pFont)

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)
                    CurY = CurY + TxtHgt

                    Da2 = New SqlClient.SqlDataAdapter("select * from Temp_Statement_Other_Yarn_Stock_Summary where Weight <> 0 Order by Count_Name", Con)
                    Dt2 = New DataTable
                    Da2.Fill(Dt2)

                    SNo = 0
                    TtOYSWgt = 0

                    If Dt2.Rows.Count > 0 Then

                        CurY = CurY - TxtHgt - 5

                        For i = 0 To Dt2.Rows.Count - 1

                            'If NoofDets > NoofItems_PerPage Then
                            '    CurY = CurY + TxtHgt
                            '    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)
                            '    NoofDets = NoofDets + 1
                            '    Printing_Format3_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, False)
                            '    e.HasMorePages = True
                            '    Return
                            'End If

                            SNo = SNo + 1

                            CurY = CurY + TxtHgt

                            Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(Dt2.Rows(i).Item("Count_Name").ToString), 12), LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)

                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1) - 15, CurY, 1, 0, pFont)

                            TtOYSWgt = TtOYSWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                        Next i

                    End If

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)

                End If

                '----------------------------------------------------------------------------------------------------
                '**********************          AMOUNT DETAILS     **********************
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_AmountDetails) = 1 Then

                    ' PL1 = LMargin + 5
                    InvClW1 = ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 20 : InvClW2 = ClArr(11) + 10 : InvClW3 = ClArr(12) + 10
                    InvClW4 = (ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13)) - (InvClW1 + InvClW2 + InvClW3)

                    CurY = CurY + TxtHgt + 10

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    'Common_Procedures.Print_To_PrintDocument(e, "AMOUNT BALANCE DETAILS", PL1, CurY, 2, ClArr(7) + ClArr(8), p1Font)
                    Common_Procedures.Print_To_PrintDocument(e, "AMOUNT BALANCE DETAILS", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                    W1 = e.Graphics.MeasureString("Opening Balance    : ", pFont).Width

                    ' PL1 = LMargin + 5
                    '   PW1 = PL1 + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5)

                    CurY = CurY + TxtHgt + 5

                    Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Op)), PW1 - 10, CurY, 1, 0, pFont)

                    If Trim(prn_Amt_OpStNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Amt_OpStNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    CurY = CurY + TxtHgt
                    Common_Procedures.Print_To_PrintDocument(e, "Received Amount", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Rcpt)), PW1 - 10, CurY, 1, 0, pFont)

                    If Trim(prn_Amt_RcptNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Amt_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If


                    CurY = CurY + TxtHgt + 2
                    Common_Procedures.Print_To_PrintDocument(e, "Set Amount", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_CurSet)), PW1 - 10, CurY, 1, 0, pFont)

                    Bal_Amt = prn_Amt_Op - prn_Amt_Rcpt + prn_Amt_CurSet

                    CurY = CurY + TxtHgt + 10
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PW1, CurY)

                    CurY = CurY + TxtHgt - 10
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Amount", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(Bal_Amt)), PW1 - 10, CurY, 1, 0, p1Font)

                    CurY = CurY + TxtHgt + 10
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PW1, CurY)

                End If


                '----------------------------------------------------------------------------------------------------
                '**********************      SIZING DETAILS     **********************
                '----------------------------------------------------------------------------------------------------

                CurY = Det_Top

                Da1 = New SqlClient.SqlDataAdapter("select distinct(Sizing_SlNo) from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' Order by Sizing_SlNo", Con)
                Dt1 = New DataTable
                Da1.Fill(Dt1)

                If Dt1.Rows.Count > 0 Then

                    For k = 0 To Dt1.Rows.Count - 1

                        CurY = CurY - 10

                        Da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' and Sizing_SlNo = " & Str(Val(Dt1.Rows(k).Item("Sizing_SlNo").ToString)) & " Order by sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0
                        TtSizBms = 0
                        TtSizGrsWgt = 0 : TtSizTrWgt = 0 : TtSizNetWgt = 0
                        TtSizPcs = 0 : TtSizMtrs = 0

                        If Dt2.Rows.Count > 0 Then

                            For i = 0 To Dt2.Rows.Count - 1

                                'If NoofDets > NoofItems_PerPage Then
                                '    CurY = CurY + SzTxtHgt
                                '    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)
                                '    NoofDets = NoofDets + 1
                                '    Printing_Format6_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, False)
                                '    e.HasMorePages = True
                                '    Return
                                'End If

                                SNo = SNo + 1

                                CurY = CurY + SzTxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Beam_No").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                                If Val(Dt2.Rows(i).Item("Noof_Pcs").ToString) <> 0 Then
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Noof_Pcs").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                End If
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Meters").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                                TtSizBms = TtSizBms + 1
                                TtSizGrsWgt = TtSizGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                TtSizTrWgt = TtSizTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                TtSizNetWgt = TtSizNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)
                                TtSizPcs = TtSizPcs + Val(Dt2.Rows(i).Item("Noof_Pcs").ToString)
                                TtSizMtrs = TtSizMtrs + Val(Dt2.Rows(i).Item("Meters").ToString)

                            Next i

                        End If

                        CurY = CurY + SzTxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)
                        p1Font = New Font("Calibri", 11, FontStyle.Bold)
                        CurY = CurY + SzTxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtSizBms)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizPcs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizMtrs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + SzTxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                    Next k

                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(3))

                End If

                '----------------------------------------------------------------------------------------------------
                '*****************      YARN TAKEN DETAILS     ************* (Space not enough so diabled, If No.of Pavu less than 20, then it is ok and can be enabled)
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_YarnTakenDetails) = -10000 Then

                    CurY = CurY + SzTxtHgt   ' + 10

                    p1Font = New Font("Calibri", 11, FontStyle.Regular)
                    'p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    Common_Procedures.Print_To_PrintDocument(e, "YARN TAKEN DETAILS", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), p1Font)

                    CurY = CurY + SzTxtHgt + 3  ' + 10

                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)
                    CurY = CurY + 5

                    Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7), pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, 2, ClArr(8), pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, 2, ClArr(9) + ClArr(10), pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "COUNT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, 2, ClArr(11), pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, 2, ClArr(12), pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, 2, ClArr(13), pFont)

                    CurY = CurY + SzTxtHgt + 5   ' + 10
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)
                    CurY = CurY + SzTxtHgt

                    Da2 = New SqlClient.SqlDataAdapter("select a.*, b.Count_Name, c.Mill_Name from Specification_YarnTaken_Details a INNER JOIN Count_Head b on a.Count_IdNo = b.Count_IdNo INNER JOIN Mill_Head c on a.Mill_IdNo = c.Mill_IdNo where a.company_idno = " & Str(Val(lbl_Company.Tag)) & " and a.Set_Code = '" & Trim(EntryCode) & "' Order by a.sl_no", Con)
                    Dt2 = New DataTable
                    Da2.Fill(Dt2)

                    SNo = 0

                    If Dt2.Rows.Count > 0 Then

                        CurY = CurY - SzTxtHgt - 10

                        For i = 0 To Dt2.Rows.Count - 1

                            SNo = SNo + 1

                            CurY = CurY + SzTxtHgt

                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Mill_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Count_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                        Next i

                    End If

                    CurY = CurY + SzTxtHgt + 5  ' 10
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                    CurY = CurY + SzTxtHgt - 10
                    Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                    'Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_bags").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_yarn_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                    CurY = CurY + SzTxtHgt + 5  ' 10
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                End If


                '----------------------------------------------------------------------------------------------------
                '**********************      INVOCIE DETAILS    **********************
                '----------------------------------------------------------------------------------------------------

                If StmtPrint_InvDetails_Status = True Then

                    InvLft = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6)
                    InvClW1 = ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 20 : InvClW2 = ClArr(11) + 10 : InvClW3 = ClArr(12) + 10
                    InvClW4 = (ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13)) - (InvClW1 + InvClW2 + InvClW3)

                    CurY = CurY + SzTxtHgt - 10

                    p1Font = New Font("Calibri", 11, FontStyle.Bold)
                    'p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    Common_Procedures.Print_To_PrintDocument(e, "INVOICE DETAILS", InvLft, CurY, 2, InvClW1 + InvClW2 + InvClW3 + InvClW4, p1Font)



                    CurY = CurY + SzTxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, InvLft, CurY, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4, CurY)

                    CurY = CurY + SzTxtHgt - 10
                    Common_Procedures.Print_To_PrintDocument(e, "INVOCIE NO.  :  " & prn_HdDt.Rows(0).Item("Invoice_No").ToString, InvLft + 10, CurY, 0, 0, pFont)
                    If IsDBNull(prn_HdDt.Rows(0).Item("Invoice_Date").ToString) = False Then
                        Common_Procedures.Print_To_PrintDocument(e, "INVOICE DATE  :  " & Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Invoice_Date").ToString)), InvLft + InvClW1, CurY, 0, 0, pFont)
                    Else
                        Common_Procedures.Print_To_PrintDocument(e, "INVOICE DATE  :  ", InvLft + InvClW1, CurY, 0, 0, pFont)
                    End If

                    CurY = CurY + SzTxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, InvLft, CurY, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4, CurY)

                    CurY = CurY + SzTxtHgt - 10
                    Common_Procedures.Print_To_PrintDocument(e, "PARTICULARS", InvLft, CurY, 2, InvClW1, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "QUANTITY", InvLft + InvClW1, CurY, 2, InvClW2, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "RATE", InvLft + InvClW1 + InvClW2, CurY, 2, InvClW3, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "AMOUNT", InvLft + InvClW1 + InvClW2 + InvClW3, CurY, 2, InvClW4, pFont)

                    CurY = CurY + SzTxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, InvLft, CurY, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4, CurY)

                    NoofInvDets = 0

                    CurY = CurY - 10

                    If Val(prn_HdDt.Rows(0).Item("Sizing_Amount1").ToString) > 0 Then
                        CurY = CurY + SzTxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Sizing_Text1").ToString), InvLft + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Weight1").ToString, InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Rate1").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Amount1").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1
                    End If

                    If Val(prn_HdDt.Rows(0).Item("Sizing_Amount2").ToString) > 0 Then
                        CurY = CurY + SzTxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Text2").ToString, InvLft + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Weight2").ToString, InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Rate2").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Amount2").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1
                    End If

                    If Val(prn_HdDt.Rows(0).Item("Sizing_Amount3").ToString) > 0 Then
                        CurY = CurY + SzTxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Text3").ToString, InvLft + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Weight3").ToString, InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Rate3").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Amount3").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1
                    End If

                    If Val(prn_HdDt.Rows(0).Item("Pack_Amt").ToString) > 0 Then
                        CurY = CurY + SzTxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Packing_Text").ToString, InvLft + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("Packing_Beam").ToString), InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Pack_Rate").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Pack_Amt").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1
                    End If

                    If Val(prn_HdDt.Rows(0).Item("Rewind_Amt").ToString) > 0 Then
                        CurY = CurY + SzTxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Rewinding_Text").ToString, InvLft + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Rewind_qty").ToString, InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Rewind_Rate").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Rewind_Amt").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1
                    End If

                    If Val(prn_HdDt.Rows(0).Item("weld_Amt").ToString) > 0 Then
                        CurY = CurY + SzTxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Welding_Text").ToString, InvLft + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("Welding_Beam").ToString), InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Weld_Rate").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("weld_Amt").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1

                    End If

                    If Val(prn_HdDt.Rows(0).Item("Sampleset_Amount").ToString) > 0 Then
                        CurY = CurY + SzTxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sampleset_Text").ToString, InvLft + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sampleset_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1
                    End If

                    If Val(prn_HdDt.Rows(0).Item("Vanrent_Amount").ToString) > 0 Then
                        CurY = CurY + SzTxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Vanrent_Text").ToString, InvLft + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Vanrent_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1
                    End If

                    If Val(prn_HdDt.Rows(0).Item("Other_Chrg").ToString) > 0 Then
                        CurY = CurY + SzTxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("OtherCharges_Text").ToString, InvLft + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Other_Chrg").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1
                    End If

                    If Val(prn_HdDt.Rows(0).Item("Disc_Amt").ToString) > 0 Then
                        CurY = CurY + SzTxtHgt

                        If Trim(UCase(prn_HdDt.Rows(0).Item("Discount_Type").ToString)) = "PERCENTAGE" Then
                            InvTxt1 = Trim(prn_HdDt.Rows(0).Item("Discount_Text").ToString) & "  @ " & Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString) & " %"
                            InvTxt2 = ""

                        Else
                            InvTxt1 = Trim(prn_HdDt.Rows(0).Item("Discount_Text").ToString) & "  @ " & Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString) & " Paise/Kg"
                            InvTxt2 = ""
                            'If Val(Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString)) = Val(Format(Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString), "#########0.00").ToString) Then
                            '    InvTxt2 = Format(Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString), "#########0.00").ToString
                            'Else
                            '    InvTxt2 = Format(Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString), "#########0.000").ToString
                            'End If

                        End If

                        Common_Procedures.Print_To_PrintDocument(e, InvTxt1, InvLft + 5, CurY, 0, 0, pFont)
                        'Common_Procedures.Print_To_PrintDocument(e, InvTxt2, InvLft + InvClW1 + InvClW2 + InvClW3  - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("Disc_Amt").ToString), InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1

                    End If


                    'For i = NoofInvDets + 1 To 10
                    '    CurY = CurY + TxtHgt
                    'Next

                    If Val(prn_HdDt.Rows(0).Item("CGST_Amount").ToString) > 0 Then
                        CurY = CurY + SzTxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "CGST - " & prn_HdDt.Rows(0).Item("CGST_Percentage").ToString & " %", InvLft + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("CGST_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1
                    End If

                    If Val(prn_HdDt.Rows(0).Item("SGST_Amount").ToString) > 0 Then
                        CurY = CurY + SzTxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "SGST - " & prn_HdDt.Rows(0).Item("SGST_Percentage").ToString & " %", InvLft + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("SGST_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1
                    End If

                    If Val(prn_HdDt.Rows(0).Item("IGST_Amount").ToString) > 0 Then
                        CurY = CurY + SzTxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "IGST - " & prn_HdDt.Rows(0).Item("IGST_Percentage").ToString & " %", InvLft + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("IGST_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1
                    End If

                    InvNetAmt = Val(prn_HdDt.Rows(0).Item("Sizing_Amount1").ToString) + Val(prn_HdDt.Rows(0).Item("Sizing_Amount2").ToString) + Val(prn_HdDt.Rows(0).Item("Sizing_Amount3").ToString) + Val(prn_HdDt.Rows(0).Item("Vat_Amount1").ToString) + Val(prn_HdDt.Rows(0).Item("Vat_Amount2").ToString) + Val(prn_HdDt.Rows(0).Item("SampleSet_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("VanRent_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("Pack_amt").ToString) + Val(prn_HdDt.Rows(0).Item("Rewind_Amt").ToString) + Val(prn_HdDt.Rows(0).Item("Weld_Amt").ToString) + Val(prn_HdDt.Rows(0).Item("Other_Chrg").ToString) - Val(prn_HdDt.Rows(0).Item("Disc_Amt").ToString) + Val(prn_HdDt.Rows(0).Item("CGST_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("sGST_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("iGST_Amount").ToString)

                    InvRndOff = Val(prn_HdDt.Rows(0).Item("Net_Amount").ToString) - Val(InvNetAmt)
                    CurY = CurY + SzTxtHgt
                    If Val(InvRndOff) <> 0 Then
                        Common_Procedures.Print_To_PrintDocument(e, "ROUND OFF", InvLft + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(InvRndOff), "########0.00"), InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1
                    End If

                    CurY = CurY + SzTxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, InvLft, CurY, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4, CurY)

                    CurY = CurY + SzTxtHgt - 10
                    p1Font = New Font("Calibri", 11, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "NET AMOUNT", InvLft + InvClW1 + InvClW2, CurY, 1, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Net_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, p1Font)

                    CurY = CurY + SzTxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, InvLft, CurY, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4, CurY)

                End If



                '---------- FOOTER

                Printing_Format12_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, True)

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

        e.HasMorePages = False

    End Sub

    Private Sub Printing_Format12_PageHeader(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim p1Font As Font
        Dim Cmp_Name As String, Cmp_Add1 As String, Cmp_Add2 As String
        Dim Cmp_PhNo As String, Cmp_Email As String, Cmp_TinNo As String, Cmp_CstNo As String
        Dim Cmp_StateCap As String = "", Cmp_StateNm As String = "", Cmp_StateCode As String = "", Cmp_GSTIN_Cap As String = "", Cmp_GSTIN_No As String = ""
        Dim CurX As Single = 0
        Dim strWidth As Single = 0
        Dim strHeight As Single
        Dim C1 As Single, C2 As Single, C3 As Single
        Dim W1 As Single, W2 As Single
        Dim ExcSht_Str As String

        PageNo = PageNo + 1

        CurY = TMargin

        'da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' Order by sl_no", Con)
        'dt2 = New DataTable
        'da2.Fill(dt2)
        'If dt2.Rows.Count > 30 Then
        '    Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(PageNo)), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
        'End If
        'dt2.Clear()

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY

        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
        Cmp_PhNo = "" : Cmp_Email = "" : Cmp_TinNo = "" : Cmp_CstNo = ""

        If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            Cmp_Name = Replace(Cmp_Name, Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString), "")
            Cmp_Add1 = Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString)
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        Else
            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        End If

        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = "PHONE NO.:" & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_EMail").ToString) <> "" Then
            Cmp_Email = "EMail : " & prn_HdDt.Rows(0).Item("Company_EMail").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_TinNo").ToString) <> "" Then
            Cmp_TinNo = "TIN NO.: " & prn_HdDt.Rows(0).Item("Company_TinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
            Cmp_CstNo = "CST NO.: " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_State_Name").ToString) <> "" Then
            Cmp_StateCap = "STATE : "
            Cmp_StateNm = prn_HdDt.Rows(0).Item("Company_State_Name").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_State_Code").ToString) <> "" Then
            Cmp_StateCode = "CODE :" & prn_HdDt.Rows(0).Item("Company_State_Code").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString) <> "" Then
            Cmp_GSTIN_Cap = "GSTIN : "
            Cmp_GSTIN_No = prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString
        End If

        If Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) <> "UNACCOUNT" Then

            CurY = CurY + TxtHgt - 10
            p1Font = New Font("Calibri", 15, FontStyle.Bold)
            'p1Font = New Font("Calibri", 14, FontStyle.Bold)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            CurY = CurY + strHeight
            If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
                p1Font = New Font("Calibri", 12, FontStyle.Bold)
            Else
                p1Font = New Font("Calibri", 10, FontStyle.Bold)
                'p1Font = New Font("Calibri", 9, FontStyle.Bold)
            End If
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1, LMargin, CurY, 2, PrintWidth, p1Font)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height
            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, p1Font)
            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, p1Font)
            CurY = CurY + TxtHgt
            ' Common_Procedures.Print_To_PrintDocument(e, Cmp_TinNo, LMargin + 10, CurY, 0, 0, pFont)
            'Common_Procedures.Print_To_PrintDocument(e, Cmp_Email, LMargin, CurY, 2, PrintWidth, pFont)
            'Common_Procedures.Print_To_PrintDocument(e, Cmp_CstNo, PageWidth - 10, CurY, 1, 0, pFont)

            p1Font = New Font("Calibri", 11, FontStyle.Bold)
            strWidth = e.Graphics.MeasureString(Trim(Cmp_StateCap & Cmp_GSTIN_Cap), p1Font).Width
            strWidth = e.Graphics.MeasureString(Trim(Cmp_StateCap & Cmp_StateNm & "     " & Cmp_GSTIN_Cap & Cmp_GSTIN_No), pFont).Width
            If PrintWidth > strWidth Then
                CurX = LMargin + (PrintWidth - strWidth) / 2
            Else
                CurX = LMargin
            End If

            p1Font = New Font("Calibri", 11, FontStyle.Bold)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_StateCap, CurX, CurY, 0, 0, p1Font)
            strWidth = e.Graphics.MeasureString(Cmp_StateCap, p1Font).Width
            CurX = CurX + strWidth
            Common_Procedures.Print_To_PrintDocument(e, Cmp_StateNm, CurX, CurY, 0, 0, pFont)

            strWidth = e.Graphics.MeasureString(Cmp_StateNm, pFont).Width
            p1Font = New Font("Calibri", 11, FontStyle.Bold)
            CurX = CurX + strWidth
            Common_Procedures.Print_To_PrintDocument(e, "     " & Cmp_GSTIN_Cap, CurX, CurY, 0, PrintWidth, p1Font)
            strWidth = e.Graphics.MeasureString("     " & Cmp_GSTIN_Cap, p1Font).Width
            CurX = CurX + strWidth
            Common_Procedures.Print_To_PrintDocument(e, Cmp_GSTIN_No, CurX, CurY, 0, 0, pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

        End If

        LnAr(2) = CurY

        C1 = 310
        C2 = 210
        C3 = PageWidth - (LMargin + C1 + C2)

        W1 = e.Graphics.MeasureString("Average Count : ", pFont).Width
        W2 = e.Graphics.MeasureString("Tape Length : ", pFont).Width  ' 20

        Try

            If Val(PageNo) <= 1 Then

                p1Font = New Font("Calibri", 12, FontStyle.Bold)
                strHeight = e.Graphics.MeasureString("Average Count : ", p1Font).Height

                CurY = CurY + TxtHgt - 10
                Common_Procedures.Print_To_PrintDocument(e, "TO : ", LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Set No", LMargin + C1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Set_No").ToString), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font)
                Common_Procedures.Print_To_PrintDocument(e, "Mill Name", LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString), 15), LMargin + C1 + C2 + W2 + 25, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Set No    : " & Trim(prn_HdDt.Rows(0).Item("Set_No").ToString), LMargin + C1 + 10, CurY, 0, 0, p1Font)
                'Common_Procedures.Print_To_PrintDocument(e, "Mill : " & Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + strHeight
                p1Font = New Font("Calibri", 12, FontStyle.Bold)
                'p1Font = New Font("Calibri", 10, FontStyle.Bold)
                Common_Procedures.Print_To_PrintDocument(e, "     " & "M/S." & prn_HdDt.Rows(0).Item("Ledger_MainName").ToString, LMargin + 10, CurY, 0, 0, p1Font)
                Common_Procedures.Print_To_PrintDocument(e, "DATE", LMargin + C1 + 10, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Set_Date").ToString)), LMargin + C1 + W1 + 25, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + C1 + C2 + 10, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Ends_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + 3, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "DATE                 :  " & Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Set_Date").ToString)), LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Ends : " & Trim(prn_HdDt.Rows(0).Item("Ends_Name").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)
                p1Font = New Font("Calibri", 12, FontStyle.Bold)
                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address1").ToString, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Count Name", LMargin + C1 + 10, CurY + 9, 0, 0, p1Font)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + 9, 0, 0, p1Font)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Count_Name").ToString), LMargin + C1 + W1 + 25, CurY + 9, 0, 0, p1Font)
                Common_Procedures.Print_To_PrintDocument(e, "Tape Length", LMargin + C1 + C2 + 10, CurY + 9, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 9, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("tape_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY + 9, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Count Name : " & Trim(prn_HdDt.Rows(0).Item("Count_Name").ToString), LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Tape Length : " & Trim(prn_HdDt.Rows(0).Item("tape_length").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                If Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString) >= 0 Then
                    ExcSht_Str = "Excess"
                    'ExcSht_Str = "Excess        : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                Else
                    ExcSht_Str = "Short"
                    'ExcSht_Str = "Short         : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                End If
                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address2").ToString, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ExcSht_Str, LMargin + C1 + 10, CurY + 14, 0, 0, p1Font)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + 14, 0, 0, p1Font)
                Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000"), LMargin + C1 + W1 + 25, CurY + 14, 0, 0, p1Font)
                Common_Procedures.Print_To_PrintDocument(e, "Beam Width", LMargin + C1 + C2 + 10, CurY + 14, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 14, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Beam_Width_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + 14, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, ExcSht_Str, LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Beam Width : " & Trim(prn_HdDt.Rows(0).Item("Beam_Width_Name").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address3").ToString, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Average Count", LMargin + C1 + 10, CurY + 18, 0, 0, p1Font)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + 18, 0, 0, p1Font)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("beam_count").ToString), LMargin + C1 + W1 + 25, CurY + 18, 0, 0, p1Font)
                Common_Procedures.Print_To_PrintDocument(e, "Mark", LMargin + C1 + C2 + 10, CurY + 18, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 18, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("pcs_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY + 18, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Average Count : " & Trim(prn_HdDt.Rows(0).Item("beam_count").ToString), LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Mark : " & Trim(prn_HdDt.Rows(0).Item("pcs_length").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address4").ToString, LMargin + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt + 10
                e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

                e.Graphics.DrawLine(Pens.Black, LMargin + C1, CurY, LMargin + C1, LnAr(2))
                e.Graphics.DrawLine(Pens.Black, LMargin + C1 + C2, CurY, LMargin + C1 + C2, LnAr(2))

            End If
            LnAr(3) = CurY

            CurY = CurY + TxtHgt - 15
            p1Font = New Font("Calibri", 12, FontStyle.Bold)
            Common_Procedures.Print_To_PrintDocument(e, "WARPING DETAILS", LMargin, CurY, 2, ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), p1Font)
            Common_Procedures.Print_To_PrintDocument(e, "SIZING DETAILS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), p1Font)
            'Common_Procedures.Print_To_PrintDocument(e, "PARTICULARS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY + TxtHgt, 2, ClAr(14), p1Font)

            CurY = CurY + TxtHgt + 5 ' + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY)
            LnAr(4) = CurY

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1163" Then
                Common_Procedures.Print_To_PrintDocument(e, "Yards", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            Else
                Common_Procedures.Print_To_PrintDocument(e, "Meter", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            End If
            Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(4), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(5), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "BeamNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 2, ClAr(9), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 2, ClAr(10), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(11), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Pcs", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Meters", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY, 2, ClAr(13), pFont)

            CurY = CurY + TxtHgt + 5 ' + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(5) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub Printing_Format12_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PageHeight As Single, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal is_LastPage As Boolean)
        Dim p1Font As Font
        Dim Cmp_Name As String
        Dim LS As Single

        Try

            LS = PageHeight - 115  ' 125

            If CurY >= LS Then
                CurY = CurY + TxtHgt
            Else
                CurY = LS
            End If

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, PageWidth, CurY)
            'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(6) = CurY

            CurY = CurY + 5

            If Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) <> "UNACCOUNT" Then

                If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
                    Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
                    Cmp_Name = Replace(Cmp_Name, Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString), "")

                Else
                    Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString

                End If

                p1Font = New Font("Calibri", 12, FontStyle.Bold)
                Common_Procedures.Print_To_PrintDocument(e, "For " & Cmp_Name, PageWidth - 15, CurY, 1, 0, p1Font)

            End If

            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt

            Common_Procedures.Print_To_PrintDocument(e, "Prepared By", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + 15, CurY, 0, 0, pFont)
            'Common_Procedures.Print_To_PrintDocument(e, "Prepared By", LMargin + 20, CurY, 0, 0, pFont)
            'Common_Procedures.Print_To_PrintDocument(e, "Checked By", LMargin + 275, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Authorised Signatory", PageWidth - 15, CurY, 1, 0, pFont)
            CurY = CurY + TxtHgt + 10

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(7) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(1))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(3))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(6), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(6), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(1))

            p1Font = New Font("Calibri", 7, FontStyle.Bold)
            Common_Procedures.Print_To_PrintDocument(e, "Software by TSOFT SOLUTIONS, Tirupur. Ph : 8508403222, 0421-4337417", LMargin + 8, CurY + 5, 0, 0, p1Font)

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub
    Private Sub Printing_Format6(ByRef e As System.Drawing.Printing.PrintPageEventArgs)
        Dim Cmd As New SqlClient.SqlCommand
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Da2 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim EntryCode As String
        Dim pFont As Font, p1Font As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single, SzTxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim ItmNm1 As String = "", ItmNm2 As String = ""
        Dim SNo As Integer
        Dim Det_Top As Single
        Dim i As Integer = 0, j As Integer = 0, k As Integer = 0
        Dim TtWrpEnds As Single
        Dim TtWrpGrsWgt As Single, TtWrpTrWgt As Single, TtWrpNetWgt As Single
        Dim Wpm() As String, WrpYrd As Single
        Dim TtSizBms As Single
        Dim TtSizGrsWgt As Single, TtSizTrWgt As Single, TtSizNetWgt As Single
        Dim TtSizPcs As Single, TtSizMtrs As Single
        Dim TtYSBgs As Single, TtYSCns As Single, TtYSWgt As Single
        Dim TtOYSWgt As Single
        Dim PL1 As Single, PW1 As Single, InvLft As Single
        Dim W1 As Single
        Dim Bal_Yrn_Wt As Single, Bal_Bms As Single, Bal_Bgs As Single, Bal_Amt As Single
        Dim NoofItems_PerPage As Integer
        Dim ps As Printing.PaperSize
        Dim OthCntPrintSTS As Integer = 0
        Dim InvClW1 As Single, InvClW2 As Single, InvClW3 As Single, InvClW4 As Single
        Dim NoofInvDets As Integer = 0
        Dim InvTxt1 As String, InvTxt2 As String
        Dim InvNetAmt As Double, InvRndOff As Double

        For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(i)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                Exit For
            End If
        Next

        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 12 ' 20
            .Right = 55 ' 40
            .Top = 15  ' 30
            .Bottom = 25
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        pFont = New Font("Calibri", 11, FontStyle.Regular)
        'pFont = New Font("Calibri", 9, FontStyle.Regular)

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With

        'TxtHgt = e.Graphics.MeasureString("A", pFont).Height  ' 20
        TxtHgt = 15.75 ' 15 ' 16  ' 17   ' 18  ' e.Graphics.MeasureString("A", pFont).Height  ' 20
        SzTxtHgt = 15.75  ' 15

        Erase LnAr
        Erase ClArr

        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = 30 : ClArr(2) = 56 : ClArr(3) = 62 : ClArr(4) = 65 : ClArr(5) = 58 : ClArr(6) = 65
        ClArr(7) = 30 : ClArr(8) = 66 : ClArr(9) = 66 : ClArr(10) = 60 : ClArr(11) = 67 : ClArr(12) = 60
        ClArr(13) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12))

        'ClArr(1) = 25 : ClArr(2) = 40 : ClArr(3) = 48 : ClArr(4) = 50 : ClArr(5) = 46 : ClArr(6) = 48
        'ClArr(7) = 25 : ClArr(8) = 50 : ClArr(9) = 52 : ClArr(10) = 46 : ClArr(11) = 48 : ClArr(12) = 44 : ClArr(13) = 60
        'ClArr(14) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13))

        CurY = TMargin

        NoofItems_PerPage = 30

        EntryCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

        Try

            If prn_HdDt.Rows.Count > 0 Then

                prn_Yrn_OpWt = 0 : prn_Yrn_RcptWt = 0 : prn_Yrn_DelvWt = 0
                prn_Yrn_ConsWt = 0 : prn_Yrn_ExShWt = 0
                prn_Yrn_OpStNo = "" : prn_Yrn_RcptNo = "" : prn_Yrn_DcNo = ""

                prn_EmpBm_Op = 0 : prn_EmpBm_Rcpt = 0 : prn_EmpBm_Delv = 0 : prn_EmpBm_Cons = 0
                prn_EmpBm_OpStNo = "" : prn_EmpBm_RcptNo = "" : prn_EmpBm_DcNo = ""

                prn_EmpBg_Op = 0 : prn_EmpBg_Rcpt = 0 : prn_EmpBg_Delv = 0
                prn_EmpBg_OpStNo = "" : prn_EmpBg_RcptNo = "" : prn_EmpBg_DcNo = ""

                prn_Amt_Op = 0 : prn_Amt_Rcpt = 0 : prn_Amt_CurSet = 0
                prn_Amt_OpStNo = "" : prn_Amt_RcptNo = ""

                Cmd.Connection = Con
                Cmd.CommandText = "truncate table Temp_Statement_Yarn_Stock_Summary"
                Cmd.ExecuteNonQuery()

                Stock_calulation()

                Printing_Format6_PageHeader(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, prn_PageNo, CurY, LnAr, ClArr)

                Det_Top = CurY

                If Val(prn_PageNo) <= 1 Then

                    '----------------------------------------------------------------------------------------------------
                    '**********************     WARPING DETAILS     **********************
                    '----------------------------------------------------------------------------------------------------

                    Wpm = Split(Trim(prn_HdDt.Rows(0).Item("warp_meters").ToString), ",")

                    Da1 = New SqlClient.SqlDataAdapter("select distinct(Warp_SlNo) from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' Order by Warp_SlNo", Con)
                    Dt1 = New DataTable
                    Da1.Fill(Dt1)

                    If Dt1.Rows.Count > 0 Then

                        For k = 0 To Dt1.Rows.Count - 1

                            CurY = CurY - 10

                            Da2 = New SqlClient.SqlDataAdapter("select * from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Warp_SlNo = " & Str(Val(Dt1.Rows(k).Item("Warp_SlNo").ToString)) & " Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            WrpYrd = Val(Wpm(k))

                            SNo = 0
                            TtWrpEnds = 0
                            TtWrpGrsWgt = 0 : TtWrpTrWgt = 0 : TtWrpNetWgt = 0

                            If Dt2.Rows.Count > 0 Then

                                For i = 0 To Dt2.Rows.Count - 1

                                    SNo = SNo + 1

                                    CurY = CurY + TxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + 8, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Ends_Name").ToString)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                                    TtWrpEnds = TtWrpEnds + Val(Dt2.Rows(i).Item("Ends_Name").ToString)
                                    TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                    TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                    TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)

                                Next i

                            End If

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                            CurY = CurY + TxtHgt - 10
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtWrpEnds)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        Next k

                        'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2), CurY, LMargin + ClArr(1) + ClArr(2), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), LnAr(3))

                    End If

                    '----------------------------------------------------------------------------------------------------
                    '**********************     BABY CONE DETAILS       ***************  (Space not enough so diabled,  , If babyCone Details in Single(Only total bags), then it is ok and can be enabled)
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_BabyConeDetails) = -1000 Then

                        CurY = CurY + TxtHgt ' + 10
                        'CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                        'p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "BABYCONE DETAILS", LMargin + ClArr(1), CurY, 2, ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), p1Font)

                        CurY = CurY + TxtHgt + 5 ' + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), CurY)
                        CurY = CurY + 5 ' + 10

                        Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1), CurY, 2, ClArr(2), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "BAGS", LMargin + ClArr(1) + ClArr(2), CurY, 2, ClArr(3), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, 2, ClArr(4), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, 2, ClArr(5) + (ClArr(6) \ 2), pFont)

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), CurY)
                        CurY = CurY + TxtHgt


                        Da2 = New SqlClient.SqlDataAdapter("select * from Specification_BabyCone_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Gross_Weight <> 0 Order by sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - 10

                            For i = 0 To Dt2.Rows.Count - 1

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + 10, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2) - 5, CurY, 1, 0, pFont)

                                'TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Bags").ToString)
                                'TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Cones").ToString)
                                'TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_gross_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 5 ' + 10
                        Common_Procedures.Print_To_PrintDocument(e, "Tare Weight ", LMargin + ClArr(1) + ClArr(2) + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_tare_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_net_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), CurY)

                    End If

                    '----------------------------------------------------------------------------------------------------
                    '**********************      YARN STOCK SUMMARY FOR THIS SET'S COUNT  -  space not enough so diabled      **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_YarnStockSummary) = -1000 Then


                        CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK SUMMARY", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                        CurY = CurY + TxtHgt + 5

                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)
                        CurY = CurY + 10

                        Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + 2, CurY, 2, ClArr(1) + 15, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + ClArr(1) + 15, CurY, 2, ClArr(2) + ClArr(3) - 15 + ClArr(4) - 25, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 25, CurY, 2, ClArr(5), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 25, CurY, 2, ClArr(6) + 25, pFont)

                        CurY = CurY + TxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)
                        CurY = CurY + TxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select * from Temp_Statement_Yarn_Stock_Summary where Weight <> 0 Order by Order_By, Mill_Name", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0
                        TtYSBgs = 0 : TtYSCns = 0 : TtYSWgt = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - 10

                            For i = 0 To Dt2.Rows.Count - 1

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(Dt2.Rows(i).Item("Mill_Name").ToString), 12), LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)

                                Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 25 + ClArr(5) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                                TtYSBgs = TtYSBgs + Val(Dt2.Rows(i).Item("Bags").ToString)
                                TtYSCns = TtYSCns + Val(Dt2.Rows(i).Item("Cones").ToString)
                                TtYSWgt = TtYSWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(TtYSCns), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 25 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtYSWgt), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                    End If

                    '----------------------------------------------------------------------------------------------------
                    '**********************      YARN STOCK DETAILS     **********************
                    '----------------------------------------------------------------------------------------------------

                    CurY = CurY + TxtHgt

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    Common_Procedures.Print_To_PrintDocument(e, "YARN PARTICULARS", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                    CurY = CurY + TxtHgt + 5


                    'CurY = Det_Top
                    'CurY = CurY + 3

                    PL1 = LMargin + ClArr(1)
                    PW1 = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5)
                    'PL1 = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13)

                    W1 = e.Graphics.MeasureString("Opening Balance : ", pFont).Width

                    'p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    ''p1Font = New Font("Calibri", 13, FontStyle.Bold Or FontStyle.Underline)  ---  Working
                    'Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                    'CurY = CurY + TxtHgt + 5

                    Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_OpWt), "#########0.000"), PW1 - 10, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_OpStNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Yrn_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Received", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_RcptWt), "#########0.000"), PW1 - 10, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_RcptNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Yrn_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Consumed Yarn", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_ConsWt), "#########0.000"), PW1 - 10, CurY, 1, 0, pFont)

                    CurY = CurY + TxtHgt
                    If Val(prn_Yrn_ExShWt) < 0 Then
                        Common_Procedures.Print_To_PrintDocument(e, "Short Yarn", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PW1 - 10, CurY, 1, 0, pFont)

                    Else
                        Common_Procedures.Print_To_PrintDocument(e, "Excess Yarn", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PW1 - 10, CurY, 1, 0, pFont)

                    End If

                    CurY = CurY + TxtHgt
                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Delivery", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_DelvWt), "#########0.000"), PW1 - 10, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_DcNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_Yrn_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    If Val(prn_Yrn_RwExShWt) <> 0 Then

                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_RwExShWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Short", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PW1 - 10, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Excess", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PW1 - 10, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_RwExShStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Set.No. :  " & Trim(prn_Yrn_RwExShStNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                    End If

                    If Val(prn_Yrn_TranfrWt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_TranfrWt) < 0 Then

                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Math.Abs(Val(prn_Yrn_TranfrWt))), "#########0.000"), PW1 - 10, CurY, 1, 0, pFont)

                        Else

                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Math.Abs(Val(prn_Yrn_TranfrWt))), "#########0.000"), PW1 - 10, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_TranfrNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_TranfrNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                    End If

                    If Val(prn_Yrn_ExcSht_Wt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_ExcSht_Wt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Exc)", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Math.Abs(Val(prn_Yrn_ExcSht_Wt))), "#########0.000"), PW1 - 10, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Sht)", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Math.Abs(Val(prn_Yrn_ExcSht_Wt))), "#########0.000"), PW1 - 10, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_ExcSht_No) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_ExcSht_No) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                    End If


                    Bal_Yrn_Wt = prn_Yrn_OpWt + prn_Yrn_RcptWt - prn_Yrn_DelvWt - prn_Yrn_ConsWt + prn_Yrn_ExShWt + prn_Yrn_RwExShWt + prn_Yrn_TranfrWt + prn_Yrn_ExcSht_Wt

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PW1, CurY)

                    CurY = CurY + 5
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Yarn", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Bal_Yrn_Wt), "#########0.000"), PW1 - 10, CurY, 1, 0, p1Font)

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PW1, CurY)


                    '----------------------------------------------------------------------------------------------------
                    '**********************      EMPTY BEAM STOCK DETAILS       **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then

                        CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "EMPTY BEAM STOCK", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                        CurY = CurY + TxtHgt + 5

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Op), PW1 - 10, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBm_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBm_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Beams Received", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Rcpt), PW1 - 10, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBm_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBm_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Consumed Beams", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Cons), PW1 - 10, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Beams Delivered", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Delv), PW1 - 10, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBm_DcNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBm_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        Bal_Bms = prn_EmpBm_Op + prn_EmpBm_Rcpt - prn_EmpBm_Delv - prn_EmpBm_Cons

                        CurY = CurY + TxtHgt
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PW1, CurY)

                        CurY = CurY + 5
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance Beams", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bms), PW1 - 10, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PW1, CurY)

                    End If

                    '----------------------------------------------------------------------------------------------------
                    '**********************      EMPTY BAG STOCK DETAILS        **********************
                    '----------------------------------------------------------------------------------------------------
                    If Val(Common_Procedures.settings.StatementPrint_EmptyBagStockDetails) = 1 Then

                        CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "EMPTY BAGS STOCK", PL1, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Op), PW1 - 10, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBg_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Bags Received", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Rcpt), PW1 - 10, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBg_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Bags Delivered", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Delv), PW1 - 10, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_DcNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBg_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        Bal_Bgs = prn_EmpBg_Op + prn_EmpBg_Rcpt - prn_EmpBg_Delv

                        CurY = CurY + TxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PW1, CurY)

                        CurY = CurY + TxtHgt - 5
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance Bags", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bgs), PW1 - 10, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PW1, CurY)

                    End If

                End If


                '---------------------------------------------------------------------------------------------------- 
                '**********************         EMPTY GUNNIES STOCK (SIMPLE)              **********************
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_EmptyBagStockSimple) = 1 Then

                    'EmpBgPrintSTS = 1
                    'If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then
                    '    EmpBgPrintSTS = 0
                    '    If MessageBox.Show("Do you want to Print Empty Gunnies Stock?", "FOR PRINTING...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) = Windows.Forms.DialogResult.Yes Then
                    '        EmpBgPrintSTS = 1
                    '    End If
                    'End If

                    'If EmpBgPrintSTS = 1 Then

                    Bal_Bgs = prn_EmpBg_Op + prn_EmpBg_Rcpt - prn_EmpBg_Delv

                    CurY = CurY + TxtHgt + 5

                    p1Font = New Font("Calibri", 11, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Empty Gunnies", PL1 + 5, CurY, 0, 0, p1Font)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bgs), PW1 - 10, CurY, 1, 0, pFont)

                    CurY = CurY + 20

                    'End If


                End If


                '---------------------------------------------------------------------------------------------------- 
                '**********************         YARN STOCK SUMMARY FOR OTHER COUNT    **********************
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_Yarn_Other_Count_Particulars) = 1 Then

                    CurY = CurY + TxtHgt

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    Common_Procedures.Print_To_PrintDocument(e, "OTHER COUNT PARTICULARS", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                    CurY = CurY + TxtHgt + 5

                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)
                    CurY = CurY + 5

                    Common_Procedures.Print_To_PrintDocument(e, "COUNT NAME", LMargin + ClArr(1) + 15, CurY, 0, ClArr(2) + ClArr(3) + ClArr(4), pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, 2, ClArr(5) + ClArr(6) - ClArr(1), pFont)

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)
                    CurY = CurY + TxtHgt

                    Da2 = New SqlClient.SqlDataAdapter("select * from Temp_Statement_Other_Yarn_Stock_Summary where Weight <> 0 Order by Count_Name", Con)
                    Dt2 = New DataTable
                    Da2.Fill(Dt2)

                    SNo = 0
                    TtOYSWgt = 0

                    If Dt2.Rows.Count > 0 Then

                        CurY = CurY - TxtHgt - 5

                        For i = 0 To Dt2.Rows.Count - 1

                            'If NoofDets > NoofItems_PerPage Then
                            '    CurY = CurY + TxtHgt
                            '    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)
                            '    NoofDets = NoofDets + 1
                            '    Printing_Format3_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, False)
                            '    e.HasMorePages = True
                            '    Return
                            'End If

                            SNo = SNo + 1

                            CurY = CurY + TxtHgt

                            Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(Dt2.Rows(i).Item("Count_Name").ToString), 12), LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)

                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1) - 15, CurY, 1, 0, pFont)

                            TtOYSWgt = TtOYSWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                        Next i

                    End If

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)

                End If



                '----------------------------------------------------------------------------------------------------
                '**********************      SIZING DETAILS     **********************
                '----------------------------------------------------------------------------------------------------

                CurY = Det_Top

                Da1 = New SqlClient.SqlDataAdapter("select distinct(Sizing_SlNo) from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' Order by Sizing_SlNo", Con)
                Dt1 = New DataTable
                Da1.Fill(Dt1)

                If Dt1.Rows.Count > 0 Then

                    For k = 0 To Dt1.Rows.Count - 1

                        CurY = CurY - 10

                        Da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' and Sizing_SlNo = " & Str(Val(Dt1.Rows(k).Item("Sizing_SlNo").ToString)) & " Order by sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0
                        TtSizBms = 0
                        TtSizGrsWgt = 0 : TtSizTrWgt = 0 : TtSizNetWgt = 0
                        TtSizPcs = 0 : TtSizMtrs = 0

                        If Dt2.Rows.Count > 0 Then

                            For i = 0 To Dt2.Rows.Count - 1

                                'If NoofDets > NoofItems_PerPage Then
                                '    CurY = CurY + SzTxtHgt
                                '    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)
                                '    NoofDets = NoofDets + 1
                                '    Printing_Format6_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, False)
                                '    e.HasMorePages = True
                                '    Return
                                'End If

                                SNo = SNo + 1

                                CurY = CurY + SzTxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Beam_No").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                                If Val(Dt2.Rows(i).Item("Noof_Pcs").ToString) <> 0 Then
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Noof_Pcs").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                End If
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Meters").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                                TtSizBms = TtSizBms + 1
                                TtSizGrsWgt = TtSizGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                TtSizTrWgt = TtSizTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                TtSizNetWgt = TtSizNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)
                                TtSizPcs = TtSizPcs + Val(Dt2.Rows(i).Item("Noof_Pcs").ToString)
                                TtSizMtrs = TtSizMtrs + Val(Dt2.Rows(i).Item("Meters").ToString)

                            Next i

                        End If

                        CurY = CurY + SzTxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                        CurY = CurY + SzTxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtSizBms)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizPcs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizMtrs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + SzTxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                    Next k

                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(3))

                End If

                '----------------------------------------------------------------------------------------------------
                '*****************      YARN TAKEN DETAILS     ************* (Space not enough so diabled, If No.of Pavu less than 20, then it is ok and can be enabled)
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_YarnTakenDetails) = -10000 Then

                    CurY = CurY + SzTxtHgt   ' + 10

                    p1Font = New Font("Calibri", 11, FontStyle.Regular)
                    'p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    Common_Procedures.Print_To_PrintDocument(e, "YARN TAKEN DETAILS", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), p1Font)

                    CurY = CurY + SzTxtHgt + 3  ' + 10

                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)
                    CurY = CurY + 5

                    Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7), pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, 2, ClArr(8), pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, 2, ClArr(9) + ClArr(10), pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "COUNT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, 2, ClArr(11), pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, 2, ClArr(12), pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, 2, ClArr(13), pFont)

                    CurY = CurY + SzTxtHgt + 5   ' + 10
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)
                    CurY = CurY + SzTxtHgt

                    Da2 = New SqlClient.SqlDataAdapter("select a.*, b.Count_Name, c.Mill_Name from Specification_YarnTaken_Details a INNER JOIN Count_Head b on a.Count_IdNo = b.Count_IdNo INNER JOIN Mill_Head c on a.Mill_IdNo = c.Mill_IdNo where a.company_idno = " & Str(Val(lbl_Company.Tag)) & " and a.Set_Code = '" & Trim(EntryCode) & "' Order by a.sl_no", Con)
                    Dt2 = New DataTable
                    Da2.Fill(Dt2)

                    SNo = 0

                    If Dt2.Rows.Count > 0 Then

                        CurY = CurY - SzTxtHgt - 10

                        For i = 0 To Dt2.Rows.Count - 1

                            SNo = SNo + 1

                            CurY = CurY + SzTxtHgt

                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Mill_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Count_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                        Next i

                    End If

                    CurY = CurY + SzTxtHgt + 5  ' 10
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                    CurY = CurY + SzTxtHgt - 10
                    Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                    'Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_bags").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_yarn_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                    CurY = CurY + SzTxtHgt + 5  ' 10
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                End If


                '----------------------------------------------------------------------------------------------------
                '**********************      INVOCIE DETAILS    **********************
                '----------------------------------------------------------------------------------------------------

                If StmtPrint_InvDetails_Status = True Then

                    InvLft = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6)
                    InvClW1 = ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 20 : InvClW2 = ClArr(11) + 10 : InvClW3 = ClArr(12) + 10
                    InvClW4 = (ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13)) - (InvClW1 + InvClW2 + InvClW3)

                    CurY = CurY + SzTxtHgt + 10

                    p1Font = New Font("Calibri", 11, FontStyle.Bold)
                    'p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    Common_Procedures.Print_To_PrintDocument(e, "INVOICE DETAILS", InvLft, CurY, 2, InvClW1 + InvClW2 + InvClW3 + InvClW4, p1Font)



                    CurY = CurY + SzTxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, InvLft, CurY, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4, CurY)

                    CurY = CurY + SzTxtHgt - 10
                    Common_Procedures.Print_To_PrintDocument(e, "INVOCIE NO.  :  " & prn_HdDt.Rows(0).Item("Invoice_No").ToString, InvLft + 10, CurY, 0, 0, pFont)
                    If IsDBNull(prn_HdDt.Rows(0).Item("Invoice_Date").ToString) = False Then
                        Common_Procedures.Print_To_PrintDocument(e, "INVOICE DATE  :  " & Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Invoice_Date").ToString)), InvLft + InvClW1, CurY, 0, 0, pFont)
                    Else
                        Common_Procedures.Print_To_PrintDocument(e, "INVOICE DATE  :  ", InvLft + InvClW1, CurY, 0, 0, pFont)
                    End If

                    CurY = CurY + SzTxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, InvLft, CurY, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4, CurY)

                    CurY = CurY + SzTxtHgt - 10
                    Common_Procedures.Print_To_PrintDocument(e, "PARTICULARS", InvLft, CurY, 2, InvClW1, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "QUANTITY", InvLft + InvClW1, CurY, 2, InvClW2, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "RATE", InvLft + InvClW1 + InvClW2, CurY, 2, InvClW3, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "AMOUNT", InvLft + InvClW1 + InvClW2 + InvClW3, CurY, 2, InvClW4, pFont)

                    CurY = CurY + SzTxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, InvLft, CurY, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4, CurY)

                    NoofInvDets = 0

                    CurY = CurY - 5

                    If Val(prn_HdDt.Rows(0).Item("Sizing_Amount1").ToString) > 0 Then
                        CurY = CurY + SzTxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Sizing_Text1").ToString), InvLft + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Weight1").ToString, InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Rate1").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Amount1").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1
                    End If

                    If Val(prn_HdDt.Rows(0).Item("Sizing_Amount2").ToString) > 0 Then
                        CurY = CurY + SzTxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Text2").ToString, InvLft + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Weight2").ToString, InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Rate2").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Amount2").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1
                    End If

                    If Val(prn_HdDt.Rows(0).Item("Sizing_Amount3").ToString) > 0 Then
                        CurY = CurY + SzTxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Text3").ToString, InvLft + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Weight3").ToString, InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Rate3").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Amount3").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1
                    End If

                    If Val(prn_HdDt.Rows(0).Item("Pack_Amt").ToString) > 0 Then
                        CurY = CurY + SzTxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Packing_Text").ToString, InvLft + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("Packing_Beam").ToString), InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Pack_Rate").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Pack_Amt").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1
                    End If

                    If Val(prn_HdDt.Rows(0).Item("Rewind_Amt").ToString) > 0 Then
                        CurY = CurY + SzTxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Rewinding_Text").ToString, InvLft + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Rewind_qty").ToString, InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Rewind_Rate").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Rewind_Amt").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1
                    End If

                    If Val(prn_HdDt.Rows(0).Item("weld_Amt").ToString) > 0 Then
                        CurY = CurY + SzTxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Welding_Text").ToString, InvLft + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("Welding_Beam").ToString), InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Weld_Rate").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("weld_Amt").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1

                    End If

                    If Val(prn_HdDt.Rows(0).Item("Sampleset_Amount").ToString) > 0 Then
                        CurY = CurY + SzTxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sampleset_Text").ToString, InvLft + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sampleset_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1
                    End If

                    If Val(prn_HdDt.Rows(0).Item("Vanrent_Amount").ToString) > 0 Then
                        CurY = CurY + SzTxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Vanrent_Text").ToString, InvLft + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Vanrent_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1
                    End If

                    If Val(prn_HdDt.Rows(0).Item("Other_Chrg").ToString) > 0 Then
                        CurY = CurY + SzTxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("OtherCharges_Text").ToString, InvLft + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Other_Chrg").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1
                    End If

                    If Val(prn_HdDt.Rows(0).Item("Disc_Amt").ToString) > 0 Then
                        CurY = CurY + SzTxtHgt

                        If Trim(UCase(prn_HdDt.Rows(0).Item("Discount_Type").ToString)) = "PERCENTAGE" Then
                            InvTxt1 = Trim(prn_HdDt.Rows(0).Item("Discount_Text").ToString) & "  @ " & Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString) & " %"
                            InvTxt2 = ""

                        Else
                            InvTxt1 = Trim(prn_HdDt.Rows(0).Item("Discount_Text").ToString) & "  @ " & Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString) & " Paise/Kg"
                            InvTxt2 = ""
                            'If Val(Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString)) = Val(Format(Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString), "#########0.00").ToString) Then
                            '    InvTxt2 = Format(Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString), "#########0.00").ToString
                            'Else
                            '    InvTxt2 = Format(Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString), "#########0.000").ToString
                            'End If

                        End If

                        Common_Procedures.Print_To_PrintDocument(e, InvTxt1, InvLft + 5, CurY, 0, 0, pFont)
                        'Common_Procedures.Print_To_PrintDocument(e, InvTxt2, InvLft + InvClW1 + InvClW2 + InvClW3  - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("Disc_Amt").ToString), InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1

                    End If

                    'For i = NoofInvDets + 1 To 10
                    '    CurY = CurY + TxtHgt
                    'Next

                    InvNetAmt = Val(prn_HdDt.Rows(0).Item("Sizing_Amount1").ToString) + Val(prn_HdDt.Rows(0).Item("Sizing_Amount2").ToString) + Val(prn_HdDt.Rows(0).Item("Sizing_Amount3").ToString) + Val(prn_HdDt.Rows(0).Item("Vat_Amount1").ToString) + Val(prn_HdDt.Rows(0).Item("Vat_Amount2").ToString) + Val(prn_HdDt.Rows(0).Item("SampleSet_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("VanRent_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("Pack_Amt").ToString) + Val(prn_HdDt.Rows(0).Item("Rewind_Amt").ToString) + Val(prn_HdDt.Rows(0).Item("Weld_Amt").ToString) + Val(prn_HdDt.Rows(0).Item("Other_Chrg").ToString) - Val(prn_HdDt.Rows(0).Item("Disc_Amt").ToString) + Val(prn_HdDt.Rows(0).Item("CGST_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("sGST_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("iGST_Amount").ToString)

                    InvRndOff = Val(prn_HdDt.Rows(0).Item("Net_Amount").ToString) - Val(InvNetAmt)
                    CurY = CurY + SzTxtHgt
                    If Val(InvRndOff) <> 0 Then
                        Common_Procedures.Print_To_PrintDocument(e, "ROUND OFF", InvLft + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(InvRndOff), "########0.00"), InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                        NoofInvDets = NoofInvDets + 1
                    End If

                    CurY = CurY + SzTxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, InvLft, CurY, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4, CurY)

                    CurY = CurY + SzTxtHgt - 10
                    p1Font = New Font("Calibri", 11, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "NET AMOUNT", InvLft + InvClW1 + InvClW2, CurY, 1, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Net_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, p1Font)

                    CurY = CurY + SzTxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, InvLft, CurY, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4, CurY)

                End If


                '----------------------------------------------------------------------------------------------------
                '**********************          AMOUNT DETAILS     **********************
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_AmountDetails) = 1 Then

                    PL1 = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6)
                    InvClW1 = ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 20 : InvClW2 = ClArr(11) + 10 : InvClW3 = ClArr(12) + 10
                    InvClW4 = (ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13)) - (InvClW1 + InvClW2 + InvClW3)

                    CurY = CurY + SzTxtHgt + 10

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    Common_Procedures.Print_To_PrintDocument(e, "AMOUNT BALANCE DETAILS", PL1, CurY, 2, ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), p1Font)

                    W1 = e.Graphics.MeasureString("Opening Balance    : ", pFont).Width

                    PL1 = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8)
                    PW1 = PL1 + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12)

                    CurY = CurY + SzTxtHgt + 5

                    Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Op)), PW1 - 10, CurY, 1, 0, pFont)

                    If Trim(prn_Amt_OpStNo) <> "" Then
                        CurY = CurY + SzTxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Amt_OpStNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    CurY = CurY + SzTxtHgt
                    Common_Procedures.Print_To_PrintDocument(e, "Received Amount", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Rcpt)), PW1 - 10, CurY, 1, 0, pFont)

                    If Trim(prn_Amt_RcptNo) <> "" Then
                        CurY = CurY + SzTxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Amt_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If


                    CurY = CurY + SzTxtHgt + 2
                    Common_Procedures.Print_To_PrintDocument(e, "Set Amount", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_CurSet)), PW1 - 10, CurY, 1, 0, pFont)

                    Bal_Amt = prn_Amt_Op - prn_Amt_Rcpt + prn_Amt_CurSet

                    CurY = CurY + SzTxtHgt + 10
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PW1, CurY)

                    CurY = CurY + SzTxtHgt - 10
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Amount", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(Bal_Amt)), PW1 - 10, CurY, 1, 0, p1Font)

                    CurY = CurY + SzTxtHgt + 10
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PW1, CurY)

                End If

                '---------- FOOTER

                Printing_Format6_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, True)

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

        e.HasMorePages = False

    End Sub

    Private Sub Printing_Format6_PageHeader(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim p1Font As Font
        Dim Cmp_Name As String, Cmp_Add1 As String, Cmp_Add2 As String
        Dim Cmp_PhNo As String, Cmp_Email As String, Cmp_TinNo As String, Cmp_CstNo As String
        Dim strHeight As Single
        Dim C1 As Single, C2 As Single, C3 As Single
        Dim W1 As Single, W2 As Single
        Dim ExcSht_Str As String

        PageNo = PageNo + 1

        CurY = TMargin

        'da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' Order by sl_no", Con)
        'dt2 = New DataTable
        'da2.Fill(dt2)
        'If dt2.Rows.Count > 30 Then
        '    Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(PageNo)), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
        'End If
        'dt2.Clear()

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY

        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
        Cmp_PhNo = "" : Cmp_Email = "" : Cmp_TinNo = "" : Cmp_CstNo = ""

        If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            Cmp_Name = Replace(Cmp_Name, Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString), "")
            Cmp_Add1 = Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString)
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        Else
            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        End If

        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = "PHONE NO.:" & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_EMail").ToString) <> "" Then
            Cmp_Email = "EMail : " & prn_HdDt.Rows(0).Item("Company_EMail").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_TinNo").ToString) <> "" Then
            Cmp_TinNo = "TIN NO.: " & prn_HdDt.Rows(0).Item("Company_TinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
            Cmp_CstNo = "CST NO.: " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
        End If

        If Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) <> "UNACCOUNT" Then

            CurY = CurY + TxtHgt - 10
            p1Font = New Font("Calibri", 14, FontStyle.Bold)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            CurY = CurY + strHeight
            If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
                p1Font = New Font("Calibri", 12, FontStyle.Bold)
            Else
                p1Font = New Font("Calibri", 9, FontStyle.Regular)
            End If
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1, LMargin, CurY, 2, PrintWidth, p1Font)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont)
            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, pFont)
            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, Cmp_TinNo, LMargin + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Email, LMargin, CurY, 2, PrintWidth, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_CstNo, PageWidth - 10, CurY, 1, 0, pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

        End If

        LnAr(2) = CurY

        C1 = 325
        C2 = 230
        C3 = PageWidth - (LMargin + C1 + C2)

        W1 = e.Graphics.MeasureString("Average Count : ", pFont).Width
        W2 = e.Graphics.MeasureString("Tape Length : ", pFont).Width  ' 20

        Try

            If Val(PageNo) <= 1 Then

                p1Font = New Font("Calibri", 12, FontStyle.Bold)
                strHeight = e.Graphics.MeasureString("Average Count : ", p1Font).Height

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "TO : ", LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Set No", LMargin + C1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Set_No").ToString), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font)
                Common_Procedures.Print_To_PrintDocument(e, "Mill Name", LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString), 15), LMargin + C1 + C2 + W2 + 25, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Set No    : " & Trim(prn_HdDt.Rows(0).Item("Set_No").ToString), LMargin + C1 + 10, CurY, 0, 0, p1Font)
                'Common_Procedures.Print_To_PrintDocument(e, "Mill : " & Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + strHeight
                p1Font = New Font("Calibri", 10, FontStyle.Bold)
                Common_Procedures.Print_To_PrintDocument(e, "     " & "M/S." & prn_HdDt.Rows(0).Item("Ledger_MainName").ToString, LMargin + 10, CurY, 0, 0, p1Font)
                Common_Procedures.Print_To_PrintDocument(e, "DATE", LMargin + C1 + 10, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Set_Date").ToString)), LMargin + C1 + W1 + 25, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + C1 + C2 + 10, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Ends_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + 3, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "DATE                 :  " & Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Set_Date").ToString)), LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Ends : " & Trim(prn_HdDt.Rows(0).Item("Ends_Name").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address1").ToString, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Count Name", LMargin + C1 + 10, CurY + 9, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + 9, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Count_Name").ToString), LMargin + C1 + W1 + 25, CurY + 9, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Tape Length", LMargin + C1 + C2 + 10, CurY + 9, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 9, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("tape_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY + 9, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Count Name : " & Trim(prn_HdDt.Rows(0).Item("Count_Name").ToString), LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Tape Length : " & Trim(prn_HdDt.Rows(0).Item("tape_length").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                If Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString) >= 0 Then
                    ExcSht_Str = "Excess"
                    'ExcSht_Str = "Excess        : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                Else
                    ExcSht_Str = "Short"
                    'ExcSht_Str = "Short         : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                End If
                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address2").ToString, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ExcSht_Str, LMargin + C1 + 10, CurY + 14, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + 14, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000"), LMargin + C1 + W1 + 25, CurY + 14, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Beam Width", LMargin + C1 + C2 + 10, CurY + 14, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 14, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Beam_Width_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + 14, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, ExcSht_Str, LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Beam Width : " & Trim(prn_HdDt.Rows(0).Item("Beam_Width_Name").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address3").ToString, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Average Count", LMargin + C1 + 10, CurY + 18, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + 18, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("beam_count").ToString), LMargin + C1 + W1 + 25, CurY + 18, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Mark", LMargin + C1 + C2 + 10, CurY + 18, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 18, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("pcs_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY + 18, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Average Count : " & Trim(prn_HdDt.Rows(0).Item("beam_count").ToString), LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Mark : " & Trim(prn_HdDt.Rows(0).Item("pcs_length").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address4").ToString, LMargin + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt + 10
                e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

                e.Graphics.DrawLine(Pens.Black, LMargin + C1, CurY, LMargin + C1, LnAr(2))
                e.Graphics.DrawLine(Pens.Black, LMargin + C1 + C2, CurY, LMargin + C1 + C2, LnAr(2))

            End If
            LnAr(3) = CurY

            CurY = CurY + TxtHgt - 10
            p1Font = New Font("Calibri", 12, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "WARPING DETAILS", LMargin, CurY, 2, ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), p1Font)
            Common_Procedures.Print_To_PrintDocument(e, "SIZING DETAILS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), p1Font)
            'Common_Procedures.Print_To_PrintDocument(e, "PARTICULARS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY + TxtHgt, 2, ClAr(14), p1Font)

            CurY = CurY + TxtHgt + 5 ' + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY)
            LnAr(4) = CurY

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Meter", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(4), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(5), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "BeamNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 2, ClAr(9), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 2, ClAr(10), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(11), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Pcs", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Meters", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY, 2, ClAr(13), pFont)

            CurY = CurY + TxtHgt + 5 ' + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(5) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub Printing_Format6_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PageHeight As Single, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal is_LastPage As Boolean)
        Dim p1Font As Font
        Dim Cmp_Name As String
        Dim LS As Single

        Try

            LS = PageHeight - 115  ' 125

            If CurY >= LS Then
                CurY = CurY + TxtHgt
            Else
                CurY = LS
            End If

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, PageWidth, CurY)
            'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(6) = CurY

            CurY = CurY + 10

            If Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) <> "UNACCOUNT" Then

                If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
                    Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
                    Cmp_Name = Replace(Cmp_Name, Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString), "")

                Else
                    Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString

                End If

                p1Font = New Font("Calibri", 12, FontStyle.Bold)
                Common_Procedures.Print_To_PrintDocument(e, "For " & Cmp_Name, PageWidth - 15, CurY, 1, 0, p1Font)

            End If

            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt

            Common_Procedures.Print_To_PrintDocument(e, "Prepared By", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + 15, CurY, 0, 0, pFont)
            'Common_Procedures.Print_To_PrintDocument(e, "Prepared By", LMargin + 20, CurY, 0, 0, pFont)
            'Common_Procedures.Print_To_PrintDocument(e, "Checked By", LMargin + 275, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Authorised Signatory", PageWidth - 15, CurY, 1, 0, pFont)
            CurY = CurY + TxtHgt + 10

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(7) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(1))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(3))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(6), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(6), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(1))

            p1Font = New Font("Calibri", 7, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "Software by TSOFT SOLUTIONS, Tirupur. Ph : 8508403222, 0421-4337417", LMargin + 8, CurY + 5, 0, 0, p1Font)

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub Printing_Format11(ByRef e As System.Drawing.Printing.PrintPageEventArgs)
        Dim Cmd As New SqlClient.SqlCommand
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Da2 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim EntryCode As String
        Dim pFont As Font, p1Font As Font, spFont As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single, sTxtHgt As Single, wTxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim ItmNm1 As String = "", ItmNm2 As String = ""
        Dim SNo As Integer
        Dim Det_Top As Single
        Dim i As Integer = 0, j As Integer = 0, k As Integer = 0
        Dim P1 As Single, P2 As Single
        Dim TtWrpEnds As Single
        Dim TtWrpGrsWgt As Single, TtWrpTrWgt As Single, TtWrpNetWgt As Single, TtOYSWgt As Single
        Dim Wpm() As String, WrpYrd As Single
        Dim TtSizBms As Single
        Dim TtSizGrsWgt As Single, TtSizTrWgt As Single, TtSizNetWgt As Single
        Dim TtSizPcs As Single, TtSizMtrs As Single
        Dim PL1 As Single, PL2 As Single
        Dim W1 As Single, W2 As Single
        Dim LF1 As Single, LF2 As Single
        Dim Bal_Yrn_Wt As Single, Bal_Bgs As Single, Bal_Amt As Single
        Dim Bal_Bms As Integer
        Dim NoofItems_PerPage As Integer
        Dim YInc As Single = 0
        Dim NoofDets As Integer = 0
        Dim EmBmPrintSTS As Integer = 0
        Dim SzTxtHgt As Integer = 0
        Dim TtYSBgs As Single, TtYSCns As Single, TtYSWgt As Single

        Dim OthCntPrintSTS As Integer = 0
        Dim EmpBgPrintSTS As Integer = 0
        Dim Z As Single = 0, X As Single = 0
        Dim ps As Printing.PaperSize

        'Dim pkCustomSize1 As New System.Drawing.Printing.PaperSize("PAPER 9X12", 900, 1200)
        'PrintDocument1.PrinterSettings.DefaultPageSettings.PaperSize = pkCustomSize1
        'PrintDocument1.DefaultPageSettings.PaperSize = pkCustomSize1


        'With PrintDocument1.DefaultPageSettings.Margins
        '    .Left = 30
        '    .Right = 30
        '    .Top = 5 ' 10
        '    .Bottom = 30 ' 45
        '    LMargin = .Left
        '    RMargin = .Right
        '    TMargin = .Top
        '    BMargin = .Bottom
        'End With

        For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(i)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                Exit For
            End If
        Next

        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 12 ' 20
            .Right = 55 ' 40
            .Top = 15  ' 30
            .Bottom = 25
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        pFont = New Font("Calibri", 11, FontStyle.Regular)
        'printFont = New Font("Draft 12cpi", 10)
        'pFont = New Font("Calibri", 9, FontStyle.Regular)
        'pFont = New Font("Calibri", 9.5, FontStyle.Regular)


        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With

        'TxtHgt = e.Graphics.MeasureString("A", pFont).Height
        TxtHgt = 18 ' 19  ' 17.75   'e.Graphics.MeasureString("A", pFont).Height  ' 18  ' 20
        'TxtHgt = 17.8 ' e.Graphics.MeasureString("A", pFont).Height  ' 18  ' 20

        Erase LnAr
        Erase ClArr

        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = Val(38) : ClArr(2) = 55 : ClArr(3) = 60 : ClArr(4) = 62 : ClArr(5) = 60 : ClArr(6) = 63
        ClArr(7) = Val(38) : ClArr(8) = 60 : ClArr(9) = 70 : ClArr(10) = 65 : ClArr(11) = 55 : ClArr(12) = 70
        ClArr(13) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12))

        'ClArr(1) = Val(30) : ClArr(2) = 45 : ClArr(3) = 50 : ClArr(4) = 52 : ClArr(5) = 48 : ClArr(6) = 53
        'ClArr(7) = Val(30) : ClArr(8) = 50 : ClArr(9) = 53 : ClArr(10) = 47 : ClArr(11) = 53 : ClArr(12) = 48 : ClArr(13) = 65
        'ClArr(14) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13))

        P1 = ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30
        P2 = PageWidth - P1

        CurY = TMargin

        NoofItems_PerPage = 32

        EntryCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

        Try

            If prn_HdDt.Rows.Count > 0 Then

                Da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' Order by sl_no", Con)
                Da2.Fill(Dt2)
                If Dt2.Rows.Count > 30 Then
                    TxtHgt = TxtHgt - 1
                End If
                Dt2.Clear()

                '---------------------------------------------------------------------------------------------------- 
                '**********************         STOCK CALCULATION             **********************
                '----------------------------------------------------------------------------------------------------

                prn_Yrn_OpWt = 0 : prn_Yrn_RcptWt = 0 : prn_Yrn_DelvWt = 0
                prn_Yrn_ConsWt = 0 : prn_Yrn_ExShWt = 0
                prn_Yrn_TknWt = 0 : prn_Yrn_BayCnWt = 0
                prn_Yrn_RwExShWt = 0 : prn_Yrn_RwExShStNo = ""
                prn_Yrn_TranfrWt = 0 : prn_Yrn_TranfrNo = ""
                prn_Yrn_ExcSht_Wt = 0 : prn_Yrn_ExcSht_No = ""
                prn_Yrn_OpStNo = "" : prn_Yrn_RcptNo = "" : prn_Yrn_DcNo = ""

                prn_EmpBm_Op = 0 : prn_EmpBm_Rcpt = 0 : prn_EmpBm_Delv = 0 : prn_EmpBm_Cons = 0
                prn_EmpBm_OpStNo = "" : prn_EmpBm_RcptNo = "" : prn_EmpBm_DcNo = ""

                prn_EmpBg_Op = 0 : prn_EmpBg_Rcpt = 0 : prn_EmpBg_Delv = 0
                prn_EmpBg_OpStNo = "" : prn_EmpBg_RcptNo = "" : prn_EmpBg_DcNo = ""

                prn_Amt_Op = 0 : prn_Amt_Rcpt = 0 : prn_Amt_CurSet = 0
                prn_Amt_OpStNo = "" : prn_Amt_RcptNo = ""

                Cmd.Connection = Con

                Cmd.CommandText = "truncate table Temp_Statement_Yarn_Stock_Summary"
                Cmd.ExecuteNonQuery()

                Cmd.CommandText = "truncate table Temp_Statement_Other_Yarn_Stock_Summary"
                Cmd.ExecuteNonQuery()

                Stock_calulation()

                '---------------------------------------------------------------------------------------------------- 
                '**********************         HEADER             **********************
                '----------------------------------------------------------------------------------------------------

                Printing_Format11_PageHeader(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, prn_PageNo, CurY, LnAr, ClArr, NoofItems_PerPage)

                Det_Top = CurY

                If Val(prn_PageNo) <= 1 Then

                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         WARPING DETAILS             **********************
                    '----------------------------------------------------------------------------------------------------

                    Wpm = Split(Trim(prn_HdDt.Rows(0).Item("warp_meters").ToString), ",")


                    Da1 = New SqlClient.SqlDataAdapter("select distinct(Warp_SlNo) from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' Order by Warp_SlNo", Con)
                    Dt1 = New DataTable
                    Da1.Fill(Dt1)

                    If Dt1.Rows.Count > 0 Then

                        If Dt1.Rows.Count > 10 Then
                            wTxtHgt = 17
                        Else
                            wTxtHgt = TxtHgt
                        End If

                        For k = 0 To Dt1.Rows.Count - 1

                            CurY = CurY - 10

                            Da2 = New SqlClient.SqlDataAdapter("select * from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Warp_SlNo = " & Str(Val(Dt1.Rows(k).Item("Warp_SlNo").ToString)) & " Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            WrpYrd = Val(Wpm(k))

                            SNo = 0
                            TtWrpEnds = 0
                            TtWrpGrsWgt = 0 : TtWrpTrWgt = 0 : TtWrpNetWgt = 0

                            If Dt2.Rows.Count > 0 Then

                                For i = 0 To Dt2.Rows.Count - 1

                                    SNo = SNo + 1

                                    CurY = CurY + wTxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + 8, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Ends_Name").ToString)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                                    TtWrpEnds = TtWrpEnds + Val(Dt2.Rows(i).Item("Ends_Name").ToString)
                                    TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                    TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                    TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)

                                Next i

                            End If

                            CurY = CurY + wTxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                            CurY = CurY + wTxtHgt - 10
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtWrpEnds)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                            CurY = CurY + wTxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        Next k

                        'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2), CurY, LMargin + ClArr(1) + ClArr(2), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), LnAr(3))

                    End If


                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         YARN STOCK PARTICULARS              **********************
                    '----------------------------------------------------------------------------------------------------

                    'CurY = Det_Top

                    CurY = CurY + TxtHgt

                    PL1 = LMargin + 5
                    'PL1 = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13)

                    W1 = e.Graphics.MeasureString("Opening Balance   : ", pFont).Width
                    W2 = 120
                    LF1 = 15

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    'p1Font = New Font("Calibri", 13, FontStyle.Bold Or FontStyle.Underline)  ---  Working
                    Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK", PL1 + LF1, CurY, 2, W1 + W2, p1Font)

                    CurY = CurY + TxtHgt + 5

                    Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_OpWt), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_OpStNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Yrn_OpStNo) & ")", PL1 + LF1 + 20, CurY, 0, 0, pFont)
                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Received", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_RcptWt), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_RcptNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Yrn_RcptNo) & ")", PL1 + LF1 + 20, CurY, 0, 0, p1Font)
                    End If

                    If Val(Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn) = 2 Then

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Consumed Yarn", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_ConsWt), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_ExShWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Short Yarn", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Excess Yarn", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        End If

                    Else

                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "Yarn Taken", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_TknWt), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "Baby Cone", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_BayCnWt), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Delivery", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_DelvWt), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_DcNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_Yrn_DcNo) & ")", PL1 + LF1 + 20, CurY, 0, 0, p1Font)
                    End If

                    If Val(prn_Yrn_RwExShWt) <> 0 Then

                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_RwExShWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Short", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Excess", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_RwExShStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Set.No. :  " & Trim(prn_Yrn_RwExShStNo) & ")", PL1 + LF1 + 20, CurY, 0, 0, p1Font)
                        End If

                    End If

                    If Val(prn_Yrn_TranfrWt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_TranfrWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_TranfrWt)), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_TranfrWt)), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_TranfrNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_TranfrNo) & ")", PL1 + LF1 + 20, CurY, 0, 0, p1Font)
                        End If
                    End If

                    If Val(prn_Yrn_ExcSht_Wt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_ExcSht_Wt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Exc)", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExcSht_Wt)), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Sht)", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExcSht_Wt)), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_ExcSht_No) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_ExcSht_No) & ")", PL1 + LF1 + 20, CurY, 0, 0, p1Font)
                        End If
                    End If

                    If Val(Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn) = 2 Then
                        Bal_Yrn_Wt = prn_Yrn_OpWt + prn_Yrn_RcptWt - prn_Yrn_DelvWt - prn_Yrn_ConsWt + prn_Yrn_ExShWt + prn_Yrn_RwExShWt + prn_Yrn_TranfrWt + prn_Yrn_ExcSht_Wt
                    Else
                        Bal_Yrn_Wt = prn_Yrn_OpWt + prn_Yrn_RcptWt - prn_Yrn_DelvWt - prn_Yrn_TknWt + prn_Yrn_BayCnWt + prn_Yrn_RwExShWt + prn_Yrn_TranfrWt + prn_Yrn_ExcSht_Wt
                    End If

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + LF1 + W1 + 20, CurY, PL1 + LF1 + W1 + W2, CurY)

                    CurY = CurY + 10
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Yarn", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Bal_Yrn_Wt), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, p1Font)

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + LF1 + W1 + 20, CurY, PL1 + LF1 + W1 + W2, CurY)


                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         YARN STOCK SUMMARY FOR OTHER COUNT    **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_Yarn_Other_Count_Particulars) = 1 Then

                        OthCntPrintSTS = 1
                        If OthCntPrintSTS = 1 Then

                            CurY = CurY + TxtHgt

                            p1Font = New Font("Calibri", 11, FontStyle.Underline)
                            Common_Procedures.Print_To_PrintDocument(e, "OTHER COUNT PARTICULARS", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                            CurY = CurY + TxtHgt + 5

                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)
                            CurY = CurY + 5

                            Common_Procedures.Print_To_PrintDocument(e, "COUNT NAME", LMargin + ClArr(1) + 15, CurY, 0, ClArr(2) + ClArr(3) + ClArr(4), pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, 2, ClArr(5) + ClArr(6) - ClArr(1), pFont)

                            CurY = CurY + TxtHgt + 5
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)
                            CurY = CurY + TxtHgt

                            Da2 = New SqlClient.SqlDataAdapter("select * from Temp_Statement_Other_Yarn_Stock_Summary where Weight <> 0 Order by Count_Name", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            SNo = 0
                            TtOYSWgt = 0

                            If Dt2.Rows.Count > 0 Then

                                CurY = CurY - TxtHgt - 5

                                For i = 0 To Dt2.Rows.Count - 1

                                    'If NoofDets > NoofItems_PerPage Then
                                    '    CurY = CurY + TxtHgt
                                    '    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)
                                    '    NoofDets = NoofDets + 1
                                    '    Printing_Format3_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, False)
                                    '    e.HasMorePages = True
                                    '    Return
                                    'End If

                                    SNo = SNo + 1

                                    CurY = CurY + TxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(Dt2.Rows(i).Item("Count_Name").ToString), 12), LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)

                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1) - 15, CurY, 1, 0, pFont)

                                    TtOYSWgt = TtOYSWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                                Next i

                            End If

                            CurY = CurY + TxtHgt + 5
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)

                            'CurY = CurY + TxtHgt - 5
                            'Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)
                            'Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtOYSWgt), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1) - 15, CurY, 1, 0, pFont)

                            'CurY = CurY + TxtHgt + 5
                            'e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)

                        End If

                    End If

                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         EMPTY BEAM STOCK DETAILS              **********************
                    '----------------------------------------------------------------------------------------------------

                    EmBmPrintSTS = 1
                    If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then
                        If Val(prn_HdDt.Rows(0).Item("SocietySet_Status").ToString) = 1 Then
                            EmBmPrintSTS = 0
                            If MessageBox.Show("Do you want to Print Empty Beam Details ?", "FOR PRINTING...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) = Windows.Forms.DialogResult.Yes Then
                                EmBmPrintSTS = 1
                            End If
                        End If
                    End If

                    If EmBmPrintSTS = 1 Then

                        CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "EMPTY BEAM STOCK", PL1 + LF1, CurY, 2, W1 + W2, p1Font)

                        CurY = CurY + TxtHgt + 5

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Op), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBm_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBm_OpStNo) & ")", PL1 + LF1 + 20, CurY, 0, 0, pFont)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Beams Received", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Rcpt), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBm_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBm_RcptNo) & ")", PL1 + LF1 + 20, CurY, 0, 0, p1Font)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Consumed Beams", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Cons), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Beams Delivered", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Delv), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBm_DcNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBm_DcNo) & ")", PL1 + LF1 + 20, CurY, 0, 0, p1Font)
                        End If

                        Bal_Bms = prn_EmpBm_Op + prn_EmpBm_Rcpt - prn_EmpBm_Delv - prn_EmpBm_Cons

                        CurY = CurY + TxtHgt
                        e.Graphics.DrawLine(Pens.Black, PL1 + LF1 + W1 + 20, CurY, PL1 + LF1 + W1 + W2 + 5, CurY)

                        CurY = CurY + 10
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance Beams", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bms), PL1 + LF1 + W1 + W2, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, PL1 + LF1 + W1 + 20, CurY, PL1 + LF1 + W1 + W2 + 5, CurY)

                    End If

                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         EMPTY BEAM STOCK SUMMARY - WIDTHWISE              **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStock_WidthWise_Summary) = 1 Then

                        If Val(prn_PageNo) <= 1 Then

                            CurY = CurY + TxtHgt + 10

                            p1Font = New Font("Calibri", 11, FontStyle.Underline)
                            Common_Procedures.Print_To_PrintDocument(e, "EMPTY BEAM STOCK SUMMARY", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                            CurY = CurY + TxtHgt + 10

                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)
                            CurY = CurY + 10

                            Common_Procedures.Print_To_PrintDocument(e, "BEAM WIDTH", LMargin + 2, CurY, 2, ClArr(1) + 15, pFont)

                            Common_Procedures.Print_To_PrintDocument(e, "EMPTYBEAM", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 25, CurY, 2, ClArr(6) + 25, pFont)

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)
                            CurY = CurY + TxtHgt

                            Da2 = New SqlClient.SqlDataAdapter("select * from Temp_Statement_EmptyBeam_Stock_Summary where Empty_Beam <> 0 Order by Beam_Width_Name", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            SNo = 0
                            TtYSBgs = 0 : TtYSCns = 0 : TtYSWgt = 0

                            If Dt2.Rows.Count > 0 Then

                                CurY = CurY - TxtHgt - 10

                                For i = Prn_YrnStkSumm_StartIndx To Dt2.Rows.Count - 1

                                    SNo = SNo + 1

                                    CurY = CurY + TxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Beam_Width_Name").ToString), LMargin + 5, CurY, 0, 0, pFont)

                                    Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Empty_Beam").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                                    Prn_TtEmpBms = Prn_TtEmpBms + Val(Dt2.Rows(i).Item("Empty_Beam").ToString)

                                Next i

                            End If

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                            CurY = CurY + TxtHgt - 10
                            Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Val(Prn_TtEmpBms), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)


                        End If

                    End If

                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         EMPTY GUNNIES STOCK (SIMPLE)              **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_EmptyBagStockSimple) = 1 Then

                        EmpBgPrintSTS = 1
                        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then
                            EmpBgPrintSTS = 0
                            If MessageBox.Show("Do you want to Print Empty Gunnies Stock?", "FOR PRINTING...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) = Windows.Forms.DialogResult.Yes Then
                                EmpBgPrintSTS = 1
                            End If
                        End If

                        If EmpBgPrintSTS = 1 Then

                            Bal_Bgs = prn_EmpBg_Op + prn_EmpBg_Rcpt - prn_EmpBg_Delv

                            CurY = CurY + TxtHgt + 5

                            p1Font = New Font("Calibri", 11, FontStyle.Bold)
                            Common_Procedures.Print_To_PrintDocument(e, "Empty Gunnies", PL1 + LF1 + 5, CurY, 0, 0, p1Font)
                            Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bgs), PL1 + LF1 + W1 + 15, CurY, 0, 0, pFont)
                            'Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bgs), P1 - 10, CurY, 1, 0, pFont)

                            CurY = CurY + 10

                        End If


                    End If


                End If

                ''---------------------------------------------------------------------------------------------------- 
                ''**********************         AMOUNT DETAILS              **********************
                ''----------------------------------------------------------------------------------------------------

                'If Val(Common_Procedures.settings.StatementPrint_AmountDetails) = 1 Then

                '    W1 = e.Graphics.MeasureString("Current Set Amount : ", pFont).Width
                '    W2 = 110
                '    LF2 = 25

                '    If TxtHgt >= 17 Then
                '        TxtHgt = TxtHgt
                '    End If

                '    CurY = CurY + TxtHgt + IIf(TxtHgt >= 17, 5, 0)

                '    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                '    Common_Procedures.Print_To_PrintDocument(e, "AMOUNT BALANCE DETAILS", PL1 + LF2, CurY, 2, W1 + W2, p1Font)

                '    CurY = CurY + TxtHgt + IIf(TxtHgt >= 17, 5, 0)

                '    Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + LF2 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + LF2 + W1 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Op)), PL1 + LF2 + W1 + W2, CurY, 1, 0, pFont)

                '    If Trim(prn_Amt_OpStNo) <> "" Then
                '        CurY = CurY + TxtHgt - 2
                '        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                '        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Amt_OpStNo) & ")", PL1 + LF2 + 20, CurY, 0, 0, pFont)
                '    End If

                '    CurY = CurY + TxtHgt

                '    Common_Procedures.Print_To_PrintDocument(e, "Received Amount", PL1 + LF2 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + LF2 + W1 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Rcpt)), PL1 + LF2 + W1 + W2, CurY, 1, 0, pFont)

                '    If Trim(prn_Amt_RcptNo) <> "" Then
                '        CurY = CurY + TxtHgt - 2
                '        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                '        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Amt_RcptNo) & ")", PL1 + LF2 + 20, CurY, 0, 0, p1Font)
                '    End If

                '    CurY = CurY + TxtHgt + 2

                '    Common_Procedures.Print_To_PrintDocument(e, "Current Set Amount", PL1 + LF2 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + LF2 + W1 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_CurSet)), PL1 + LF2 + W1 + W2, CurY, 1, 0, pFont)

                '    Bal_Amt = prn_Amt_Op - prn_Amt_Rcpt + prn_Amt_CurSet

                '    CurY = CurY + TxtHgt + IIf(TxtHgt >= 17, 10, 5)
                '    e.Graphics.DrawLine(Pens.Black, PL1 + LF2 + W1 + 20, CurY, PL1 + LF2 + W1 + W2 + 5, CurY)

                '    CurY = CurY + TxtHgt - IIf(TxtHgt >= 17, 10, 5)
                '    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                '    Common_Procedures.Print_To_PrintDocument(e, "Balance Amount", PL1 + LF2 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + LF2 + W1 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(Bal_Amt)), PL1 + LF2 + W1 + W2, CurY, 1, 0, p1Font)

                '    CurY = CurY + TxtHgt + IIf(TxtHgt >= 17, 10, 5)
                '    e.Graphics.DrawLine(Pens.Black, PL1 + LF2 + W1 + 20, CurY, PL1 + LF2 + W1 + W2 + 5, CurY)

                'End If


                If Val(Common_Procedures.settings.StatementPrint_YarnStockSummary) = 1 Then

                    If Val(prn_PageNo) <= 1 Or Prn_YrnStkSumm_2ndPage_STS = True Then

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK SUMMARY", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                        CurY = CurY + TxtHgt + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)
                        CurY = CurY + 10

                        Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + 2, CurY, 2, ClArr(1) + 15, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + ClArr(1) + 15, CurY, 2, ClArr(2) + ClArr(3) - 15 + ClArr(4) - 25, pFont)
                        If Val(ClArr(4)) <> 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 25, CurY, 2, ClArr(5), pFont)
                        End If
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 25, CurY, 2, ClArr(6) + 25, pFont)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)
                        CurY = CurY + TxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select * from Temp_Statement_Yarn_Stock_Summary where Weight <> 0 Order by Order_By, Mill_Name", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0
                        TtYSBgs = 0 : TtYSCns = 0 : TtYSWgt = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - 10

                            For i = Prn_YrnStkSumm_StartIndx To Dt2.Rows.Count - 1

                                'If CurY >= 975 Then

                                '    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                                '    CurY = CurY + TxtHgt
                                '    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, p1Font)
                                '    CurY = CurY + 5

                                '    Prn_YrnStkSumm_2ndPage_STS = True
                                '    Prn_YrnStkSumm_StartIndx = i

                                '    'GoTo YRNSTKSUMM_1000
                                'End If

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(Dt2.Rows(i).Item("Mill_Name").ToString), 12), LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)
                                If Val(ClArr(4)) <> 0 Then
                                    Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 25 + ClArr(5) - 5, CurY, 1, 0, pFont)
                                End If
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                                Prn_TtYSBgs = Prn_TtYSBgs + Val(Dt2.Rows(i).Item("Bags").ToString)
                                Prn_TtYSCns = Prn_TtYSCns + Val(Dt2.Rows(i).Item("Cones").ToString)
                                Prn_TtYSWgt = Prn_TtYSWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)
                        If Val(ClArr(4)) <> 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, Val(Prn_TtYSCns), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 25 - 5, CurY, 1, 0, pFont)
                        End If
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtYSWgt), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        Prn_YrnStkSumm_2ndPage_STS = False

                    End If

                End If

                '---------------------------------------------------------------------------------------------------- 
                '**********************         SIZING DETAILS              **********************
                '----------------------------------------------------------------------------------------------------

                spFont = New Font("Calibri", 9, FontStyle.Regular)

                NoofDets = 0

                CurY = Det_Top

                PL2 = LMargin + P1

                sTxtHgt = 17
                SNo = 0

                Da1 = New SqlClient.SqlDataAdapter("select distinct(Sizing_SlNo) from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' Order by Sizing_SlNo", Con)
                Dt1 = New DataTable
                Da1.Fill(Dt1)

                If Dt1.Rows.Count > 0 Then

                    Z = 0 : X = 0

                    If Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString) <> 0 Then

                        If Val(prn_HdDt.Rows(0).Item("Total_Pavu_Beam").ToString) <> 0 Then

                            Z = Format((Val(prn_HdDt.Rows(0).Item("Total_Warping_Net_Weight").ToString) * Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString) / 100) + Val(prn_HdDt.Rows(0).Item("Total_Warping_Net_Weight").ToString), "#########0.0")
                            X = Format(Z - Val(prn_HdDt.Rows(0).Item("Total_Pavu_Net_Weight").ToString), "#########0.0")
                            X = Format(X / Val(prn_HdDt.Rows(0).Item("Total_Pavu_Beam").ToString), "########0.00")

                        End If

                    End If

                    For k = 0 To Dt1.Rows.Count - 1

                        CurY = CurY - 5  ' 10

                        Da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' and Sizing_SlNo = " & Str(Val(Dt1.Rows(k).Item("Sizing_SlNo").ToString)) & " Order by sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0
                        TtSizBms = 0
                        TtSizGrsWgt = 0 : TtSizTrWgt = 0 : TtSizNetWgt = 0
                        TtSizPcs = 0 : TtSizMtrs = 0

                        If Dt2.Rows.Count > 0 Then

                            If Dt2.Rows.Count > 25 Then
                                sTxtHgt = 16
                            Else
                                sTxtHgt = 17
                            End If

                            For i = 0 To Dt2.Rows.Count - 1

                                'If NoofDets > NoofItems_PerPage Then
                                '    CurY = CurY + TxtHgt
                                '    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)
                                '    NoofDets = NoofDets + 1
                                '    Printing_Format4_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, False)
                                '    e.HasMorePages = True
                                '    NoofDets = 0
                                '    Return
                                'End If

                                If Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString) <> 0 Then
                                    If k = Dt1.Rows.Count - 1 And i = Dt2.Rows.Count - 1 Then
                                        X = Format(Z - Format((Prn_TtSizNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)), "########0.0"), "########0.0")
                                        'X = Format(Z - (TtSizNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString) + X), "########0.0")
                                    End If
                                End If

                                SNo = SNo + 1

                                CurY = CurY + sTxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Beam_No").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString) + X, "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString) + X, "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Noof_Pcs").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Meters").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                                NoofDets = NoofDets + 1

                                TtSizBms = TtSizBms + 1
                                TtSizGrsWgt = TtSizGrsWgt + Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString) + X, "########0.0")
                                TtSizTrWgt = TtSizTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                TtSizNetWgt = TtSizNetWgt + Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString) + X, "########0.0")
                                Prn_TtSizNetWgt = Prn_TtSizNetWgt + Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString) + X, "########0.0")
                                TtSizPcs = TtSizPcs + Val(Dt2.Rows(i).Item("Noof_Pcs").ToString)
                                TtSizMtrs = TtSizMtrs + Val(Dt2.Rows(i).Item("Meters").ToString)

                            Next i

                        End If

                        CurY = CurY + sTxtHgt + 5 ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                        CurY = CurY + sTxtHgt - 5 ' 10
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtSizBms)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizPcs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizMtrs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + sTxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                    Next k

                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(3))

                Else

                    For k = 1 To 10
                        CurY = CurY + TxtHgt
                    Next

                    CurY = CurY + sTxtHgt + 5 ' 10
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                    CurY = CurY + sTxtHgt - 5 ' 10
                    Common_Procedures.Print_To_PrintDocument(e, "", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtSizBms)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizPcs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizMtrs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                    CurY = CurY + sTxtHgt + 10
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(3))

                End If

                '----------------------------------------------------------------------------------------------------
                '*****************      YARN TAKEN DETAILS     ************* 
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_YarnTakenDetails) = 1 Then

                    If Val(prn_PageNo) <= 1 Or Prn_YrnTknDet_2ndPage_STS = True Then

                        'If CurY >= 1050 Then
                        '    Prn_YrnTknDet_2ndPage_STS = True
                        '    Prn_SizInvoice_2ndPage_STS = True
                        '    GoTo YRNTKNDET_1000
                        'End If

                        CurY = CurY + sTxtHgt   ' + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                        'p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "YARN TAKEN DETAILS", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), p1Font)

                        CurY = CurY + sTxtHgt + 3  ' + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)
                        CurY = CurY + 5

                        Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 2, ClArr(7), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) - 15, CurY, 2, ClArr(8), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) - 10, CurY, 2, ClArr(9) + ClArr(10), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "COUNT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + 10, CurY, 2, ClArr(11), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + 10, CurY, 2, ClArr(12), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + 5, CurY, 2, ClArr(13), pFont)

                        CurY = CurY + sTxtHgt + 5   ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)
                        CurY = CurY + sTxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select a.*, b.Count_Name, c.Mill_Name from Specification_YarnTaken_Details a INNER JOIN Count_Head b on a.Count_IdNo = b.Count_IdNo INNER JOIN Mill_Head c on a.Mill_IdNo = c.Mill_IdNo where a.company_idno = " & Str(Val(lbl_Company.Tag)) & " and a.Set_Code = '" & Trim(EntryCode) & "' Order by a.sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - sTxtHgt - 10

                            For i = Prn_YrnTknDet_StartIndx To Dt2.Rows.Count - 1

                                'If CurY >= 1100 Then

                                '    p1Font = New Font("Calibri", 10, FontStyle.Bold)

                                '    CurY = CurY + TxtHgt
                                '    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, p1Font)
                                '    CurY = CurY + 5 ' 10

                                '    Prn_YrnTknDet_2ndPage_STS = True
                                '    Prn_SizInvoice_2ndPage_STS = True
                                '    Prn_YrnTknDet_StartIndx = i

                                '    GoTo YRNTKNDET_1000

                                'End If

                                SNo = SNo + 1

                                CurY = CurY + sTxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 0, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Mill_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) - 15, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Count_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + 15, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, 1, 0, pFont)

                            Next i

                        End If

                        CurY = CurY + sTxtHgt + 5  ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                        CurY = CurY + sTxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 0, CurY, 0, 0, pFont)
                        'Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_bags").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_yarn_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, 1, 0, pFont)

                        CurY = CurY + sTxtHgt + 5  ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                        Prn_YrnTknDet_2ndPage_STS = False

                    End If

                Else
                    Prn_YrnTknDet_2ndPage_STS = False

                End If

                '---------------------------------------------------------------------------------------------------- 
                '**********************         AMOUNT DETAILS              **********************
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_AmountDetails) = 1 Then

                    W1 = e.Graphics.MeasureString("Current Set Amount : ", pFont).Width
                    W2 = 110
                    LF2 = 25

                    If sTxtHgt >= 17 Then
                        sTxtHgt = TxtHgt
                    End If

                    CurY = CurY + sTxtHgt + IIf(sTxtHgt >= 17, 5, 0)

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    Common_Procedures.Print_To_PrintDocument(e, "AMOUNT BALANCE DETAILS", PL2 + LF2, CurY, 2, W1 + W2, p1Font)

                    CurY = CurY + sTxtHgt + IIf(sTxtHgt >= 17, 5, 0)

                    Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL2 + LF2 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL2 + LF2 + W1 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Op)), PL2 + LF2 + W1 + W2, CurY, 1, 0, pFont)

                    If Trim(prn_Amt_OpStNo) <> "" Then
                        CurY = CurY + sTxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Amt_OpStNo) & ")", PL2 + LF2 + 20, CurY, 0, 0, pFont)
                    End If

                    CurY = CurY + sTxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Received Amount", PL2 + LF2 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL2 + LF2 + W1 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Rcpt)), PL2 + LF2 + W1 + W2, CurY, 1, 0, pFont)

                    If Trim(prn_Amt_RcptNo) <> "" Then
                        CurY = CurY + sTxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Amt_RcptNo) & ")", PL2 + LF2 + 20, CurY, 0, 0, p1Font)
                    End If

                    CurY = CurY + sTxtHgt + 2

                    Common_Procedures.Print_To_PrintDocument(e, "Current Set Amount", PL2 + LF2 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL2 + LF2 + W1 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_CurSet)), PL2 + LF2 + W1 + W2, CurY, 1, 0, pFont)

                    Bal_Amt = prn_Amt_Op - prn_Amt_Rcpt + prn_Amt_CurSet

                    CurY = CurY + sTxtHgt + IIf(sTxtHgt >= 17, 10, 5)
                    e.Graphics.DrawLine(Pens.Black, PL2 + LF2 + W1 + 20, CurY, PL2 + LF2 + W1 + W2 + 5, CurY)

                    CurY = CurY + sTxtHgt - IIf(sTxtHgt >= 17, 10, 5)
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Amount", PL2 + LF2 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL2 + LF2 + W1 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(Bal_Amt)), PL2 + LF2 + W1 + W2, CurY, 1, 0, p1Font)

                    CurY = CurY + sTxtHgt + IIf(sTxtHgt >= 17, 10, 5)
                    e.Graphics.DrawLine(Pens.Black, PL2 + LF2 + W1 + 20, CurY, PL2 + LF2 + W1 + W2 + 5, CurY)

                End If


                '---------------------------------------------------------------------------------------------------- 
                '**********************         FOOTER             **********************
                '----------------------------------------------------------------------------------------------------

                Printing_Format11_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, True)

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

        e.HasMorePages = False

    End Sub

    Private Sub Printing_Format11_PageHeader(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal NoofItems_PerPage As Integer)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim p1Font As Font
        Dim Cmp_Name As String, Cmp_Add1 As String, Cmp_Add2 As String
        Dim Cmp_PhNo As String, Cmp_TinNo As String, Cmp_CstNo As String, Cmp_Email As String
        Dim strHeight As Single
        Dim C1 As Single, C2 As Single, C3 As Single, C4 As Single
        Dim P1 As Single, P2 As Single
        Dim W1 As Single, W2 As Single, W3 As Single
        Dim ExcSht_Str As String
        Dim Bal_Bms As Integer = 0
        Dim YInc As Single = 0
        Dim MilNm1 As String, MilNm2 As String
        Dim I As Integer = 0
        Dim CmpNmAddSTS As Boolean = False
        Dim PrntCompHeading As Boolean = False
        Dim Cmp_StateCap As String, Cmp_StateNm As String, Cmp_StateCode As String, Cmp_GSTIN_Cap As String, Cmp_GSTIN_No As String = ""
        Dim Cmp_PanNo As String

        PageNo = PageNo + 1

        CurY = TMargin

        da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' Order by sl_no", Con)
        da2.Fill(dt2)
        If dt2.Rows.Count > NoofItems_PerPage Then
            Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(PageNo)), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
        End If
        dt2.Clear()

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY

        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
        Cmp_PhNo = "" : Cmp_TinNo = "" : Cmp_CstNo = "" : Cmp_Email = ""

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY

        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
        Cmp_PhNo = "" : Cmp_Email = "" : Cmp_TinNo = "" : Cmp_CstNo = ""

        If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            Cmp_Name = Replace(Cmp_Name, Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString), "")
            Cmp_Add1 = Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString)
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        Else
            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        End If

        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = "PHONE NO.:" & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_EMail").ToString) <> "" Then
            Cmp_Email = "EMail : " & prn_HdDt.Rows(0).Item("Company_EMail").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_TinNo").ToString) <> "" Then
            Cmp_TinNo = "TIN NO.: " & prn_HdDt.Rows(0).Item("Company_TinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
            Cmp_CstNo = "CST NO.: " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_State_Name").ToString) <> "" Then
            Cmp_StateCap = "STATE : "
            Cmp_StateNm = prn_HdDt.Rows(0).Item("Company_State_Name").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_State_Code").ToString) <> "" Then
            Cmp_StateCode = "CODE :" & prn_HdDt.Rows(0).Item("Company_State_Code").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString) <> "" Then
            Cmp_GSTIN_Cap = "GSTIN : "
            Cmp_GSTIN_No = "GSTIN : " & prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_State_Name").ToString) <> "" Then
            Cmp_StateCap = "STATE : "
            Cmp_StateNm = prn_HdDt.Rows(0).Item("Company_State_Name").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_PanNo").ToString) <> "" Then
            Cmp_PanNo = "PAN :" & prn_HdDt.Rows(0).Item("Company_PanNo").ToString
        End If

        PrntCompHeading = True
        If StmtPrint_InvDetails_Status = True Then
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1031" Then '---- Prakash Sizing & Mahalakshmi Sizing
                PrntCompHeading = False

            ElseIf Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) = "UNACCOUNT" Then
                PrntCompHeading = False

            End If

        Else
            If Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) = "UNACCOUNT" Then
                PrntCompHeading = False

            End If

        End If

        If PrntCompHeading = True Then

            CurY = CurY + TxtHgt - 10
            p1Font = New Font("Calibri", 14, FontStyle.Bold)
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1043" Then '---- Selvanayaki Sizing (Karumanthapatti)
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font, Brushes.Red)
            Else
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font)
            End If

            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            CurY = CurY + strHeight
            If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
                p1Font = New Font("Calibri", 12, FontStyle.Bold)
            Else
                p1Font = New Font("Calibri", 9, FontStyle.Regular)
            End If
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1043" Then '---- Selvanayaki Sizing (Karumanthapatti)
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1, LMargin, CurY, 2, PrintWidth, p1Font, Brushes.Green)
            Else
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1, LMargin, CurY, 2, PrintWidth, p1Font)
            End If

            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            CurY = CurY + TxtHgt
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1043" Then '---- Selvanayaki Sizing (Karumanthapatti)
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont, Brushes.Green)
            Else
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont)
            End If

            CurY = CurY + TxtHgt
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1043" Then '---- Selvanayaki Sizing (Karumanthapatti)
                Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, pFont, Brushes.Green)
            Else
                Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, pFont)
            End If

            CurY = CurY + TxtHgt
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1043" Then '---- Selvanayaki Sizing (Karumanthapatti)
                Common_Procedures.Print_To_PrintDocument(e, Cmp_TinNo, LMargin + 10, CurY, 0, 0, pFont, Brushes.Green)
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Email, LMargin, CurY, 2, PrintWidth, pFont, Brushes.Green)
                Common_Procedures.Print_To_PrintDocument(e, Cmp_CstNo, PageWidth - 10, CurY, 1, 0, pFont, Brushes.Green)
            Else
                'Common_Procedures.Print_To_PrintDocument(e, Cmp_TinNo, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Cmp_GSTIN_No, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Email, LMargin, CurY, 2, PrintWidth, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Cmp_CstNo, PageWidth - 10, CurY, 1, 0, pFont)
            End If



            'Common_Procedures.Print_To_PrintDocument(e, Cmp_GSTIN_No, LMargin + 10, CurY, 0, 0, pFont)



            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

        End If

        LnAr(2) = CurY

        C1 = 310 ' Val(ClAr(1)) + Val(ClAr(2)) + Val(ClAr(3)) + Val(ClAr(4)) + Val(ClAr(5)) + Val(ClAr(6)) + Val(ClAr(7))
        C2 = 215 ' Val(ClAr(8)) + Val(ClAr(9)) + Val(ClAr(10)) + Val(ClAr(11)) + Val(ClAr(12)) + Val(ClAr(13))
        C3 = PageWidth - (LMargin + C1 + C2)
        C4 = 0

        'End If

        P1 = ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6)
        P2 = PageWidth - P1

        W1 = e.Graphics.MeasureString("Average Count : ", pFont).Width
        W2 = e.Graphics.MeasureString("Tape Length : ", pFont).Width
        W3 = e.Graphics.MeasureString("Consumed Rolls  : ", pFont).Width

        Try

            If Val(PageNo) <= 1 Then

                MilNm1 = Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString)
                MilNm2 = ""
                If Len(MilNm1) > 15 Then
                    For I = 15 To 1 Step -1
                        If Mid$(Trim(MilNm1), I, 1) = " " Or Mid$(Trim(MilNm1), I, 1) = "," Or Mid$(Trim(MilNm1), I, 1) = "." Or Mid$(Trim(MilNm1), I, 1) = "-" Or Mid$(Trim(MilNm1), I, 1) = "/" Or Mid$(Trim(MilNm1), I, 1) = "_" Or Mid$(Trim(MilNm1), I, 1) = "(" Or Mid$(Trim(MilNm1), I, 1) = ")" Or Mid$(Trim(MilNm1), I, 1) = "\" Or Mid$(Trim(MilNm1), I, 1) = "[" Or Mid$(Trim(MilNm1), I, 1) = "]" Or Mid$(Trim(MilNm1), I, 1) = "{" Or Mid$(Trim(MilNm1), I, 1) = "}" Then Exit For
                    Next I
                    If I = 0 Then I = 15
                    MilNm2 = Microsoft.VisualBasic.Right(Trim(MilNm1), Len(MilNm1) - I)
                    MilNm1 = Microsoft.VisualBasic.Left(Trim(MilNm1), I - 1)
                End If

                p1Font = New Font("Calibri", 14, FontStyle.Bold)

                CurY = CurY + TxtHgt - 5
                Common_Procedures.Print_To_PrintDocument(e, "TO : ", LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Set No", LMargin + C1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Set_No").ToString), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font)

                If Len(Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString)) > 15 Then
                    p1Font = New Font("Calibri", 9, FontStyle.Regular)
                Else
                    p1Font = New Font("Calibri", 10, FontStyle.Regular)
                End If

                Common_Procedures.Print_To_PrintDocument(e, "Mill Name", LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(MilNm1), LMargin + C1 + C2 + W2 + 25, CurY, 0, 0, p1Font)
                If Trim(MilNm2) <> "" Then
                    Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(MilNm2), 15), LMargin + C1 + C2 + W2 + 25, CurY + 12, 0, 0, p1Font)
                End If

                YInc = 10
                CurY = CurY + TxtHgt
                If Len(Trim(prn_HdDt.Rows(0).Item("Ledger_MainName").ToString)) <= 30 Then
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                ElseIf Len(Trim(prn_HdDt.Rows(0).Item("Ledger_MainName").ToString)) <= 35 Then
                    p1Font = New Font("Calibri", 9, FontStyle.Bold)
                Else
                    p1Font = New Font("Calibri", 8, FontStyle.Regular)
                End If

                Common_Procedures.Print_To_PrintDocument(e, "     " & "M/S." & prn_HdDt.Rows(0).Item("Ledger_MainName").ToString, LMargin + 10, CurY, 0, 0, p1Font)

                Common_Procedures.Print_To_PrintDocument(e, "DATE", LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Set_Date").ToString), "dd/MM/yyyy"), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Ends_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)

                YInc = 20

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address1").ToString, LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Count Name", LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Count_Name").ToString), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Tape Length", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("tape_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)


                YInc = 30

                If Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString) >= 0 Then
                    ExcSht_Str = "Excess Yarn"
                    'ExcSht_Str = "Excess        : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                Else
                    ExcSht_Str = "Short Yarn"
                    'ExcSht_Str = "Short         : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                End If
                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address2").ToString, LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, ExcSht_Str, LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000"), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Beam Width", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Beam_Width_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)


                YInc = 45

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address3").ToString, LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Average Count", LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("beam_count").ToString), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Mark", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("pcs_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)

                YInc = 25

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address4").ToString, LMargin + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                If Trim(prn_HdDt.Rows(0).Item("ledger_GSTinNo").ToString) <> "" Then
                    'Common_Procedures.Print_To_PrintDocument(e, "     Tin No : " & prn_HdDt.Rows(0).Item("Ledger_TinNo").ToString, LMargin + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "     GST No : " & prn_HdDt.Rows(0).Item("ledger_GSTinNo").ToString, LMargin + 10, CurY, 0, 0, pFont)
                End If

                CurY = CurY + TxtHgt + 15
                e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

                e.Graphics.DrawLine(Pens.Black, LMargin + C1, CurY, LMargin + C1, LnAr(2))
                e.Graphics.DrawLine(Pens.Black, LMargin + C1 + C2, CurY, LMargin + C1 + C2, LnAr(2))

            End If
            LnAr(3) = CurY

            CurY = CurY + TxtHgt - 10
            p1Font = New Font("Calibri", 12, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "WARPING DETAILS", LMargin, CurY, 2, P1, p1Font)
            Common_Procedures.Print_To_PrintDocument(e, "SIZING DETAILS", LMargin + P1, CurY, 2, P2, p1Font)


            'Common_Procedures.Print_To_PrintDocument(e, "WARPING DETAILS", LMargin, CurY, 2, ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), p1Font)
            'Common_Procedures.Print_To_PrintDocument(e, "SIZING DETAILS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), p1Font)
            'Common_Procedures.Print_To_PrintDocument(e, "PARTICULARS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY + TxtHgt, 2, ClAr(14), p1Font)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY)
            LnAr(4) = CurY

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Meter", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(4), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(5), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Bm.No", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 2, ClAr(9), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 2, ClAr(10), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(11), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Pcs", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Meters", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY, 2, ClAr(13), pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(5) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub Printing_Format11_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PageHeight As Single, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal is_LastPage As Boolean)
        Dim p1Font As Font
        Dim Cmp_Name As String
        Dim LS As Single
        Dim STS As Boolean = False
        Dim PrntCompHeading As Boolean = False

        PrntCompHeading = True
        If StmtPrint_InvDetails_Status = True Then
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1031" Then '---- Prakash Sizing & Mahalakshmi Sizing
                PrntCompHeading = False

            ElseIf Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) = "UNACCOUNT" Then
                PrntCompHeading = False

            End If

        Else
            If Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) = "UNACCOUNT" Then
                PrntCompHeading = False

            End If

        End If
        Try

            LS = PageHeight - 125

            STS = True
            If CurY >= LS Then
                CurY = CurY + TxtHgt
                STS = False
            Else
                CurY = LS
            End If

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, PageWidth, CurY)
            'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(6) = CurY

            CurY = CurY + 10

            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            p1Font = New Font("Calibri", 12, FontStyle.Bold)

            If PrntCompHeading = True Then
                Common_Procedures.Print_To_PrintDocument(e, "For " & Cmp_Name, PageWidth - 15, CurY, 1, 0, p1Font)
            End If

            If STS = True Then
                CurY = CurY + TxtHgt
                'CurY = CurY + TxtHgt
            End If

            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            'Common_Procedures.Print_To_PrintDocument(e, "Prepared By", LMargin + 20, CurY, 0, 0, pFont)
            'Common_Procedures.Print_To_PrintDocument(e, "Checked By", LMargin + 300, CurY, 0, 0, pFont)

            Common_Procedures.Print_To_PrintDocument(e, "Checked By", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + 20, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Authorised Signatory", PageWidth - 15, CurY, 1, 0, pFont)
            CurY = CurY + TxtHgt + 10

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(7) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(1))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(7), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(6), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(1))
            p1Font = New Font("Calibri", 7, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "Software by TSOFT SOLUTIONS, Tirupur. Ph : 8508403222, 0421-4337417", LMargin + 8, CurY + 5, 0, 0, p1Font)

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub
    Private Sub cbo_Grid_FrontWarper_1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Grid_FrontWarper_1.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Grid_FrontWarper_1, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_WarpingDetails_Set1
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_FrontWarper_1.Text)
                .Focus()
                If .CurrentCell.ColumnIndex = 10 Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(12)
                    .CurrentCell.Selected = True
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    .CurrentCell.Selected = True
                End If
            End With
        End If
    End Sub

    Private Sub cbo_Grid_FrontWarper_1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Grid_FrontWarper_1.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Grid_FrontWarper_1, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_WarpingDetails_Set1

            If (e.KeyValue = 38 And cbo_Grid_FrontWarper_1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                '.Focus()
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                '.CurrentCell.Selected = True

                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(5)
                .CurrentCell.Selected = True

            End If

            If (e.KeyValue = 40 And cbo_Grid_FrontWarper_1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                '.Focus()
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                '.CurrentCell.Selected = True

                If .CurrentCell.ColumnIndex = 10 Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(12)
                    .CurrentCell.Selected = True
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    .CurrentCell.Selected = True
                End If
            End If

            If e.Control = True And e.KeyValue = 13 Then
                With dgv_WarpingDetails_Set1
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_FrontWarper_1.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If

        End With

    End Sub

    Private Sub cbo_Grid_FromtWarper_1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Grid_FrontWarper_1.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Grid_FrontWarper_1.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Grid_FrontWarper_1_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Grid_FrontWarper_1.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Grid_FrontWarper_1.Visible Then
                With dgv_WarpingDetails_Set1
                    If Val(cbo_Grid_FrontWarper_1.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 10 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_FrontWarper_1.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub

    Private Sub cbo_Grid_BackWarper1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Grid_BackWarper1.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Grid_BackWarper1, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_WarpingDetails_Set1
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_BackWarper1.Text)
                .Focus()
                If .CurrentCell.ColumnIndex = 12 Then

                    If Common_Procedures.settings.CustomerCode = "1282" Then
                        If .CurrentCell.RowIndex = .Rows.Count - 1 Then
                            ' LAST ROW
                            tab_Main.SelectTab(1)
                            tab_SizingDetails.SelectTab(0)
                        Else
                            .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                            .CurrentCell.Selected = True
                        End If
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                        .CurrentCell.Selected = True
                    End If

                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    .CurrentCell.Selected = True
                End If
            End With
        End If
    End Sub

    Private Sub cbo_Grid_BackWarper1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Grid_BackWarper1.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Grid_BackWarper1, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_WarpingDetails_Set1

            If (e.KeyValue = 38 And cbo_Grid_BackWarper1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                If .Columns(.CurrentCell.ColumnIndex - 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 2)
                End If
                .CurrentCell.Selected = True

            End If

            If (e.KeyValue = 40 And cbo_Grid_BackWarper1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                .CurrentCell.Selected = True
            End If

            If e.Control = True And e.KeyValue = 13 Then
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_BackWarper1.Text)
                .Focus()
                If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                End If
                .CurrentCell.Selected = True
                e.Handled = True
                e.SuppressKeyPress = True
            End If

        End With

    End Sub

    Private Sub cbo_Grid_BackWarper_1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Grid_BackWarper1.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Grid_BackWarper1.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Grid_BackWarper_1_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Grid_BackWarper1.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Grid_BackWarper1.Visible Then
                If IsNothing(dgv_WarpingDetails_Set1.CurrentCell) Then Exit Sub
                With dgv_WarpingDetails_Set1
                    If Val(cbo_Grid_BackWarper1.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 12 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_BackWarper1.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub

    Private Sub cbo_Grid_Helper1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Grid_Helper1.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Grid_Helper1, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_WarpingDetails_Set1
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_Helper1.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Grid_Helper1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Grid_Helper1.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Grid_Helper1, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_WarpingDetails_Set1

            If (e.KeyValue = 38 And cbo_Grid_Helper1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Grid_Helper1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If

            If e.Control = True And e.KeyValue = 13 Then
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_Helper1.Text)
                .Focus()
                If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                End If
                .CurrentCell.Selected = True
                e.Handled = True
                e.SuppressKeyPress = True
            End If

        End With

    End Sub

    Private Sub cbo_Grid_Helper1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Grid_Helper1.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Grid_Helper1.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Grid_Helper1_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Grid_Helper1.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Grid_Helper1.Visible Then
                With dgv_WarpingDetails_Set1
                    If Val(cbo_Grid_Helper1.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 14 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_Helper1.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub


    Private Sub cbo_Grid_FrontWarper2_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Grid_FrontWarper2.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Grid_FrontWarper2, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_WarpingDetails_Set1
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_FrontWarper2.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Grid_FrontWarper2_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Grid_FrontWarper2.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Grid_FrontWarper2, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_WarpingDetails_Set1

            If (e.KeyValue = 38 And cbo_Grid_FrontWarper2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Grid_FrontWarper2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If

            If e.Control = True And e.KeyValue = 13 Then
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_FrontWarper2.Text)
                .Focus()
                If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                End If
                .CurrentCell.Selected = True
                e.Handled = True
                e.SuppressKeyPress = True
            End If

        End With

    End Sub

    Private Sub cbo_Grid_FromtWarper2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Grid_FrontWarper2.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Grid_FrontWarper2.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Grid_FrontWarper2_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Grid_FrontWarper2.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Grid_FrontWarper2.Visible Then
                If IsNothing(dgv_WarpingDetails_Set1.CurrentCell) Then Exit Sub
                With dgv_WarpingDetails_Set1
                    If Val(cbo_Grid_FrontWarper2.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 16 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_FrontWarper2.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub
    Private Sub cbo_Grid_BackWarper2_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Grid_BackWarper2.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Grid_BackWarper2, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_WarpingDetails_Set1
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_BackWarper2.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Grid_BackWarper2_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Grid_BackWarper2.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Grid_BackWarper2, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_WarpingDetails_Set1

            If (e.KeyValue = 38 And cbo_Grid_BackWarper2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Grid_BackWarper2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If

            If e.Control = True And e.KeyValue = 13 Then
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_BackWarper2.Text)
                .Focus()
                If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                End If
                .CurrentCell.Selected = True
                e.Handled = True
                e.SuppressKeyPress = True
            End If

        End With

    End Sub

    Private Sub cbo_Grid_BackWarper2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Grid_BackWarper2.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Grid_BackWarper2.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Grid_BackWarper2_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Grid_BackWarper2.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Grid_BackWarper2.Visible Then
                If IsNothing(dgv_WarpingDetails_Set1.CurrentCell) Then Exit Sub
                With dgv_WarpingDetails_Set1
                    If Val(cbo_Grid_BackWarper2.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 18 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_BackWarper2.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub
    Private Sub cbo_Grid_Helper2_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Grid_Helper2.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Grid_Helper2, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_WarpingDetails_Set1
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_Helper2.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Grid_Helper2_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Grid_Helper2.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Grid_Helper2, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_WarpingDetails_Set1

            If (e.KeyValue = 38 And cbo_Grid_Helper2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Grid_Helper2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If

            If e.Control = True And e.KeyValue = 13 Then
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_Helper2.Text)
                .Focus()
                If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                End If
                .CurrentCell.Selected = True
                e.Handled = True
                e.SuppressKeyPress = True
            End If

        End With

    End Sub

    Private Sub cbo_Grid_Helper2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Grid_Helper2.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Grid_Helper2.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Grid_Helper2_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Grid_Helper2.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Grid_Helper2.Visible Then
                If IsNothing(dgv_WarpingDetails_Set1.CurrentCell) Then Exit Sub
                With dgv_WarpingDetails_Set1
                    If Val(cbo_Grid_Helper2.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 20 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_Helper2.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub

    Private Sub cbo_Ends2_FrontWarper1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Ends2_FrontWarper1.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Ends2_FrontWarper1, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_WarpingDetails_Set2
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends2_FrontWarper1.Text)
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex + 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 2)
                End If
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Ends2_FrontWarper1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends2_FrontWarper1.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Ends2_FrontWarper1, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_WarpingDetails_Set2

            If (e.KeyValue = 38 And cbo_Ends2_FrontWarper1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex - 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 5)
                End If
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Ends2_FrontWarper1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex + 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 2)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                '.CurrentCell.Selected = True
            End If


            If e.Control = True And e.KeyValue = 13 Then
                With dgv_WarpingDetails_Set2
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends2_FrontWarper1.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If


        End With

    End Sub

    Private Sub cbo_Ends2_FromtWarper1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends2_FrontWarper1.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Ends2_FrontWarper1.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Ends_FrontWarper1_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Ends2_FrontWarper1.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Ends2_FrontWarper1.Visible Then
                With dgv_WarpingDetails_Set2
                    If Val(cbo_Ends2_FrontWarper1.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 10 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends2_FrontWarper1.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
        End Try
    End Sub

    Private Sub cbo_Ends2_BackWarper1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Ends2_BackWarper1.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Ends2_BackWarper1, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_WarpingDetails_Set2
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends2_BackWarper1.Text)
                .Focus()

                If .Columns(.CurrentCell.ColumnIndex + 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                '.CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Ends2_BackWarper1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends2_BackWarper1.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Ends2_BackWarper1, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_WarpingDetails_Set2

            'If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1282" Then
            If (e.KeyValue = 38 And cbo_Ends2_BackWarper1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                cbo_Ends2_FrontWarper1.Visible = True
                cbo_Ends2_FrontWarper1.Focus()
            End If
            'End If

            If (e.KeyValue = 40 And cbo_Ends2_BackWarper1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If



            If e.Control = True And e.KeyValue = 13 Then
                With dgv_WarpingDetails_Set2
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends2_BackWarper1.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Ends2_BackWarper_1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends2_BackWarper1.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Ends2_BackWarper1.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Ends2_BackWarper_1_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Ends2_BackWarper1.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Ends2_BackWarper1.Visible Then
                With dgv_WarpingDetails_Set2
                    If Val(cbo_Ends2_BackWarper1.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 12 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends2_BackWarper1.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub
    Private Sub cbo_Ends2_Helper_1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Ends2_Helper1.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Ends2_Helper1, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_WarpingDetails_Set2
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends2_Helper1.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Ends2_Helper_1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends2_Helper1.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Ends2_Helper1, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_WarpingDetails_Set2

            If (e.KeyValue = 38 And cbo_Ends2_Helper1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Ends2_Helper1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If

            If e.Control = True And e.KeyValue = 13 Then
                With dgv_WarpingDetails_Set2
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends2_Helper1.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If

        End With

    End Sub

    Private Sub cbo_Ends2_Helper1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends2_Helper1.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Ends2_Helper1.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Ends2_Helper1_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Ends2_Helper1.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Ends2_Helper1.Visible Then
                With dgv_WarpingDetails_Set2
                    If Val(cbo_Ends2_Helper1.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 14 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends2_Helper1.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub


    Private Sub cbo_Ends_FrontWarper2_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Ends2_FrontWarper2.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Ends2_FrontWarper2, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_WarpingDetails_Set2
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends2_FrontWarper2.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Ends2_FrontWarper2_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends2_FrontWarper2.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Ends2_FrontWarper2, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_WarpingDetails_Set2

            If (e.KeyValue = 38 And cbo_Ends2_FrontWarper2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Ends2_FrontWarper2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_WarpingDetails_Set2
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends2_FrontWarper2.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Ends2_FromtWarper2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends2_FrontWarper2.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Ends2_FrontWarper2.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Ends2_FrontWarper2_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Ends2_FrontWarper2.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Ends2_FrontWarper2.Visible Then
                With dgv_WarpingDetails_Set2
                    If Val(cbo_Ends2_FrontWarper2.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 16 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends2_FrontWarper2.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub
    Private Sub cbo_Ends2_BackWarper2_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Ends2_BackWarper2.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Ends2_BackWarper2, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_WarpingDetails_Set2
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends2_BackWarper2.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Ends2_BackWarper2_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends2_BackWarper2.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Ends2_BackWarper2, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_WarpingDetails_Set2

            If (e.KeyValue = 38 And cbo_Ends2_BackWarper2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Ends2_BackWarper2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If

            If e.Control = True And e.KeyValue = 13 Then
                With dgv_WarpingDetails_Set2
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends2_BackWarper2.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Ends2_BackWarper2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends2_BackWarper2.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Ends2_BackWarper2.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Ends2_BackWarper2_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Ends2_BackWarper2.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Ends2_BackWarper2.Visible Then
                With dgv_WarpingDetails_Set2
                    If Val(cbo_Ends2_BackWarper2.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 18 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends2_BackWarper2.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub
    Private Sub cbo_Ends2_Helper2_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Ends2_Helper2.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Ends2_Helper2, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_WarpingDetails_Set2
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends2_Helper2.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Ends2_Helper2_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends2_Helper2.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Ends2_Helper2, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_WarpingDetails_Set2

            If (e.KeyValue = 38 And cbo_Ends2_Helper2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Ends2_Helper2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If

            If e.Control = True And e.KeyValue = 13 Then
                With dgv_WarpingDetails_Set2
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends2_Helper2.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Ends2_Helper2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends2_Helper2.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Ends2_Helper2.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Ends2_Helper2_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Ends2_Helper2.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Ends2_Helper2.Visible Then
                With dgv_WarpingDetails_Set2
                    If Val(cbo_Ends2_Helper2.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 20 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends2_Helper2.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub



    Private Sub cbo_Ends3_FrontWarper1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Ends3_FrontWarper1.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Ends3_FrontWarper1, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_WarpingDetails_Set3
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends3_FrontWarper1.Text)
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex + 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 2)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                '.CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Ends3_FrontWarper_1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends3_FrontWarper1.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Ends3_FrontWarper1, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_WarpingDetails_Set3

            If (e.KeyValue = 38 And cbo_Ends3_FrontWarper1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 5)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Ends3_FrontWarper1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 2)
                .CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_WarpingDetails_Set3
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends3_FrontWarper1.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Ends3_FromtWarper_1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends3_FrontWarper1.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Ends3_FrontWarper1.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Ends3_FrontWarper_1_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Ends3_FrontWarper1.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Ends3_FrontWarper1.Visible Then
                With dgv_WarpingDetails_Set3
                    If Val(cbo_Ends3_FrontWarper1.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 10 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends3_FrontWarper1.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub


    Private Sub cbo_Ends3_BackWarper1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Ends3_BackWarper1.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Ends3_BackWarper1, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_WarpingDetails_Set3
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends3_BackWarper1.Text)
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex + 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 2)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                '.CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Ends3_BackWarper1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends3_BackWarper1.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Ends3_BackWarper1, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_WarpingDetails_Set3

            If (e.KeyValue = 38 And cbo_Ends3_BackWarper1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 2)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Ends3_BackWarper1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If

            If e.Control = True And e.KeyValue = 13 Then
                With dgv_WarpingDetails_Set3
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends3_BackWarper1.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Ends3_BackWarper_1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends3_BackWarper1.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Ends3_BackWarper1.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Ends3_BackWarper_1_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Ends3_BackWarper1.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Ends3_BackWarper1.Visible Then
                With dgv_WarpingDetails_Set3
                    If Val(cbo_Ends3_BackWarper1.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 10 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends3_BackWarper1.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub
    Private Sub cbo_Ends3_Helper_1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Ends3_Helper1.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Ends3_Helper1, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_WarpingDetails_Set3
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends3_Helper1.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Ends3_Helper_1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends3_Helper1.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Ends3_Helper1, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_WarpingDetails_Set3

            If (e.KeyValue = 38 And cbo_Ends3_Helper1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Ends3_Helper1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If

            If e.Control = True And e.KeyValue = 13 Then
                With dgv_WarpingDetails_Set3
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends3_Helper1.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Ends3_Helper1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends3_Helper1.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Ends3_Helper1.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Ends3_Helper1_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Ends3_Helper1.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Ends3_Helper1.Visible Then
                With dgv_WarpingDetails_Set3
                    If Val(cbo_Ends3_Helper1.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 14 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends3_Helper1.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub


    Private Sub cbo_Ends3_FrontWarper2_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Ends3_FrontWarper2.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Ends3_FrontWarper2, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_WarpingDetails_Set3
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends3_FrontWarper2.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Ends3_FrontWarper2_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends3_FrontWarper2.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Ends3_FrontWarper2, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_WarpingDetails_Set3

            If (e.KeyValue = 38 And cbo_Ends3_FrontWarper2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Ends3_FrontWarper2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_WarpingDetails_Set3
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends3_FrontWarper2.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Ends3_FromtWarper2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends3_FrontWarper2.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Ends3_FrontWarper2.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Ends3_FrontWarper2_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Ends3_FrontWarper2.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Ends3_FrontWarper2.Visible Then
                With dgv_WarpingDetails_Set3
                    If Val(cbo_Ends3_FrontWarper2.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 16 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends3_FrontWarper2.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub
    Private Sub cbo_Ends3_BackWarper2_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Ends3_BackWarper2.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Ends3_BackWarper2, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_WarpingDetails_Set3
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends3_BackWarper2.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Ends3_BackWarper2_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends3_BackWarper2.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Ends3_BackWarper2, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_WarpingDetails_Set3

            If (e.KeyValue = 38 And cbo_Ends3_BackWarper2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Ends3_BackWarper2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_WarpingDetails_Set3
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends3_BackWarper2.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Ends3_BackWarper2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends3_BackWarper2.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Ends3_BackWarper2.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Ends3_BackWarper2_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Ends3_BackWarper2.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Ends3_BackWarper2.Visible Then
                With dgv_WarpingDetails_Set3
                    If Val(cbo_Ends3_BackWarper2.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 18 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends3_BackWarper2.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub
    Private Sub cbo_Ends3_Helper2_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Ends3_Helper2.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Ends2_Helper2, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_WarpingDetails_Set3
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends3_Helper2.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Ends3_Helper2_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends3_Helper2.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Ends3_Helper2, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_WarpingDetails_Set3

            If (e.KeyValue = 38 And cbo_Ends3_Helper2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Ends3_Helper2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If

            If e.Control = True And e.KeyValue = 13 Then
                With dgv_WarpingDetails_Set3
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends3_Helper2.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If

        End With

    End Sub

    Private Sub cbo_Ends3_Helper2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends3_Helper2.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Ends3_Helper2.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Ends3_Helper2_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Ends3_Helper2.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Ends3_Helper2.Visible Then
                With dgv_WarpingDetails_Set3
                    If Val(cbo_Ends3_Helper2.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 20 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends3_Helper2.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub

    Private Sub cbo_Sizing1_Shift_GotFocus(sender As Object, e As System.EventArgs) Handles cbo_Sizing1_Shift.GotFocus
        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "Shift_Head", "Shift_Name", "", "(Shift_IdNo = 0)")
    End Sub


    Private Sub cbo_Sizing1_Shift1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing1_Shift.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing1_Shift, Nothing, "Shift_Head", "Shift_Name", "", "(Shift_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set1
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_Shift.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 4)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Sizing1_Shift_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing1_Shift.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing1_Shift, Nothing, Nothing, "Shift_Head", "Shift_Name", "", "(Shift_IdNo = 0)")

        With dgv_SizingDetails_Set1

            If (e.KeyValue = 38 And cbo_Sizing1_Shift.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing1_Shift.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 4)
                .CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set1
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_Shift.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub



    Private Sub cbo_Sizing1_Shift_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing1_Shift.TextChanged
        Try
            If cbo_Sizing1_Shift.Visible Then
                With dgv_SizingDetails_Set1
                    If Val(cbo_Sizing1_Shift.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 9 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_Shift.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub


    Private Sub cbo_Sizing1_Cooker_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing1_Cooker.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing1_Cooker, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set1
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_Cooker.Text)
                .Focus()
                'If .CurrentCell.ColumnIndex = 19 Then
                '    .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                '    .CurrentCell.Selected = True
                'Else
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 6)
                .CurrentCell.Selected = True
                'End If

            End With
        End If
    End Sub

    Private Sub cbo_Sizing_Cooker_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing1_Cooker.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing1_Cooker, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_SizingDetails_Set1

            If (e.KeyValue = 38 And cbo_Sizing1_Cooker.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex - 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 2)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                '.CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing1_Cooker.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex + 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 6)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                '.CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set1
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_Cooker.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Sizing1_Cooker_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing1_Cooker.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing1_Cooker.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing1_Cooker_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing1_Cooker.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Sizing1_Cooker.Visible Then
                With dgv_SizingDetails_Set1
                    If Val(cbo_Sizing1_Cooker.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 19 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_Cooker.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub



    Private Sub cbo_Sizing1_FrontSizer1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing1_FrontSizer1.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing1_FrontSizer1, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set1
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_FrontSizer1.Text)
                .Focus()
                If .CurrentCell.ColumnIndex = 13 Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(15)
                    .CurrentCell.Selected = True
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    .CurrentCell.Selected = True
                End If
            End With
        End If
    End Sub

    Private Sub cbo_Sizing1_FrontSizer1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing1_FrontSizer1.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing1_FrontSizer1, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_SizingDetails_Set1

            If (e.KeyValue = 38 And cbo_Sizing1_FrontSizer1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 4)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing1_FrontSizer1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set1
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_FrontSizer1.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Sizing1_FromtSizer1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing1_FrontSizer1.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing1_FrontSizer1.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing1_FrontSizer1_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing1_FrontSizer1.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Sizing1_FrontSizer1.Visible Then
                With dgv_SizingDetails_Set1
                    If Val(cbo_Sizing1_FrontSizer1.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 13 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_FrontSizer1.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub


    Private Sub cbo_Sizing1_BackSizer1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing1_BackSizer1.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing1_BackSizer1, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set1
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_BackSizer1.Text)
                .Focus()
                If .CurrentCell.ColumnIndex = 15 Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(17)
                    .CurrentCell.Selected = True
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    .CurrentCell.Selected = True
                End If
            End With
        End If
    End Sub

    Private Sub cbo_Sizing1_BackSizer1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing1_BackSizer1.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing1_BackSizer1, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_SizingDetails_Set1

            If (e.KeyValue = 38 And cbo_Sizing1_BackSizer1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                If .CurrentCell.ColumnIndex = 13 Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(7)
                    .CurrentCell.Selected = True
                Else
                    If .Columns(.CurrentCell.ColumnIndex - 1).Visible = True Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                        .CurrentCell.Selected = True
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 2)
                        .CurrentCell.Selected = True
                    End If
                End If
            End If

            If (e.KeyValue = 40 And cbo_Sizing1_BackSizer1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                If .CurrentCell.ColumnIndex = 15 Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(17)
                    .CurrentCell.Selected = True
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    .CurrentCell.Selected = True
                End If

            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set1
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_BackSizer1.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Sizing_BackSizer_1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing1_BackSizer1.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing1_BackSizer1.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing1_BackSizer1_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing1_BackSizer1.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Sizing1_BackSizer1.Visible Then
                With dgv_SizingDetails_Set1
                    If Val(cbo_Sizing1_BackSizer1.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 15 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_BackSizer1.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub
    Private Sub cbo_Sizing_Boiler1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing1_Boiler1.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing1_Boiler1, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set1
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_Boiler1.Text)
                .Focus()
                If .CurrentCell.ColumnIndex = 17 Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(19)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    .CurrentCell.Selected = True
                End If
            End With
        End If
    End Sub

    Private Sub cbo_Sizing_Boiler1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing1_Boiler1.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing1_Boiler1, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_SizingDetails_Set1

            If (e.KeyValue = 38 And cbo_Sizing1_Boiler1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex - 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 2)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                '.CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing1_Boiler1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex + 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 2)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                '.CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set1
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_Boiler1.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Sizing1_Boiler1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing1_Boiler1.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing1_Boiler1.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing1_Boiler1_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing1_Boiler1.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Sizing1_Boiler1.Visible Then
                With dgv_SizingDetails_Set1
                    If Val(cbo_Sizing1_Boiler1.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 17 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_Boiler1.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub

    Private Sub cbo_Sizing1_Cooker2_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing1_Cooker2.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing1_Cooker2, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set1
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_Cooker2.Text)
                .Focus()
                If .CurrentCell.ColumnIndex = 25 Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    .CurrentCell.Selected = True
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    .CurrentCell.Selected = True
                End If

            End With
        End If
    End Sub

    Private Sub cbo_Sizing_Cooker2_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing1_Cooker2.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing1_Cooker2, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_SizingDetails_Set1

            If (e.KeyValue = 38 And cbo_Sizing1_Cooker2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 6)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing1_Cooker2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set1
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_Cooker2.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Sizing1_Cooker2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing1_Cooker2.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing1_Cooker2.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing1_Cooker2_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing1_Cooker2.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Sizing1_Cooker2.Visible Then
                With dgv_SizingDetails_Set1
                    If Val(cbo_Sizing1_Cooker2.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 25 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_Cooker2.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub



    Private Sub cbo_Sizing1_FrontSizer2_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing1_FrontSizer2.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing1_FrontSizer2, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set1
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_FrontSizer2.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Sizing1_FrontSizer2_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing1_FrontSizer2.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing1_FrontSizer2, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_SizingDetails_Set1

            If (e.KeyValue = 38 And cbo_Sizing1_FrontSizer2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing1_FrontSizer2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If

            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set1
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_FrontSizer2.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Sizing1_FromtSizer2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing1_FrontSizer2.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing1_FrontSizer2.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing1_FrontSizer2_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing1_FrontSizer2.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Sizing1_FrontSizer2.Visible Then
                With dgv_SizingDetails_Set1
                    If Val(cbo_Sizing1_FrontSizer2.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 21 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_FrontSizer2.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub


    Private Sub cbo_Sizing1_BackSizer2_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing1_BackSizer2.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing1_BackSizer2, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set1
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_BackSizer2.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Sizing1_BackSizer2_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing1_BackSizer2.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing1_BackSizer2, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_SizingDetails_Set1

            If (e.KeyValue = 38 And cbo_Sizing1_BackSizer2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing1_BackSizer2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set1
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_BackSizer2.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Sizing_BackSizer2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing1_BackSizer2.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing1_BackSizer2.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing1_BackSizer2_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing1_BackSizer2.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Sizing1_BackSizer1.Visible Then
                With dgv_SizingDetails_Set1
                    If Val(cbo_Sizing1_BackSizer2.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 23 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_BackSizer2.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub
    Private Sub cbo_Sizing_Boiler2_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing1_Boiler2.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing1_Boiler2, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set1
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_Boiler2.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Sizing_Boiler2_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing1_Boiler2.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing1_Boiler2, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_SizingDetails_Set1

            If (e.KeyValue = 38 And cbo_Sizing1_Boiler2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing1_Boiler2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set1
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_Boiler2.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Sizing1_Boiler2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing1_Boiler2.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing1_Boiler2.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing1_Boiler2_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing1_Boiler2.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Sizing1_Boiler2.Visible Then
                With dgv_SizingDetails_Set1
                    If Val(cbo_Sizing1_Boiler2.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 25 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_Boiler2.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub

    Private Sub cbo_Ends1_Shift_GotFocus(sender As Object, e As System.EventArgs) Handles cbo_Ends1_Shift.GotFocus
        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "Shift_Head", "Shift_Name", "", "(Shift_IdNo = 0)")
    End Sub

    Private Sub cbo_Ends1_Shift_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Ends1_Shift.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Ends1_Shift, Nothing, "shift_Head", "shift_Name", "", "(Shift_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_WarpingDetails_Set1
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends1_Shift.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 5)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Ends1_Shift_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends1_Shift.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Ends1_Shift, Nothing, Nothing, "shift_Head", "shift_Name", "", "(Shift_IdNo = 0)")

        With dgv_WarpingDetails_Set1

            If (e.KeyValue = 38 And cbo_Ends1_Shift.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Ends1_Shift.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 5)
                .CurrentCell.Selected = True
            End If

            If e.Control = True And e.KeyValue = 13 Then
                With dgv_WarpingDetails_Set1
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends1_Shift.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If

                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True

                End With
            End If

            Ctrl_kyData = e.Control

        End With

    End Sub

    Private Sub cbo_Ends1_Shift_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Ends1_Shift.TextChanged
        Try
            If cbo_Ends1_Shift.Visible Then
                With dgv_WarpingDetails_Set1
                    If Val(cbo_Ends1_Shift.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 5 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends1_Shift.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub

    Private Sub cbo_Ends2_Shift_GotFocus(sender As Object, e As System.EventArgs) Handles cbo_Ends2_Shift.GotFocus
        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "Shift_Head", "Shift_Name", "", "(Shift_IdNo = 0)")
    End Sub

    Private Sub cbo_Ends_Shift2_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Ends2_Shift.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Ends2_Shift, Nothing, "Shift_Head", "Shift_Name", "", "(Shift_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_WarpingDetails_Set2
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends2_Shift.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 5)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Ends2_Shift_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends2_Shift.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Ends2_Shift, Nothing, Nothing, "Shift_Head", "Shift_Name", "", "(Shift_IdNo = 0)")

        With dgv_WarpingDetails_Set2

            If (e.KeyValue = 38 And cbo_Ends2_Shift.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Ends2_Shift.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If

            If e.Control = True And e.KeyValue = 13 Then
                With dgv_WarpingDetails_Set2
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends2_Shift.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub



    Private Sub cbo_Ends2_Shift_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Ends2_Shift.TextChanged
        Try
            If cbo_Ends2_Shift.Visible Then
                With dgv_WarpingDetails_Set2
                    If Val(cbo_Ends2_Shift.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 5 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Ends2_Shift.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub

    Private Sub Cbo_Ends3_Shift_GotFocus(sender As Object, e As System.EventArgs) Handles Cbo_Ends3_Shift.GotFocus
        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "Shift_Head", "Shift_Name", "", "(Shift_IdNo = 0)")
    End Sub

    Private Sub cbo_Ends3_Shift1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles Cbo_Ends3_Shift.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, Cbo_Ends3_Shift, Nothing, "Shift_Head", "Shift_Name", "", "(Shift_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_WarpingDetails_Set3
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(Cbo_Ends3_Shift.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 5)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Ends3_Shift_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles Cbo_Ends3_Shift.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, Cbo_Ends3_Shift, Nothing, Nothing, "Shift_Head", "Shift_Name", "", "(Shift_IdNo = 0)")

        With dgv_WarpingDetails_Set3

            If (e.KeyValue = 38 And Cbo_Ends3_Shift.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And Cbo_Ends3_Shift.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 5)
                .CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_WarpingDetails_Set3
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(Cbo_Ends3_Shift.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub



    Private Sub cbo_Ends3_Shift_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Cbo_Ends3_Shift.TextChanged
        Try
            If Cbo_Ends3_Shift.Visible Then
                With dgv_WarpingDetails_Set3
                    If Val(Cbo_Ends3_Shift.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 5 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(Cbo_Ends3_Shift.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub

    Private Sub cbo_Sizing2_Shift_GotFocus(sender As Object, e As System.EventArgs) Handles cbo_Sizing2_Shift.GotFocus
        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "Shift_Head", "Shift_Name", "", "(Shift_IdNo = 0)")
    End Sub


    Private Sub cbo_Sizing2_Shift1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing2_Shift.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing2_Shift, Nothing, "Shift_Head", "Shift_Name", "", "(Shift_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set2
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_Shift.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 4)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Sizing2_Shift_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing2_Shift.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing2_Shift, Nothing, Nothing, "Shift_Head", "Shift_Name", "", "(Shift_IdNo = 0)")

        With dgv_SizingDetails_Set2

            If (e.KeyValue = 38 And cbo_Sizing2_Shift.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing2_Shift.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 4)
                .CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set2
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_Shift.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub



    Private Sub cbo_Sizing2_Shift_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing2_Shift.TextChanged
        Try
            If cbo_Sizing2_Shift.Visible Then
                With dgv_SizingDetails_Set2
                    If Val(cbo_Sizing2_Shift.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 9 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_Shift.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub


    Private Sub cbo_Sizing2_Cooker_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing2_Cooker.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing2_Cooker, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set2
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_Cooker.Text)
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex + 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                '.CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Sizing2_Cooker_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing2_Cooker.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing2_Cooker, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_SizingDetails_Set2

            If (e.KeyValue = 38 And cbo_Sizing2_Cooker.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex - 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 2)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                '.CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing2_Cooker.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex + 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                '.CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set2
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_Cooker.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Sizing2_Cooker_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing2_Cooker.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing2_Cooker.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing2_Cooker_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing2_Cooker.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Sizing2_Cooker.Visible Then
                With dgv_SizingDetails_Set2
                    If Val(cbo_Sizing2_Cooker.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 19 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_Cooker.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub



    Private Sub cbo_Sizing2_FrontSizer1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing2_FrontSizer1.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing2_FrontSizer1, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set2
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_FrontSizer1.Text)
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex + 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 2)
                End If
                .CurrentCell.Selected = True

                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                '.CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Sizing2_FrontSizer1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing2_FrontSizer1.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing2_FrontSizer1, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_SizingDetails_Set2

            If (e.KeyValue = 38 And cbo_Sizing2_FrontSizer1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex - 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 4)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                '.CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing2_FrontSizer1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex + 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 2)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                '.CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set2
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_FrontSizer1.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Sizing2_FromtSizer1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing2_FrontSizer1.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing2_FrontSizer1.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing2_FrontSizer1_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing2_FrontSizer1.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Sizing2_FrontSizer1.Visible Then
                With dgv_SizingDetails_Set2
                    If Val(cbo_Sizing2_FrontSizer1.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 13 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_FrontSizer1.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub


    Private Sub cbo_Sizing2_BackSizer1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing2_BackSizer1.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing2_BackSizer1, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set2
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_BackSizer1.Text)
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex + 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 2)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                '.CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Sizing2_BackSizer1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing2_BackSizer1.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing2_BackSizer1, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_SizingDetails_Set2

            If (e.KeyValue = 38 And cbo_Sizing2_BackSizer1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex - 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 2)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                '.CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing2_BackSizer1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex + 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 2)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                '.CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set2
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_BackSizer1.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Sizing2_BackSizer_1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing2_BackSizer1.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing2_BackSizer1.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing2_BackSizer1_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing2_BackSizer1.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Sizing2_BackSizer1.Visible Then
                With dgv_SizingDetails_Set2
                    If Val(cbo_Sizing2_BackSizer1.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 15 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_BackSizer1.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub
    Private Sub cbo_Sizing2_Boiler1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing2_Boiler1.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing2_Boiler1, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set2
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_Boiler1.Text)
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex + 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 2)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                '.CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Sizing2_Boiler1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing2_Boiler1.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing2_Boiler1, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_SizingDetails_Set2

            If (e.KeyValue = 38 And cbo_Sizing2_Boiler1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex - 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 2)
                End If
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing2_Boiler1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex + 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 2)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                '.CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set2
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_Boiler1.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Sizing2_Boiler1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing2_Boiler1.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing2_Boiler1.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing2_Boiler1_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing2_Boiler1.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Sizing2_Boiler1.Visible Then
                With dgv_SizingDetails_Set2
                    If Val(cbo_Sizing2_Boiler1.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 17 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_Boiler1.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub

    Private Sub cbo_Sizing2_Cooker2_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing2_Cooker2.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing2_Cooker2, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set2
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_Cooker2.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Sizing2_Cooker2_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing2_Cooker2.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing2_Cooker2, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_SizingDetails_Set2

            If (e.KeyValue = 38 And cbo_Sizing2_Cooker2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing2_Cooker2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set2
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_Cooker2.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Sizing2_Cooker2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing2_Cooker2.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing2_Cooker2.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing2_Cooker2_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing2_Cooker2.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Sizing2_Cooker2.Visible Then
                With dgv_SizingDetails_Set2
                    If Val(cbo_Sizing2_Cooker2.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 27 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_Cooker2.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub



    Private Sub cbo_Sizing2_FrontSizer2_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing2_FrontSizer2.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing2_FrontSizer2, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set2
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_FrontSizer2.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Sizing2_FrontSizer2_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing2_FrontSizer2.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing2_FrontSizer2, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_SizingDetails_Set2

            If (e.KeyValue = 38 And cbo_Sizing2_FrontSizer2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing2_FrontSizer2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set2
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_FrontSizer2.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Sizing2_FromtSizer2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing2_FrontSizer2.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing2_FrontSizer2.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing2_FrontSizer2_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing2_FrontSizer2.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Sizing2_FrontSizer2.Visible Then
                With dgv_SizingDetails_Set2
                    If Val(cbo_Sizing2_FrontSizer2.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 21 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_FrontSizer2.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub


    Private Sub cbo_Sizing2_BackSizer2_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing2_BackSizer2.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing2_BackSizer2, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set2
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_BackSizer2.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Sizing2_BackSizer2_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing2_BackSizer2.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing2_BackSizer2, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_SizingDetails_Set2

            If (e.KeyValue = 38 And cbo_Sizing2_BackSizer2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing2_BackSizer2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set2
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_BackSizer2.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Sizing2_BackSizer2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing2_BackSizer2.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing2_BackSizer2.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing2_BackSizer2_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing2_BackSizer2.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Sizing2_BackSizer1.Visible Then
                With dgv_SizingDetails_Set2
                    If Val(cbo_Sizing2_BackSizer2.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 23 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_BackSizer2.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub
    Private Sub cbo_Sizing2_Boiler2_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing2_Boiler2.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing1_Boiler2, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set2
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_Boiler2.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Sizing2_Boiler2_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing2_Boiler2.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing2_Boiler2, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_SizingDetails_Set2

            If (e.KeyValue = 38 And cbo_Sizing2_Boiler2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing2_Boiler2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set2
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_Boiler2.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Sizing2_Boiler2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing2_Boiler2.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing2_Boiler2.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing2_Boiler2_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing2_Boiler2.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Sizing2_Boiler2.Visible Then
                With dgv_SizingDetails_Set2
                    If Val(cbo_Sizing2_Boiler2.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 25 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_Boiler2.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub

    Private Sub cbo_Sizing3_Shift_GotFocus(sender As Object, e As System.EventArgs) Handles cbo_Sizing3_Shift.GotFocus
        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "Shift_Head", "Shift_Name", "", "(Shift_IdNo = 0)")
    End Sub


    Private Sub cbo_Sizing3_Shift1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing3_Shift.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing3_Shift, Nothing, "Shift_Head", "Shift_Name", "", "(Shift_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set3
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_Shift.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 4)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Sizing3_Shift_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing3_Shift.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing3_Shift, Nothing, Nothing, "Shift_Head", "Shift_Name", "", "(Shift_IdNo = 0)")

        With dgv_SizingDetails_Set3

            If (e.KeyValue = 38 And cbo_Sizing3_Shift.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing3_Shift.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 4)
                .CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set3
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_Shift.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub



    Private Sub cbo_Sizing3_Shift_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing3_Shift.TextChanged
        Try
            If cbo_Sizing3_Shift.Visible Then
                With dgv_SizingDetails_Set3
                    If Val(cbo_Sizing3_Shift.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 9 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_Shift.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub


    Private Sub cbo_Sizing3_Cooker_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing3_Cooker.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing3_Cooker, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set3
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_Cooker.Text)
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex + 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                '.CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Sizing3_Cooker_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing3_Cooker.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing3_Cooker, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_SizingDetails_Set3

            If (e.KeyValue = 38 And cbo_Sizing3_Cooker.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex - 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 2)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                '.CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing3_Cooker.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set3
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_Cooker.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Sizing3_Cooker_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing3_Cooker.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing3_Cooker.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing3_Cooker_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing3_Cooker.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Sizing3_Cooker.Visible Then
                With dgv_SizingDetails_Set3
                    If Val(cbo_Sizing3_Cooker.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 19 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_Cooker.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub



    Private Sub cbo_Sizing3_FrontSizer1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing3_FrontSizer1.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing3_FrontSizer1, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set3
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_FrontSizer1.Text)
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex + 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 2)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                '.CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Sizing3_FrontSizer1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing3_FrontSizer1.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing3_FrontSizer1, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_SizingDetails_Set3

            If (e.KeyValue = 38 And cbo_Sizing3_FrontSizer1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex - 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 4)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                '.CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing3_FrontSizer1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex + 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 2)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                '.CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set3
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_FrontSizer1.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Sizing3_FromtSizer1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing3_FrontSizer1.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing3_FrontSizer1.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing3_FrontSizer1_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing3_FrontSizer1.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Sizing3_FrontSizer1.Visible Then
                With dgv_SizingDetails_Set3
                    If Val(cbo_Sizing3_FrontSizer1.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 13 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_FrontSizer1.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub


    Private Sub cbo_Sizing3_BackSizer1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing3_BackSizer1.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing3_BackSizer1, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set3
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_BackSizer1.Text)
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex + 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 2)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                '.CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Sizing3_BackSizer1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing3_BackSizer1.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing3_BackSizer1, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_SizingDetails_Set3

            If (e.KeyValue = 38 And cbo_Sizing3_BackSizer1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex - 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 2)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                '.CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing3_BackSizer1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex + 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 2)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                '.CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set3
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_BackSizer1.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Sizing3_BackSizer_1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing3_BackSizer1.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing3_BackSizer1.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing3_BackSizer1_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing3_BackSizer1.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Sizing3_BackSizer1.Visible Then
                With dgv_SizingDetails_Set3
                    If Val(cbo_Sizing3_BackSizer1.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 15 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_BackSizer1.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub
    Private Sub cbo_Sizing3_Boiler1_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing3_Boiler1.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing3_Boiler1, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set3
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_Boiler1.Text)
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex + 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 2)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                '.CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Sizing_Boiler3_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing3_Boiler1.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing3_Boiler1, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_SizingDetails_Set3

            If (e.KeyValue = 38 And cbo_Sizing3_Boiler1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                If .Columns(.CurrentCell.ColumnIndex - 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                Else
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 2)
                End If
                .CurrentCell.Selected = True
                '.CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                '.CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing3_Boiler1.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set3
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_Boiler1.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Sizing3_Boiler1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing3_Boiler1.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing3_Boiler1.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing3_Boiler1_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing3_Boiler1.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Sizing3_Boiler1.Visible Then
                With dgv_SizingDetails_Set3
                    If Val(cbo_Sizing3_Boiler1.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 17 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_Boiler1.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub

    Private Sub cbo_Sizing3_Cooker2_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing3_Cooker2.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing3_Cooker2, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set3
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_Cooker2.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Sizing3_Cooker2_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing3_Cooker2.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing3_Cooker2, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_SizingDetails_Set3

            If (e.KeyValue = 38 And cbo_Sizing3_Cooker2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing3_Cooker2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set3
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_Cooker2.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Sizing3_Cooker2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing3_Cooker2.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing3_Cooker2.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing3_Cooker2_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing3_Cooker2.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Sizing3_Cooker2.Visible Then
                With dgv_SizingDetails_Set3
                    If Val(cbo_Sizing3_Cooker2.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 27 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_Cooker2.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub



    Private Sub cbo_Sizing3_FrontSizer2_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing3_FrontSizer2.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing3_FrontSizer2, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set3
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_FrontSizer2.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Sizing3_FrontSizer2_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing3_FrontSizer2.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing3_FrontSizer2, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_SizingDetails_Set3

            If (e.KeyValue = 38 And cbo_Sizing3_FrontSizer2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing3_FrontSizer2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set3
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_FrontSizer2.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Sizing3_FromtSizer2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing3_FrontSizer2.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing3_FrontSizer2.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing3_FrontSizer2_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing3_FrontSizer2.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Sizing3_FrontSizer2.Visible Then
                With dgv_SizingDetails_Set3
                    If Val(cbo_Sizing3_FrontSizer2.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 21 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_FrontSizer2.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub


    Private Sub cbo_Sizing3_BackSizer2_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing3_BackSizer2.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing3_BackSizer2, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set3
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_BackSizer2.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Sizing3_BackSizer2_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing3_BackSizer2.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing3_BackSizer2, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_SizingDetails_Set3

            If (e.KeyValue = 38 And cbo_Sizing3_BackSizer2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing3_BackSizer2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set3
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_BackSizer2.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Sizing3_BackSizer2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing3_BackSizer2.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing3_BackSizer2.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing3_BackSizer2_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing3_BackSizer2.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Sizing3_BackSizer1.Visible Then
                With dgv_SizingDetails_Set3
                    If Val(cbo_Sizing3_BackSizer2.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 23 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_BackSizer2.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub
    Private Sub cbo_Sizing3_Boiler2_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing3_Boiler2.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing1_Boiler2, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            With dgv_SizingDetails_Set3
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_Boiler2.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Sizing3_Boiler2_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing3_Boiler2.KeyDown
        Dim dep_idno As Integer = 0

        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing3_Boiler2, Nothing, Nothing, "PayRoll_Employee_Head", "Employee_Name", "", "(Employee_IdNo = 0)")

        With dgv_SizingDetails_Set3

            If (e.KeyValue = 38 And cbo_Sizing3_Boiler2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Sizing3_Boiler2.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If
            If e.Control = True And e.KeyValue = 13 Then
                With dgv_SizingDetails_Set3
                    .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_Boiler2.Text)
                    .Focus()
                    If .CurrentCell.RowIndex < .Rows.Count - 1 Then
                        .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                    .CurrentCell.Selected = True
                    e.Handled = True
                    e.SuppressKeyPress = True
                End With
            End If
        End With

    End Sub

    Private Sub cbo_Sizing3_Boiler2_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing3_Boiler2.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Payroll_Employee_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing3_Boiler2.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing3_Boiler2_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing3_Boiler2.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Sizing3_Boiler2.Visible Then
                With dgv_SizingDetails_Set3
                    If Val(cbo_Sizing3_Boiler2.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 25 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_Boiler2.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub

    Private Sub btn_Filter_Close_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_Filter_Close.Click
        pnl_Back.Enabled = True
        pnl_Filter.Visible = False
        Filter_Status = False
    End Sub


    Private Sub btn_Filter_Show_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_Filter_Show.Click
        Dim da As New SqlClient.SqlDataAdapter
        Dim dt1 As New DataTable
        Dim dt2 As New DataTable
        Dim n As Integer
        Dim Led_IdNo As Integer, Cnt_IdNo As Integer, Mil_IdNo As Integer
        Dim Condt As String = ""

        Try

            Condt = ""
            Led_IdNo = 0
            Cnt_IdNo = 0
            Mil_IdNo = 0

            If IsDate(dtp_Filter_Fromdate.Value) = True And IsDate(dtp_Filter_ToDate.Value) = True Then
                Condt = "a.Set_Date between '" & Trim(Format(dtp_Filter_Fromdate.Value, "MM/dd/yyyy")) & "' and '" & Trim(Format(dtp_Filter_ToDate.Value, "MM/dd/yyyy")) & "' "
            ElseIf IsDate(dtp_Filter_Fromdate.Value) = True Then
                Condt = "a.Set_Date = '" & Trim(Format(dtp_Filter_Fromdate.Value, "MM/dd/yyyy")) & "' "
            ElseIf IsDate(dtp_Filter_ToDate.Value) = True Then
                Condt = "a.Set_Date = '" & Trim(Format(dtp_Filter_ToDate.Value, "MM/dd/yyyy")) & "' "
            End If

            If Trim(cbo_Filter_PartyName.Text) <> "" Then
                Led_IdNo = Common_Procedures.Ledger_AlaisNameToIdNo(Con, cbo_Filter_PartyName.Text)
            End If

            If Trim(cbo_Filter_CountName.Text) <> "" Then
                Cnt_IdNo = Common_Procedures.Count_NameToIdNo(Con, cbo_Filter_CountName.Text)
            End If

            If Trim(cbo_Filter_MillName.Text) <> "" Then
                Mil_IdNo = Common_Procedures.Mill_NameToIdNo(Con, cbo_Filter_MillName.Text)
            End If

            If Val(Led_IdNo) <> 0 Then
                Condt = Condt & IIf(Trim(Condt) <> "", " and ", "") & "a.Ledger_IdNo = " & Str(Val(Led_IdNo))
            End If

            If Val(Cnt_IdNo) <> 0 Then
                Condt = Condt & IIf(Trim(Condt) <> "", " and ", "") & " a.Count_IdNo = " & Str(Val(Cnt_IdNo))
            End If

            If Val(Mil_IdNo) <> 0 Then
                Condt = Condt & IIf(Trim(Condt) <> "", " and ", "") & " a.Mill_IdNo = " & Str(Val(Mil_IdNo))
            End If

            da = New SqlClient.SqlDataAdapter("select a.*, b.Ledger_Name from Specification_Head a INNER JOIN Ledger_Head b on a.Ledger_IdNo = b.Ledger_IdNo where a.company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and a.Set_Code LIKE '%/" & Trim(Common_Procedures.FnYearCode) & "' " & IIf(Trim(Condt) <> "", " and ", "") & Condt & " Order by a.for_orderby, a.Set_No", Con)
            da.Fill(dt2)

            dgv_Filter_Details.Rows.Clear()

            If dt2.Rows.Count > 0 Then

                For i = 0 To dt2.Rows.Count - 1

                    n = dgv_Filter_Details.Rows.Add()

                    dgv_Filter_Details.Rows(n).Cells(0).Value = i + 1
                    dgv_Filter_Details.Rows(n).Cells(1).Value = dt2.Rows(i).Item("Set_No").ToString
                    dgv_Filter_Details.Rows(n).Cells(2).Value = Format(Convert.ToDateTime(dt2.Rows(i).Item("Set_Date").ToString), "dd-MM-yyyy")
                    dgv_Filter_Details.Rows(n).Cells(3).Value = dt2.Rows(i).Item("Ledger_Name").ToString
                    dgv_Filter_Details.Rows(n).Cells(4).Value = (dt2.Rows(i).Item("Warp_Meters").ToString)
                    dgv_Filter_Details.Rows(n).Cells(5).Value = (dt2.Rows(i).Item("Ends_Name").ToString)
                    dgv_Filter_Details.Rows(n).Cells(6).Value = Format(Val(dt2.Rows(i).Item("Total_Warping_Net_Weight").ToString), "########0.000")
                    dgv_Filter_Details.Rows(n).Cells(7).Value = Format(Val(dt2.Rows(i).Item("Total_Pavu_Net_Weight").ToString), "########0.000")
                    dgv_Filter_Details.Rows(n).Cells(8).Value = Format(Val(dt2.Rows(i).Item("Total_Baby_Net_Weight").ToString), "########0.000")
                    dgv_Filter_Details.Rows(n).Cells(9).Value = Format(Val(dt2.Rows(i).Item("Excess_Short_Yarn").ToString), "########0.000")
                Next i

            End If

            dt2.Clear()
            dt2.Dispose()
            da.Dispose()

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT FILTER...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

        If dgv_Filter_Details.Visible And dgv_Filter_Details.Enabled Then dgv_Filter_Details.Focus()

    End Sub



    Private Sub Open_FilterEntry()
        Dim movno As String

        On Error Resume Next

        If IsNothing(dgv_Filter_Details.CurrentCell) Then Exit Sub

        movno = Trim(dgv_Filter_Details.CurrentRow.Cells(1).Value)

        If Val(movno) <> 0 Then
            Filter_Status = True
            move_record(movno)
            pnl_Back.Enabled = True
            pnl_Filter.Visible = False
        End If

    End Sub

    Private Sub dgv_Filter_Details_CellDoubleClick(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_Filter_Details.CellDoubleClick
        Open_FilterEntry()
    End Sub

    Private Sub dgv_Filter_Details_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgv_Filter_Details.KeyDown
        If e.KeyCode = 13 Then
            Open_FilterEntry()
        End If
    End Sub


    Private Sub cbo_Filter_CountName_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Filter_CountName.KeyDown
        vcbo_KeyDwnVal = e.KeyValue
        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Filter_CountName, cbo_Filter_PartyName, cbo_Filter_MillName, "Count_Head", "Count_Name", "", "(Count_IdNo = 0)")
    End Sub

    Private Sub cbo_Filter_CountName_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Filter_CountName.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Filter_CountName, cbo_Filter_MillName, "Count_Head", "Count_Name", "", "(Count_IdNo = 0)")
    End Sub
    Private Sub cbo_Filter_MillName_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Filter_MillName.KeyDown
        vcbo_KeyDwnVal = e.KeyValue

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Filter_MillName, cbo_Filter_CountName, btn_Filter_Show, "Mill_Head", "Mill_Name", "", "(Mill_IdNo = 0)")

    End Sub

    Private Sub cbo_Filter_MillName_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Filter_MillName.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Filter_MillName, btn_Filter_Show, "Mill_Head", "Mill_Name", "", "(Mill_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            btn_Filter_Show_Click(sender, e)
        End If
    End Sub

    Private Sub cbo_Filter_PartyName_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Filter_PartyName.KeyDown
        vcbo_KeyDwnVal = e.KeyValue
        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Filter_PartyName, dtp_Filter_ToDate, cbo_Filter_CountName, "Ledger_AlaisHead", "Ledger_DisplayName", "((AccountsGroup_IdNo = 10  or Show_In_All_Entry = 1) and Close_Status = 0 )", "(Ledger_IdNo = 0)")
    End Sub

    Private Sub cbo_Filter_PartyName_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Filter_PartyName.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Filter_PartyName, cbo_Filter_CountName, "Ledger_AlaisHead", "Ledger_DisplayName", "((AccountsGroup_IdNo = 10  or Show_In_All_Entry = 1) and Close_Status = 0 )", "(Ledger_IdNo = 0)")
    End Sub

    Private Sub dgtxt_WarpingDetails_Set1_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgtxt_WarpingDetails_Set1.TextChanged
        dgv_WarpingDetails_Set1.CurrentCell.Value = dgtxt_WarpingDetails_Set1.Text
    End Sub

    Private Sub Printing_Format7(ByRef e As System.Drawing.Printing.PrintPageEventArgs)
        Dim Cmd As New SqlClient.SqlCommand
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Da2 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim EntryCode As String
        Dim pFont As Font, p1Font As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim ItmNm1 As String = "", ItmNm2 As String = ""
        Dim SNo As Integer
        Dim Det_Top As Single
        Dim i As Integer = 0, j As Integer = 0, k As Integer = 0
        Dim TtWrpEnds As Single
        Dim TtWrpGrsWgt As Single, TtWrpTrWgt As Single, TtWrpNetWgt As Single
        Dim Wpm() As String, WrpYrd As Single
        Dim TtSizBms As Single
        Dim TtSizGrsWgt As Single, TtSizTrWgt As Single, TtSizNetWgt As Single
        Dim TtSizPcs As Single, TtSizMtrs As Single
        Dim TtYSBgs As Single, TtYSCns As Single, TtYSWgt As String = 0
        Dim TtOYSWgt As Single
        Dim PL1 As Single
        Dim W1 As Single
        Dim Bal_Yrn_Wt As String = 0, Bal_Bms As Single, Bal_Bgs As Single, Bal_Amt As Single
        Dim NoofItems_PerPage As Integer
        Dim ps As Printing.PaperSize
        Dim OthCntPrintSTS As Integer = 0

        For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(i)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                Exit For
            End If
        Next

        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 20 ' 65
            .Right = 40
            .Top = 30
            .Bottom = 25
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        pFont = New Font("Calibri", 9, FontStyle.Regular)
        'pFont = New Font("Calibri", 10, FontStyle.Regular)

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With

        'TxtHgt = e.Graphics.MeasureString("A", pFont).Height  ' 20
        TxtHgt = 16  ' 17   ' 18  ' e.Graphics.MeasureString("A", pFont).Height  ' 20

        Erase LnAr
        Erase ClArr

        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = Val(25) : ClArr(2) = 40 : ClArr(3) = 48 : ClArr(4) = 50 : ClArr(5) = 46 : ClArr(6) = 48
        ClArr(7) = Val(25) : ClArr(8) = 50 : ClArr(9) = 52 : ClArr(10) = 46 : ClArr(11) = 48 : ClArr(12) = 44 : ClArr(13) = 60
        ClArr(14) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13))

        'ClArr(1) = Val(30) : ClArr(2) = 45 : ClArr(3) = 50 : ClArr(4) = 52 : ClArr(5) = 48 : ClArr(6) = 53
        'ClArr(7) = Val(30) : ClArr(8) = 50 : ClArr(9) = 53 : ClArr(10) = 47 : ClArr(11) = 53 : ClArr(12) = 48 : ClArr(13) = 65
        'ClArr(14) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13))

        CurY = TMargin

        NoofItems_PerPage = 30

        EntryCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

        Try

            If prn_HdDt.Rows.Count > 0 Then

                prn_Yrn_OpWt = 0 : prn_Yrn_RcptWt = 0 : prn_Yrn_DelvWt = 0
                prn_Yrn_ConsWt = 0 : prn_Yrn_ExShWt = 0
                prn_Yrn_OpStNo = "" : prn_Yrn_RcptNo = "" : prn_Yrn_DcNo = ""

                prn_EmpBm_Op = 0 : prn_EmpBm_Rcpt = 0 : prn_EmpBm_Delv = 0 : prn_EmpBm_Cons = 0
                prn_EmpBm_OpStNo = "" : prn_EmpBm_RcptNo = "" : prn_EmpBm_DcNo = ""

                prn_EmpBg_Op = 0 : prn_EmpBg_Rcpt = 0 : prn_EmpBg_Delv = 0
                prn_EmpBg_OpStNo = "" : prn_EmpBg_RcptNo = "" : prn_EmpBg_DcNo = ""

                prn_Amt_Op = 0 : prn_Amt_Rcpt = 0 : prn_Amt_CurSet = 0
                prn_Amt_OpStNo = "" : prn_Amt_RcptNo = ""

                Cmd.Connection = Con
                Cmd.CommandText = "truncate table Temp_Statement_Yarn_Stock_Summary"
                Cmd.ExecuteNonQuery()

                Stock_calulation()

                Printing_Format7_PageHeader(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, prn_PageNo, CurY, LnAr, ClArr)

                Det_Top = CurY

                If Val(prn_PageNo) <= 1 Then

                    '----------------------------------------------------------------------------------------------------
                    '**********************     WARPING DETAILS     **********************
                    '----------------------------------------------------------------------------------------------------

                    Wpm = Split(Trim(prn_HdDt.Rows(0).Item("warp_meters").ToString), ",")

                    Da1 = New SqlClient.SqlDataAdapter("select distinct(Warp_SlNo) from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' Order by Warp_SlNo", Con)
                    Dt1 = New DataTable
                    Da1.Fill(Dt1)

                    If Dt1.Rows.Count > 0 Then

                        For k = 0 To Dt1.Rows.Count - 1

                            CurY = CurY - 10

                            Da2 = New SqlClient.SqlDataAdapter("select * from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Warp_SlNo = " & Str(Val(Dt1.Rows(k).Item("Warp_SlNo").ToString)) & " Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            WrpYrd = Val(Wpm(k))

                            SNo = 0
                            TtWrpEnds = 0
                            TtWrpGrsWgt = 0 : TtWrpTrWgt = 0 : TtWrpNetWgt = 0

                            If Dt2.Rows.Count > 0 Then

                                For i = 0 To Dt2.Rows.Count - 1

                                    SNo = SNo + 1

                                    CurY = CurY + TxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + 8, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Ends_Name").ToString)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                                    TtWrpEnds = TtWrpEnds + Val(Dt2.Rows(i).Item("Ends_Name").ToString)
                                    TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                    TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                    TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)

                                Next i

                            End If

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                            CurY = CurY + TxtHgt - 10
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtWrpEnds)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        Next k

                        'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2), CurY, LMargin + ClArr(1) + ClArr(2), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), LnAr(3))

                    End If

                    '----------------------------------------------------------------------------------------------------
                    '**********************     BABY CONE DETAILS       **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_BabyConeDetails) = 1 Then

                        CurY = CurY + TxtHgt ' + 10
                        'CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                        'p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "BABYCONE DETAILS", LMargin + ClArr(1), CurY, 2, ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), p1Font)

                        CurY = CurY + TxtHgt + 5 ' + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), CurY)
                        CurY = CurY + 5 ' + 10

                        Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1), CurY, 2, ClArr(2), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "BAGS", LMargin + ClArr(1) + ClArr(2), CurY, 2, ClArr(3), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, 2, ClArr(4), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, 2, ClArr(5) + (ClArr(6) \ 2), pFont)

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), CurY)
                        CurY = CurY + TxtHgt


                        Da2 = New SqlClient.SqlDataAdapter("select * from Specification_BabyCone_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Gross_Weight <> 0 Order by sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - 10

                            For i = 0 To Dt2.Rows.Count - 1

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + 10, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2) - 5, CurY, 1, 0, pFont)

                                'TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Bags").ToString)
                                'TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Cones").ToString)
                                'TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_gross_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 5 ' + 10
                        Common_Procedures.Print_To_PrintDocument(e, "Tare Weight ", LMargin + ClArr(1) + ClArr(2) + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_tare_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_net_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), CurY)

                    End If

                    '----------------------------------------------------------------------------------------------------
                    '**********************      YARN STOCK SUMMARY     **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_YarnStockSummary) = 1 Then

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK SUMMARY", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                        CurY = CurY + TxtHgt + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)
                        CurY = CurY + 10

                        Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + 2, CurY, 2, ClArr(1) + 15, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + ClArr(1) + 15, CurY, 2, ClArr(2) + ClArr(3) - 15 + ClArr(4) - 25, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 25, CurY, 2, ClArr(5), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 25, CurY, 2, ClArr(6) + 25, pFont)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)
                        CurY = CurY + TxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select * from Temp_Statement_Yarn_Stock_Summary where Weight <> 0 Order by Order_By, Mill_Name", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0
                        TtYSBgs = 0 : TtYSCns = 0 : TtYSWgt = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - 10

                            For i = 0 To Dt2.Rows.Count - 1

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(Dt2.Rows(i).Item("Mill_Name").ToString), 12), LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)

                                Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 25 + ClArr(5) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                                TtYSBgs = TtYSBgs + Val(Dt2.Rows(i).Item("Bags").ToString)
                                TtYSCns = TtYSCns + Val(Dt2.Rows(i).Item("Cones").ToString)
                                TtYSWgt = Format(Val(TtYSWgt) + Val(Dt2.Rows(i).Item("Weight").ToString), "###########0.000")

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(TtYSCns), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 25 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtYSWgt), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                    End If

                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         YARN STOCK SUMMARY FOR OTHER COUNT    **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_Yarn_Other_Count_Particulars) = 1 Then

                        CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "OTHER COUNT PARTICULARS", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                        CurY = CurY + TxtHgt + 5

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)
                        CurY = CurY + 5

                        Common_Procedures.Print_To_PrintDocument(e, "COUNT NAME", LMargin + ClArr(1) + 15, CurY, 0, ClArr(2) + ClArr(3) + ClArr(4), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, 2, ClArr(5) + ClArr(6) - ClArr(1), pFont)

                        CurY = CurY + TxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)
                        CurY = CurY + TxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select * from Temp_Statement_Other_Yarn_Stock_Summary where Weight <> 0 Order by Count_Name", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0
                        TtOYSWgt = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - 5

                            For i = 0 To Dt2.Rows.Count - 1

                                'If NoofDets > NoofItems_PerPage Then
                                '    CurY = CurY + TxtHgt
                                '    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)
                                '    NoofDets = NoofDets + 1
                                '    Printing_Format3_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, False)
                                '    e.HasMorePages = True
                                '    Return
                                'End If

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(Dt2.Rows(i).Item("Count_Name").ToString), 12), LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)

                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1) - 15, CurY, 1, 0, pFont)

                                TtOYSWgt = TtOYSWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)

                    End If


                    '----------------------------------------------------------------------------------------------------
                    '**********************      YARN STOCK DETAILS     **********************
                    '----------------------------------------------------------------------------------------------------

                    CurY = Det_Top

                    CurY = CurY + 3

                    PL1 = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13)

                    W1 = e.Graphics.MeasureString("Opening Balance : ", pFont).Width

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    'p1Font = New Font("Calibri", 13, FontStyle.Bold Or FontStyle.Underline)  ---  Working
                    Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                    CurY = CurY + TxtHgt + 5

                    Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_OpWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_OpStNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Yrn_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Received", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_RcptWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_RcptNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Yrn_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    If Val(Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn) = 2 Then
                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "Consumed Yarn", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_ConsWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_ExShWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Short Yarn", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)
                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Excess Yarn", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)
                        End If

                    Else
                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "Yarn Taken", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_TknWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "BabyCone Weight", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_BayCnWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    End If


                    CurY = CurY + TxtHgt
                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Delivery", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_DelvWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_DcNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_Yrn_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    If Val(prn_Yrn_RwExShWt) <> 0 Then

                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_RwExShWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Short", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Excess", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_RwExShStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Set.No. :  " & Trim(prn_Yrn_RwExShStNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                    End If

                    If Val(prn_Yrn_TranfrWt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_TranfrWt) < 0 Then

                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Math.Abs(Val(prn_Yrn_TranfrWt))), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else

                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Math.Abs(Val(prn_Yrn_TranfrWt))), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_TranfrNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_TranfrNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                    End If

                    If Val(prn_Yrn_ExcSht_Wt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_ExcSht_Wt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Exc)", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Math.Abs(Val(prn_Yrn_ExcSht_Wt))), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else

                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Sht)", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Math.Abs(Val(prn_Yrn_ExcSht_Wt))), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_ExcSht_No) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_ExcSht_No) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                    End If


                    Bal_Yrn_Wt = Format(prn_Yrn_OpWt + prn_Yrn_RcptWt - prn_Yrn_DelvWt - prn_Yrn_ConsWt + prn_Yrn_ExShWt + prn_Yrn_RwExShWt + prn_Yrn_TranfrWt + prn_Yrn_ExcSht_Wt, "##########0.000")

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    CurY = CurY + 10
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Yarn", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Bal_Yrn_Wt), "#########0.000"), PageWidth - 5, CurY, 1, 0, p1Font)

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)


                    '----------------------------------------------------------------------------------------------------
                    '**********************      EMPTY BEAM STOCK DETAILS       **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then

                        CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "EMPTY BEAM STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                        CurY = CurY + TxtHgt + 5

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Op), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBm_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBm_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Beams Received", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Rcpt), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBm_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBm_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Consumed Beams", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Cons), PageWidth - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Beams Delivered", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Delv), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBm_DcNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBm_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        Bal_Bms = prn_EmpBm_Op + prn_EmpBm_Rcpt - prn_EmpBm_Delv - prn_EmpBm_Cons

                        CurY = CurY + TxtHgt
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                        CurY = CurY + 10
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance Beams", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bms), PageWidth - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    End If

                    '----------------------------------------------------------------------------------------------------
                    '**********************      EMPTY BAG STOCK DETAILS        **********************
                    '----------------------------------------------------------------------------------------------------
                    If Val(Common_Procedures.settings.StatementPrint_EmptyBagStockDetails) = 1 Then

                        CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "EMPTY BAGS STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                        CurY = CurY + TxtHgt + 5

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Op), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBg_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Bags Received", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Rcpt), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBg_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If


                        CurY = CurY + TxtHgt + 2

                        Common_Procedures.Print_To_PrintDocument(e, "Bags Delivered", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Delv), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_DcNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBg_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        Bal_Bgs = prn_EmpBg_Op + prn_EmpBg_Rcpt - prn_EmpBg_Delv

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                        CurY = CurY + TxtHgt - 10
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance Bags", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bgs), PageWidth - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    End If

                End If

                '----------------------------------------------------------------------------------------------------
                '**********************          AMOUNT DETAILS     **********************
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_AmountDetails) = 1 Then

                    W1 = e.Graphics.MeasureString("Opening Balance  : ", pFont).Width

                    CurY = CurY + TxtHgt + 10

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    Common_Procedures.Print_To_PrintDocument(e, "AMOUNT BALANCE DETAILS", PL1, CurY, 2, ClArr(14), p1Font)

                    CurY = CurY + TxtHgt + 5

                    Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Op)), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Amt_OpStNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Amt_OpStNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    CurY = CurY + TxtHgt
                    Common_Procedures.Print_To_PrintDocument(e, "Received Amount", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Rcpt)), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Amt_RcptNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Amt_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If


                    CurY = CurY + TxtHgt + 2
                    Common_Procedures.Print_To_PrintDocument(e, "Set Amount", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_CurSet)), PageWidth - 5, CurY, 1, 0, pFont)

                    Bal_Amt = prn_Amt_Op - prn_Amt_Rcpt + prn_Amt_CurSet

                    CurY = CurY + TxtHgt + 10
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    CurY = CurY + TxtHgt - 10
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Amount", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(Bal_Amt)), PageWidth - 5, CurY, 1, 0, p1Font)

                    CurY = CurY + TxtHgt + 10
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                End If

                '----------------------------------------------------------------------------------------------------
                '**********************      SIZING DETAILS     **********************
                '----------------------------------------------------------------------------------------------------

                CurY = Det_Top

                Da1 = New SqlClient.SqlDataAdapter("select distinct(Sizing_SlNo) from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "'  Order by Sizing_SlNo", Con)
                Dt1 = New DataTable
                Da1.Fill(Dt1)

                If Dt1.Rows.Count > 0 Then

                    For k = 0 To Dt1.Rows.Count - 1

                        CurY = CurY - 10

                        Da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and Sizing_SlNo = " & Str(Val(Dt1.Rows(k).Item("Sizing_SlNo").ToString)) & " Order by sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0
                        TtSizBms = 0
                        TtSizGrsWgt = 0 : TtSizTrWgt = 0 : TtSizNetWgt = 0
                        TtSizPcs = 0 : TtSizMtrs = 0

                        If Dt2.Rows.Count > 0 Then

                            For i = 0 To Dt2.Rows.Count - 1

                                'If NoofDets > NoofItems_PerPage Then
                                '    CurY = CurY + TxtHgt
                                '    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)
                                '    NoofDets = NoofDets + 1
                                '    Printing_Format7_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, False)
                                '    e.HasMorePages = True
                                '    Return
                                'End If

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Beam_No").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                                If Val(Dt2.Rows(i).Item("Noof_Pcs").ToString) <> 0 Then
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Noof_Pcs").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                End If
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Meters").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                                TtSizBms = TtSizBms + 1
                                TtSizGrsWgt = TtSizGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                TtSizTrWgt = TtSizTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                TtSizNetWgt = TtSizNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)
                                TtSizPcs = TtSizPcs + Val(Dt2.Rows(i).Item("Noof_Pcs").ToString)
                                TtSizMtrs = TtSizMtrs + Val(Dt2.Rows(i).Item("Meters").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtSizBms)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizPcs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizMtrs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)


                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                    Next k

                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(3))

                Else

                    For k = 1 To 10
                        CurY = CurY + TxtHgt
                    Next

                    CurY = CurY + TxtHgt + 10
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                    CurY = CurY + TxtHgt - 10
                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtSizBms)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizPcs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizMtrs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)


                    CurY = CurY + TxtHgt + 10
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)


                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(3))

                End If

                '----------------------------------------------------------------------------------------------------
                '**********************      YARN TAKEN DETAILS     **********************
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_YarnTakenDetails) = 1 Then

                    CurY = CurY + TxtHgt   ' + 10

                    p1Font = New Font("Calibri", 11, FontStyle.Regular)
                    'p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    Common_Procedures.Print_To_PrintDocument(e, "YARN TAKEN DETAILS", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), p1Font)

                    CurY = CurY + TxtHgt + 3  ' + 10

                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)
                    CurY = CurY + 5

                    Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7), pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, 2, ClArr(8), pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, 2, ClArr(9) + ClArr(10), pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "COUNT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, 2, ClArr(11), pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, 2, ClArr(12), pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, 2, ClArr(13), pFont)

                    CurY = CurY + TxtHgt + 5   ' + 10
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)
                    CurY = CurY + TxtHgt

                    Da2 = New SqlClient.SqlDataAdapter("select a.*, b.Count_Name, c.Mill_Name from Specification_YarnTaken_Details a INNER JOIN Count_Head b on a.Count_IdNo = b.Count_IdNo INNER JOIN Mill_Head c on a.Mill_IdNo = c.Mill_IdNo where a.company_idno = " & Str(Val(lbl_Company.Tag)) & " and a.Set_Code = '" & Trim(EntryCode) & "' Order by a.sl_no", Con)
                    Dt2 = New DataTable
                    Da2.Fill(Dt2)

                    SNo = 0

                    If Dt2.Rows.Count > 0 Then

                        CurY = CurY - TxtHgt - 10

                        For i = 0 To Dt2.Rows.Count - 1

                            SNo = SNo + 1

                            CurY = CurY + TxtHgt

                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(Dt2.Rows(i).Item("Mill_Name").ToString), 15), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) - 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Count_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                        Next i

                    End If

                    CurY = CurY + TxtHgt + 5  ' 10
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                    CurY = CurY + TxtHgt - 10
                    Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                    'Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_bags").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_yarn_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                    CurY = CurY + TxtHgt + 5  ' 10
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                End If


                '---------- FOOTER

                Printing_Format7_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, True)

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

        e.HasMorePages = False

    End Sub

    Private Sub Printing_Format7_PageHeader(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim p1Font As Font
        Dim Cmp_Name As String, Cmp_Add1 As String, Cmp_Add2 As String
        Dim Cmp_PhNo As String, Cmp_Email As String, Cmp_TinNo As String, Cmp_CstNo As String
        Dim strHeight As Single
        Dim C1 As Single, C2 As Single, C3 As Single
        Dim W1 As Single, W2 As Single
        Dim ExcSht_Str As String
        Dim Gst_dt As Date
        Dim Entry_dt As Date
        Dim CurX As Single = 0
        Dim strWidth As Single = 0
        Dim Cmp_StateCap As String, Cmp_StateNm As String, Cmp_StateCode As String, Cmp_GSTIN_Cap As String, Cmp_GSTIN_No As String
        Dim Cmp_PanNo As String

        PageNo = PageNo + 1

        CurY = TMargin

        'da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' Order by sl_no", Con)
        'da2.Fill(dt2)
        'If dt2.Rows.Count > 30 Then
        '    Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(PageNo)), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
        'End If
        'dt2.Clear()

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY

        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
        Cmp_PhNo = "" : Cmp_Email = "" : Cmp_TinNo = "" : Cmp_CstNo = "" : Cmp_PanNo = ""
        Cmp_StateCap = "" : Cmp_StateNm = "" : Cmp_StateCode = "" : Cmp_GSTIN_Cap = "" : Cmp_GSTIN_No = ""

        If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            Cmp_Name = Replace(Cmp_Name, Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString), "")
            Cmp_Add1 = Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString)
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        Else
            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        End If

        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = "PHONE NO.:" & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_EMail").ToString) <> "" Then
            Cmp_Email = "EMail : " & prn_HdDt.Rows(0).Item("Company_EMail").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_TinNo").ToString) <> "" Then
            Cmp_TinNo = "TIN NO.: " & prn_HdDt.Rows(0).Item("Company_TinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
            Cmp_CstNo = "CST NO.: " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_State_Name").ToString) <> "" Then
            Cmp_StateCap = "STATE : "
            Cmp_StateNm = prn_HdDt.Rows(0).Item("Company_State_Name").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_State_Code").ToString) <> "" Then
            Cmp_StateCode = "CODE :" & prn_HdDt.Rows(0).Item("Company_State_Code").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString) <> "" Then
            Cmp_GSTIN_Cap = "GSTIN : "
            Cmp_GSTIN_No = "GSTIN : " & prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_State_Name").ToString) <> "" Then
            Cmp_StateCap = "STATE : "
            Cmp_StateNm = prn_HdDt.Rows(0).Item("Company_State_Name").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_PanNo").ToString) <> "" Then
            Cmp_PanNo = "PAN :" & prn_HdDt.Rows(0).Item("Company_PanNo").ToString
        End If

        If Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) <> "UNACCOUNT" Then
            CurY = CurY + TxtHgt - 10
            p1Font = New Font("Calibri", 14, FontStyle.Bold)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            CurY = CurY + strHeight
            If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
                p1Font = New Font("Calibri", 12, FontStyle.Bold)
            Else
                p1Font = New Font("Calibri", 9, FontStyle.Regular)
            End If
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1, LMargin, CurY, 2, PrintWidth, p1Font)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont)
            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, pFont)
            CurY = CurY + TxtHgt

            Gst_dt = #7/1/2017#
            Entry_dt = dtp_Date.Value

            If DateDiff("d", Gst_dt.ToShortDateString, Entry_dt.ToShortDateString) < 0 Then
                Common_Procedures.Print_To_PrintDocument(e, Cmp_TinNo, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Email, LMargin, CurY, 2, PrintWidth, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Cmp_CstNo, PageWidth - 10, CurY, 1, 0, pFont)

            Else
                Common_Procedures.Print_To_PrintDocument(e, Cmp_GSTIN_No, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Email, LMargin, CurY, 2, PrintWidth, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Cmp_PanNo, PageWidth - 10, CurY, 1, 0, pFont)

            End If

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        End If
        LnAr(2) = CurY

        C1 = 320 '370 ' Val(ClAr(1)) + Val(ClAr(2)) + Val(ClAr(3)) + Val(ClAr(4)) + Val(ClAr(5)) + Val(ClAr(6)) + Val(ClAr(7))
        C2 = 200 '215 ' Val(ClAr(8)) + Val(ClAr(9)) + Val(ClAr(10)) + Val(ClAr(11)) + Val(ClAr(12)) + Val(ClAr(13))
        C3 = PageWidth - (LMargin + C1 + C2)

        W1 = e.Graphics.MeasureString("Average Count : ", pFont).Width
        W2 = e.Graphics.MeasureString("Tape Length : ", pFont).Width  ' 20

        Try

            If Val(PageNo) <= 1 Then

                p1Font = New Font("Calibri", 12, FontStyle.Bold)
                strHeight = e.Graphics.MeasureString("Average Count : ", p1Font).Height

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "TO : ", LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Set No", LMargin + C1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Set_No").ToString), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font)
                Common_Procedures.Print_To_PrintDocument(e, "Mill Name", LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString), 15), LMargin + C1 + C2 + W2 + 25, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Set No    : " & Trim(prn_HdDt.Rows(0).Item("Set_No").ToString), LMargin + C1 + 10, CurY, 0, 0, p1Font)
                'Common_Procedures.Print_To_PrintDocument(e, "Mill : " & Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + strHeight
                p1Font = New Font("Calibri", 10, FontStyle.Bold)
                Common_Procedures.Print_To_PrintDocument(e, "     " & "M/S." & prn_HdDt.Rows(0).Item("Ledger_MainName").ToString, LMargin + 10, CurY, 0, 0, p1Font)
                Common_Procedures.Print_To_PrintDocument(e, "DATE", LMargin + C1 + 10, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Set_Date").ToString)), LMargin + C1 + W1 + 25, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + C1 + C2 + 10, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Ends_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + 3, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "DATE                 :  " & Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Set_Date").ToString)), LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Ends : " & Trim(prn_HdDt.Rows(0).Item("Ends_Name").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address1").ToString, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Count Name", LMargin + C1 + 10, CurY + 9, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + 9, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Count_Name").ToString), LMargin + C1 + W1 + 25, CurY + 9, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Tape Length", LMargin + C1 + C2 + 10, CurY + 9, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 9, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("tape_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY + 9, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Count Name : " & Trim(prn_HdDt.Rows(0).Item("Count_Name").ToString), LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Tape Length : " & Trim(prn_HdDt.Rows(0).Item("tape_length").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                If Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString) >= 0 Then
                    ExcSht_Str = "Excess"
                    'ExcSht_Str = "Excess        : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                Else
                    ExcSht_Str = "Short"
                    'ExcSht_Str = "Short         : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                End If
                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address2").ToString, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ExcSht_Str, LMargin + C1 + 10, CurY + 14, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + 14, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000"), LMargin + C1 + W1 + 25, CurY + 14, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Beam Width", LMargin + C1 + C2 + 10, CurY + 14, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 14, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Beam_Width_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + 14, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, ExcSht_Str, LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Beam Width : " & Trim(prn_HdDt.Rows(0).Item("Beam_Width_Name").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address3").ToString, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Average Count", LMargin + C1 + 10, CurY + 18, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + 18, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("beam_count").ToString), LMargin + C1 + W1 + 25, CurY + 18, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Mark", LMargin + C1 + C2 + 10, CurY + 18, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 18, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("pcs_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY + 18, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Average Count : " & Trim(prn_HdDt.Rows(0).Item("beam_count").ToString), LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Mark : " & Trim(prn_HdDt.Rows(0).Item("pcs_length").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address4").ToString, LMargin + 10, CurY, 0, 0, pFont)


                CurY = CurY + TxtHgt + 10
                e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

                e.Graphics.DrawLine(Pens.Black, LMargin + C1, CurY, LMargin + C1, LnAr(2))
                e.Graphics.DrawLine(Pens.Black, LMargin + C1 + C2, CurY, LMargin + C1 + C2, LnAr(2))

            End If
            LnAr(3) = CurY

            CurY = CurY + TxtHgt - 10
            p1Font = New Font("Calibri", 12, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "WARPING DETAILS", LMargin, CurY, 2, ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), p1Font)
            Common_Procedures.Print_To_PrintDocument(e, "SIZING DETAILS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), p1Font)
            Common_Procedures.Print_To_PrintDocument(e, "PARTICULARS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY + TxtHgt, 2, ClAr(14), p1Font)

            CurY = CurY + TxtHgt + 5 ' + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY)
            LnAr(4) = CurY

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1102" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1163" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1144" Then
                Common_Procedures.Print_To_PrintDocument(e, "Yards", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            Else
                Common_Procedures.Print_To_PrintDocument(e, "Meter", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            End If
            Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(4), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(5), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "BeamNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 2, ClAr(9), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 2, ClAr(10), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(11), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Pcs", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Meters", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY, 2, ClAr(13), pFont)

            CurY = CurY + TxtHgt + 5 ' + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(5) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub Printing_Format7_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PageHeight As Single, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal is_LastPage As Boolean)
        Dim p1Font As Font
        Dim Cmp_Name As String
        Dim LS As Single

        Try

            LS = PageHeight - 125  ' 135

            If CurY >= LS Then
                CurY = CurY + TxtHgt
            Else
                CurY = LS
            End If

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(6) = CurY

            CurY = CurY + 10

            If Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) <> "UNACCOUNT" Then

                If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
                    Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
                    Cmp_Name = Replace(Cmp_Name, Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString), "")

                Else
                    Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString

                End If

                p1Font = New Font("Calibri", 12, FontStyle.Bold)
                Common_Procedures.Print_To_PrintDocument(e, "For " & Cmp_Name, PageWidth - 15, CurY, 1, 0, p1Font)

            End If

            'CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, "Prepared By", LMargin + 20, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Checked By", LMargin + 275, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Authorised Signatory", PageWidth - 15, CurY, 1, 0, pFont)
            CurY = CurY + TxtHgt + 10

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(7) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(1))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(6), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(6), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(1))

            p1Font = New Font("Calibri", 7, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "Software by TSOFT SOLUTIONS, Tirupur. Ph : 8508403222, 0421-4337417", LMargin + 8, CurY + 5, 0, 0, p1Font)


        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub
    Private Sub Printing_Format8(ByRef e As System.Drawing.Printing.PrintPageEventArgs)
        Dim pFont As Font, pFont1 As Font, p1Font As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurX As Single = 0
        Dim CurY As Single, TxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        'Dim ps As Printing.PaperSize
        Dim J As Integer = 0, NoofItems_PerPage As Integer
        Dim AmtInWrds As String = ""
        Dim PrnHeading As String = ""
        Dim I As Integer, NoofDets As Integer
        Dim time As String = ""
        Dim Cmd As New SqlClient.SqlCommand
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Da2 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim EntryCode As String
        Dim ItmNm1 As String = "", ItmNm2 As String = ""
        Dim SNo As Integer
        Dim Det_Top As Single
        Dim k As Integer = 0
        Dim TtWrpEnds As Single
        Dim TtWrpGrsWgt As Single, TtWrpTrWgt As Single, TtWrpNetWgt As Single
        Dim Wpm() As String, WrpYrd As Single
        Dim TtYSBgs As Single, TtYSCns As Single, TtYSWgt As Single
        Dim TtOYSWgt As Single = 0
        Dim PL1 As Single = 0
        Dim W1 As Single = 0
        Dim Bal_Yrn_Wt As Single, Bal_Bms As Single, Bal_Bgs As Single = 0, Bal_Amt As Single = 0
        Dim OthCntPrintSTS As Integer = 0

        Dim pkCustomSize1 As New System.Drawing.Printing.PaperSize("PAPER 14.5 X 8", 1450, 800)
        PrintDocument1.PrinterSettings.DefaultPageSettings.PaperSize = pkCustomSize1
        PrintDocument1.DefaultPageSettings.PaperSize = pkCustomSize1

        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 50 ' 65
            .Right = 0 ' 50
            .Top = 80 ' 65
            .Bottom = 0 ' 50
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        pFont = New Font("Calibri", 11, FontStyle.Regular)
        pFont1 = New Font("Calibri", 8, FontStyle.Regular)

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With
        If PrintDocument1.DefaultPageSettings.Landscape = True Then
            With PrintDocument1.DefaultPageSettings.PaperSize
                PrintWidth = .Height - TMargin - BMargin
                PrintHeight = .Width - RMargin - LMargin
                PageWidth = .Height - TMargin
                PageHeight = .Width - RMargin
            End With
        End If

        TxtHgt = 20 ' e.Graphics.MeasureString("A", pFont).Height  ' 20

        'For I = 100 To 1100 Step 300

        '    CurY = I
        '    For J = 1 To 850 Step 40

        '        CurX = J
        '        Common_Procedures.Print_To_PrintDocument(e, CurX, CurX, CurY - 20, 0, 0, pFont1)
        '        Common_Procedures.Print_To_PrintDocument(e, "|", CurX, CurY, 0, 0, pFont)

        '        CurX = J + 20
        '        Common_Procedures.Print_To_PrintDocument(e, "|", CurX, CurY, 0, 0, pFont)
        '        Common_Procedures.Print_To_PrintDocument(e, "|", CurX, CurY + 20, 0, 0, pFont)
        '        Common_Procedures.Print_To_PrintDocument(e, CurX, CurX, CurY + 40, 0, 0, pFont1)

        '    Next

        'Next

        'For I = 200 To 800 Step 250

        '    CurX = I
        '    For J = 1 To 1200 Step 40

        '        CurY = J
        '        Common_Procedures.Print_To_PrintDocument(e, "-", CurX, CurY, 0, 0, pFont)
        '        Common_Procedures.Print_To_PrintDocument(e, "   " & CurY, CurX, CurY, 0, 0, pFont1)

        '        CurY = J + 20
        '        Common_Procedures.Print_To_PrintDocument(e, "--", CurX, CurY, 0, 0, pFont)
        '        Common_Procedures.Print_To_PrintDocument(e, "   " & CurY, CurX, CurY, 0, 0, pFont1)

        '    Next

        'Next

        'e.HasMorePages = False
        CurY = TMargin

        NoofItems_PerPage = 24

        EntryCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)


        '-----------

        Try

            If prn_HdDt.Rows.Count > 0 Then

                prn_Yrn_OpWt = 0 : prn_Yrn_RcptWt = 0 : prn_Yrn_DelvWt = 0
                prn_Yrn_ConsWt = 0 : prn_Yrn_ExShWt = 0
                prn_Yrn_OpStNo = "" : prn_Yrn_RcptNo = "" : prn_Yrn_DcNo = ""

                prn_EmpBm_Op = 0 : prn_EmpBm_Rcpt = 0 : prn_EmpBm_Delv = 0 : prn_EmpBm_Cons = 0
                prn_EmpBm_OpStNo = "" : prn_EmpBm_RcptNo = "" : prn_EmpBm_DcNo = ""

                prn_EmpBg_Op = 0 : prn_EmpBg_Rcpt = 0 : prn_EmpBg_Delv = 0
                prn_EmpBg_OpStNo = "" : prn_EmpBg_RcptNo = "" : prn_EmpBg_DcNo = ""

                prn_Amt_Op = 0 : prn_Amt_Rcpt = 0 : prn_Amt_CurSet = 0
                prn_Amt_OpStNo = "" : prn_Amt_RcptNo = ""

                Cmd.Connection = Con
                Cmd.CommandText = "truncate table Temp_Statement_Yarn_Stock_Summary"
                Cmd.ExecuteNonQuery()

                Stock_calulation()

                Det_Top = CurY

                CurX = LMargin + 41 ' 40  '150
                CurY = TMargin + 61 ' 122 ' 100
                p1Font = New Font("Calibri", 12, FontStyle.Bold)
                Common_Procedures.Print_To_PrintDocument(e, "M/s. " & prn_HdDt.Rows(0).Item("Ledger_MainName").ToString, CurX, CurY, 0, 0, p1Font)

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Ledger_Address1").ToString, CurX + 20, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                If Trim(prn_HdDt.Rows(0).Item("Ledger_Address2").ToString) <> "" Then

                    Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Ledger_Address2").ToString, CurX + 20, CurY, 0, 0, pFont)
                End If

                CurY = CurY + TxtHgt
                If Trim(prn_HdDt.Rows(0).Item("Ledger_Address2").ToString) <> "" Then

                    Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Ledger_Address3").ToString, CurX + 20, CurY, 0, 0, pFont)
                End If
                CurY = CurY + TxtHgt
                If Trim(prn_HdDt.Rows(0).Item("Ledger_Address2").ToString) <> "" Then

                    Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Ledger_Address4").ToString, CurX + 20, CurY, 0, 0, pFont)
                End If

                CurY = CurY + TxtHgt
                If prn_HdDt.Rows(0).Item("Ledger_TinNo").ToString <> "" Then
                    Common_Procedures.Print_To_PrintDocument(e, "TIN No : " & prn_HdDt.Rows(0).Item("Ledger_TinNo").ToString, CurX + 20, CurY + 20, 0, 0, pFont)
                End If

                CurX = LMargin + 530 ' 40  '150
                CurY = TMargin + 40 ' 122 ' 100
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Set_No").ToString), CurX, CurY, 0, 0, p1Font)
                CurX = LMargin + 860 ' 40  '150
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Count_Name").ToString), CurX, CurY + 9, 0, 0, pFont)
                CurX = LMargin + 1130
                Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Op), CurX, CurY, 0, 0, pFont)


                CurX = LMargin + 530 ' 40  '150
                CurY = TMargin + 80 ' 122 ' 100
                Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Set_Date").ToString)), CurX, CurY, 0, 0, pFont)
                CurX = LMargin + 860 ' 40  '150
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Ends_Name").ToString), CurX, CurY + 9, 0, 0, pFont)
                CurX = LMargin + 1130
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_EmpBm_RcptNo), CurX, CurY, 0, 0, p1Font)


                CurX = LMargin + 530
                CurY = TMargin + 110
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("tape_length").ToString), CurX, CurY + 9, 0, 0, pFont)
                CurX = LMargin + 860
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString), CurX, CurY + 9, 0, 0, pFont)
                CurX = LMargin + 1130
                Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Cons), CurX, CurY, 0, 0, pFont)

                Bal_Bms = prn_EmpBm_Op + prn_EmpBm_Rcpt - prn_EmpBm_Delv - prn_EmpBm_Cons


                CurX = LMargin + 530
                CurY = TMargin + 130
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("beam_count").ToString), CurX, CurY + 18, 0, 0, pFont)
                CurX = LMargin + 860
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("pcs_length").ToString), CurX, CurY + 18, 0, 0, pFont)
                CurX = LMargin + 1130
                Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bms), CurX, CurY + 18, 0, 0, pFont)

                If Val(prn_PageNo) <= 1 Then

                    If Val(prn_Pgno) = 0 Then

                        '----------------------------------------------------------------------------------------------------
                        '**********************     WARPING DETAILS     **********************
                        '----------------------------------------------------------------------------------------------------

                        Wpm = Split(Trim(prn_HdDt.Rows(0).Item("warp_meters").ToString), ",")

                        Da1 = New SqlClient.SqlDataAdapter("select distinct(Warp_SlNo) from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' Order by Warp_SlNo", Con)
                        Dt1 = New DataTable
                        Da1.Fill(Dt1)

                        If Dt1.Rows.Count > 0 Then

                            For k = 0 To Dt1.Rows.Count - 1

                                CurY = TMargin + 210

                                Da2 = New SqlClient.SqlDataAdapter("select * from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Warp_SlNo = " & Str(Val(Dt1.Rows(k).Item("Warp_SlNo").ToString)) & " Order by sl_no", Con)
                                Dt2 = New DataTable
                                Da2.Fill(Dt2)

                                WrpYrd = Val(Wpm(k))

                                SNo = 0
                                TtWrpEnds = 0
                                TtWrpGrsWgt = 0 : TtWrpTrWgt = 0 : TtWrpNetWgt = 0

                                If Dt2.Rows.Count > 0 Then

                                    For I = 0 To Dt2.Rows.Count - 1

                                        SNo = SNo + 1

                                        CurY = CurY + TxtHgt

                                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + 8, CurY, 0, 0, pFont)
                                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(I).Item("Ends_Name").ToString)), LMargin + 45, CurY, 0, 0, pFont)
                                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + 165, CurY, 1, 0, pFont)
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(I).Item("Gross_Weight").ToString), "########0.0"), LMargin + 240, CurY, 1, 0, pFont)
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(I).Item("Tare_Weight").ToString), "########0.0"), LMargin + 320, CurY, 1, 0, pFont)
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(I).Item("Net_Weight").ToString), "########0.0"), LMargin + 400, CurY, 1, 0, pFont)

                                        TtWrpEnds = TtWrpEnds + Val(Dt2.Rows(I).Item("Ends_Name").ToString)
                                        TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(I).Item("Gross_Weight").ToString)
                                        TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(I).Item("Tare_Weight").ToString)

                                        TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(I).Item("Net_Weight").ToString)

                                    Next I

                                End If


                                CurY = TMargin + 420
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtWrpEnds)), LMargin + 45, CurY, 0, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + 165, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpGrsWgt), "########0.0"), LMargin + 240, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpTrWgt), "########0.0"), LMargin + 320, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpNetWgt), "########0.0"), LMargin + 400, CurY, 1, 0, pFont)

                            Next k

                        End If

                        '----------------------------------------------------------------------------------------------------
                        '**********************      YARN STOCK SUMMARY     **********************
                        '----------------------------------------------------------------------------------------------------

                        If Val(Common_Procedures.settings.StatementPrint_YarnStockSummary) = 1 Then

                            CurY = TMargin + 460
                            p1Font = New Font("Calibri", 11, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK SUMMARY", LMargin + 5, CurY, 2, LMargin + 400, p1Font)

                            CurY = CurY + TxtHgt + 3  ' + 10

                            e.Graphics.DrawLine(Pens.Black, LMargin + 1, CurY, LMargin + 410, CurY)
                            CurY = CurY + 5  ' + 10

                            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + 10, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + 40, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + 110, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + 260, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + 340, CurY, 0, 0, pFont)

                            CurY = CurY + TxtHgt + 5  ' + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin + 1, CurY, LMargin + 410, CurY)
                            CurY = CurY + TxtHgt

                            Da2 = New SqlClient.SqlDataAdapter("select * from Temp_Statement_Yarn_Stock_Summary where Weight <> 0 Order by Order_By, Mill_Name", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            SNo = 0
                            TtYSBgs = 0 : TtYSCns = 0 : TtYSWgt = 0

                            If Dt2.Rows.Count > 0 Then

                                CurY = CurY - TxtHgt - 10

                                For I = 0 To Dt2.Rows.Count - 1

                                    'If NoofDets > NoofItems_PerPage Then
                                    '    CurY = CurY + TxtHgt
                                    '    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)
                                    '    NoofDets = NoofDets + 1
                                    '    Printing_Format2_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, False)
                                    '    e.HasMorePages = True
                                    '    Return
                                    'End If

                                    SNo = SNo + 1

                                    CurY = CurY + TxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + 15, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(I).Item("Yarn_Type").ToString), LMargin + 40, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(I).Item("Mill_Name").ToString), LMargin + 110, CurY, 0, 0, pFont)
                                    'Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Bags").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(I).Item("Cones").ToString), LMargin + 320, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(I).Item("Weight").ToString), "########0.000"), LMargin + 400, CurY, 1, 0, pFont)

                                    TtYSBgs = TtYSBgs + Val(Dt2.Rows(I).Item("Bags").ToString)
                                    TtYSCns = TtYSCns + Val(Dt2.Rows(I).Item("Cones").ToString)
                                    TtYSWgt = TtYSWgt + Val(Dt2.Rows(I).Item("Weight").ToString)

                                Next I

                            End If

                            CurY = CurY + TxtHgt + 5  ' + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin + 1, CurY, LMargin + 410, CurY)

                            CurY = CurY + TxtHgt - 10
                            Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + 110, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Val(TtYSCns), LMargin + 320, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtYSWgt), "########0.000"), LMargin + 400, CurY, 1, 0, pFont)

                            CurY = CurY + TxtHgt + 5  ' + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin + 1, CurY, LMargin + 410, CurY)

                        End If

                        CurX = LMargin + 1080
                        CurY = TMargin + 250
                        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_Yrn_OpWt), CurX, CurY, 0, 0, pFont)

                        CurX = LMargin + 950
                        CurY = TMargin + 265
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Yrn_OpStNo) & ")", CurX, CurY, 0, 0, pFont)

                        CurX = LMargin + 1080
                        CurY = TMargin + 280
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_RcptWt), "#########0.000"), CurX, CurY, 0, 0, pFont)

                        CurX = LMargin + 950
                        CurY = TMargin + 295
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Yrn_RcptNo) & ")", CurX, CurY, 0, 0, pFont)

                        CurX = LMargin + 1080
                        CurY = TMargin + 310
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_OpWt) + (prn_Yrn_RcptWt), "#########0.000"), CurX, CurY, 0, 0, pFont)

                        CurY = TMargin + 360
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_BayCnWt), "#########0.000"), CurX, CurY, 0, 0, pFont)

                        CurY = TMargin + 380
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_ConsWt), "#########0.000"), CurX, CurY, 0, 0, pFont)

                        CurY = TMargin + 440
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_BayCnWt) + (prn_Yrn_ConsWt), "#########0.000"), CurX, CurY, 0, 0, pFont)

                        CurY = TMargin + 460
                        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_Yrn_RwExShStNo), CurX, CurY, 0, 0, pFont)
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_ExShWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), CurX, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "SHORT", LMargin + 1010, CurY + 20, 0, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), CurX, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "EXCESS", LMargin + 1010, CurY + 20, 0, 0, pFont)

                        End If

                        CurY = TMargin + 540
                        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_Yrn_DcNo), LMargin + 950, CurY, 0, 0, pFont)

                        Bal_Yrn_Wt = prn_Yrn_OpWt + prn_Yrn_RcptWt - prn_Yrn_DelvWt - prn_Yrn_ConsWt + prn_Yrn_ExShWt + prn_Yrn_RwExShWt + prn_Yrn_TranfrWt + prn_Yrn_ExcSht_Wt

                        CurY = TMargin + 560
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Bal_Yrn_Wt), "#########0.000"), CurX, CurY, 0, 0, pFont)

                    End If
                    '----------------------------------------------------------------------------------------------------
                    '**********************      SIZING DETAILS     **********************
                    '----------------------------------------------------------------------------------------------------

                    CurY = Det_Top

                    Da1 = New SqlClient.SqlDataAdapter("select distinct(Sizing_SlNo) from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' Order by Sizing_SlNo", Con)
                    Dt1 = New DataTable
                    Da1.Fill(Dt1)

                    If Dt1.Rows.Count > 0 Then

                        For k = 0 To Dt1.Rows.Count - 1

                            CurY = TMargin + 210

                            Da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' and Sizing_SlNo = " & Str(Val(Dt1.Rows(k).Item("Sizing_SlNo").ToString)) & " Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            'SNo = 0
                            'TtSizBms = 0
                            'TtSizGrsWgt = 0 : TtSizTrWgt = 0 : TtSizNetWgt = 0
                            'TtSizPcs = 0 : TtSizMtrs = 0

                            If Dt2.Rows.Count > 0 Then

                                Do While prn_DetIndx <= Dt2.Rows.Count - 1

                                    ' For I = 0 To Dt2.Rows.Count - 1

                                    If NoofDets > NoofItems_PerPage Then

                                        prn_Pgno = prn_Pgno + 1
                                        CurY = CurY + TxtHgt
                                        Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + 700, CurY, 1, 0, pFont)
                                        NoofDets = NoofDets + 1
                                        e.HasMorePages = True
                                        Return

                                    End If

                                    SlNo = SlNo + 1

                                    CurY = CurY + TxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SlNo)), LMargin + 420, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(prn_DetIndx).Item("Beam_No").ToString), LMargin + 460, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(prn_DetIndx).Item("Gross_Weight").ToString), "########0.0"), LMargin + 580, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(prn_DetIndx).Item("Tare_Weight").ToString), "########0.0"), LMargin + 660, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(prn_DetIndx).Item("Net_Weight").ToString), "########0.0"), LMargin + 740, CurY, 1, 0, pFont)
                                    If Val(Dt2.Rows(prn_DetIndx).Item("Noof_Pcs").ToString) <> 0 Then
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(prn_DetIndx).Item("Noof_Pcs").ToString), "########0.00"), LMargin + 820, CurY, 1, 0, pFont)
                                    End If
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(prn_DetIndx).Item("Meters").ToString), "########0.00"), LMargin + 880, CurY, 1, 0, pFont)

                                    TtSizBms = TtSizBms + 1
                                    TtSizGrsWgt = TtSizGrsWgt + Val(Dt2.Rows(prn_DetIndx).Item("Gross_Weight").ToString)
                                    TtSizTrWgt = TtSizTrWgt + Val(Dt2.Rows(prn_DetIndx).Item("Tare_Weight").ToString)
                                    TtSizNetWgt = TtSizNetWgt + Val(Dt2.Rows(prn_DetIndx).Item("Net_Weight").ToString)
                                    TtSizPcs = TtSizPcs + Val(Dt2.Rows(prn_DetIndx).Item("Noof_Pcs").ToString)
                                    TtSizMtrs = TtSizMtrs + Val(Dt2.Rows(prn_DetIndx).Item("Meters").ToString)

                                    NoofDets = NoofDets + 1

                                    prn_DetIndx = prn_DetIndx + 1
                                    'Next I
                                Loop

                            End If

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin + 400, CurY, LMargin + 880, CurY)

                            CurY = CurY + TxtHgt - 10
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SlNo)), LMargin + 420, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtSizBms)), LMargin + 460, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizGrsWgt), "########0.0"), LMargin + 580, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizTrWgt), "########0.0"), LMargin + 660, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizNetWgt), "########0.0"), LMargin + 740, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizPcs), "########0.00"), LMargin + 820, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizMtrs), "########0.00"), LMargin + 880, CurY, 1, 0, pFont)

                        Next k


                    End If



                End If

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try


        e.HasMorePages = False

    End Sub

    Private Sub Printing_Format9(ByRef e As System.Drawing.Printing.PrintPageEventArgs)
        Dim Cmd As New SqlClient.SqlCommand
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Da2 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim EntryCode As String
        Dim pFont As Font, p1Font As Font, spFont As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single, sTxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim ItmNm1 As String = "", ItmNm2 As String = ""
        Dim SNo As Integer
        Dim Det_Top As Single
        Dim i As Integer = 0, j As Integer = 0, k As Integer = 0
        Dim TtWrpEnds As Single
        Dim TtWrpGrsWgt As Single, TtWrpTrWgt As Single, TtWrpNetWgt As Single
        Dim Wpm() As String, WrpYrd As Single
        Dim PL1 As Single
        Dim W1 As Single
        Dim Bal_Yrn_Wt As Single, Bal_Bgs As Single, Bal_Amt As Single
        Dim NoofItems_PerPage As Integer
        Dim YInc As Single = 0
        Dim ps As Printing.PaperSize
        Dim PpSzSTS As Boolean = False

        'Dim pkCustomSize1 As New System.Drawing.Printing.PaperSize("PAPER 9X12", 900, 1200)
        'PrintDocument1.PrinterSettings.DefaultPageSettings.PaperSize = pkCustomSize1
        'PrintDocument1.DefaultPageSettings.PaperSize = pkCustomSize1

        For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.GermanStandardFanfold Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(i)
                PrintDocument1.PrinterSettings.DefaultPageSettings.PaperSize = ps
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                e.PageSettings.PaperSize = ps
                PpSzSTS = True

                With PrintDocument1.DefaultPageSettings.Margins
                    .Left = 5  '30
                    .Right = 5   '30
                    .Top = 20  ' 30
                    .Bottom = 30
                    LMargin = .Left
                    RMargin = .Right
                    TMargin = .Top
                    BMargin = .Bottom
                End With

                Exit For
            End If
        Next

        If PpSzSTS = False Then
            Dim pkCustomSize1 As New System.Drawing.Printing.PaperSize("PAPER 9X12", 900, 1200)
            PrintDocument1.PrinterSettings.DefaultPageSettings.PaperSize = pkCustomSize1
            PrintDocument1.DefaultPageSettings.PaperSize = pkCustomSize1

            'For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            '    If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.A4 Then
            '        ps = PrintDocument1.PrinterSettings.PaperSizes(i)
            '        PrintDocument1.DefaultPageSettings.PaperSize = ps
            '        e.PageSettings.PaperSize = ps
            '        Exit For
            '    End If
            'Next

            With PrintDocument1.DefaultPageSettings.Margins
                .Left = 30
                .Right = 30
                .Top = 20  ' 30
                .Bottom = 30
                LMargin = .Left
                RMargin = .Right
                TMargin = .Top
                BMargin = .Bottom
            End With

        End If

        'With PrintDocument1.DefaultPageSettings.Margins
        '    .Left = 5  '30
        '    .Right = 5   '30
        '    .Top = 20  ' 30
        '    .Bottom = 30
        '    LMargin = .Left
        '    RMargin = .Right
        '    TMargin = .Top
        '    BMargin = .Bottom
        'End With

        'printFont = New Font("Draft 12cpi", 10)
        'pFont = New Font("Calibri", 9, FontStyle.Regular)
        pFont = New Font("Calibri", 9.5, FontStyle.Regular)
        'pFont = New Font("Calibri", 10, FontStyle.Regular)

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With

        TxtHgt = 17.75   'e.Graphics.MeasureString("A", pFont).Height  ' 18  ' 20
        'TxtHgt = 17.8 ' e.Graphics.MeasureString("A", pFont).Height  ' 18  ' 20

        Erase LnAr
        Erase ClArr

        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = Val(30) : ClArr(2) = 45 : ClArr(3) = 50 : ClArr(4) = 52 : ClArr(5) = 48 : ClArr(6) = 53
        ClArr(7) = Val(30) : ClArr(8) = 50 : ClArr(9) = 53 : ClArr(10) = 47 : ClArr(11) = 53 : ClArr(12) = 48 : ClArr(13) = 65
        ClArr(14) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13))

        CurY = TMargin

        NoofItems_PerPage = 30

        EntryCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

        Try

            If prn_HdDt.Rows.Count > 0 Then

                '---------------------------------------------------------------------------------------------------- 
                '**********************         STOCK CALCULATION             **********************
                '----------------------------------------------------------------------------------------------------

                prn_Yrn_OpWt = 0 : prn_Yrn_RcptWt = 0 : prn_Yrn_DelvWt = 0
                prn_Yrn_ConsWt = 0 : prn_Yrn_ExShWt = 0
                prn_Yrn_TknWt = 0 : prn_Yrn_BayCnWt = 0
                prn_Yrn_RwExShWt = 0 : prn_Yrn_RwExShStNo = ""
                prn_Yrn_TranfrWt = 0 : prn_Yrn_TranfrNo = ""
                prn_Yrn_ExcSht_Wt = 0 : prn_Yrn_ExcSht_No = ""
                prn_Yrn_OpStNo = "" : prn_Yrn_RcptNo = "" : prn_Yrn_DcNo = ""

                prn_EmpBm_Op = 0 : prn_EmpBm_Rcpt = 0 : prn_EmpBm_Delv = 0 : prn_EmpBm_Cons = 0
                prn_EmpBm_OpStNo = "" : prn_EmpBm_RcptNo = "" : prn_EmpBm_DcNo = ""

                prn_EmpBg_Op = 0 : prn_EmpBg_Rcpt = 0 : prn_EmpBg_Delv = 0
                prn_EmpBg_OpStNo = "" : prn_EmpBg_RcptNo = "" : prn_EmpBg_DcNo = ""

                prn_Amt_Op = 0 : prn_Amt_Rcpt = 0 : prn_Amt_CurSet = 0
                prn_Amt_OpStNo = "" : prn_Amt_RcptNo = ""

                Cmd.Connection = Con

                Cmd.CommandText = "truncate table Temp_Statement_Yarn_Stock_Summary"
                Cmd.ExecuteNonQuery()

                Cmd.CommandText = "truncate table Temp_Statement_Other_Yarn_Stock_Summary"
                Cmd.ExecuteNonQuery()

                Stock_calulation()

                '---------------------------------------------------------------------------------------------------- 
                '**********************         HEADER             **********************
                '----------------------------------------------------------------------------------------------------

                Printing_Format9_PageHeader(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, prn_PageNo, CurY, LnAr, ClArr)

                Det_Top = CurY

                If Val(prn_PageNo) <= 1 Then

                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         WARPING DETAILS             **********************
                    '----------------------------------------------------------------------------------------------------

                    Wpm = Split(Trim(prn_HdDt.Rows(0).Item("warp_meters").ToString), ",")

                    Da1 = New SqlClient.SqlDataAdapter("select distinct(Warp_SlNo) from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' Order by Warp_SlNo", Con)
                    Dt1 = New DataTable
                    Da1.Fill(Dt1)

                    If Dt1.Rows.Count > 0 Then

                        For k = 0 To Dt1.Rows.Count - 1

                            CurY = CurY - 10

                            Da2 = New SqlClient.SqlDataAdapter("select * from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Warp_SlNo = " & Str(Val(Dt1.Rows(k).Item("Warp_SlNo").ToString)) & " Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            WrpYrd = Val(Wpm(k))

                            SNo = 0
                            TtWrpEnds = 0
                            TtWrpGrsWgt = 0 : TtWrpTrWgt = 0 : TtWrpNetWgt = 0

                            If Dt2.Rows.Count > 0 Then

                                For i = 0 To Dt2.Rows.Count - 1

                                    SNo = SNo + 1

                                    CurY = CurY + TxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + 8, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Ends_Name").ToString)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                                    TtWrpEnds = TtWrpEnds + Val(Dt2.Rows(i).Item("Ends_Name").ToString)
                                    TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                    TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                    TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)

                                Next i

                            End If

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                            CurY = CurY + TxtHgt - 10
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtWrpEnds)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        Next k

                        'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2), CurY, LMargin + ClArr(1) + ClArr(2), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), LnAr(3))

                    End If

                End If



                '---------------------------------------------------------------------------------------------------- 
                '**********************         BABY CONE DETAILS              **********************
                '----------------------------------------------------------------------------------------------------

                If Val(prn_PageNo) <= 1 Then

                    If Val(Common_Procedures.settings.StatementPrint_BabyConeDetails) = 1 Then

                        YInc = 5

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 12, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "BABYCONE DETAILS", LMargin + ClArr(1), CurY, 2, ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, p1Font)

                        CurY = CurY + TxtHgt + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)
                        CurY = CurY + YInc

                        Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1), CurY, 2, ClArr(2), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "BAGS", LMargin + ClArr(1) + ClArr(2), CurY, 2, ClArr(3), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, 2, ClArr(4), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, 2, ClArr(5) + ClArr(6) - 30, pFont)

                        CurY = CurY + TxtHgt + YInc
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)
                        CurY = CurY + TxtHgt


                        Da2 = New SqlClient.SqlDataAdapter("select * from Specification_BabyCone_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Gross_Weight <> 0 Order by sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - YInc

                            For i = 0 To Dt2.Rows.Count - 1

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + 10, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30 - 5, CurY, 1, 0, pFont)

                                'TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Bags").ToString)
                                'TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Cones").ToString)
                                'TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + YInc
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)

                        CurY = CurY + TxtHgt - YInc
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_gross_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30 - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + YInc
                        Common_Procedures.Print_To_PrintDocument(e, "Tare Weight ", LMargin + ClArr(1) + ClArr(2) + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_tare_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30 - 5, CurY, 1, 0, pFont)


                        CurY = CurY + TxtHgt + YInc
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)

                        CurY = CurY + TxtHgt - YInc
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_net_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30 - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + YInc
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)

                    End If

                End If

                '---------------------------------------------------------------------------------------------------- 
                '**********************         YARN STOCK SUMMARY             **********************
                '----------------------------------------------------------------------------------------------------


                If Val(prn_PageNo) <= 1 Or Prn_YrnStkSumm_2ndPage_STS = True Then

                    If Val(Common_Procedures.settings.StatementPrint_YarnStockSummary) = 1 Then

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK SUMMARY", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                        CurY = CurY + TxtHgt + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)
                        CurY = CurY + 10

                        Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + 2, CurY, 2, ClArr(1) + 15, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + ClArr(1) + 15, CurY, 2, ClArr(2) + ClArr(3) - 15 + ClArr(4) - 25, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 25, CurY, 2, ClArr(5), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 25, CurY, 2, ClArr(6) + 25, pFont)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)
                        CurY = CurY + TxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select * from Temp_Statement_Yarn_Stock_Summary where Weight <> 0 Order by Order_By, Mill_Name", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - 10

                            For i = Prn_YrnStkSumm_StartIndx To Dt2.Rows.Count - 1

                                If CurY >= 1085 Then
                                    p1Font = New Font("Calibri", 9.5, FontStyle.Bold)
                                    CurY = CurY + TxtHgt
                                    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, p1Font)
                                    CurY = CurY + 5
                                    Prn_YrnStkSumm_2ndPage_STS = True
                                    Prn_YrnStkSumm_StartIndx = i
                                    GoTo YRNSTKSUMM_1000
                                End If

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                'Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + 7, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(Dt2.Rows(i).Item("Mill_Name").ToString), 12), LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)

                                Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 25 + ClArr(5) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                                'Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Mill_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + 5, CurY, 0, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Bags").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                                Prn_TtYSBgs = Prn_TtYSBgs + Val(Dt2.Rows(i).Item("Bags").ToString)
                                Prn_TtYSCns = Prn_TtYSCns + Val(Dt2.Rows(i).Item("Cones").ToString)
                                Prn_TtYSWgt = Prn_TtYSWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Prn_TtYSCns), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 25 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtYSWgt), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        Prn_YrnStkSumm_2ndPage_STS = False

                    End If

                End If

YRNSTKSUMM_1000:

                '---------------------------------------------------------------------------------------------------- 
                '**********************         YARN STOCK PARTICULARS              **********************
                '----------------------------------------------------------------------------------------------------

                CurY = Det_Top

                If Val(prn_PageNo) <= 1 Then

                    CurY = CurY + 3

                    PL1 = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13)

                    W1 = e.Graphics.MeasureString("Opening Balance   : ", pFont).Width

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    'p1Font = New Font("Calibri", 13, FontStyle.Bold Or FontStyle.Underline)  ---  Working
                    Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                    CurY = CurY + TxtHgt + 5

                    Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_OpWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_OpStNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Yrn_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Received", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_RcptWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_RcptNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Yrn_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    If Val(Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn) = 2 Then

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Consumed Yarn", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_ConsWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_ExShWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Short Yarn", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Excess Yarn", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                    Else

                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "Yarn Taken", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_TknWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "Baby Cone", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_BayCnWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Delivery", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_DelvWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_DcNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_Yrn_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    If Val(prn_Yrn_RwExShWt) <> 0 Then

                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_RwExShWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Short", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Excess", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_RwExShStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Set.No. :  " & Trim(prn_Yrn_RwExShStNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                    End If

                    If Val(prn_Yrn_TranfrWt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_TranfrWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_TranfrWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_TranfrWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_TranfrNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_TranfrNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If
                    End If

                    If Val(prn_Yrn_ExcSht_Wt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_ExcSht_Wt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Exc)", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExcSht_Wt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Sht)", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExcSht_Wt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_ExcSht_No) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_ExcSht_No) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If
                    End If

                    If Val(Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn) = 2 Then
                        Bal_Yrn_Wt = prn_Yrn_OpWt + prn_Yrn_RcptWt - prn_Yrn_DelvWt - prn_Yrn_ConsWt + prn_Yrn_ExShWt + prn_Yrn_RwExShWt + prn_Yrn_TranfrWt + prn_Yrn_ExcSht_Wt
                    Else
                        Bal_Yrn_Wt = prn_Yrn_OpWt + prn_Yrn_RcptWt - prn_Yrn_DelvWt - prn_Yrn_TknWt + prn_Yrn_BayCnWt + prn_Yrn_RwExShWt + prn_Yrn_TranfrWt + prn_Yrn_ExcSht_Wt
                    End If

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    CurY = CurY + 10
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Yarn", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Bal_Yrn_Wt), "#########0.000"), PageWidth - 5, CurY, 1, 0, p1Font)

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)


                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         EMPTY GUNNIES STOCK DETAILS              **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_EmptyBagStockDetails) = 1 Then

                        CurY = CurY + TxtHgt + (TxtHgt \ 2)

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "EMPTY GUNNIES STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                        CurY = CurY + TxtHgt + 5

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Op), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBg_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Bags Received", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Rcpt), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBg_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If


                        CurY = CurY + TxtHgt + 2

                        Common_Procedures.Print_To_PrintDocument(e, "Bags Delivered", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Delv), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_DcNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBg_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        Bal_Bgs = prn_EmpBg_Op + prn_EmpBg_Rcpt - prn_EmpBg_Delv

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                        CurY = CurY + TxtHgt - 10
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance Bags", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bgs), PageWidth - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    End If

                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         EMPTY GUNNIES STOCK (SIMPLE)              **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_EmptyBagStockSimple) = 1 Then

                        Bal_Bgs = prn_EmpBg_Op + prn_EmpBg_Rcpt - prn_EmpBg_Delv

                        CurY = CurY + TxtHgt + 10

                        'p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Empty Gunnies", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bgs), PageWidth - 5, CurY, 1, 0, pFont)

                        CurY = CurY + 5

                    End If

                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         AMOUNT DETAILS              **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_AmountDetails) = 1 Then

                        W1 = e.Graphics.MeasureString("Current Set Amount : ", pFont).Width

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "AMOUNT BALANCE DETAILS", PL1, CurY, 2, ClArr(14), p1Font)

                        CurY = CurY + TxtHgt + 5

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Op)), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_Amt_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Amt_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Received Amount", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Rcpt)), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_Amt_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Amt_RcptNo) & ")", PL1 + 5, CurY, 0, 0, p1Font)
                        End If


                        CurY = CurY + TxtHgt + 2

                        Common_Procedures.Print_To_PrintDocument(e, "Current Set Amount", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_CurSet)), PageWidth - 5, CurY, 1, 0, pFont)

                        Bal_Amt = prn_Amt_Op - prn_Amt_Rcpt + prn_Amt_CurSet

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                        CurY = CurY + TxtHgt - 10
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance Amount", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(Bal_Amt)), PageWidth - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    End If

                End If

                '---------------------------------------------------------------------------------------------------- 
                '**********************         SIZING DETAILS              **********************
                '----------------------------------------------------------------------------------------------------

                spFont = New Font("Calibri", 9, FontStyle.Regular)
                sTxtHgt = 17

                CurY = Det_Top

                If Val(prn_PageNo) <= 1 Or Prn_SizingDetails_2ndPage_STS = True Then

                    Da1 = New SqlClient.SqlDataAdapter("select distinct(Sizing_SlNo) from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' Order by Sizing_SlNo", Con)
                    Dt1 = New DataTable
                    Da1.Fill(Dt1)

                    If Dt1.Rows.Count > 0 Then

                        For k = 0 To Dt1.Rows.Count - 1

                            CurY = CurY - 5  ' 10

                            Da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' and Sizing_SlNo = " & Str(Val(Dt1.Rows(k).Item("Sizing_SlNo").ToString)) & " Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            If Dt2.Rows.Count > 0 Then

                                For i = Prn_SizingDetails_StartIndx To Dt2.Rows.Count - 1

                                    If (i > 0 And i Mod 40 = 0 And Prn_SizingDetails_2ndPage_STS = False) Or CurY >= 1100 Then
                                        p1Font = New Font("Calibri", 9.5, FontStyle.Bold)
                                        CurY = CurY + TxtHgt + 5
                                        Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, p1Font)

                                        CurY = CurY + sTxtHgt + 5 ' 10
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(3))


                                        Prn_SizingDetails_2ndPage_STS = True
                                        Prn_SizingDetails_StartIndx = i
                                        Prn_YrnTknDet_2ndPage_STS = True
                                        GoTo SIZDET_1000
                                    End If

                                    SNo = SNo + 1

                                    CurY = CurY + sTxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Sl_No").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Beam_No").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Noof_Pcs").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Meters").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                                    Prn_TtSizBms = Prn_TtSizBms + 1
                                    Prn_TtSizGrsWgt = Prn_TtSizGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                    Prn_TtSizTrWgt = Prn_TtSizTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                    Prn_TtSizNetWgt = Prn_TtSizNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)
                                    Prn_TtSizPcs = Prn_TtSizPcs + Val(Dt2.Rows(i).Item("Noof_Pcs").ToString)
                                    Prn_TtSizMtrs = Prn_TtSizMtrs + Val(Dt2.Rows(i).Item("Meters").ToString)

                                Next i

                            End If

                            CurY = CurY + sTxtHgt + 5 ' 10
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                            CurY = CurY + sTxtHgt - 5 ' 10
                            'Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Prn_TtSizBms)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizPcs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizMtrs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)


                            CurY = CurY + sTxtHgt + 5 ' 10
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                        Next k

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(3))

                        Prn_SizingDetails_2ndPage_STS = False

                    End If

                End If

SIZDET_1000:
                '---------------------------------------------------------------------------------------------------- 
                '**********************         YARN TAKEN DETAILS              **********************
                '----------------------------------------------------------------------------------------------------

                If Val(prn_PageNo) <= 1 Or Prn_YrnTknDet_2ndPage_STS = True Then

                    If Val(Common_Procedures.settings.StatementPrint_YarnTakenDetails) = 1 Then

                        If CurY >= 975 Then   '1000
                            Prn_YrnTknDet_2ndPage_STS = True
                            GoTo YRNTKNDET_1000
                        End If

                        CurY = CurY + TxtHgt + 5 ' 10

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "YARN TAKEN DETAILS", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), p1Font)

                        CurY = CurY + sTxtHgt + 5 ' 10

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)
                        CurY = CurY + 10

                        Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, 2, ClArr(8), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, 2, ClArr(9) + ClArr(10), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "COUNT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, 2, ClArr(11), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, 2, ClArr(12), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, 2, ClArr(13), pFont)

                        CurY = CurY + sTxtHgt + 5 ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)
                        CurY = CurY + sTxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select a.*, b.Count_Name, c.Mill_Name from Specification_YarnTaken_Details a INNER JOIN Count_Head b on a.Count_IdNo = b.Count_IdNo INNER JOIN Mill_Head c on a.Mill_IdNo = c.Mill_IdNo where a.company_idno = " & Str(Val(lbl_Company.Tag)) & " and a.Set_Code = '" & Trim(EntryCode) & "' Order by a.sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - sTxtHgt - 5 ' 10

                            For i = Prn_YrnTknDet_StartIndx To Dt2.Rows.Count - 1

                                If CurY >= 1100 Then
                                    p1Font = New Font("Calibri", 9.5, FontStyle.Bold)
                                    CurY = CurY + TxtHgt
                                    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, p1Font)
                                    CurY = CurY + 5 ' 10
                                    Prn_YrnTknDet_2ndPage_STS = True
                                    Prn_YrnTknDet_StartIndx = i
                                    GoTo YRNTKNDET_1000
                                    'NoofDets = NoofDets + 1
                                    'Printing_Format9_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, False)
                                    'e.HasMorePages = True
                                    'Return
                                End If

                                SNo = SNo + 1

                                CurY = CurY + sTxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Mill_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Count_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                            Next i

                        End If

                        CurY = CurY + sTxtHgt + 5  ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                        CurY = CurY + sTxtHgt - 5  '10
                        Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                        'Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_bags").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_yarn_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + sTxtHgt + 5  ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                        Prn_YrnTknDet_2ndPage_STS = False

                    End If

                End If

YRNTKNDET_1000:

                '---------------------------------------------------------------------------------------------------- 
                '**********************         FOOTER             **********************
                '----------------------------------------------------------------------------------------------------

                Printing_Format9_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, True)

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

        If Prn_YrnStkSumm_2ndPage_STS = True Or Prn_SizingDetails_2ndPage_STS = True Or Prn_YrnTknDet_2ndPage_STS = True Then
            Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(prn_PageNo)), PageWidth - 10, TMargin - TxtHgt, 1, 0, pFont)
            e.HasMorePages = True

        Else
            e.HasMorePages = False

        End If

    End Sub

    Private Sub Printing_Format9_PageHeader(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim p1Font As Font
        Dim Cmp_Name As String, Cmp_Add1 As String, Cmp_Add2 As String
        Dim Cmp_PhNo As String, Cmp_TinNo As String, Cmp_CstNo As String
        Dim strHeight As Single
        Dim C1 As Single, C2 As Single, C3 As Single, C4 As Single
        Dim W1 As Single, W2 As Single, W3 As Single
        Dim ExcSht_Str As String
        Dim Bal_Bms As Integer = 0
        Dim YInc As Single = 0
        Dim MilNm1 As String, MilNm2 As String
        Dim I As Integer = 0

        PageNo = PageNo + 1

        CurY = TMargin

        If PageNo > 1 Then
            Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(PageNo)), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
        End If

        'da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' Order by sl_no", Con)
        'da2.Fill(dt2)
        'If dt2.Rows.Count > 30 Then
        '    Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(PageNo)), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
        'End If
        'dt2.Clear()

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY

        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
        Cmp_PhNo = "" : Cmp_TinNo = "" : Cmp_CstNo = ""

        If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            Cmp_Name = Replace(Cmp_Name, Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString), "")
            Cmp_Add1 = Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString)
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        Else
            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        End If

        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = "PHONE NO.:" & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_TinNo").ToString) <> "" Then
            Cmp_TinNo = "TIN NO.: " & prn_HdDt.Rows(0).Item("Company_TinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
            Cmp_CstNo = "CST NO.: " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
        End If


        If Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) <> "UNACCOUNT" Then

            CurY = CurY + TxtHgt - 10
            p1Font = New Font("Calibri", 18, FontStyle.Bold)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
                p1Font = New Font("Calibri", 14, FontStyle.Bold)
                CurY = CurY + strHeight
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1, LMargin, CurY, 2, PrintWidth, p1Font)
                strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height
                CurY = CurY + strHeight
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont)

            Else
                CurY = CurY + strHeight
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1 & " " & Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont)

            End If
            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, pFont)
            CurY = CurY + TxtHgt - 5
            Common_Procedures.Print_To_PrintDocument(e, Cmp_TinNo, LMargin + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_CstNo, PageWidth - 10, CurY, 1, 0, pFont)

            CurY = CurY + TxtHgt + 5  ' 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

        End If
        LnAr(2) = CurY

        If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
            C1 = Val(ClAr(1)) + Val(ClAr(2)) + Val(ClAr(3)) + Val(ClAr(4)) + Val(ClAr(5)) + Val(ClAr(6))
            C2 = 200
            C3 = 200
            C4 = PageWidth - (LMargin + C1 + C2 + C3)

        Else

            C1 = 370 ' Val(ClAr(1)) + Val(ClAr(2)) + Val(ClAr(3)) + Val(ClAr(4)) + Val(ClAr(5)) + Val(ClAr(6)) + Val(ClAr(7))
            C2 = 215 ' Val(ClAr(8)) + Val(ClAr(9)) + Val(ClAr(10)) + Val(ClAr(11)) + Val(ClAr(12)) + Val(ClAr(13))
            C3 = PageWidth - (LMargin + C1 + C2)
            C4 = 0

        End If

        W1 = e.Graphics.MeasureString("Average Count : ", pFont).Width
        W2 = e.Graphics.MeasureString("Tape Length : ", pFont).Width
        W3 = e.Graphics.MeasureString("Consumed Rolls  : ", pFont).Width




        Try

            If Val(PageNo) <= 1 Then



                MilNm1 = Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString)
                MilNm2 = ""
                If Len(MilNm1) > 15 Then
                    For I = 15 To 1 Step -1
                        If Mid$(Trim(MilNm1), I, 1) = " " Or Mid$(Trim(MilNm1), I, 1) = "," Or Mid$(Trim(MilNm1), I, 1) = "." Or Mid$(Trim(MilNm1), I, 1) = "-" Or Mid$(Trim(MilNm1), I, 1) = "/" Or Mid$(Trim(MilNm1), I, 1) = "_" Or Mid$(Trim(MilNm1), I, 1) = "(" Or Mid$(Trim(MilNm1), I, 1) = ")" Or Mid$(Trim(MilNm1), I, 1) = "\" Or Mid$(Trim(MilNm1), I, 1) = "[" Or Mid$(Trim(MilNm1), I, 1) = "]" Or Mid$(Trim(MilNm1), I, 1) = "{" Or Mid$(Trim(MilNm1), I, 1) = "}" Then Exit For
                    Next I
                    If I = 0 Then I = 15
                    MilNm2 = Microsoft.VisualBasic.Right(Trim(MilNm1), Len(MilNm1) - I)
                    MilNm1 = Microsoft.VisualBasic.Left(Trim(MilNm1), I - 1)
                End If

                p1Font = New Font("Calibri", 14, FontStyle.Bold)

                CurY = CurY + TxtHgt - 5
                Common_Procedures.Print_To_PrintDocument(e, "TO : ", LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Set No", LMargin + C1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Set_No").ToString), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font)

                If Len(Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString)) > 15 Then
                    p1Font = New Font("Calibri", 8, FontStyle.Regular)
                Else
                    p1Font = New Font("Calibri", 10, FontStyle.Regular)
                End If

                Common_Procedures.Print_To_PrintDocument(e, "Mill Name", LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(MilNm1), LMargin + C1 + C2 + W2 + 25, CurY, 0, 0, p1Font)
                If Trim(MilNm2) <> "" Then
                    Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(MilNm2), 15), LMargin + C1 + C2 + W2 + 25, CurY + 12, 0, 0, p1Font)
                End If

                If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                    Common_Procedures.Print_To_PrintDocument(e, "Opening Rolls", LMargin + C1 + C2 + C3 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + C3 + W3 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Op), LMargin + C1 + C2 + C3 + W3 + 25, CurY, 0, 0, pFont)
                End If

                YInc = 10
                CurY = CurY + TxtHgt
                If Len(Trim(prn_HdDt.Rows(0).Item("Ledger_MainName").ToString)) <= 30 Then
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                ElseIf Len(Trim(prn_HdDt.Rows(0).Item("Ledger_MainName").ToString)) <= 35 Then
                    p1Font = New Font("Calibri", 9, FontStyle.Bold)
                Else
                    p1Font = New Font("Calibri", 8, FontStyle.Regular)
                End If

                Common_Procedures.Print_To_PrintDocument(e, "     " & "M/S." & prn_HdDt.Rows(0).Item("Ledger_MainName").ToString, LMargin + 10, CurY, 0, 0, p1Font)

                Common_Procedures.Print_To_PrintDocument(e, "DATE", LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Set_Date").ToString)), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Ends_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)
                If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                    If Trim(prn_EmpBm_OpStNo) <> "" Then
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBm_OpStNo) & ")", LMargin + C1 + C2 + C3 + 10 + 10, CurY, 0, 0, p1Font)
                        'Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + C3 + W3 + 10, CurY, 0, 0, pFont)
                        'Common_Procedures.Print_To_PrintDocument(e, "", LMargin + C1 + C2 + C3 + W3 + 25, CurY, 0, 0, pFont)
                    End If
                End If

                YInc = 20

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address1").ToString, LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Count Name", LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Count_Name").ToString), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Tape Length", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("tape_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)

                If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                    Common_Procedures.Print_To_PrintDocument(e, "Rolls Received : ", LMargin + C1 + C2 + C3 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + C3 + W3 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Rcpt), LMargin + C1 + C2 + C3 + W3 + 25, CurY, 0, 0, pFont)
                End If

                YInc = 30

                If Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString) >= 0 Then
                    ExcSht_Str = "Excess Yarn"
                    'ExcSht_Str = "Excess        : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                Else
                    ExcSht_Str = "Short Yarn"
                    'ExcSht_Str = "Short         : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                End If
                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address2").ToString, LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, ExcSht_Str, LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000"), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Beam Width", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Beam_Width_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)

                If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                    If Trim(prn_EmpBm_RcptNo) <> "" Then
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBm_RcptNo) & ")", LMargin + C1 + C2 + C3 + 10 + 10, CurY, 0, 0, p1Font)
                    End If
                End If

                YInc = 45

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address3").ToString, LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Average Count", LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("beam_count").ToString), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Mark", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("pcs_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)

                If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                    Common_Procedures.Print_To_PrintDocument(e, "Consumed Rolls", LMargin + C1 + C2 + C3 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + C3 + W3 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Cons), LMargin + C1 + C2 + C3 + W3 + 25, CurY, 0, 0, pFont)
                End If

                YInc = 25

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address4").ToString, LMargin + 10, CurY, 0, 0, pFont)
                If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                    Common_Procedures.Print_To_PrintDocument(e, "Rolls Delivery", LMargin + C1 + C2 + C3 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + C3 + W3 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Delv), LMargin + C1 + C2 + C3 + W3 + 25, CurY, 0, 0, pFont)
                End If

                CurY = CurY + TxtHgt
                If Trim(prn_HdDt.Rows(0).Item("Ledger_TinNo").ToString) <> "" Then
                    Common_Procedures.Print_To_PrintDocument(e, "     Tin No : " & prn_HdDt.Rows(0).Item("Ledger_TinNo").ToString, LMargin + 10, CurY, 0, 0, pFont)
                End If
                If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                    If Trim(prn_EmpBm_DcNo) <> "" Then
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBm_DcNo) & ")", LMargin + C1 + C2 + C3 + 10 + 10, CurY, 0, 0, p1Font)
                    End If
                End If

                Bal_Bms = prn_EmpBm_Op + prn_EmpBm_Rcpt - prn_EmpBm_Delv - prn_EmpBm_Cons

                YInc = 30

                CurY = CurY + TxtHgt
                If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Rolls", LMargin + C1 + C2 + C3 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + C3 + W3 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bms), LMargin + C1 + C2 + C3 + W3 + 25, CurY, 0, 0, pFont)
                End If

                CurY = CurY + TxtHgt + 5  ' 10
                e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

                e.Graphics.DrawLine(Pens.Black, LMargin + C1, CurY, LMargin + C1, LnAr(2))
                e.Graphics.DrawLine(Pens.Black, LMargin + C1 + C2, CurY, LMargin + C1 + C2, LnAr(2))
                If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                    e.Graphics.DrawLine(Pens.Black, LMargin + C1 + C2 + C3, CurY, LMargin + C1 + C2 + C3, LnAr(2))
                End If
            End If
            LnAr(3) = CurY

            CurY = CurY + TxtHgt - 10
            p1Font = New Font("Calibri", 12, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "WARPING DETAILS", LMargin, CurY, 2, ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), p1Font)
            Common_Procedures.Print_To_PrintDocument(e, "SIZING DETAILS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), p1Font)
            Common_Procedures.Print_To_PrintDocument(e, "PARTICULARS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY + TxtHgt, 2, ClAr(14), p1Font)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY)
            LnAr(4) = CurY

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Meter", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(4), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(5), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "BeamNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 2, ClAr(9), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 2, ClAr(10), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(11), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Pcs", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Meters", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY, 2, ClAr(13), pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(5) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub Printing_Format9_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PageHeight As Single, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal is_LastPage As Boolean)
        Dim p1Font As Font
        Dim Cmp_Name As String
        Dim LS As Single

        Try

            LS = PageHeight - 135

            'If CurY >= LS Then
            '    CurY = CurY + TxtHgt
            'Else
            CurY = LS
            'End If

            'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            'LnAr(6) = CurY

            If Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) <> "UNACCOUNT" Then

                If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
                    Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
                    Cmp_Name = Replace(Cmp_Name, Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString), "")

                Else
                    Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString

                End If

                If Len(Trim(Cmp_Name)) > 25 Then
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                Else
                    p1Font = New Font("Calibri", 12, FontStyle.Bold)
                End If

                CurY = CurY + 10
                Common_Procedures.Print_To_PrintDocument(e, "For " & Cmp_Name, PageWidth - 15, CurY, 1, 0, p1Font)

            End If

            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            'CurY = CurY + TxtHgt
            'Common_Procedures.Print_To_PrintDocument(e, "Prepared By", LMargin + 20, CurY, 0, 0, pFont)
            'Common_Procedures.Print_To_PrintDocument(e, "Checked By", LMargin + 300, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Authorised Signatory", PageWidth - 15, CurY, 1, 0, pFont)
            CurY = CurY + TxtHgt + 10

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(7) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(1))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(7), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(7), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(1))

            p1Font = New Font("Calibri", 7, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "Software by TSOFT SOLUTIONS, Tirupur. Ph : 8508403222, 0421-4337417", LMargin + 8, CurY + 5, 0, 0, p1Font)

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub
    Private Sub Printing_Format10(ByRef e As System.Drawing.Printing.PrintPageEventArgs)
        Dim Cmd As New SqlClient.SqlCommand
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Da2 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim EntryCode As String
        Dim pFont As Font, p1Font As Font, spFont As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single, sTxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim ItmNm1 As String = "", ItmNm2 As String = ""
        Dim SNo As Integer
        Dim Det_Top As Single
        Dim i As Integer = 0, j As Integer = 0, k As Integer = 0, Bal_Bms As Integer = 0
        Dim TtWrpEnds As Single
        Dim TtWrpGrsWgt As Single, TtWrpTrWgt As Single, TtWrpNetWgt As Single
        Dim Wpm() As String, WrpYrd As Single
        Dim PL1 As Single
        Dim W1 As Single
        Dim Bal_Yrn_Wt As Single, Bal_Bgs As Single, Bal_Amt As Single
        Dim NoofItems_PerPage As Integer
        Dim YInc As Single = 0
        Dim ps As Printing.PaperSize
        Dim PpSzSTS As Boolean = False
        Dim PW1 As Single

        'Dim pkCustomSize1 As New System.Drawing.Printing.PaperSize("PAPER 9X12", 900, 1200)
        'PrintDocument1.PrinterSettings.DefaultPageSettings.PaperSize = pkCustomSize1
        'PrintDocument1.DefaultPageSettings.PaperSize = pkCustomSize1

        'For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
        '    If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.A4 Then
        '        For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
        '            If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.A4 Then
        '                ps = PrintDocument1.PrinterSettings.PaperSizes(i)
        '                PrintDocument1.DefaultPageSettings.PaperSize = ps
        '                e.PageSettings.PaperSize = ps
        '                Exit For
        '            End If
        '        Next

        '        With PrintDocument1.DefaultPageSettings.Margins
        '            .Left = 5  '30
        '            .Right = 5   '30
        '            .Top = 20  ' 30
        '            .Bottom = 30
        '            LMargin = .Left
        '            RMargin = .Right
        '            TMargin = .Top
        '            BMargin = .Bottom
        '        End With

        '        Exit For
        '    End If
        'Next

        '  If PpSzSTS = False Then
        'Dim pkCustomSize1 As New System.Drawing.Printing.PaperSize("PAPER 9X12", 900, 1200)
        'PrintDocument1.PrinterSettings.DefaultPageSettings.PaperSize = pkCustomSize1
        'PrintDocument1.DefaultPageSettings.PaperSize = pkCustomSize1

        For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(i)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                e.PageSettings.PaperSize = ps
                Exit For
            End If
        Next

        'With PrintDocument1.DefaultPageSettings.Margins
        '    .Left = 20 ' 65
        '    .Right = 40
        '    .Top = 30
        '    .Bottom = 25
        '    LMargin = .Left
        '    RMargin = .Right
        '    TMargin = .Top
        '    BMargin = .Bottom
        'End With
        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 10  ' 50 
            .Right = 50
            .Top = 35   '30
            .Bottom = 35 ' 30
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With
        '  End If

        'With PrintDocument1.DefaultPageSettings.Margins
        '    .Left = 5  '30
        '    .Right = 5   '30
        '    .Top = 20  ' 30
        '    .Bottom = 30
        '    LMargin = .Left
        '    RMargin = .Right
        '    TMargin = .Top
        '    BMargin = .Bottom
        'End With

        'printFont = New Font("Draft 12cpi", 10)
        'pFont = New Font("Calibri", 9, FontStyle.Regular)
        pFont = New Font("Calibri", 9, FontStyle.Regular)
        'pFont = New Font("Calibri", 10, FontStyle.Regular)

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With

        TxtHgt = 17.6   'e.Graphics.MeasureString("A", pFont).Height  ' 18  ' 20
        'TxtHgt = 17.8 ' e.Graphics.MeasureString("A", pFont).Height  ' 18  ' 20

        Erase LnAr
        Erase ClArr

        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = Val(25) : ClArr(2) = 40 : ClArr(3) = 48 : ClArr(4) = 50 : ClArr(5) = 46 : ClArr(6) = 48
        ClArr(7) = Val(25) : ClArr(8) = 50 : ClArr(9) = 52 : ClArr(10) = 46 : ClArr(11) = 48 : ClArr(12) = 44 : ClArr(13) = 60
        ClArr(14) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13))


        'ClArr(1) = Val(30) : ClArr(2) = 45 : ClArr(3) = 50 : ClArr(4) = 52 : ClArr(5) = 48 : ClArr(6) = 60
        'ClArr(7) = Val(25) : ClArr(8) = 50 : ClArr(9) = 53 : ClArr(10) = 47 : ClArr(11) = 50 : ClArr(12) = 45 : ClArr(13) = 60
        'ClArr(14) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13))

        'ClArr(1) = Val(30) : ClArr(2) = 40 : ClArr(3) = 57 : ClArr(4) = 50 : ClArr(5) = 43 : ClArr(6) = 60
        'ClArr(7) = Val(25) : ClArr(8) = 50 : ClArr(9) = 52 : ClArr(10) = 46 : ClArr(11) = 48 : ClArr(12) = 44 : ClArr(13) = 60
        'ClArr(14) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13))


        CurY = TMargin

        NoofItems_PerPage = 30

        EntryCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

        Try

            If prn_HdDt.Rows.Count > 0 Then

                '---------------------------------------------------------------------------------------------------- 
                '**********************         STOCK CALCULATION             **********************
                '----------------------------------------------------------------------------------------------------

                prn_Yrn_OpWt = 0 : prn_Yrn_RcptWt = 0 : prn_Yrn_DelvWt = 0
                prn_Yrn_ConsWt = 0 : prn_Yrn_ExShWt = 0
                prn_Yrn_TknWt = 0 : prn_Yrn_BayCnWt = 0
                prn_Yrn_RwExShWt = 0 : prn_Yrn_RwExShStNo = ""
                prn_Yrn_TranfrWt = 0 : prn_Yrn_TranfrNo = ""
                prn_Yrn_ExcSht_Wt = 0 : prn_Yrn_ExcSht_No = ""
                prn_Yrn_OpStNo = "" : prn_Yrn_RcptNo = "" : prn_Yrn_DcNo = ""

                prn_EmpBm_Op = 0 : prn_EmpBm_Rcpt = 0 : prn_EmpBm_Delv = 0 : prn_EmpBm_Cons = 0
                prn_EmpBm_OpStNo = "" : prn_EmpBm_RcptNo = "" : prn_EmpBm_DcNo = ""

                prn_EmpBg_Op = 0 : prn_EmpBg_Rcpt = 0 : prn_EmpBg_Delv = 0
                prn_EmpBg_OpStNo = "" : prn_EmpBg_RcptNo = "" : prn_EmpBg_DcNo = ""

                prn_Amt_Op = 0 : prn_Amt_Rcpt = 0 : prn_Amt_CurSet = 0
                prn_Amt_OpStNo = "" : prn_Amt_RcptNo = ""

                Cmd.Connection = Con

                Cmd.CommandText = "truncate table Temp_Statement_Yarn_Stock_Summary"
                Cmd.ExecuteNonQuery()

                Cmd.CommandText = "truncate table Temp_Statement_Other_Yarn_Stock_Summary"
                Cmd.ExecuteNonQuery()

                Stock_calulation()

                '---------------------------------------------------------------------------------------------------- 
                '**********************         HEADER             **********************
                '----------------------------------------------------------------------------------------------------

                Printing_Format10_PageHeader(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, prn_PageNo, CurY, LnAr, ClArr)

                Det_Top = CurY

                If Val(prn_PageNo) <= 1 Then

                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         WARPING DETAILS             **********************
                    '----------------------------------------------------------------------------------------------------

                    Wpm = Split(Trim(prn_HdDt.Rows(0).Item("warp_meters").ToString), ",")

                    Da1 = New SqlClient.SqlDataAdapter("select distinct(Warp_SlNo) from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' Order by Warp_SlNo", Con)
                    Dt1 = New DataTable
                    Da1.Fill(Dt1)

                    If Dt1.Rows.Count > 0 Then

                        For k = 0 To Dt1.Rows.Count - 1

                            CurY = CurY - 10

                            Da2 = New SqlClient.SqlDataAdapter("select * from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Warp_SlNo = " & Str(Val(Dt1.Rows(k).Item("Warp_SlNo").ToString)) & " Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            WrpYrd = Val(Wpm(k))

                            SNo = 0
                            TtWrpEnds = 0
                            TtWrpGrsWgt = 0 : TtWrpTrWgt = 0 : TtWrpNetWgt = 0

                            If Dt2.Rows.Count > 0 Then

                                For i = 0 To Dt2.Rows.Count - 1

                                    SNo = SNo + 1

                                    CurY = CurY + TxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + 8, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Ends_Name").ToString)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                                    TtWrpEnds = TtWrpEnds + Val(Dt2.Rows(i).Item("Ends_Name").ToString)
                                    TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                    TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                    TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)

                                Next i

                            End If

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                            CurY = CurY + TxtHgt - 10
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtWrpEnds)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        Next k

                        'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2), CurY, LMargin + ClArr(1) + ClArr(2), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), LnAr(3))

                    End If

                End If



                '---------------------------------------------------------------------------------------------------- 
                '**********************         BABY CONE DETAILS              **********************
                '----------------------------------------------------------------------------------------------------

                If Val(prn_PageNo) <= 1 Then

                    If Val(Common_Procedures.settings.StatementPrint_BabyConeDetails) = 1 Then

                        YInc = 5

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 12, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "BABYCONE DETAILS", LMargin + ClArr(1), CurY, 2, ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, p1Font)

                        CurY = CurY + TxtHgt + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)
                        CurY = CurY + YInc

                        Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1), CurY, 2, ClArr(2), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "BAGS", LMargin + ClArr(1) + ClArr(2), CurY, 2, ClArr(3), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, 2, ClArr(4), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, 2, ClArr(5) + ClArr(6) - 30, pFont)

                        CurY = CurY + TxtHgt + YInc
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)
                        CurY = CurY + TxtHgt


                        Da2 = New SqlClient.SqlDataAdapter("select * from Specification_BabyCone_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Gross_Weight <> 0 Order by sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - YInc

                            For i = 0 To Dt2.Rows.Count - 1

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + 10, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30 - 5, CurY, 1, 0, pFont)

                                'TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Bags").ToString)
                                'TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Cones").ToString)
                                'TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + YInc
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)

                        CurY = CurY + TxtHgt - YInc
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_gross_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30 - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + YInc
                        Common_Procedures.Print_To_PrintDocument(e, "Tare Weight ", LMargin + ClArr(1) + ClArr(2) + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_tare_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30 - 5, CurY, 1, 0, pFont)


                        CurY = CurY + TxtHgt + YInc
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)

                        CurY = CurY + TxtHgt - YInc
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_net_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30 - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + YInc
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)

                    End If

                End If

                '---------------------------------------------------------------------------------------------------- 
                '**********************         YARN STOCK SUMMARY             **********************
                '----------------------------------------------------------------------------------------------------


                If Val(prn_PageNo) <= 1 Or Prn_YrnStkSumm_2ndPage_STS = True Then

                    If Val(Common_Procedures.settings.StatementPrint_YarnStockSummary) = 1 Then

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK SUMMARY", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                        CurY = CurY + TxtHgt + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)
                        CurY = CurY + 10

                        Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + 2, CurY, 2, ClArr(1) + 15, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + ClArr(1) + 15, CurY, 2, ClArr(2) + ClArr(3) - 15 + ClArr(4) - 25, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 25, CurY, 2, ClArr(5), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 25, CurY, 2, ClArr(6) + 25, pFont)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)
                        CurY = CurY + TxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select * from Temp_Statement_Yarn_Stock_Summary where Weight <> 0 Order by Order_By, Mill_Name", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - 10

                            For i = Prn_YrnStkSumm_StartIndx To Dt2.Rows.Count - 1

                                If CurY >= 980 Then
                                    p1Font = New Font("Calibri", 9.5, FontStyle.Bold)
                                    CurY = CurY + TxtHgt
                                    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, p1Font)
                                    CurY = CurY + 5
                                    Prn_YrnStkSumm_2ndPage_STS = True
                                    Prn_YrnStkSumm_StartIndx = i
                                    GoTo YRNSTKSUMM_1000
                                End If

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                'Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + 7, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(Dt2.Rows(i).Item("Mill_Name").ToString), 12), LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)

                                Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 25 + ClArr(5) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                                'Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Mill_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + 5, CurY, 0, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Bags").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                                Prn_TtYSBgs = Prn_TtYSBgs + Val(Dt2.Rows(i).Item("Bags").ToString)
                                Prn_TtYSCns = Prn_TtYSCns + Val(Dt2.Rows(i).Item("Cones").ToString)
                                Prn_TtYSWgt = Prn_TtYSWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Prn_TtYSCns), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 25 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtYSWgt), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        Prn_YrnStkSumm_2ndPage_STS = False

                    End If

                End If

YRNSTKSUMM_1000:

                '---------------------------------------------------------------------------------------------------- 
                '**********************         YARN STOCK PARTICULARS              **********************
                '----------------------------------------------------------------------------------------------------

                CurY = Det_Top

                If Val(prn_PageNo) <= 1 Then

                    CurY = CurY + 3

                    PL1 = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13)

                    W1 = e.Graphics.MeasureString("Opening Bal : ", pFont).Width

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    'p1Font = New Font("Calibri", 13, FontStyle.Bold Or FontStyle.Underline)  ---  Working
                    Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                    CurY = CurY + TxtHgt + 5

                    Common_Procedures.Print_To_PrintDocument(e, "Opening Bal", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_OpWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_OpStNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No.:  " & Trim(prn_Yrn_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Rec.", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_RcptWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_RcptNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Yrn_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    If Val(Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn) = 2 Then

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Cons. Yarn", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_ConsWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_ExShWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Short Yarn", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Excess Yarn", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                    Else

                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "Yarn Taken", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_TknWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "Baby Cone", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_BayCnWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Delivery", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_DelvWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    ItmNm1 = Trim(prn_Yrn_DcNo)
                    'If Trim(ItmNm1) = "" Then
                    '    ItmNm1 = Trim(prn_DetDt.Rows(prn_DetIndx).Item("Count_Name").ToString) & " " & Trim(prn_DetDt.Rows(prn_DetIndx).Item("Count_Description").ToString) & IIf(Trim(prn_DetDt.Rows(prn_DetIndx).Item("Mill_Name").ToString) <> "", " - " & Trim(prn_DetDt.Rows(prn_DetIndx).Item("Mill_Name").ToString), "")
                    'End If
                    ItmNm2 = ""
                    If Len(ItmNm1) > 25 Then
                        For i = 25 To 1 Step -1
                            If Mid$(Trim(ItmNm1), i, 1) = " " Or Mid$(Trim(ItmNm1), i, 1) = "," Or Mid$(Trim(ItmNm1), i, 1) = "." Or Mid$(Trim(ItmNm1), i, 1) = "-" Or Mid$(Trim(ItmNm1), i, 1) = "/" Or Mid$(Trim(ItmNm1), i, 1) = "_" Or Mid$(Trim(ItmNm1), i, 1) = "(" Or Mid$(Trim(ItmNm1), i, 1) = ")" Or Mid$(Trim(ItmNm1), i, 1) = "\" Or Mid$(Trim(ItmNm1), i, 1) = "[" Or Mid$(Trim(ItmNm1), i, 1) = "]" Or Mid$(Trim(ItmNm1), i, 1) = "{" Or Mid$(Trim(ItmNm1), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 25
                        ItmNm2 = Microsoft.VisualBasic.Right(Trim(ItmNm1), Len(ItmNm1) - i)
                        ItmNm1 = Microsoft.VisualBasic.Left(Trim(ItmNm1), i - 1)
                    End If

                    If Trim(ItmNm1) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(ItmNm1), PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    If Trim(ItmNm2) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        Common_Procedures.Print_To_PrintDocument(e, Trim(ItmNm2) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    If Val(prn_Yrn_RwExShWt) <> 0 Then

                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_RwExShWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Short", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Excess", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_RwExShStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Set.No. :  " & Trim(prn_Yrn_RwExShStNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                    End If

                    If Val(prn_Yrn_TranfrWt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_TranfrWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_TranfrWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_TranfrWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_TranfrNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_TranfrNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If
                    End If

                    If Val(prn_Yrn_ExcSht_Wt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_ExcSht_Wt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Exc)", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExcSht_Wt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Sht)", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExcSht_Wt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_ExcSht_No) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_ExcSht_No) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If
                    End If

                    If Val(Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn) = 2 Then
                        Bal_Yrn_Wt = prn_Yrn_OpWt + prn_Yrn_RcptWt - prn_Yrn_DelvWt - prn_Yrn_ConsWt + prn_Yrn_ExShWt + prn_Yrn_RwExShWt + prn_Yrn_TranfrWt + prn_Yrn_ExcSht_Wt
                    Else
                        Bal_Yrn_Wt = prn_Yrn_OpWt + prn_Yrn_RcptWt - prn_Yrn_DelvWt - prn_Yrn_TknWt + prn_Yrn_BayCnWt + prn_Yrn_RwExShWt + prn_Yrn_TranfrWt + prn_Yrn_ExcSht_Wt
                    End If

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    CurY = CurY + 10
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Yarn", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Bal_Yrn_Wt), "#########0.000"), PageWidth - 5, CurY, 1, 0, p1Font)

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)


                    '----------------------------------------------------------------------------------------------------
                    '**********************      EMPTY BEAM STOCK DETAILS       **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then

                        If Val(prn_PageNo) <= 1 Then

                            CurY = CurY + TxtHgt

                            p1Font = New Font("Calibri", 11, FontStyle.Underline)
                            Common_Procedures.Print_To_PrintDocument(e, "EMPTY BEAM STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                            CurY = CurY + TxtHgt + 5

                            Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Op), PageWidth - 5, CurY, 1, 0, pFont)

                            If Trim(prn_EmpBm_OpStNo) <> "" Then
                                CurY = CurY + TxtHgt - 2
                                p1Font = New Font("Calibri", 9, FontStyle.Regular)
                                Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBm_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                            End If

                            CurY = CurY + TxtHgt

                            Common_Procedures.Print_To_PrintDocument(e, "Beams Received", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Rcpt), PageWidth - 5, CurY, 1, 0, pFont)

                            If Trim(prn_EmpBm_RcptNo) <> "" Then
                                CurY = CurY + TxtHgt - 2
                                p1Font = New Font("Calibri", 9, FontStyle.Regular)
                                Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBm_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                            End If

                            CurY = CurY + TxtHgt

                            Common_Procedures.Print_To_PrintDocument(e, "Consumed Beams", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Cons), PageWidth - 5, CurY, 1, 0, pFont)

                            CurY = CurY + TxtHgt

                            Common_Procedures.Print_To_PrintDocument(e, "Beams Delivered", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Delv), PageWidth - 5, CurY, 1, 0, pFont)

                            If Trim(prn_EmpBm_DcNo) <> "" Then
                                CurY = CurY + TxtHgt - 2
                                p1Font = New Font("Calibri", 9, FontStyle.Regular)
                                Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBm_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                            End If

                            Bal_Bms = prn_EmpBm_Op + prn_EmpBm_Rcpt - prn_EmpBm_Delv - prn_EmpBm_Cons

                            CurY = CurY + TxtHgt
                            e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                            CurY = CurY + 10
                            p1Font = New Font("Calibri", 10, FontStyle.Bold)
                            Common_Procedures.Print_To_PrintDocument(e, "Balance Beams", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bms), PageWidth - 5, CurY, 1, 0, p1Font)

                            CurY = CurY + TxtHgt + 5
                            e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                        End If

                    End If
                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         EMPTY GUNNIES STOCK DETAILS              **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_EmptyBagStockDetails) = 1 Then

                        CurY = CurY + TxtHgt + (TxtHgt \ 2)

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "EMPTY GUNNIES STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                        CurY = CurY + TxtHgt + 5

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Op), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBg_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Bags Received", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Rcpt), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBg_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If


                        CurY = CurY + TxtHgt + 2

                        Common_Procedures.Print_To_PrintDocument(e, "Bags Delivered", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Delv), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_DcNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBg_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        Bal_Bgs = prn_EmpBg_Op + prn_EmpBg_Rcpt - prn_EmpBg_Delv

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                        CurY = CurY + TxtHgt - 10
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance Bags", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bgs), PageWidth - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    End If

                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         EMPTY GUNNIES STOCK (SIMPLE)              **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_EmptyBagStockSimple) = 1 Then

                        Bal_Bgs = prn_EmpBg_Op + prn_EmpBg_Rcpt - prn_EmpBg_Delv

                        CurY = CurY + TxtHgt + 10

                        'p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Empty Gunnies", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bgs), PageWidth - 5, CurY, 1, 0, pFont)

                        CurY = CurY + 5

                    End If





                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         AMOUNT DETAILS              **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_AmountDetails) = 1 Then

                        W1 = e.Graphics.MeasureString("  Set Amount : ", pFont).Width

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "AMOUNT BALANCE DETAILS", PL1, CurY, 2, ClArr(14), p1Font)

                        CurY = CurY + TxtHgt + 5

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Bal", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Op)), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_Amt_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Amt_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Rec Amount", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Rcpt)), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_Amt_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Amt_RcptNo) & ")", PL1 + 5, CurY, 0, 0, p1Font)
                        End If


                        CurY = CurY + TxtHgt + 2

                        Common_Procedures.Print_To_PrintDocument(e, "Set Amount", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_CurSet)), PageWidth - 5, CurY, 1, 0, pFont)

                        Bal_Amt = prn_Amt_Op - prn_Amt_Rcpt + prn_Amt_CurSet

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                        CurY = CurY + TxtHgt - 10
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance ", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(Bal_Amt)), PageWidth - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    End If

                End If


                '---------------------------------------------------------------------------------------------------- 
                '**********************         SIZING DETAILS              **********************
                '----------------------------------------------------------------------------------------------------

                spFont = New Font("Calibri", 9, FontStyle.Regular)
                sTxtHgt = 17

                CurY = Det_Top

                If Val(prn_PageNo) <= 1 Or Prn_SizingDetails_2ndPage_STS = True Then

                    Da1 = New SqlClient.SqlDataAdapter("select distinct(Sizing_SlNo) from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' Order by Sizing_SlNo", Con)
                    Dt1 = New DataTable
                    Da1.Fill(Dt1)

                    If Dt1.Rows.Count > 0 Then

                        For k = 0 To Dt1.Rows.Count - 1

                            CurY = CurY - 5  ' 10

                            Da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' and Sizing_SlNo = " & Str(Val(Dt1.Rows(k).Item("Sizing_SlNo").ToString)) & " Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            If Dt2.Rows.Count > 0 Then

                                For i = Prn_SizingDetails_StartIndx To Dt2.Rows.Count - 1

                                    If (i > 0 And i Mod 38 = 0 And Prn_SizingDetails_2ndPage_STS = False) Or CurY >= 965 Then
                                        p1Font = New Font("Calibri", 9.5, FontStyle.Bold)
                                        CurY = CurY + TxtHgt + 5
                                        Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, p1Font)

                                        CurY = CurY + sTxtHgt + 5 ' 10
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(3))


                                        Prn_SizingDetails_2ndPage_STS = True
                                        Prn_SizingDetails_StartIndx = i
                                        Prn_YrnTknDet_2ndPage_STS = True
                                        GoTo SIZDET_1000
                                    End If

                                    SNo = SNo + 1

                                    CurY = CurY + sTxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Sl_No").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Beam_No").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Noof_Pcs").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Meters").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                                    Prn_TtSizBms = Prn_TtSizBms + 1
                                    Prn_TtSizGrsWgt = Prn_TtSizGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                    Prn_TtSizTrWgt = Prn_TtSizTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                    Prn_TtSizNetWgt = Prn_TtSizNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)
                                    Prn_TtSizPcs = Prn_TtSizPcs + Val(Dt2.Rows(i).Item("Noof_Pcs").ToString)
                                    Prn_TtSizMtrs = Prn_TtSizMtrs + Val(Dt2.Rows(i).Item("Meters").ToString)

                                Next i

                            End If

                            CurY = CurY + sTxtHgt + 5 ' 10
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                            CurY = CurY + sTxtHgt - 5 ' 10
                            'Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Prn_TtSizBms)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizPcs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizMtrs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)


                            CurY = CurY + sTxtHgt + 5 ' 10
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                        Next k

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(3))

                        Prn_SizingDetails_2ndPage_STS = False

                    End If

                End If

SIZDET_1000:
                '---------------------------------------------------------------------------------------------------- 
                '**********************         YARN TAKEN DETAILS              **********************
                '----------------------------------------------------------------------------------------------------

                If Val(prn_PageNo) <= 1 Or Prn_YrnTknDet_2ndPage_STS = True Then

                    If Val(Common_Procedures.settings.StatementPrint_YarnTakenDetails) = 1 Then

                        If CurY >= 955 Then   '1000
                            Prn_YrnTknDet_2ndPage_STS = True
                            GoTo YRNTKNDET_1000
                        End If

                        CurY = CurY + TxtHgt + 5 ' 10

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "YARN TAKEN DETAILS", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), p1Font)

                        CurY = CurY + sTxtHgt + 5 ' 10

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)
                        CurY = CurY + 10

                        Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) - 5, CurY, 2, ClArr(8), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) - 5, CurY, 2, ClArr(9) + ClArr(10), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "COUNT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + 2, CurY, 2, ClArr(11), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, 2, ClArr(12), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, 2, ClArr(13), pFont)

                        CurY = CurY + sTxtHgt + 5 ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)
                        CurY = CurY + sTxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select a.*, b.Count_Name, c.Mill_Name from Specification_YarnTaken_Details a INNER JOIN Count_Head b on a.Count_IdNo = b.Count_IdNo INNER JOIN Mill_Head c on a.Mill_IdNo = c.Mill_IdNo where a.company_idno = " & Str(Val(lbl_Company.Tag)) & " and a.Set_Code = '" & Trim(EntryCode) & "' Order by a.sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - sTxtHgt - 5 ' 10

                            For i = Prn_YrnTknDet_StartIndx To Dt2.Rows.Count - 1

                                If CurY >= 965 Then
                                    p1Font = New Font("Calibri", 9.5, FontStyle.Bold)
                                    CurY = CurY + TxtHgt
                                    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, p1Font)
                                    CurY = CurY + 5 ' 10
                                    Prn_YrnTknDet_2ndPage_STS = True
                                    Prn_YrnTknDet_StartIndx = i
                                    GoTo YRNTKNDET_1000
                                    'NoofDets = NoofDets + 1
                                    'Printing_Format9_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, False)
                                    'e.HasMorePages = True
                                    'Return
                                End If

                                SNo = SNo + 1

                                CurY = CurY + sTxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) - 2, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Mill_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) - 7, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Count_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + 15, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                            Next i

                        End If

                        CurY = CurY + sTxtHgt + 5  ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                        CurY = CurY + sTxtHgt - 5  '10
                        Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                        'Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_bags").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_yarn_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + sTxtHgt + 5  ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                        Prn_YrnTknDet_2ndPage_STS = False

                    End If

                End If

                '-------------------------------------------------------------------------------------------------
                '**********************         PICK UP %             **********************
                '-------------------------------------------------------------------------------------------------
                PW1 = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5)

                'If Val(prn_PageNo) <= 1 Then

                '    If Val(Common_Procedures.settings.StatementPrint_PickUp_Percentage) = 1 Then

                '        CurY = CurY + TxtHgt + 10

                '        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                '        Common_Procedures.Print_To_PrintDocument(e, "Pickup % ", PL1 + 5, CurY, 0, 0, p1Font)
                '        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 12, CurY, 0, 0, pFont)
                '        If Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString) <> 0 Then
                '            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString), "#########0.00"), PL1 + W1 + 18, CurY, 0, 0, p1Font)
                '        Else
                '            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("pickup_percentage").ToString), "#########0.00"), PL1 + W1 + 18, CurY, 0, 0, p1Font)
                '        End If


                '        CurY = CurY + 5

                '    End If

                'End If
                '-------------------------------------------------------------------------------------------------
                '**********************         ELONGATION UP %             **********************
                '-------------------------------------------------------------------------------------------------

                'If Val(prn_PageNo) <= 1 Then

                '    If Val(Common_Procedures.settings.StatementPrint_Elongation_Percentage) = 1 Then

                '        CurY = CurY + TxtHgt + 10

                '        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                '        Common_Procedures.Print_To_PrintDocument(e, "Elongation % ", PL1 + 5, CurY, 0, 0, p1Font)
                '        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 12, CurY, 0, 0, pFont)
                '        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("elongation_percentage").ToString), "#########0.00"), PL1 + W1 + 18, CurY, 0, 0, p1Font)

                '        CurY = CurY + 5

                '    End If

                'End If
YRNTKNDET_1000:

                '---------------------------------------------------------------------------------------------------- 
                '**********************         FOOTER             **********************
                '----------------------------------------------------------------------------------------------------

                Printing_Format10_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, True)

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

        If Prn_YrnStkSumm_2ndPage_STS = True Or Prn_SizingDetails_2ndPage_STS = True Or Prn_YrnTknDet_2ndPage_STS = True Then
            Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(prn_PageNo)), PageWidth - 10, TMargin - TxtHgt, 1, 0, pFont)
            e.HasMorePages = True

        Else
            e.HasMorePages = False

        End If

    End Sub

    Private Sub Printing_Format10_PageHeader(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim p1Font As Font
        Dim Cmp_Name As String, Cmp_Add1 As String, Cmp_Add2 As String
        Dim Cmp_PhNo As String, Cmp_GSTTinNo As String, Cmp_CstNo As String
        Dim strHeight As Single
        Dim C1 As Single, C2 As Single, C3 As Single, C4 As Single
        Dim W1 As Single, W2 As Single, W3 As Single
        Dim ExcSht_Str As String
        Dim Bal_Bms As Integer = 0
        Dim YInc As Single = 0
        Dim MilNm1 As String, MilNm2 As String
        Dim I As Integer = 0

        PageNo = PageNo + 1

        CurY = TMargin

        If PageNo > 1 Then
            Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(PageNo)), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
        End If

        'da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' Order by sl_no", Con)
        'da2.Fill(dt2)
        'If dt2.Rows.Count > 30 Then
        '    Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(PageNo)), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
        'End If
        'dt2.Clear()

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY

        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
        Cmp_PhNo = "" : Cmp_GSTTinNo = "" : Cmp_CstNo = ""

        If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            Cmp_Name = Replace(Cmp_Name, Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString), "")
            Cmp_Add1 = Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString)
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        Else
            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        End If

        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = "PHONE NO.:" & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString) <> "" Then
            Cmp_GSTTinNo = "GSTIN : " & prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString
        End If
        'If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
        '    Cmp_CstNo = "CST NO.: " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
        'End If


        If Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) <> "UNACCOUNT" Then

            CurY = CurY + TxtHgt - 10
            p1Font = New Font("Calibri", 18, FontStyle.Bold)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
                p1Font = New Font("Calibri", 14, FontStyle.Bold)
                CurY = CurY + strHeight
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1, LMargin, CurY, 2, PrintWidth, p1Font)
                strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height
                CurY = CurY + strHeight
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont)

            Else
                CurY = CurY + strHeight
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1 & " " & Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont)

            End If
            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, pFont)
            CurY = CurY + TxtHgt - 5
            Common_Procedures.Print_To_PrintDocument(e, Cmp_GSTTinNo, LMargin + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_CstNo, PageWidth - 10, CurY, 1, 0, pFont)

            CurY = CurY + TxtHgt + 5  ' 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

        End If
        LnAr(2) = CurY

        If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
            C1 = Val(ClAr(1)) + Val(ClAr(2)) + Val(ClAr(3)) + Val(ClAr(4)) + Val(ClAr(5)) + Val(ClAr(6)) + Val(ClAr(7)) + Val(ClAr(8))
            C2 = 220
            'C3 = 200
            C4 = PageWidth - (LMargin + C1 + C2)

        Else

            C1 = 470 ' Val(ClAr(1)) + Val(ClAr(2)) + Val(ClAr(3)) + Val(ClAr(4)) + Val(ClAr(5)) + Val(ClAr(6)) + Val(ClAr(7))
            C2 = 315 ' Val(ClAr(8)) + Val(ClAr(9)) + Val(ClAr(10)) + Val(ClAr(11)) + Val(ClAr(12)) + Val(ClAr(13))
            C3 = PageWidth - (LMargin + C1 + C2)
            C4 = 0

        End If

        W1 = e.Graphics.MeasureString("Average Count : ", pFont).Width
        W2 = e.Graphics.MeasureString("Tape Length : ", pFont).Width
        W3 = e.Graphics.MeasureString("Consumed Rolls  : ", pFont).Width


        Try

            If Val(PageNo) <= 1 Then



                MilNm1 = Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString)
                MilNm2 = ""
                If Len(MilNm1) > 15 Then
                    For I = 15 To 1 Step -1
                        If Mid$(Trim(MilNm1), I, 1) = " " Or Mid$(Trim(MilNm1), I, 1) = "," Or Mid$(Trim(MilNm1), I, 1) = "." Or Mid$(Trim(MilNm1), I, 1) = "-" Or Mid$(Trim(MilNm1), I, 1) = "/" Or Mid$(Trim(MilNm1), I, 1) = "_" Or Mid$(Trim(MilNm1), I, 1) = "(" Or Mid$(Trim(MilNm1), I, 1) = ")" Or Mid$(Trim(MilNm1), I, 1) = "\" Or Mid$(Trim(MilNm1), I, 1) = "[" Or Mid$(Trim(MilNm1), I, 1) = "]" Or Mid$(Trim(MilNm1), I, 1) = "{" Or Mid$(Trim(MilNm1), I, 1) = "}" Then Exit For
                    Next I
                    If I = 0 Then I = 15
                    MilNm2 = Microsoft.VisualBasic.Right(Trim(MilNm1), Len(MilNm1) - I)
                    MilNm1 = Microsoft.VisualBasic.Left(Trim(MilNm1), I - 1)
                End If

                p1Font = New Font("Calibri", 14, FontStyle.Bold)

                CurY = CurY + TxtHgt - 5
                Common_Procedures.Print_To_PrintDocument(e, "TO : ", LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Set No", LMargin + C1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Set_No").ToString), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font)

                If Len(Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString)) > 15 Then
                    p1Font = New Font("Calibri", 8, FontStyle.Regular)
                Else
                    p1Font = New Font("Calibri", 10, FontStyle.Regular)
                End If

                Common_Procedures.Print_To_PrintDocument(e, "Mill Name", LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(MilNm1), LMargin + C1 + C2 + W2 + 25, CurY, 0, 0, p1Font)
                If Trim(MilNm2) <> "" Then
                    Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(MilNm2), 15), LMargin + C1 + C2 + W2 + 25, CurY + 12, 0, 0, p1Font)
                End If

                'If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                '    Common_Procedures.Print_To_PrintDocument(e, "Opening Rolls", LMargin + C1 + C2 + C3 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + C3 + W3 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Op), LMargin + C1 + C2 + C3 + W3 + 25, CurY, 0, 0, pFont)
                'End If

                YInc = 10
                CurY = CurY + TxtHgt
                If Len(Trim(prn_HdDt.Rows(0).Item("Ledger_MainName").ToString)) <= 30 Then
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                ElseIf Len(Trim(prn_HdDt.Rows(0).Item("Ledger_MainName").ToString)) <= 35 Then
                    p1Font = New Font("Calibri", 9, FontStyle.Bold)
                Else
                    p1Font = New Font("Calibri", 8, FontStyle.Regular)
                End If

                Common_Procedures.Print_To_PrintDocument(e, "     " & "M/S." & prn_HdDt.Rows(0).Item("Ledger_MainName").ToString, LMargin + 10, CurY, 0, 0, p1Font)

                Common_Procedures.Print_To_PrintDocument(e, "DATE", LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Set_Date").ToString)), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Ends_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)
                'If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                '    If Trim(prn_EmpBm_OpStNo) <> "" Then
                '        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                '        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBm_OpStNo) & ")", LMargin + C1 + C2 + C3 + 10 + 10, CurY, 0, 0, p1Font)
                '        'Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + C3 + W3 + 10, CurY, 0, 0, pFont)
                '        'Common_Procedures.Print_To_PrintDocument(e, "", LMargin + C1 + C2 + C3 + W3 + 25, CurY, 0, 0, pFont)
                '    End If
                ' End If

                YInc = 20

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address1").ToString, LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Count Name", LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Count_Name").ToString), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Tape Length", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("tape_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)

                'If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                '    Common_Procedures.Print_To_PrintDocument(e, "Rolls Received : ", LMargin + C1 + C2 + C3 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + C3 + W3 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Rcpt), LMargin + C1 + C2 + C3 + W3 + 25, CurY, 0, 0, pFont)
                'End If

                YInc = 30

                If Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString) >= 0 Then
                    ExcSht_Str = "Excess Yarn"
                    'ExcSht_Str = "Excess        : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                Else
                    ExcSht_Str = "Short Yarn"
                    'ExcSht_Str = "Short         : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                End If
                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address2").ToString, LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, ExcSht_Str, LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000"), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Beam Width", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Beam_Width_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)

                'If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                '    If Trim(prn_EmpBm_RcptNo) <> "" Then
                '        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                '        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBm_RcptNo) & ")", LMargin + C1 + C2 + C3 + 10 + 10, CurY, 0, 0, p1Font)
                '    End If
                'End If

                YInc = 35

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address3").ToString, LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Average Count", LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("beam_count").ToString), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Pickup %", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                If Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString) <> 0 Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString), "#########0.00"), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)
                Else
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("pickup_percentage").ToString), "#########0.00"), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)
                End If

                'If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                '    Common_Procedures.Print_To_PrintDocument(e, "Consumed Rolls", LMargin + C1 + C2 + C3 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + C3 + W3 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Cons), LMargin + C1 + C2 + C3 + W3 + 25, CurY, 0, 0, pFont)
                'End If

                YInc = 25

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address4").ToString, LMargin + 10, CurY, 0, 0, pFont)
                'If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                '    Common_Procedures.Print_To_PrintDocument(e, "Rolls Delivery", LMargin + C1 + C2 + C3 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + C3 + W3 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Delv), LMargin + C1 + C2 + C3 + W3 + 25, CurY, 0, 0, pFont)
                'End If

                CurY = CurY + TxtHgt
                If Trim(prn_HdDt.Rows(0).Item("Ledger_GSTinNo").ToString) <> "" Then
                    Common_Procedures.Print_To_PrintDocument(e, "     GSTIN : " & prn_HdDt.Rows(0).Item("Ledger_GSTinNo").ToString, LMargin + 10, CurY, 0, 0, pFont)
                End If
                'If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                '    If Trim(prn_EmpBm_DcNo) <> "" Then
                '        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                '        Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBm_DcNo) & ")", LMargin + C1 + C2 + C3 + 10 + 10, CurY, 0, 0, p1Font)
                '    End If
                'End If

                YInc = 8

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "Mark", LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("pcs_length").ToString), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)


                Common_Procedures.Print_To_PrintDocument(e, "Elongation %", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("elongation_percentage").ToString), "#########0.00"), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)



                Bal_Bms = prn_EmpBm_Op + prn_EmpBm_Rcpt - prn_EmpBm_Delv - prn_EmpBm_Cons

                YInc = 30

                CurY = CurY + TxtHgt
                'If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                '    Common_Procedures.Print_To_PrintDocument(e, "Balance Rolls", LMargin + C1 + C2 + C3 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + C3 + W3 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bms), LMargin + C1 + C2 + C3 + W3 + 25, CurY, 0, 0, pFont)
                'End If

                CurY = CurY + TxtHgt + 5  ' 10
                e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

                e.Graphics.DrawLine(Pens.Black, LMargin + C1, CurY, LMargin + C1, LnAr(2))
                e.Graphics.DrawLine(Pens.Black, LMargin + C1 + C2, CurY, LMargin + C1 + C2, LnAr(2))
                'If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                '    e.Graphics.DrawLine(Pens.Black, LMargin + C1 + C2 + C3, CurY, LMargin + C1 + C2 + C3, LnAr(2))
                'End If
            End If
            LnAr(3) = CurY

            CurY = CurY + TxtHgt - 10
            p1Font = New Font("Calibri", 12, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "WARPING DETAILS", LMargin, CurY, 2, ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), p1Font)
            Common_Procedures.Print_To_PrintDocument(e, "SIZING DETAILS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), p1Font)
            Common_Procedures.Print_To_PrintDocument(e, "PARTICULARS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY + TxtHgt, 2, ClAr(14), p1Font)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY)
            LnAr(4) = CurY

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Meter", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(4), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(5), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "BeamNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 2, ClAr(9), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 2, ClAr(10), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(11), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Pcs", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Meters", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY, 2, ClAr(13), pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(5) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub Printing_Format10_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PageHeight As Single, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal is_LastPage As Boolean)
        Dim p1Font As Font
        Dim Cmp_Name As String
        Dim LS As Single

        Try

            LS = PageHeight - 135

            'If CurY >= LS Then
            '    CurY = CurY + TxtHgt
            'Else
            CurY = LS
            'End If

            'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            'LnAr(6) = CurY

            If Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) <> "UNACCOUNT" Then

                If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
                    Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
                    Cmp_Name = Replace(Cmp_Name, Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString), "")

                Else
                    Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString

                End If

                If Len(Trim(Cmp_Name)) > 25 Then
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                Else
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                End If

                CurY = CurY + 10
                Common_Procedures.Print_To_PrintDocument(e, "For " & Cmp_Name, PageWidth - 15, CurY, 1, 0, p1Font)

            End If

            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            'CurY = CurY + TxtHgt
            'Common_Procedures.Print_To_PrintDocument(e, "Prepared By", LMargin + 20, CurY, 0, 0, pFont)
            'Common_Procedures.Print_To_PrintDocument(e, "Checked By", LMargin + 300, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Authorised Signatory", PageWidth - 15, CurY, 1, 0, pFont)
            CurY = CurY + TxtHgt + 20

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(7) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(1))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(7), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(7), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(1))

            p1Font = New Font("Calibri", 7, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "Software by TSOFT SOLUTIONS, Tirupur. Ph : 8508403222, 0421-4337417", LMargin + 8, CurY + 5, 0, 0, p1Font)

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub
    Private Sub btn_Print_Cancel_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btn_Print_Cancel.Click
        btn_print_Close_Click(sender, e)
    End Sub

    Private Sub btn_print_Close_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btn_Close_Print.Click
        pnl_Back.Enabled = True
        pnl_Print.Visible = False
    End Sub


    Private Sub btn_Print_Ordinary_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btn_Print_Ordinary.Click
        prn_Status = 1
        vPrntOnly_PageNo = 0
        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1034" Then '---- Asia Sizing (Palladam)
            StmtPrintFrmt = "FORMAT-2"
        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then '---- Asia Sizing (Palladam)
            StmtPrintFrmt = "FORMAT-3"
        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1282" Then '---- BRT Sizing (Somanur)
            StmtPrintFrmt = Trim(UCase(Common_Procedures.settings.StatementPrint_Format))
            vPrntOnly_PageNo = 2
        Else
            StmtPrintFrmt = Trim(UCase(Common_Procedures.settings.StatementPrint_Format))
        End If

        printing_statement()
        If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1282" Then '---- BRT Sizing (Somanur)
            btn_print_Close_Click(sender, e)
        End If

    End Sub

    Private Sub btn_Print_Preprint_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btn_Print_Preprint.Click

        vPrntOnly_PageNo = 0
        prn_Status = 2
        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1034" Then '---- Asia Sizing (Palladam)
            StmtPrintFrmt = "FORMAT-8"
        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1282" Then '---- BRT Sizing (Somanur)
            StmtPrintFrmt = Trim(UCase(Common_Procedures.settings.StatementPrint_Format))
            vPrntOnly_PageNo = 1
        Else
            StmtPrintFrmt = Trim(UCase(Common_Procedures.settings.StatementPrint_Format))
        End If

        printing_statement()
        If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1282" Then '---- BRT Sizing (Somanur)
            btn_print_Close_Click(sender, e)
        End If

    End Sub

    Private Sub btn_A4_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btn_A4.Click

        vPrntOnly_PageNo = 0
        prn_Status = 2
        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then '----wintrack
            StmtPrintFrmt = "FORMAT-13"
        Else
            StmtPrintFrmt = Trim(UCase(Common_Procedures.settings.StatementPrint_Format))
        End If

        printing_statement()
        btn_print_Close_Click(sender, e)

    End Sub

    Private Sub cbo_Meters_Yards_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Meters_Yards.GotFocus
        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "", "", "", "")
    End Sub

    Private Sub cbo_Meters_Yards_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Meters_Yards.KeyDown
        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Meters_Yards, txt_Ends, txt_WarpMeters, "", "", "", "")
    End Sub

    Private Sub cbo_Meters_Yards_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Meters_Yards.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Meters_Yards, txt_WarpMeters, "", "", "", "")
    End Sub

    Private Sub cbo_Meters_Yards_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Meters_Yards.TextChanged
        If Trim(UCase(cbo_Meters_Yards.Text)) = "YARDS" Then
            lbl_Meters_Yards.Text = "Warp Yards"
        Else
            lbl_Meters_Yards.Text = "Warp Meters"
        End If
        BeamCount_Calculation()
    End Sub

    Private Sub txt_WgtEmYBag_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txt_WgtEmYBag.KeyDown
        If e.KeyCode = 40 Then SendKeys.Send("{Tab}") ' SendKeys.Send("{TAB}")
        If e.KeyCode = 38 Then
            dgv_BabyConeDetails.Focus()
            dgv_BabyConeDetails.CurrentCell = dgv_BabyConeDetails.Rows(0).Cells(1)
            dgv_BabyConeDetails.CurrentCell.Selected = True
        End If
    End Sub

    Private Sub txt_WgtEmYBag_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txt_WgtEmYBag.TextChanged
        BabyCone_TareWeight_Calculation(1)
    End Sub

    Private Sub txt_WgtEmYCone_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txt_WgtEmYCone.TextChanged

        BabyCone_TareWeight_Calculation(1)
    End Sub

    Private Sub BabyCone_TareWeight_Calculation(ByVal MustCal As Integer)
        Dim BagWgt As Double = 0
        Dim ConeWgt As Double = 0
        Dim TareWgt As Double = 0

        With dgv_BabyConeDetails_Total
            If Val(txt_WgtEmYBag.Text) <> 0 Or Val(txt_WgtEmYCone.Text) <> 0 Or MustCal = 1 Then
                BagWgt = Val(.Rows(0).Cells(1).Value) * Val(txt_WgtEmYBag.Text)
                ConeWgt = Val(.Rows(0).Cells(2).Value) * Val(txt_WgtEmYCone.Text)
                TareWgt = BagWgt + ConeWgt

                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1102" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1163" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1144" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1282" Then
                    txt_BabyCone_TareWeight.Text = Format(Val(TareWgt), "#######0.0")
                    txt_BabyCone_TareWeight.Text = Format(Val(txt_BabyCone_TareWeight.Text), "#######0.000")
                Else
                    txt_BabyCone_TareWeight.Text = Format(Val(TareWgt), "#######0.000")
                End If

            End If
        End With
    End Sub

    Private Sub cbo_SetNo_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Grid_SetNo.GotFocus
        Dim NewCode As String
        Dim Led_ID As Integer, Cnt_ID As Integer
        Dim Condt As String
        Dim Cmp_Cond As String = ""

        NewCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

        Led_ID = Common_Procedures.Ledger_AlaisNameToIdNo(Con, cbo_Ledger.Text)

        Cnt_ID = Common_Procedures.Count_NameToIdNo(Con, cbo_CountName.Text)

        Cmp_Cond = ""
        If Val(Common_Procedures.settings.StatementPrint_InStock_Combine_AllCompany) = 0 Then
            Cmp_Cond = "a.Company_IdNo = " & Str(Val(lbl_Company.Tag))
        End If

        Condt = "( " & Cmp_Cond & IIf(Trim(Cmp_Cond) <> "", " and ", "") & " a.Ledger_IdNo = " & Str(Val(Led_ID)) & " and a.Count_IdNo = " & Str(Val(Cnt_ID)) & " and (  (a.Baby_Weight - a.Delivered_Weight) > 0 or (a.setcode_forSelection IN (select z.BabyCone_setcode_forSelection from Specification_YarnTaken_Details z where z.company_idno = " & Str(Val(lbl_Company.Tag)) & " and z.Set_Code = '" & Trim(NewCode) & "') ) ) )"

        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "Stock_BabyCone_Processing_Details a", "setcode_forSelection", Condt, "(Reference_Code = '')")

        cbo_Grid_SetNo.Tag = cbo_Grid_SetNo.Text

    End Sub

    Private Sub cbo_setno_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Grid_SetNo.KeyDown
        Dim NewCode As String
        Dim Led_ID As Integer, Cnt_ID As Integer
        Dim Condt As String
        Dim Cmp_Cond As String


        NewCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

        Led_ID = Common_Procedures.Ledger_AlaisNameToIdNo(Con, cbo_Ledger.Text)

        Cnt_ID = Common_Procedures.Count_NameToIdNo(Con, cbo_CountName.Text)

        Cmp_Cond = ""
        If Val(Common_Procedures.settings.StatementPrint_InStock_Combine_AllCompany) = 0 Then
            Cmp_Cond = "a.Company_IdNo = " & Str(Val(lbl_Company.Tag))
        End If

        Condt = "( " & Cmp_Cond & IIf(Trim(Cmp_Cond) <> "", " and ", "") & " a.Ledger_IdNo = " & Str(Val(Led_ID)) & " and a.Count_IdNo = " & Str(Val(Cnt_ID)) & " and (  (a.Baby_Weight - a.Delivered_Weight) > 0 or (a.setcode_forSelection IN (select z.BabyCone_setcode_forSelection from Specification_YarnTaken_Details z where z.company_idno = " & Str(Val(lbl_Company.Tag)) & " and z.Set_Code = '" & Trim(NewCode) & "') ) ) )"

        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Grid_SetNo, Nothing, Nothing, "Stock_BabyCone_Processing_Details", "setcode_forSelection", Condt, "(Reference_Code = '')")
        With dgv_YarnTakenDetails

            If (e.KeyValue = 38 And cbo_Grid_SetNo.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                .CurrentCell.Selected = True
            End If

            If (e.KeyValue = 40 And cbo_Grid_SetNo.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End If

        End With
    End Sub

    Private Sub cbo_setno_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Grid_SetNo.KeyPress
        Dim NewCode As String
        Dim Led_ID As Integer, Cnt_ID As Integer
        Dim Condt As String
        Dim Cmp_Cond As String = ""

        NewCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

        Led_ID = Common_Procedures.Ledger_AlaisNameToIdNo(Con, cbo_Ledger.Text)

        Cnt_ID = Common_Procedures.Count_NameToIdNo(Con, cbo_CountName.Text)

        Cmp_Cond = ""
        If Val(Common_Procedures.settings.StatementPrint_InStock_Combine_AllCompany) = 0 Then
            Cmp_Cond = "a.Company_IdNo = " & Str(Val(lbl_Company.Tag))
        End If

        Condt = "( " & Cmp_Cond & IIf(Trim(Cmp_Cond) <> "", " and ", "") & " a.Ledger_IdNo = " & Str(Val(Led_ID)) & " and a.Count_IdNo = " & Str(Val(Cnt_ID)) & " and (  (a.Baby_Weight - a.Delivered_Weight) > 0 or (a.setcode_forSelection IN (select z.BabyCone_setcode_forSelection from Specification_YarnTaken_Details z where z.company_idno = " & Str(Val(lbl_Company.Tag)) & " and z.Set_Code = '" & Trim(NewCode) & "') ) ) )"

        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Grid_SetNo, Nothing, "Stock_BabyCone_Processing_Details a", "setcode_forSelection", Condt, "(Reference_Code = '')")
        If Asc(e.KeyChar) = 13 Then
            With dgv_YarnTakenDetails
                .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_SetNo.Text)
                .Focus()
                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex + 1)
                .CurrentCell.Selected = True
            End With
        End If
    End Sub

    Private Sub cbo_Grid_SetNo_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Grid_SetNo.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Grid_SetNo.Visible Then
                If IsNothing(dgv_YarnTakenDetails.CurrentCell) Then Exit Sub
                With dgv_YarnTakenDetails
                    If Val(cbo_Grid_SetNo.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 3 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_SetNo.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub

    Private Sub cbo_Type_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Type.GotFocus
        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "", "", "", "")
    End Sub

    Private Sub cbo_Type_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Type.KeyDown
        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Type, txt_Remarks, cbo_Ledger, "", "", "", "")
    End Sub

    Private Sub cbo_Type_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Type.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Type, cbo_Ledger, "", "", "", "")
    End Sub

    Private Sub cbo_Type_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Type.LostFocus
        If Trim(UCase(cbo_Type.Text)) = "DIRECT" Then

            dgv_WarpingDetails_Set1.AllowUserToAddRows = False
            dgv_WarpingDetails_Set2.AllowUserToAddRows = False
            dgv_WarpingDetails_Set3.AllowUserToAddRows = False
            dgv_YarnTakenDetails.AllowUserToAddRows = True
            dgv_BabyConeDetails.AllowUserToAddRows = True
            dgv_WarpingDetails_Set1.ReadOnly = False
            dgv_WarpingDetails_Set2.ReadOnly = False
            dgv_WarpingDetails_Set3.ReadOnly = False
            dgv_YarnTakenDetails.ReadOnly = False
            dgv_BabyConeDetails.ReadOnly = False
            cbo_MillName.Enabled = True
            cbo_CountName.Enabled = True
            'cbo_BeamWidth.Enabled = True
            cbo_Meters_Yards.Enabled = True
            txt_WarpMeters.Enabled = True
            'txt_TapeLength.Enabled = True
            'txt_PcsLength.Enabled = True
            'txt_Ends.Enabled = True
            txt_WgtEmYBag.Enabled = True
            txt_WgtEmYCone.Enabled = True
            txt_BabyCone_TareWeight.Enabled = True
            txt_RewindingCones.Enabled = True
            txt_RwExcSht.Enabled = True
            cbo_Rw_MillName.Enabled = True
            chk_RewindingStatus.Enabled = True

            btn_Selection.Enabled = False

        Else

            btn_Selection.Enabled = True
            dgv_WarpingDetails_Set1.AllowUserToAddRows = False
            dgv_WarpingDetails_Set2.AllowUserToAddRows = False
            dgv_WarpingDetails_Set3.AllowUserToAddRows = False
            dgv_YarnTakenDetails.AllowUserToAddRows = False
            dgv_BabyConeDetails.AllowUserToAddRows = False
            dgv_WarpingDetails_Set1.ReadOnly = True
            dgv_WarpingDetails_Set2.ReadOnly = True
            dgv_WarpingDetails_Set3.ReadOnly = True
            dgv_YarnTakenDetails.ReadOnly = True
            dgv_BabyConeDetails.ReadOnly = True
            cbo_MillName.Enabled = False
            cbo_CountName.Enabled = False
            '  cbo_BeamWidth.Enabled = False
            cbo_Meters_Yards.Enabled = False
            txt_WarpMeters.Enabled = False
            'txt_TapeLength.Enabled = False
            'txt_PcsLength.Enabled = False
            'txt_Ends.Enabled = False
            txt_WgtEmYBag.Enabled = False
            txt_WgtEmYCone.Enabled = False
            txt_BabyCone_TareWeight.Enabled = False
            txt_RewindingCones.Enabled = False
            txt_RwExcSht.Enabled = False
            cbo_Rw_MillName.Enabled = False
            chk_RewindingStatus.Enabled = False
        End If
    End Sub

    Private Sub btn_Selection_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_Selection.Click
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim i As Integer, j As Integer, n As Integer, SNo As Integer
        Dim LedIdNo As Integer
        Dim NewCode As String
        Dim Ent_Rate As Single = 0
        Dim Ent_Wgt As Single = 0
        Dim Ent_Pcs As Single = 0
        Dim NR As Single = 0

        LedIdNo = Common_Procedures.Ledger_AlaisNameToIdNo(Con, cbo_Ledger.Text)

        If LedIdNo = 0 Then
            MessageBox.Show("Invalid Party Name", "DOES NOT SELECT PARTY NAME...", MessageBoxButtons.OK, MessageBoxIcon.Error)
            If cbo_Ledger.Enabled And cbo_Ledger.Visible Then cbo_Ledger.Focus()
            Exit Sub
        End If


        NewCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

        With dgv_Selection


            .Rows.Clear()
            SNo = 0

            Da = New SqlClient.SqlDataAdapter("select a.*  from Warping_Head a    where  a.Set_Code = '" & Trim(NewCode) & "' and a.Ledger_Idno = " & Str(Val(LedIdNo)) & "  order by a.Warp_Date, a.for_orderby, a.Warp_No", Con)
            Dt1 = New DataTable
            Da.Fill(Dt1)

            If Dt1.Rows.Count > 0 Then

                For i = 0 To Dt1.Rows.Count - 1

                    n = .Rows.Add()

                    Ent_Rate = 0



                    SNo = SNo + 1
                    .Rows(n).Cells(0).Value = Val(SNo)
                    .Rows(n).Cells(1).Value = Dt1.Rows(i).Item("Warp_No").ToString
                    .Rows(n).Cells(2).Value = Format(Convert.ToDateTime(Dt1.Rows(i).Item("Warp_Date").ToString), "dd-MM-yyyy")
                    .Rows(n).Cells(3).Value = Common_Procedures.Mill_IdNoToName(Con, Val(Dt1.Rows(i).Item("Mill_IdNo").ToString))
                    .Rows(n).Cells(4).Value = Common_Procedures.Count_IdNoToName(Con, Val(Dt1.Rows(i).Item("Count_IdNo").ToString))
                    .Rows(n).Cells(5).Value = Common_Procedures.BeamWidth_IdNoToName(Con, Val(Dt1.Rows(i).Item("Beam_Width_IdNo").ToString))
                    .Rows(n).Cells(6).Value = (Dt1.Rows(i).Item("warp_meters").ToString)
                    ' .Rows(n).Cells(7).Value = Dt1.Rows(i).Item("Ends_Name").ToString
                    '.Rows(n).Cells(8).Value = Val(Dt1.Rows(i).Item("tape_length").ToString)
                    '.Rows(n).Cells(9).Value = Val(Dt1.Rows(i).Item("pcs_length").ToString)
                    .Rows(n).Cells(10).Value = "1"


                    .Rows(n).Cells(11).Value = (Dt1.Rows(i).Item("Total_Warping_Beams").ToString)
                    .Rows(n).Cells(12).Value = Format(Val(Dt1.Rows(i).Item("total_warping_ends").ToString), "############0")
                    .Rows(n).Cells(13).Value = Format(Val(Dt1.Rows(i).Item("total_warping_gross_weight").ToString), "############0.000")
                    .Rows(n).Cells(14).Value = Format(Val(Dt1.Rows(i).Item("total_warping_Tare_weight").ToString), "############0.000")
                    .Rows(n).Cells(15).Value = Format(Val(Dt1.Rows(i).Item("total_warping_net_weight").ToString), "############0.000")
                    .Rows(n).Cells(16).Value = Format(Val(Dt1.Rows(i).Item("excess_short_yarn").ToString), "#########0.00")
                    .Rows(n).Cells(17).Value = Dt1.Rows(i).Item("beam_count").ToString
                    .Rows(n).Cells(18).Value = Dt1.Rows(i).Item("Meters_Yards").ToString
                    .Rows(n).Cells(19).Value = Dt1.Rows(i).Item("Warp_Code").ToString
                    .Rows(n).Cells(20).Value = Dt1.Rows(i).Item("rw_status").ToString
                    .Rows(n).Cells(21).Value = Dt1.Rows(i).Item("rw_cones").ToString
                    .Rows(n).Cells(22).Value = Common_Procedures.Mill_IdNoToName(Con, Dt1.Rows(i).Item("rw_millidno").ToString)
                    .Rows(n).Cells(23).Value = Dt1.Rows(i).Item("Rw_ExcessShort").ToString
                    .Rows(n).Cells(24).Value = Format(Val(Dt1.Rows(i).Item("EmptyBag_weight").ToString), "#########0.000")
                    .Rows(n).Cells(25).Value = Format(Val(Dt1.Rows(i).Item("total_baby_tare_weight").ToString), "#########0.000")
                    .Rows(n).Cells(26).Value = Format(Val(Dt1.Rows(i).Item("EmptyCone_weight").ToString), "#########0.000")
                    .Rows(n).Cells(27).Value = Format(Val(Dt1.Rows(i).Item("total_baby_net_weight").ToString), "#########0.000")
                    .Rows(n).Cells(28).Value = Dt1.Rows(i).Item("Remarks").ToString
                    For j = 0 To .ColumnCount - 1
                        .Rows(i).Cells(j).Style.ForeColor = Color.Red
                    Next

                Next

            End If
            Dt1.Clear()


            Da = New SqlClient.SqlDataAdapter("select a.*   from Warping_Head a     where  a.Set_Code = '' and a.Ledger_Idno = " & Str(Val(LedIdNo)) & "  order by a.Warp_Date, a.for_orderby, a.Warp_No", Con)
            Dt1 = New DataTable
            NR = Da.Fill(Dt1)

            If Dt1.Rows.Count > 0 Then

                For i = 0 To Dt1.Rows.Count - 1

                    n = .Rows.Add()

                    SNo = SNo + 1
                    .Rows(n).Cells(0).Value = Val(SNo)

                    .Rows(n).Cells(1).Value = Dt1.Rows(i).Item("Warp_No").ToString
                    .Rows(n).Cells(2).Value = Format(Convert.ToDateTime(Dt1.Rows(i).Item("Warp_Date").ToString), "dd-MM-yyyy")
                    .Rows(n).Cells(3).Value = Common_Procedures.Mill_IdNoToName(Con, Val(Dt1.Rows(i).Item("Mill_IdNo").ToString))
                    .Rows(n).Cells(4).Value = Common_Procedures.Count_IdNoToName(Con, Val(Dt1.Rows(i).Item("Count_IdNo").ToString))
                    .Rows(n).Cells(5).Value = Common_Procedures.BeamWidth_IdNoToName(Con, Val(Dt1.Rows(i).Item("Beam_Width_IdNo").ToString))
                    .Rows(n).Cells(6).Value = (Dt1.Rows(i).Item("warp_meters").ToString)
                    ' .Rows(n).Cells(7).Value = Dt1.Rows(i).Item("Ends_Name").ToString
                    ' .Rows(n).Cells(8).Value = Val(Dt1.Rows(i).Item("tape_length").ToString)
                    ' .Rows(n).Cells(9).Value = Val(Dt1.Rows(i).Item("pcs_length").ToString)
                    .Rows(n).Cells(10).Value = ""

                    .Rows(n).Cells(11).Value = (Dt1.Rows(i).Item("Total_Warping_Beams").ToString)
                    .Rows(n).Cells(12).Value = Format(Val(Dt1.Rows(i).Item("total_warping_ends").ToString), "############0")
                    .Rows(n).Cells(13).Value = Format(Val(Dt1.Rows(i).Item("total_warping_gross_weight").ToString), "############0.000")
                    .Rows(n).Cells(14).Value = Format(Val(Dt1.Rows(i).Item("total_warping_Tare_weight").ToString), "############0.000")
                    .Rows(n).Cells(15).Value = Format(Val(Dt1.Rows(i).Item("total_warping_net_weight").ToString), "############0.000")
                    .Rows(n).Cells(16).Value = Format(Val(Dt1.Rows(i).Item("excess_short_yarn").ToString), "#########0.00")
                    .Rows(n).Cells(17).Value = Dt1.Rows(i).Item("beam_count").ToString
                    .Rows(n).Cells(18).Value = Dt1.Rows(i).Item("Meters_Yards").ToString
                    .Rows(n).Cells(19).Value = Dt1.Rows(i).Item("Warp_Code").ToString
                    .Rows(n).Cells(20).Value = Dt1.Rows(i).Item("rw_status").ToString
                    .Rows(n).Cells(21).Value = Dt1.Rows(i).Item("rw_cones").ToString
                    .Rows(n).Cells(22).Value = Common_Procedures.Mill_IdNoToName(Con, Dt1.Rows(i).Item("rw_millidno").ToString)
                    .Rows(n).Cells(23).Value = Dt1.Rows(i).Item("Rw_ExcessShort").ToString
                    .Rows(n).Cells(24).Value = Format(Val(Dt1.Rows(i).Item("EmptyBag_weight").ToString), "#########0.000")
                    .Rows(n).Cells(25).Value = Format(Val(Dt1.Rows(i).Item("total_baby_tare_weight").ToString), "#########0.000")
                    .Rows(n).Cells(26).Value = Format(Val(Dt1.Rows(i).Item("EmptyCone_weight").ToString), "#########0.000")
                    .Rows(n).Cells(27).Value = Format(Val(Dt1.Rows(i).Item("total_baby_net_weight").ToString), "#########0.000")
                    .Rows(n).Cells(28).Value = Dt1.Rows(i).Item("Remarks").ToString
                Next

            End If
            Dt1.Clear()

        End With

        pnl_Selection.Visible = True
        pnl_Back.Enabled = False
        dgv_Selection.Focus()

    End Sub

    Private Sub dgv_Selection_CellClick(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgv_Selection.CellClick
        Select_Piece(e.RowIndex)
    End Sub

    Private Sub Select_Piece(ByVal RwIndx As Integer)
        'Dim i As Integer

        'With dgv_Selection

        '    If .RowCount > 0 And RwIndx >= 0 Then

        '        .Rows(RwIndx).Cells(10).Value = (Val(.Rows(RwIndx).Cells(10).Value) + 1) Mod 2

        '        If Val(.Rows(RwIndx).Cells(10).Value) = 1 Then

        '            For i = 0 To .ColumnCount - 1
        '                .Rows(RwIndx).Cells(i).Style.ForeColor = Color.Red
        '            Next

        '        Else
        '            .Rows(RwIndx).Cells(10).Value = ""

        '            For i = 0 To .ColumnCount - 1
        '                .Rows(RwIndx).Cells(i).Style.ForeColor = Color.Black
        '            Next

        '        End If

        '    End If

        'End With

        Dim i As Integer = 0
        Dim j As Integer = 0

        Try

            With dgv_Selection

                If .RowCount > 0 And RwIndx >= 0 Then

                    For i = 0 To .Rows.Count - 1
                        .Rows(i).Cells(10).Value = ""
                        For j = 0 To .Columns.Count - 1
                            .Rows(i).Cells(j).Style.ForeColor = Color.Black
                        Next
                    Next

                    .Rows(RwIndx).Cells(10).Value = 1

                    For i = 0 To .ColumnCount - 1
                        .Rows(RwIndx).Cells(i).Style.ForeColor = Color.Red
                    Next

                    Close_Warping_Selection()

                End If

            End With

        Catch ex As Exception
            MessageBox.Show(ex.Message, "ERROR WHILE SELECT INVOICE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub

    Private Sub dgv_Selection_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dgv_Selection.KeyDown
        Dim n As Integer

        On Error Resume Next

        If e.KeyCode = Keys.Enter Or e.KeyCode = Keys.Space Then
            If dgv_Selection.CurrentCell.RowIndex >= 0 Then

                n = dgv_Selection.CurrentCell.RowIndex

                Select_Piece(n)

                e.Handled = True

            End If
        End If

    End Sub

    Private Sub btn_Close_Selection_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btn_Close_Selection.Click
        Close_Warping_Selection()
    End Sub

    Private Sub Close_Warping_Selection()
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim n As Integer = 0
        Dim sno As Integer = 0
        Dim i As Integer = 0
        Dim j As Integer = 0
        Dim NewCode As String = ""

        dgv_WarpingDetails_Set1.Rows.Clear()
        dgv_WarpingDetails_Set2.Rows.Clear()
        dgv_WarpingDetails_Set3.Rows.Clear()
        dgv_BabyConeDetails.Rows.Clear()
        dgv_YarnTakenDetails.Rows.Clear()
        For i = 0 To dgv_Selection.RowCount - 1

            If Val(dgv_Selection.Rows(i).Cells(10).Value) = 1 Then

                lbl_WarpNo.Text = dgv_Selection.Rows(i).Cells(1).Value
                lbl_WarpDate.Text = dgv_Selection.Rows(i).Cells(2).Value
                cbo_MillName.Text = dgv_Selection.Rows(i).Cells(3).Value
                cbo_CountName.Text = dgv_Selection.Rows(i).Cells(4).Value
                cbo_BeamWidth.Text = dgv_Selection.Rows(i).Cells(5).Value
                txt_WarpMeters.Text = dgv_Selection.Rows(i).Cells(6).Value

                txt_Ends.Text = dgv_Selection.Rows(i).Cells(12).Value
                '  txt_TapeLength.Text = dgv_Selection.Rows(i).Cells(8).Value
                '  txt_PcsLength.Text = dgv_Selection.Rows(i).Cells(9).Value


                lbl_Total_Warping_Beams.Text = dgv_Selection.Rows(i).Cells(11).Value
                lbl_Total_Warping_Ends.Text = dgv_Selection.Rows(i).Cells(12).Value
                lbl_Total_Warping_GrossWeight.Text = dgv_Selection.Rows(i).Cells(13).Value
                lbl_Total_Warping_TareWeight.Text = dgv_Selection.Rows(i).Cells(14).Value
                lbl_Total_Warping_NetWeight.Text = dgv_Selection.Rows(i).Cells(15).Value
                lbl_ExcessShort.Text = dgv_Selection.Rows(i).Cells(16).Value
                lbl_BeamCount.Text = dgv_Selection.Rows(i).Cells(17).Value
                cbo_Meters_Yards.Text = dgv_Selection.Rows(i).Cells(18).Value
                lbl_WarpCode.Text = dgv_Selection.Rows(i).Cells(19).Value
                txt_Remarks.Text = dgv_Selection.Rows(i).Cells(28).Value
                If Val(dgv_Selection.Rows(i).Cells(20).Value) = 1 Then
                    chk_RewindingStatus.Checked = True
                End If

                txt_RewindingCones.Text = dgv_Selection.Rows(i).Cells(21).Value
                cbo_Rw_MillName.Text = dgv_Selection.Rows(i).Cells(22).Value
                txt_RwExcSht.Text = dgv_Selection.Rows(i).Cells(23).Value
                txt_WgtEmYBag.Text = dgv_Selection.Rows(i).Cells(24).Value
                txt_BabyCone_TareWeight.Text = dgv_Selection.Rows(i).Cells(25).Value
                txt_WgtEmYCone.Text = dgv_Selection.Rows(i).Cells(26).Value
                lbl_BabyCone_NetWeight.Text = dgv_Selection.Rows(i).Cells(27).Value
                txt_Remarks.Text = dgv_Selection.Rows(i).Cells(28).Value

                Da = New SqlClient.SqlDataAdapter("select a.*   from Warping_Details a   where a.Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and a.Warp_Code = '" & Trim(dgv_Selection.Rows(i).Cells(19).Value) & "'  and a.Warp_SlNo = 1  order by a.sl_no, a.Warp_Date, a.for_orderby, a.Warp_No", Con)
                Dt1 = New DataTable
                Da.Fill(Dt1)

                If Dt1.Rows.Count > 0 Then
                    sno = 0
                    For j = 0 To Dt1.Rows.Count - 1
                        sno = sno + 1
                        n = dgv_WarpingDetails_Set1.Rows.Add()

                        dgv_WarpingDetails_Set1.Rows(n).Cells(0).Value = Val(sno)
                        dgv_WarpingDetails_Set1.Rows(n).Cells(1).Value = Dt1.Rows(j).Item("Ends_Name").ToString
                        dgv_WarpingDetails_Set1.Rows(n).Cells(2).Value = Format(Val(Dt1.Rows(j).Item("Gross_Weight").ToString), "############0.000")
                        dgv_WarpingDetails_Set1.Rows(n).Cells(3).Value = Format(Val(Dt1.Rows(j).Item("Tare_Weight").ToString), "############0.000")
                        dgv_WarpingDetails_Set1.Rows(n).Cells(4).Value = Format(Val(Dt1.Rows(j).Item("Net_Weight").ToString), "############0.000")
                        dgv_WarpingDetails_Set1.Rows(n).Cells(5).Value = (Dt1.Rows(j).Item("Shift").ToString)
                        dgv_WarpingDetails_Set1.Rows(n).Cells(6).Value = (Dt1.Rows(j).Item("Warp_beam_No").ToString)
                        dgv_WarpingDetails_Set1.Rows(n).Cells(7).Value = Format(Val(Dt1.Rows(j).Item("Start_Time").ToString), "############0.00")
                        dgv_WarpingDetails_Set1.Rows(n).Cells(8).Value = Format(Val(Dt1.Rows(j).Item("End_Time").ToString), "############0.00")
                        dgv_WarpingDetails_Set1.Rows(n).Cells(9).Value = Format(Val(Dt1.Rows(j).Item("Total_Time").ToString), "############0.00")
                        dgv_WarpingDetails_Set1.Rows(n).Cells(10).Value = Common_Procedures.Employee_IdNoToName(Con, Val(Dt1.Rows(j).Item("Front_Warper_1_IdNo").ToString))
                        dgv_WarpingDetails_Set1.Rows(n).Cells(11).Value = Format(Val(Dt1.Rows(j).Item("Front_Warper_1_Meters").ToString), "############0.00")
                        dgv_WarpingDetails_Set1.Rows(n).Cells(12).Value = Common_Procedures.Employee_IdNoToName(Con, Val(Dt1.Rows(j).Item("Back_Warper_1_IdNo").ToString))
                        dgv_WarpingDetails_Set1.Rows(n).Cells(13).Value = Format(Val(Dt1.Rows(j).Item("Back_Warper_1_Meters").ToString), "############0.00")
                        dgv_WarpingDetails_Set1.Rows(n).Cells(14).Value = Common_Procedures.Employee_IdNoToName(Con, Val(Dt1.Rows(j).Item("Helper_1_IdNo").ToString))
                        dgv_WarpingDetails_Set1.Rows(n).Cells(15).Value = Format(Val(Dt1.Rows(j).Item("Helper_1_Meters").ToString), "############0.00")

                        dgv_WarpingDetails_Set1.Rows(n).Cells(16).Value = Common_Procedures.Employee_IdNoToName(Con, Val(Dt1.Rows(j).Item("Front_Warper_2_IdNo").ToString))
                        dgv_WarpingDetails_Set1.Rows(n).Cells(17).Value = Format(Val(Dt1.Rows(j).Item("Front_Warper_2_Meters").ToString), "############0.00")
                        dgv_WarpingDetails_Set1.Rows(n).Cells(18).Value = Common_Procedures.Employee_IdNoToName(Con, Val(Dt1.Rows(j).Item("Back_Warper_2_IdNo").ToString))
                        dgv_WarpingDetails_Set1.Rows(n).Cells(19).Value = Format(Val(Dt1.Rows(j).Item("Back_Warper_2_Meters").ToString), "############0.00")
                        dgv_WarpingDetails_Set1.Rows(n).Cells(20).Value = Common_Procedures.Employee_IdNoToName(Con, Val(Dt1.Rows(j).Item("Helper_2_IdNo").ToString))
                        dgv_WarpingDetails_Set1.Rows(n).Cells(21).Value = Format(Val(Dt1.Rows(j).Item("Helper_2_Meters").ToString), "############0.00")
                        dgv_WarpingDetails_Set1.Rows(n).Cells(22).Value = Dt1.Rows(j).Item("Remarks").ToString

                    Next
                End If
                Dt1.Clear()

                Da = New SqlClient.SqlDataAdapter("select a.*   from Warping_Details a   where a.Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and a.Warp_Code = '" & Trim(dgv_Selection.Rows(i).Cells(19).Value) & "'  and a.Warp_SlNo = 2  order by a.sl_no, a.Warp_Date, a.for_orderby, a.Warp_No", Con)
                Dt1 = New DataTable
                Da.Fill(Dt1)

                If Dt1.Rows.Count > 0 Then
                    sno = 0
                    For j = 0 To Dt1.Rows.Count - 1
                        sno = sno + 1
                        n = dgv_WarpingDetails_Set2.Rows.Add()

                        dgv_WarpingDetails_Set2.Rows(n).Cells(0).Value = Val(sno)
                        dgv_WarpingDetails_Set2.Rows(n).Cells(1).Value = Dt1.Rows(j).Item("Ends_Name").ToString
                        dgv_WarpingDetails_Set2.Rows(n).Cells(2).Value = Format(Val(Dt1.Rows(j).Item("Gross_Weight").ToString), "############0.000")
                        dgv_WarpingDetails_Set2.Rows(n).Cells(3).Value = Format(Val(Dt1.Rows(j).Item("Tare_Weight").ToString), "############0.000")
                        dgv_WarpingDetails_Set2.Rows(n).Cells(4).Value = Format(Val(Dt1.Rows(j).Item("Net_Weight").ToString), "############0.000")
                        dgv_WarpingDetails_Set2.Rows(n).Cells(5).Value = (Dt1.Rows(j).Item("Shift").ToString)
                        dgv_WarpingDetails_Set2.Rows(n).Cells(6).Value = (Dt1.Rows(j).Item("Warp_beam_No").ToString)
                        dgv_WarpingDetails_Set2.Rows(n).Cells(7).Value = Format(Val(Dt1.Rows(j).Item("Start_Time").ToString), "############0.00")
                        dgv_WarpingDetails_Set2.Rows(n).Cells(8).Value = Format(Val(Dt1.Rows(j).Item("End_Time").ToString), "############0.00")
                        dgv_WarpingDetails_Set2.Rows(n).Cells(9).Value = Format(Val(Dt1.Rows(j).Item("Total_Time").ToString), "############0.00")
                        dgv_WarpingDetails_Set2.Rows(n).Cells(10).Value = Common_Procedures.Employee_IdNoToName(Con, Val(Dt1.Rows(j).Item("Front_Warper_1_IdNo").ToString))
                        dgv_WarpingDetails_Set2.Rows(n).Cells(11).Value = Format(Val(Dt1.Rows(j).Item("Front_Warper_1_Meters").ToString), "############0.00")
                        dgv_WarpingDetails_Set2.Rows(n).Cells(12).Value = Common_Procedures.Employee_IdNoToName(Con, Val(Dt1.Rows(j).Item("Back_Warper_1_IdNo").ToString))
                        dgv_WarpingDetails_Set2.Rows(n).Cells(13).Value = Format(Val(Dt1.Rows(j).Item("Back_Warper_1_Meters").ToString), "############0.00")
                        dgv_WarpingDetails_Set2.Rows(n).Cells(14).Value = Common_Procedures.Employee_IdNoToName(Con, Val(Dt1.Rows(j).Item("Helper_1_IdNo").ToString))
                        dgv_WarpingDetails_Set2.Rows(n).Cells(15).Value = Format(Val(Dt1.Rows(j).Item("Helper_1_Meters").ToString), "############0.00")

                        dgv_WarpingDetails_Set2.Rows(n).Cells(16).Value = Common_Procedures.Employee_IdNoToName(Con, Val(Dt1.Rows(j).Item("Front_Warper_2_IdNo").ToString))
                        dgv_WarpingDetails_Set2.Rows(n).Cells(17).Value = Format(Val(Dt1.Rows(j).Item("Front_Warper_2_Meters").ToString), "############0.00")
                        dgv_WarpingDetails_Set2.Rows(n).Cells(18).Value = Common_Procedures.Employee_IdNoToName(Con, Val(Dt1.Rows(j).Item("Back_Warper_2_IdNo").ToString))
                        dgv_WarpingDetails_Set2.Rows(n).Cells(19).Value = Format(Val(Dt1.Rows(j).Item("Back_Warper_2_Meters").ToString), "############0.00")
                        dgv_WarpingDetails_Set2.Rows(n).Cells(20).Value = Common_Procedures.Employee_IdNoToName(Con, Val(Dt1.Rows(j).Item("Helper_2_IdNo").ToString))
                        dgv_WarpingDetails_Set2.Rows(n).Cells(21).Value = Format(Val(Dt1.Rows(j).Item("Helper_2_Meters").ToString), "############0.00")
                        dgv_WarpingDetails_Set2.Rows(n).Cells(22).Value = Dt1.Rows(i).Item("Remarks").ToString

                    Next
                End If
                Dt1.Clear()

                Da = New SqlClient.SqlDataAdapter("select a.*   from Warping_Details a   where a.Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and a.Warp_Code = '" & Trim(dgv_Selection.Rows(i).Cells(19).Value) & "'  and a.Warp_SlNo = 3  order by a.sl_no, a.Warp_Date, a.for_orderby, a.Warp_No", Con)
                Dt1 = New DataTable
                Da.Fill(Dt1)

                If Dt1.Rows.Count > 0 Then
                    sno = 0
                    For j = 0 To Dt1.Rows.Count - 1
                        sno = sno + 1
                        n = dgv_WarpingDetails_Set3.Rows.Add()

                        dgv_WarpingDetails_Set3.Rows(n).Cells(0).Value = Val(sno)
                        dgv_WarpingDetails_Set3.Rows(n).Cells(1).Value = Dt1.Rows(j).Item("Ends_Name").ToString
                        dgv_WarpingDetails_Set3.Rows(n).Cells(2).Value = Format(Val(Dt1.Rows(j).Item("Gross_Weight").ToString), "############0.000")
                        dgv_WarpingDetails_Set3.Rows(n).Cells(3).Value = Format(Val(Dt1.Rows(j).Item("Tare_Weight").ToString), "############0.000")
                        dgv_WarpingDetails_Set3.Rows(n).Cells(4).Value = Format(Val(Dt1.Rows(j).Item("Net_Weight").ToString), "############0.000")
                        dgv_WarpingDetails_Set3.Rows(n).Cells(5).Value = (Dt1.Rows(j).Item("Shift").ToString)
                        dgv_WarpingDetails_Set3.Rows(n).Cells(6).Value = (Dt1.Rows(j).Item("Warp_beam_No").ToString)
                        dgv_WarpingDetails_Set3.Rows(n).Cells(7).Value = Format(Val(Dt1.Rows(j).Item("Start_Time").ToString), "############0.00")
                        dgv_WarpingDetails_Set3.Rows(n).Cells(8).Value = Format(Val(Dt1.Rows(j).Item("End_Time").ToString), "############0.00")
                        dgv_WarpingDetails_Set3.Rows(n).Cells(9).Value = Format(Val(Dt1.Rows(j).Item("Total_Time").ToString), "############0.00")
                        dgv_WarpingDetails_Set3.Rows(n).Cells(10).Value = Common_Procedures.Employee_IdNoToName(Con, Val(Dt1.Rows(j).Item("Front_Warper_1_IdNo").ToString))
                        dgv_WarpingDetails_Set3.Rows(n).Cells(11).Value = Format(Val(Dt1.Rows(j).Item("Front_Warper_1_Meters").ToString), "############0.00")
                        dgv_WarpingDetails_Set3.Rows(n).Cells(12).Value = Common_Procedures.Employee_IdNoToName(Con, Val(Dt1.Rows(j).Item("Back_Warper_1_IdNo").ToString))
                        dgv_WarpingDetails_Set3.Rows(n).Cells(13).Value = Format(Val(Dt1.Rows(j).Item("Back_Warper_1_Meters").ToString), "############0.00")
                        dgv_WarpingDetails_Set3.Rows(n).Cells(14).Value = Common_Procedures.Employee_IdNoToName(Con, Val(Dt1.Rows(j).Item("Helper_1_IdNo").ToString))
                        dgv_WarpingDetails_Set3.Rows(n).Cells(15).Value = Format(Val(Dt1.Rows(j).Item("Helper_1_Meters").ToString), "############0.00")

                        dgv_WarpingDetails_Set3.Rows(n).Cells(16).Value = Common_Procedures.Employee_IdNoToName(Con, Val(Dt1.Rows(j).Item("Front_Warper_2_IdNo").ToString))
                        dgv_WarpingDetails_Set3.Rows(n).Cells(17).Value = Format(Val(Dt1.Rows(j).Item("Front_Warper_2_Meters").ToString), "############0.00")
                        dgv_WarpingDetails_Set3.Rows(n).Cells(18).Value = Common_Procedures.Employee_IdNoToName(Con, Val(Dt1.Rows(j).Item("Back_Warper_2_IdNo").ToString))
                        dgv_WarpingDetails_Set3.Rows(n).Cells(19).Value = Format(Val(Dt1.Rows(j).Item("Back_Warper_2_Meters").ToString), "############0.00")
                        dgv_WarpingDetails_Set3.Rows(n).Cells(20).Value = Common_Procedures.Employee_IdNoToName(Con, Val(Dt1.Rows(j).Item("Helper_2_IdNo").ToString))
                        dgv_WarpingDetails_Set3.Rows(n).Cells(21).Value = Format(Val(Dt1.Rows(j).Item("Helper_2_Meters").ToString), "############0.00")
                        dgv_WarpingDetails_Set3.Rows(n).Cells(22).Value = Dt1.Rows(j).Item("Remarks").ToString

                    Next
                End If
                Dt1.Clear()

                TotalWarping_Calculation()

                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1102" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1163" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1144" Then
                    lbl_ConsumedYarn.Text = Format(Val(lbl_Total_Warping_NetWeight.Text), "#########0.0")
                Else
                    lbl_ConsumedYarn.Text = Format(Val(lbl_Total_Warping_NetWeight.Text), "#########0.000")
                End If

                Da = New SqlClient.SqlDataAdapter("select a.*, b.Count_Name, c.Mill_Name   from Warping_YarnTaken_Details a INNER JOIN Count_Head b on a.Count_IdNo = b.Count_IdNo INNER JOIN Mill_Head c on a.Mill_IdNo = c.Mill_IdNo  where a.Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and a.Warp_Code = '" & Trim(dgv_Selection.Rows(i).Cells(19).Value) & "'    order by a.sl_no, a.Warp_Date, a.for_orderby, a.Warp_No", Con)
                Dt2 = New DataTable
                Da.Fill(Dt2)

                If Dt2.Rows.Count > 0 Then
                    sno = 0
                    For j = 0 To Dt2.Rows.Count - 1
                        sno = sno + 1

                        n = dgv_YarnTakenDetails.Rows.Add()
                        dgv_YarnTakenDetails.Rows(n).Cells(0).Value = Val(sno)
                        dgv_YarnTakenDetails.Rows(n).Cells(1).Value = Dt2.Rows(j).Item("Count_Name").ToString
                        dgv_YarnTakenDetails.Rows(n).Cells(2).Value = Dt2.Rows(j).Item("Yarn_Type").ToString
                        dgv_YarnTakenDetails.Rows(n).Cells(3).Value = Dt2.Rows(j).Item("BabyCone_Warpcode_forSelection").ToString
                        dgv_YarnTakenDetails.Rows(n).Cells(4).Value = Dt2.Rows(j).Item("Mill_Name").ToString
                        dgv_YarnTakenDetails.Rows(n).Cells(5).Value = Val(Dt2.Rows(j).Item("Bags").ToString)
                        dgv_YarnTakenDetails.Rows(n).Cells(6).Value = Format(Val(Dt2.Rows(j).Item("Weight_Cone").ToString), "########0.000")
                        dgv_YarnTakenDetails.Rows(n).Cells(7).Value = Val(Dt2.Rows(j).Item("Cones").ToString)
                        dgv_YarnTakenDetails.Rows(n).Cells(8).Value = Format(Val(Dt2.Rows(j).Item("Weight").ToString), "########0.000")



                    Next
                End If
                Dt2.Clear()
                TotalYarnTaken_Calculation()

                Da = New SqlClient.SqlDataAdapter("select a.*  from Warping_BabyCone_Details a where a.Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and a.Warp_Code = '" & Trim(dgv_Selection.Rows(i).Cells(19).Value) & "'   order by a.sl_no, a.Warp_Date, a.for_orderby, a.Warp_No", Con)
                Dt2 = New DataTable
                Da.Fill(Dt2)

                If Dt2.Rows.Count > 0 Then
                    sno = 0
                    For j = 0 To Dt2.Rows.Count - 1
                        sno = sno + 1
                        n = dgv_BabyConeDetails.Rows.Add()
                        dgv_BabyConeDetails.Rows(n).Cells(0).Value = Val(sno)
                        dgv_BabyConeDetails.Rows(n).Cells(1).Value = Val(Dt2.Rows(j).Item("Bags").ToString)
                        dgv_BabyConeDetails.Rows(n).Cells(2).Value = Val(Dt2.Rows(j).Item("Cones").ToString)
                        dgv_BabyConeDetails.Rows(n).Cells(3).Value = Format(Val(Dt2.Rows(j).Item("Gross_Weight").ToString), "#########0.000")



                    Next
                End If
                Dt2.Clear()

            End If

        Next

        Total_BabyCone_Calculation()

        'If dgv_Details_Total.Rows.Count > 0 Then
        '    lbl_RateDiffAmount.Text = Val(dgv_Details_Total.Rows(0).Cells(12).Value)
        'End If
        pnl_Back.Enabled = True
        pnl_Selection.Visible = False
        If dtp_Date.Enabled And dtp_Date.Visible Then dtp_Date.Focus()

    End Sub

    Private Sub dtp_Date_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles dtp_Date.KeyDown
        If e.KeyValue = 38 Then
            If cbo_Ledger.Enabled And cbo_Ledger.Visible = True Then
                cbo_Ledger.Focus()
            End If
        End If
        If e.KeyValue = 40 Then
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1074" Then '------MITHUN SIZING MILLS
                If cbo_Ledger.Enabled Then cbo_Ledger.Focus() Else cbo_Ledger.Focus()
            Else
                If cbo_CountName.Enabled Then cbo_CountName.Focus() Else txt_Ends.Focus()
            End If
        End If
    End Sub

    Private Sub dtp_Date_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles dtp_Date.KeyPress
        If Asc(e.KeyChar) = 13 Then
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1074" Then '------MITHUN SIZING MILLS
                If cbo_Ledger.Enabled Then cbo_Ledger.Focus() Else cbo_Ledger.Focus()
            Else
                If cbo_CountName.Enabled Then cbo_CountName.Focus() Else txt_Ends.Focus()
            End If
        End If
    End Sub

    Private Sub cbo_Sizing1_Vendor_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing1_Vendor.GotFocus
        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "Vendor_AlaisHead", "Vendor_DisplayName", "(AccountsGroup_IdNo = 10 or AccountsGroup_IdNo = 14)", "(Vendor_IdNo = 0)")
    End Sub

    Private Sub cbo_Sizing1_Vendor_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing1_Vendor.KeyDown
        vcbo_KeyDwnVal = e.KeyValue
        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing1_Vendor, Nothing, Nothing, "Vendor_AlaisHead", "Vendor_DisplayName", "(AccountsGroup_IdNo = 10 or AccountsGroup_IdNo = 14 )", "(Vendor_IdNo = 0)")
        With dgv_SizingDetails_Set1

            If (e.KeyValue = 38 And cbo_Sizing1_Vendor.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex - 1)
            End If

            If (e.KeyValue = 40 And cbo_Sizing1_Vendor.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                If .Visible Then
                    .Focus()
                    If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1263" Then '-----APA TEXTILES INDIA PVT LTD
                        .CurrentCell = .Rows(.CurrentRow.Index + 1).Cells(2)
                    Else
                        .CurrentCell = .Rows(.CurrentRow.Index + 1).Cells(1)
                    End If
                End If
            End If

        End With
    End Sub

    Private Sub cbo_Sizing1_Vendor_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing1_Vendor.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing1_Vendor, Nothing, "Vendor_AlaisHead", "Vendor_DisplayName", "(AccountsGroup_IdNo = 10 or AccountsGroup_IdNo = 14 )", "(Vendor_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then

            With dgv_SizingDetails_Set1

                If .Visible Then
                    .Focus()
                    If .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex + 1).Visible = True Then
                        .CurrentCell = .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex + 1)
                    Else
                        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1263" Then '-----APA TEXTILES INDIA PVT LTD
                            .CurrentCell = .Rows(.CurrentRow.Index + 1).Cells(2)
                        Else
                            .CurrentCell = .Rows(.CurrentRow.Index + 1).Cells(1)
                        End If
                    End If
                End If

            End With

        End If

    End Sub

    Private Sub cbo_Sizing1_Vendor_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing1_Vendor.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Vendor_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing1_Vendor.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If

    End Sub

    Private Sub cbo_Sizing1_Vendor_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing1_Vendor.TextChanged
        Try
            If cbo_Sizing1_Vendor.Visible Then
                With dgv_SizingDetails_Set1
                    If Val(cbo_Sizing1_Vendor.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 31 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing1_Vendor.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub
    Private Sub cbo_Sizing2_Vendor_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing2_Vendor.GotFocus
        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "Vendor_AlaisHead", "Vendor_DisplayName", "(AccountsGroup_IdNo = 10 or AccountsGroup_IdNo = 14)", "(Vendor_IdNo = 0)")
    End Sub

    Private Sub cbo_Sizing2_Vendor_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing2_Vendor.KeyDown
        vcbo_KeyDwnVal = e.KeyValue
        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing2_Vendor, Nothing, Nothing, "Vendor_AlaisHead", "Vendor_DisplayName", "(AccountsGroup_IdNo = 10 or AccountsGroup_IdNo = 14 )", "(Vendor_IdNo = 0)")
        With dgv_SizingDetails_Set2

            If (e.KeyValue = 38 And cbo_Sizing2_Vendor.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex - 1)
            End If

            If (e.KeyValue = 40 And cbo_Sizing2_Vendor.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                If .Visible Then
                    .Focus()
                    If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1074" Then '----MITHUN SIZING MILLS
                        .CurrentCell = .Rows(.CurrentRow.Index + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                End If
            End If

        End With
    End Sub

    Private Sub cbo_Sizing2_Vendor_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing2_Vendor.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing2_Vendor, Nothing, "Vendor_AlaisHead", "Vendor_DisplayName", "(AccountsGroup_IdNo = 10 or AccountsGroup_IdNo = 14 )", "(Vendor_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then

            With dgv_SizingDetails_Set2

                .Focus()
                If .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex + 1).Visible = True Then
                    .CurrentCell = .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex + 1)
                Else
                    If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1074" Then '----MITHUN SIZING MILLS
                        .CurrentCell = .Rows(.CurrentRow.Index + 1).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentRow.Index + 1).Cells(1)
                    End If
                End If
            End With

        End If
    End Sub

    Private Sub cbo_Sizing2_Vendor_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing2_Vendor.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Vendor_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing2_Vendor.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If

    End Sub

    Private Sub cbo_Sizing2_Vendor_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing2_Vendor.TextChanged
        Try
            If cbo_Sizing2_Vendor.Visible Then
                With dgv_SizingDetails_Set2
                    If Val(cbo_Sizing2_Vendor.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 31 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing2_Vendor.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub cbo_Sizing3_Vendor_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing3_Vendor.GotFocus
        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "Vendor_AlaisHead", "Vendor_DisplayName", "(AccountsGroup_IdNo = 10 or AccountsGroup_IdNo = 14)", "(Vendor_IdNo = 0)")
    End Sub

    Private Sub cbo_Sizing3_Vendor_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing3_Vendor.KeyDown
        vcbo_KeyDwnVal = e.KeyValue
        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Sizing3_Vendor, Nothing, Nothing, "Vendor_AlaisHead", "Vendor_DisplayName", "(AccountsGroup_IdNo = 10 or AccountsGroup_IdNo = 14 )", "(Vendor_IdNo = 0)")
        With dgv_SizingDetails_Set3

            If (e.KeyValue = 38 And cbo_Sizing3_Vendor.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                .Focus()
                .CurrentCell = .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex - 1)
            End If

            If (e.KeyValue = 40 And cbo_Sizing3_Vendor.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then

                If .Visible Then
                    .Focus()
                    If Trim(Common_Procedures.settings.CustomerCode) = "1074" Then '-MITHUN SIZING MILLS
                        .CurrentCell = .Rows(.CurrentRow.Index).Cells(1)
                    Else
                        .CurrentCell = .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex + 1)
                    End If
                End If

            End If

        End With
    End Sub

    Private Sub cbo_Sizing3_Vendor_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Sizing3_Vendor.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Sizing3_Vendor, Nothing, "Vendor_AlaisHead", "Vendor_DisplayName", "(AccountsGroup_IdNo = 10 or AccountsGroup_IdNo = 14 )", "(Vendor_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then

            With dgv_SizingDetails_Set3

                If .Visible Then
                    .Focus()
                    If .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex + 1).Visible = True Then
                        .CurrentCell = .Rows(.CurrentRow.Index).Cells(.CurrentCell.ColumnIndex + 1)
                    Else
                        .Focus()
                        If Trim(Common_Procedures.settings.CustomerCode) = "1074" Then '-MITHUN SIZING MILLS
                            .CurrentCell = .Rows(.CurrentRow.Index).Cells(1)
                        Else
                            .CurrentCell = .Rows(.CurrentRow.Index + 1).Cells(1)
                        End If
                    End If
                End If

            End With
        End If

    End Sub

    Private Sub cbo_Sizing3_Vendor_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing3_Vendor.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Vendor_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing3_Vendor.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If

    End Sub

    Private Sub cbo_Sizing3_Vendor_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Sizing3_Vendor.TextChanged
        Try
            If cbo_Sizing3_Vendor.Visible Then
                With dgv_SizingDetails_Set3
                    If Val(cbo_Sizing3_Vendor.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 31 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Sizing3_Vendor.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub


    Private Sub cbo_CountName_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_CountName.LostFocus
        If Trim(UCase(cbo_CountName.Tag)) <> Trim(UCase(cbo_CountName.Text)) Then
            Stock_calulation()
        End If
    End Sub

    Private Sub PickUp_BeamNoWise_Calculation(ByVal SizingSlNo As Double, ByVal Row As Integer, ByVal Col As Integer, ByVal DGV_Details As DataGridView, ByVal DGV_Warp_Total As DataGridView)
        Dim m As Single, Pup As Single, sWarpWgt As Single
        Dim Wpm() As String
        Dim WrpMtr As Double = 0, WrpWgt As Double = 0

        Pup = 0
        If Val(DGV_Details.CurrentRow.Cells(33).Value) <> 0 Then
            Wpm = Split(txt_WarpMeters.Text, ",")

            WrpMtr = 0
            If (SizingSlNo - 1) <= UBound(Wpm) Then
                WrpMtr = Val(Wpm(SizingSlNo - 1))
            End If
            m = 0
            If Trim(cbo_Meters_Yards.Text) = "YARDS" Then m = Val(WrpMtr) * 0.9144 Else m = Val(WrpMtr)
            If Val(txt_TapeLength.Text) > 0 Then m = m * 39.37 / Val(txt_TapeLength.Text)


            If m <> 0 Then
                sWarpWgt = 0
                If DGV_Warp_Total.RowCount > 0 Then
                    sWarpWgt = Trim(Val(DGV_Warp_Total.Rows(0).Cells(4).Value()))
                End If
                m = Val(sWarpWgt) / m * 100
            End If


            If m <> 0 And Val(DGV_Details.CurrentRow.Cells(7).Value) <> 0 Then Pup = (((Val(DGV_Details.CurrentRow.Cells(33).Value) / Val(DGV_Details.CurrentRow.Cells(7).Value) * 100) - m) * 100) / m


        End If
        DGV_Details.Rows(DGV_Details.CurrentCell.RowIndex).Cells(34).Value = Trim(Format(Pup, "#########0.00"))



    End Sub


    Private Sub dgtxt_SizingDetails_Set1_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgtxt_SizingDetails_Set1.TextChanged
        Try
            With dgv_SizingDetails_Set1

                If .Visible Then
                    If .Rows.Count > 0 Then

                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(dgtxt_SizingDetails_Set1.Text)

                    End If
                End If
            End With

        Catch ex As NullReferenceException
            '---MessageBox.Show(ex.Message, "ERROR WHILE DETAILS TEXTBOX TEXTCHANGE....", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        Catch ex As ObjectDisposedException
            '---MessageBox.Show(ex.Message, "ERROR WHILE DETAILS TEXTBOX TEXTCHANGE....", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        Catch ex As Exception
            MessageBox.Show(ex.Message, "ERROR WHILE DETAILS TEXTBOX TEXTCHANGE....", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub

    Private Sub dgtxt_SizingDetails_Set2_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgtxt_SizingDetails_Set2.TextChanged
        Try
            With dgv_SizingDetails_Set2

                If .Visible Then
                    If .Rows.Count > 0 Then

                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(dgtxt_SizingDetails_Set2.Text)

                    End If
                End If
            End With

        Catch ex As NullReferenceException
            '---MessageBox.Show(ex.Message, "ERROR WHILE DETAILS TEXTBOX TEXTCHANGE....", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        Catch ex As ObjectDisposedException
            '---MessageBox.Show(ex.Message, "ERROR WHILE DETAILS TEXTBOX TEXTCHANGE....", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        Catch ex As Exception
            MessageBox.Show(ex.Message, "ERROR WHILE DETAILS TEXTBOX TEXTCHANGE....", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub

    Private Sub dgtxt_SizingDetails_Set3_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgtxt_SizingDetails_Set3.TextChanged
        Try
            With dgv_SizingDetails_Set3

                If .Visible Then
                    If .Rows.Count > 0 Then

                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(dgtxt_SizingDetails_Set3.Text)

                    End If
                End If
            End With

        Catch ex As NullReferenceException
            '---MessageBox.Show(ex.Message, "ERROR WHILE DETAILS TEXTBOX TEXTCHANGE....", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        Catch ex As ObjectDisposedException
            '---MessageBox.Show(ex.Message, "ERROR WHILE DETAILS TEXTBOX TEXTCHANGE....", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        Catch ex As Exception
            MessageBox.Show(ex.Message, "ERROR WHILE DETAILS TEXTBOX TEXTCHANGE....", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub
    Private Sub Printing_Format13(ByRef e As System.Drawing.Printing.PrintPageEventArgs)
        Dim Cmd As New SqlClient.SqlCommand
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Da2 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim EntryCode As String
        Dim pFont As Font, p1Font As Font, spFont As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single, sTxtHgt As Single, wTxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim ItmNm1 As String = "", ItmNm2 As String = ""
        Dim SNo As Integer
        Dim Det_Top As Single
        Dim i As Integer = 0, j As Integer = 0, k As Integer = 0
        Dim P1 As Single, P2 As Single
        Dim TtWrpEnds As Single
        Dim TtWrpGrsWgt As Single, TtWrpTrWgt As Single, TtWrpNetWgt As Single, TtOYSWgt As Single
        Dim Wpm() As String, WrpYrd As Single
        Dim TtSizBms As Single
        Dim TtSizGrsWgt As Single, TtSizTrWgt As Single, TtSizNetWgt As Single
        Dim TtSizPcs As Single, TtSizMtrs As Single
        Dim PL1 As Single, PL2 As Single
        Dim W1 As Single, W2 As Single
        Dim LF1 As Single, LF2 As Single
        Dim Bal_Yrn_Wt As Single, Bal_Bgs As Single, Bal_Amt As Single
        Dim Bal_Bms As Integer
        Dim NoofItems_PerPage As Integer
        Dim YInc As Single = 0
        Dim NoofDets As Integer = 0
        Dim EmBmPrintSTS As Integer = 0
        Dim OthCntPrintSTS As Integer = 0
        Dim EmpBgPrintSTS As Integer = 0
        Dim Z As Single = 0, X As Single = 0
        Dim YrnTknPrintSTS As Integer = 0
        Dim ByCnPrintSTS As Integer = 0
        Dim Tp_AmtDet As Single = 0
        Dim CurY2 As Single = 0
        Dim ps As Printing.PaperSize

        'Dim pkCustomSize1 As New System.Drawing.Printing.PaperSize("PAPER 9X12", 900, 1200)
        'PrintDocument1.PrinterSettings.DefaultPageSettings.PaperSize = pkCustomSize1
        'PrintDocument1.DefaultPageSettings.PaperSize = pkCustomSize1

        For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.A4 Then
                'If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.GermanStandardFanfold Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(i)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                Exit For
            End If
        Next

        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 20 '30
            .Right = 50 '30
            .Top = 5 ' 10
            .Bottom = 30 ' 45
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        pFont = New Font("Calibri", 11, FontStyle.Regular)
        'printFont = New Font("Draft 12cpi", 10)
        'pFont = New Font("Calibri", 9, FontStyle.Regular)
        'pFont = New Font("Calibri", 9.5, FontStyle.Regular)


        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With

        'TxtHgt = e.Graphics.MeasureString("A", pFont).Height
        TxtHgt = 17.9 ' 18 ' 19  ' 17.75   'e.Graphics.MeasureString("A", pFont).Height  ' 18  ' 20
        'TxtHgt = 17.8 ' e.Graphics.MeasureString("A", pFont).Height  ' 18  ' 20

        Erase LnAr
        Erase ClArr

        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}


        ClArr(1) = Val(30) : ClArr(2) = 50 : ClArr(3) = 60 : ClArr(4) = 65 : ClArr(5) = 65 : ClArr(6) = 65
        ClArr(7) = Val(30) : ClArr(8) = 55 : ClArr(9) = 65 : ClArr(10) = 65 : ClArr(11) = 65 : ClArr(12) = 65
        ClArr(13) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12))

        'ClArr(1) = Val(38) : ClArr(2) = 60 : ClArr(3) = 67 : ClArr(4) = 70 : ClArr(5) = 65 : ClArr(6) = 70
        'ClArr(7) = Val(38) : ClArr(8) = 70 : ClArr(9) = 70 : ClArr(10) = 65 : ClArr(11) = 70 : ClArr(12) = 65
        'ClArr(13) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12))



        'ClArr(1) = Val(30) : ClArr(2) = 45 : ClArr(3) = 50 : ClArr(4) = 52 : ClArr(5) = 48 : ClArr(6) = 53
        'ClArr(7) = Val(30) : ClArr(8) = 50 : ClArr(9) = 53 : ClArr(10) = 47 : ClArr(11) = 53 : ClArr(12) = 48 : ClArr(13) = 65
        'ClArr(14) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13))

        P1 = ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6)
        P2 = PageWidth - P1

        CurY = TMargin

        NoofItems_PerPage = 32

        EntryCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

        Try

            If prn_HdDt.Rows.Count > 0 Then

                Da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' Order by sl_no", Con)
                Da2.Fill(Dt2)
                If Dt2.Rows.Count > 30 Then
                    TxtHgt = TxtHgt - 1
                End If
                Dt2.Clear()

                '---------------------------------------------------------------------------------------------------- 
                '**********************         STOCK CALCULATION             **********************
                '----------------------------------------------------------------------------------------------------

                prn_Yrn_OpWt = 0 : prn_Yrn_RcptWt = 0 : prn_Yrn_DelvWt = 0
                prn_Yrn_ConsWt = 0 : prn_Yrn_ExShWt = 0
                prn_Yrn_TknWt = 0 : prn_Yrn_BayCnWt = 0
                prn_Yrn_RwExShWt = 0 : prn_Yrn_RwExShStNo = ""
                prn_Yrn_TranfrWt = 0 : prn_Yrn_TranfrNo = ""
                prn_Yrn_ExcSht_Wt = 0 : prn_Yrn_ExcSht_No = ""
                prn_Yrn_OpStNo = "" : prn_Yrn_RcptNo = "" : prn_Yrn_DcNo = ""

                prn_EmpBm_Op = 0 : prn_EmpBm_Rcpt = 0 : prn_EmpBm_Delv = 0 : prn_EmpBm_Cons = 0
                prn_EmpBm_OpStNo = "" : prn_EmpBm_RcptNo = "" : prn_EmpBm_DcNo = ""

                prn_EmpBg_Op = 0 : prn_EmpBg_Rcpt = 0 : prn_EmpBg_Delv = 0
                prn_EmpBg_OpStNo = "" : prn_EmpBg_RcptNo = "" : prn_EmpBg_DcNo = ""

                prn_Amt_Op = 0 : prn_Amt_Rcpt = 0 : prn_Amt_CurSet = 0
                prn_Amt_OpStNo = "" : prn_Amt_RcptNo = ""

                Cmd.Connection = Con

                Cmd.CommandText = "truncate table Temp_Statement_Yarn_Stock_Summary"
                Cmd.ExecuteNonQuery()

                Cmd.CommandText = "truncate table Temp_Statement_Other_Yarn_Stock_Summary"
                Cmd.ExecuteNonQuery()

                Stock_calulation()

                '---------------------------------------------------------------------------------------------------- 
                '**********************         HEADER             **********************
                '----------------------------------------------------------------------------------------------------

                Printing_Format13_PageHeader(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, prn_PageNo, CurY, LnAr, ClArr, NoofItems_PerPage)

                Det_Top = CurY

                If Val(prn_PageNo) <= 1 Then

                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         WARPING DETAILS             **********************
                    '----------------------------------------------------------------------------------------------------

                    Wpm = Split(Trim(prn_HdDt.Rows(0).Item("warp_meters").ToString), ",")


                    Da1 = New SqlClient.SqlDataAdapter("select distinct(Warp_SlNo) from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' Order by Warp_SlNo", Con)
                    Dt1 = New DataTable
                    Da1.Fill(Dt1)

                    If Dt1.Rows.Count > 0 Then

                        If Dt1.Rows.Count > 10 Then
                            wTxtHgt = 17
                        Else
                            wTxtHgt = TxtHgt
                        End If

                        For k = 0 To Dt1.Rows.Count - 1

                            CurY = CurY - 10

                            Da2 = New SqlClient.SqlDataAdapter("select * from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Warp_SlNo = " & Str(Val(Dt1.Rows(k).Item("Warp_SlNo").ToString)) & " Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            WrpYrd = Val(Wpm(k))

                            SNo = 0
                            TtWrpEnds = 0
                            TtWrpGrsWgt = 0 : TtWrpTrWgt = 0 : TtWrpNetWgt = 0

                            If Dt2.Rows.Count > 0 Then

                                For i = 0 To Dt2.Rows.Count - 1

                                    SNo = SNo + 1

                                    CurY = CurY + wTxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + 8, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Ends_Name").ToString)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                                    TtWrpEnds = TtWrpEnds + Val(Dt2.Rows(i).Item("Ends_Name").ToString)
                                    TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                    TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                    TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)

                                Next i

                            End If

                            CurY = CurY + wTxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                            CurY = CurY + wTxtHgt - 10
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtWrpEnds)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                            CurY = CurY + wTxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        Next k

                        'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2), CurY, LMargin + ClArr(1) + ClArr(2), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), LnAr(3))

                    End If


                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         YARN STOCK PARTICULARS              **********************
                    '----------------------------------------------------------------------------------------------------

                    'CurY = Det_Top

                    CurY = CurY + TxtHgt - 15

                    PL1 = LMargin + 5
                    'PL1 = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13)

                    W1 = e.Graphics.MeasureString("Opening Balance   : ", pFont).Width
                    W2 = 120
                    LF1 = 15

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    'p1Font = New Font("Calibri", 13, FontStyle.Bold Or FontStyle.Underline)  ---  Working
                    Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK", PL1 + LF1, CurY, 2, W1 + W2, p1Font)

                    CurY = CurY + TxtHgt + 5

                    Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_OpWt), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_OpStNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Yrn_OpStNo) & ")", PL1 + LF1 + 20, CurY, 0, 0, pFont)
                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Received", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_RcptWt), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_RcptNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Yrn_RcptNo) & ")", PL1 + LF1 + 20, CurY, 0, 0, p1Font)
                    End If

                    If Val(Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn) = 2 Then

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Consumed Yarn", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_ConsWt), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_ExShWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Short Yarn", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Excess Yarn", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        End If

                    Else

                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "Yarn Taken", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_TknWt), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "Baby Cone", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_BayCnWt), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Delivery", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_DelvWt), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_DcNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_Yrn_DcNo) & ")", PL1 + LF1 + 20, CurY, 0, 0, p1Font)
                    End If

                    If Val(prn_Yrn_RwExShWt) <> 0 Then

                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_RwExShWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Short", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Excess", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_RwExShStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Set.No. :  " & Trim(prn_Yrn_RwExShStNo) & ")", PL1 + LF1 + 20, CurY, 0, 0, p1Font)
                        End If

                    End If

                    If Val(prn_Yrn_TranfrWt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_TranfrWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_TranfrWt)), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_TranfrWt)), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_TranfrNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_TranfrNo) & ")", PL1 + LF1 + 20, CurY, 0, 0, p1Font)
                        End If
                    End If

                    If Val(prn_Yrn_ExcSht_Wt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_ExcSht_Wt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Exc)", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExcSht_Wt)), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Sht)", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExcSht_Wt)), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_ExcSht_No) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_ExcSht_No) & ")", PL1 + LF1 + 20, CurY, 0, 0, p1Font)
                        End If
                    End If

                    If Val(Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn) = 2 Then
                        Bal_Yrn_Wt = prn_Yrn_OpWt + prn_Yrn_RcptWt - prn_Yrn_DelvWt - prn_Yrn_ConsWt + prn_Yrn_ExShWt + prn_Yrn_RwExShWt + prn_Yrn_TranfrWt + prn_Yrn_ExcSht_Wt
                    Else
                        Bal_Yrn_Wt = prn_Yrn_OpWt + prn_Yrn_RcptWt - prn_Yrn_DelvWt - prn_Yrn_TknWt + prn_Yrn_BayCnWt + prn_Yrn_RwExShWt + prn_Yrn_TranfrWt + prn_Yrn_ExcSht_Wt
                    End If

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + LF1 + W1 + 20, CurY, PL1 + LF1 + W1 + W2, CurY)

                    CurY = CurY + 10
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Yarn", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Bal_Yrn_Wt), "#########0.000"), PL1 + LF1 + W1 + W2, CurY, 1, 0, p1Font)

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + LF1 + W1 + 20, CurY, PL1 + LF1 + W1 + W2, CurY)


                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         BABY CONE DETAILS              **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_BabyConeDetails) = 1 Then

                        ByCnPrintSTS = 1
                        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then
                            ByCnPrintSTS = 0
                            If MessageBox.Show("Do you want to Print Baby Cone Details...?", "FOR PRINTING...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) = Windows.Forms.DialogResult.Yes Then
                                ByCnPrintSTS = 1
                            End If
                        End If

                        If ByCnPrintSTS = 1 Then

                            YInc = 5

                            CurY = CurY + TxtHgt - 10

                            p1Font = New Font("Calibri", 12, FontStyle.Underline)
                            Common_Procedures.Print_To_PrintDocument(e, "BABYCONE DETAILS", LMargin + ClArr(1), CurY, 2, ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, p1Font)

                            CurY = CurY + TxtHgt + 10

                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)
                            CurY = CurY + YInc

                            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1), CurY, 2, ClArr(2), pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "BAGS", LMargin + ClArr(1) + ClArr(2), CurY, 2, ClArr(3), pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, 2, ClArr(4), pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, 2, ClArr(5) + ClArr(6) - 30, pFont)

                            CurY = CurY + TxtHgt + YInc
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)
                            CurY = CurY + TxtHgt


                            Da2 = New SqlClient.SqlDataAdapter("select * from Specification_BabyCone_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Gross_Weight <> 0 Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            SNo = 0

                            If Dt2.Rows.Count > 0 Then

                                CurY = CurY - TxtHgt - YInc

                                For i = 0 To Dt2.Rows.Count - 1

                                    SNo = SNo + 1

                                    CurY = CurY + TxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + 10, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30 - 5, CurY, 1, 0, pFont)

                                    'TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Bags").ToString)
                                    'TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Cones").ToString)
                                    'TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                                Next i

                            End If

                            CurY = CurY + TxtHgt + YInc
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)

                            CurY = CurY + TxtHgt - YInc
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_gross_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30 - 5, CurY, 1, 0, pFont)

                            CurY = CurY + TxtHgt + YInc
                            Common_Procedures.Print_To_PrintDocument(e, "Tare Weight " & " (" & Format(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString), "########0") & " X " & Format(Val(prn_HdDt.Rows(0).Item("EmptyBag_weight").ToString), "########0.000") & " + " & Format(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString), "########0") & " X " & Format(Val(prn_HdDt.Rows(0).Item("EmptyCone_weight").ToString), "########0.000") & " ) = ", LMargin + 10, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_tare_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30 - 5, CurY, 1, 0, pFont)

                            CurY = CurY + TxtHgt + YInc
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)

                            CurY = CurY + TxtHgt - YInc
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_net_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30 - 5, CurY, 1, 0, pFont)

                            CurY = CurY + TxtHgt + YInc
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)

                        End If

                    End If


                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         YARN STOCK SUMMARY FOR OTHER COUNT    **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_Yarn_Other_Count_Particulars) = 1 Then

                        OthCntPrintSTS = 1
                        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then
                            OthCntPrintSTS = 0
                            If MessageBox.Show("Do you want to Print Other Count Particulars?", "FOR PRINTING...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) = Windows.Forms.DialogResult.Yes Then
                                OthCntPrintSTS = 1
                            End If
                        End If

                        If OthCntPrintSTS = 1 Then

                            CurY = CurY + TxtHgt - 10

                            p1Font = New Font("Calibri", 11, FontStyle.Underline)
                            Common_Procedures.Print_To_PrintDocument(e, "OTHER COUNT PARTICULARS", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                            CurY = CurY + TxtHgt + 5

                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)
                            CurY = CurY + 5

                            Common_Procedures.Print_To_PrintDocument(e, "COUNT NAME", LMargin + ClArr(1) + 15, CurY, 0, ClArr(2) + ClArr(3) + ClArr(4), pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, 2, ClArr(5) + ClArr(6) - ClArr(1), pFont)

                            CurY = CurY + TxtHgt + 5
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)
                            CurY = CurY + TxtHgt

                            Da2 = New SqlClient.SqlDataAdapter("select * from Temp_Statement_Other_Yarn_Stock_Summary where Weight <> 0 Order by Count_Name", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            SNo = 0
                            TtOYSWgt = 0

                            If Dt2.Rows.Count > 0 Then

                                CurY = CurY - TxtHgt - 5

                                For i = 0 To Dt2.Rows.Count - 1

                                    'If NoofDets > NoofItems_PerPage Then
                                    '    CurY = CurY + TxtHgt
                                    '    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)
                                    '    NoofDets = NoofDets + 1
                                    '    Printing_Format3_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, False)
                                    '    e.HasMorePages = True
                                    '    Return
                                    'End If

                                    SNo = SNo + 1

                                    CurY = CurY + TxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(Dt2.Rows(i).Item("Count_Name").ToString), 12), LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)

                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1) - 15, CurY, 1, 0, pFont)

                                    TtOYSWgt = TtOYSWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                                Next i

                            End If

                            CurY = CurY + TxtHgt + 5
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)

                            'CurY = CurY + TxtHgt - 5
                            'Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)
                            'Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtOYSWgt), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1) - 15, CurY, 1, 0, pFont)

                            'CurY = CurY + TxtHgt + 5
                            'e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)

                        End If

                    End If

                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         EMPTY BEAM STOCK DETAILS              **********************
                    '----------------------------------------------------------------------------------------------------

                    'EmBmPrintSTS = 1
                    'If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then
                    '    If Val(prn_HdDt.Rows(0).Item("SocietySet_Status").ToString) = 1 Then
                    '        EmBmPrintSTS = 0
                    '        If MessageBox.Show("Do you want to Print Empty Beam Details ?", "FOR PRINTING...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) = Windows.Forms.DialogResult.Yes Then
                    '            EmBmPrintSTS = 1
                    '        End If
                    '    End If
                    'End If

                    'If EmBmPrintSTS = 1 Then

                    '    CurY = CurY + TxtHgt - 10

                    '    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    '    Common_Procedures.Print_To_PrintDocument(e, "EMPTY BEAM STOCK", PL1 + LF1, CurY, 2, W1 + W2, p1Font)

                    '    CurY = CurY + TxtHgt + 5

                    '    Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                    '    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                    '    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Op), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                    '    If Trim(prn_EmpBm_OpStNo) <> "" Then
                    '        CurY = CurY + TxtHgt - 2
                    '        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                    '        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBm_OpStNo) & ")", PL1 + LF1 + 20, CurY, 0, 0, pFont)
                    '    End If

                    '    CurY = CurY + TxtHgt

                    '    Common_Procedures.Print_To_PrintDocument(e, "Beams Received", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                    '    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                    '    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Rcpt), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                    '    If Trim(prn_EmpBm_RcptNo) <> "" Then
                    '        CurY = CurY + TxtHgt - 2
                    '        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                    '        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBm_RcptNo) & ")", PL1 + LF1 + 20, CurY, 0, 0, p1Font)
                    '    End If

                    '    CurY = CurY + TxtHgt

                    '    Common_Procedures.Print_To_PrintDocument(e, "Consumed Beams", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                    '    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                    '    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Cons), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                    '    CurY = CurY + TxtHgt

                    '    Common_Procedures.Print_To_PrintDocument(e, "Beams Delivered", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                    '    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                    '    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Delv), PL1 + LF1 + W1 + W2, CurY, 1, 0, pFont)

                    '    If Trim(prn_EmpBm_DcNo) <> "" Then
                    '        CurY = CurY + TxtHgt - 2
                    '        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                    '        Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBm_DcNo) & ")", PL1 + LF1 + 20, CurY, 0, 0, p1Font)
                    '    End If

                    '    Bal_Bms = prn_EmpBm_Op + prn_EmpBm_Rcpt - prn_EmpBm_Delv - prn_EmpBm_Cons

                    '    CurY = CurY + TxtHgt
                    '    e.Graphics.DrawLine(Pens.Black, PL1 + LF1 + W1 + 20, CurY, PL1 + LF1 + W1 + W2 + 5, CurY)

                    '    CurY = CurY + 10
                    '    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    '    Common_Procedures.Print_To_PrintDocument(e, "Balance Beams", PL1 + LF1 + 5, CurY, 0, 0, pFont)
                    '    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + LF1 + W1 + 5, CurY, 0, 0, pFont)
                    '    Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bms), PL1 + LF1 + W1 + W2, CurY, 1, 0, p1Font)

                    '    CurY = CurY + TxtHgt + 5
                    '    e.Graphics.DrawLine(Pens.Black, PL1 + LF1 + W1 + 20, CurY, PL1 + LF1 + W1 + W2 + 5, CurY)

                    'End If


                End If

                '---------------------------------------------------------------------------------------------------- 
                '**********************         SIZING DETAILS              **********************
                '----------------------------------------------------------------------------------------------------

                spFont = New Font("Calibri", 9, FontStyle.Regular)

                NoofDets = 0

                CurY = Det_Top

                PL2 = LMargin + P1


                Da1 = New SqlClient.SqlDataAdapter("select distinct(Sizing_SlNo) from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' Order by Sizing_SlNo", Con)
                Dt1 = New DataTable
                Da1.Fill(Dt1)

                If Dt1.Rows.Count > 0 Then

                    Z = 0 : X = 0
                    If Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString) <> 0 Then

                        If Val(prn_HdDt.Rows(0).Item("Total_Pavu_Beam").ToString) <> 0 Then

                            Z = Format((Val(prn_HdDt.Rows(0).Item("Total_Warping_Net_Weight").ToString) * Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString) / 100) + Val(prn_HdDt.Rows(0).Item("Total_Warping_Net_Weight").ToString), "#########0.0")
                            X = Format(Z - Val(prn_HdDt.Rows(0).Item("Total_Pavu_Net_Weight").ToString), "#########0.0")
                            X = Format(X / Val(prn_HdDt.Rows(0).Item("Total_Pavu_Beam").ToString), "########0.00")

                        End If

                    End If

                    For k = 0 To Dt1.Rows.Count - 1

                        CurY = CurY - 5  ' 10

                        Da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' and Sizing_SlNo = " & Str(Val(Dt1.Rows(k).Item("Sizing_SlNo").ToString)) & " Order by sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0
                        TtSizBms = 0
                        TtSizGrsWgt = 0 : TtSizTrWgt = 0 : TtSizNetWgt = 0
                        TtSizPcs = 0 : TtSizMtrs = 0

                        If Dt2.Rows.Count > 0 Then

                            If Dt2.Rows.Count > 25 Then
                                sTxtHgt = 16
                            Else
                                sTxtHgt = 17
                            End If

                            For i = 0 To Dt2.Rows.Count - 1

                                'If NoofDets > NoofItems_PerPage Then
                                '    CurY = CurY + TxtHgt
                                '    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)
                                '    NoofDets = NoofDets + 1
                                '    Printing_Format4_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, False)
                                '    e.HasMorePages = True
                                '    NoofDets = 0
                                '    Return
                                'End If

                                If Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString) <> 0 Then
                                    If k = Dt1.Rows.Count - 1 And i = Dt2.Rows.Count - 1 Then
                                        X = Format(Z - Format((Prn_TtSizNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)), "########0.0"), "########0.0")
                                        'X = Format(Z - (TtSizNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString) + X), "########0.0")
                                    End If
                                End If

                                SNo = SNo + 1

                                CurY = CurY + sTxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Beam_No").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString) + X, "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString) + X, "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Noof_Pcs").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Meters").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                                NoofDets = NoofDets + 1

                                TtSizBms = TtSizBms + 1
                                TtSizGrsWgt = TtSizGrsWgt + Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString) + X, "########0.0")
                                TtSizTrWgt = TtSizTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                TtSizNetWgt = TtSizNetWgt + Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString) + X, "########0.0")
                                Prn_TtSizNetWgt = Prn_TtSizNetWgt + Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString) + X, "########0.0")
                                TtSizPcs = TtSizPcs + Val(Dt2.Rows(i).Item("Noof_Pcs").ToString)
                                TtSizMtrs = TtSizMtrs + Val(Dt2.Rows(i).Item("Meters").ToString)

                            Next i

                        End If

                        CurY = CurY + sTxtHgt + 5 ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                        CurY = CurY + sTxtHgt - 5 ' 10
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtSizBms)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizPcs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtSizMtrs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)


                        CurY = CurY + sTxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                    Next k

                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), LnAr(4))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(3))

                End If

                '---------------------------------------------------------------------------------------------------- 
                '**********************         YARN TAKEN DETAILS              **********************
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_YarnTakenDetails) = 1 Then

                    YrnTknPrintSTS = 1
                    If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then
                        YrnTknPrintSTS = 0
                        If MessageBox.Show("Do you want to Print Yarn Taken Details...?", "FOR PRINTING...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) = Windows.Forms.DialogResult.Yes Then
                            YrnTknPrintSTS = 1
                        End If
                    End If

                    If YrnTknPrintSTS = 1 Then

                        CurY = CurY + TxtHgt + 5 ' 10

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "YARN TAKEN DETAILS", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), p1Font)

                        CurY = CurY + sTxtHgt + 5 ' 10

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)
                        CurY = CurY + 10

                        Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, 2, ClArr(8), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, 2, ClArr(9) + ClArr(10), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "COUNT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, 2, ClArr(11), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, 2, ClArr(12), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, 2, ClArr(13), pFont)

                        CurY = CurY + sTxtHgt + 5 ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)
                        CurY = CurY + sTxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select a.*, b.Count_Name, c.Mill_Name from Specification_YarnTaken_Details a INNER JOIN Count_Head b on a.Count_IdNo = b.Count_IdNo INNER JOIN Mill_Head c on a.Mill_IdNo = c.Mill_IdNo where a.company_idno = " & Str(Val(lbl_Company.Tag)) & " and a.Set_Code = '" & Trim(EntryCode) & "' Order by a.sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - sTxtHgt - 5 ' 10

                            For i = 0 To Dt2.Rows.Count - 1

                                SNo = SNo + 1

                                CurY = CurY + sTxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Mill_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Count_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                            Next i

                        End If

                        CurY = CurY + sTxtHgt + 5  ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                        CurY = CurY + sTxtHgt - 5  '10
                        Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                        'Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_bags").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_yarn_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + sTxtHgt + 5  ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                    End If

                End If

                EmBmPrintSTS = 1
                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then
                    If Val(prn_HdDt.Rows(0).Item("SocietySet_Status").ToString) = 1 Then
                        EmBmPrintSTS = 0
                        If MessageBox.Show("Do you want to Print Empty Beam Details ?", "FOR PRINTING...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) = Windows.Forms.DialogResult.Yes Then
                            EmBmPrintSTS = 1
                        End If
                    End If
                End If

                If EmBmPrintSTS = 1 Then

                    CurY = CurY + TxtHgt - 10

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    Common_Procedures.Print_To_PrintDocument(e, "EMPTY BEAM STOCK", PL2 + LF2, CurY, 2, W1 + W2, p1Font)

                    CurY = CurY + TxtHgt + 5

                    Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL2 + LF2 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL2 + LF2 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Op), PL2 + LF2 + W1 + W2, CurY, 1, 0, pFont)

                    If Trim(prn_EmpBm_OpStNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBm_OpStNo) & ")", PL2 + LF2 + 20, CurY, 0, 0, pFont)
                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Beams Received", PL2 + LF2 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL2 + LF2 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Rcpt), PL2 + LF2 + W1 + W2, CurY, 1, 0, pFont)

                    If Trim(prn_EmpBm_RcptNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBm_RcptNo) & ")", PL2 + LF2 + 20, CurY, 0, 0, p1Font)
                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Consumed Beams", PL2 + LF2 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL2 + LF2 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Cons), PL2 + LF2 + W1 + W2, CurY, 1, 0, pFont)

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Beams Delivered", PL2 + LF2 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL2 + LF2 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Delv), PL2 + LF2 + W1 + W2, CurY, 1, 0, pFont)

                    If Trim(prn_EmpBm_DcNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBm_DcNo) & ")", PL2 + LF2 + 20, CurY, 0, 0, p1Font)
                    End If

                    Bal_Bms = prn_EmpBm_Op + prn_EmpBm_Rcpt - prn_EmpBm_Delv - prn_EmpBm_Cons

                    CurY = CurY + TxtHgt
                    e.Graphics.DrawLine(Pens.Black, PL2 + LF2 + W1 + 20, CurY, PL2 + LF2 + W1 + W2 + 5, CurY)

                    CurY = CurY + 10
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Beams", PL2 + LF2 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL2 + LF2 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bms), PL2 + LF2 + W1 + W2, CurY, 1, 0, p1Font)

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL2 + LF2 + W1 + 20, CurY, PL2 + LF2 + W1 + W2 + 5, CurY)

                End If
                '---------------------------------------------------------------------------------------------------- 
                '**********************         AMOUNT DETAILS              **********************
                '----------------------------------------------------------------------------------------------------

                Tp_AmtDet = CurY
                If Val(Common_Procedures.settings.StatementPrint_AmountDetails) = 1 Then

                    W1 = e.Graphics.MeasureString("Current Set Amount : ", pFont).Width
                    W2 = 110
                    LF2 = 15

                    If sTxtHgt >= 17 Then
                        sTxtHgt = TxtHgt
                    End If

                    CurY = CurY + sTxtHgt + IIf(sTxtHgt >= 17, 5, 0)

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    Common_Procedures.Print_To_PrintDocument(e, "AMOUNT BALANCE DETAILS", PL2 + LF2, CurY, 2, W1 + W2, p1Font)

                    CurY = CurY + sTxtHgt + IIf(sTxtHgt >= 17, 5, 0)

                    Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL2 + LF2 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL2 + LF2 + W1 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Op)), PL2 + LF2 + W1 + W2, CurY, 1, 0, pFont)

                    If Trim(prn_Amt_OpStNo) <> "" Then
                        CurY = CurY + sTxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Amt_OpStNo) & ")", PL2 + LF2 + 20, CurY, 0, 0, pFont)
                    End If

                    CurY = CurY + sTxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Received Amount", PL2 + LF2 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL2 + LF2 + W1 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Rcpt)), PL2 + LF2 + W1 + W2, CurY, 1, 0, pFont)

                    If Trim(prn_Amt_RcptNo) <> "" Then
                        CurY = CurY + sTxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Amt_RcptNo) & ")", PL2 + LF2 + 20, CurY, 0, 0, p1Font)
                    End If

                    CurY = CurY + sTxtHgt + 2

                    Common_Procedures.Print_To_PrintDocument(e, "Current Set Amount", PL2 + LF2 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL2 + LF2 + W1 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_CurSet)), PL2 + LF2 + W1 + W2, CurY, 1, 0, pFont)

                    Bal_Amt = prn_Amt_Op - prn_Amt_Rcpt + prn_Amt_CurSet

                    CurY = CurY + sTxtHgt + IIf(sTxtHgt >= 17, 10, 5)
                    e.Graphics.DrawLine(Pens.Black, PL2 + LF2 + W1 + 20, CurY, PL2 + LF2 + W1 + W2 + 5, CurY)

                    CurY = CurY + sTxtHgt - IIf(sTxtHgt >= 17, 10, 5)
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Amount", PL2 + LF2 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL2 + LF2 + W1 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(Bal_Amt)), PL2 + LF2 + W1 + W2, CurY, 1, 0, p1Font)

                    CurY = CurY + sTxtHgt + IIf(sTxtHgt >= 17, 10, 5)
                    e.Graphics.DrawLine(Pens.Black, PL2 + LF2 + W1 + 20, CurY, PL2 + LF2 + W1 + W2 + 5, CurY)

                End If

                '---------------------------------------------------------------------------------------------------- 
                '**********************         EMPTY GUNNIES STOCK (SIMPLE)              **********************
                '----------------------------------------------------------------------------------------------------

                CurY2 = 0
                If Val(Common_Procedures.settings.StatementPrint_EmptyBagStockSimple) = 1 Then

                    CurY2 = Tp_AmtDet

                    EmpBgPrintSTS = 1
                    If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then
                        EmpBgPrintSTS = 0
                        If MessageBox.Show("Do you want to Print Empty Gunnies Stock?", "FOR PRINTING...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) = Windows.Forms.DialogResult.Yes Then
                            EmpBgPrintSTS = 1
                        End If
                    End If

                    If EmpBgPrintSTS = 1 Then

                        Bal_Bgs = prn_EmpBg_Op + prn_EmpBg_Rcpt - prn_EmpBg_Delv

                        CurY2 = CurY2 + TxtHgt + 5

                        p1Font = New Font("Calibri", 11, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Empty Gunnies", PL2 + LF2 + W1 + W2, CurY2, 0, 0, p1Font)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL2 + LF2 + W1 + W2 + W1 - 40, CurY2, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bgs), PL2 + LF2 + W1 + W2 + W1 - 30, CurY2, 0, 0, pFont)

                        CurY2 = CurY2 + 10

                    End If

                    If CurY2 > CurY Then
                        CurY = CurY2
                    End If

                End If

                '---------------------------------------------------------------------------------------------------- 
                '**********************         FOOTER             **********************
                '----------------------------------------------------------------------------------------------------

                Printing_Format13_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, True)

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

        e.HasMorePages = False

    End Sub

    Private Sub Printing_Format13_PageHeader(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal NoofItems_PerPage As Integer)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim p1Font As Font
        Dim Cmp_Name As String, Cmp_Add1 As String, Cmp_Add2 As String
        Dim Cmp_PhNo As String, Cmp_TinNo As String, Cmp_CstNo As String
        Dim strHeight As Single
        Dim C1 As Single, C2 As Single, C3 As Single, C4 As Single
        Dim P1 As Single, P2 As Single
        Dim W1 As Single, W2 As Single, W3 As Single
        Dim ExcSht_Str As String
        Dim Bal_Bms As Integer = 0
        Dim YInc As Single = 0
        Dim MilNm1 As String, MilNm2 As String
        Dim I As Integer = 0
        Dim CmpNmAddSTS As Boolean = False

        PageNo = PageNo + 1

        CurY = TMargin

        da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' Order by sl_no", Con)
        da2.Fill(dt2)
        If dt2.Rows.Count > NoofItems_PerPage Then
            Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(PageNo)), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
        End If
        dt2.Clear()

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY

        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
        Cmp_PhNo = "" : Cmp_TinNo = "" : Cmp_CstNo = ""

        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then
            Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address2").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString
        Else
            Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString
        End If

        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = "PHONE NO.:" & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_TinNo").ToString) <> "" Then
            Cmp_TinNo = "TIN NO.: " & prn_HdDt.Rows(0).Item("Company_TinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
            Cmp_CstNo = "CST NO.: " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
        End If

        CmpNmAddSTS = False

        If Trim(Cmp_Name) <> "" And Microsoft.VisualBasic.Len(Trim(Cmp_Name)) > 1 Then
            CurY = CurY + TxtHgt - 10
            p1Font = New Font("Calibri", 18, FontStyle.Bold)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height
            CmpNmAddSTS = True
        End If
        If Trim(Cmp_Add1) <> "" Then
            CurY = CurY + strHeight - 5
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1015" Then
                p1Font = New Font("Calibri", 14, FontStyle.Bold)
            Else
                p1Font = New Font("Calibri", 12, FontStyle.Regular)
            End If
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1, LMargin, CurY, 2, PrintWidth, p1Font)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height
            CmpNmAddSTS = True
        End If

        If Trim(Cmp_Add2) <> "" Then
            CurY = CurY + strHeight - 5
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont)
            CmpNmAddSTS = True
        End If

        'CurY = CurY + TxtHgt
        'Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont)
        'If Trim(Cmp_PhNo) <> "" Then
        '    CurY = CurY + TxtHgt
        '    Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, pFont)
        '    CmpNmAddSTS = True
        'End If

        If Trim(Cmp_PhNo) <> "" Or Trim(Cmp_TinNo) <> "" Or Trim(Cmp_TinNo) <> "" Then
            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, Cmp_TinNo, LMargin + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_CstNo, PageWidth - 10, CurY, 1, 0, pFont)
            CmpNmAddSTS = True
        End If

        If CmpNmAddSTS = True Then
            CurY = CurY + TxtHgt + 5  ' 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        End If

        LnAr(2) = CurY

        C1 = 320 ' Val(ClAr(1)) + Val(ClAr(2)) + Val(ClAr(3)) + Val(ClAr(4)) + Val(ClAr(5)) + Val(ClAr(6)) + Val(ClAr(7)) '370
        C2 = 220 ' Val(ClAr(8)) + Val(ClAr(9)) + Val(ClAr(10)) + Val(ClAr(11)) + Val(ClAr(12)) + Val(ClAr(13))  '215 ' 
        C3 = PageWidth - (LMargin + C1 + C2)
        C4 = 0

        'End If

        P1 = ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6)
        P2 = PageWidth - P1

        W1 = e.Graphics.MeasureString("Average Count : ", pFont).Width
        W2 = e.Graphics.MeasureString("Tape Length : ", pFont).Width
        W3 = e.Graphics.MeasureString("Consumed Rolls  : ", pFont).Width

        Try

            If Val(PageNo) <= 1 Then

                MilNm1 = Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString)
                MilNm2 = ""
                If Len(MilNm1) > 15 Then
                    For I = 15 To 1 Step -1
                        If Mid$(Trim(MilNm1), I, 1) = " " Or Mid$(Trim(MilNm1), I, 1) = "," Or Mid$(Trim(MilNm1), I, 1) = "." Or Mid$(Trim(MilNm1), I, 1) = "-" Or Mid$(Trim(MilNm1), I, 1) = "/" Or Mid$(Trim(MilNm1), I, 1) = "_" Or Mid$(Trim(MilNm1), I, 1) = "(" Or Mid$(Trim(MilNm1), I, 1) = ")" Or Mid$(Trim(MilNm1), I, 1) = "\" Or Mid$(Trim(MilNm1), I, 1) = "[" Or Mid$(Trim(MilNm1), I, 1) = "]" Or Mid$(Trim(MilNm1), I, 1) = "{" Or Mid$(Trim(MilNm1), I, 1) = "}" Then Exit For
                    Next I
                    If I = 0 Then I = 15
                    MilNm2 = Microsoft.VisualBasic.Right(Trim(MilNm1), Len(MilNm1) - I)
                    MilNm1 = Microsoft.VisualBasic.Left(Trim(MilNm1), I - 1)
                End If

                p1Font = New Font("Calibri", 14, FontStyle.Bold)

                CurY = CurY + TxtHgt - 5
                Common_Procedures.Print_To_PrintDocument(e, "TO : ", LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Set No", LMargin + C1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Set_No").ToString), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font)

                If Len(Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString)) > 15 Then
                    p1Font = New Font("Calibri", 9, FontStyle.Regular)
                Else
                    p1Font = New Font("Calibri", 10, FontStyle.Regular)
                End If

                Common_Procedures.Print_To_PrintDocument(e, "Mill Name", LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(MilNm1), LMargin + C1 + C2 + W2 + 25, CurY, 0, 0, p1Font)
                If Trim(MilNm2) <> "" Then
                    Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(MilNm2), 15), LMargin + C1 + C2 + W2 + 25, CurY + 12, 0, 0, p1Font)
                End If

                YInc = 10
                CurY = CurY + TxtHgt
                If Len(Trim(prn_HdDt.Rows(0).Item("Ledger_MainName").ToString)) <= 30 Then
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                ElseIf Len(Trim(prn_HdDt.Rows(0).Item("Ledger_MainName").ToString)) <= 35 Then
                    p1Font = New Font("Calibri", 9, FontStyle.Bold)
                Else
                    p1Font = New Font("Calibri", 8, FontStyle.Regular)
                End If

                Common_Procedures.Print_To_PrintDocument(e, "     " & "M/S." & prn_HdDt.Rows(0).Item("Ledger_MainName").ToString, LMargin + 10, CurY, 0, 0, p1Font)

                Common_Procedures.Print_To_PrintDocument(e, "DATE", LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Set_Date").ToString)), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Ends_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)

                YInc = 20

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address1").ToString, LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Count Name", LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Count_Name").ToString), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Tape Length", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("tape_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)


                YInc = 30

                If Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString) >= 0 Then
                    ExcSht_Str = "Excess Yarn"
                    'ExcSht_Str = "Excess        : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                Else
                    ExcSht_Str = "Short Yarn"
                    'ExcSht_Str = "Short         : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                End If
                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address2").ToString, LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, ExcSht_Str, LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000"), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Beam Width", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Beam_Width_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)


                YInc = 45

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address3").ToString, LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Average Count", LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("beam_count").ToString), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Mark", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("pcs_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)

                YInc = 25

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address4").ToString, LMargin + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                If Trim(prn_HdDt.Rows(0).Item("Ledger_TinNo").ToString) <> "" Then
                    Common_Procedures.Print_To_PrintDocument(e, "     Tin No : " & prn_HdDt.Rows(0).Item("Ledger_TinNo").ToString, LMargin + 10, CurY, 0, 0, pFont)
                End If

                CurY = CurY + TxtHgt + 15
                e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

                e.Graphics.DrawLine(Pens.Black, LMargin + C1, CurY, LMargin + C1, LnAr(2))
                e.Graphics.DrawLine(Pens.Black, LMargin + C1 + C2, CurY, LMargin + C1 + C2, LnAr(2))

            End If
            LnAr(3) = CurY

            CurY = CurY + TxtHgt - 10
            p1Font = New Font("Calibri", 12, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "WARPING DETAILS", LMargin, CurY, 2, P1, p1Font)
            Common_Procedures.Print_To_PrintDocument(e, "SIZING DETAILS", LMargin + P1, CurY, 2, P2, p1Font)


            'Common_Procedures.Print_To_PrintDocument(e, "WARPING DETAILS", LMargin, CurY, 2, ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), p1Font)
            'Common_Procedures.Print_To_PrintDocument(e, "SIZING DETAILS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), p1Font)
            'Common_Procedures.Print_To_PrintDocument(e, "PARTICULARS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY + TxtHgt, 2, ClAr(14), p1Font)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY)
            LnAr(4) = CurY

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Meter", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(4), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(5), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "BeamNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 2, ClAr(9), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 2, ClAr(10), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(11), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Pcs", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Meters", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY, 2, ClAr(13), pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(5) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub Printing_Format13_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PageHeight As Single, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal is_LastPage As Boolean)
        Dim p1Font As Font
        Dim Cmp_Name As String
        Dim LS As Single
        Dim STS As Boolean = False

        Try

            LS = PageHeight - 125

            STS = True
            If CurY >= LS Then
                CurY = CurY + TxtHgt
                STS = False
            Else
                CurY = LS
            End If

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, PageWidth, CurY)
            'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(6) = CurY

            CurY = CurY + 10

            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            p1Font = New Font("Calibri", 12, FontStyle.Bold)
            Common_Procedures.Print_To_PrintDocument(e, "For " & Cmp_Name, PageWidth - 15, CurY, 1, 0, p1Font)

            If STS = True Then
                CurY = CurY + TxtHgt
                'CurY = CurY + TxtHgt
            End If

            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            'Common_Procedures.Print_To_PrintDocument(e, "Prepared By", LMargin + 20, CurY, 0, 0, pFont)
            'Common_Procedures.Print_To_PrintDocument(e, "Checked By", LMargin + 300, CurY, 0, 0, pFont)

            Common_Procedures.Print_To_PrintDocument(e, "Checked By", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + 20, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Authorised Signatory", PageWidth - 15, CurY, 1, 0, pFont)
            CurY = CurY + TxtHgt + 10

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(7) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(1))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(7), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(6), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(1))
            p1Font = New Font("Calibri", 7, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "Software by TSOFT SOLUTIONS, Tirupur. Ph : 8508403222, 0421-4337417", LMargin + 8, CurY + 5, 0, 0, p1Font)

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub lbl_ExcessShort_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lbl_ExcessShort.Click
        btn_ExcessShort_Input_Click(sender, e)
    End Sub

    Private Function get_Max_Sizing_BeamNo() As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vMx_BmNo As String = ""

        Da = New SqlClient.SqlDataAdapter("Select max(ForOrderBy_BeamNo) from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code LIKE '%/" & Trim(Common_Procedures.FnYearCode) & "' and Reference_code NOT LIKE 'KPARC-%'", Con)
        Dt = New DataTable
        Da.Fill(Dt)

        vMx_BmNo = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vMx_BmNo = Dt.Rows(0)(0).ToString
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        vMx_BmNo = Val(vMx_BmNo) + 1

        Return Trim(vMx_BmNo)

    End Function

    Private Sub dgtxt_ChemicalDetails_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgtxt_ChemicalDetails.TextChanged
        Try
            With dgv_ChemicalDetails


                If .Visible Then
                    If .Rows.Count > 0 Then

                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(dgtxt_ChemicalDetails.Text)

                    End If
                End If
            End With

        Catch ex As NullReferenceException
            '---MessageBox.Show(ex.Message, "ERROR WHILE DETAILS TEXTBOX TEXTCHANGE....", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        Catch ex As ObjectDisposedException
            '---MessageBox.Show(ex.Message, "ERROR WHILE DETAILS TEXTBOX TEXTCHANGE....", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        Catch ex As Exception
            MessageBox.Show(ex.Message, "ERROR WHILE DETAILS TEXTBOX TEXTCHANGE....", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub
    Private Sub Update_PrintOut_Status(Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing)
        Dim cmd As New SqlClient.SqlCommand
        Dim NewCode As String = ""
        Dim vPrnSTS As Integer = 0


        Try

            NewCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

            cmd.Connection = Con
            If IsNothing(sqltr) = False Then
                cmd.Transaction = sqltr
            End If

            vPrnSTS = 0
            If chk_Printed.Checked = True Then
                vPrnSTS = 1
            End If

            cmd.CommandText = "Update Specification_Head set PrintOut_Status = " & Str(Val(vPrnSTS)) & " where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_Code = '" & Trim(NewCode) & "'"
            cmd.ExecuteNonQuery()

            If chk_Printed.Checked = True Then
                chk_Printed.Visible = True
                If Val(Common_Procedures.User.IdNo) = 1 Then
                    chk_Printed.Enabled = True
                End If
            End If

            cmd.Dispose()

        Catch ex As Exception
            MsgBox(ex.Message)

        End Try

    End Sub

    Private Sub PrintPreview_Shown(ByVal sender As Object, ByVal e As System.EventArgs)
        'Capture the click events for the toolstrip in the dialog box when the dialog is shown
        Dim ts As ToolStrip = CType(sender.Controls(1), ToolStrip)
        AddHandler ts.ItemClicked, AddressOf PrintPreview_Toolstrip_ItemClicked
    End Sub

    Private Sub PrintPreview_Toolstrip_ItemClicked(ByVal sender As Object, ByVal e As ToolStripItemClickedEventArgs)
        'If it is the print button that was clicked: run the printdialog
        If LCase(e.ClickedItem.Name) = LCase("printToolStripButton") Then

            Try
                chk_Printed.Checked = True
                chk_Printed.Visible = True
                Update_PrintOut_Status()

            Catch ex As Exception
                MsgBox("Print Error: " & ex.Message)

            End Try
        End If
    End Sub

    Private Sub cbo_WarpingMachine_No_No_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Warping_Machineno.GotFocus
        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "Warping_Machine_No_Head", "Warping_Machine_No_Name", "", "(Warping_Machine_No_IdNo = 0)")
    End Sub

    Private Sub cbo_WarpingMachine_No_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Warping_Machineno.KeyDown
        vcbo_KeyDwnVal = e.KeyValue
        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Warping_Machineno, txt_PcsLength, Nothing, "Warping_Machine_No_Head", "Warping_Machine_No_Name", "", "(Warping_Machine_No_IdNo = 0)")
        If (e.KeyValue = 40 And cbo_Warping_Machineno.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
            If Trim(UCase(cbo_Type.Text)) = "WARPING" Then
                tab_Main.SelectTab(1)
                tab_SizingDetails.SelectTab(0)
                If dgv_SizingDetails_Set1.Rows.Count <= 0 Then dgv_SizingDetails_Set1.Rows.Add()
                dgv_SizingDetails_Set1.Focus()
                dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
                dgv_SizingDetails_Set1.CurrentCell.Selected = True

            Else
                tab_Main.SelectTab(0)
                tab_WarpingDeatils.SelectTab(0)
                If dgv_WarpingDetails_Set1.Rows.Count <= 0 Then dgv_WarpingDetails_Set1.Rows.Add()
                dgv_WarpingDetails_Set1.Focus()
                dgv_WarpingDetails_Set1.CurrentCell = dgv_WarpingDetails_Set1.Rows(0).Cells(1)
                dgv_WarpingDetails_Set1.CurrentCell.Selected = True

            End If

        End If
    End Sub

    Private Sub cbo_WarpingMachine_No_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Warping_Machineno.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Warping_Machineno, Nothing, "Warping_Machine_No_Head", "Warping_Machine_No_Name", "", "(Warping_Machine_No_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then
            If Trim(UCase(cbo_Type.Text)) = "WARPING" Then

                tab_Main.SelectTab(1)
                tab_SizingDetails.SelectTab(0)
                If dgv_SizingDetails_Set1.Rows.Count <= 0 Then dgv_SizingDetails_Set1.Rows.Add()
                dgv_SizingDetails_Set1.Focus()
                dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
                dgv_SizingDetails_Set1.CurrentCell.Selected = True

            Else

                tab_Main.SelectTab(0)
                tab_WarpingDeatils.SelectTab(0)
                If dgv_WarpingDetails_Set1.Rows.Count <= 0 Then dgv_WarpingDetails_Set1.Rows.Add()
                dgv_WarpingDetails_Set1.Focus()
                dgv_WarpingDetails_Set1.CurrentCell = dgv_WarpingDetails_Set1.Rows(0).Cells(1)
                dgv_WarpingDetails_Set1.CurrentCell.Selected = True

            End If

        End If
    End Sub

    Private Sub cbo_WarpingMachine_No_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Warping_Machineno.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then

            Dim f As New Warping_MachineNo_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Warping_Machineno.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()
        End If
    End Sub

    Private Sub cbo_SizingMachine_No_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_SizingMachineNo.GotFocus
        cbo_SizingMachineNo.Tag = ""
        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "Sizing_Machine_No_Head", "Sizing_Machine_No_Name", "", "(Sizing_Machine_No_IdNo = 0)")
    End Sub

    Private Sub cbo_SizingMachine_No_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_SizingMachineNo.KeyDown
        vcbo_KeyDwnVal = e.KeyValue
        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_SizingMachineNo, txt_Remarks, cbo_Ledger, "Sizing_Machine_No_Head", "Sizing_Machine_No_Name", "", "(Sizing_Machine_No_IdNo = 0)")
    End Sub

    Private Sub cbo_SizingMachine_No_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_SizingMachineNo.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_SizingMachineNo, cbo_Ledger, "Sizing_Machine_No_Head", "Sizing_Machine_No_Name", "", "(Sizing_Machine_No_IdNo = 0)")
    End Sub

    Private Sub cbo_SizingMachine_No_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_SizingMachineNo.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Common_Procedures.MDI_LedType = ""
            Dim f As New Sizing_Machine_No_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_SizingMachineNo.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()
        End If
    End Sub

    Private Sub txt_PcsLength_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txt_PcsLength.KeyPress
        If Asc(e.KeyChar) = 13 Then
            If cbo_Warping_Machineno.Visible = True Then
                cbo_Warping_Machineno.Focus()

            Else

                If Trim(UCase(cbo_Type.Text)) = "WARPING" Then

                    tab_Main.SelectTab(1)
                    tab_SizingDetails.SelectTab(0)
                    If dgv_SizingDetails_Set1.Rows.Count <= 0 Then dgv_SizingDetails_Set1.Rows.Add()
                    dgv_SizingDetails_Set1.Focus()
                    dgv_SizingDetails_Set1.CurrentCell = dgv_SizingDetails_Set1.Rows(0).Cells(1)
                    dgv_SizingDetails_Set1.CurrentCell.Selected = True

                Else

                    If txt_warp_dets_tot_beam.Visible And txt_warp_dets_tot_beam.Enabled Then
                        txt_warp_dets_tot_beam.Focus()

                    Else
                        tab_Main.SelectTab(0)
                        tab_WarpingDeatils.SelectTab(0)
                        If dgv_WarpingDetails_Set1.Rows.Count <= 0 Then dgv_WarpingDetails_Set1.Rows.Add()
                        dgv_WarpingDetails_Set1.Focus()
                        dgv_WarpingDetails_Set1.CurrentCell = dgv_WarpingDetails_Set1.Rows(0).Cells(1)
                        dgv_WarpingDetails_Set1.CurrentCell.Selected = True

                    End If


                End If

            End If

        End If

    End Sub

    Private Sub cbo_SizingMachineNo_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_SizingMachineNo.LostFocus
        If Trim(UCase(cbo_SizingMachineNo.Tag)) <> Trim(UCase(cbo_SizingMachineNo.Text)) Then
            If cbo_SizingMachineNo.Visible = True Then
                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1288" Then '---- KKP SIZING (NAMMAKAL)
                    lbl_SetNo.Tag = Trim(lbl_SetNo.Text) & Trim(cbo_SizingMachineNo.Text)
                Else
                    lbl_SetNo.Tag = Trim(cbo_SizingMachineNo.Text) & Trim(lbl_SetNo.Text)
                End If

            Else
                lbl_SetNo.Tag = Trim(lbl_SetNo.Text)
            End If
        End If
    End Sub

    Private Sub cbo_SizingMachineNo_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_SizingMachineNo.TextChanged
        If cbo_SizingMachineNo.Visible = True Then
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1288" Then '---- KKP SIZING (NAMMAKAL)
                lbl_SetNo.Tag = Trim(lbl_SetNo.Text) & Trim(cbo_SizingMachineNo.Text)
            Else
                lbl_SetNo.Tag = Trim(cbo_SizingMachineNo.Text) & Trim(lbl_SetNo.Text)
            End If

        Else
            lbl_SetNo.Tag = Trim(lbl_SetNo.Text)
        End If
    End Sub

    Private Sub cbo_LoomType_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_LoomType.GotFocus
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim led_id As Integer = 0

        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "LoomType_Head", "LoomType_Name", "", "( LoomType_IdNo = 0 )")
        If Trim(cbo_LoomType.Text) = "" Then
            led_id = Common_Procedures.Ledger_AlaisNameToIdNo(Con, cbo_Ledger.Text)
            If led_id <> 0 Then
                Da1 = New SqlClient.SqlDataAdapter("Select Top 1 a.* from Specification_Head a where a.company_idno = " & Str(Val(lbl_Company.Tag)) & " and a.set_code like '%/" & Trim(Common_Procedures.FnYearCode) & "' and a.Entry_VAT_GST_Type = '" & Trim(vEnt_VAT_GST_Type) & "' and a.ledger_idno = " & Str(Val(led_id)) & " Order by a.for_Orderby desc, a.set_no desc", Con)
                Dt1 = New DataTable
                Da1.Fill(Dt1)
                If Dt1.Rows.Count > 0 Then
                    If Dt1.Rows(0).Item("Loom_Type").ToString <> "" Then cbo_LoomType.Text = Dt1.Rows(0).Item("Loom_Type").ToString
                End If
                Dt1.Clear()

            End If
        End If

        Dt1.Dispose()
        Da1.Dispose()

    End Sub

    Private Sub cbo_LoomType_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_LoomType.KeyDown
        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_LoomType, Nothing, txt_TapeLength, "LoomType_Head", "LoomType_Name", "", " ( LoomType_IdNo = 0 )")
        If e.KeyCode = 38 Then
            If txt_WarpMeters.Enabled Then txt_WarpMeters.Focus() Else txt_Ends.Focus()
        End If

    End Sub

    Private Sub cbo_LoomType_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_LoomType.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_LoomType, txt_TapeLength, "LoomType_Head", "LoomType_Name", "", "( LoomType_IdNo = 0 )")

        If Asc(e.KeyChar) = 13 Then
            txt_TapeLength.Focus()
        End If
    End Sub

    Private Sub btn_UserModification_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_UserModification.Click
        If Val(Common_Procedures.User.IdNo) = 1 Then
            Dim f1 As New User_Modifications
            f1.Entry_Name = Me.Name
            f1.Entry_PkValue = Trim(Pk_Condition) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)
            f1.ShowDialog()
        End If
    End Sub

    Private Sub btn_ExcessShort_Input_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btn_ExcessShort_Input.Click
        Try
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1123" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1220" Then '---- Sri Meenakshi Sizing (Somanur)
                lbl_ExcessShort.Text = InputBox("Enter ExcessShort Value", "EXCESS\SHORT", Val(lbl_ExcessShort.Text))
            End If
        Catch ex As Exception
            '----
        End Try
    End Sub

    Private Sub Printing_Format14(ByRef e As System.Drawing.Printing.PrintPageEventArgs)
        Dim Cmd As New SqlClient.SqlCommand
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Da2 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim EntryCode As String
        Dim pFont As Font, p1Font As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single
        Dim LnAr(15) As Single, WClAr(15) As Single, ClArr(15) As Single
        Dim ItmNm1 As String = "", ItmNm2 As String = ""
        Dim SNo As Integer
        Dim Det_Top As Single
        Dim i As Integer = 0, j As Integer = 0, k As Integer = 0
        Dim TtWrpEnds As Single
        Dim TtWrpGrsWgt As Single, TtWrpTrWgt As Single, TtWrpNetWgt As Single, TtWrpYrd As Single
        Dim Wpm() As String, WrpYrd As Single
        Dim TtSizBms As Single
        Dim TtSizGrsWgt As Single, TtSizTrWgt As Single, TtSizNetWgt As Single
        Dim TtSizPcs As Single, TtSizMtrs As Single
        Dim W1 As Single, W2 As Single, W3 As Single, W4 As Single
        Dim NoofDets As Integer, NoofItems_PerPage As Integer
        Dim ps As Printing.PaperSize
        Dim OthCntPrintSTS As Integer = 0
        Dim prn_Siz_Detail As Integer = 0
        Dim LS As Single = 0
        Dim Y1 As Single = 0, Y2 As Single = 0
        Dim C1 As Single = 0, C2 As Single = 0, C3 As Single = 0, C4 As Single = 0


        ' RECEIPT DETAILS ==================================================
        Dim vYrnRcptNo1 As String = "", vYrnRcptNo2 As String = "", vYrnRcptNo3 As String = ""

        Dim vBmRcptNo1 As String = "", vBmRcptNo2 As String = "", vBmRcptNo3 As String = "", vBmRcptNo4 As String = ""
        Dim vBmRcptNo5 As String = "", vBmRcptNo6 As String = "", vBmRcptNo7 As String = "", vBmRcptNo8 As String = ""

        Dim vBgRcptNo1 As String = "", vBgRcptNo2 As String = "", vBgRcptNo3 As String = "", vBgRcptNo4 As String = ""
        Dim vBgRcptNo5 As String = "", vBgRcptNo6 As String = "", vBgRcptNo7 As String = "", vBgRcptNo8 As String = ""

        ' RETURN DETAILS ==================================================
        Dim vYrnRetNo1 As String = "", vYrnRetNo2 As String = "", vYrnRetNo3 As String = ""

        Dim vBmRetNo1 As String = "", vBmRetNo2 As String = "", vBmRetNo3 As String = "", vBmRetNo4 As String = ""
        Dim vBmRetNo5 As String = "", vBmRetNo6 As String = "", vBmRetNo7 As String = "", vBmRetNo8 As String = ""

        Dim vBgRetNo1 As String = "", vBgRetNo2 As String = "", vBgRetNo3 As String = "", vBgRetNo4 As String = ""
        Dim vBgRetNo5 As String = "", vBgRetNo6 As String = "", vBgRetNo7 As String = "", vBgRetNo8 As String = ""



        Dim InvLft As Single
        Dim InvClW1 As Single, InvClW2 As Single, InvClW3 As Single, InvClW4 As Single
        Dim InvTxtHgt As Single = 0
        Dim NoofInvDets As Integer = 0
        Dim InvNetAmt As String = ""
        Dim InvRndOff As String = ""


LABEL_PAGETOP_1:

        For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(i)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                Exit For
            End If
        Next


        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 65
            .Right = 40
            .Top = 30
            .Bottom = 25
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        pFont = New Font("Calibri", 12, FontStyle.Regular)

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With

        'TxtHgt = e.Graphics.MeasureString("A", p1Font).Height  ' 20
        TxtHgt = 18 '19  ' 17   ' 18  ' e.Graphics.MeasureString("A", p1Font).Height  ' 20

        Erase LnAr
        Erase ClArr

        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = 65 : ClArr(2) = 100 : ClArr(3) = 115 : ClArr(4) = 115 : ClArr(5) = 115 : ClArr(7) = 80
        ClArr(6) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(7))

        CurY = TMargin

        NoofItems_PerPage = 30

        EntryCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

        Try

            If prn_HdDt.Rows.Count > 0 Then

                prn_Yrn_OpWt = 0 : prn_Yrn_RcptWt = 0 : prn_Yrn_DelvWt = 0
                prn_Yrn_ConsWt = 0 : prn_Yrn_ExShWt = 0
                prn_Yrn_OpStNo = "" : prn_Yrn_RcptNo = "" : prn_Yrn_DcNo = ""

                prn_EmpBm_Op = 0 : prn_EmpBm_Rcpt = 0 : prn_EmpBm_Delv = 0 : prn_EmpBm_Cons = 0
                prn_EmpBm_OpStNo = "" : prn_EmpBm_RcptNo = "" : prn_EmpBm_DcNo = ""

                prn_EmpBg_Op = 0 : prn_EmpBg_Rcpt = 0 : prn_EmpBg_Delv = 0
                prn_EmpBg_OpStNo = "" : prn_EmpBg_RcptNo = "" : prn_EmpBg_DcNo = ""

                prn_Amt_Op = 0 : prn_Amt_Rcpt = 0 : prn_Amt_CurSet = 0
                prn_Amt_OpStNo = "" : prn_Amt_RcptNo = ""

                Cmd.Connection = Con
                Cmd.CommandText = "truncate table Temp_Statement_Yarn_Stock_Summary"
                Cmd.ExecuteNonQuery()

                Stock_calulation()

                Printing_Format14_PageHeader(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, prn_PageNo, CurY, LnAr, ClArr)

                Det_Top = CurY

                NoofDets = 0

                If Val(prn_PageNo) <= 1 Then

                    '----------------------------------------------------------------------------------------------------
                    '**********************     WARPING DETAILS     **********************
                    '----------------------------------------------------------------------------------------------------

                    WClAr(1) = 65 : WClAr(2) = 120 : WClAr(4) = 125 : WClAr(5) = 125 : WClAr(6) = 125
                    WClAr(3) = PageWidth - (LMargin + WClAr(1) + WClAr(2) + WClAr(4) + WClAr(5) + WClAr(6))

                    If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then
                        Y1 = CurY + 0.5
                        Y2 = CurY + +TxtHgt - 10 + TxtHgt + 10
                        Common_Procedures.FillRegionRectangle(e, LMargin, Y1, PageWidth, Y2)
                    End If

                    CurY = CurY + TxtHgt - 10
                    p1Font = New Font("Calibri", 12, FontStyle.Bold)
                    Print_To_PrintDoc_BRT(e, "WARPING PARTICULARS", LMargin, CurY, 2, PrintWidth, p1Font, prn_PageNo)

                    CurY = CurY + TxtHgt + 10
                    If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
                    LnAr(4) = CurY

                    p1Font = New Font("Calibri", 12, FontStyle.Bold)

                    CurY = CurY + TxtHgt - 10
                    Print_To_PrintDoc_BRT(e, "SlNo", LMargin, CurY, 2, WClAr(1), p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "Ends", LMargin + WClAr(1), CurY, 2, WClAr(2), p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "Warp Meter", LMargin + WClAr(1) + WClAr(2), CurY, 2, WClAr(3), p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "Gross Wt.", LMargin + WClAr(1) + WClAr(2) + WClAr(3), CurY, 2, WClAr(4), p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "Tare Wt.", LMargin + WClAr(1) + WClAr(2) + WClAr(3) + WClAr(4), CurY, 2, WClAr(5), p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "Nett Wt.", LMargin + WClAr(1) + WClAr(2) + WClAr(3) + WClAr(4) + WClAr(5), CurY, 2, WClAr(6), p1Font, prn_PageNo)

                    CurY = CurY + TxtHgt + 10
                    If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
                    LnAr(5) = CurY

                    Wpm = Split(Trim(prn_HdDt.Rows(0).Item("warp_meters").ToString), ",")

                    Da1 = New SqlClient.SqlDataAdapter("select distinct(Warp_SlNo) from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' Order by Warp_SlNo", Con)
                    Dt1 = New DataTable
                    Da1.Fill(Dt1)

                    If Dt1.Rows.Count > 0 Then

                        SNo = 0
                        TtWrpEnds = 0
                        TtWrpGrsWgt = 0 : TtWrpTrWgt = 0 : TtWrpNetWgt = 0

                        CurY = CurY - 10

                        For k = 0 To Dt1.Rows.Count - 1

                            Da2 = New SqlClient.SqlDataAdapter("select * from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Warp_SlNo = " & Str(Val(Dt1.Rows(k).Item("Warp_SlNo").ToString)) & " Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            WrpYrd = Val(Wpm(k))


                            If Dt2.Rows.Count > 0 Then

                                For i = 0 To Dt2.Rows.Count - 1

                                    SNo = SNo + 1

                                    CurY = CurY + TxtHgt

                                    Print_To_PrintDoc_BRT(e, Trim(Val(SNo)), LMargin + 10, CurY, 0, 0, pFont, prn_PageNo)
                                    Print_To_PrintDoc_BRT(e, Trim(Val(Dt2.Rows(i).Item("Ends_Name").ToString)), LMargin + WClAr(1) + 10, CurY, 0, 0, pFont, prn_PageNo)
                                    Print_To_PrintDoc_BRT(e, Format(Val(WrpYrd), "########0.00"), LMargin + WClAr(1) + WClAr(2) + WClAr(3) - 10, CurY, 1, 0, pFont, prn_PageNo)
                                    Print_To_PrintDoc_BRT(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.000"), LMargin + WClAr(1) + WClAr(2) + WClAr(3) + WClAr(4) - 10, CurY, 1, 0, pFont, prn_PageNo)
                                    Print_To_PrintDoc_BRT(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.000"), LMargin + WClAr(1) + WClAr(2) + WClAr(3) + WClAr(4) + WClAr(5) - 10, CurY, 1, 0, pFont, prn_PageNo)
                                    Print_To_PrintDoc_BRT(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.000"), LMargin + WClAr(1) + WClAr(2) + WClAr(3) + WClAr(4) + WClAr(5) + WClAr(6) - 10, CurY, 1, 0, pFont, prn_PageNo)

                                    TtWrpEnds = TtWrpEnds + Val(Dt2.Rows(i).Item("Ends_Name").ToString)
                                    TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                    TtWrpYrd = TtWrpYrd + Val(Dt2.Rows(i).Item("warp_meters").ToString)
                                    TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                    TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)

                                Next i

                            End If


                        Next k

                        CurY = CurY + TxtHgt + 10
                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + WClAr(1) + WClAr(2) + WClAr(3) + WClAr(4) + WClAr(5) + WClAr(6), CurY)

                        CurY = CurY + TxtHgt - 10
                        p1Font = New Font("Calibri", 12, FontStyle.Bold)
                        Print_To_PrintDoc_BRT(e, Trim(Val(TtWrpEnds)), LMargin + WClAr(1) + 5, CurY, 0, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Format(Val(TtWrpYrd), "########0.00"), LMargin + WClAr(1) + WClAr(2) + WClAr(3) - 3, CurY, 1, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Format(Val(TtWrpGrsWgt), "########0.000"), LMargin + WClAr(1) + WClAr(2) + WClAr(3) + WClAr(4) - 3, CurY, 1, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Format(Val(TtWrpTrWgt), "########0.000"), LMargin + WClAr(1) + WClAr(2) + WClAr(3) + WClAr(4) + WClAr(5) - 3, CurY, 1, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Format(Val(TtWrpNetWgt), "########0.000"), LMargin + WClAr(1) + WClAr(2) + WClAr(3) + WClAr(4) + WClAr(5) + WClAr(6) - 3, CurY, 1, 0, p1Font, prn_PageNo)

                        CurY = CurY + TxtHgt + 10
                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + WClAr(1) + WClAr(2) + WClAr(3) + WClAr(4) + WClAr(5) + WClAr(6), CurY)

                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + WClAr(1), CurY, LMargin + WClAr(1), LnAr(4))
                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + WClAr(1) + WClAr(2), CurY, LMargin + WClAr(1) + WClAr(2), LnAr(4))
                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + WClAr(1) + WClAr(2) + WClAr(3), CurY, LMargin + WClAr(1) + WClAr(2) + WClAr(3), LnAr(4))
                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + WClAr(1) + WClAr(2) + WClAr(3) + WClAr(4) + 6, CurY, LMargin + WClAr(1) + WClAr(2) + WClAr(3) + WClAr(4) + 6, LnAr(4))
                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + WClAr(1) + WClAr(2) + WClAr(3) + WClAr(4) + WClAr(5), CurY, LMargin + WClAr(1) + WClAr(2) + WClAr(3) + WClAr(4) + WClAr(5), LnAr(4))
                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + WClAr(1) + WClAr(2) + WClAr(3) + WClAr(4) + WClAr(5) + WClAr(6), CurY, LMargin + WClAr(1) + WClAr(2) + WClAr(3) + WClAr(4) + WClAr(5) + WClAr(6), LnAr(3))

                    End If

                    If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then
                        Y1 = CurY + 0.5
                        Y2 = CurY + +TxtHgt - 10 + TxtHgt + 10
                        Common_Procedures.FillRegionRectangle(e, LMargin, Y1, PageWidth, Y2)
                    End If

                    CurY = CurY + TxtHgt - 10
                    p1Font = New Font("Calibri", 12, FontStyle.Bold)
                    Print_To_PrintDoc_BRT(e, "SIZING PARTICULARS", LMargin, CurY, 2, PrintWidth, p1Font, prn_PageNo)

                    CurY = CurY + TxtHgt + 10
                    If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
                    LnAr(4) = CurY

                    p1Font = New Font("Calibri", 12, FontStyle.Bold)

                    CurY = CurY + TxtHgt - 10
                    Print_To_PrintDoc_BRT(e, "SlNo", LMargin, CurY, 2, ClArr(1), p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "Beam No", LMargin + ClArr(1), CurY, 2, ClArr(2), p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "Gross Wt.", LMargin + ClArr(1) + ClArr(2), CurY, 2, ClArr(3), p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "Tare Wt.", LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, 2, ClArr(4), p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "Nett Wt.", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, 2, ClArr(5), p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "Beam Mtrs", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), CurY, 2, ClArr(6), p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "Pcs", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7), p1Font, prn_PageNo)

                    CurY = CurY + TxtHgt + 10
                    If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
                    LnAr(5) = CurY

                End If


                '----------------------------------------------------------------------------------------------------
                '**********************      SIZING DETAILS     **********************
                '----------------------------------------------------------------------------------------------------

                If prn_PageNo <= 1 Or Prn_SizingDetails_2ndPage_STS = True Then

                    If prn_PageNo = 1 Then prn_Siz_Detail = 15 Else prn_Siz_Detail = 50

                    Da1 = New SqlClient.SqlDataAdapter("select distinct(Sizing_SlNo) from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' Order by Sizing_SlNo", Con)
                    Dt1 = New DataTable
                    Da1.Fill(Dt1)

                    CurY = CurY - 10

                    If Dt1.Rows.Count > 0 Then

                        For k = 0 To Dt1.Rows.Count - 1

                            Da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' and Sizing_SlNo = " & Str(Val(Dt1.Rows(k).Item("Sizing_SlNo").ToString)) & " Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            TtSizBms = 0
                            TtSizGrsWgt = 0 : TtSizTrWgt = 0 : TtSizNetWgt = 0
                            TtSizPcs = 0 : TtSizMtrs = 0

                            If Dt2.Rows.Count > 0 Then

                                For i = Prn_SizingDetails_StartIndx To Dt2.Rows.Count - 1

                                    If Prn_SizingDetails_2ndPage_STS = False And CurY >= 1050 Then

                                        p1Font = New Font("Calibri", 14, FontStyle.Bold)
                                        CurY = CurY + TxtHgt + 5
                                        Print_To_PrintDoc_BRT(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 10, CurY, 1, 0, p1Font, prn_PageNo)

                                        LS = PageHeight - 125

                                        If CurY >= LS Then
                                            CurY = CurY + TxtHgt
                                        Else
                                            CurY = LS
                                        End If
                                        CurY = CurY + 10
                                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
                                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1), LnAr(4))
                                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2), CurY, LMargin + ClArr(1) + ClArr(2), LnAr(4))
                                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3), LnAr(4))
                                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), LnAr(4))
                                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), LnAr(4))
                                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), LnAr(4))
                                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), LnAr(4))

                                        Prn_SizingDetails_2ndPage_STS = True
                                        Prn_SizingDetails_StartIndx = i

                                        GoTo SIZDET_1000

                                    End If

                                    prn_SizSlNo = prn_SizSlNo + 1

                                    CurY = CurY + TxtHgt

                                    Print_To_PrintDoc_BRT(e, Trim(Val(prn_SizSlNo)), LMargin + 10, CurY, 0, 0, pFont, prn_PageNo)
                                    Print_To_PrintDoc_BRT(e, Trim(Dt2.Rows(i).Item("Beam_No").ToString), LMargin + ClArr(1) + 10, CurY, 0, 0, pFont, prn_PageNo)
                                    Print_To_PrintDoc_BRT(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 10, CurY, 1, 0, pFont, prn_PageNo)
                                    Print_To_PrintDoc_BRT(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 10, CurY, 1, 0, pFont, prn_PageNo)
                                    Print_To_PrintDoc_BRT(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 10, CurY, 1, 0, pFont, prn_PageNo)
                                    Print_To_PrintDoc_BRT(e, Format(Val(Dt2.Rows(i).Item("Meters").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 10, CurY, 1, 0, pFont, prn_PageNo)
                                    If Val(Dt2.Rows(i).Item("Noof_Pcs").ToString) <> 0 Then
                                        Print_To_PrintDoc_BRT(e, Format(Val(Dt2.Rows(i).Item("Noof_Pcs").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) - 10, CurY, 1, 0, pFont, prn_PageNo)
                                    End If


                                    TtSizBms = TtSizBms + 1
                                    TtSizGrsWgt = TtSizGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                    TtSizTrWgt = TtSizTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                    TtSizNetWgt = TtSizNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)
                                    TtSizPcs = TtSizPcs + Val(Dt2.Rows(i).Item("Noof_Pcs").ToString)
                                    TtSizMtrs = TtSizMtrs + Val(Dt2.Rows(i).Item("Meters").ToString)

                                    Prn_TtSizBms = Prn_TtSizBms + 1
                                    Prn_TtSizGrsWgt = Prn_TtSizGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                    Prn_TtSizTrWgt = Prn_TtSizTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                    Prn_TtSizNetWgt = Prn_TtSizNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)
                                    Prn_TtSizPcs = Prn_TtSizPcs + Val(Dt2.Rows(i).Item("Noof_Pcs").ToString)
                                    Prn_TtSizMtrs = Prn_TtSizMtrs + Val(Dt2.Rows(i).Item("Meters").ToString)

                                Next i
                                Prn_SizingDetails_StartIndx = 0

                            End If


                        Next k

                        CurY = CurY + TxtHgt + 10
                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

                        CurY = CurY + TxtHgt - 10
                        p1Font = New Font("Calibri", 12, FontStyle.Bold)
                        Print_To_PrintDoc_BRT(e, Trim(Val(Prn_TtSizBms)), LMargin + ClArr(1) + 10, CurY, 0, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Format(Val(Prn_TtSizGrsWgt), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 10, CurY, 1, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Format(Val(Prn_TtSizTrWgt), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 10, CurY, 1, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Format(Val(Prn_TtSizNetWgt), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 10, CurY, 1, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Format(Val(Prn_TtSizMtrs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 10, CurY, 1, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Format(Val(Prn_TtSizPcs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) - 10, CurY, 1, 0, p1Font, prn_PageNo)

                        CurY = CurY + TxtHgt + 10
                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1), LnAr(4))
                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2), CurY, LMargin + ClArr(1) + ClArr(2), LnAr(4))
                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3), LnAr(4))
                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), LnAr(4))
                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), LnAr(4))
                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), LnAr(4))
                        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), LnAr(4))

                        Prn_SizingDetails_2ndPage_STS = False

                    End If

                End If

SIZDET_1000:

                If prn_PageNo = 2 Then

                    LnAr(5) = CurY

                    C2 = (PageWidth \ 4) - 20
                    C3 = (PageWidth \ 4) - 20
                    C4 = (PageWidth \ 4) - 20
                    C1 = PageWidth - (LMargin + C2 + C3 + C4)

                    If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then
                        Y1 = CurY + 0.5
                        Y2 = CurY + +TxtHgt - 10 + TxtHgt + 10
                        Common_Procedures.FillRegionRectangle(e, LMargin, Y1, PageWidth, Y2)
                    End If

                    CurY = CurY + TxtHgt - 10
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Print_To_PrintDoc_BRT(e, "STOCK PARTICULARS", LMargin, CurY, 2, C1, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "YARN", LMargin + C1, CurY, 2, C2, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "EMPTY BAGS", LMargin + C1 + C2, CurY, 2, C3, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "EMPTY BEAM", LMargin + C1 + C2 + C3, CurY, 2, C4, p1Font, prn_PageNo)

                    CurY = CurY + TxtHgt + 5 '10
                    If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

                    CurY = CurY + TxtHgt + 3 ' 5
                    Print_To_PrintDoc_BRT(e, "Opg.Balance", LMargin + 10, CurY, 0, 0, pFont, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Format(Val(prn_Yrn_OpWt), "##########0.000"), LMargin + C1 + C2 - 10, CurY, 1, 0, pFont, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Trim(Val(prn_EmpBg_Op)), LMargin + C1 + C2 + C3 - 10, CurY, 1, 0, pFont, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Trim(Val(prn_EmpBm_Op)), LMargin + C1 + C2 + C3 + C4 - 10, CurY, 1, 0, pFont, prn_PageNo)


                    CurY = CurY + TxtHgt + 7 '10
                    Print_To_PrintDoc_BRT(e, "Receipts", LMargin + 10, CurY, 0, 0, pFont, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Format(Val(prn_Yrn_RcptWt), "##########0.000"), LMargin + C1 + C2 - 10, CurY, 1, 0, pFont, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Trim(Val(prn_EmpBg_Rcpt)), LMargin + C1 + C2 + C3 - 10, CurY, 1, 0, pFont, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Trim(Val(prn_EmpBm_Rcpt)), LMargin + C1 + C2 + C3 + C4 - 10, CurY, 1, 0, pFont, prn_PageNo)

                    CurY = CurY + TxtHgt + 7 '10
                    Print_To_PrintDoc_BRT(e, "Excess/Shortage", LMargin + 10, CurY, 0, 0, pFont, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Format(Val(prn_Yrn_ExShWt), "##########0.000"), LMargin + C1 + C2 - 10, CurY, 1, 0, pFont, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "--------", LMargin + C1 + C2 + C3 - 10, CurY, 1, 0, pFont, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "--------", LMargin + C1 + C2 + C3 + C4 - 10, CurY, 1, 0, pFont, prn_PageNo)

                    CurY = CurY + TxtHgt + 13 '15
                    If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + C1, CurY, PageWidth, CurY)


                    CurY = CurY + TxtHgt - 5
                    p1Font = New Font("Calibri", 12, FontStyle.Bold)
                    Print_To_PrintDoc_BRT(e, "Total", LMargin + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Format(Val(prn_Yrn_OpWt) + Val(prn_Yrn_RcptWt) + Val(prn_Yrn_ExShWt), "##########0.000"), LMargin + C1 + C2 - 10, CurY, 1, 0, pFont, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Trim(Val(prn_EmpBg_Op) + Val(prn_EmpBg_Rcpt)), LMargin + C1 + C2 + C3 - 10, CurY, 1, 0, pFont, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Trim(Val(prn_EmpBm_Op) + Val(prn_EmpBm_Rcpt)), LMargin + C1 + C2 + C3 + C4 - 10, CurY, 1, 0, pFont, prn_PageNo)

                    CurY = CurY + TxtHgt + 13 '15
                    If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + C1, CurY, PageWidth, CurY)

                    CurY = CurY + TxtHgt
                    Print_To_PrintDoc_BRT(e, "Consumption", LMargin + 10, CurY, 0, 0, pFont, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Format(Val(prn_Yrn_ConsWt), "##########0.000"), LMargin + C1 + C2 - 10, CurY, 1, 0, pFont, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "-------", LMargin + C1 + C2 + C3 - 10, CurY, 1, 0, pFont, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Trim(Val(prn_EmpBm_Cons)), LMargin + C1 + C2 + C3 + C4 - 10, CurY, 1, 0, pFont, prn_PageNo)

                    CurY = CurY + TxtHgt + 10 '8
                    Print_To_PrintDoc_BRT(e, "Return", LMargin + 10, CurY, 0, 0, pFont, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Format(Val(prn_Yrn_DelvWt), "##########0.000"), LMargin + C1 + C2 - 10, CurY, 1, 0, pFont, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Trim(Val(prn_EmpBg_Delv)), LMargin + C1 + C2 + C3 - 10, CurY, 1, 0, pFont, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Trim(Val(prn_EmpBm_Delv)), LMargin + C1 + C2 + C3 + C4 - 10, CurY, 1, 0, pFont, prn_PageNo)

                    CurY = CurY + TxtHgt + 10 + 3 ' 10
                    If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)


                    CurY = CurY + TxtHgt - 10 + 3 '10
                    p1Font = New Font("Calibri", 12, FontStyle.Bold)
                    Print_To_PrintDoc_BRT(e, "Clg.Balance", LMargin + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Format(Val(prn_Yrn_OpWt) + Val(prn_Yrn_RcptWt) + Val(prn_Yrn_ExShWt) - Val(prn_Yrn_ConsWt) - Val(prn_Yrn_DelvWt), "##########0.000"), LMargin + C1 + C2 - 10, CurY, 1, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Trim(Val(prn_EmpBg_Op) + Val(prn_EmpBg_Rcpt) - Val(prn_EmpBg_Delv)), LMargin + C1 + C2 + C3 - 10, CurY, 1, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Trim(Val(prn_EmpBm_Op) + Val(prn_EmpBm_Rcpt) - Val(prn_EmpBm_Cons) - Val(prn_EmpBm_Delv)), LMargin + C1 + C2 + C3 + C4 - 10, CurY, 1, 0, p1Font, prn_PageNo)


                    CurY = CurY + TxtHgt + 10 + 3 '10
                    If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

                    If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + C1, CurY, LMargin + C1, LnAr(5))
                    If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + C1 + C2, CurY, LMargin + C1 + C2, LnAr(5))
                    If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + C1 + C2 + C3, CurY, LMargin + C1 + C2 + C3, LnAr(5))

                    If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then
                        Y1 = CurY + 0.5
                        Y2 = CurY + +TxtHgt - 10 + TxtHgt + 10
                        Common_Procedures.FillRegionRectangle(e, LMargin, Y1, PageWidth, Y2)
                    End If

                    CurY = CurY + TxtHgt - 10
                    p1Font = New Font("Calibri", 12, FontStyle.Bold)
                    Print_To_PrintDoc_BRT(e, "SET DETAILS", LMargin, CurY, 2, PrintWidth, p1Font, prn_PageNo)

                    CurY = CurY + TxtHgt + 5 '10
                    If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
                    LnAr(6) = CurY

                    C1 = (PageWidth \ 4) - 10
                    C2 = (PageWidth \ 4) - 5
                    C3 = (PageWidth \ 4) - 5
                    C4 = PageWidth - (LMargin + C1 + C2 + C3)

                    p1Font = New Font("Calibri", 10, FontStyle.Regular)

                    W1 = e.Graphics.MeasureString("Set Length  :", p1Font).Width
                    W2 = e.Graphics.MeasureString("Sized Weight :", p1Font).Width
                    W3 = e.Graphics.MeasureString("Sized Meter :", p1Font).Width
                    W4 = e.Graphics.MeasureString("No.of Beams :", p1Font).Width

                    Dim vSetLen As String = ""

                    vSetLen = Format(Val(prn_HdDt.Rows(0).Item("total_warpmeters").ToString) * 1.0936, "#########0")

                    CurY = CurY + TxtHgt
                    Print_To_PrintDoc_BRT(e, "Set Length", LMargin + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, ":", LMargin + W1 + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Trim(Format(Val(vSetLen), "#########0.00")), LMargin + C1 - 20, CurY, 1, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "Sized Weight", LMargin + C1 + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, ":", LMargin + C1 + W2 + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Trim(Format(Val(prn_HdDt.Rows(0).Item("total_pavu_net_weight").ToString), "##########0.00")), LMargin + C1 + C2 - 20, CurY, 1, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "Sized Meter", LMargin + C1 + C2 + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, ":", LMargin + C1 + C2 + W3 + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Format(Val(prn_HdDt.Rows(0).Item("total_pavu_meters").ToString), "##########0.00"), LMargin + C1 + C2 + C3 - 20, CurY, 1, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "No.of Beams", LMargin + C1 + C2 + C3 + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, ":", LMargin + C1 + C2 + C3 + W4 + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Trim(Val(Prn_TtSizBms)), LMargin + C1 + C2 + C3 + C4 - 15, CurY, 1, 0, p1Font, prn_PageNo)

                    CurY = CurY + TxtHgt + 10
                    Print_To_PrintDoc_BRT(e, "Set Weight", LMargin + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, ":", LMargin + W1 + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Trim(Format(Val(prn_Yrn_ConsWt), "#########0.00")), LMargin + C1 - 20, CurY, 1, 0, p1Font, prn_PageNo)

                    Print_To_PrintDoc_BRT(e, "Avg Siz", LMargin + C1 + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, ":", LMargin + C1 + W2 + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    If Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString) <> 0 Then
                        Print_To_PrintDoc_BRT(e, Trim(Format(Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString), "##########0.00")) & " %", LMargin + C1 + C2 - 20, CurY, 1, 0, p1Font, prn_PageNo)
                    Else
                        Print_To_PrintDoc_BRT(e, Trim(Format(Val(prn_HdDt.Rows(0).Item("pickup_percentage").ToString), "##########0.00")) & " %", LMargin + C1 + C2 - 20, CurY, 1, 0, p1Font, prn_PageNo)
                    End If

                    Print_To_PrintDoc_BRT(e, "Elongation", LMargin + C1 + C2 + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, ":", LMargin + C1 + C2 + W3 + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Format(Val(prn_HdDt.Rows(0).Item("elongation_percentage").ToString), "#########0.00") & " %", LMargin + C1 + C2 + C3 - 20, CurY, 1, 0, p1Font, prn_PageNo)

                    CurY = CurY + TxtHgt + 10 + 10
                    If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)


                    C1 = (PageWidth \ 3)
                    C2 = (PageWidth \ 3)
                    C3 = PageWidth - (LMargin + C1 + C2)

                    If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then
                        Y1 = CurY + 0.5
                        Y2 = CurY + +TxtHgt - 10 + TxtHgt + 10
                        Common_Procedures.FillRegionRectangle(e, LMargin, Y1, PageWidth, Y2)
                    End If

                    CurY = CurY + TxtHgt - 10
                    p1Font = New Font("Calibri", 12, FontStyle.Bold)
                    Print_To_PrintDoc_BRT(e, "YARN TRANS. DETAILS", LMargin, CurY, 2, C1, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "EMPTY BAG DETAILS", LMargin + C1, CurY, 2, C2, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "EMPTY BEAM DETAILS", LMargin + C1 + C2, CurY, 2, C3, p1Font, prn_PageNo)

                    CurY = CurY + TxtHgt + 8
                    If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
                    LnAr(6) = CurY


                    p1Font = New Font("Calibri", 10, FontStyle.Regular)

                    W1 = e.Graphics.MeasureString("Receipts No(s):", p1Font).Width


                    vYrnRcptNo1 = Trim(prn_Yrn_RcptNo)
                    vYrnRcptNo2 = ""
                    vYrnRcptNo3 = ""
                    If Len(vYrnRcptNo1) > 22 Then
                        For i = 22 To 1 Step -1
                            If Mid$(Trim(vYrnRcptNo1), i, 1) = " " Or Mid$(Trim(vYrnRcptNo1), i, 1) = "," Or Mid$(Trim(vYrnRcptNo1), i, 1) = "." Or Mid$(Trim(vYrnRcptNo1), i, 1) = "-" Or Mid$(Trim(vYrnRcptNo1), i, 1) = "/" Or Mid$(Trim(vYrnRcptNo1), i, 1) = "_" Or Mid$(Trim(vYrnRcptNo1), i, 1) = "(" Or Mid$(Trim(vYrnRcptNo1), i, 1) = ")" Or Mid$(Trim(vYrnRcptNo1), i, 1) = "\" Or Mid$(Trim(vYrnRcptNo1), i, 1) = "[" Or Mid$(Trim(vYrnRcptNo1), i, 1) = "]" Or Mid$(Trim(vYrnRcptNo1), i, 1) = "{" Or Mid$(Trim(vYrnRcptNo1), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 22
                        vYrnRcptNo2 = Microsoft.VisualBasic.Right(Trim(vYrnRcptNo1), Len(vYrnRcptNo1) - i)
                        vYrnRcptNo1 = Microsoft.VisualBasic.Left(Trim(vYrnRcptNo1), i - 1)
                    End If
                    If Len(vYrnRcptNo2) > 22 Then
                        For i = 22 To 1 Step -1
                            If Mid$(Trim(vYrnRcptNo2), i, 1) = " " Or Mid$(Trim(vYrnRcptNo2), i, 1) = "," Or Mid$(Trim(vYrnRcptNo2), i, 1) = "." Or Mid$(Trim(vYrnRcptNo2), i, 1) = "-" Or Mid$(Trim(vYrnRcptNo2), i, 1) = "/" Or Mid$(Trim(vYrnRcptNo2), i, 1) = "_" Or Mid$(Trim(vYrnRcptNo2), i, 1) = "(" Or Mid$(Trim(vYrnRcptNo2), i, 1) = ")" Or Mid$(Trim(vYrnRcptNo2), i, 1) = "\" Or Mid$(Trim(vYrnRcptNo2), i, 1) = "[" Or Mid$(Trim(vYrnRcptNo2), i, 1) = "]" Or Mid$(Trim(vYrnRcptNo2), i, 1) = "{" Or Mid$(Trim(vYrnRcptNo2), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 22
                        vYrnRcptNo3 = Microsoft.VisualBasic.Right(Trim(vYrnRcptNo2), Len(vYrnRcptNo2) - i)
                        vYrnRcptNo2 = Microsoft.VisualBasic.Left(Trim(vYrnRcptNo2), i - 1)
                    End If

                    vBmRcptNo1 = Trim(prn_EmpBm_RcptNo)
                    vBmRcptNo2 = ""
                    vBmRcptNo3 = ""
                    vBmRcptNo4 = ""
                    vBmRcptNo5 = ""
                    vBmRcptNo6 = ""
                    vBmRcptNo7 = ""

                    If Len(vBmRcptNo1) > 12 Then
                        For i = 12 To 1 Step -1
                            If Mid$(Trim(vBmRcptNo1), i, 1) = " " Or Mid$(Trim(vBmRcptNo1), i, 1) = "," Or Mid$(Trim(vBmRcptNo1), i, 1) = "." Or Mid$(Trim(vBmRcptNo1), i, 1) = "-" Or Mid$(Trim(vBmRcptNo1), i, 1) = "/" Or Mid$(Trim(vBmRcptNo1), i, 1) = "_" Or Mid$(Trim(vBmRcptNo1), i, 1) = "(" Or Mid$(Trim(vBmRcptNo1), i, 1) = ")" Or Mid$(Trim(vBmRcptNo1), i, 1) = "\" Or Mid$(Trim(vBmRcptNo1), i, 1) = "[" Or Mid$(Trim(vBmRcptNo1), i, 1) = "]" Or Mid$(Trim(vBmRcptNo1), i, 1) = "{" Or Mid$(Trim(vBmRcptNo1), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 12
                        vBmRcptNo2 = Microsoft.VisualBasic.Right(Trim(vBmRcptNo1), Len(vBmRcptNo1) - i)
                        vBmRcptNo1 = Microsoft.VisualBasic.Left(Trim(vBmRcptNo1), i - 1)
                    End If
                    If Len(vBmRcptNo2) > 12 Then
                        For i = 12 To 1 Step -1
                            If Mid$(Trim(vBmRcptNo2), i, 1) = " " Or Mid$(Trim(vBmRcptNo2), i, 1) = "," Or Mid$(Trim(vBmRcptNo2), i, 1) = "." Or Mid$(Trim(vBmRcptNo2), i, 1) = "-" Or Mid$(Trim(vBmRcptNo2), i, 1) = "/" Or Mid$(Trim(vBmRcptNo2), i, 1) = "_" Or Mid$(Trim(vBmRcptNo2), i, 1) = "(" Or Mid$(Trim(vBmRcptNo2), i, 1) = ")" Or Mid$(Trim(vBmRcptNo2), i, 1) = "\" Or Mid$(Trim(vBmRcptNo2), i, 1) = "[" Or Mid$(Trim(vBmRcptNo2), i, 1) = "]" Or Mid$(Trim(vBmRcptNo2), i, 1) = "{" Or Mid$(Trim(vBmRcptNo2), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 12
                        vBmRcptNo3 = Microsoft.VisualBasic.Right(Trim(vBmRcptNo2), Len(vBmRcptNo2) - i)
                        vBmRcptNo2 = Microsoft.VisualBasic.Left(Trim(vBmRcptNo2), i - 1)
                    End If
                    If Len(vBmRcptNo3) > 12 Then
                        For i = 12 To 1 Step -1
                            If Mid$(Trim(vBmRcptNo3), i, 1) = " " Or Mid$(Trim(vBmRcptNo3), i, 1) = "," Or Mid$(Trim(vBmRcptNo3), i, 1) = "." Or Mid$(Trim(vBmRcptNo3), i, 1) = "-" Or Mid$(Trim(vBmRcptNo3), i, 1) = "/" Or Mid$(Trim(vBmRcptNo3), i, 1) = "_" Or Mid$(Trim(vBmRcptNo3), i, 1) = "(" Or Mid$(Trim(vBmRcptNo3), i, 1) = ")" Or Mid$(Trim(vBmRcptNo3), i, 1) = "\" Or Mid$(Trim(vBmRcptNo3), i, 1) = "[" Or Mid$(Trim(vBmRcptNo3), i, 1) = "]" Or Mid$(Trim(vBmRcptNo3), i, 1) = "{" Or Mid$(Trim(vBmRcptNo3), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 12
                        vBmRcptNo4 = Microsoft.VisualBasic.Right(Trim(vBmRcptNo3), Len(vBmRcptNo3) - i)
                        vBmRcptNo3 = Microsoft.VisualBasic.Left(Trim(vBmRcptNo3), i - 1)
                    End If


                    '===
                    If Len(vBmRcptNo4) > 12 Then
                        For i = 12 To 1 Step -1
                            If Mid$(Trim(vBmRcptNo4), i, 1) = " " Or Mid$(Trim(vBmRcptNo4), i, 1) = "," Or Mid$(Trim(vBmRcptNo4), i, 1) = "." Or Mid$(Trim(vBmRcptNo4), i, 1) = "-" Or Mid$(Trim(vBmRcptNo4), i, 1) = "/" Or Mid$(Trim(vBmRcptNo4), i, 1) = "_" Or Mid$(Trim(vBmRcptNo4), i, 1) = "(" Or Mid$(Trim(vBmRcptNo4), i, 1) = ")" Or Mid$(Trim(vBmRcptNo4), i, 1) = "\" Or Mid$(Trim(vBmRcptNo4), i, 1) = "[" Or Mid$(Trim(vBmRcptNo4), i, 1) = "]" Or Mid$(Trim(vBmRcptNo4), i, 1) = "{" Or Mid$(Trim(vBmRcptNo4), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 12
                        vBmRcptNo5 = Microsoft.VisualBasic.Right(Trim(vBmRcptNo4), Len(vBmRcptNo4) - i)
                        vBmRcptNo4 = Microsoft.VisualBasic.Left(Trim(vBmRcptNo4), i - 1)
                    End If

                    If Len(vBmRcptNo5) > 12 Then
                        For i = 12 To 1 Step -1
                            If Mid$(Trim(vBmRcptNo5), i, 1) = " " Or Mid$(Trim(vBmRcptNo5), i, 1) = "," Or Mid$(Trim(vBmRcptNo5), i, 1) = "." Or Mid$(Trim(vBmRcptNo5), i, 1) = "-" Or Mid$(Trim(vBmRcptNo5), i, 1) = "/" Or Mid$(Trim(vBmRcptNo5), i, 1) = "_" Or Mid$(Trim(vBmRcptNo5), i, 1) = "(" Or Mid$(Trim(vBmRcptNo5), i, 1) = ")" Or Mid$(Trim(vBmRcptNo5), i, 1) = "\" Or Mid$(Trim(vBmRcptNo5), i, 1) = "[" Or Mid$(Trim(vBmRcptNo5), i, 1) = "]" Or Mid$(Trim(vBmRcptNo5), i, 1) = "{" Or Mid$(Trim(vBmRcptNo5), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 12
                        vBmRcptNo6 = Microsoft.VisualBasic.Right(Trim(vBmRcptNo5), Len(vBmRcptNo5) - i)
                        vBmRcptNo5 = Microsoft.VisualBasic.Left(Trim(vBmRcptNo5), i - 1)
                    End If

                    If Len(vBmRcptNo6) > 12 Then
                        For i = 12 To 1 Step -1
                            If Mid$(Trim(vBmRcptNo6), i, 1) = " " Or Mid$(Trim(vBmRcptNo6), i, 1) = "," Or Mid$(Trim(vBmRcptNo6), i, 1) = "." Or Mid$(Trim(vBmRcptNo6), i, 1) = "-" Or Mid$(Trim(vBmRcptNo6), i, 1) = "/" Or Mid$(Trim(vBmRcptNo6), i, 1) = "_" Or Mid$(Trim(vBmRcptNo6), i, 1) = "(" Or Mid$(Trim(vBmRcptNo6), i, 1) = ")" Or Mid$(Trim(vBmRcptNo6), i, 1) = "\" Or Mid$(Trim(vBmRcptNo6), i, 1) = "[" Or Mid$(Trim(vBmRcptNo6), i, 1) = "]" Or Mid$(Trim(vBmRcptNo6), i, 1) = "{" Or Mid$(Trim(vBmRcptNo6), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 12
                        vBmRcptNo7 = Microsoft.VisualBasic.Right(Trim(vBmRcptNo6), Len(vBmRcptNo6) - i)
                        vBmRcptNo6 = Microsoft.VisualBasic.Left(Trim(vBmRcptNo6), i - 1)
                    End If


                    If Len(vBmRcptNo7) > 12 Then
                        For i = 12 To 1 Step -1
                            If Mid$(Trim(vBmRcptNo7), i, 1) = " " Or Mid$(Trim(vBmRcptNo7), i, 1) = "," Or Mid$(Trim(vBmRcptNo7), i, 1) = "." Or Mid$(Trim(vBmRcptNo7), i, 1) = "-" Or Mid$(Trim(vBmRcptNo7), i, 1) = "/" Or Mid$(Trim(vBmRcptNo7), i, 1) = "_" Or Mid$(Trim(vBmRcptNo7), i, 1) = "(" Or Mid$(Trim(vBmRcptNo7), i, 1) = ")" Or Mid$(Trim(vBmRcptNo7), i, 1) = "\" Or Mid$(Trim(vBmRcptNo7), i, 1) = "[" Or Mid$(Trim(vBmRcptNo7), i, 1) = "]" Or Mid$(Trim(vBmRcptNo7), i, 1) = "{" Or Mid$(Trim(vBmRcptNo7), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 12
                        vBmRcptNo8 = Microsoft.VisualBasic.Right(Trim(vBmRcptNo7), Len(vBmRcptNo7) - i)
                        vBmRcptNo7 = Microsoft.VisualBasic.Left(Trim(vBmRcptNo7), i - 1)
                    End If


                    vBgRcptNo1 = Trim(prn_EmpBg_RcptNo)
                    vBgRcptNo2 = ""
                    vBgRcptNo3 = ""
                    vBgRcptNo4 = ""
                    vBgRcptNo5 = ""
                    vBgRcptNo6 = ""
                    vBgRcptNo7 = ""

                    If Len(vBgRcptNo1) > 20 Then
                        For i = 20 To 1 Step -1
                            If Mid$(Trim(vBgRcptNo1), i, 1) = " " Or Mid$(Trim(vBgRcptNo1), i, 1) = "," Or Mid$(Trim(vBgRcptNo1), i, 1) = "." Or Mid$(Trim(vBgRcptNo1), i, 1) = "-" Or Mid$(Trim(vBgRcptNo1), i, 1) = "/" Or Mid$(Trim(vBgRcptNo1), i, 1) = "_" Or Mid$(Trim(vBgRcptNo1), i, 1) = "(" Or Mid$(Trim(vBgRcptNo1), i, 1) = ")" Or Mid$(Trim(vBgRcptNo1), i, 1) = "\" Or Mid$(Trim(vBgRcptNo1), i, 1) = "[" Or Mid$(Trim(vBgRcptNo1), i, 1) = "]" Or Mid$(Trim(vBgRcptNo1), i, 1) = "{" Or Mid$(Trim(vBgRcptNo1), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 20
                        vBgRcptNo2 = Microsoft.VisualBasic.Right(Trim(vBgRcptNo1), Len(vBgRcptNo1) - i)
                        vBgRcptNo1 = Microsoft.VisualBasic.Left(Trim(vBgRcptNo1), i - 1)
                    End If
                    If Len(vBgRcptNo2) > 20 Then
                        For i = 20 To 1 Step -1
                            If Mid$(Trim(vBgRcptNo2), i, 1) = " " Or Mid$(Trim(vBgRcptNo2), i, 1) = "," Or Mid$(Trim(vBgRcptNo2), i, 1) = "." Or Mid$(Trim(vBgRcptNo2), i, 1) = "-" Or Mid$(Trim(vBgRcptNo2), i, 1) = "/" Or Mid$(Trim(vBgRcptNo2), i, 1) = "_" Or Mid$(Trim(vBgRcptNo2), i, 1) = "(" Or Mid$(Trim(vBgRcptNo2), i, 1) = ")" Or Mid$(Trim(vBgRcptNo2), i, 1) = "\" Or Mid$(Trim(vBgRcptNo2), i, 1) = "[" Or Mid$(Trim(vBgRcptNo2), i, 1) = "]" Or Mid$(Trim(vBgRcptNo2), i, 1) = "{" Or Mid$(Trim(vBgRcptNo2), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 20
                        vBgRcptNo3 = Microsoft.VisualBasic.Right(Trim(vBgRcptNo2), Len(vBgRcptNo2) - i)
                        vBgRcptNo2 = Microsoft.VisualBasic.Left(Trim(vBgRcptNo2), i - 1)
                    End If
                    If Len(vBgRcptNo3) > 20 Then
                        For i = 20 To 1 Step -1
                            If Mid$(Trim(vBgRcptNo3), i, 1) = " " Or Mid$(Trim(vBgRcptNo3), i, 1) = "," Or Mid$(Trim(vBgRcptNo3), i, 1) = "." Or Mid$(Trim(vBgRcptNo3), i, 1) = "-" Or Mid$(Trim(vBgRcptNo3), i, 1) = "/" Or Mid$(Trim(vBgRcptNo3), i, 1) = "_" Or Mid$(Trim(vBgRcptNo3), i, 1) = "(" Or Mid$(Trim(vBgRcptNo3), i, 1) = ")" Or Mid$(Trim(vBgRcptNo3), i, 1) = "\" Or Mid$(Trim(vBgRcptNo3), i, 1) = "[" Or Mid$(Trim(vBgRcptNo3), i, 1) = "]" Or Mid$(Trim(vBgRcptNo3), i, 1) = "{" Or Mid$(Trim(vBgRcptNo3), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 20
                        vBgRcptNo4 = Microsoft.VisualBasic.Right(Trim(vBgRcptNo3), Len(vBgRcptNo3) - i)
                        vBgRcptNo3 = Microsoft.VisualBasic.Left(Trim(vBgRcptNo3), i - 1)
                    End If
                    '=====


                    If Len(vBgRcptNo4) > 20 Then
                        For i = 20 To 1 Step -1
                            If Mid$(Trim(vBgRcptNo4), i, 1) = " " Or Mid$(Trim(vBgRcptNo4), i, 1) = "," Or Mid$(Trim(vBgRcptNo4), i, 1) = "." Or Mid$(Trim(vBgRcptNo4), i, 1) = "-" Or Mid$(Trim(vBgRcptNo4), i, 1) = "/" Or Mid$(Trim(vBgRcptNo4), i, 1) = "_" Or Mid$(Trim(vBgRcptNo4), i, 1) = "(" Or Mid$(Trim(vBgRcptNo4), i, 1) = ")" Or Mid$(Trim(vBgRcptNo4), i, 1) = "\" Or Mid$(Trim(vBgRcptNo4), i, 1) = "[" Or Mid$(Trim(vBgRcptNo4), i, 1) = "]" Or Mid$(Trim(vBgRcptNo4), i, 1) = "{" Or Mid$(Trim(vBgRcptNo4), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 20
                        vBgRcptNo5 = Microsoft.VisualBasic.Right(Trim(vBgRcptNo4), Len(vBgRcptNo4) - i)
                        vBgRcptNo4 = Microsoft.VisualBasic.Left(Trim(vBgRcptNo4), i - 1)
                    End If


                    If Len(vBgRcptNo5) > 20 Then
                        For i = 20 To 1 Step -1
                            If Mid$(Trim(vBgRcptNo5), i, 1) = " " Or Mid$(Trim(vBgRcptNo5), i, 1) = "," Or Mid$(Trim(vBgRcptNo5), i, 1) = "." Or Mid$(Trim(vBgRcptNo5), i, 1) = "-" Or Mid$(Trim(vBgRcptNo5), i, 1) = "/" Or Mid$(Trim(vBgRcptNo5), i, 1) = "_" Or Mid$(Trim(vBgRcptNo5), i, 1) = "(" Or Mid$(Trim(vBgRcptNo5), i, 1) = ")" Or Mid$(Trim(vBgRcptNo5), i, 1) = "\" Or Mid$(Trim(vBgRcptNo5), i, 1) = "[" Or Mid$(Trim(vBgRcptNo5), i, 1) = "]" Or Mid$(Trim(vBgRcptNo5), i, 1) = "{" Or Mid$(Trim(vBgRcptNo5), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 20
                        vBgRcptNo6 = Microsoft.VisualBasic.Right(Trim(vBgRcptNo5), Len(vBgRcptNo5) - i)
                        vBgRcptNo5 = Microsoft.VisualBasic.Left(Trim(vBgRcptNo5), i - 1)
                    End If

                    If Len(vBgRcptNo6) > 20 Then
                        For i = 20 To 1 Step -1
                            If Mid$(Trim(vBgRcptNo6), i, 1) = " " Or Mid$(Trim(vBgRcptNo6), i, 1) = "," Or Mid$(Trim(vBgRcptNo6), i, 1) = "." Or Mid$(Trim(vBgRcptNo6), i, 1) = "-" Or Mid$(Trim(vBgRcptNo6), i, 1) = "/" Or Mid$(Trim(vBgRcptNo6), i, 1) = "_" Or Mid$(Trim(vBgRcptNo6), i, 1) = "(" Or Mid$(Trim(vBgRcptNo6), i, 1) = ")" Or Mid$(Trim(vBgRcptNo6), i, 1) = "\" Or Mid$(Trim(vBgRcptNo6), i, 1) = "[" Or Mid$(Trim(vBgRcptNo6), i, 1) = "]" Or Mid$(Trim(vBgRcptNo6), i, 1) = "{" Or Mid$(Trim(vBgRcptNo6), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 20
                        vBgRcptNo7 = Microsoft.VisualBasic.Right(Trim(vBgRcptNo6), Len(vBgRcptNo6) - i)
                        vBgRcptNo6 = Microsoft.VisualBasic.Left(Trim(vBgRcptNo6), i - 1)
                    End If


                    If Len(vBgRcptNo7) > 20 Then
                        For i = 20 To 1 Step -1
                            If Mid$(Trim(vBgRcptNo7), i, 1) = " " Or Mid$(Trim(vBgRcptNo7), i, 1) = "," Or Mid$(Trim(vBgRcptNo7), i, 1) = "." Or Mid$(Trim(vBgRcptNo7), i, 1) = "-" Or Mid$(Trim(vBgRcptNo7), i, 1) = "/" Or Mid$(Trim(vBgRcptNo7), i, 1) = "_" Or Mid$(Trim(vBgRcptNo7), i, 1) = "(" Or Mid$(Trim(vBgRcptNo7), i, 1) = ")" Or Mid$(Trim(vBgRcptNo7), i, 1) = "\" Or Mid$(Trim(vBgRcptNo7), i, 1) = "[" Or Mid$(Trim(vBgRcptNo7), i, 1) = "]" Or Mid$(Trim(vBgRcptNo7), i, 1) = "{" Or Mid$(Trim(vBgRcptNo7), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 20
                        vBgRcptNo8 = Microsoft.VisualBasic.Right(Trim(vBgRcptNo7), Len(vBgRcptNo7) - i)
                        vBgRcptNo7 = Microsoft.VisualBasic.Left(Trim(vBgRcptNo7), i - 1)
                    End If





                    CurY = CurY + TxtHgt + 5
                    Print_To_PrintDoc_BRT(e, "Receipt No(s)", LMargin + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, ":", LMargin + W1 + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Trim(vYrnRcptNo1), LMargin + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "Receipt No(s)", LMargin + C1 + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Trim(vBgRcptNo1), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "Receipt No(s)", LMargin + C1 + C2 + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, ":", LMargin + C1 + C2 + W1 + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Trim(vBmRcptNo1), LMargin + C1 + C2 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)

                    If Trim(vYrnRcptNo2) <> "" Or Trim(vBgRcptNo2) <> "" Or Trim(vBmRcptNo2) <> "" Then
                        CurY = CurY + TxtHgt
                        Print_To_PrintDoc_BRT(e, Trim(vYrnRcptNo2), LMargin + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Trim(vBgRcptNo2), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Trim(vBmRcptNo2), LMargin + C1 + C2 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                    End If
                    If Trim(vYrnRcptNo3) <> "" Or Trim(vBgRcptNo3) <> "" Or Trim(vBmRcptNo3) <> "" Then
                        CurY = CurY + TxtHgt
                        Print_To_PrintDoc_BRT(e, Trim(vYrnRcptNo3), LMargin + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Trim(vBgRcptNo3), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Trim(vBmRcptNo3), LMargin + C1 + C2 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                    End If

                    If Trim(vBgRcptNo4) <> "" Or Trim(vBmRcptNo4) <> "" Then
                        CurY = CurY + TxtHgt
                        Print_To_PrintDoc_BRT(e, Trim(vBgRcptNo4), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Trim(vBmRcptNo4), LMargin + C1 + C2 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                    End If

                    If Trim(vBgRcptNo5) <> "" Or Trim(vBmRcptNo5) <> "" Then
                        CurY = CurY + TxtHgt
                        Print_To_PrintDoc_BRT(e, Trim(vBgRcptNo5), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Trim(vBmRcptNo5), LMargin + C1 + C2 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                    End If

                    If Trim(vBgRcptNo6) <> "" Or Trim(vBmRcptNo6) <> "" Then
                        CurY = CurY + TxtHgt
                        Print_To_PrintDoc_BRT(e, Trim(vBgRcptNo6), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Trim(vBmRcptNo6), LMargin + C1 + C2 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                    End If

                    If Trim(vBgRcptNo7) <> "" Or Trim(vBmRcptNo7) <> "" Then
                        CurY = CurY + TxtHgt
                        Print_To_PrintDoc_BRT(e, Trim(vBgRcptNo7), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Trim(vBmRcptNo7), LMargin + C1 + C2 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                    End If

                    If Trim(vBgRcptNo8) <> "" Or Trim(vBmRcptNo8) <> "" Then
                        CurY = CurY + TxtHgt
                        Print_To_PrintDoc_BRT(e, Trim(vBgRcptNo8), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Trim(vBmRcptNo8), LMargin + C1 + C2 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                    End If

                    vYrnRetNo1 = Trim(prn_Yrn_DcNo)
                    vYrnRetNo2 = ""
                    vYrnRetNo3 = ""
                    If Len(vYrnRetNo1) > 22 Then
                        For i = 22 To 1 Step -1
                            If Mid$(Trim(vYrnRetNo1), i, 1) = " " Or Mid$(Trim(vYrnRetNo1), i, 1) = "," Or Mid$(Trim(vYrnRetNo1), i, 1) = "." Or Mid$(Trim(vYrnRetNo1), i, 1) = "-" Or Mid$(Trim(vYrnRetNo1), i, 1) = "/" Or Mid$(Trim(vYrnRetNo1), i, 1) = "_" Or Mid$(Trim(vYrnRetNo1), i, 1) = "(" Or Mid$(Trim(vYrnRetNo1), i, 1) = ")" Or Mid$(Trim(vYrnRetNo1), i, 1) = "\" Or Mid$(Trim(vYrnRetNo1), i, 1) = "[" Or Mid$(Trim(vYrnRetNo1), i, 1) = "]" Or Mid$(Trim(vYrnRetNo1), i, 1) = "{" Or Mid$(Trim(vYrnRetNo1), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 22
                        vYrnRetNo2 = Microsoft.VisualBasic.Right(Trim(vYrnRetNo1), Len(vYrnRetNo1) - i)
                        vYrnRetNo1 = Microsoft.VisualBasic.Left(Trim(vYrnRetNo1), i - 1)
                    End If
                    If Len(vYrnRetNo2) > 22 Then
                        For i = 22 To 1 Step -1
                            If Mid$(Trim(vYrnRetNo2), i, 1) = " " Or Mid$(Trim(vYrnRetNo2), i, 1) = "," Or Mid$(Trim(vYrnRetNo2), i, 1) = "." Or Mid$(Trim(vYrnRetNo2), i, 1) = "-" Or Mid$(Trim(vYrnRetNo2), i, 1) = "/" Or Mid$(Trim(vYrnRetNo2), i, 1) = "_" Or Mid$(Trim(vYrnRetNo2), i, 1) = "(" Or Mid$(Trim(vYrnRetNo2), i, 1) = ")" Or Mid$(Trim(vYrnRetNo2), i, 1) = "\" Or Mid$(Trim(vYrnRetNo2), i, 1) = "[" Or Mid$(Trim(vYrnRetNo2), i, 1) = "]" Or Mid$(Trim(vYrnRetNo2), i, 1) = "{" Or Mid$(Trim(vYrnRetNo2), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 22
                        vYrnRetNo3 = Microsoft.VisualBasic.Right(Trim(vYrnRetNo2), Len(vYrnRetNo2) - i)
                        vYrnRetNo2 = Microsoft.VisualBasic.Left(Trim(vYrnRetNo2), i - 1)
                    End If

                    vBmRetNo1 = Trim(prn_EmpBm_DcNo)
                    vBmRetNo2 = ""
                    vBmRetNo3 = ""
                    vBmRetNo4 = ""
                    vBmRetNo5 = ""
                    vBmRetNo6 = ""
                    vBmRetNo7 = ""

                    If Len(vBmRetNo1) > 12 Then
                        For i = 12 To 1 Step -1
                            If Mid$(Trim(vBmRetNo1), i, 1) = " " Or Mid$(Trim(vBmRetNo1), i, 1) = "," Or Mid$(Trim(vBmRetNo1), i, 1) = "." Or Mid$(Trim(vBmRetNo1), i, 1) = "-" Or Mid$(Trim(vBmRetNo1), i, 1) = "/" Or Mid$(Trim(vBmRetNo1), i, 1) = "_" Or Mid$(Trim(vBmRetNo1), i, 1) = "(" Or Mid$(Trim(vBmRetNo1), i, 1) = ")" Or Mid$(Trim(vBmRetNo1), i, 1) = "\" Or Mid$(Trim(vBmRetNo1), i, 1) = "[" Or Mid$(Trim(vBmRetNo1), i, 1) = "]" Or Mid$(Trim(vBmRetNo1), i, 1) = "{" Or Mid$(Trim(vBmRetNo1), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 12
                        vBmRetNo2 = Microsoft.VisualBasic.Right(Trim(vBmRetNo1), Len(vBmRetNo1) - i)
                        vBmRetNo1 = Microsoft.VisualBasic.Left(Trim(vBmRetNo1), i - 1)
                    End If
                    If Len(vBmRetNo2) > 12 Then
                        For i = 12 To 1 Step -1
                            If Mid$(Trim(vBmRetNo2), i, 1) = " " Or Mid$(Trim(vBmRetNo2), i, 1) = "," Or Mid$(Trim(vBmRetNo2), i, 1) = "." Or Mid$(Trim(vBmRetNo2), i, 1) = "-" Or Mid$(Trim(vBmRetNo2), i, 1) = "/" Or Mid$(Trim(vBmRetNo2), i, 1) = "_" Or Mid$(Trim(vBmRetNo2), i, 1) = "(" Or Mid$(Trim(vBmRetNo2), i, 1) = ")" Or Mid$(Trim(vBmRetNo2), i, 1) = "\" Or Mid$(Trim(vBmRetNo2), i, 1) = "[" Or Mid$(Trim(vBmRetNo2), i, 1) = "]" Or Mid$(Trim(vBmRetNo2), i, 1) = "{" Or Mid$(Trim(vBmRetNo2), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 12
                        vBmRetNo3 = Microsoft.VisualBasic.Right(Trim(vBmRetNo2), Len(vBmRetNo2) - i)
                        vBmRetNo2 = Microsoft.VisualBasic.Left(Trim(vBmRetNo2), i - 1)
                    End If
                    If Len(vBmRetNo3) > 12 Then
                        For i = 12 To 1 Step -1
                            If Mid$(Trim(vBmRetNo3), i, 1) = " " Or Mid$(Trim(vBmRetNo3), i, 1) = "," Or Mid$(Trim(vBmRetNo3), i, 1) = "." Or Mid$(Trim(vBmRetNo3), i, 1) = "-" Or Mid$(Trim(vBmRetNo3), i, 1) = "/" Or Mid$(Trim(vBmRetNo3), i, 1) = "_" Or Mid$(Trim(vBmRetNo3), i, 1) = "(" Or Mid$(Trim(vBmRetNo3), i, 1) = ")" Or Mid$(Trim(vBmRetNo3), i, 1) = "\" Or Mid$(Trim(vBmRetNo3), i, 1) = "[" Or Mid$(Trim(vBmRetNo3), i, 1) = "]" Or Mid$(Trim(vBmRetNo3), i, 1) = "{" Or Mid$(Trim(vBmRetNo3), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 12
                        vBmRetNo4 = Microsoft.VisualBasic.Right(Trim(vBmRetNo3), Len(vBmRetNo3) - i)
                        vBmRetNo3 = Microsoft.VisualBasic.Left(Trim(vBmRetNo3), i - 1)
                    End If
                    '===
                    If Len(vBmRetNo4) > 12 Then
                        For i = 12 To 1 Step -1
                            If Mid$(Trim(vBmRetNo4), i, 1) = " " Or Mid$(Trim(vBmRetNo4), i, 1) = "," Or Mid$(Trim(vBmRetNo4), i, 1) = "." Or Mid$(Trim(vBmRetNo4), i, 1) = "-" Or Mid$(Trim(vBmRetNo4), i, 1) = "/" Or Mid$(Trim(vBmRetNo4), i, 1) = "_" Or Mid$(Trim(vBmRetNo4), i, 1) = "(" Or Mid$(Trim(vBmRetNo4), i, 1) = ")" Or Mid$(Trim(vBmRetNo4), i, 1) = "\" Or Mid$(Trim(vBmRetNo4), i, 1) = "[" Or Mid$(Trim(vBmRetNo4), i, 1) = "]" Or Mid$(Trim(vBmRetNo4), i, 1) = "{" Or Mid$(Trim(vBmRetNo4), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 12
                        vBmRetNo5 = Microsoft.VisualBasic.Right(Trim(vBmRetNo4), Len(vBmRetNo4) - i)
                        vBmRetNo5 = Microsoft.VisualBasic.Left(Trim(vBmRetNo4), i - 1)
                    End If

                    If Len(vBmRetNo5) > 12 Then
                        For i = 12 To 1 Step -1
                            If Mid$(Trim(vBmRetNo5), i, 1) = " " Or Mid$(Trim(vBmRetNo5), i, 1) = "," Or Mid$(Trim(vBmRetNo5), i, 1) = "." Or Mid$(Trim(vBmRetNo5), i, 1) = "-" Or Mid$(Trim(vBmRetNo5), i, 1) = "/" Or Mid$(Trim(vBmRetNo5), i, 1) = "_" Or Mid$(Trim(vBmRetNo5), i, 1) = "(" Or Mid$(Trim(vBmRetNo5), i, 1) = ")" Or Mid$(Trim(vBmRetNo5), i, 1) = "\" Or Mid$(Trim(vBmRetNo5), i, 1) = "[" Or Mid$(Trim(vBmRetNo5), i, 1) = "]" Or Mid$(Trim(vBmRetNo5), i, 1) = "{" Or Mid$(Trim(vBmRetNo5), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 12
                        vBmRetNo6 = Microsoft.VisualBasic.Right(Trim(vBmRetNo5), Len(vBmRetNo5) - i)
                        vBmRetNo5 = Microsoft.VisualBasic.Left(Trim(vBmRetNo5), i - 1)
                    End If
                    If Len(vBmRetNo6) > 12 Then
                        For i = 12 To 1 Step -1
                            If Mid$(Trim(vBmRetNo6), i, 1) = " " Or Mid$(Trim(vBmRetNo6), i, 1) = "," Or Mid$(Trim(vBmRetNo6), i, 1) = "." Or Mid$(Trim(vBmRetNo6), i, 1) = "-" Or Mid$(Trim(vBmRetNo6), i, 1) = "/" Or Mid$(Trim(vBmRetNo6), i, 1) = "_" Or Mid$(Trim(vBmRetNo6), i, 1) = "(" Or Mid$(Trim(vBmRetNo6), i, 1) = ")" Or Mid$(Trim(vBmRetNo6), i, 1) = "\" Or Mid$(Trim(vBmRetNo6), i, 1) = "[" Or Mid$(Trim(vBmRetNo6), i, 1) = "]" Or Mid$(Trim(vBmRetNo6), i, 1) = "{" Or Mid$(Trim(vBmRetNo6), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 12
                        vBmRetNo7 = Microsoft.VisualBasic.Right(Trim(vBmRetNo6), Len(vBmRetNo6) - i)
                        vBmRetNo6 = Microsoft.VisualBasic.Left(Trim(vBmRetNo6), i - 1)
                    End If

                    If Len(vBmRetNo7) > 12 Then
                        For i = 12 To 1 Step -1
                            If Mid$(Trim(vBmRetNo7), i, 1) = " " Or Mid$(Trim(vBmRetNo7), i, 1) = "," Or Mid$(Trim(vBmRetNo7), i, 1) = "." Or Mid$(Trim(vBmRetNo7), i, 1) = "-" Or Mid$(Trim(vBmRetNo7), i, 1) = "/" Or Mid$(Trim(vBmRetNo7), i, 1) = "_" Or Mid$(Trim(vBmRetNo7), i, 1) = "(" Or Mid$(Trim(vBmRetNo7), i, 1) = ")" Or Mid$(Trim(vBmRetNo7), i, 1) = "\" Or Mid$(Trim(vBmRetNo7), i, 1) = "[" Or Mid$(Trim(vBmRetNo7), i, 1) = "]" Or Mid$(Trim(vBmRetNo7), i, 1) = "{" Or Mid$(Trim(vBmRetNo7), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 12
                        vBmRetNo8 = Microsoft.VisualBasic.Right(Trim(vBmRetNo7), Len(vBmRetNo7) - i)
                        vBmRetNo7 = Microsoft.VisualBasic.Left(Trim(vBmRetNo7), i - 1)
                    End If


                    vBgRetNo1 = Trim(prn_EmpBg_DcNo)
                    vBgRetNo2 = ""
                    vBgRetNo3 = ""
                    vBgRetNo4 = ""
                    vBgRetNo5 = ""
                    vBgRetNo6 = ""
                    vBgRetNo7 = ""


                    If Len(vBgRetNo1) > 25 Then
                        For i = 25 To 1 Step -1
                            If Mid$(Trim(vBgRetNo1), i, 1) = " " Or Mid$(Trim(vBgRetNo1), i, 1) = "," Or Mid$(Trim(vBgRetNo1), i, 1) = "." Or Mid$(Trim(vBgRetNo1), i, 1) = "-" Or Mid$(Trim(vBgRetNo1), i, 1) = "/" Or Mid$(Trim(vBgRetNo1), i, 1) = "_" Or Mid$(Trim(vBgRetNo1), i, 1) = "(" Or Mid$(Trim(vBgRetNo1), i, 1) = ")" Or Mid$(Trim(vBgRetNo1), i, 1) = "\" Or Mid$(Trim(vBgRetNo1), i, 1) = "[" Or Mid$(Trim(vBgRetNo1), i, 1) = "]" Or Mid$(Trim(vBgRetNo1), i, 1) = "{" Or Mid$(Trim(vBgRetNo1), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 25
                        vBgRetNo2 = Microsoft.VisualBasic.Right(Trim(vBgRetNo1), Len(vBgRetNo1) - i)
                        vBgRetNo1 = Microsoft.VisualBasic.Left(Trim(vBgRetNo1), i - 1)
                    End If
                    If Len(vBgRetNo2) > 25 Then
                        For i = 25 To 1 Step -1
                            If Mid$(Trim(vBgRetNo2), i, 1) = " " Or Mid$(Trim(vBgRetNo2), i, 1) = "," Or Mid$(Trim(vBgRetNo2), i, 1) = "." Or Mid$(Trim(vBgRetNo2), i, 1) = "-" Or Mid$(Trim(vBgRetNo2), i, 1) = "/" Or Mid$(Trim(vBgRetNo2), i, 1) = "_" Or Mid$(Trim(vBgRetNo2), i, 1) = "(" Or Mid$(Trim(vBgRetNo2), i, 1) = ")" Or Mid$(Trim(vBgRetNo2), i, 1) = "\" Or Mid$(Trim(vBgRetNo2), i, 1) = "[" Or Mid$(Trim(vBgRetNo2), i, 1) = "]" Or Mid$(Trim(vBgRetNo2), i, 1) = "{" Or Mid$(Trim(vBgRetNo2), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 25
                        vBgRetNo3 = Microsoft.VisualBasic.Right(Trim(vBgRetNo2), Len(vBgRetNo2) - i)
                        vBgRetNo2 = Microsoft.VisualBasic.Left(Trim(vBgRetNo2), i - 1)
                    End If
                    If Len(vBgRetNo3) > 25 Then
                        For i = 25 To 1 Step -1
                            If Mid$(Trim(vBgRetNo3), i, 1) = " " Or Mid$(Trim(vBgRetNo3), i, 1) = "," Or Mid$(Trim(vBgRetNo3), i, 1) = "." Or Mid$(Trim(vBgRetNo3), i, 1) = "-" Or Mid$(Trim(vBgRetNo3), i, 1) = "/" Or Mid$(Trim(vBgRetNo3), i, 1) = "_" Or Mid$(Trim(vBgRetNo3), i, 1) = "(" Or Mid$(Trim(vBgRetNo3), i, 1) = ")" Or Mid$(Trim(vBgRetNo3), i, 1) = "\" Or Mid$(Trim(vBgRetNo3), i, 1) = "[" Or Mid$(Trim(vBgRetNo3), i, 1) = "]" Or Mid$(Trim(vBgRetNo3), i, 1) = "{" Or Mid$(Trim(vBgRetNo3), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 25
                        vBgRetNo4 = Microsoft.VisualBasic.Right(Trim(vBgRetNo3), Len(vBgRetNo3) - i)
                        vBgRetNo3 = Microsoft.VisualBasic.Left(Trim(vBgRetNo3), i - 1)
                    End If

                    '====
                    If Len(vBgRetNo4) > 25 Then
                        For i = 25 To 1 Step -1
                            If Mid$(Trim(vBgRetNo4), i, 1) = " " Or Mid$(Trim(vBgRetNo4), i, 1) = "," Or Mid$(Trim(vBgRetNo4), i, 1) = "." Or Mid$(Trim(vBgRetNo4), i, 1) = "-" Or Mid$(Trim(vBgRetNo4), i, 1) = "/" Or Mid$(Trim(vBgRetNo4), i, 1) = "_" Or Mid$(Trim(vBgRetNo4), i, 1) = "(" Or Mid$(Trim(vBgRetNo4), i, 1) = ")" Or Mid$(Trim(vBgRetNo4), i, 1) = "\" Or Mid$(Trim(vBgRetNo4), i, 1) = "[" Or Mid$(Trim(vBgRetNo4), i, 1) = "]" Or Mid$(Trim(vBgRetNo4), i, 1) = "{" Or Mid$(Trim(vBgRetNo4), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 25
                        vBgRetNo5 = Microsoft.VisualBasic.Right(Trim(vBgRetNo4), Len(vBgRetNo4) - i)
                        vBgRetNo4 = Microsoft.VisualBasic.Left(Trim(vBgRetNo4), i - 1)
                    End If

                    If Len(vBgRetNo5) > 25 Then
                        For i = 25 To 1 Step -1
                            If Mid$(Trim(vBgRetNo5), i, 1) = " " Or Mid$(Trim(vBgRetNo5), i, 1) = "," Or Mid$(Trim(vBgRetNo5), i, 1) = "." Or Mid$(Trim(vBgRetNo5), i, 1) = "-" Or Mid$(Trim(vBgRetNo5), i, 1) = "/" Or Mid$(Trim(vBgRetNo5), i, 1) = "_" Or Mid$(Trim(vBgRetNo5), i, 1) = "(" Or Mid$(Trim(vBgRetNo5), i, 1) = ")" Or Mid$(Trim(vBgRetNo5), i, 1) = "\" Or Mid$(Trim(vBgRetNo5), i, 1) = "[" Or Mid$(Trim(vBgRetNo5), i, 1) = "]" Or Mid$(Trim(vBgRetNo5), i, 1) = "{" Or Mid$(Trim(vBgRetNo5), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 25
                        vBgRetNo6 = Microsoft.VisualBasic.Right(Trim(vBgRetNo5), Len(vBgRetNo5) - i)
                        vBgRetNo5 = Microsoft.VisualBasic.Left(Trim(vBgRetNo5), i - 1)
                    End If
                    If Len(vBgRetNo6) > 25 Then
                        For i = 25 To 1 Step -1
                            If Mid$(Trim(vBgRetNo6), i, 1) = " " Or Mid$(Trim(vBgRetNo6), i, 1) = "," Or Mid$(Trim(vBgRetNo6), i, 1) = "." Or Mid$(Trim(vBgRetNo6), i, 1) = "-" Or Mid$(Trim(vBgRetNo6), i, 1) = "/" Or Mid$(Trim(vBgRetNo6), i, 1) = "_" Or Mid$(Trim(vBgRetNo6), i, 1) = "(" Or Mid$(Trim(vBgRetNo6), i, 1) = ")" Or Mid$(Trim(vBgRetNo6), i, 1) = "\" Or Mid$(Trim(vBgRetNo6), i, 1) = "[" Or Mid$(Trim(vBgRetNo6), i, 1) = "]" Or Mid$(Trim(vBgRetNo6), i, 1) = "{" Or Mid$(Trim(vBgRetNo6), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 25
                        vBgRetNo7 = Microsoft.VisualBasic.Right(Trim(vBgRetNo6), Len(vBgRetNo6) - i)
                        vBgRetNo6 = Microsoft.VisualBasic.Left(Trim(vBgRetNo6), i - 1)
                    End If

                    If Len(vBgRetNo7) > 25 Then
                        For i = 25 To 1 Step -1
                            If Mid$(Trim(vBgRetNo7), i, 1) = " " Or Mid$(Trim(vBgRetNo7), i, 1) = "," Or Mid$(Trim(vBgRetNo7), i, 1) = "." Or Mid$(Trim(vBgRetNo7), i, 1) = "-" Or Mid$(Trim(vBgRetNo7), i, 1) = "/" Or Mid$(Trim(vBgRetNo7), i, 1) = "_" Or Mid$(Trim(vBgRetNo7), i, 1) = "(" Or Mid$(Trim(vBgRetNo7), i, 1) = ")" Or Mid$(Trim(vBgRetNo7), i, 1) = "\" Or Mid$(Trim(vBgRetNo7), i, 1) = "[" Or Mid$(Trim(vBgRetNo7), i, 1) = "]" Or Mid$(Trim(vBgRetNo7), i, 1) = "{" Or Mid$(Trim(vBgRetNo7), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 25
                        vBgRetNo8 = Microsoft.VisualBasic.Right(Trim(vBgRetNo7), Len(vBgRetNo7) - i)
                        vBgRetNo7 = Microsoft.VisualBasic.Left(Trim(vBgRetNo7), i - 1)
                    End If

                    CurY = CurY + TxtHgt + 15
                    Print_To_PrintDoc_BRT(e, "Return No(s)", LMargin + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, ":", LMargin + W1 + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Trim(vYrnRetNo1), LMargin + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "Return No(s)", LMargin + C1 + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Trim(vBgRetNo1), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, "Return No(s)", LMargin + C1 + C2 + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, ":", LMargin + C1 + C2 + W1 + 10, CurY, 0, 0, p1Font, prn_PageNo)
                    Print_To_PrintDoc_BRT(e, Trim(vBmRetNo1), LMargin + C1 + C2 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)

                    If Trim(vYrnRetNo2) <> "" Or Trim(vBgRetNo2) <> "" Or Trim(vBmRetNo2) <> "" Then
                        CurY = CurY + TxtHgt
                        Print_To_PrintDoc_BRT(e, Trim(vYrnRetNo2), LMargin + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Trim(vBgRetNo2), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Trim(vBmRetNo2), LMargin + C1 + C2 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                    End If

                    If Trim(vYrnRetNo3) <> "" Or Trim(vBgRetNo3) <> "" Or Trim(vBmRetNo3) <> "" Then
                        CurY = CurY + TxtHgt
                        Print_To_PrintDoc_BRT(e, Trim(vYrnRetNo3), LMargin + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Trim(vBgRetNo3), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Trim(vBmRetNo3), LMargin + C1 + C2 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                    End If

                    '====
                    If Trim(vBgRetNo4) <> "" Or Trim(vBmRetNo4) <> "" Then
                        CurY = CurY + TxtHgt

                        Print_To_PrintDoc_BRT(e, Trim(vBgRetNo4), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Trim(vBmRetNo4), LMargin + C1 + C2 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                    End If


                    If Trim(vBgRetNo5) <> "" Or Trim(vBmRetNo5) <> "" Then
                        CurY = CurY + TxtHgt

                        Print_To_PrintDoc_BRT(e, Trim(vBgRetNo5), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Trim(vBmRetNo5), LMargin + C1 + C2 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                    End If

                    If Trim(vBgRetNo6) <> "" Or Trim(vBmRetNo6) <> "" Then
                        CurY = CurY + TxtHgt

                        Print_To_PrintDoc_BRT(e, Trim(vBgRetNo6), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Trim(vBmRetNo6), LMargin + C1 + C2 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                    End If

                    If Trim(vBgRetNo7) <> "" Or Trim(vBmRetNo7) <> "" Then
                        CurY = CurY + TxtHgt

                        Print_To_PrintDoc_BRT(e, Trim(vBgRetNo7), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Trim(vBmRetNo7), LMargin + C1 + C2 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                    End If

                    If Trim(vBgRetNo8) <> "" Or Trim(vBmRetNo8) <> "" Then
                        CurY = CurY + TxtHgt

                        Print_To_PrintDoc_BRT(e, Trim(vBgRetNo8), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                        Print_To_PrintDoc_BRT(e, Trim(vBmRetNo8), LMargin + C1 + C2 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                    End If

                    'If Trim(vBgRetNo4) <> "" Then
                    '    CurY = CurY + TxtHgt
                    '    Print_To_PrintDoc_BRT(e, Trim(vBgRetNo4), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                    '    Print_To_PrintDoc_BRT(e, Trim(vBmRetNo4), LMargin + C1 + C2 + W1 + 25, CurY, 0, 0, p1Font, prn_PageNo)
                    'End If

                    CurY = CurY + TxtHgt + 10
                    If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
                    LnAr(7) = CurY


                    p1Font = New Font("Calibri", 12, FontStyle.Bold)


                    CurY = CurY + TxtHgt + 10
                    Print_To_PrintDoc_BRT(e, "Note Previous Set No  :  " & Trim(prn_Yrn_OpStNo), LMargin + 10, CurY, 0, 0, p1Font, prn_PageNo)


                    '----------------------------------------------------------------------------------------------------
                    '**********************      INVOCIE DETAILS    **********************
                    '----------------------------------------------------------------------------------------------------

                    StmtPrint_InvDetails_Status = True
                    If StmtPrint_InvDetails_Status = True Then

                        InvTxtHgt = TxtHgt

                        If Val(prn_PageNo) <= 2 Or Prn_SizInvoice_2ndPage_STS = True Then

                            CurY = CurY + TxtHgt + 20
                            If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
                            LnAr(8) = CurY

                            InvLft = LMargin
                            InvClW2 = (PageWidth \ 4) - 50
                            InvClW3 = (PageWidth \ 4) - 70
                            InvClW4 = (PageWidth \ 4) - 50
                            InvClW1 = PageWidth - (LMargin + InvClW2 + InvClW3 + InvClW4)

                            If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then
                                Y1 = CurY + 0.5
                                Y2 = CurY + InvTxtHgt - 10 + InvTxtHgt + 5 + InvTxtHgt + 5
                                Common_Procedures.FillRegionRectangle(e, LMargin, Y1, PageWidth, Y2)
                            End If

                            CurY = CurY + InvTxtHgt - 10
                            p1Font = New Font("Calibri", 10, FontStyle.Bold)

                            p1Font = New Font("Calibri", 11, FontStyle.Bold)
                            Common_Procedures.Print_To_PrintDocument(e, "INVOICE DETAILS", InvLft, CurY, 2, InvClW1 + InvClW2 + InvClW3 + InvClW4, p1Font)

                            CurY = CurY + InvTxtHgt + 5
                            e.Graphics.DrawLine(Pens.Black, InvLft, CurY, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4, CurY)
                            LnAr(9) = CurY

                            CurY = CurY + 5
                            Print_To_PrintDoc_BRT(e, "PARTICULARS", LMargin, CurY, 2, InvClW1, p1Font, prn_PageNo)
                            Print_To_PrintDoc_BRT(e, "QUANTITY", LMargin + InvClW1, CurY, 2, InvClW2, p1Font, prn_PageNo)
                            Print_To_PrintDoc_BRT(e, "RATE", LMargin + InvClW1 + InvClW2, CurY, 2, InvClW3, p1Font, prn_PageNo)
                            Print_To_PrintDoc_BRT(e, "AMOUNT", LMargin + InvClW1 + InvClW2 + InvClW3, CurY, 2, InvClW4, p1Font, prn_PageNo)

                            CurY = CurY + TxtHgt + 5 '10
                            If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
                            LnAr(10) = CurY





                            p1Font = New Font("Calibri", 8, FontStyle.Regular)

                            NoofInvDets = 0

                            CurY = CurY - 5





                            If Val(prn_HdDt.Rows(0).Item("Warp_Amount").ToString) > 0 Then
                                CurY = CurY + InvTxtHgt
                                Common_Procedures.Print_To_PrintDocument(e, "SIZING CHARGES", InvLft + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("total_warping_net_weight").ToString, InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Warp_Rate").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Warp_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                                NoofInvDets = NoofInvDets + 1
                            End If

                            If Val(prn_HdDt.Rows(0).Item("Rewinding_Amount").ToString) > 0 Then
                                CurY = CurY + InvTxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, "REWINDING CHARGES", InvLft + 5, CurY, 0, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_baby_net_weight").ToString), InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Rewinding_Rate").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Rewinding_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                                NoofInvDets = NoofInvDets + 1
                            End If

                            If Val(prn_HdDt.Rows(0).Item("Packing_Amount").ToString) > 0 Then
                                CurY = CurY + InvTxtHgt
                                Common_Procedures.Print_To_PrintDocument(e, "PACKING CHARGES", InvLft + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("total_pavu_beam").ToString, InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Packing_Rate").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Packing_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                                NoofInvDets = NoofInvDets + 1
                            End If

                            If Val(prn_HdDt.Rows(0).Item("Welding_Amount").ToString) > 0 Then
                                CurY = CurY + InvTxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, "BEAM WELDING CHARGES", InvLft + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("Welding_Beams").ToString), InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Welding_Rate").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Welding_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                                NoofInvDets = NoofInvDets + 1

                            End If


                            If Val(prn_HdDt.Rows(0).Item("Other_Charges").ToString) > 0 Then
                                CurY = CurY + InvTxtHgt
                                Common_Procedures.Print_To_PrintDocument(e, "OTHER CHARGES", InvLft + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Other_Charges").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                                NoofInvDets = NoofInvDets + 1
                            End If

                            'If Val(prn_HdDt.Rows(0).Item("Discount_Amount").ToString) > 0 Then
                            '    CurY = CurY + InvTxtHgt

                            '    If Trim(UCase(prn_HdDt.Rows(0).Item("Discount_Type").ToString)) = "PERCENTAGE" Then
                            '        InvTxt1 = Trim(prn_HdDt.Rows(0).Item("Discount_Text").ToString) & "  @ " & Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString) & " %"
                            '        InvTxt2 = ""

                            '    Else
                            '        InvTxt1 = Trim(prn_HdDt.Rows(0).Item("Discount_Text").ToString) & "  @ " & Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString) & " Paise/Kg"
                            '        InvTxt2 = ""
                            '        'If Val(Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString)) = Val(Format(Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString), "#########0.00").ToString) Then
                            '        '    InvTxt2 = Format(Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString), "#########0.00").ToString
                            '        'Else
                            '        '    InvTxt2 = Format(Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString), "#########0.000").ToString
                            '        'End If

                            '    End If

                            '    Common_Procedures.Print_To_PrintDocument(e, InvTxt1, InvLft + 5, CurY, 0, 0, p1Font)
                            '    'Common_Procedures.Print_To_PrintDocument(e, InvTxt2, InvLft + InvClW1 + InvClW2 + InvClW3  - 5, CurY, 1, 0, pFont)
                            '    Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("Discount_Amount").ToString), InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            '    NoofInvDets = NoofInvDets + 1

                            'End If

                            Dim AssVal As String = ""
                            Dim CGST_Amt As String = ""
                            Dim SGST_Amt As String = ""
                            Dim IGST_Amt As String = ""
                            Dim Inv_Net_Amt As String = ""
                            Dim vInterStateStatus As Boolean = False

                            AssVal = Format(Val(prn_HdDt.Rows(0).Item("Warp_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("Rewinding_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("Packing_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("Welding_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("Other_Charges").ToString), "##########.00")



                            vInterStateStatus = Common_Procedures.Is_InterState_Party(Con, Val(lbl_Company.Tag), Val(prn_HdDt.Rows(0).Item("Ledger_IdNo").ToString))

                            CGST_Amt = ""
                            SGST_Amt = ""
                            IGST_Amt = ""
                            If vInterStateStatus = True Then
                                IGST_Amt = Format(Val(AssVal) * Val(prn_HdDt.Rows(0)("Count_Gst_Perc").ToString) / 100, "##########0.00")

                            Else
                                CGST_Amt = Format(Val(AssVal) * (Val(prn_HdDt.Rows(0)("Count_Gst_Perc").ToString) / 2) / 100, "##########0.00")
                                SGST_Amt = Format(Val(AssVal) * (Val(prn_HdDt.Rows(0)("Count_Gst_Perc").ToString) / 2) / 100, "##########0.00")

                            End If



                            If Val(CGST_Amt) > 0 Then
                                CurY = CurY + InvTxtHgt
                                Common_Procedures.Print_To_PrintDocument(e, "CGST - " & Val(Val(prn_HdDt.Rows(0).Item("Count_Gst_Perc").ToString) / 2) & " %", InvLft + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(CGST_Amt), "##########0.00"), InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                                NoofInvDets = NoofInvDets + 1
                            End If

                            If Val(SGST_Amt) > 0 Then
                                CurY = CurY + InvTxtHgt
                                Common_Procedures.Print_To_PrintDocument(e, "SGST - " & Val(Val(prn_HdDt.Rows(0).Item("Count_Gst_Perc").ToString) / 2) & " %", InvLft + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(SGST_Amt), "##########0.00"), InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                                NoofInvDets = NoofInvDets + 1
                            End If

                            If Val(IGST_Amt) > 0 Then
                                CurY = CurY + InvTxtHgt
                                Common_Procedures.Print_To_PrintDocument(e, "IGST - " & prn_HdDt.Rows(0).Item("Count_Gst_Perc").ToString & " %", InvLft + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(IGST_Amt), "##########0.00"), InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                                NoofInvDets = NoofInvDets + 1
                            End If

                            'If Val(prn_HdDt.Rows(0).Item("IGST_Amount").ToString) > 0 Then
                            '    CurY = CurY + InvTxtHgt
                            '    Common_Procedures.Print_To_PrintDocument(e, "IGST - " & prn_HdDt.Rows(0).Item("IGST_Percentage").ToString & " %", InvLft + 5, CurY, 0, 0, pFont)
                            '    Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("IGST_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            '    NoofInvDets = NoofInvDets + 1
                            'End If

                            'For i = NoofInvDets + 1 To 10
                            '    CurY = CurY + TxtHgt
                            'Next


                            InvNetAmt = Format(Val(AssVal) + Val(CGST_Amt) + Val(SGST_Amt) + Val(IGST_Amt), "##########0.00")


                            'InvRndOff = Val(prn_HdDt.Rows(0).Item("Net_Amount").ToString) - Val(InvNetAmt)
                            'CurY = CurY + InvTxtHgt
                            'If Val(InvRndOff) <> 0 Then
                            '    Common_Procedures.Print_To_PrintDocument(e, "ROUND OFF", InvLft + 5, CurY, 0, 0, p1Font)
                            '    Common_Procedures.Print_To_PrintDocument(e, Format(Val(InvRndOff), "########0.00"), InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            '    NoofInvDets = NoofInvDets + 1
                            'End If

                            CurY = CurY + InvTxtHgt + 5
                            e.Graphics.DrawLine(Pens.Black, InvLft, CurY, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4, CurY)

                            CurY = CurY + InvTxtHgt - 5
                            p1Font = New Font("Calibri", 11, FontStyle.Bold)
                            Common_Procedures.Print_To_PrintDocument(e, "NET AMOUNT", InvLft + InvClW1 + InvClW2, CurY, 1, 0, p1Font)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(InvNetAmt), "########0.00"), InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, p1Font)

                            CurY = CurY + InvTxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, InvLft, CurY, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4, CurY)

                            If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + InvClW1, CurY, LMargin + InvClW1, LnAr(9))
                            If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + InvClW1 + InvClW2, CurY, LMargin + InvClW1 + InvClW2, LnAr(9))
                            If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + InvClW1 + InvClW2 + InvClW3, CurY, LMargin + InvClW1 + InvClW2 + InvClW3, LnAr(9))


                            Prn_SizInvoice_2ndPage_STS = False

                        End If

                    Else
                        Prn_SizInvoice_2ndPage_STS = False

                    End If

                End If


                '---------- FOOTER

                Printing_Format14_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, True, prn_PageNo)

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

        If prn_PageNo = 1 Or Prn_SizingDetails_2ndPage_STS = True Then
            If vPrntOnly_PageNo = 0 Then
                e.HasMorePages = True
            ElseIf vPrntOnly_PageNo = 2 Then
                GoTo LABEL_PAGETOP_1
            Else
                e.HasMorePages = False
            End If

        Else
            e.HasMorePages = False

        End If

    End Sub

    Private Sub Printing_Format14_PageHeader(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim p1Font As Font
        Dim Cmp_Name As String, Cmp_Add1 As String, Cmp_Add2 As String, Cmp_Add3 As String, Cmp_Add4 As String
        Dim Cmp_PhNo As String, Cmp_Email As String, Cmp_TinNo As String, Cmp_CstNo As String
        Dim strHeight As Single
        Dim C1 As Single, C2 As Single
        Dim W1 As Single, W2 As Single, W3 As Single
        Dim strWidth As Single = 0
        Dim CurX As Single = 0, IncY As Single = 0
        Dim LftYax As Single = 0
        Dim RgtYax As Single = 0
        Dim Cmp_StateNm As String, Cmp_StateCode As String, Cmp_GSTIN_No As String
        Dim Cmp_PanNo As String = ""
        Dim Y1 As Single = 0, Y2 As Single = 0

        PageNo = PageNo + 1

        CurY = TMargin

        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY
        LnAr(4) = CurY

        If PageNo >= 2 Then Exit Sub

        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = "" : Cmp_Add3 = "" : Cmp_Add4 = ""
        Cmp_PhNo = "" : Cmp_Email = "" : Cmp_TinNo = "" : Cmp_CstNo = ""
        Cmp_StateNm = "" : Cmp_StateCode = "" : Cmp_GSTIN_No = ""
        Cmp_PanNo = ""

        If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            Cmp_Name = Replace(Cmp_Name, Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString), "")
            Cmp_Add1 = Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString)
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address1").ToString
            Cmp_Add3 = prn_HdDt.Rows(0).Item("Company_Address2").ToString
            Cmp_Add4 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        Else
            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address2").ToString
            Cmp_Add3 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString
            Cmp_Add4 = ""

        End If

        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = "PHONE NO : " & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_EMail").ToString) <> "" Then
            Cmp_Email = "EMail : " & prn_HdDt.Rows(0).Item("Company_EMail").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_TinNo").ToString) <> "" Then
            Cmp_TinNo = "TIN NO.: " & prn_HdDt.Rows(0).Item("Company_TinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
            Cmp_CstNo = "CST NO.: " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_State_Name").ToString) <> "" Then
            Cmp_StateNm = "STATE : " & prn_HdDt.Rows(0).Item("Company_State_Name").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_State_Code").ToString) <> "" Then
            Cmp_StateCode = "CODE :" & prn_HdDt.Rows(0).Item("Company_State_Code").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString) <> "" Then
            Cmp_GSTIN_No = "GSTIN : " & prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_PanNo").ToString) <> "" Then
            Cmp_PanNo = "PAN :" & prn_HdDt.Rows(0).Item("Company_PanNo").ToString
        End If

        If Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) <> "UNACCOUNT" Then
            CurY = CurY + TxtHgt - 10

            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1282" Then '---- BRT Sizing (somanur)
                ' If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawImage(DirectCast(Global.Textile.My.Resources.Resources.Company_Logo_BRT, Drawing.Image), LMargin + 20, CurY + 20, 130, 110)
            End If

            p1Font = New Font("Calibri", 20, FontStyle.Bold)
            Print_To_PrintDoc_BRT(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font, PageNo)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            p1Font = New Font("Calibri", 14, FontStyle.Bold)

            CurY = CurY + strHeight
            Print_To_PrintDoc_BRT(e, Cmp_Add1, LMargin, CurY, 2, PrintWidth, p1Font, PageNo)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            p1Font = New Font("Calibri", 12, FontStyle.Bold)
            CurY = CurY + strHeight
            Print_To_PrintDoc_BRT(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, p1Font, PageNo)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            CurY = CurY + strHeight
            Print_To_PrintDoc_BRT(e, Cmp_Add3, LMargin, CurY, 2, PrintWidth, p1Font, PageNo)

            If Trim(Cmp_Add4) <> "" Then
                CurY = CurY + strHeight
                Print_To_PrintDoc_BRT(e, Cmp_Add4, LMargin, CurY, 2, PrintWidth, p1Font, PageNo)
            End If


            CurY = CurY + strHeight
            Print_To_PrintDoc_BRT(e, Cmp_GSTIN_No, LMargin, CurY, 2, PrintWidth, p1Font, PageNo)


            CurY = CurY + strHeight
            Print_To_PrintDoc_BRT(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, p1Font, PageNo)

            CurY = CurY + strHeight
            If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

        End If

        p1Font = New Font("Calibri", 16, FontStyle.Bold)
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then
            Y1 = CurY + 0.5
            Y2 = CurY + 5 + strHeight + 5
            Common_Procedures.FillRegionRectangle(e, LMargin, Y1, PageWidth, Y2)
        End If

        CurY = CurY + 5
        Print_To_PrintDoc_BRT(e, "JOB COMPLETION REPORTS", LMargin, CurY, 2, PrintWidth, p1Font, PageNo)

        CurY = CurY + strHeight + 5
        If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

        LnAr(2) = CurY

        C1 = (PageWidth \ 2) + 50
        C2 = PageWidth - (LMargin + C1)

        W1 = e.Graphics.MeasureString("TO.  :", pFont).Width
        W2 = e.Graphics.MeasureString("Mill Name : ", pFont).Width
        W3 = e.Graphics.MeasureString("Tape Length : ", pFont).Width

        Try

            If Val(PageNo) <= 1 Then

                p1Font = New Font("Calibri", 12, FontStyle.Bold)

                LftYax = CurY
                RgtYax = CurY


                '----- LEFT SIDE

                LftYax = LftYax + 10
                Print_To_PrintDoc_BRT(e, "TO : ", LMargin + 10, LftYax, 0, 0, p1Font, PageNo)
                LftYax = LftYax + TxtHgt
                p1Font = New Font("Calibri", 12, FontStyle.Bold)
                Print_To_PrintDoc_BRT(e, "M/S. " & prn_HdDt.Rows(0).Item("Ledger_MainName").ToString, LMargin + W1 + 10, LftYax, 0, 0, p1Font, PageNo)
                strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

                LftYax = LftYax + strHeight
                Print_To_PrintDoc_BRT(e, prn_HdDt.Rows(0).Item("Ledger_Address1").ToString, LMargin + W1 + 10, LftYax, 0, 0, pFont, PageNo)

                If Trim(prn_HdDt.Rows(0).Item("Ledger_Address2").ToString) <> "" Then
                    LftYax = LftYax + TxtHgt
                    Print_To_PrintDoc_BRT(e, prn_HdDt.Rows(0).Item("Ledger_Address2").ToString, LMargin + W1 + 10, LftYax, 0, 0, pFont, PageNo)
                End If
                If Trim(prn_HdDt.Rows(0).Item("Ledger_Address3").ToString) <> "" Then
                    LftYax = LftYax + TxtHgt
                    Print_To_PrintDoc_BRT(e, prn_HdDt.Rows(0).Item("Ledger_Address3").ToString, LMargin + W1 + 10, LftYax, 0, 0, pFont, PageNo)
                End If
                If Trim(prn_HdDt.Rows(0).Item("Ledger_Address4").ToString) <> "" Then
                    LftYax = LftYax + TxtHgt
                    Print_To_PrintDoc_BRT(e, prn_HdDt.Rows(0).Item("Ledger_Address4").ToString, LMargin + W1 + 10, LftYax, 0, 0, pFont, PageNo)
                End If
                If Trim(prn_HdDt.Rows(0).Item("Ledger_GSTinNo").ToString) <> "" Then
                    LftYax = LftYax + TxtHgt
                    Print_To_PrintDoc_BRT(e, "GSTIN : " & prn_HdDt.Rows(0).Item("Ledger_GSTinNo").ToString, LMargin + W1 + 10, LftYax, 0, 0, pFont, PageNo)
                End If



                '----- RIGHT SIDE

                RgtYax = RgtYax + 10
                IncY = 0
                p1Font = New Font("Calibri", 12, FontStyle.Bold)
                Print_To_PrintDoc_BRT(e, "Set No", LMargin + C1 + 10, RgtYax + IncY, 0, 0, pFont, PageNo)
                Print_To_PrintDoc_BRT(e, ":", LMargin + C1 + W3 + 10, RgtYax + IncY, 0, 0, pFont, PageNo)
                Print_To_PrintDoc_BRT(e, Trim(prn_HdDt.Rows(0).Item("Set_No").ToString), LMargin + C1 + W3 + 25, RgtYax + IncY, 0, 0, p1Font, PageNo)
                strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

                RgtYax = RgtYax + strHeight
                IncY = IncY + 2
                Print_To_PrintDoc_BRT(e, "Set Date", LMargin + C1 + 10, RgtYax + IncY, 0, 0, pFont, PageNo)
                Print_To_PrintDoc_BRT(e, ":", LMargin + C1 + W3 + 10, RgtYax + IncY, 0, 0, pFont, PageNo)
                Print_To_PrintDoc_BRT(e, Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Set_Date").ToString)), LMargin + C1 + W3 + 25, RgtYax + IncY, 0, 0, pFont, PageNo)

                RgtYax = RgtYax + TxtHgt
                IncY = IncY + 2
                Print_To_PrintDoc_BRT(e, "Tape Length", LMargin + C1 + 10, RgtYax + IncY, 0, 0, pFont, PageNo)
                Print_To_PrintDoc_BRT(e, ":", LMargin + C1 + W3 + 10, RgtYax + IncY, 0, 0, pFont, PageNo)
                Print_To_PrintDoc_BRT(e, Trim(prn_HdDt.Rows(0).Item("tape_length").ToString), LMargin + C1 + W3 + 25, RgtYax + IncY, 0, 0, pFont, PageNo)

                RgtYax = RgtYax + TxtHgt
                IncY = IncY + 2
                Print_To_PrintDoc_BRT(e, "Ends", LMargin + C1 + 10, RgtYax + IncY, 0, 0, pFont, PageNo)
                Print_To_PrintDoc_BRT(e, ":", LMargin + C1 + W3 + 10, RgtYax + IncY, 0, 0, pFont, PageNo)
                Print_To_PrintDoc_BRT(e, Trim(prn_HdDt.Rows(0).Item("Ends_Name").ToString), LMargin + C1 + W3 + 25, RgtYax + IncY, 0, 0, pFont, PageNo)

                If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1282" Then
                    RgtYax = RgtYax + TxtHgt
                    IncY = IncY + 2
                    Print_To_PrintDoc_BRT(e, "Count Name", LMargin + C1 + 10, RgtYax + IncY, 0, 0, pFont, PageNo)
                    Print_To_PrintDoc_BRT(e, ":", LMargin + C1 + W3 + 10, RgtYax + IncY, 0, 0, pFont, PageNo)
                    Print_To_PrintDoc_BRT(e, Trim(prn_HdDt.Rows(0).Item("Count_Name").ToString), LMargin + C1 + W3 + 25, RgtYax + IncY, 0, 0, pFont, PageNo)
                End If

                RgtYax = RgtYax + TxtHgt
                IncY = IncY + 2
                Print_To_PrintDoc_BRT(e, "Beam Count", LMargin + C1 + 10, RgtYax + IncY, 0, 0, pFont, PageNo)
                Print_To_PrintDoc_BRT(e, ":", LMargin + C1 + W3 + 10, RgtYax + IncY, 0, 0, pFont, PageNo)
                Print_To_PrintDoc_BRT(e, Trim(prn_HdDt.Rows(0).Item("beam_count").ToString), LMargin + C1 + W3 + 25, RgtYax + IncY, 0, 0, pFont, PageNo)

                RgtYax = RgtYax + TxtHgt
                IncY = IncY + 2
                Print_To_PrintDoc_BRT(e, "Mill Name", LMargin + C1 + 10, RgtYax + IncY, 0, 0, pFont, PageNo)
                Print_To_PrintDoc_BRT(e, ":", LMargin + C1 + W3 + 10, RgtYax + IncY, 0, 0, pFont, PageNo)
                Print_To_PrintDoc_BRT(e, Microsoft.VisualBasic.Left(Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString), 15), LMargin + C1 + W3 + 25, RgtYax + IncY, 0, 0, pFont, PageNo)

                RgtYax = RgtYax + TxtHgt
                IncY = IncY + 2
                If Val(prn_HdDt.Rows(0).Item("pcs_length").ToString) <> 0 Then
                    Print_To_PrintDoc_BRT(e, "Mark", LMargin + C1 + 10, RgtYax + IncY, 0, 0, pFont, PageNo)
                    Print_To_PrintDoc_BRT(e, ":", LMargin + C1 + W3 + 10, RgtYax + IncY, 0, 0, pFont, PageNo)
                    Print_To_PrintDoc_BRT(e, Trim(prn_HdDt.Rows(0).Item("pcs_length").ToString), LMargin + C1 + W3 + 25, RgtYax + IncY, 0, 0, pFont, PageNo)
                End If

                '-------

                CurY = IIf(LftYax > RgtYax, LftYax, RgtYax)

                CurY = CurY + TxtHgt + IncY + 10
                If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

                If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin + C1, CurY, LMargin + C1, LnAr(2))

            End If

            LnAr(3) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub Printing_Format14_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PageHeight As Single, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal is_LastPage As Boolean, ByRef PageNo As Integer)
        Dim p1Font As Font
        Dim Cmp_Name As String
        Dim LS As Single

        Try

            If PageNo <= 1 Then


                If Prn_SizingDetails_2ndPage_STS = False Then
                    LS = PageHeight - TxtHgt - TxtHgt - 10
                    If Trim(Common_Procedures.settings.CustomerCode) = "1282" Then
                        If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
                            LS = LS - TxtHgt
                        End If
                    End If

                    If CurY > LS Then
                        CurY = CurY + TxtHgt
                    Else
                        CurY = LS
                    End If

                    CurY = CurY + TxtHgt + 10

                    If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

                End If

                LnAr(7) = CurY

                If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(1))
                If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(1))

                p1Font = New Font("Calibri", 7, FontStyle.Regular)
                Print_To_PrintDoc_BRT(e, "Software by TSOFT SOLUTIONS, Tirupur. Ph : 8508403222, 0421-4337417", LMargin + 8, CurY + 5, 0, 0, p1Font, PageNo)
                Print_To_PrintDoc_BRT(e, "<Page : 1 of 2>", PageWidth - 10, CurY + 5, 1, 0, pFont, PageNo)

            Else

                LS = PageHeight - 135

                If CurY > LS Then
                    CurY = CurY + TxtHgt
                Else
                    CurY = LS
                End If

                If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
                LnAr(6) = CurY

                CurY = CurY + 10

                If Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) <> "UNACCOUNT" Then

                    If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
                        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
                        Cmp_Name = Replace(Cmp_Name, Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString), "")

                    Else
                        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString

                    End If

                    p1Font = New Font("Calibri", 12, FontStyle.Bold)
                    Print_To_PrintDoc_BRT(e, "For " & Cmp_Name, PageWidth - 15, CurY, 1, 0, p1Font, PageNo)
                    If Trim(Common_Procedures.settings.CustomerCode) = "1282" Then
                        If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
                            CurY = CurY + TxtHgt
                            Print_To_PrintDoc_BRT(e, Trim(UCase(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString)), PageWidth - 15, CurY, 1, 0, p1Font, PageNo)
                        End If
                    End If

                End If

                CurY = CurY + TxtHgt
                CurY = CurY + TxtHgt
                CurY = CurY + TxtHgt
                CurY = CurY + TxtHgt
                Print_To_PrintDoc_BRT(e, "Prepared By", LMargin + 20, CurY, 0, 0, pFont, PageNo)
                Print_To_PrintDoc_BRT(e, "Checked By", LMargin + 275, CurY, 0, 0, pFont, PageNo)

                Print_To_PrintDoc_BRT(e, "Authorised Signatory", PageWidth - 15, CurY, 1, 0, pFont, PageNo)

                CurY = CurY + TxtHgt + 10

                If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
                LnAr(7) = CurY

                If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(1))

                If vPrntOnly_PageNo = 0 Or prn_PageNo = vPrntOnly_PageNo Then e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(1))
                p1Font = New Font("Calibri", 7, FontStyle.Regular)
                'Print_To_PrintDoc_BRT(e, "<Page : 2 of 2>", LMargin, CurY + 5, 2, PageWidth, pFont, PageNo)


            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub Print_To_PrintDoc_BRT(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal PrintText As String, ByVal Xaxis As Decimal, ByVal Yaxis As Decimal, ByVal AlignMent As Integer, ByVal DataWidth As Decimal, ByVal DataFont As Font, ByVal vCur_PageNo As Integer, Optional ByVal BrushColor As Brush = Nothing)
        Dim X As Decimal, Y As Decimal
        Dim strWidth As Decimal, strHeight As Decimal = 0
        Dim vbrushcolor As Brush

        If vPrntOnly_PageNo <> 0 And vCur_PageNo <> vPrntOnly_PageNo Then
            Exit Sub
        End If

        strWidth = e.Graphics.MeasureString(PrintText, DataFont).Width

        If AlignMent = 1 Then
            X = Xaxis - strWidth

        ElseIf AlignMent = 2 Then
            If DataWidth > strWidth Then
                X = Xaxis + (DataWidth - strWidth) / 2
            Else
                X = Xaxis
            End If

        Else
            X = Xaxis

        End If
        Y = Yaxis

        If IsNothing(BrushColor) = False Then
            vbrushcolor = BrushColor
        Else
            vbrushcolor = Brushes.Black
        End If

        e.Graphics.DrawString(PrintText, DataFont, vbrushcolor, X, Y)

    End Sub

    Private Sub Rate_Details_Updation(Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing)

        txt_warp_weight.Text = Format(Val(lbl_ConsumedYarn.Text), "##########0.000")
        txt_Rewinding_Weight.Text = Format(Val(lbl_BabyConeWeight.Text), "##########0.000")
        Txt_No_Of_Beams.Text = Val(lbl_Tot_Sizing_Beams.Text)
        ' provide Rate
        GetRateDetails_FromLedger(sqltr)
        ' amount calculation
        Get_Invoice_rate_details()


    End Sub
    Private Sub btn_Rate_Details_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btn_Rate_Details.Click

        txt_warp_weight.Text = Format(Val(lbl_ConsumedYarn.Text), "##########0.000")
        txt_Rewinding_Weight.Text = Format(Val(lbl_BabyConeWeight.Text), "##########0.000")
        Txt_No_Of_Beams.Text = Val(lbl_Tot_Sizing_Beams.Text)
        GetRateDetails_FromLedger()
        Get_Invoice_rate_details()
        pnl_Rate_Details.Visible = True
        pnl_Back.Enabled = False
    End Sub


    Private Sub btn_RateDetails_Close_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btn_RateDetails_Close.Click
        pnl_Rate_Details.Visible = False
        pnl_Back.Enabled = True
    End Sub

    Private Sub Get_Invoice_rate_details()

        txt_warp_Amount.Text = Format(Val(txt_warp_weight.Text) * Val(txt_warp_Rate.Text), "##########0.00")

        If Val(txt_Rewinding_Rate.Text) <> 0 Then
            Txt_Rewinding_Amount.Text = Format(Val(txt_Rewinding_Weight.Text) * Val(txt_Rewinding_Rate.Text), "##########0.00")
        End If

        Txt_Beams_Amount.Text = Format(Val(Txt_No_Of_Beams.Text) * Val(Txt_Beams_Rate.Text), "##########0.00")

        Txt_Welding_Amount.Text = Format(Val(Txt_Welding_Beams.Text) * Val(Txt_Welding_Rate.Text), "##########0.00")

    End Sub

    ' Rate Details  ===================================================================================
    Private Sub Txt_No_Of_Beams_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Txt_No_Of_Beams.TextChanged
        Get_Invoice_rate_details()
    End Sub

    Private Sub Txt_Beams_Rate_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Txt_Beams_Rate.TextChanged
        Get_Invoice_rate_details()
    End Sub

    Private Sub txt_Rewinding_Rate_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txt_Rewinding_Rate.TextChanged
        Get_Invoice_rate_details()
    End Sub

    Private Sub txt_Rewinding_Weight_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txt_Rewinding_Weight.TextChanged
        Get_Invoice_rate_details()
    End Sub

    Private Sub Txt_Welding_Rate_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Txt_Welding_Rate.TextChanged
        Get_Invoice_rate_details()
    End Sub

    Private Sub Txt_Welding_Beams_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Txt_Welding_Beams.TextChanged
        Get_Invoice_rate_details()
    End Sub

    Private Sub txt_warp_weight_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txt_warp_weight.TextChanged
        Get_Invoice_rate_details()
    End Sub

    Private Sub txt_warp_Rate_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txt_warp_Rate.TextChanged
        Get_Invoice_rate_details()
    End Sub

    ' Rate Details  ===================================================================================

    Private Sub lbl_ConsumedYarn_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles lbl_ConsumedYarn.TextChanged
        txt_warp_weight.Text = Format(Val(lbl_ConsumedYarn.Text), "##########0.000")

    End Sub

    Private Sub lbl_BabyConeWeight_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles lbl_BabyConeWeight.TextChanged
        txt_Rewinding_Weight.Text = Format(Val(lbl_BabyConeWeight.Text), "##########0.000")

    End Sub

    Private Sub lbl_Total_Sizing_Beams_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles lbl_Total_Sizing_Beams.TextChanged
        Txt_No_Of_Beams.Text = Val(lbl_Tot_Sizing_Beams.Text)
    End Sub

    Private Sub cbo_Grid_WareHouse_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Grid_WareHouse.GotFocus
        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "Ledger_Head", "Ledger_Name", "(Ledger_Type = 'GODOWN')", "(Ledger_IdNO = 0 )")
    End Sub

    Private Sub cbo_Grid_WareHouse_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Grid_WareHouse.KeyDown
        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Grid_WareHouse, Nothing, Nothing, "Ledger_Head", "Ledger_Name", "(Ledger_Type = 'GODOWN')", "(Ledger_IdNO = 0 )")

        With dgv_YarnTakenDetails
            If e.KeyCode = 38 And cbo_Grid_WareHouse.DroppedDown = False Or (e.Control = True And e.KeyCode = 38) Then
                If .Visible = True Then
                    .Focus()
                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(.CurrentCell.ColumnIndex - 1)
                    .CurrentCell.Selected = True
                Else
                    cbo_Warping_Machineno.Focus()
                End If
            End If

            If e.KeyCode = 40 And cbo_Grid_WareHouse.DroppedDown = False Or (e.Control = True And e.KeyCode = 40) Then
                'If .CurrentCell.RowIndex = .RowCount - 1 And .CurrentCell.ColumnIndex >= 1 And Trim(.CurrentRow.Cells(1).Value) = "" Then
                If .Visible Then
                    .Focus()
                    .CurrentCell = .Rows(.CurrentRow.Index + 1).Cells(1)
                    .CurrentCell.Selected = True
                Else
                    txt_Remarks.Focus()
                    'Else
                    '    tab_Main.SelectTab(3)
                    '    dgv_BabyConeDetails.Focus()
                    '    dgv_BabyConeDetails.CurrentCell = dgv_BabyConeDetails.CurrentRow.Cells(1)
                    '    dgv_BabyConeDetails.CurrentCell.Selected = True
                End If
            End If
        End With
    End Sub

    Private Sub cbo_Grid_WareHouse_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Grid_WareHouse.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Grid_WareHouse, Nothing, "Ledger_Head", "Ledger_Name", "(Ledger_Type = 'GODOWN')", "(Ledger_IdNO = 0 )")
        With dgv_YarnTakenDetails
            If Asc(e.KeyChar) = 13 Then
                'If .CurrentCell.RowIndex = .RowCount - 1 And .CurrentCell.ColumnIndex >= 1 And Trim(.CurrentRow.Cells(1).Value) = "" Then
                If .Visible Then
                    .Focus()
                    .CurrentCell = .Rows(.CurrentRow.Index + 1).Cells(1)
                    .CurrentCell.Selected = True
                Else
                    txt_Remarks.Focus()
                    'Else
                    '    tab_Main.SelectTab(3)
                    '    dgv_BabyConeDetails.Focus()
                    '    dgv_BabyConeDetails.CurrentCell = dgv_BabyConeDetails.CurrentRow.Cells(1)
                    '    dgv_BabyConeDetails.CurrentCell.Selected = True
                End If
            End If
        End With
    End Sub

    Private Sub cbo_Grid_WareHouse_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Grid_WareHouse.KeyUp
        If e.Control = False And e.KeyCode = 17 Then

            Common_Procedures.MDI_LedType = "GODOWN"
            Dim f As New Ledger_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Grid_WareHouse.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()
        End If
    End Sub

    Private Sub cbo_Grid_WareHouse_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Grid_WareHouse.TextChanged
        Try
            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub
            If cbo_Grid_WareHouse.Visible Then
                If IsNothing(dgv_YarnTakenDetails.CurrentCell) Then Exit Sub
                With dgv_YarnTakenDetails
                    If Val(cbo_Grid_WareHouse.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 9 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_WareHouse.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub

    Public Sub GetRateDetails_FromLedger(Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing)
        Dim da1 As New SqlClient.SqlDataAdapter
        Dim dt1 As New DataTable
        Dim LedID As Integer, CntID As Integer
        Dim cntName As String


        LedID = Common_Procedures.Ledger_AlaisNameToIdNo(Con, cbo_Ledger.Text, sqltr)
        CntID = Common_Procedures.Count_NameToIdNo(Con, cbo_CountName.Text, sqltr)
        cntName = Microsoft.VisualBasic.Mid(Trim(cbo_CountName.Text.ToString), 1, 2)


        If Val(LedID) <> 0 Then
            da1 = New SqlClient.SqlDataAdapter("Select a.* from Ledger_Rate_Details a where a.Ledger_IdNo =" & Val(LedID) & " and a.Count = '" & Trim(cntName) & "' and " & Val(txt_Ends.Text) & " BETWEEN (a.Ends_From) and (a.Ends_To) and a.Loom_Type = '" & Trim(cbo_LoomType.Text) & "'", Con)
            If IsNothing(sqltr) = False Then
                da1.SelectCommand.Transaction = sqltr
            End If
            dt1 = New DataTable
            da1.Fill(dt1)

            txt_warp_Rate.Text = ""
            txt_Rewinding_Rate.Text = ""
            Txt_Beams_Rate.Text = ""
            Txt_Welding_Rate.Text = ""

            If dt1.Rows.Count <> 0 Then

                txt_warp_Rate.Text = Format(Val(dt1.Rows(0).Item("Rate").ToString), "#####0.00")
                txt_Rewinding_Rate.Text = Format(Val(dt1.Rows(0).Item("Rewinding_Charge").ToString), "#####0.00")
                Txt_Beams_Rate.Text = Format(Val(dt1.Rows(0).Item("Packing_Charge").ToString), "#####0.00")
                Txt_Welding_Rate.Text = Format(Val(dt1.Rows(0).Item("Welding_Charge").ToString), "#####0.00")

            End If
        End If
        dt1.Clear()
        dt1.Dispose()
        da1.Dispose()

    End Sub

    Private Sub txt_ExcessShort_Adjustment_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txt_ExcessShort_Adjustment.KeyDown
        If e.KeyCode = 38 Then
            e.Handled = True
            If txt_RwExcSht.Visible And txt_RwExcSht.Enabled Then
                txt_RwExcSht.Focus()
            ElseIf cbo_Rw_MillName.Enabled And cbo_Rw_MillName.Visible Then
                cbo_Rw_MillName.Focus()
            ElseIf txt_RewindingCones.Visible And txt_RewindingCones.Enabled Then
                txt_RewindingCones.Focus()
            ElseIf chk_RewindingStatus.Visible And chk_RewindingStatus.Enabled Then
                chk_RewindingStatus.Focus()
            End If
        End If
        If e.KeyCode = 40 Then
            tab_Main.SelectTab(4)
        End If
    End Sub

    Private Sub txt_ExcessShort_Adjustment_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txt_ExcessShort_Adjustment.KeyPress
        If Asc(e.KeyChar) = 13 Then
            e.Handled = True
            tab_Main.SelectTab(4)
        End If
    End Sub

    Private Sub txt_ExcessShort_Adjustment_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txt_ExcessShort_Adjustment.TextChanged
        Excess_Calculation()
    End Sub

    Private Function get_Max_Warping_Ends() As String
        'Dim Da As New SqlClient.SqlDataAdapter
        'Dim Dt As New DataTable
        Dim vMx_BmNo As String = ""

        'Da = New SqlClient.SqlDataAdapter("Select max(ForOrderBy_BeamNo) from Stock_Yarn_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code LIKE '%/" & Trim(Common_Procedures.FnYearCode) & "' and Reference_code NOT LIKE 'KPARC-%'", Con)
        'Dt = New DataTable
        'Da.Fill(Dt)

        'vMx_BmNo = ""
        'If Dt.Rows.Count > 0 Then
        '    If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
        '        vMx_BmNo = Dt.Rows(0)(0).ToString
        '    End If
        'End If

        'Dt.Dispose()
        'Da.Dispose()

        'vMx_BmNo = Val(vMx_BmNo) + 1

        Return Trim(vMx_BmNo)

    End Function

    Private Sub txt_SortNo_KeyPress(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txt_SortNo.KeyPress
        If Asc(e.KeyChar) = 13 Then
            If MessageBox.Show("Do you want to save ?", "FOR SAVING...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) = DialogResult.Yes Then
                save_record()
            Else
                cbo_Type.Focus()
            End If
        End If
    End Sub



    Private Sub cbo_DeliveryTo_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_DeliveryTo.GotFocus
        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "Delivery_Party_Head", "Ledger_Name", "", "(Ledger_IdNo = 0)")
    End Sub

    Private Sub cbo_DeliveryTo_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_DeliveryTo.KeyDown
        vcbo_KeyDwnVal = e.KeyValue
        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_DeliveryTo, chk_No_Stock_Posting, txt_RewindingCones, "Delivery_Party_Head", "Ledger_Name", "", "(Ledger_IdNo = 0)")

        If (e.KeyValue = 40 And cbo_DeliveryTo.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then

            If txt_RewindingCones.Visible = True And txt_RewindingCones.Enabled = True Then
                txt_RewindingCones.Focus()
            Else

            End If


        End If

    End Sub


    Private Sub cbo_DeliveryTo_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_DeliveryTo.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_DeliveryTo, txt_RewindingCones, "Delivery_Party_Head", "Ledger_Name", "", "(Ledger_IdNo = 0)")
        If Asc(e.KeyChar) = 13 Then

            If txt_RewindingCones.Visible = True And txt_RewindingCones.Enabled = True Then
                txt_RewindingCones.Focus()
            End If

        End If
    End Sub

    Private Sub cbo_Ledger_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cbo_Ledger.SelectedIndexChanged

    End Sub

    Private Sub cbo_DeliveryTo_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_DeliveryTo.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Delivery_Party_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_DeliveryTo.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If

    End Sub


    Private Sub Printing_Format5_1097(ByRef e As System.Drawing.Printing.PrintPageEventArgs)
        Dim Cmd As New SqlClient.SqlCommand
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Da2 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim EntryCode As String
        Dim pFont As Font, p1Font As Font
        Dim psFont As Font
        Dim p2Font As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single, SzTxtHgt As Single
        Dim LnAr(15) As Single, ClArr(20) As Single
        Dim ItmNm1 As String = "", ItmNm2 As String = ""
        Dim SNo As Integer
        Dim Det_Top As Single
        Dim i As Integer = 0, j As Integer = 0, k As Integer = 0
        Dim TtWrpEnds As Single
        Dim TtWrpGrsWgt As Single, TtWrpTrWgt As Single, TtWrpNetWgt As Single
        Dim Wpm() As String, WrpYrd As Single
        Dim TtSizBms As Single
        Dim TtSizGrsWgt As Single, TtSizTrWgt As Single, TtSizNetWgt As Single
        Dim TtSizPcs As Single, TtSizMtrs As Single
        Dim TtYSBgs As Single, TtYSCns As Single, TtYSWgt As Single
        Dim TtOYSWgt As Single
        Dim PL1 As Single, InvLft As Single
        Dim W1 As Single
        Dim Bal_Yrn_Wt As Single, Bal_Bms As Single, Bal_Bgs As Single, Bal_Amt As Single
        Dim NoofItems_PerPage As Integer
        Dim ps As Printing.PaperSize
        Dim OthCntPrintSTS As Integer = 0
        Dim InvClW1 As Single, InvClW2 As Single, InvClW3 As Single, InvClW4 As Single
        Dim NoofInvDets As Integer = 0
        Dim InvTxt1 As String, InvTxt2 As String
        Dim InvNetAmt As Double, InvRndOff As Double
        Dim prn_Siz_Detail As Integer = 0
        Dim Z As Single = 0, X As Single = 0
        Dim YrnTknPrintSTS As Integer = 0
        Dim ByCnPrintSTS As Integer = 0
        Dim Tp_AmtDet As Single = 0
        Dim CurY2 As Single = 0
        Dim Y1 As Single = 0, Y2 As Single = 0
        'Dim whiteBrush As Brush
        Dim nMillName As String
        Dim TtWrYards As Single



        For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(i)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                Exit For
            End If
        Next

        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 10 ' 20
            .Right = 50 ' 40
            .Top = 15  ' 30
            .Bottom = 25
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        pFont = New Font("Calibri", 9, FontStyle.Regular)
        'pFont = New Font("Calibri", 10, FontStyle.Regular)

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With

        'TxtHgt = e.Graphics.MeasureString("A", pFont).Height  ' 20
        TxtHgt = 15 ' 16  ' 17   ' 18  ' e.Graphics.MeasureString("A", pFont).Height  ' 20
        SzTxtHgt = 15

        Erase LnAr
        Erase ClArr

        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        ClArr = New Single(20) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1047" Then '---- Mahalakshmi Textiles (Somanur)
            ClArr(1) = Val(30) : ClArr(2) = 52 : ClArr(3) = 62 : ClArr(4) = 0 : ClArr(5) = 0 : ClArr(6) = 62
            ClArr(7) = Val(30) : ClArr(8) = 65 : ClArr(9) = 0 : ClArr(10) = 0 : ClArr(11) = 60 : ClArr(12) = 50 : ClArr(13) = 70 : ClArr(14) = 50
        Else

            'ClArr(1) = Val(30) : ClArr(2) = 50 : ClArr(3) = 60 : ClArr(4) = 0 : ClArr(5) = 0 : ClArr(6) = 60
            'ClArr(7) = Val(25) : ClArr(8) = 50 : ClArr(9) = 52 : ClArr(10) = 46 : ClArr(11) = 48 : ClArr(12) = 44 : ClArr(13) = 60 : ClArr(14) = 40


            ClArr(1) = Val(20) : ClArr(2) = 40 : ClArr(3) = 60 : ClArr(4) = 0 : ClArr(5) = 0 : ClArr(6) = 58
            ClArr(7) = Val(20) : ClArr(8) = 50 : ClArr(9) = 50 : ClArr(10) = 45 : ClArr(11) = 48 : ClArr(12) = 44 : ClArr(13) = 52 : ClArr(14) = 90
        End If
        ClArr(15) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14))

        'ClArr(1) = Val(25) : ClArr(2) = 40 : ClArr(3) = 48 : ClArr(4) = 50 : ClArr(5) = 46 : ClArr(6) = 48
        'ClArr(7) = Val(25) : ClArr(8) = 50 : ClArr(9) = 52 : ClArr(10) = 46 : ClArr(11) = 48 : ClArr(12) = 44 : ClArr(13) = 60
        'ClArr(14) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13))

        CurY = TMargin

        NoofItems_PerPage = 30

        EntryCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

        Try

            If prn_HdDt.Rows.Count > 0 Then

                prn_Yrn_OpWt = 0 : prn_Yrn_RcptWt = 0 : prn_Yrn_DelvWt = 0
                prn_Yrn_ConsWt = 0 : prn_Yrn_ExShWt = 0
                prn_Yrn_OpStNo = "" : prn_Yrn_RcptNo = "" : prn_Yrn_DcNo = ""

                prn_EmpBm_Op = 0 : prn_EmpBm_Rcpt = 0 : prn_EmpBm_Delv = 0 : prn_EmpBm_Cons = 0
                prn_EmpBm_OpStNo = "" : prn_EmpBm_RcptNo = "" : prn_EmpBm_DcNo = ""

                prn_EmpBg_Op = 0 : prn_EmpBg_Rcpt = 0 : prn_EmpBg_Delv = 0
                prn_EmpBg_OpStNo = "" : prn_EmpBg_RcptNo = "" : prn_EmpBg_DcNo = ""

                prn_Amt_Op = 0 : prn_Amt_Rcpt = 0 : prn_Amt_CurSet = 0
                prn_Amt_OpStNo = "" : prn_Amt_RcptNo = ""

                Cmd.Connection = Con
                Cmd.CommandText = "truncate table Temp_Statement_Yarn_Stock_Summary"
                Cmd.ExecuteNonQuery()

                Stock_calulation()

                Printing_Format5_1097_PageHeader(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, prn_PageNo, CurY, LnAr, ClArr)

                Det_Top = CurY

                If Val(prn_PageNo) <= 1 Then

                    '----------------------------------------------------------------------------------------------------
                    '**********************     WARPING DETAILS     **********************
                    '----------------------------------------------------------------------------------------------------

                    Wpm = Split(Trim(prn_HdDt.Rows(0).Item("warp_meters").ToString), ",")

                    Da1 = New SqlClient.SqlDataAdapter("select distinct(Warp_SlNo) from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' Order by Warp_SlNo", Con)
                    Dt1 = New DataTable
                    Da1.Fill(Dt1)

                    If Dt1.Rows.Count > 0 Then

                        For k = 0 To Dt1.Rows.Count - 1

                            CurY = CurY - 10

                            Da2 = New SqlClient.SqlDataAdapter("select * from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Warp_SlNo = " & Str(Val(Dt1.Rows(k).Item("Warp_SlNo").ToString)) & " Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            WrpYrd = Val(Wpm(k))

                            SNo = 0
                            TtWrpEnds = 0
                            TtWrpGrsWgt = 0 : TtWrpTrWgt = 0 : TtWrpNetWgt = 0

                            If Dt2.Rows.Count > 0 Then

                                For i = 0 To Dt2.Rows.Count - 1

                                    SNo = SNo + 1

                                    CurY = CurY + TxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + 8, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Ends_Name").ToString)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                    If Val(ClArr(4)) <> 0 Then
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                    End If
                                    If Val(ClArr(5)) <> 0 Then
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                                    End If
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                                    TtWrpEnds = TtWrpEnds + Val(Dt2.Rows(i).Item("Ends_Name").ToString)
                                    TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                    TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                    TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)
                                    TtWrYards = TtWrYards + Val(Dt2.Rows(i).Item("warp_meters").ToString)
                                Next i

                            End If

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                            CurY = CurY + TxtHgt - 10
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtWrpEnds)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)

                            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1102" Then
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtWrYards)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                            Else
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                            End If

                            'Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                            If Val(ClArr(4)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                            End If
                            If Val(ClArr(5)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                            End If
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        Next k

                        'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2), CurY, LMargin + ClArr(1) + ClArr(2), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3), LnAr(4))
                        If Val(ClArr(4)) <> 0 Then
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), LnAr(4))
                        End If
                        If Val(ClArr(5)) <> 0 Then
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), LnAr(4))
                        End If
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), LnAr(3))

                    End If

                End If

                '----------------------------------------------------------------------------------------------------
                '**********************     BABY CONE DETAILS       ***************  (Space not enough so diabled,  , If babyCone Details in Single(Only total bags), then it is ok and can be enabled)
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_BabyConeDetails) = 1 Then

                    If Val(prn_PageNo) <= 1 Then

                        CurY = CurY + TxtHgt ' + 10
                        'CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                        p2Font = New Font("Calibri", 10, FontStyle.Regular)

                        'p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "BABYCONE DETAILS", LMargin + ClArr(1), CurY, 2, ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), p1Font)

                        CurY = CurY + TxtHgt + 5 ' + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2), CurY)
                        CurY = CurY + 5 ' + 10

                        Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin, CurY, 2, ClArr(1), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "BAGS", LMargin + ClArr(1), CurY, 2, ClArr(2), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2), CurY, 2, ClArr(3), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, 2, ClArr(5) + (ClArr(6)), pFont)

                        'Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1), CurY, 2, ClArr(2), pFont)
                        'Common_Procedures.Print_To_PrintDocument(e, "BAGS", LMargin + ClArr(1) + ClArr(2), CurY, 2, ClArr(3), pFont)
                        'Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, 2, ClArr(4), pFont)
                        'Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, 2, ClArr(5) + (ClArr(6) \ 2), pFont)

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + 5, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6)), CurY)
                        CurY = CurY + TxtHgt


                        Da2 = New SqlClient.SqlDataAdapter("select * from Specification_BabyCone_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Gross_Weight <> 0 Order by sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - 10

                            For i = 0 To Dt2.Rows.Count - 1

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + 10, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Bags").ToString)), LMargin + ClArr(1) + ClArr(2) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6)) - 5, CurY, 1, 0, pFont)

                                'Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + 10, CurY, 0, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6) \ 2) - 5, CurY, 1, 0, pFont)


                                'TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Bags").ToString)
                                'TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Cones").ToString)
                                'TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + 5, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6)), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString)), LMargin + ClArr(1) + ClArr(2) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_gross_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6)) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 5 ' + 10
                        Common_Procedures.Print_To_PrintDocument(e, "Tare Weight ", LMargin + ClArr(1) + ClArr(2) + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_tare_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6)) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + 5, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6)), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString)), LMargin + ClArr(1) + ClArr(2) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_net_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6)) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 5  ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + 5, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + (ClArr(6)), CurY)

                    End If

                End If

                '---------------------------------------------------------------------------------------------------- 
                '**********************         YARN STOCK SUMMARY FOR OTHER COUNT    **********************
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_Yarn_Other_Count_Particulars) = 1 Then

                    If Val(prn_PageNo) <= 1 Then

                        CurY = CurY + TxtHgt

                        p2Font = New Font("Calibri", 10, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "OTHER COUNT PARTICULARS", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p2Font)

                        CurY = CurY + TxtHgt + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)
                        CurY = CurY + 5

                        Common_Procedures.Print_To_PrintDocument(e, "COUNT NAME", LMargin + ClArr(1) + 15, CurY, 0, ClArr(2) + ClArr(3) + ClArr(4), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, 2, ClArr(5) + ClArr(6) - ClArr(1), pFont)

                        CurY = CurY + TxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)
                        CurY = CurY + TxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select * from Temp_Statement_Other_Yarn_Stock_Summary where Weight <> 0 Order by Count_Name", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0
                        TtOYSWgt = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - 5

                            For i = 0 To Dt2.Rows.Count - 1

                                'If NoofDets > NoofItems_PerPage Then
                                '    CurY = CurY + TxtHgt
                                '    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)
                                '    NoofDets = NoofDets + 1
                                '    Printing_Format3_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, False)
                                '    e.HasMorePages = True
                                '    Return
                                'End If

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(Dt2.Rows(i).Item("Count_Name").ToString), 12), LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)

                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1) - 15, CurY, 1, 0, pFont)

                                TtOYSWgt = TtOYSWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - ClArr(1), CurY)

                    End If

                End If

                '----------------------------------------------------------------------------------------------------
                '**********************      YARN STOCK SUMMARY FOR THIS SET'S COUNT        **********************
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_YarnStockSummary) = 1 Then

                    If Val(prn_PageNo) <= 1 Or Prn_YrnStkSumm_2ndPage_STS = True Then

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK SUMMARY", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                        CurY = CurY + TxtHgt + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)
                        CurY = CurY + 10

                        Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + 2, CurY, 2, ClArr(1) + 15, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + ClArr(1) + 15, CurY, 2, ClArr(2) + ClArr(3) - 15 + ClArr(4) - 25, pFont)
                        If Val(ClArr(4)) <> 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 25, CurY, 2, ClArr(5), pFont)
                        End If
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 25, CurY, 2, ClArr(6) + 25, pFont)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)
                        CurY = CurY + TxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select * from Temp_Statement_Yarn_Stock_Summary where Weight <> 0 Order by Order_By, Mill_Name", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0
                        TtYSBgs = 0 : TtYSCns = 0 : TtYSWgt = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - 10

                            For i = Prn_YrnStkSumm_StartIndx To Dt2.Rows.Count - 1

                                If CurY >= 975 Then

                                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                                    CurY = CurY + TxtHgt
                                    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, p1Font)
                                    CurY = CurY + 5

                                    Prn_YrnStkSumm_2ndPage_STS = True
                                    Prn_YrnStkSumm_StartIndx = i

                                    GoTo YRNSTKSUMM_1000
                                End If

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(Dt2.Rows(i).Item("Mill_Name").ToString), 12), LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)
                                If Val(ClArr(4)) <> 0 Then
                                    Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 25 + ClArr(5) - 5, CurY, 1, 0, pFont)
                                End If
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                                Prn_TtYSBgs = Prn_TtYSBgs + Val(Dt2.Rows(i).Item("Bags").ToString)
                                Prn_TtYSCns = Prn_TtYSCns + Val(Dt2.Rows(i).Item("Cones").ToString)
                                Prn_TtYSWgt = Prn_TtYSWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)
                        If Val(ClArr(4)) <> 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, Val(Prn_TtYSCns), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 25 - 5, CurY, 1, 0, pFont)
                        End If
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtYSWgt), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        Prn_YrnStkSumm_2ndPage_STS = False

                    End If

                End If

YRNSTKSUMM_1000:
                '----------------------------------------------------------------------------------------------------
                '**********************      YARN STOCK DETAILS     **********************
                '----------------------------------------------------------------------------------------------------

                CurY = Det_Top

                CurY = CurY + 3

                PL1 = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14)

                W1 = e.Graphics.MeasureString("Opening Balance : ", pFont).Width

                If Val(prn_PageNo) <= 1 Then

                    p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    'p1Font = New Font("Calibri", 13, FontStyle.Bold Or FontStyle.Underline)  ---  Working
                    Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                    CurY = CurY + TxtHgt + 5

                    Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_OpWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_OpStNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Yrn_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Received", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_RcptWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_RcptNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Yrn_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Consumed Yarn", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_ConsWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    CurY = CurY + TxtHgt
                    If Val(prn_Yrn_ExShWt) < 0 Then
                        Common_Procedures.Print_To_PrintDocument(e, "Short Yarn", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    Else
                        Common_Procedures.Print_To_PrintDocument(e, "Excess Yarn", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    End If

                    CurY = CurY + TxtHgt
                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Delivery", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_DelvWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_DcNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 9, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_Yrn_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    If Val(prn_Yrn_RwExShWt) <> 0 Then

                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_RwExShWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Short", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Excess", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_RwExShStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Set.No. :  " & Trim(prn_Yrn_RwExShStNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                    End If

                    If Val(prn_Yrn_TranfrWt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_TranfrWt) < 0 Then

                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Math.Abs(Val(prn_Yrn_TranfrWt))), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else

                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Math.Abs(Val(prn_Yrn_TranfrWt))), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_TranfrNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_TranfrNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                    End If

                    If Val(prn_Yrn_ExcSht_Wt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_ExcSht_Wt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Exc)", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Math.Abs(Val(prn_Yrn_ExcSht_Wt))), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else

                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Sht)", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Math.Abs(Val(prn_Yrn_ExcSht_Wt))), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_ExcSht_No) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_ExcSht_No) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                    End If


                    Bal_Yrn_Wt = prn_Yrn_OpWt + prn_Yrn_RcptWt - prn_Yrn_DelvWt - prn_Yrn_ConsWt + prn_Yrn_ExShWt + prn_Yrn_RwExShWt + prn_Yrn_TranfrWt + prn_Yrn_ExcSht_Wt

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    CurY = CurY + 10
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Yarn", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Bal_Yrn_Wt), "#########0.000"), PageWidth - 5, CurY, 1, 0, p1Font)

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                End If

                '----------------------------------------------------------------------------------------------------
                '**********************      EMPTY BEAM STOCK DETAILS       **********************
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then

                    If Val(prn_PageNo) <= 1 Then

                        CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "EMPTY BEAM STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                        CurY = CurY + TxtHgt + 5

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Op), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBm_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBm_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Beams Received", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Rcpt), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBm_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBm_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Consumed Beams", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Cons), PageWidth - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Beams Delivered", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Delv), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBm_DcNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBm_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        Bal_Bms = prn_EmpBm_Op + prn_EmpBm_Rcpt - prn_EmpBm_Delv - prn_EmpBm_Cons

                        CurY = CurY + TxtHgt
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                        CurY = CurY + 10
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance Beams", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bms), PageWidth - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    End If

                End If

                '----------------------------------------------------------------------------------------------------
                '**********************      EMPTY BAG STOCK DETAILS        **********************
                '----------------------------------------------------------------------------------------------------
                If Val(Common_Procedures.settings.StatementPrint_EmptyBagStockDetails) = 1 Then

                    If Val(prn_PageNo) <= 1 Then

                        CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "EMPTY BAGS STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                        CurY = CurY + TxtHgt + 5

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Op), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBg_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Bags Received", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Rcpt), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBg_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If


                        CurY = CurY + TxtHgt + 2

                        Common_Procedures.Print_To_PrintDocument(e, "Bags Delivered", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Delv), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_DcNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBg_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        Bal_Bgs = prn_EmpBg_Op + prn_EmpBg_Rcpt - prn_EmpBg_Delv

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                        CurY = CurY + TxtHgt - 10
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance Bags", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bgs), PageWidth - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    End If

                End If

                '---------------------------------------------------------------------------------------------------- 
                '**********************         EMPTY GUNNIES STOCK (SIMPLE)              **********************
                '----------------------------------------------------------------------------------------------------

                If Val(prn_PageNo) <= 1 Then

                    If Val(Common_Procedures.settings.StatementPrint_EmptyBagStockSimple) = 1 Then

                        Bal_Bgs = prn_EmpBg_Op + prn_EmpBg_Rcpt - prn_EmpBg_Delv

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "EMPTY BAGS STOCK", PL1 + 5, CurY, 0, 0, p1Font)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PageWidth - 52, CurY, 0, 0, pFont)
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bgs), PageWidth - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + 5

                    End If

                End If

                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1102" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1163" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1144" Then '---- Ganesh karthik Sizing (Somanur)
                    If Val(prn_PageNo) <= 1 Then
                        If Trim(prn_HdDt.Rows(0).Item("remarks").ToString) <> "" Then


                            CurY = CurY + TxtHgt + 10
                            If Common_Procedures.settings.CustomerCode = "1102" Then
                                Y1 = CurY + 0.5
                                Y2 = CurY + TxtHgt + 5
                                p1Font = New Font("Cambria", 10, FontStyle.Bold)
                                Common_Procedures.FillRegionRectangle(e, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14), Y1, PageWidth, Y2)

                                Common_Procedures.Print_To_PrintDocument_GK(e, "WARP BREAKS  ", PL1 + 5, CurY, 0, 0, p1Font)
                                Common_Procedures.Print_To_PrintDocument_GK(e, ":", PageWidth - 52, CurY, 0, 0, pFont)

                                Common_Procedures.Print_To_PrintDocument_GK(e, prn_HdDt.Rows(0).Item("remarks").ToString, PageWidth - 5, CurY, 1, 0, p1Font)
                            Else
                                p1Font = New Font("Calibri", 11, FontStyle.Regular)
                                Common_Procedures.Print_To_PrintDocument(e, "WARP BREAKS  ", PL1 + 5, CurY, 0, 0, p1Font)
                                Common_Procedures.Print_To_PrintDocument(e, ":", PageWidth - 52, CurY, 0, 0, pFont)
                                p1Font = New Font("Calibri", 10, FontStyle.Bold)
                                Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("remarks").ToString, PageWidth - 5, CurY, 1, 0, p1Font)
                            End If




                            If Common_Procedures.settings.CustomerCode <> "1102" Then
                                CurY = CurY + TxtHgt + 10
                                p1Font = New Font("Calibri", 11, FontStyle.Regular)
                                Common_Procedures.Print_To_PrintDocument(e, "PICK UP %   ", PL1 + 5, CurY, 0, 0, p1Font)
                                Common_Procedures.Print_To_PrintDocument(e, ":", PageWidth - 52, CurY, 0, 0, pFont)
                                p1Font = New Font("Calibri", 10, FontStyle.Bold)
                                Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("pickup_percentage").ToString & " %", PageWidth - 5, CurY, 1, 0, p1Font)
                            End If

                            CurY = CurY + 5


                        End If

                    End If

                End If

                '----------------------------------------------------------------------------------------------------
                '**********************          AMOUNT DETAILS     **********************
                '----------------------------------------------------------------------------------------------------

                If Val(prn_PageNo) <= 1 Then

                    If Val(Common_Procedures.settings.StatementPrint_AmountDetails) = 1 Then

                        W1 = e.Graphics.MeasureString("Opening Balance  : ", pFont).Width

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "AMOUNT BALANCE DETAILS", PL1, CurY, 2, ClArr(14), p1Font)

                        CurY = CurY + TxtHgt + 5

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Op)), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_Amt_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Amt_OpStNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "Received Amount", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Rcpt)), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_Amt_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Amt_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If


                        CurY = CurY + TxtHgt + 2
                        Common_Procedures.Print_To_PrintDocument(e, "Set Amount", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_CurSet)), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1042" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1310" Then '---- RajaMurugan Sizing (Karumanthapatti)
                            CurY = CurY + TxtHgt + 2
                            Common_Procedures.Print_To_PrintDocument(e, "Discount Amount ", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(-1 * prn_Disc_Amt_CurSet)), PageWidth - 5, CurY, 1, 0, pFont)

                            Bal_Amt = ((prn_Amt_Op - Math.Abs(prn_Amt_Rcpt)) + prn_Amt_CurSet) - prn_Disc_Amt_CurSet
                        Else
                            Bal_Amt = (prn_Amt_Op - prn_Amt_Rcpt + prn_Amt_CurSet)
                        End If



                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                        CurY = CurY + TxtHgt - 10
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance Amount", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(Bal_Amt)), PageWidth - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    End If

                End If

                '-------------------------------------------------------------------------------------------------
                '**********************         PICK UP %             **********************
                '-------------------------------------------------------------------------------------------------

                If Val(prn_PageNo) <= 1 Then

                    If Val(Common_Procedures.settings.StatementPrint_PickUp_Percentage) = 1 Then

                        CurY = CurY + TxtHgt

                        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "Pickup %", PL1 + 5, CurY, 0, 0, p1Font)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        p1Font = New Font("Calibri", 11, FontStyle.Bold)
                        If Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString) <> 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString), "#########0.00") & " %", PageWidth - 5, CurY, 1, 0, p1Font)
                        Else
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("pickup_percentage").ToString), "#########0.00") & " %", PageWidth - 5, CurY, 1, 0, p1Font)
                        End If

                        CurY = CurY + 5

                    End If

                End If
                '-------------------------------------------------------------------------------------------------
                '**********************         ELONGATION UP %             **********************
                '-------------------------------------------------------------------------------------------------

                If Val(prn_PageNo) <= 1 Then

                    If Val(Common_Procedures.settings.StatementPrint_Elongation_Percentage) = 1 Then

                        CurY = CurY + TxtHgt
                        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "Elongation %", PL1 + 5, CurY, 0, 0, p1Font)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        p1Font = New Font("Calibri", 11, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("elongation_percentage").ToString), "#########0.00") & " %", PageWidth - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + 5

                    End If

                End If

                '----------------------------------------------------------------------------------------------------
                '**********************          YARN RECEIPT DETAILS     **********************
                '----------------------------------------------------------------------------------------------------
                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1102" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1144" Then

                    If Val(prn_PageNo) <= 1 Then

                        '   If Val(Common_Procedures.settings.StatementPrint_AmountDetails) = 1 Then

                        W1 = e.Graphics.MeasureString("Opening Balance  : ", pFont).Width

                        '-------------------
                        Dim Tot_Yrn As Double = 0

                        Da1 = New SqlClient.SqlDataAdapter("select  Name1, Name2 , Weight1  from " & Trim(Common_Procedures.EntryTempTable) & " ", Con)
                        Dt1 = New DataTable
                        Da1.Fill(Dt1)

                        If Dt1.Rows.Count > 0 Then

                            CurY = CurY + TxtHgt + 10

                            p1Font = New Font("Calibri", 11, FontStyle.Underline)
                            Common_Procedures.Print_To_PrintDocument(e, "YARN RECEIPT DETAILS", PL1, CurY, 2, ClArr(14), p1Font)

                            CurY = CurY + TxtHgt + 5
                            Common_Procedures.Print_To_PrintDocument(e, "Rec No", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "Mill", PL1 + 80, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "Weight", PageWidth - 5, CurY, 1, 0, pFont)
                            CurY = CurY + 5

                            e.Graphics.DrawLine(Pens.Black, PL1, CurY + TxtHgt, PageWidth, CurY + TxtHgt)
                            For i = 0 To Dt1.Rows.Count - 1
                                CurY = CurY + TxtHgt
                                p1Font = New Font("Calibri", 8, FontStyle.Regular)
                                nMillName = Dt1.Rows(i).Item("Name2").ToString
                                Common_Procedures.Print_To_PrintDocument(e, Dt1.Rows(i).Item("Name1").ToString, PL1 + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(nMillName), 17), PL1 + 40, CurY, 0, 0, p1Font)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt1.Rows(i).Item("Weight1").ToString), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)
                                Tot_Yrn = Tot_Yrn + Format(Val(Dt1.Rows(i).Item("Weight1").ToString), "#########0.000")
                            Next

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                            CurY = CurY + TxtHgt - 10
                            p1Font = New Font("Calibri", 10, FontStyle.Bold)
                            Common_Procedures.Print_To_PrintDocument(e, "Total", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Tot_Yrn), "#########0.000"), PageWidth - 5, CurY, 1, 0, p1Font)

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)
                        End If
                        '------------------------------------------------------
                    End If

                End If

                '----------------------------------------------------------------------------------------------------
                '**********************      SIZING DETAILS     **********************
                '----------------------------------------------------------------------------------------------------

                CurY = Det_Top


                If Val(prn_PageNo) <= 1 Or Prn_SizingDetails_2ndPage_STS = True Then

                    Da1 = New SqlClient.SqlDataAdapter("select distinct(Sizing_SlNo) from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' Order by Sizing_SlNo", Con)
                    Dt1 = New DataTable
                    Da1.Fill(Dt1)

                    If Dt1.Rows.Count > 0 Then

                        Z = 0 : X = 0
                        If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1042" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1310" Then
                            If Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString) <> 0 Then

                                If Val(prn_HdDt.Rows(0).Item("Total_Pavu_Beam").ToString) <> 0 Then

                                    Z = Format((Val(prn_HdDt.Rows(0).Item("Total_Warping_Net_Weight").ToString) * Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString) / 100) + Val(prn_HdDt.Rows(0).Item("Total_Warping_Net_Weight").ToString), "#########0.0")
                                    X = Format(Z - Val(prn_HdDt.Rows(0).Item("Total_Pavu_Net_Weight").ToString), "#########0.0")
                                    X = Format(X / Val(prn_HdDt.Rows(0).Item("Total_Pavu_Beam").ToString), "########0.00")

                                End If

                            End If
                        End If

                        For k = 0 To Dt1.Rows.Count - 1

                            CurY = CurY - 10

                            Da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' and Sizing_SlNo = " & Str(Val(Dt1.Rows(k).Item("Sizing_SlNo").ToString)) & " Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            SNo = 0
                            TtSizBms = 0
                            TtSizGrsWgt = 0 : TtSizTrWgt = 0 : TtSizNetWgt = 0
                            TtSizPcs = 0 : TtSizMtrs = 0
                            Prn_TtSizBms = 0 ' Prn_TtSizBms + 1
                            Prn_TtSizGrsWgt = 0
                            Prn_TtSizTrWgt = 0
                            Prn_TtSizNetWgt = 0
                            Prn_TtSizPcs = 0
                            Prn_TtSizMtrs = 0



                            If Dt2.Rows.Count > 0 Then

                                For i = Prn_SizingDetails_StartIndx To Dt2.Rows.Count - 1

                                    If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1036" Then
                                        prn_Siz_Detail = 38
                                    Else
                                        prn_Siz_Detail = 45
                                    End If


                                    If (i > 0 And i Mod prn_Siz_Detail = 0 And Prn_SizingDetails_2ndPage_STS = False) Or CurY >= 1100 Then

                                        If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1042" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1310" Then
                                            If Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString) <> 0 Then
                                                If k = Dt1.Rows.Count - 1 And i = Dt2.Rows.Count - 1 Then
                                                    X = Format(Z - Format((Prn_TtSizNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)), "########0.0"), "########0.0")
                                                    'X = Format(Z - (TtSizNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString) + X), "########0.0")
                                                End If
                                            End If
                                        End If

                                        p1Font = New Font("Calibri", 9.5, FontStyle.Bold)
                                        CurY = CurY + TxtHgt + 5
                                        Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14) - 5, CurY, 1, 0, p1Font)

                                        CurY = CurY + TxtHgt + 5 ' 10
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14), CurY)

                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), LnAr(4))


                                        If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1036" Then
                                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), LnAr(4))
                                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), LnAr(4))
                                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(4))

                                        Else
                                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + 10, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + 10, LnAr(4))
                                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + 25, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + 25, LnAr(4))
                                            ' e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(4))

                                        End If

                                        'e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), LnAr(4))
                                        'e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), LnAr(4))
                                        'e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(4))


                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14), LnAr(3))

                                        Prn_SizingDetails_2ndPage_STS = True
                                        Prn_SizingDetails_StartIndx = i
                                        Prn_YrnTknDet_2ndPage_STS = True
                                        Prn_SizInvoice_2ndPage_STS = True

                                        GoTo SIZDET_1000

                                    End If


                                    SNo = SNo + 1

                                    CurY = CurY + SzTxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Sl_No").ToString) - (k * 100)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 2, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Beam_No").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                    If Val(ClArr(9)) <> 0 Then
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString) + X, "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                                    End If
                                    If Val(ClArr(10)) <> 0 Then
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                                    End If

                                    If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1036" Then
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString) + X, "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                                        If Val(Dt2.Rows(i).Item("Noof_Pcs").ToString) <> 0 Then
                                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Noof_Pcs").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                        End If
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Meters").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)


                                        ItmNm1 = Trim(Common_Procedures.Vendor_IdNoToName(Con, Val(Dt2.Rows(i).Item("Vendor_IdNo").ToString)))
                                        ItmNm2 = ""
                                        Dim i2 As Int16
                                        If Len(ItmNm1) > 15 Then
                                            For i2 = 15 To 1 Step -1
                                                If Mid$(Trim(ItmNm1), i2, 1) = " " Or Mid$(Trim(ItmNm1), i2, 1) = "," Or Mid$(Trim(ItmNm1), i2, 1) = "." Or Mid$(Trim(ItmNm1), i2, 1) = "-" Or Mid$(Trim(ItmNm1), i2, 1) = "/" Or Mid$(Trim(ItmNm1), i2, 1) = "_" Or Mid$(Trim(ItmNm1), i2, 1) = "(" Or Mid$(Trim(ItmNm1), i2, 1) = ")" Or Mid$(Trim(ItmNm1), i2, 1) = "\" Or Mid$(Trim(ItmNm1), i2, 1) = "[" Or Mid$(Trim(ItmNm1), i2, 1) = "]" Or Mid$(Trim(ItmNm1), i2, 1) = "{" Or Mid$(Trim(ItmNm1), i2, 1) = "}" Then Exit For
                                            Next i2
                                            If i2 = 0 Then i2 = 15
                                            ItmNm2 = Microsoft.VisualBasic.Right(Trim(ItmNm1), Len(ItmNm1) - i2)
                                            ItmNm1 = Microsoft.VisualBasic.Left(Trim(ItmNm1), i2 - 1)
                                        End If

                                        If Val(Dt2.Rows(i).Item("Vendor_IdNo").ToString) <> 0 Then
                                            psFont = New Font("Calibri", 7, FontStyle.Regular)
                                            Common_Procedures.Print_To_PrintDocument(e, Trim(ItmNm1), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, 2, 0, psFont)
                                        End If

                                    Else
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString) + X, "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + 5, CurY, 1, 0, pFont)
                                        If Val(Dt2.Rows(i).Item("Noof_Pcs").ToString) <> 0 Then
                                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Noof_Pcs").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + 15, CurY, 1, 0, pFont)
                                        End If
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Meters").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14) - 5, CurY, 1, 0, pFont)

                                    End If




                                    If Trim(ItmNm2) <> "" Then
                                        CurY = CurY + SzTxtHgt
                                        psFont = New Font("Calibri", 7, FontStyle.Regular)
                                        Common_Procedures.Print_To_PrintDocument(e, ItmNm2, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, 2, 0, psFont)
                                    End If


                                    Prn_TtSizBms = Prn_TtSizBms + 1
                                    Prn_TtSizGrsWgt = Prn_TtSizGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString) + X
                                    Prn_TtSizTrWgt = Prn_TtSizTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                    Prn_TtSizNetWgt = Prn_TtSizNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString) + X
                                    Prn_TtSizPcs = Prn_TtSizPcs + Val(Dt2.Rows(i).Item("Noof_Pcs").ToString)
                                    Prn_TtSizMtrs = Prn_TtSizMtrs + Val(Dt2.Rows(i).Item("Meters").ToString)

                                Next i

                            End If

                            CurY = CurY + SzTxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14), CurY)

                            CurY = CurY + SzTxtHgt - 10
                            'Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Prn_TtSizBms)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                            If Val(ClArr(9)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                            End If
                            If Val(ClArr(10)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                            End If
                            If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1036" Then
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizPcs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizMtrs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                            Else
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizPcs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + 15, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizMtrs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14) - 5, CurY, 1, 0, pFont)

                            End If

                            CurY = CurY + SzTxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14), CurY)

                        Next k

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), LnAr(4))
                        If Val(ClArr(9)) <> 0 Then
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), LnAr(4))
                        End If
                        If Val(ClArr(9)) <> 0 Then
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), LnAr(4))
                        End If

                        If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1036" Then
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), LnAr(4))
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), LnAr(4))
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(4))

                        Else
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + 10, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + 10, LnAr(4))
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + 25, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + 25, LnAr(4))
                            ' e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(4))

                        End If

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14), LnAr(3))

                        Prn_SizingDetails_2ndPage_STS = False

                    End If

                End If

SIZDET_1000:
                '----------------------------------------------------------------------------------------------------
                '*****************      YARN TAKEN DETAILS     ************* 
                '----------------------------------------------------------------------------------------------------

                If Val(Common_Procedures.settings.StatementPrint_YarnTakenDetails) = 1 Then

                    If Val(prn_PageNo) <= 1 Or Prn_YrnTknDet_2ndPage_STS = True Then

                        If CurY >= 1050 Then
                            Prn_YrnTknDet_2ndPage_STS = True
                            Prn_SizInvoice_2ndPage_STS = True
                            GoTo YRNTKNDET_1000
                        End If

                        CurY = CurY + SzTxtHgt   ' + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Regular)
                        'p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "YARN TAKEN DETAILS", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), p1Font)

                        CurY = CurY + SzTxtHgt + 3  ' + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + 40, CurY)
                        CurY = CurY + 5

                        Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 2, ClArr(7), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, 2, ClArr(8), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, 2, ClArr(9) + ClArr(10), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "COUNT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + 40, CurY, 2, ClArr(11), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + 40, CurY, 2, ClArr(12), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + 40, CurY, 2, ClArr(13), pFont)

                        CurY = CurY + SzTxtHgt + 5   ' + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + 40, CurY)
                        CurY = CurY + SzTxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select a.*, b.Count_Name, c.Mill_Name from Specification_YarnTaken_Details a INNER JOIN Count_Head b on a.Count_IdNo = b.Count_IdNo INNER JOIN Mill_Head c on a.Mill_IdNo = c.Mill_IdNo where a.company_idno = " & Str(Val(lbl_Company.Tag)) & " and a.Set_Code = '" & Trim(EntryCode) & "' Order by a.sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - SzTxtHgt - 10

                            For i = Prn_YrnTknDet_StartIndx To Dt2.Rows.Count - 1

                                If CurY >= 1100 Then

                                    p1Font = New Font("Calibri", 10, FontStyle.Bold)

                                    CurY = CurY + TxtHgt
                                    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, p1Font)
                                    CurY = CurY + 5 ' 10

                                    Prn_YrnTknDet_2ndPage_STS = True
                                    Prn_SizInvoice_2ndPage_STS = True
                                    Prn_YrnTknDet_StartIndx = i

                                    GoTo YRNTKNDET_1000

                                End If

                                SNo = SNo + 1

                                CurY = CurY + SzTxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Mill_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Count_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + 55, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + 40 - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + 40 - 5, CurY, 1, 0, pFont)

                            Next i

                        End If

                        CurY = CurY + SzTxtHgt + 5  ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + 40, CurY)

                        CurY = CurY + SzTxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                        'Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_bags").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + 40 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_yarn_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + 40 - 5, CurY, 1, 0, pFont)

                        CurY = CurY + SzTxtHgt + 5  ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + 40, CurY)

                        Prn_YrnTknDet_2ndPage_STS = False

                    End If

                Else
                    Prn_YrnTknDet_2ndPage_STS = False

                End If


YRNTKNDET_1000:

                '----------------------------------------------------------------------------------------------------
                '**********************      INVOCIE DETAILS    **********************
                '----------------------------------------------------------------------------------------------------

                If StmtPrint_InvDetails_Status = True Then

                    If Val(prn_PageNo) <= 1 Or Prn_SizInvoice_2ndPage_STS = True Then

                        If CurY >= 900 Then

                            Dim LS As Single

                            LS = PageHeight - 150

                            If CurY >= LS Then
                                CurY = CurY + TxtHgt
                            Else
                                CurY = LS
                            End If

                            p1Font = New Font("Calibri", 10, FontStyle.Bold)
                            Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14) - 5, CurY, 1, 0, p1Font)
                            CurY = CurY + 5 ' 10

                            Prn_SizInvoice_2ndPage_STS = True
                            GoTo SIZINVOICE_1000
                        End If

                        If Val(ClArr(9) + ClArr(10)) = 0 Then
                            InvLft = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6)
                            InvClW1 = ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + 45 : InvClW2 = ClArr(11) + 10 : InvClW3 = ClArr(12) + 2

                        Else
                            InvLft = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6)
                            InvClW1 = ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + 10 : InvClW2 = ClArr(11) + 10 : InvClW3 = ClArr(12) + 10

                            'InvLft = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 100
                            'InvClW1 = ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 20 : InvClW2 = ClArr(11) - 30 : InvClW3 = ClArr(12) - 30
                        End If
                        InvClW4 = (ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14)) - (InvClW1 + InvClW2 + InvClW3)

                        CurY = CurY + SzTxtHgt '+ 10

                        p1Font = New Font("Calibri", 11, FontStyle.Bold)
                        'p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "INVOICE DETAILS", InvLft, CurY, 2, InvClW1 + InvClW2 + InvClW3 + InvClW4, p1Font)

                        CurY = CurY + SzTxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, InvLft, CurY, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4, CurY)

                        CurY = CurY + SzTxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, "INVOCIE NO.  :  " & prn_HdDt.Rows(0).Item("Invoice_No").ToString, InvLft + 10, CurY, 0, 0, pFont)

                        If Val(ClArr(9) + ClArr(10)) = 0 Then
                            If Trim(prn_HdDt.Rows(0).Item("Invoice_Date").ToString) <> "" Then
                                If IsDBNull(prn_HdDt.Rows(0).Item("Invoice_Date").ToString) = False Then
                                    Common_Procedures.Print_To_PrintDocument(e, "INVOICE DATE  :  " & Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Invoice_Date").ToString)), InvLft + InvClW1 + 10, CurY, 0, 0, pFont)
                                Else
                                    Common_Procedures.Print_To_PrintDocument(e, "INVOICE DATE  :  ", InvLft + InvClW1 + 50, CurY, 0, 0, pFont)
                                End If
                            End If

                        Else

                            If Trim(prn_HdDt.Rows(0).Item("Invoice_Date").ToString) <> "" Then
                                If IsDBNull(prn_HdDt.Rows(0).Item("Invoice_Date").ToString) = False Then
                                    Common_Procedures.Print_To_PrintDocument(e, "INVOICE DATE  :  " & Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Invoice_Date").ToString)), InvLft + InvClW1 + 10, CurY, 0, 0, pFont)
                                Else
                                    Common_Procedures.Print_To_PrintDocument(e, "INVOICE DATE  :  ", InvLft + InvClW1 + 10, CurY, 0, 0, pFont)
                                End If

                            End If

                        End If


                        CurY = CurY + SzTxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, InvLft, CurY, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4, CurY)

                        CurY = CurY + SzTxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, "PARTICULARS", InvLft, CurY, 2, InvClW1, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "QUANTITY", InvLft + InvClW1, CurY, 2, InvClW2, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "RATE", InvLft + InvClW1 + InvClW2, CurY, 2, InvClW3, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "AMOUNT", InvLft + InvClW1 + InvClW2 + InvClW3, CurY, 2, InvClW4, pFont)

                        CurY = CurY + SzTxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, InvLft, CurY, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4, CurY)

                        p1Font = New Font("Calibri", 8, FontStyle.Regular)

                        NoofInvDets = 0

                        CurY = CurY - 5

                        If Val(prn_HdDt.Rows(0).Item("Sizing_Amount1").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Sizing_Text1").ToString), InvLft + 5, CurY, 0, 0, p1Font)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Weight1").ToString, InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Rate1").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Amount1").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1
                        End If

                        If Val(prn_HdDt.Rows(0).Item("Sizing_Amount2").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Text2").ToString, InvLft + 5, CurY, 0, 0, p1Font)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Weight2").ToString, InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Rate2").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Amount2").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1
                        End If
                        If Val(prn_HdDt.Rows(0).Item("Sizing_Amount3").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Text3").ToString, InvLft + 5, CurY, 0, 0, p1Font)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Weight3").ToString, InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Rate3").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sizing_Amount3").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1
                        End If

                        If Val(prn_HdDt.Rows(0).Item("pack_Amt").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt

                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Packing_Text").ToString, InvLft + 5, CurY, 0, 0, p1Font)
                            Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("Packing_Beam").ToString), InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Pack_Rate").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("pack_Amt").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1
                        End If

                        If Val(prn_HdDt.Rows(0).Item("Rewind_Amt").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Rewinding_Text").ToString, InvLft + 5, CurY, 0, 0, p1Font)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Rewind_Qty").ToString, InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Rewind_Rate").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Rewind_Amt").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1
                        End If

                        If Val(prn_HdDt.Rows(0).Item("weld_Amt").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt

                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Welding_Text").ToString, InvLft + 5, CurY, 0, 0, p1Font)
                            Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("Welding_Beam").ToString), InvLft + InvClW1 + InvClW2 - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Weld_Rate").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("weld_Amt").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1

                        End If

                        If Val(prn_HdDt.Rows(0).Item("Sampleset_Amount").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sampleset_Text").ToString, InvLft + 5, CurY, 0, 0, p1Font)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Sampleset_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1
                        End If

                        If Val(prn_HdDt.Rows(0).Item("Vanrent_Amount").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Vanrent_Text").ToString, InvLft + 5, CurY, 0, 0, p1Font)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Vanrent_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1
                        End If

                        If Val(prn_HdDt.Rows(0).Item("Other_Chrg").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("OtherCharges_Text").ToString, InvLft + 5, CurY, 0, 0, p1Font)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Other_Chrg").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1
                        End If

                        If Val(prn_HdDt.Rows(0).Item("Disc_Amt").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt

                            If Trim(UCase(prn_HdDt.Rows(0).Item("Discount_Type").ToString)) = "PERCENTAGE" Then
                                InvTxt1 = Trim(prn_HdDt.Rows(0).Item("Discount_Text").ToString) & "  @ " & Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString) & " %"
                                InvTxt2 = ""

                            Else
                                If Common_Procedures.settings.CustomerCode = "1102" Then
                                    InvTxt1 = Trim(prn_HdDt.Rows(0).Item("Discount_Text").ToString) & "  @ " & Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString) & " Rupees/Kg"
                                Else
                                    InvTxt1 = Trim(prn_HdDt.Rows(0).Item("Discount_Text").ToString) & "  @ " & Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString) & " Paise/Kg"
                                End If

                                InvTxt2 = ""
                                'If Val(Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString)) = Val(Format(Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString), "#########0.00").ToString) Then
                                '    InvTxt2 = Format(Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString), "#########0.00").ToString
                                'Else
                                '    InvTxt2 = Format(Val(prn_HdDt.Rows(0).Item("Discount_Percentage").ToString), "#########0.000").ToString
                                'End If

                            End If

                            Common_Procedures.Print_To_PrintDocument(e, InvTxt1, InvLft + 5, CurY, 0, 0, p1Font)
                            'Common_Procedures.Print_To_PrintDocument(e, InvTxt2, InvLft + InvClW1 + InvClW2 + InvClW3  - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("Disc_Amt").ToString), InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1

                        End If

                        'For i = NoofInvDets + 1 To 10
                        '    CurY = CurY + TxtHgt
                        'Next

                        If Val(prn_HdDt.Rows(0).Item("CGST_Amount").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, "CGST - " & prn_HdDt.Rows(0).Item("CGST_Percentage").ToString & " %", InvLft + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("CGST_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1
                        End If

                        If Val(prn_HdDt.Rows(0).Item("SGST_Amount").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, "SGST - " & prn_HdDt.Rows(0).Item("SGST_Percentage").ToString & " %", InvLft + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("SGST_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1
                        End If

                        If Val(prn_HdDt.Rows(0).Item("IGST_Amount").ToString) > 0 Then
                            CurY = CurY + SzTxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, "IGST - " & prn_HdDt.Rows(0).Item("IGST_Percentage").ToString & " %", InvLft + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("IGST_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1
                        End If

                        'For i = NoofInvDets + 1 To 10
                        '    CurY = CurY + TxtHgt
                        'Next

                        InvNetAmt = Val(prn_HdDt.Rows(0).Item("Sizing_Amount1").ToString) + Val(prn_HdDt.Rows(0).Item("Sizing_Amount2").ToString) + Val(prn_HdDt.Rows(0).Item("Sizing_Amount3").ToString) + Val(prn_HdDt.Rows(0).Item("Vat_Amount1").ToString) + Val(prn_HdDt.Rows(0).Item("Vat_Amount2").ToString) + Val(prn_HdDt.Rows(0).Item("SampleSet_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("VanRent_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("Pack_Amt").ToString) + Val(prn_HdDt.Rows(0).Item("Rewind_Amt").ToString) + Val(prn_HdDt.Rows(0).Item("Weld_Amt").ToString) + Val(prn_HdDt.Rows(0).Item("Other_Chrg").ToString) - Val(prn_HdDt.Rows(0).Item("Disc_Amt").ToString) + Val(prn_HdDt.Rows(0).Item("CGST_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("sGST_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("iGST_Amount").ToString)

                        'InvNetAmt = Val(prn_HdDt.Rows(0).Item("Sizing_Amount1").ToString) + Val(prn_HdDt.Rows(0).Item("Sizing_Amount2").ToString) + Val(prn_HdDt.Rows(0).Item("Sizing_Amount3").ToString) + Val(prn_HdDt.Rows(0).Item("Vat_Amount1").ToString) + Val(prn_HdDt.Rows(0).Item("Vat_Amount2").ToString) + Val(prn_HdDt.Rows(0).Item("SampleSet_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("VanRent_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("Packing_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("Rewinding_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("Welding_Amount").ToString) + Val(prn_HdDt.Rows(0).Item("OtherCharges_Amount").ToString) - Val(prn_HdDt.Rows(0).Item("Discount_Amount").ToString)

                        InvRndOff = Val(prn_HdDt.Rows(0).Item("Net_Amount").ToString) - Val(InvNetAmt)
                        CurY = CurY + SzTxtHgt
                        If Val(InvRndOff) <> 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "ROUND OFF", InvLft + 5, CurY, 0, 0, p1Font)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(InvRndOff), "########0.00"), InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, pFont)
                            NoofInvDets = NoofInvDets + 1
                        End If

                        CurY = CurY + SzTxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, InvLft, CurY, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4, CurY)

                        CurY = CurY + SzTxtHgt - 5
                        p1Font = New Font("Calibri", 9, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "NET AMOUNT", InvLft + InvClW1 + InvClW2, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Net_Amount").ToString, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4 - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + SzTxtHgt + 5
                        e.Graphics.DrawLine(Pens.Black, InvLft, CurY, InvLft + InvClW1 + InvClW2 + InvClW3 + InvClW4, CurY)

                        Prn_SizInvoice_2ndPage_STS = False

                    End If

                Else
                    Prn_SizInvoice_2ndPage_STS = False

                End If

SIZINVOICE_1000:

                '---------- FOOTER

                Printing_Format5_1097_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, True)

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

        If Prn_YrnStkSumm_2ndPage_STS = True Or Prn_SizingDetails_2ndPage_STS = True Or Prn_YrnTknDet_2ndPage_STS = True Or Prn_SizInvoice_2ndPage_STS = True Then
            Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(prn_PageNo)), PageWidth - 10, TMargin - TxtHgt, 1, 0, pFont)
            e.HasMorePages = True

        Else

            If Trim(prn_InpOpts) <> "" Then
                If prn_Count < Len(Trim(prn_InpOpts)) Then


                    If Val(prn_InpOpts) <> "0" Then
                        prn_DetIndx = 0
                        prn_DetSNo = 0
                        prn_PageNo = 0

                        e.HasMorePages = True
                        Return
                    End If

                End If
            End If

            e.HasMorePages = False

        End If

    End Sub

    Private Sub Printing_Format5_1097_PageHeader(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim p1Font As Font
        Dim Cmp_Name As String, Cmp_Add1 As String, Cmp_Add2 As String
        Dim Cmp_PhNo As String, Cmp_Email As String, Cmp_TinNo As String, Cmp_CstNo As String
        Dim strHeight As Single
        Dim C1 As Single, C2 As Single, C3 As Single
        Dim W1 As Single, W2 As Single
        Dim ExcSht_Str As String
        Dim PrntCompHeading As Boolean = False
        Dim Cmp_StateCap As String, Cmp_StateNm As String, Cmp_StateCode As String, Cmp_GSTIN_Cap As String, Cmp_GSTIN_No As String
        Dim Gst_dt As Date
        Dim Entry_dt As Date
        Dim CurX As Single = 0
        Dim strWidth As Single = 0
        Dim S As String = ""
        Dim Ledname1 As String
        Dim Ledname2 As String
        Dim i As Integer

        PageNo = PageNo + 1

        CurY = TMargin

        'da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' Order by sl_no", Con)
        'dt2 = New DataTable
        'da2.Fill(dt2)
        'If dt2.Rows.Count > 30 Then
        '    Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(PageNo)), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
        'End If
        'dt2.Clear()

        prn_Count = prn_Count + 1

        prn_OriDupTri = ""
        If Trim(prn_InpOpts) <> "" Then
            If prn_Count <= Len(Trim(prn_InpOpts)) Then

                S = Mid$(Trim(prn_InpOpts), prn_Count, 1)

                If Val(S) = 1 Then
                    prn_OriDupTri = "ORIGINAL"
                ElseIf Val(S) = 2 Then
                    prn_OriDupTri = "DUPLICATE"
                ElseIf Val(S) = 3 Then
                    prn_OriDupTri = "TRIPLICATE"
                ElseIf Val(S) = 4 Then
                    prn_OriDupTri = "EXTRA COPY"
                Else
                    If Trim(prn_InpOpts) <> "0" And Val(prn_InpOpts) = "0" And Len(Trim(prn_InpOpts)) > 3 Then
                        prn_OriDupTri = Trim(prn_InpOpts)
                    End If
                End If

            End If
        End If

        If Trim(prn_OriDupTri) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, Trim(prn_OriDupTri), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
        End If

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY

        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
        Cmp_PhNo = "" : Cmp_Email = "" : Cmp_TinNo = "" : Cmp_CstNo = ""
        Cmp_StateCap = "" : Cmp_StateNm = "" : Cmp_StateCode = "" : Cmp_GSTIN_Cap = "" : Cmp_GSTIN_No = ""

        If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            Cmp_Name = Replace(Cmp_Name, Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString), "")
            Cmp_Add1 = Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString)
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        Else
            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        End If

        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = "PHONE NO.:" & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_EMail").ToString) <> "" Then
            Cmp_Email = "EMail : " & prn_HdDt.Rows(0).Item("Company_EMail").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_TinNo").ToString) <> "" Then
            Cmp_TinNo = "TIN NO.: " & prn_HdDt.Rows(0).Item("Company_TinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
            Cmp_CstNo = "CST NO.: " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_State_Name").ToString) <> "" Then
            Cmp_StateCap = "STATE : "
            Cmp_StateNm = prn_HdDt.Rows(0).Item("Company_State_Name").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_State_Code").ToString) <> "" Then
            Cmp_StateCode = "CODE :" & prn_HdDt.Rows(0).Item("Company_State_Code").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString) <> "" Then
            Cmp_GSTIN_Cap = "GSTIN : "
            Cmp_GSTIN_No = prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString
        End If

        PrntCompHeading = True
        If StmtPrint_InvDetails_Status = True Then
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1038" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1047" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1037" Then '---- Prakash Sizing & Mahalakshmi Sizing
                PrntCompHeading = False

            ElseIf Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) = "UNACCOUNT" Then
                PrntCompHeading = False

            End If

        Else
            If Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) = "UNACCOUNT" Then
                PrntCompHeading = False

            End If

        End If

        If PrntCompHeading = True Then

            CurY = CurY + TxtHgt - 10
            p1Font = New Font("Calibri", 14, FontStyle.Bold)
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1043" Then '---- Selvanayaki Sizing (Karumanthapatti)
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font, Brushes.Red)
            Else
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font)
            End If

            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            CurY = CurY + strHeight
            If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
                p1Font = New Font("Calibri", 12, FontStyle.Bold)
            Else
                p1Font = New Font("Calibri", 9, FontStyle.Regular)
            End If
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1043" Then '---- Selvanayaki Sizing (Karumanthapatti)
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1, LMargin, CurY, 2, PrintWidth, p1Font, Brushes.Green)
            Else
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1, LMargin, CurY, 2, PrintWidth, p1Font)
            End If

            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            CurY = CurY + TxtHgt
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1043" Then '---- Selvanayaki Sizing (Karumanthapatti)
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont, Brushes.Green)
            Else
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont)
            End If

            CurY = CurY + TxtHgt
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1043" Then '---- Selvanayaki Sizing (Karumanthapatti)
                Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, pFont, Brushes.Green)
            Else
                Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, pFont)
            End If

            CurY = CurY + TxtHgt
            Gst_dt = #7/1/2017#
            Entry_dt = dtp_Date.Value

            If DateDiff("d", Gst_dt.ToShortDateString, Entry_dt.ToShortDateString) < 0 Then

                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1043" Then '---- Selvanayaki Sizing (Karumanthapatti)
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_TinNo, LMargin + 10, CurY, 0, 0, pFont, Brushes.Green)
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_Email, LMargin, CurY, 2, PrintWidth, pFont, Brushes.Green)
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_CstNo, PageWidth - 10, CurY, 1, 0, pFont, Brushes.Green)
                Else
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_TinNo, LMargin + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_Email, LMargin, CurY, 2, PrintWidth, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Cmp_CstNo, PageWidth - 10, CurY, 1, 0, pFont)
                End If

            Else

                p1Font = New Font("Calibri", 11, FontStyle.Bold)
                strWidth = e.Graphics.MeasureString(Trim(Cmp_StateCap & Cmp_GSTIN_Cap), p1Font).Width
                strWidth = e.Graphics.MeasureString(Trim(Cmp_StateCap & Cmp_StateNm & "     " & Cmp_GSTIN_Cap & Cmp_GSTIN_No), pFont).Width
                If PrintWidth > strWidth Then
                    CurX = LMargin + (PrintWidth - strWidth) / 2
                Else
                    CurX = LMargin
                End If

                p1Font = New Font("Calibri", 11, FontStyle.Bold)
                Common_Procedures.Print_To_PrintDocument(e, Cmp_StateCap, CurX, CurY, 0, 0, p1Font)
                strWidth = e.Graphics.MeasureString(Cmp_StateCap, p1Font).Width
                CurX = CurX + strWidth
                Common_Procedures.Print_To_PrintDocument(e, Cmp_StateNm, CurX, CurY, 0, 0, pFont)

                strWidth = e.Graphics.MeasureString(Cmp_StateNm, pFont).Width
                p1Font = New Font("Calibri", 11, FontStyle.Bold)
                CurX = CurX + strWidth
                Common_Procedures.Print_To_PrintDocument(e, "     " & Cmp_GSTIN_Cap, CurX, CurY, 0, PrintWidth, p1Font)
                strWidth = e.Graphics.MeasureString("     " & Cmp_GSTIN_Cap, p1Font).Width
                CurX = CurX + strWidth
                Common_Procedures.Print_To_PrintDocument(e, Cmp_GSTIN_No, CurX, CurY, 0, 0, pFont)

            End If



            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

        End If

        LnAr(2) = CurY

        C1 = 340 ' Val(ClAr(1)) + Val(ClAr(2)) + Val(ClAr(3)) + Val(ClAr(4)) + Val(ClAr(5)) + Val(ClAr(6)) + Val(ClAr(7))
        C2 = 190  '215 ' Val(ClAr(8)) + Val(ClAr(9)) + Val(ClAr(10)) + Val(ClAr(11)) + Val(ClAr(12)) + Val(ClAr(13))
        C3 = PageWidth - (LMargin + C1 + C2)

        W1 = e.Graphics.MeasureString("Average Count : ", pFont).Width
        W2 = e.Graphics.MeasureString("Tape Length : ", pFont).Width  ' 20

        Try

            If Val(PageNo) <= 1 Then

                p1Font = New Font("Calibri", 12, FontStyle.Bold)
                strHeight = e.Graphics.MeasureString("Average Count : ", p1Font).Height

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "TO : ", LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Set No", LMargin + C1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Set_No").ToString), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font)
                Common_Procedures.Print_To_PrintDocument(e, "Mill Name", LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString), 15), LMargin + C1 + C2 + W2 + 25, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Set No    : " & Trim(prn_HdDt.Rows(0).Item("Set_No").ToString), LMargin + C1 + 10, CurY, 0, 0, p1Font)
                'Common_Procedures.Print_To_PrintDocument(e, "Mill : " & Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                Ledname1 = Trim(prn_HdDt.Rows(0).Item("Ledger_MainName").ToString)
                '  End If

                Ledname2 = ""

                If Len(Ledname1) > 40 Then
                    For i = 40 To 1 Step -1
                        If Mid$(Trim(Ledname1), i, 1) = " " Or Mid$(Trim(Ledname1), i, 1) = "," Or Mid$(Trim(Ledname1), i, 1) = "." Or Mid$(Trim(Ledname1), i, 1) = "-" Or Mid$(Trim(Ledname1), i, 1) = "/" Or Mid$(Trim(Ledname1), i, 1) = "_" Or Mid$(Trim(Ledname1), i, 1) = "(" Or Mid$(Trim(Ledname1), i, 1) = ")" Or Mid$(Trim(Ledname1), i, 1) = "\" Or Mid$(Trim(Ledname1), i, 1) = "[" Or Mid$(Trim(Ledname1), i, 1) = "]" Or Mid$(Trim(Ledname1), i, 1) = "{" Or Mid$(Trim(Ledname1), i, 1) = "}" Then Exit For
                    Next i
                    If i = 0 Then i = 40
                    Ledname2 = Microsoft.VisualBasic.Right(Trim(Ledname1), Len(Ledname1) - i)
                    Ledname1 = Microsoft.VisualBasic.Left(Trim(Ledname1), i - 1)
                End If

                CurY = CurY + strHeight
                p1Font = New Font("Calibri", 9, FontStyle.Bold)
                'Common_Procedures.Print_To_PrintDocument(e, "     " & "M/S." & prn_HdDt.Rows(0).Item("Ledger_MainName").ToString, LMargin + 10, CurY, 0, 0, p1Font)
                Common_Procedures.Print_To_PrintDocument(e, "     " & "M/S." & Ledname1, LMargin + 10, CurY, 0, 0, p1Font)

                If Trim(Ledname2) <> "" Then
                    CurY = CurY + TxtHgt
                    Common_Procedures.Print_To_PrintDocument(e, "     " & Trim(Ledname2), LMargin + 10, CurY, 0, 0, p1Font)
                    'NoofDets = NoofDets + 1
                End If

                Common_Procedures.Print_To_PrintDocument(e, "DATE", LMargin + C1 + 10, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Set_Date").ToString), "dd-MM-yyyy").ToString, LMargin + C1 + W1 + 25, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + C1 + C2 + 10, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 3, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Ends_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + 3, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "DATE                 :  " & Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Set_Date").ToString)), LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Ends : " & Trim(prn_HdDt.Rows(0).Item("Ends_Name").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address1").ToString, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Count Name", LMargin + C1 + 10, CurY + 9, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + 9, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Count_Name").ToString), LMargin + C1 + W1 + 25, CurY + 9, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Tape Length", LMargin + C1 + C2 + 10, CurY + 9, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 9, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("tape_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY + 9, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Count Name : " & Trim(prn_HdDt.Rows(0).Item("Count_Name").ToString), LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Tape Length : " & Trim(prn_HdDt.Rows(0).Item("tape_length").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                If Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString) >= 0 Then
                    ExcSht_Str = "Excess"
                    'ExcSht_Str = "Excess        : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                Else
                    ExcSht_Str = "Short"
                    'ExcSht_Str = "Short         : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                End If
                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address2").ToString, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ExcSht_Str, LMargin + C1 + 10, CurY + 14, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + 14, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000"), LMargin + C1 + W1 + 25, CurY + 14, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Beam Width", LMargin + C1 + C2 + 10, CurY + 14, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 14, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Beam_Width_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + 14, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, ExcSht_Str, LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Beam Width : " & Trim(prn_HdDt.Rows(0).Item("Beam_Width_Name").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address3").ToString, LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Average Count", LMargin + C1 + 10, CurY + 18, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + 18, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("beam_count").ToString), LMargin + C1 + W1 + 25, CurY + 18, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Mark", LMargin + C1 + C2 + 10, CurY + 18, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + 18, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("pcs_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY + 18, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Average Count : " & Trim(prn_HdDt.Rows(0).Item("beam_count").ToString), LMargin + C1 + 10, CurY, 0, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, "Mark : " & Trim(prn_HdDt.Rows(0).Item("pcs_length").ToString), LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address4").ToString, LMargin + 10, CurY, 0, 0, pFont)

                CurY = CurY + TxtHgt + 10
                e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

                e.Graphics.DrawLine(Pens.Black, LMargin + C1, CurY, LMargin + C1, LnAr(2))
                e.Graphics.DrawLine(Pens.Black, LMargin + C1 + C2, CurY, LMargin + C1 + C2, LnAr(2))

            End If
            LnAr(3) = CurY

            CurY = CurY + TxtHgt - 10
            p1Font = New Font("Calibri", 12, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "WARPING DETAILS", LMargin, CurY, 2, ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), p1Font)
            Common_Procedures.Print_To_PrintDocument(e, "SIZING DETAILS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14), p1Font)
            Common_Procedures.Print_To_PrintDocument(e, "PARTICULARS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14), CurY + TxtHgt, 2, ClAr(15), p1Font)

            CurY = CurY + TxtHgt + 5 ' + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14), CurY)
            LnAr(4) = CurY

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "No", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            If Trim(UCase(prn_HdDt.Rows(0).Item("Meters_Yards").ToString)) = "YARDS" Then
                Common_Procedures.Print_To_PrintDocument(e, "Yards", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            Else
                Common_Procedures.Print_To_PrintDocument(e, "Meter", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            End If
            If Val(ClAr(4)) <> 0 Then
                Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(4), pFont)
            End If
            If Val(ClAr(5)) <> 0 Then
                Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(5), pFont)
            End If
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "No", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "BeamNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            If Val(ClAr(9)) <> 0 Then
                Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 2, ClAr(9), pFont)
            End If
            If Val(ClAr(10)) <> 0 Then
                Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 2, ClAr(10), pFont)
            End If
            'Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(11), pFont)
            'Common_Procedures.Print_To_PrintDocument(e, "Pcs", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)
            'Common_Procedures.Print_To_PrintDocument(e, "Meters", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY, 2, ClAr(13), pFont)
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1036" Then
                Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(11), pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Pcs", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Meters", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY, 2, ClAr(13), pFont)
                Common_Procedures.Print_To_PrintDocument(e, " Vendor ", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY, 2, ClAr(14), pFont)

            Else
                Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + 5, CurY, 2, ClAr(11), pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Pcs", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + 25, CurY, 2, ClAr(12), pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Meters", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) - 10, CurY, 2, ClAr(14), pFont)

            End If

            CurY = CurY + TxtHgt + 5 ' + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(5) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub Printing_Format5_1097_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PageHeight As Single, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal is_LastPage As Boolean)
        Dim p1Font As Font
        Dim Cmp_Name As String
        Dim LS As Single
        Dim PrntCompHeading As Boolean = False

        Try

            LS = PageHeight - 125  ' 135

            If CurY >= LS Then
                CurY = CurY + TxtHgt
            Else
                CurY = LS
            End If

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(6) = CurY


            PrntCompHeading = True
            If StmtPrint_InvDetails_Status = True Then
                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1038" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1047" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1037" Then '---- Prakash Sizing & Mahalakshmi Sizing
                    PrntCompHeading = False

                ElseIf Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) = "UNACCOUNT" Then
                    PrntCompHeading = False

                End If

            Else
                If Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) = "UNACCOUNT" Then
                    PrntCompHeading = False

                End If

            End If


            CurY = CurY + 10
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1102" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1144" Then '---- Ganesh karthik Sizing (Somanur)
                If PrntCompHeading = True Then

                    If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
                        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
                        Cmp_Name = Replace(Cmp_Name, Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString), "")

                    Else
                        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString

                    End If

                    p1Font = New Font("Calibri", 12, FontStyle.Bold)
                    If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1043" Then '---- Selvanayaki Sizing (Karumanthapatti)
                        Common_Procedures.Print_To_PrintDocument(e, "For " & Cmp_Name, PageWidth - 15, CurY, 1, 0, p1Font, Brushes.Red)
                    Else
                        Common_Procedures.Print_To_PrintDocument(e, "For " & Cmp_Name, PageWidth - 15, CurY, 1, 0, p1Font)
                    End If

                End If
            End If

            CurY = CurY + TxtHgt
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1102" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1144" Then '---- Ganesh karthik Sizing (Somanur)
                p1Font = New Font("Calibri", 20, FontStyle.Bold)
                Common_Procedures.Print_To_PrintDocument(e, "WELL SIZED IS HALF WOVEN", LMargin, CurY, 2, PageWidth, pFont)
            End If
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt + 5

            If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1102" And Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1144" Then '---- Ganesh karthik Sizing (Somanur)
                Common_Procedures.Print_To_PrintDocument(e, "Prepared By", LMargin + 20, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Checked By", LMargin + 275, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, "Authorised Signatory", PageWidth - 15, CurY, 1, 0, pFont)
            End If

            CurY = CurY + TxtHgt + 10

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(7) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(1))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(6), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14), LnAr(6), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(1))
            p1Font = New Font("Calibri", 7, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "Software by TSOFT SOLUTIONS, Tirupur. Ph : 8508403222, 0421-4337417", LMargin + 8, CurY + 5, 0, 0, p1Font)

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub


    'Private Sub btn_pnl_Close_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_pnl_Close.Click
    '    pnl_Warping_Header.Visible = False
    '    dgv_WarpingDetails_Set1.Focus()
    '    dgv_WarpingDetails_Set1.CurrentCell = dgv_WarpingDetails_Set1.Rows(0).Cells(1)
    '    dgv_WarpingDetails_Set1.CurrentCell.Selected = True

    'End Sub

    'Private Sub btn_Show_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_Show.Click
    '    pnl_Warping_Header.Visible = True
    '    txt_warp_dets_tot_beam.Focus()

    'End Sub

    Private Sub txt_warp_dets_tot_ActWT_KeyPress(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txt_FromRange.KeyPress
        If Asc(e.KeyChar) = 13 Then
            'btn_pnl_Close.Focus()
        End If
    End Sub

    Private Sub txt_warp_dets_tot_ActWT_KeyDown(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txt_FromRange.KeyDown
        If (e.KeyValue = 38) Then
            txt_warp_dets_tot_consWT.Focus()
        End If

        If (e.KeyValue = 40) Then
            'btn_pnl_Close.Focus()
        End If

    End Sub

    Private Sub txt_warp_dets_tot_beam_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles txt_warp_dets_tot_beam.KeyDown
        On Error Resume Next
        If e.KeyValue = 38 Then e.Handled = True : txt_PcsLength.Focus()
        If e.KeyValue = 40 Then e.Handled = True : SendKeys.Send("{TAB}")
    End Sub

    Private Sub btn_Range_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_Range.Click
        Dim validation As Boolean = False
        Dim n As Integer = 0
        Dim rand_Values As Single
        Dim sum_Value As Single = 0
        Dim from_Value As Integer = 0
        Dim to_Value As Integer = 0
        Dim point_values As Integer = 0
        Dim FromRange As String = ""
        Dim ToRange As String = ""


        n = Val(txt_warp_dets_tot_beam.Text)

        If dgv_WarpingDetails_Set1.Rows.Count > 0 And Val(txt_FromRange.Text) <> 0 And Val(txt_ToRange.Text) <> 0 And Val(txt_warp_dets_tot_consWT.Text) <> 0 Then
            validation = True
        End If

        If Not validation Then
            MessageBox.Show("Invalid Range OR Consume weight to generate Net Weight", "DOES NOT GENERATE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            Exit Sub
        End If

        FromRange = Format(Val(txt_FromRange.Text.ToString), "##########.0")
        ToRange = Format(Val(txt_ToRange.Text.ToString), "##########.0")

        ' 0 1 2 => 3
        For i = 0 To n - 2


            from_Value = CInt(Val(FromRange.ToString.Split(".")(0)))
            to_Value = CInt(Val(ToRange.ToString.Split(".")(0))) + 1

            rand_Values = Format(random1.Next(from_Value, to_Value), "##########.0")

            If Val(rand_Values) >= from_Value And Val(rand_Values) < to_Value Then

                If rand_Values = from_Value Then
                    If rand_Values = from_Value And rand_Values = to_Value - 1 Then
                        point_values = random2.Next(Val(FromRange.ToString.Split(".")(1)), Val(ToRange.ToString.Split(".")(1)))
                    Else
                        point_values = random2.Next(Val(FromRange.ToString.Split(".")(1)), 9)
                    End If

                ElseIf rand_Values = to_Value - 1 Then
                    If rand_Values = from_Value And rand_Values = to_Value - 1 Then
                        point_values = random2.Next(Val(FromRange.ToString.Split(".")(1)), Val(ToRange.ToString.Split(".")(1)))
                    Else
                        point_values = random2.Next(0, Val(ToRange.ToString.Split(".")(1)))
                    End If
                Else
                    point_values = random2.Next(0, 9)
                End If

                rand_Values = Format(rand_Values + (point_values / 10), "##########.0")


                ' 2 - Gross   3 - Tare   4 - Net

                dgv_WarpingDetails_Set1.Rows(i).Cells(4).Value = Format(rand_Values, "##########.0")

                If Not IsNothing(dgv_WarpingDetails_Set1.Rows(i).Cells(3)) And Val(dgv_WarpingDetails_Set1.Rows(i).Cells(3).Value) > 0 Then
                    dgv_WarpingDetails_Set1.Rows(i).Cells(2).Value = Format(Val(dgv_WarpingDetails_Set1.Rows(i).Cells(4).Value) + Val(dgv_WarpingDetails_Set1.Rows(i).Cells(3).Value), "##########.0")
                Else
                    dgv_WarpingDetails_Set1.Rows(i).Cells(2).Value = Format(rand_Values, "##########.0")
                End If


                sum_Value = sum_Value + rand_Values

            End If

        Next
        'dgv_WarpingDetails_Set1.Rows(n - 1).Cells(2).Value = Format(Val(txt_warp_dets_tot_consWT.Text) - sum_Value, "##########.0")
        dgv_WarpingDetails_Set1.Rows(n - 1).Cells(4).Value = Format(Val(txt_warp_dets_tot_consWT.Text) - sum_Value, "##########0.0")
        If Not IsNothing(dgv_WarpingDetails_Set1.Rows(n - 1).Cells(3)) And Val(dgv_WarpingDetails_Set1.Rows(n - 1).Cells(3).Value) > 0 Then
            dgv_WarpingDetails_Set1.Rows(n - 1).Cells(2).Value = Format(Val(dgv_WarpingDetails_Set1.Rows(n - 1).Cells(4).Value) + Val(dgv_WarpingDetails_Set1.Rows(n - 1).Cells(3).Value), "##########.0")
        Else
            dgv_WarpingDetails_Set1.Rows(n - 1).Cells(2).Value = Format(Val(dgv_WarpingDetails_Set1.Rows(n - 1).Cells(4).Value), "##########0.0")
        End If



        TotalWarping_Calculation()

        dgv_WarpingDetails_Set1.Focus()
        dgv_WarpingDetails_Set1.CurrentCell = dgv_WarpingDetails_Set1.Rows(0).Cells(1)


    End Sub


    Private Sub txt_ToRange_KeyPress(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txt_ToRange.KeyPress
        If Asc(e.KeyChar) = 13 Then
            btn_Range_Click(sender, e)

        End If

    End Sub

    Private Sub txt_warp_dets_tot_beam_Leave(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txt_warp_dets_tot_beam.LostFocus
        Dim n As Integer = 0
        Dim ent_Rows As Integer = 0
        Dim new_Rows As Integer = 0
        Dim idx As Integer = 1

        For i = 0 To dgv_WarpingDetails_Set1.Rows.Count - 1
            dgv_WarpingDetails_Set1.Rows(i).Cells(0).Value = idx
            idx = idx + 1
        Next

        n = Val(txt_warp_dets_tot_beam.Text)
        ent_Rows = dgv_WarpingDetails_Set1.Rows.Count

        new_Rows = n - ent_Rows

        If new_Rows = 0 Then
            Exit Sub

        ElseIf new_Rows > 0 Then
            ' ADDITIONAL ROWS SHOULD BE ADDED
            For i = 1 To new_Rows
                dgv_WarpingDetails_Set1.Rows.Add()
            Next

        ElseIf new_Rows < 0 Then
            ' REMOVE EXISTING ROWS
            For i = dgv_WarpingDetails_Set1.Rows.Count - 1 To 0 Step -1
                If i > n Then

                    Try
                        dgv_WarpingDetails_Set1.Rows.RemoveAt(i)

                    Catch ex As Exception
                        '---
                    End Try

                End If
            Next

        End If
    End Sub

    Private Sub dgtxt_WarpingDetails_Set2_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgtxt_WarpingDetails_Set2.TextChanged
        dgv_WarpingDetails_Set2.CurrentCell.Value = dgtxt_WarpingDetails_Set2.Text
    End Sub

    Private Sub dgtxt_WarpingDetails_Set3_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles dgtxt_WarpingDetails_Set3.TextChanged
        dgv_WarpingDetails_Set3.CurrentCell.Value = dgtxt_WarpingDetails_Set3.Text
    End Sub

    Private Sub Printing_Format15(ByRef e As System.Drawing.Printing.PrintPageEventArgs)
        Dim Cmd As New SqlClient.SqlCommand
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Da2 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim EntryCode As String
        Dim pFont As Font, p1Font As Font, p2Font As Font, p3Font As Font, spFont As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single, sTxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim ItmNm1 As String = "", ItmNm2 As String = ""
        Dim SNo As Integer
        Dim Det_Top As Single
        Dim i As Integer = 0, j As Integer = 0, k As Integer = 0, Bal_Bms As Integer = 0
        Dim TtWrpEnds As Single
        Dim TtWrpGrsWgt As Single, TtWrpTrWgt As Single, TtWrpNetWgt As Single
        Dim Wpm() As String, WrpYrd As Single
        Dim PL1 As Single
        Dim W1 As Single
        Dim Bal_Yrn_Wt As Single, Bal_Bgs As Single, Bal_Amt As Single
        Dim NoofItems_PerPage As Integer
        Dim YInc As Single = 0
        Dim ps As Printing.PaperSize
        Dim PpSzSTS As Boolean = False
        Dim Y1 As Single = 0, Y2 As Single = 0


        For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(i)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                e.PageSettings.PaperSize = ps
                Exit For
            End If
        Next

        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 10  ' 50 
            .Right = 50
            .Top = 35   '30
            .Bottom = 35 ' 30
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        pFont = New Font("Calibri", 9, FontStyle.Regular)

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With

        TxtHgt = 17.6   'e.Graphics.MeasureString("A", pFont).Height  ' 18  ' 20

        Erase LnAr
        Erase ClArr

        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = Val(25) : ClArr(2) = 40 : ClArr(3) = 48 : ClArr(4) = 50 : ClArr(5) = 46 : ClArr(6) = 48
        ClArr(7) = Val(25) : ClArr(8) = 50 : ClArr(9) = 52 : ClArr(10) = 46 : ClArr(11) = 48 : ClArr(12) = 44 : ClArr(13) = 60
        ClArr(14) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13))



        CurY = TMargin

        NoofItems_PerPage = 30

        EntryCode = Trim(PkCondition_Entry) & Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_SetNo.Tag) & "/" & Trim(Common_Procedures.FnYearCode)

        Try

            If prn_HdDt.Rows.Count > 0 Then

                '---------------------------------------------------------------------------------------------------- 
                '**********************         STOCK CALCULATION             **********************
                '----------------------------------------------------------------------------------------------------

                prn_Yrn_OpWt = 0 : prn_Yrn_RcptWt = 0 : prn_Yrn_DelvWt = 0
                prn_Yrn_ConsWt = 0 : prn_Yrn_ExShWt = 0
                prn_Yrn_TknWt = 0 : prn_Yrn_BayCnWt = 0
                prn_Yrn_RwExShWt = 0 : prn_Yrn_RwExShStNo = ""
                prn_Yrn_TranfrWt = 0 : prn_Yrn_TranfrNo = ""
                prn_Yrn_ExcSht_Wt = 0 : prn_Yrn_ExcSht_No = ""
                prn_Yrn_OpStNo = "" : prn_Yrn_RcptNo = "" : prn_Yrn_DcNo = ""

                prn_EmpBm_Op = 0 : prn_EmpBm_Rcpt = 0 : prn_EmpBm_Delv = 0 : prn_EmpBm_Cons = 0
                prn_EmpBm_OpStNo = "" : prn_EmpBm_RcptNo = "" : prn_EmpBm_DcNo = ""

                prn_EmpBg_Op = 0 : prn_EmpBg_Rcpt = 0 : prn_EmpBg_Delv = 0
                prn_EmpBg_OpStNo = "" : prn_EmpBg_RcptNo = "" : prn_EmpBg_DcNo = ""

                prn_Amt_Op = 0 : prn_Amt_Rcpt = 0 : prn_Amt_CurSet = 0
                prn_Amt_OpStNo = "" : prn_Amt_RcptNo = ""

                Cmd.Connection = Con

                Cmd.CommandText = "truncate table Temp_Statement_Yarn_Stock_Summary"
                Cmd.ExecuteNonQuery()

                Cmd.CommandText = "truncate table Temp_Statement_Other_Yarn_Stock_Summary"
                Cmd.ExecuteNonQuery()

                Stock_calulation()

                '---------------------------------------------------------------------------------------------------- 
                '**********************         HEADER             **********************
                '----------------------------------------------------------------------------------------------------

                Printing_Format15_PageHeader(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, prn_PageNo, CurY, LnAr, ClArr)

                Det_Top = CurY

                If Val(prn_PageNo) <= 1 Then

                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         WARPING DETAILS             **********************
                    '----------------------------------------------------------------------------------------------------

                    Wpm = Split(Trim(prn_HdDt.Rows(0).Item("warp_meters").ToString), ",")

                    Da1 = New SqlClient.SqlDataAdapter("select distinct(Warp_SlNo) from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' Order by Warp_SlNo", Con)
                    Dt1 = New DataTable
                    Da1.Fill(Dt1)

                    If Dt1.Rows.Count > 0 Then

                        For k = 0 To Dt1.Rows.Count - 1

                            CurY = CurY - 10

                            Da2 = New SqlClient.SqlDataAdapter("select * from Specification_Warping_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Warp_SlNo = " & Str(Val(Dt1.Rows(k).Item("Warp_SlNo").ToString)) & " Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            WrpYrd = Val(Wpm(k))

                            SNo = 0
                            TtWrpEnds = 0
                            TtWrpGrsWgt = 0 : TtWrpTrWgt = 0 : TtWrpNetWgt = 0

                            If Dt2.Rows.Count > 0 Then

                                For i = 0 To Dt2.Rows.Count - 1

                                    SNo = SNo + 1

                                    CurY = CurY + TxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + 8, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Ends_Name").ToString)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                                    TtWrpEnds = TtWrpEnds + Val(Dt2.Rows(i).Item("Ends_Name").ToString)
                                    TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                    TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                    TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)

                                Next i

                            End If

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                            CurY = CurY + TxtHgt - 10
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(TtWrpEnds)), LMargin + ClArr(1) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(WrpYrd)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(TtWrpNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                            CurY = CurY + TxtHgt + 10
                            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        Next k

                        'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2), CurY, LMargin + ClArr(1) + ClArr(2), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), LnAr(3))

                    End If

                End If

                '---------------------------------------------------------------------------------------------------- 
                '**********************         YARN TAKEN DETAILS              **********************
                '----------------------------------------------------------------------------------------------------

                If Val(prn_PageNo) <= 1 Then

                    If Val(Common_Procedures.settings.StatementPrint_YarnTakenDetails) = 1 Then

                        Y1 = CurY + 0.5
                        Y2 = CurY + TxtHgt - 10 + TxtHgt + 10
                        Common_Procedures.FillRegionRectangle(e, LMargin, Y1, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), Y2, Brushes.Gainsboro)

                        CurY = CurY + TxtHgt - 10
                        'CurY = CurY + TxtHgt + 5 ' 10

                        p1Font = New Font("Calibri", 12, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "YARN TAKEN DETAILS", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                        CurY = CurY + TxtHgt + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)
                        CurY = CurY + 10

                        p2Font = New Font("Calibri", 8, FontStyle.Regular)
                        p3Font = New Font("Calibri", 7.5, FontStyle.Regular)

                        Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + 5, CurY, 2, ClArr(1), p2Font)
                        Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + ClArr(1), CurY, 2, ClArr(2), p2Font)
                        Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left("MILL NAME", 4), LMargin + ClArr(1) + ClArr(2), CurY, 2, ClArr(3), p2Font)
                        Common_Procedures.Print_To_PrintDocument(e, "COUNT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + 5, CurY, 2, ClArr(4), p2Font)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, 2, ClArr(5), p2Font)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), CurY, 2, ClArr(6), p2Font)

                        CurY = CurY + TxtHgt + 5 ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)
                        CurY = CurY + TxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select a.*, b.Count_Name, c.Mill_Name from Specification_YarnTaken_Details a INNER JOIN Count_Head b on a.Count_IdNo = b.Count_IdNo INNER JOIN Mill_Head c on a.Mill_IdNo = c.Mill_IdNo where a.company_idno = " & Str(Val(lbl_Company.Tag)) & " and a.Set_Code = '" & Trim(EntryCode) & "' Order by a.sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - 5 ' 10

                            For i = 0 To Dt2.Rows.Count - 1

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + 5, CurY, 0, 0, p2Font)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + ClArr(1) + 5, CurY, 0, 0, p2Font)
                                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(Dt2.Rows(i).Item("Mill_Name").ToString), 8), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, p3Font)
                                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(Dt2.Rows(i).Item("Count_Name").ToString), 5), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + 10, CurY, 0, 0, p3Font)
                                Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, p2Font)
                                Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Weight").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, p2Font)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 5  ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        CurY = CurY + TxtHgt - 5  '10
                        Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + 5, CurY, 0, 0, p2Font)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 5, CurY, 1, 0, p2Font)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_HdDt.Rows(0).Item("total_yarn_weight").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, p2Font)

                        CurY = CurY + TxtHgt + 5  ' 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                    End If

                End If


                '---------------------------------------------------------------------------------------------------- 
                '**********************         BABY CONE DETAILS              **********************
                '----------------------------------------------------------------------------------------------------

                If Val(prn_PageNo) <= 1 Then

                    If Val(Common_Procedures.settings.StatementPrint_BabyConeDetails) = 1 Then

                        YInc = 5

                        Y1 = CurY + 0.6
                        Y2 = CurY + TxtHgt - 10 + TxtHgt + 10
                        Common_Procedures.FillRegionRectangle(e, LMargin, Y1, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), Y2, Brushes.Gainsboro)

                        CurY = CurY + TxtHgt - 10

                        p1Font = New Font("Calibri", 12, FontStyle.Bold)
                        'p1Font = New Font("Calibri", 12, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "BABYCONE DETAILS", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                        CurY = CurY + TxtHgt + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)
                        CurY = CurY + YInc

                        Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClArr(1), CurY, 2, ClArr(2), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "BAGS", LMargin + ClArr(1) + ClArr(2), CurY, 2, ClArr(3), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3), CurY, 2, ClArr(4), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY, 2, ClArr(5) + ClArr(6) - 30, pFont)

                        CurY = CurY + TxtHgt + YInc
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)
                        CurY = CurY + TxtHgt


                        Da2 = New SqlClient.SqlDataAdapter("select * from Specification_BabyCone_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and set_code = '" & Trim(EntryCode) & "' and Gross_Weight <> 0 Order by sl_no", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        SNo = 0

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - YInc

                            For i = 0 To Dt2.Rows.Count - 1

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + 10, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30 - 5, CurY, 1, 0, pFont)

                                'TtWrpGrsWgt = TtWrpGrsWgt + Val(Dt2.Rows(i).Item("Bags").ToString)
                                'TtWrpTrWgt = TtWrpTrWgt + Val(Dt2.Rows(i).Item("Cones").ToString)
                                'TtWrpNetWgt = TtWrpNetWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + YInc
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)

                        CurY = CurY + TxtHgt - YInc
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_gross_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30 - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + YInc
                        Common_Procedures.Print_To_PrintDocument(e, "Tare Weight ", LMargin + ClArr(1) + ClArr(2) + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_tare_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30 - 5, CurY, 1, 0, pFont)


                        CurY = CurY + TxtHgt + YInc
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)

                        CurY = CurY + TxtHgt - YInc
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_bags").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("total_baby_cones").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("total_baby_net_weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30 - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + YInc
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 30, CurY)

                    End If

                End If

                '---------------------------------------------------------------------------------------------------- 
                '**********************         YARN STOCK SUMMARY             **********************
                '----------------------------------------------------------------------------------------------------


                If Val(prn_PageNo) <= 1 Or Prn_YrnStkSumm_2ndPage_STS = True Then

                    If Val(Common_Procedures.settings.StatementPrint_YarnStockSummary) = 1 Then

                        CurY = CurY + TxtHgt + 10

                        p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK SUMMARY", LMargin, CurY, 2, ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), p1Font)

                        CurY = CurY + TxtHgt + 10

                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)
                        CurY = CurY + 10

                        Common_Procedures.Print_To_PrintDocument(e, "TYPE", LMargin + 2, CurY, 2, ClArr(1) + 15, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "MILL NAME", LMargin + ClArr(1) + 15, CurY, 2, ClArr(2) + ClArr(3) - 15 + ClArr(4) - 25, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "CONES", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 25, CurY, 2, ClArr(5), pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 25, CurY, 2, ClArr(6) + 25, pFont)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)
                        CurY = CurY + TxtHgt

                        Da2 = New SqlClient.SqlDataAdapter("select * from Temp_Statement_Yarn_Stock_Summary where Weight <> 0 Order by Order_By, Mill_Name", Con)
                        Dt2 = New DataTable
                        Da2.Fill(Dt2)

                        If Dt2.Rows.Count > 0 Then

                            CurY = CurY - TxtHgt - 10

                            For i = Prn_YrnStkSumm_StartIndx To Dt2.Rows.Count - 1

                                If CurY >= 980 Then
                                    p1Font = New Font("Calibri", 9.5, FontStyle.Bold)
                                    CurY = CurY + TxtHgt
                                    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, p1Font)
                                    CurY = CurY + 5
                                    Prn_YrnStkSumm_2ndPage_STS = True
                                    Prn_YrnStkSumm_StartIndx = i
                                    GoTo YRNSTKSUMM_1000
                                End If

                                SNo = SNo + 1

                                CurY = CurY + TxtHgt

                                'Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + 7, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + 5, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(Dt2.Rows(i).Item("Mill_Name").ToString), 12), LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)

                                Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 25 + ClArr(5) - 5, CurY, 1, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                                'Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Yarn_Type").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Mill_Name").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + 5, CurY, 0, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Bags").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Val(Dt2.Rows(i).Item("Cones").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                'Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Weight").ToString), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                                Prn_TtYSBgs = Prn_TtYSBgs + Val(Dt2.Rows(i).Item("Bags").ToString)
                                Prn_TtYSCns = Prn_TtYSCns + Val(Dt2.Rows(i).Item("Cones").ToString)
                                Prn_TtYSWgt = Prn_TtYSWgt + Val(Dt2.Rows(i).Item("Weight").ToString)

                            Next i

                        End If

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        CurY = CurY + TxtHgt - 10
                        Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClArr(1) + 15 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Prn_TtYSCns), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 25 - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtYSWgt), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY)

                        Prn_YrnStkSumm_2ndPage_STS = False

                    End If

                End If

YRNSTKSUMM_1000:

                '---------------------------------------------------------------------------------------------------- 
                '**********************         YARN STOCK PARTICULARS              **********************
                '----------------------------------------------------------------------------------------------------

                CurY = Det_Top

                If Val(prn_PageNo) <= 1 Then

                    PL1 = LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13)

                    Y1 = CurY + 0.6
                    Y2 = CurY + 3 + TxtHgt  '- 10 + TxtHgt + 5
                    Common_Procedures.FillRegionRectangle(e, PL1, Y1, PageWidth, Y2, Brushes.Gainsboro)

                    CurY = CurY + 3

                    W1 = e.Graphics.MeasureString("Opening Bal : ", pFont).Width

                    p1Font = New Font("Calibri", 11, FontStyle.Bold)
                    'p1Font = New Font("Calibri", 11, FontStyle.Underline)
                    'p1Font = New Font("Calibri", 13, FontStyle.Bold Or FontStyle.Underline)  ---  Working
                    Common_Procedures.Print_To_PrintDocument(e, "YARN STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                    CurY = CurY + TxtHgt + 5

                    Common_Procedures.Print_To_PrintDocument(e, "Opening Bal", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_OpWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_OpStNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No.:  " & Trim(prn_Yrn_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Rec.", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_RcptWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    If Trim(prn_Yrn_RcptNo) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Yrn_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    If Val(Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn) = 2 Then

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Cons. Yarn", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_ConsWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_ExShWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Short Yarn", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Excess Yarn", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                    Else

                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "Yarn Taken", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_TknWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, "Baby Cone", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_BayCnWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    End If

                    CurY = CurY + TxtHgt

                    Common_Procedures.Print_To_PrintDocument(e, "Yarn Delivery", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Yrn_DelvWt), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                    ItmNm1 = Trim(prn_Yrn_DcNo)
                    'If Trim(ItmNm1) = "" Then
                    '    ItmNm1 = Trim(prn_DetDt.Rows(prn_DetIndx).Item("Count_Name").ToString) & " " & Trim(prn_DetDt.Rows(prn_DetIndx).Item("Count_Description").ToString) & IIf(Trim(prn_DetDt.Rows(prn_DetIndx).Item("Mill_Name").ToString) <> "", " - " & Trim(prn_DetDt.Rows(prn_DetIndx).Item("Mill_Name").ToString), "")
                    'End If
                    ItmNm2 = ""
                    If Len(ItmNm1) > 25 Then
                        For i = 25 To 1 Step -1
                            If Mid$(Trim(ItmNm1), i, 1) = " " Or Mid$(Trim(ItmNm1), i, 1) = "," Or Mid$(Trim(ItmNm1), i, 1) = "." Or Mid$(Trim(ItmNm1), i, 1) = "-" Or Mid$(Trim(ItmNm1), i, 1) = "/" Or Mid$(Trim(ItmNm1), i, 1) = "_" Or Mid$(Trim(ItmNm1), i, 1) = "(" Or Mid$(Trim(ItmNm1), i, 1) = ")" Or Mid$(Trim(ItmNm1), i, 1) = "\" Or Mid$(Trim(ItmNm1), i, 1) = "[" Or Mid$(Trim(ItmNm1), i, 1) = "]" Or Mid$(Trim(ItmNm1), i, 1) = "{" Or Mid$(Trim(ItmNm1), i, 1) = "}" Then Exit For
                        Next i
                        If i = 0 Then i = 25
                        ItmNm2 = Microsoft.VisualBasic.Right(Trim(ItmNm1), Len(ItmNm1) - i)
                        ItmNm1 = Microsoft.VisualBasic.Left(Trim(ItmNm1), i - 1)
                    End If

                    If Trim(ItmNm1) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                        Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(ItmNm1), PL1 + 10, CurY, 0, 0, p1Font)
                    End If

                    If Trim(ItmNm2) <> "" Then
                        CurY = CurY + TxtHgt - 2
                        Common_Procedures.Print_To_PrintDocument(e, Trim(ItmNm2) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                    End If

                    If Val(prn_Yrn_RwExShWt) <> 0 Then

                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_RwExShWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Short", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Rewinding Excess", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_RwExShWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_RwExShStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Set.No. :  " & Trim(prn_Yrn_RwExShStNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                    End If

                    If Val(prn_Yrn_TranfrWt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_TranfrWt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_TranfrWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Transfer", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_TranfrWt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_TranfrNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_TranfrNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If
                    End If

                    If Val(prn_Yrn_ExcSht_Wt) <> 0 Then
                        CurY = CurY + TxtHgt
                        If Val(prn_Yrn_ExcSht_Wt) < 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Exc)", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(-)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExcSht_Wt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        Else
                            Common_Procedures.Print_To_PrintDocument(e, "Yarn Adj.(Sht)", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, "(+)  :", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(prn_Yrn_ExcSht_Wt)), "#########0.000"), PageWidth - 5, CurY, 1, 0, pFont)

                        End If

                        If Trim(prn_Yrn_ExcSht_No) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 8, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(No. :  " & Trim(prn_Yrn_ExcSht_No) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If
                    End If

                    If Val(Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn) = 2 Then
                        Bal_Yrn_Wt = prn_Yrn_OpWt + prn_Yrn_RcptWt - prn_Yrn_DelvWt - prn_Yrn_ConsWt + prn_Yrn_ExShWt + prn_Yrn_RwExShWt + prn_Yrn_TranfrWt + prn_Yrn_ExcSht_Wt
                    Else
                        Bal_Yrn_Wt = prn_Yrn_OpWt + prn_Yrn_RcptWt - prn_Yrn_DelvWt - prn_Yrn_TknWt + prn_Yrn_BayCnWt + prn_Yrn_RwExShWt + prn_Yrn_TranfrWt + prn_Yrn_ExcSht_Wt
                    End If

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    CurY = CurY + 10
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                    Common_Procedures.Print_To_PrintDocument(e, "Balance Yarn", PL1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Bal_Yrn_Wt), "#########0.000"), PageWidth - 5, CurY, 1, 0, p1Font)

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)


                    '----------------------------------------------------------------------------------------------------
                    '**********************      EMPTY BEAM STOCK DETAILS       **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then

                        If Val(prn_PageNo) <= 1 Then

                            Y1 = CurY + 0.5
                            Y2 = CurY + TxtHgt - 10 + TxtHgt + 5
                            Common_Procedures.FillRegionRectangle(e, PL1, Y1, PageWidth, Y2, Brushes.Gainsboro)

                            CurY = CurY + TxtHgt - 10

                            p1Font = New Font("Calibri", 11, FontStyle.Bold)
                            'p1Font = New Font("Calibri", 11, FontStyle.Underline)
                            Common_Procedures.Print_To_PrintDocument(e, "EMPTY BEAM STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                            CurY = CurY + TxtHgt + 5

                            Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Op), PageWidth - 5, CurY, 1, 0, pFont)

                            If Trim(prn_EmpBm_OpStNo) <> "" Then
                                CurY = CurY + TxtHgt - 2
                                p1Font = New Font("Calibri", 9, FontStyle.Regular)
                                Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBm_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                            End If

                            CurY = CurY + TxtHgt

                            Common_Procedures.Print_To_PrintDocument(e, "Beams Received", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Rcpt), PageWidth - 5, CurY, 1, 0, pFont)

                            If Trim(prn_EmpBm_RcptNo) <> "" Then
                                CurY = CurY + TxtHgt - 2
                                p1Font = New Font("Calibri", 9, FontStyle.Regular)
                                Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBm_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                            End If

                            CurY = CurY + TxtHgt

                            Common_Procedures.Print_To_PrintDocument(e, "Consumed Beams", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Cons), PageWidth - 5, CurY, 1, 0, pFont)

                            CurY = CurY + TxtHgt

                            Common_Procedures.Print_To_PrintDocument(e, "Beams Delivered", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Delv), PageWidth - 5, CurY, 1, 0, pFont)

                            If Trim(prn_EmpBm_DcNo) <> "" Then
                                CurY = CurY + TxtHgt - 2
                                p1Font = New Font("Calibri", 9, FontStyle.Regular)
                                Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBm_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                            End If

                            Bal_Bms = prn_EmpBm_Op + prn_EmpBm_Rcpt - prn_EmpBm_Delv - prn_EmpBm_Cons

                            CurY = CurY + TxtHgt
                            e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                            CurY = CurY + 10
                            p1Font = New Font("Calibri", 10, FontStyle.Bold)
                            Common_Procedures.Print_To_PrintDocument(e, "Balance Beams", PL1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bms), PageWidth - 5, CurY, 1, 0, p1Font)

                            CurY = CurY + TxtHgt + 5
                            e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                        End If

                    End If
                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         EMPTY GUNNIES STOCK DETAILS              **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_EmptyBagStockDetails) = 1 Then

                        Y1 = CurY + 0.5
                        Y2 = CurY + TxtHgt - 10 + TxtHgt + 5
                        Common_Procedures.FillRegionRectangle(e, PL1, Y1, PageWidth, Y2, Brushes.Gainsboro)

                        CurY = CurY + TxtHgt - 10 ' (TxtHgt \ 2)

                        p1Font = New Font("Calibri", 11, FontStyle.Bold)
                        'p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "EMPTY GUNNIES STOCK", PL1, CurY, 2, ClArr(14), p1Font)

                        CurY = CurY + TxtHgt + 10

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Balance", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Op), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBg_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Bags Received", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Rcpt), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBg_RcptNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If


                        CurY = CurY + TxtHgt + 2

                        Common_Procedures.Print_To_PrintDocument(e, "Bags Delivered", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBg_Delv), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_EmpBg_DcNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBg_DcNo) & ")", PL1 + 15, CurY, 0, 0, p1Font)
                        End If

                        Bal_Bgs = prn_EmpBg_Op + prn_EmpBg_Rcpt - prn_EmpBg_Delv

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                        CurY = CurY + TxtHgt - 10
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance Bags", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bgs), PageWidth - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    End If

                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         EMPTY GUNNIES STOCK (SIMPLE)              **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_EmptyBagStockSimple) = 1 Then

                        Bal_Bgs = prn_EmpBg_Op + prn_EmpBg_Rcpt - prn_EmpBg_Delv

                        CurY = CurY + TxtHgt + 10

                        'p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Empty Gunnies", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bgs), PageWidth - 5, CurY, 1, 0, pFont)

                        CurY = CurY + 5

                    End If





                    '---------------------------------------------------------------------------------------------------- 
                    '**********************         AMOUNT DETAILS              **********************
                    '----------------------------------------------------------------------------------------------------

                    If Val(Common_Procedures.settings.StatementPrint_AmountDetails) = 1 Then

                        Y1 = CurY + 0.5
                        Y2 = CurY + TxtHgt - 10 + TxtHgt + 5
                        Common_Procedures.FillRegionRectangle(e, PL1, Y1, PageWidth, Y2, Brushes.Gainsboro)

                        W1 = e.Graphics.MeasureString("  Set Amount : ", pFont).Width

                        CurY = CurY + TxtHgt - 10

                        p1Font = New Font("Calibri", 11, FontStyle.Bold)
                        'p1Font = New Font("Calibri", 11, FontStyle.Underline)
                        Common_Procedures.Print_To_PrintDocument(e, "AMOUNT BALANCE DETAILS", PL1, CurY, 2, ClArr(14), p1Font)

                        CurY = CurY + TxtHgt + 10

                        Common_Procedures.Print_To_PrintDocument(e, "Opening Bal", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Op)), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_Amt_OpStNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_Amt_OpStNo) & ")", PL1 + 15, CurY, 0, 0, pFont)
                        End If

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, "Rec Amount", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_Rcpt)), PageWidth - 5, CurY, 1, 0, pFont)

                        If Trim(prn_Amt_RcptNo) <> "" Then
                            CurY = CurY + TxtHgt - 2
                            p1Font = New Font("Calibri", 9, FontStyle.Regular)
                            Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_Amt_RcptNo) & ")", PL1 + 5, CurY, 0, 0, p1Font)
                        End If


                        CurY = CurY + TxtHgt + 2

                        Common_Procedures.Print_To_PrintDocument(e, "Set Amount", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(prn_Amt_CurSet)), PageWidth - 5, CurY, 1, 0, pFont)

                        Bal_Amt = prn_Amt_Op - prn_Amt_Rcpt + prn_Amt_CurSet

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                        CurY = CurY + TxtHgt - 10
                        p1Font = New Font("Calibri", 10, FontStyle.Bold)
                        Common_Procedures.Print_To_PrintDocument(e, "Balance ", PL1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, ":", PL1 + W1 + 5, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Common_Procedures.Currency_Format(Val(Bal_Amt)), PageWidth - 5, CurY, 1, 0, p1Font)

                        CurY = CurY + TxtHgt + 10
                        e.Graphics.DrawLine(Pens.Black, PL1 + W1 + 20, CurY, PageWidth, CurY)

                    End If

                End If


                '---------------------------------------------------------------------------------------------------- 
                '**********************         SIZING DETAILS              **********************
                '----------------------------------------------------------------------------------------------------

                spFont = New Font("Calibri", 9, FontStyle.Regular)
                sTxtHgt = 17

                CurY = Det_Top

                If Val(prn_PageNo) <= 1 Or Prn_SizingDetails_2ndPage_STS = True Then

                    Da1 = New SqlClient.SqlDataAdapter("select distinct(Sizing_SlNo) from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' Order by Sizing_SlNo", Con)
                    Dt1 = New DataTable
                    Da1.Fill(Dt1)

                    If Dt1.Rows.Count > 0 Then

                        For k = 0 To Dt1.Rows.Count - 1

                            CurY = CurY - 5  ' 10

                            Da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where company_idno = " & Str(Val(lbl_Company.Tag)) & " and Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' and set_code = '" & Trim(EntryCode) & "' and Sizing_SlNo = " & Str(Val(Dt1.Rows(k).Item("Sizing_SlNo").ToString)) & " Order by sl_no", Con)
                            Dt2 = New DataTable
                            Da2.Fill(Dt2)

                            If Dt2.Rows.Count > 0 Then

                                For i = Prn_SizingDetails_StartIndx To Dt2.Rows.Count - 1

                                    If (i > 0 And i Mod 38 = 0 And Prn_SizingDetails_2ndPage_STS = False) Or CurY >= 965 Then
                                        p1Font = New Font("Calibri", 9.5, FontStyle.Bold)
                                        CurY = CurY + TxtHgt + 5
                                        Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, p1Font)

                                        CurY = CurY + sTxtHgt + 5 ' 10
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), LnAr(4))
                                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(3))


                                        Prn_SizingDetails_2ndPage_STS = True
                                        Prn_SizingDetails_StartIndx = i
                                        Prn_YrnTknDet_2ndPage_STS = True
                                        GoTo SIZDET_1000
                                    End If

                                    SNo = SNo + 1

                                    CurY = CurY + sTxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Dt2.Rows(i).Item("Sl_No").ToString)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Trim(Dt2.Rows(i).Item("Beam_No").ToString), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Gross_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Tare_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Net_Weight").ToString), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Noof_Pcs").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(Dt2.Rows(i).Item("Meters").ToString), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)

                                    Prn_TtSizBms = Prn_TtSizBms + 1
                                    Prn_TtSizGrsWgt = Prn_TtSizGrsWgt + Val(Dt2.Rows(i).Item("Gross_Weight").ToString)
                                    Prn_TtSizTrWgt = Prn_TtSizTrWgt + Val(Dt2.Rows(i).Item("Tare_Weight").ToString)
                                    Prn_TtSizNetWgt = Prn_TtSizNetWgt + Val(Dt2.Rows(i).Item("Net_Weight").ToString)
                                    Prn_TtSizPcs = Prn_TtSizPcs + Val(Dt2.Rows(i).Item("Noof_Pcs").ToString)
                                    Prn_TtSizMtrs = Prn_TtSizMtrs + Val(Dt2.Rows(i).Item("Meters").ToString)

                                Next i

                            End If

                            CurY = CurY + sTxtHgt + 5 ' 10
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                            CurY = CurY + sTxtHgt - 5 ' 10
                            'Common_Procedures.Print_To_PrintDocument(e, Trim(Val(SNo)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 8, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(Prn_TtSizBms)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + 5, CurY, 0, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizGrsWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizTrWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizNetWgt), "########0.0"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizPcs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Prn_TtSizMtrs), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 5, CurY, 1, 0, pFont)


                            CurY = CurY + sTxtHgt + 5 ' 10
                            e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY)

                        Next k

                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12), LnAr(4))
                        e.Graphics.DrawLine(Pens.Black, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), CurY, LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13), LnAr(3))

                        Prn_SizingDetails_2ndPage_STS = False

                    End If

                End If

SIZDET_1000:


                '---------------------------------------------------------------------------------------------------- 
                '**********************         FOOTER             **********************
                '----------------------------------------------------------------------------------------------------

                Printing_Format15_PageFooter(e, EntryCode, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PageHeight, CurY, LnAr, ClArr, True)

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

        If Prn_YrnStkSumm_2ndPage_STS = True Or Prn_SizingDetails_2ndPage_STS = True Or Prn_YrnTknDet_2ndPage_STS = True Then
            Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(prn_PageNo)), PageWidth - 10, TMargin - TxtHgt, 1, 0, pFont)
            e.HasMorePages = True

        Else
            e.HasMorePages = False

        End If

    End Sub

    Private Sub Printing_Format15_PageHeader(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim p1Font As Font
        Dim Cmp_Name As String, Cmp_Add1 As String, Cmp_Add2 As String
        Dim Cmp_PhNo As String, Cmp_GSTTinNo As String, Cmp_CstNo As String
        Dim strHeight As Single
        Dim C1 As Single, C2 As Single, C3 As Single, C4 As Single
        Dim W1 As Single, W2 As Single, W3 As Single
        Dim ExcSht_Str As String
        Dim Bal_Bms As Integer = 0
        Dim YInc As Single = 0
        Dim MilNm1 As String, MilNm2 As String
        Dim I As Integer = 0
        Dim Y1 As Single = 0, Y2 As Single = 0

        PageNo = PageNo + 1

        CurY = TMargin

        If PageNo > 1 Then
            Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(PageNo)), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
        End If

        'da2 = New SqlClient.SqlDataAdapter("select * from Stock_SizedPavu_Processing_Details where Reference_Code = '" & Trim(Pk_Condition) & Trim(EntryCode) & "' Order by sl_no", Con)
        'da2.Fill(dt2)
        'If dt2.Rows.Count > 30 Then
        '    Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(PageNo)), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
        'End If
        'dt2.Clear()

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY

        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
        Cmp_PhNo = "" : Cmp_GSTTinNo = "" : Cmp_CstNo = ""

        If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            Cmp_Name = Replace(Cmp_Name, Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString), "")
            Cmp_Add1 = Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString)
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        Else
            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        End If

        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = "PHONE NO.:" & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString) <> "" Then
            Cmp_GSTTinNo = "GSTIN : " & prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString
        End If
        'If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
        '    Cmp_CstNo = "CST NO.: " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
        'End If


        If Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) <> "UNACCOUNT" Then

            CurY = CurY + TxtHgt - 10
            p1Font = New Font("Calibri", 22, FontStyle.Bold)
            'p1Font = New Font("Calibri", 18, FontStyle.Bold)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
                p1Font = New Font("Calibri", 14, FontStyle.Bold)
                CurY = CurY + strHeight
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1, LMargin, CurY, 2, PrintWidth, p1Font)
                strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height
                CurY = CurY + strHeight
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont)

            Else
                CurY = CurY + strHeight
                Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1 & " " & Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont)

            End If
            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, pFont)
            CurY = CurY + TxtHgt - 5
            Common_Procedures.Print_To_PrintDocument(e, Cmp_GSTTinNo, LMargin + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_CstNo, PageWidth - 10, CurY, 1, 0, pFont)

            CurY = CurY + TxtHgt + 5  ' 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

        End If
        LnAr(2) = CurY

        If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
            C1 = Val(ClAr(1)) + Val(ClAr(2)) + Val(ClAr(3)) + Val(ClAr(4)) + Val(ClAr(5)) + Val(ClAr(6)) + Val(ClAr(7)) + Val(ClAr(8))
            C2 = 220
            'C3 = 200
            C4 = PageWidth - (LMargin + C1 + C2)

        Else

            C1 = 470 ' Val(ClAr(1)) + Val(ClAr(2)) + Val(ClAr(3)) + Val(ClAr(4)) + Val(ClAr(5)) + Val(ClAr(6)) + Val(ClAr(7))
            C2 = 315 ' Val(ClAr(8)) + Val(ClAr(9)) + Val(ClAr(10)) + Val(ClAr(11)) + Val(ClAr(12)) + Val(ClAr(13))
            C3 = PageWidth - (LMargin + C1 + C2)
            C4 = 0

        End If

        W1 = e.Graphics.MeasureString("Average Count : ", pFont).Width
        W2 = e.Graphics.MeasureString("Tape Length : ", pFont).Width
        W3 = e.Graphics.MeasureString("Consumed Rolls  : ", pFont).Width


        Try

            If Val(PageNo) <= 1 Then



                MilNm1 = Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString)
                MilNm2 = ""
                If Len(MilNm1) > 15 Then
                    For I = 15 To 1 Step -1
                        If Mid$(Trim(MilNm1), I, 1) = " " Or Mid$(Trim(MilNm1), I, 1) = "," Or Mid$(Trim(MilNm1), I, 1) = "." Or Mid$(Trim(MilNm1), I, 1) = "-" Or Mid$(Trim(MilNm1), I, 1) = "/" Or Mid$(Trim(MilNm1), I, 1) = "_" Or Mid$(Trim(MilNm1), I, 1) = "(" Or Mid$(Trim(MilNm1), I, 1) = ")" Or Mid$(Trim(MilNm1), I, 1) = "\" Or Mid$(Trim(MilNm1), I, 1) = "[" Or Mid$(Trim(MilNm1), I, 1) = "]" Or Mid$(Trim(MilNm1), I, 1) = "{" Or Mid$(Trim(MilNm1), I, 1) = "}" Then Exit For
                    Next I
                    If I = 0 Then I = 15
                    MilNm2 = Microsoft.VisualBasic.Right(Trim(MilNm1), Len(MilNm1) - I)
                    MilNm1 = Microsoft.VisualBasic.Left(Trim(MilNm1), I - 1)
                End If

                p1Font = New Font("Calibri", 14, FontStyle.Bold)

                CurY = CurY + TxtHgt - 5
                Common_Procedures.Print_To_PrintDocument(e, "TO : ", LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Set No", LMargin + C1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Set_No").ToString), LMargin + C1 + W1 + 25, CurY, 0, 0, p1Font)

                If Len(Trim(prn_HdDt.Rows(0).Item("Mill_Name").ToString)) > 15 Then
                    p1Font = New Font("Calibri", 8, FontStyle.Regular)
                Else
                    p1Font = New Font("Calibri", 10, FontStyle.Regular)
                End If

                Common_Procedures.Print_To_PrintDocument(e, "Mill Name", LMargin + C1 + C2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(MilNm1), LMargin + C1 + C2 + W2 + 25, CurY, 0, 0, p1Font)
                If Trim(MilNm2) <> "" Then
                    Common_Procedures.Print_To_PrintDocument(e, Microsoft.VisualBasic.Left(Trim(MilNm2), 15), LMargin + C1 + C2 + W2 + 25, CurY + 12, 0, 0, p1Font)
                End If

                'If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                '    Common_Procedures.Print_To_PrintDocument(e, "Opening Rolls", LMargin + C1 + C2 + C3 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + C3 + W3 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Op), LMargin + C1 + C2 + C3 + W3 + 25, CurY, 0, 0, pFont)
                'End If

                YInc = 10
                CurY = CurY + TxtHgt
                If Len(Trim(prn_HdDt.Rows(0).Item("Ledger_MainName").ToString)) <= 30 Then
                    p1Font = New Font("Calibri", 10, FontStyle.Bold)
                ElseIf Len(Trim(prn_HdDt.Rows(0).Item("Ledger_MainName").ToString)) <= 35 Then
                    p1Font = New Font("Calibri", 9, FontStyle.Bold)
                Else
                    p1Font = New Font("Calibri", 8, FontStyle.Regular)
                End If

                Common_Procedures.Print_To_PrintDocument(e, "     " & "M/S." & prn_HdDt.Rows(0).Item("Ledger_MainName").ToString, LMargin + 10, CurY, 0, 0, p1Font)

                Common_Procedures.Print_To_PrintDocument(e, "DATE", LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("Set_Date").ToString)), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Ends_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)
                'If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                '    If Trim(prn_EmpBm_OpStNo) <> "" Then
                '        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                '        Common_Procedures.Print_To_PrintDocument(e, "(B/F Set No. :  " & Trim(prn_EmpBm_OpStNo) & ")", LMargin + C1 + C2 + C3 + 10 + 10, CurY, 0, 0, p1Font)
                '        'Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + C3 + W3 + 10, CurY, 0, 0, pFont)
                '        'Common_Procedures.Print_To_PrintDocument(e, "", LMargin + C1 + C2 + C3 + W3 + 25, CurY, 0, 0, pFont)
                '    End If
                ' End If

                YInc = 20

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address1").ToString, LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Count Name", LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Count_Name").ToString), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Tape Length", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("tape_length").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)

                'If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                '    Common_Procedures.Print_To_PrintDocument(e, "Rolls Received : ", LMargin + C1 + C2 + C3 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + C3 + W3 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Rcpt), LMargin + C1 + C2 + C3 + W3 + 25, CurY, 0, 0, pFont)
                'End If

                YInc = 30

                If Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString) >= 0 Then
                    ExcSht_Str = "Excess Yarn"
                    'ExcSht_Str = "Excess        : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                Else
                    ExcSht_Str = "Short Yarn"
                    'ExcSht_Str = "Short         : " & Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000")
                End If
                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address2").ToString, LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, ExcSht_Str, LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Math.Abs(Val(Val(prn_HdDt.Rows(0).Item("excess_short_yarn").ToString))), "########0.000"), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Beam Width", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Beam_Width_Name").ToString), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)

                'If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                '    If Trim(prn_EmpBm_RcptNo) <> "" Then
                '        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                '        Common_Procedures.Print_To_PrintDocument(e, "(Rc.No. :  " & Trim(prn_EmpBm_RcptNo) & ")", LMargin + C1 + C2 + C3 + 10 + 10, CurY, 0, 0, p1Font)
                '    End If
                'End If

                YInc = 35

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address3").ToString, LMargin + 10, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Average Count", LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("beam_count").ToString), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "Pickup %", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                If Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString) <> 0 Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("PickupPercentage_Party").ToString), "#########0.00"), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)
                Else
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("pickup_percentage").ToString), "#########0.00"), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)
                End If

                'If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                '    Common_Procedures.Print_To_PrintDocument(e, "Consumed Rolls", LMargin + C1 + C2 + C3 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + C3 + W3 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Cons), LMargin + C1 + C2 + C3 + W3 + 25, CurY, 0, 0, pFont)
                'End If

                YInc = 25

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "     " & prn_HdDt.Rows(0).Item("Ledger_Address4").ToString, LMargin + 10, CurY, 0, 0, pFont)
                'If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                '    Common_Procedures.Print_To_PrintDocument(e, "Rolls Delivery", LMargin + C1 + C2 + C3 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + C3 + W3 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, Val(prn_EmpBm_Delv), LMargin + C1 + C2 + C3 + W3 + 25, CurY, 0, 0, pFont)
                'End If

                CurY = CurY + TxtHgt
                If Trim(prn_HdDt.Rows(0).Item("Ledger_GSTinNo").ToString) <> "" Then
                    Common_Procedures.Print_To_PrintDocument(e, "     GSTIN : " & prn_HdDt.Rows(0).Item("Ledger_GSTinNo").ToString, LMargin + 10, CurY, 0, 0, pFont)
                End If
                'If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                '    If Trim(prn_EmpBm_DcNo) <> "" Then
                '        p1Font = New Font("Calibri", 8, FontStyle.Regular)
                '        Common_Procedures.Print_To_PrintDocument(e, "(Dc.No. :  " & Trim(prn_EmpBm_DcNo) & ")", LMargin + C1 + C2 + C3 + 10 + 10, CurY, 0, 0, p1Font)
                '    End If
                'End If

                YInc = 8

                CurY = CurY + TxtHgt
                Common_Procedures.Print_To_PrintDocument(e, "Mark", LMargin + C1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("pcs_length").ToString), LMargin + C1 + W1 + 25, CurY + YInc, 0, 0, pFont)


                Common_Procedures.Print_To_PrintDocument(e, "Elongation %", LMargin + C1 + C2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + W2 + 10, CurY + YInc, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdDt.Rows(0).Item("elongation_percentage").ToString), "#########0.00"), LMargin + C1 + C2 + W2 + 25, CurY + YInc, 0, 0, pFont)



                Bal_Bms = prn_EmpBm_Op + prn_EmpBm_Rcpt - prn_EmpBm_Delv - prn_EmpBm_Cons

                YInc = 30

                CurY = CurY + TxtHgt
                'If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                '    Common_Procedures.Print_To_PrintDocument(e, "Balance Rolls", LMargin + C1 + C2 + C3 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + C2 + C3 + W3 + 10, CurY, 0, 0, pFont)
                '    Common_Procedures.Print_To_PrintDocument(e, Val(Bal_Bms), LMargin + C1 + C2 + C3 + W3 + 25, CurY, 0, 0, pFont)
                'End If

                CurY = CurY + TxtHgt + 5  ' 10
                e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

                e.Graphics.DrawLine(Pens.Black, LMargin + C1, CurY, LMargin + C1, LnAr(2))
                e.Graphics.DrawLine(Pens.Black, LMargin + C1 + C2, CurY, LMargin + C1 + C2, LnAr(2))
                'If Val(Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails) = 1 Then
                '    e.Graphics.DrawLine(Pens.Black, LMargin + C1 + C2 + C3, CurY, LMargin + C1 + C2 + C3, LnAr(2))
                'End If
            End If
            LnAr(3) = CurY

            Y1 = CurY + 0.5
            Y2 = CurY + TxtHgt - 10 + TxtHgt + 10 + TxtHgt - 10 + TxtHgt + 10
            Common_Procedures.FillRegionRectangle(e, LMargin, Y1, PageWidth, Y2, Brushes.Gainsboro)



            CurY = CurY + TxtHgt - 10
            p1Font = New Font("Calibri", 12, FontStyle.Bold)
            'p1Font = New Font("Calibri", 12, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "WARPING DETAILS", LMargin, CurY, 2, ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), p1Font)
            Common_Procedures.Print_To_PrintDocument(e, "SIZING DETAILS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), p1Font)
            Common_Procedures.Print_To_PrintDocument(e, "PARTICULARS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY + TxtHgt, 2, ClAr(14), p1Font)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY)
            LnAr(4) = CurY

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Ends", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Meter", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(4), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(5), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "SNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "BeamNo", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Grs.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 2, ClAr(9), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Tr.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 2, ClAr(10), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Net.Wt", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(11), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Pcs", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Meters", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY, 2, ClAr(13), pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(5) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub Printing_Format15_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal EntryCode As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PageHeight As Single, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal is_LastPage As Boolean)
        Dim p1Font As Font
        Dim LS As Single

        Try

            LS = PageHeight - 135

            'If CurY >= LS Then
            '    CurY = CurY + TxtHgt
            'Else
            CurY = LS
            'End If

            'e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            'LnAr(6) = CurY

            'If Trim(UCase(prn_HdDt.Rows(0).Item("Company_Type").ToString)) <> "UNACCOUNT" Then

            '    If Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString) <> "" Then
            '        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            '        Cmp_Name = Replace(Cmp_Name, Trim(prn_HdDt.Rows(0).Item("Company_Division_Name").ToString), "")

            '    Else
            '        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString

            '    End If

            '    If Len(Trim(Cmp_Name)) > 25 Then
            '        p1Font = New Font("Calibri", 10, FontStyle.Bold)
            '    Else
            '        p1Font = New Font("Calibri", 10, FontStyle.Bold)
            '    End If

            '    CurY = CurY + 10
            '    'Common_Procedures.Print_To_PrintDocument(e, "For " & Cmp_Name, PageWidth - 15, CurY, 1, 0, p1Font)

            'End If

            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            'CurY = CurY + TxtHgt
            'Common_Procedures.Print_To_PrintDocument(e, "Prepared By", LMargin + 20, CurY, 0, 0, pFont)
            'Common_Procedures.Print_To_PrintDocument(e, "Checked By", LMargin + 300, CurY, 0, 0, pFont)
            ' Common_Procedures.Print_To_PrintDocument(e, "Authorised Signatory", PageWidth - 15, CurY, 1, 0, pFont)
            CurY = CurY + TxtHgt + 20

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(7) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(1))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(7), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(7), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(3))

            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(1))

            p1Font = New Font("Calibri", 7, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, "Software by TSOFT SOLUTIONS, Tirupur. Ph : 8508403222, 0421-4337417", LMargin + 8, CurY + 5, 0, 0, p1Font)

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub Warp_Weight_Calculation_for_Ends1_Ends2_Ends3()
        Dim TotMins As Long = 0
        Dim h As Long = 0
        Dim m As Long = 0
        Dim TmFrm As String = ""
        Dim TmTo As String = ""
        Dim vYrds_Mtrs_Value As String = 0
        Dim vWarp_Mtrs As String = 0
        Dim Ends1_wgt As String = 0
        Dim Ends2_wgt As String = 0
        Dim Ends3_wgt As String = 0
        Dim calc_Value As Single = 0
        Dim Wpm() As String

        Try

            If FrmLdSTS = True Or NoCaclSTS = True Then Exit Sub

            With dgv_WarpingDetails_Set1

                If .Visible Then

                    If .Rows.Count > 0 Then

                        If .Columns(23).Visible = True And .Columns(24).Visible = True And .Columns(25).Visible = True And .Columns(26).Visible = True And .Columns(27).Visible = True Then

                            Wpm = Split(txt_WarpMeters.Text, ",")

                            For i = 0 To .Rows.Count - 1

                                If Trim(UCase(cbo_Meters_Yards.Text)) = "YARDS" Then
                                    vYrds_Mtrs_Value = 1848
                                Else
                                    vYrds_Mtrs_Value = 1689.81
                                End If


                                Ends1_wgt = 0
                                Ends2_wgt = 0
                                Ends3_wgt = 0

                                If Val(.Rows(i).Cells(23).Value) <> 0 Then

                                    vWarp_Mtrs = 0
                                    If UBound(Wpm) <= 1 Then
                                        vWarp_Mtrs = Val(Wpm(1))
                                    End If

                                    Ends2_wgt = Format(((Val(.Rows(i).Cells(23).Value) * Val(vWarp_Mtrs) / Val(vYrds_Mtrs_Value)) / Val(lbl_BeamCount.Text)), "#########0.000")

                                End If

                                If Val(.Rows(i).Cells(24).Value) <> 0 Then

                                    vWarp_Mtrs = 0
                                    If UBound(Wpm) <= 2 Then
                                        vWarp_Mtrs = Val(Wpm(2))
                                    End If

                                    Ends3_wgt = Format(((Val(.Rows(i).Cells(24).Value) * Val(vWarp_Mtrs) / Val(vYrds_Mtrs_Value)) / Val(lbl_BeamCount.Text)), "#########0.000")

                                End If


                                Ends1_wgt = Format(Val(.Rows(i).Cells(4).Value) - Val(Ends2_wgt) - Val(Ends3_wgt), "##########0.000")

                                .Rows(i).Cells(25).Value = Format(Val(Ends1_wgt), "##########0.000")
                                .Rows(i).Cells(26).Value = Format(Val(Ends2_wgt), "##########0.000")
                                .Rows(i).Cells(27).Value = Format(Val(Ends3_wgt), "##########0.000")

                            Next

                        End If

                    End If

                End If

            End With


        Catch ex As Exception
            '-----
            Dim s As String = ex.Message.ToString

        End Try

    End Sub
    Private Sub cbo_Grid_BeamNo_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Grid_BeamNo.GotFocus
        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "BeamNo_Head", "BeamNo_Name", "", "(BeamNo_idno = 0)")
    End Sub




    Private Sub cbo_Grid_BeamNo_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Grid_BeamNo.KeyDown
        vcbo_KeyDwnVal = e.KeyValue
        Common_Procedures.ComboBox_ItemSelection_KeyDown(sender, e, Con, cbo_Grid_BeamNo, Nothing, Nothing, "BeamNo_Head", "BeamNo_Name", "", "(BeamNo_idno = 0)")
        With dgv_WarpingDetails_Set1

            If (e.KeyValue = 38 And cbo_Grid_BeamNo.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then

                dgv_WarpingDetails_Set1.Focus()
                dgv_WarpingDetails_Set1.CurrentCell = dgv_WarpingDetails_Set1.Rows(dgv_WarpingDetails_Set1.CurrentRow.Index).Cells(1)

            End If


            If (e.KeyValue = 40 And cbo_Grid_BeamNo.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                If dgv_WarpingDetails_Set1.CurrentRow.Index < dgv_WarpingDetails_Set1.Rows.Count - 1 Then
                    'If Val(txt_warp_dets_tot_beam.Text) > dgv_WarpingDetails_Set1.CurrentRow.Index - 1 Then
                    dgv_WarpingDetails_Set1.Focus()

                    dgv_WarpingDetails_Set1.CurrentCell = dgv_WarpingDetails_Set1.Rows(dgv_WarpingDetails_Set1.CurrentRow.Index + 1).Cells(1)

                Else

                    tab_WarpingDeatils.SelectTab(1)

                End If

            End If

        End With
    End Sub

    Private Sub cbo_Grid_BeamNo_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles cbo_Grid_BeamNo.KeyPress
        Common_Procedures.ComboBox_ItemSelection_KeyPress(sender, e, Con, cbo_Grid_BeamNo, Nothing, "BeamNo_Head", "BeamNo_Name", "", "(BeamNo_idno = 0)")


        If Asc(e.KeyChar) = 13 Then
            Get_BeamWeight()
            If dgv_WarpingDetails_Set1.CurrentCell.RowIndex = dgv_WarpingDetails_Set1.Rows.Count - 1 Then
                'If Val(txt_warp_dets_tot_beam.Text) < dgv_WarpingDetails_Set1.CurrentRow.Index - 1 Then  If  = .RowCount - 1 Then


                tab_WarpingDeatils.SelectTab(1)
            Else

                dgv_WarpingDetails_Set1.Focus()

                dgv_WarpingDetails_Set1.CurrentCell = dgv_WarpingDetails_Set1.Rows(dgv_WarpingDetails_Set1.CurrentRow.Index + 1).Cells(1)

            End If




        End If
    End Sub

    Private Sub cbo_Grid_BeamNo_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cbo_Grid_BeamNo.KeyUp
        'If e.Control = True And UCase(Chr(e.KeyCode)) = "D" Then
        '    dgv_Details_KeyUp(sender, e)
        'End If
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New BeamNo_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Grid_BeamNo.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()
        End If
    End Sub


    Private Sub cbo_Grid_BeamNoe_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cbo_Grid_BeamNo.TextChanged
        Try
            If cbo_Grid_BeamNo.Visible Then
                If IsNothing(dgv_WarpingDetails_Set1.CurrentCell) Then Exit Sub
                With dgv_WarpingDetails_Set1
                    If Val(cbo_Grid_BeamNo.Tag) = Val(.CurrentCell.RowIndex) And .CurrentCell.ColumnIndex = 6 Then
                        .Rows(.CurrentCell.RowIndex).Cells.Item(.CurrentCell.ColumnIndex).Value = Trim(cbo_Grid_BeamNo.Text)
                    End If
                End With
            End If

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "FOR MOVING...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Sub Get_BeamWeight()

        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim Beam_IdNo As Integer = 0
        Dim n As Integer = 0
        With dgv_WarpingDetails_Set1




            ' n = .CurrentRow.Index





            For i = 0 To .CurrentRow.Index

                Beam_IdNo = Common_Procedures.BeamNo_NameToIdNo(Con, (dgv_WarpingDetails_Set1.Rows(i).Cells(6).Value))
                da2 = New SqlClient.SqlDataAdapter("select a.Beam_Weight from BeamNo_Head a  where a.BeamNo_IdNo = " & Val(Beam_IdNo) & " ", Con)
                dt2 = New DataTable
                da2.Fill(dt2)
                If dt2.Rows.Count > 0 Then

                    dgv_WarpingDetails_Set1.Rows(i).Cells(3).Value = Format(Val(dt2.Rows(0).Item("Beam_Weight").ToString), "#########0.0")
                End If
                '
                dgv_WarpingDetails_Set1.Rows(i).Cells(2).Value = Val(dgv_WarpingDetails_Set1.Rows(i).Cells(3).Value) + Val(dgv_WarpingDetails_Set1.Rows(i).Cells(4).Value)

            Next i



        End With



    End Sub

    Private Sub txt_FromRange_GotFocus(sender As Object, e As System.EventArgs) Handles txt_FromRange.GotFocus
        Dim vWgtPerBm As String = 0

        If Val(txt_FromRange.Text) = 0 And Val(txt_ToRange.Text) = 0 Then

            If Val(txt_warp_dets_tot_consWT.Text) <> 0 And Val(txt_warp_dets_tot_beam.Text) <> 0 Then

                vWgtPerBm = Format(Val(txt_warp_dets_tot_consWT.Text) / Val(txt_warp_dets_tot_beam.Text), "###########0.0")

                txt_FromRange.Text = Format(Val(vWgtPerBm) - (Val(vWgtPerBm) * 5 / 100), "###########0.0")
                txt_ToRange.Text = Format(Val(vWgtPerBm) + (Val(vWgtPerBm) * 5 / 100), "###########0.0")

            End If

        End If

    End Sub

    Private Sub txt_ToRange_GotFocus(sender As Object, e As System.EventArgs) Handles txt_ToRange.GotFocus
        If Val(txt_ToRange.Text) = 0 Then
            txt_FromRange_GotFocus(sender, e)
        End If
    End Sub

    Private Sub cbo_Ends1_Shift_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends1_Shift.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Shift_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Ends1_Shift.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub
    Private Sub cbo_Ends2_Shift_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles cbo_Ends2_Shift.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Shift_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Ends2_Shift.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub


    Private Sub Cbo_Ends3_Shift_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles Cbo_Ends3_Shift.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Shift_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = Cbo_Ends3_Shift.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing1_Shift_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing1_Shift.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Shift_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing1_Shift.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing2_Shift_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing2_Shift.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Shift_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing2_Shift.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_Sizing3_Shift_KeyUp(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles cbo_Sizing3_Shift.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New Shift_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_Sizing3_Shift.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub cbo_LoomType_KeyUp(sender As Object, e As KeyEventArgs) Handles cbo_LoomType.KeyUp
        If e.Control = False And e.KeyValue = 17 And vcbo_KeyDwnVal = e.KeyValue Then
            Dim f As New LoomType_Creation

            Common_Procedures.Master_Return.Form_Name = Me.Name
            Common_Procedures.Master_Return.Control_Name = cbo_LoomType.Name
            Common_Procedures.Master_Return.Return_Value = ""
            Common_Procedures.Master_Return.Master_Type = ""

            f.MdiParent = MDIParent1
            f.Show()

        End If
    End Sub

    Private Sub btn_SaveAll_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_SaveAll.Click
        Dim pwd As String = ""

        Dim g As New Password
        g.ShowDialog()

        pwd = Trim(Common_Procedures.Password_Input)

        If Trim(UCase(pwd)) <> "TSSA7417" Then
            MessageBox.Show("Invalid Password", "FAILED...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            Exit Sub
        End If

        SaveAll_STS = True

        LastNo = ""
        movelast_record()

        LastNo = lbl_SetNo.Text

        movefirst_record()
        Timer1.Enabled = True

    End Sub

    Private Sub Timer1_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Timer1.Tick
        save_record()
        If Trim(UCase(LastNo)) = Trim(UCase(lbl_SetNo.Text)) Then
            Timer1.Enabled = False
            SaveAll_STS = False
            MessageBox.Show("All entries saved sucessfully", "FOR SAVING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Information)

        Else
            movenext_record()

        End If
    End Sub

    Private Sub cbo_Filter_PartyName_GotFocus(sender As Object, e As EventArgs) Handles cbo_Filter_PartyName.GotFocus
        Common_Procedures.ComboBox_ItemSelection_SetDataSource(sender, Con, "Ledger_AlaisHead", "Ledger_DisplayName", "((AccountsGroup_IdNo = 10  or Show_In_All_Entry = 1) and Close_Status = 0 )", "(Ledger_IdNo = 0)")
    End Sub

    Private Sub dgv_Selection_LostFocus(sender As Object, e As EventArgs) Handles dgv_Selection.LostFocus
        On Error Resume Next
        If Not IsNothing(sender.CurrentCell) Then sender.CurrentCell.Selected = False
    End Sub

    Private Sub dgv_Filter_Details_LostFocus(sender As Object, e As EventArgs) Handles dgv_Filter_Details.LostFocus
        On Error Resume Next
        If Not IsNothing(sender.CurrentCell) Then sender.CurrentCell.Selected = False
    End Sub

End Class