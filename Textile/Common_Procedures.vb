Imports System.IO
Imports System.Security
Imports System.Security.Cryptography
Imports System.Runtime.InteropServices
Imports System.Text.RegularExpressions
Imports System.Text
Imports System.Management
Imports System.IO.Ports
Imports Excel = Microsoft.Office.Interop.Excel
Imports System.Drawing.Printing

Public Class Common_Procedures

    Private Declare Function GetDiskFreeSpaceEx Lib "kernel32" Alias "GetDiskFreeSpaceExA" (ByVal lpDirectoryName As String, ByRef lpFreeBytesAvailableToCaller As Long, ByRef lpTotalNumberOfBytes As Long, ByRef lpTotalNumberOfFreeBytes As Long) As Long

    Private Declare Function ShowWindow Lib "user32" (ByVal handle As IntPtr, ByVal nCmdShow As Integer) As Integer
    Private Const SW_SHOWNA As Integer = 8
    Private Const SW_SHOWNOACTIVATE As Integer = 4

    Public Shared Software_IdNo As Integer = 1
    Public Shared CompanyDetailsDataBaseName As String = "TSoft_Textile_CompanyGroup_Details"
    Public Shared CompanyDetailsSizingDataBaseName As String = "TSoft_Sizing_CompanyGroup_Details"
    Public Shared CompanyDetailsTextileDataBaseName As String = "TSoft_Textile_CompanyGroup_Details"
    Public Shared Connection_String As String
    Public Shared ConnectionString_CompanyGroupdetails As String
    Public Shared ConnectionString_Master As String
    Public Shared ServerName As String
    Public Shared ServerLoginID As String
    Public Shared ServerPassword As String
    Public Shared Password_Input As String
    Public Shared ServerWindowsLogin As String
    Public Shared ServerDataBaseLocation_InExTernalUSB As String
    Public Shared SqlServer_PortNumber As String
    Public Shared Server_ONLine_CCNo As String

    Public Shared OPYEARCODE As String = "00-00"
    Public Shared OMS_ServerName As String
    Public Shared OMS_ServerLoginID As String
    Public Shared OMS_ServerPassword As String
    Public Shared OMS_ServerWindowsLogin As String
    Public Shared OMS_SqlServer_PortNumber As String
    Public Shared OMS_DataBaseName As String
    Public Shared OMS_Connection_String As String

    Public Shared Server_System_Status As Boolean
    Public Shared Office_System_Status As Boolean

    Public Shared CompGroupIdNo As Integer
    Public Shared CompGroupName As String
    Public Shared CompGroupFnRange As String

    Public Shared DataBaseName As String

    Public Shared FnRange As String
    Public Shared FnYearCode As String
    Public Shared CompIdNo As Integer
    Public Shared Company_FromDate As Date
    Public Shared Company_ToDate As Date
    Public Shared AppPath As String

    Public Shared Print_OR_Preview_Status As Integer

    Public Shared VoucherType As String
    Public Shared AdvanceType As String

    Public Shared MDI_LedType As String
    Public Shared MDI_VedType As String
    Public Shared StockDisplay_ProcessedItem_Name As String
    Public Shared StockDisplay_ProcessedItem_OnFloorStock As Decimal
    Public Shared StockDisplay_ProcessedItem_OnRackStock As Decimal

    Public Shared First_Opened_Today As Boolean = False

    Public Shared BillAdj_Amt As Single = 0

    Public Shared Last_Closed_FormName As String = ""
    Public Shared HDD_SERIALNO As String = ""

    Public Shared SoftwareType_Opened As Integer = 0
    Public Shared SoftwareModuleType_SelectedIdNo As Integer = 0

    Public Shared SerialPort1 As New SerialPort

    Public Shared WeaCloRcpt_Opening_OR_Entry As String = ""
    Public Shared Proc_Opening_OR_Entry As String = ""
    Public Shared Sewing_Opening_OR_Entry As String = ""
    Public Shared Spinning_Doubling_Reeling As String = ""
    Public Shared ClothDelivery_Opening_OR_Entry As String = ""
    Public Shared ClothOrder_Opening_OR_Entry As String = ""
    Public Shared vShowEntrance_Status_FromCCupdate As Boolean = False
    Public Shared vShowEntrance_Status_FromMDI As Boolean = False
    Public Shared DriveVolumeSerialName As String = ""
    Public Shared GST_Start_Date As Date = Convert.ToDateTime("01/07/2017")

    Public Shared Dos_Printing_FileName_Path As String = ""
    Public Shared Dos_Print_BatchFileName_Path As String = ""
    Public Shared Dos_PrintPreView_BatchFileName_Path As String = ""
    Public Shared Cover_Weight As Double = 0.5
    Public Shared Basket_Weight As Double = 2
    Public Shared Chess_Weight As Double = 0.033
    Public Shared Bag_Weight As Double = 0.2

    Public Shared Weaver_Reconcilation_Statement_by_Production_or_Delivery As Integer = 0

    Public Shared SP_SQLBACKUP_STATUS As Boolean = False

    Public Shared AWS_ACCESS_KEY As String
    Public Shared AWS_SECRET_KEY As String
    Public Shared AWS_DB_BUCKET As String
    Public Shared AWS_SW_BUCKET As String
    Public Shared AWS_BUCKET_FOR_DOWNLOADER As String

    Public Shared ReportTempTable As String
    Public Shared ReportTempSubTable As String
    Public Shared ReportTempSimpleTable As String
    Public Shared EntryTempTable As String
    Public Shared EntryTempSubTable As String
    Public Shared EntryTempSimpleTable As String

    Public Shared TempTable1 As String
    Public Shared TempTable2 As String
    Public Shared TempTable3 As String
    Public Shared TempTable_for_CrossChecking_PcsBale1 As String
    Public Shared TempTable_for_Closed_SalesOrders As String
    'Public Shared TempTable_for_PackingSlip_PcsSelection As String

    Public Shared VWeavIdno As Integer
    Public Shared ENTRY_SAVING_MESSAGE_STATUS As Boolean
    Public Shared OE_Department_IdNo As Integer
    Public Shared vLOGOUT_Status_FromMDI As Boolean = False
    Public Shared SEC_QUALITY_PRN_RETURN_STS As Boolean = False

    Public Shared Total_mtrs As Single = 0
    Public Shared Total_Wgt As Single = 0

    Public Shared prn_HdDt As New DataTable
    Public Shared prn_HdAr(1000, 20) As String
    Public Shared prn_DetAr(1000, 50, 10) As String
    Public Shared prn_HdIndx As Integer
    Public Shared prn_HdMxIndx As Integer
    Public Shared prn_Count As Integer
    Public Shared prn_PageNo As Integer
    Public Shared prn_TotalPcs As String = ""
    Public Shared prn_TotalMtrs As String = ""
    Public Shared prn_TotalWgt As String = ""
    Public Shared prn_TotaGrslWgt As String = ""



    Public Structure SettingsDetails
        Dim CustomerCode As String
        Dim CustomerDBCode As String
        Dim CompanyName As String
        Dim SoftWareName As String
        Dim SoftWare_UserType As String
        Dim Sdd As Date
        Dim Last_Opened_Date As Date
        Dim AutoBackUp_Date As Date
        Dim ExeFile_DateTime As Date
        Dim Autobackup_PenDrive_Path_Server As String
        Dim Combine_Textile_SizingSOftware As Integer
        Dim EntrySelection_Combine_AllCompany As Integer
        Dim InvoicePrint_Format As String
        Dim Jurisdiction As String
        Dim Report_Show_CurrentDate_IN_ToDate As Integer
        Dim Report_Show_CurrentDate_IN_CurrentYear_ToDate_and_Lastdate_IN_Previous_Year_ToDate As Integer

        Dim Weaver_YarnStock_InThiri_Status As Integer
        Dim WeaverWages_At_ReceiptDate As Integer
        Dim WeaverWages_Printing_Format As String
        Dim WeaverWages_Print_NoNeed_2nd_Page As Integer
        Dim WeaverWages_Print_Dont_Show_Company_Heading As Integer
        Dim WeaverWages_Print_Dont_Show_To_PartyName As Integer
        Dim WeaverWages_Print_Weavers_Name_IN_Heading As Integer
        Dim WeaverWages_Print_Weavers_BillNo_SeparateSlNo As Integer
        Dim WeaverWages_Print_2Copy_In_SinglePage As Integer
        Dim WeaverWagesPavuDelivery_Print_2Copy_In_SinglePage As Integer
        Dim Weaver_YarnStock_InMeter_Status As Integer
        Dim Weaver_Zari_Kuri_Entries_Status As Integer
        Dim WeaverLedger_Printing_Tamil As Integer
        Dim WeaverWagesPavuReceipt_print_2Copy_In_SinglePage As Integer
        Dim WeaverWagesKuraiPavuReceipt_print_2Copy_In_SinglePage As Integer
        Dim WeaverWagesYarnDelivery_Print_2Copy_In_SinglePage As Integer
        Dim WeaverWagesYarnReceipt_Print_2Copy_In_SinglePage As Integer
        Dim EmptyBeamPurchase_Print_2Copy_In_SinglePage As Integer
        Dim EmptyBeamBagConeDelivery_Print_2Copy_In_SinglePage As Integer
        Dim EmptyBeamBagConeReceipt_Print_2Copy_In_SinglePage As Integer
        Dim PavuYarnReceipt_Print_2Copy_In_SinglePage As Integer
        Dim ClothsalesDelivery_Print_2Copy_In_SinglePage As Integer
        Dim YarnPurchase_Print_2Copy_In_SinglePage As Integer
        Dim bobin_delivery_Print_2Copy_In_SinglePage As Integer

        Dim AutoLoomStatus As Integer
        Dim JOBWORKENTRY_Status As Integer
        Dim Jobwork_ConversionBill_Only As Integer
        Dim STORESENTRY_Status As Integer
        Dim PAYROLLENTRY_Status As Integer
        Dim PAYROLLENTRY_Attendance_In_Hours_Status As Integer
        'Dim Combine_Textile_SizingSOftware As Integer
        Dim OE_ENTRY_Status As Integer
        Dim FIBRE_ENTRY_STATUS As Integer

        Dim OESofwtare_ENTRY_Status As Integer
        Dim SizingSoftware_ENTRY_Status As Integer

        Dim NegativeStock_Restriction As Integer
        Dim Negative_Stock_Restriction_for_Yarn_Stock As Integer
        Dim Negative_Stock_Restriction_for_Pavu_Stock As Integer
        Dim Negative_Stock_Restriction_for_Cloth_Stock As Integer
        Dim Yarn_Negative_Stock_Restriction_in_MillWise_for_Godown As Integer
        Dim Yarn_Negative_Stock_Restriction_in_MillWise_for_Sizing As Integer

        Dim Printing_Show_PrintDialogue As Integer
        Dim Printing_For_FullSheet_Set_A4_As_Default_PaperSize As Integer
        Dim Printing_For_HalfSheet_Set_A4_As_Default_PaperSize As Integer
        Dim Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize As Integer

        Dim Cloth_Stock_IN_Pcs_Status As Integer
        Dim Pavu_Stock_IN_Pcs_Status As Integer
        Dim YarnProcessing_Entries_Status As Integer
        Dim FabricProcessing_Entries_Status As Integer
        Dim Bobin_Zari_Kuri_Entries_Status As Integer
        Dim Bobin_Production_Entries_Status As Integer

        Dim Sewing_Entries_Status As Integer
        Dim ClothDelivery_Entries_Status As Integer
        Dim ClothReceipt_LotNo_OR_RollNo_Text As String         '---   "LOT NO"   or   "ROLL NO"
        Dim ClothReceipt_PieceNo_OR_RollNo_Text As String       '---   "PIECE NO"   or   "ROLL NO"
        Dim ClothReceipt_PieceNo_Concept As String              '---   "1,2,3"   or   "A,B,C"   or   "CONTINIOUS/YEARWISE"   or   "CONTINIOUS/COMPANY"
        Dim Doffing_EntryFormat_Simple_OR_Detailed As String    '---   "LOT NO"   or   "ROLL NO"

        Dim SizingSpecification_AutoTransfer_PavuStock_To_Godown As Integer

        Dim OnSave_MoveTo_NewEntry_Status As Integer

        Dim SMS_Provider_LoginID As String
        Dim SMS_Provider_LoginPassword As String
        Dim SMS_Provider_SenderID As String
        Dim SMS_Provider_Key As String
        Dim SMS_Provider_RouteID As String
        Dim SMS_Provider_Type As String

        Dim ClothInvoice_Packing_Charge_Per_Bale As Single

        Dim Email_Address As String
        Dim Email_Password As String
        Dim Email_Host As String
        Dim Email_Port As Integer

        Dim PreviousEntryDate_ByDefault As Integer

        Dim Weaver_Cloth_Inward_Entry_Status As Integer

        Dim EmptyBeam_StockMaintenance_WidthWise_VendorWise As Integer

        Dim RoundOff_GST_Values As Integer
        Dim JobWorker_Pavu_Yarn_Stock_Posting_IN_Production As Integer
        Dim AutoLoom_PavuWidthWiseConsumption_IN_Delivery As Integer
        Dim JobWorker_PavuWidthWiseConsumption_IN_Delivery As Integer
        Dim AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_SeparateEntry As Integer
        Dim AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_Delivery_Receipt_Entry As Integer

        Dim Internal_Order_Entry_Status As Integer

        Dim Textile_Trading_Yarn_Cloth_Entries_Status As Integer
        Dim Textile_Trading_Yarn_Entries_Status As Integer
        Dim Textile_Trading_Cloth_Entries_Status As Integer
        Dim Textile_Trading_Yarn_Cloth_Pavu_Entries_Status As Integer

        Dim Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status As Integer
        Dim Cloth_sales_yarn_purchase_Return_ContinousNo_Status As Integer
        Dim Delivery_ContinousNo_Status As Integer


        Dim Multi_Godown_Status As Integer
        Dim AutoBackUp_IN_Pendrive_Compulsary_Status As Integer
        Dim Vefified_Status As Integer

        Dim User_Modifications_Show_Status As Integer
        Dim Approved_status As Integer

        Dim StatementPrint_Format As String
        Dim Combine_Textile_Sizing_Software_Status As Integer

        Dim StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn As Integer
        Dim StatementPrint_BabyConeDetails As Integer
        Dim StatementPrint_AmountDetails As Integer
        Dim StatementPrint_PickupElongation As Integer
        Dim StatementPrint_YarnTakenDetails As Integer
        Dim StatementPrint_YarnStockSummary As Integer
        Dim StatementPrint_EmptyBeamStockDetails As Integer
        Dim StatementPrint_EmptyBeamStock_WidthWise_Summary As Integer
        Dim StatementPrint_EmptyBagStockDetails As Integer
        Dim StatementPrint_EmptyBagStockSimple As Integer
        Dim StatementPrint_EmptyConeStockDetails As Integer
        Dim StatementPrint_EmptyConeStockSimple As Integer
        Dim StatementPrint_Yarn_Other_Count_Particulars As Integer
        Dim StatementPrint_Yarn_Other_Count_Particulars_Show_Running_Count_Also As Integer
        Dim StatementPrint_PickUp_Percentage As Integer
        Dim StatementPrint_Elongation_Percentage As Integer
        Dim StatementPrint_BookNo_IN_Stock_Particulars_Status As Integer
        Dim StatementPrint_PrintingOptionSelection As Integer


        Dim PavuDelivery_Print_2Copy_In_SinglePage As Integer
        Dim YarnDelivery_Print_2Copy_In_SinglePage As Integer
        Dim YarnReceipt_Print_2Copy_In_SinglePage As Integer
        'Dim EmptyBeamBagConeReceipt_Print_2Copy_In_SinglePage As Integer
        'Dim EmptyBeamBagConeDelivery_Print_2Copy_In_SinglePage As Integer
        Dim KuraiPavu_Receipt_Print_2Copy_In_SinglePage As Integer
        Dim ChemicalPurchase_Print_2Copy_In_SinglePage As Integer
        Dim ChemicalPurchase_Vat_Print_2Copy_In_Singlepage As Integer
        Dim ChemicalPurchaseReturn_Print_2Copy_In_Singlepage As Integer
        Dim FireWoodPurchase_Print_2Copy_In_Singlepage As Integer
        Dim InvoiceEntry_Set_SetDate_To_InvoiceDate As Integer
        Dim StatementPrint_InStock_Combine_AllCompany As Integer
        Dim Dos_Printing As Integer
        Dim Statement_Actual_Pickup As Integer
        Dim Yarn_Stock_LotNo_wise_Status As Integer
        Dim Statement_Production_Wages_For_Sizing As Integer
        Dim Statement_Production_Wages_For_Warping As Integer

        Dim Multi_Sizing_Warping_Machine_Status As Integer

        Dim Show_Modulewise_Entrance As Integer
        Dim Show_CompanyGroupWise_Entrance As Integer

        Dim AUTOPOSTING_OF_SIZINGSOFTWARE_PAVUDELIVERY_AS_TEXTILESOFWTARE_PAVURECEIPT As Integer
        Dim AUTOPOSTING_OF_SIZINGSOFTWARE_SPECIFICATION_AS_TEXTILESOFWTARE_SPECIFICATION As Integer
        Dim Textile_Sizing_Delivery_receipt_Selection As Integer


        Dim JobWorker_Yarn_to_Fabric_Conversion_Status As Integer
        Dim Loom_Crimp_Percentage_Calculation_for_Production_Meters As Integer
        Dim ClothInvoice_Bale_Selection_Compulsary As Integer
        Dim Invoice_for_TCS_Calculation_Dont_Consider_Previous_Year_Sales As Integer

        Dim EInvoice_API_TotalCredits_Per_Year As Integer
        Dim EWayBill_API_TotalCredits_Per_Year As Integer

        Dim NO_INTERNET_CONNECTION As Integer
        Dim PENDRIVE_BACKUP_OPTION_NONEED As Integer

        Dim Show_DashBoard_Status As Integer

        Dim Continuous_Fabric_Lot_No_for_Purchase_Weaver As Integer

        Dim CompanyWise_User_Rights As Boolean

        Dim Hide_COLOUR_DELIVERY_In_Processing_Transactions As Boolean
        Dim Hide_Qty_QtyMtr_In_Processing_Transactions As Boolean
        Dim Hide_Weight_Processing_Transactions As Boolean

        Dim Show_Folding_In_Weight_Processing_Transactions As Boolean

        Dim Show_Weaver_JobCard_Entry_STATUS As Integer
        Dim Show_Sizing_JobCard_Entry_Status As Integer

        Dim Beam_WidthWise_Delivery_Status As Integer
        Dim Show_Yarn_LotNo_Status As Integer

        Dim Cloth_WarpConsumption_Multiple_EndsCount_Status As Integer
        Dim Cloth_WeftConsumption_Multiple_WeftCount_Status As Integer

        Dim Pavu_Stock_Maintenance_in_Weight_Status As Integer

        Dim Show_Sales_OrderNumber_in_ALLEntry_Status As Integer
        Dim Sales_OrderNumber_compulsory_in_ALLEntry_Status As Integer

        Dim All_Delivery_Print_Ori_Dup_Trip_Sts As Integer

        Dim Dont_Open_Software_if_Software_Updates_Available As Integer

    End Structure
    Public Shared settings As SettingsDetails

    Public Structure MasterReturnDetails
        Dim Form_Name As String
        Dim Control_Name As String
        Dim Master_Type As String
        Dim Return_Value As String
    End Structure
    Public Enum Dos_DottedLines As Integer

        Hz1 = 45
        Hz2 = 45
        Vz1 = 124
        Vz2 = 124
        Corn1 = 218
        Corn2 = 191
        Corn3 = 192
        Corn4 = 217
        LfCon = 195
        RgtCon = 180
        CenCon = 197
        CenDwn = 194
        CenUp = 193

    End Enum

    Public Shared Master_Return As MasterReturnDetails

    Public Structure Report_InputDetails
        Dim ReportName As String
        Dim ReportGroupName As String
        Dim ReportHeading As String
        Dim ReportInputs As String
        Dim IsGridReport As Boolean
        Dim Date1 As Date
        Dim Date2 As Date
        Dim IdNo1 As Integer
        Dim IdNo2 As Integer
        Dim Name1 As String
        Dim Name2 As String
    End Structure
    Public Shared RptInputDet As Report_InputDetails

    Public Structure Report_ComboDetails
        Dim PKey As String
        Dim TableName As String
        Dim Selection_FieldName As String
        Dim Return_FieldName As String
        Dim Condition As String
        Dim Display_Name As String
        Dim BlankFieldCondition As String
        Dim CtrlType_Cbo_OR_Txt As String
    End Structure
    Public Shared RptCboDet(10) As Report_ComboDetails

    Public Structure ClothTypesStruct
        Dim Type1 As String
        Dim Type2 As String
        Dim Type3 As String
        Dim Type4 As String
        Dim Type5 As String
    End Structure
    Public Shared ClothType As ClothTypesStruct

    Public Structure UserDetailsStruct
        Dim IdNo As Integer
        Dim Name As String
        Dim Type As String
        Dim Show_Verified_Status As Integer
        Dim Show_UserCreation_Status As Integer
        Dim AccountPassword As String
        Dim Show_UserModification_Status As Integer
        Dim Show_VerifiedStatus As Integer
        Dim UnAccountPassword As Date
        Dim ADD_LAST_n_DAYS As Integer
        Dim EDIT_LAST_n_DAYS As Integer
        Dim DELETE_LAST_n_DAYS As Integer
        Dim ModuleWise_AccessRights As String
        Dim Show_Approved_Status As Integer
    End Structure
    Public Shared User As UserDetailsStruct

    Public Structure LotCodeStruct
        Dim Weaver_Cloth_Receipt As String
        Dim Purchase_Cloth_Receipt As String
        Dim Delivery_Return As String
        Dim Sales_Return As String
        Dim Sales_Return_GST As String
        Dim Processed_Fabric_Receipt As String
    End Structure
    Public Shared LotCode As LotCodeStruct

    Public Structure Encryption_DeEncryption_Pass_Salt_Phrase
        Dim passPhrase As String
        Dim saltValue As String
    End Structure
    Public Shared Entrance_SQL_PassWord As Encryption_DeEncryption_Pass_Salt_Phrase
    Public Shared UserCreation_AcPassWord As Encryption_DeEncryption_Pass_Salt_Phrase
    Public Shared UserCreation_UnAcPassWord As Encryption_DeEncryption_Pass_Salt_Phrase
    Public Shared SoftWareRegister As Encryption_DeEncryption_Pass_Salt_Phrase
    Public Shared SoftWareLock As Encryption_DeEncryption_Pass_Salt_Phrase
    Public Shared RegisterPassWord As Encryption_DeEncryption_Pass_Salt_Phrase
    Public Shared ONLINE_OMS_CONNECTION_CHECK As Encryption_DeEncryption_Pass_Salt_Phrase
    Public Shared ACTUAL_CUSTOMER_CODE_NUMBER As Encryption_DeEncryption_Pass_Salt_Phrase

    Public Structure UserRightsDetails

        Dim Verification_Status As String

        Dim Formula_Weaver_Yarn_Consumption As String
        Dim Formula_Weaver_Coolie As String

        Dim General_entry As String

        Dim Ledr_Wea_Siz_Rw_Trans_JbWrk_Creation As String
        Dim Ledger_Creation As String
        Dim Ledger_Verifition As String
        Dim Agent_Creation As String
        Dim Sizing_Creation As String
        Dim Weaver_Creation As String
        Dim JOBWORKER_Creation As String
        Dim Rewinding_Creation As String
        Dim Transport_Creation As String
        Dim Sewing_Creation As String
        Dim Godown_Creation As String
        Dim Spares_PurchaseParty_Creation As String
        Dim Firewood_PurchaseParty_Creation As String

        Dim Account_Group_creation As String
        Dim Tax_Creation As String
        Dim Area_Creation As String
        Dim ItemGroup_Creation As String
        Dim GST_AC_SETTINGS As String
        Dim Count_Creation As String
        Dim Mill_Creation As String
        Dim Fibre_Creation As String
        Dim Fibre_Lot_No_Creation As String
        Dim Endscount_Creation As String
        Dim cloth_Creation As String
        Dim Cloth_Set_Creation As String
        Dim Cloth_Sales_Rate_Master As String
        Dim Fabric_Bits_Group_Creation As String
        Dim Loom_Creation As String
        Dim Loom_type_Creation As String
        Dim Masters_Beam_Width_Creation As String
        Dim Vendor_Creation As String
        Dim Bobin_size_Creation As String
        Dim Border_size_Creation As String
        Dim Employee_Creation As String
        Dim Cheque_Printing_Position As String
        Dim Fabric_Lot_No_Creation As String
        Dim Variety_Creation As String
        Dim VehicleNo_Creation As String
        Dim Loading_UnLoading_Rate As String
        Dim Checking_Tableno_Creation As String
        Dim PieceChecking_Defects As String
        Dim App_User_Creation As String
        Dim user_Creation As String


        '************************************************************************************
        Dim Textile_OpeningStock As String
        Dim Closing_Stock_value As String
        Dim Unchecked_cloth_Opening As String
        Dim Piece_Opening As String
        Dim Bale_Opening As String
        Dim Loom_Opening As String
        Dim Cloth_Order_Indent_Opening As String
        Dim Cloth_Delivery_opening As String
        '************************************************************************************


        Dim Yarn_Purchase_Order_Entry As String
        Dim Yarn_Purchase_Entry As String
        Dim Yarn_Purchase_Receipt_Entry As String
        Dim Yarn_Sales_Order_Entry As String
        Dim Yarn_Purchase_Return_Entry As String
        Dim yarn_Delivery_Entry As String
        Dim Yarn_Sales_Entry As String
        Dim Yarn_Sales_Entry_vat As String
        Dim Yarn_Proforma_Sales_Entry As String
        Dim Yarn_test_Entry As String
        Dim Yarn_Purchase_Bill_Making_Entry As String
        Dim Yarn_Sales_Return_Entry As String


        Dim Pavu_Purchase_Entry As String
        Dim Pavu_Sales_Entry As String


        Dim Cloth_Purchase_Receipt_Entry As String
        Dim Cloth_Purchase_Checking_Entry As String
        Dim Cloth_Purchase_offer_Entry As String
        Dim Cloth_Purchase_order_Entry As String
        Dim Cloth_Purchase_Entry As String
        Dim Cloth_Purchase_Return_Entry As String


        Dim ClothSales_Order_Indent_Entry As String
        Dim ClothSales_OrderIndent_Entry_Close_Option As String
        Dim ClothSales_Cloth_Delivery_Entry As String
        Dim ClothSales_Cloth_Invoice_Entry As String
        Dim ClothSales_Cloth_Invoice_Entry_vat As String
        Dim ClothSales_Delivery_Return_Entry As String
        Dim ClothSales_Sales_Return_Entry As String
        Dim ClothSales_Proforma_Invoice_Entry As String
        Dim ClothSales_Buyer_offer_Entry As String
        Dim ClothSales_Roll_Packing_Entry As String
        Dim ClothSales_Piece_checking_Entry As String
        Dim ClothSales_Bale_Delivery_Entry As String

        Dim EmptyBeam_Purchase_Entry As String
        Dim EmptyBeam_sales_Entry As String
        Dim Piece_joining_Entry As String


        Dim General_Other_purchase_Entry As String
        Dim General_Other_Sales_Entry As String

        Dim Other_Purchase_Entry As String
        Dim Other_Sales_entry As String
        Dim Credit_note_Entry As String
        Dim Debit_note_Entry As String
        Dim General_Delivery_Entry As String



        Dim Sizing_Yarn_Delivery_Entry As String
        Dim Sizing_Specification_Entry As String
        Dim Sizing_pavu_Receipt_Entry As String
        Dim Sizing_Yarn_Receipt_Entry As String
        Dim Sizing_Beam_Close_Entry As String
        Dim Sizing_Yarn_Receipt_By_Sizing As String
        Dim Sizing_Pavu_Delivery_From_Sizing_Entry As String

        Dim Sizing_Yarn_Delivery_From_Sizing_Entry As String

        Dim Rewinding_Delivery_Entry As String
        Dim Rewinding_Receipt_Entry As String


        Dim Weaver_Yarn_Delivery_Entry As String
        Dim Weaver_Pavu_Delivery_Entry As String
        Dim Weaver_Pavu_Rceipt_Entry As String
        Dim Weaver_KuraiPavu_Rceipt_Entry As String
        Dim Weaver_Yarn_Rceipt_Entry As String
        Dim Weaver_Cloth_Rceipt_Entry As String
        Dim Weaver_ClothRceipt_Entry_Edit_FABRICNAME_AFTERLOCK As String
        Dim Weaver_Piece_Checking_Entry As String
        Dim Weaver_Piece_Checking_Entry_ApprovalStatus As String
        Dim Weaver_Piece_Checking_Entry_BarCode_Print_Status As String
        Dim Weaver_Piece_Checking_Entry_Warp_Weft_Stock_Updation As String
        Dim Weaver_ClothReceipt_and_PieceChecking_Entry As String
        Dim Weaver_Wages_Entry As String
        Dim Weaver_Weaving_Jobwork_Bill_Entry As String
        Dim Weaver_Slevedge_Cone_Invoice_Entry As String
        Dim Weaver_Wages_Entry_ChangeDate As String
        Dim Weaver_Debit_Entry As String
        Dim Weaver_bobin_delivery_Entry As String
        Dim Weaver_bobin_Return_Entry As String
        Dim Weaver_Advance_payment As String
        Dim Lot_Approval_Entry As String
        Dim PavuYarn_Delivery_Entry As String
        Dim PavuYarn_Receipt_Entry As String
        Dim Lot_Allotment_Details As String
        Dim Weaver_Piece_Approval_Entry As String
        Dim Weaver_Piece_Approval_Entry_Edit_DateColumn As String
        Dim Weaver_Piece_Approval_Entry_BarCode_Print_Status As String
        Dim Weaver_Lot_Checking_Planing_Entry As String

        Dim Empty_BeamBagCone_Delivery_Entry As String
        Dim Empty_BeamBagCone_Receipt_Entry As String

        Dim Packing_slip_Entry As String
        Dim Party_Amount_Receipt_Entry As String
        Dim Cheque_return_Entry As String
        Dim Weaver_payment_Entry As String

        Dim Yarn_Excess_Short_Entry As String
        Dim Pavu_Excess_Short_Entry As String
        Dim Cloth_Excess_Short_Entry As String
        Dim Piece_Excess_Short_Entry As String
        Dim EmptyBeam_Excess_Short_Entry As String

        Dim Yarn_Transfer_Entry As String
        Dim Pavu_Transfer_Entry As String
        Dim Cloth_Transfer_Entry As String
        Dim Piece_Transfer_Entry As String
        Dim Pavu_Transfer_Beam_wise_Entry As String
        Dim Bale_Transfer_Entry As String

        Dim Costing_Entry As String

        Dim Entry_Processing_Job_Order As String
        Dim Entry_Fabric_Delivery_To_Processing As String
        Dim Entry_Processed_Fabric_Receipt_From_Processing As String
        Dim Entry_Processed_Fabric_Inspection As String
        Dim Entry_Processing_Bill_Making As String
        Dim Entry_Fabric_Return_From_Processing As String
        Dim Entry_Processed_Fabric_Invoice_Gst As String
        Dim Entry_Processed_Fabric_Invoice_Vat As String
        Dim Entry_Processed_Waste_Delivery As String
        Dim Entry_JobCard_For_Sewing As String
        Dim Entry_Fabric_Delivery_To_Sewing As String
        Dim Entry_Finished_Product_Receipt_From_Sewing As String
        Dim Entry_Yarn_Delivery_To_Processing As String
        Dim Entry_Yarn_Receipt_From_Processing As String
        Dim Entry_Bill_Making As String
        Dim Entry_Spinning_Yarn_Delivery As String
        Dim Entry_Spinning_Yarn_Receipt As String
        Dim Entry_Spinning_Yarn_Bill_Making As String
        Dim Entry_Doubling_Yarn_Delivery As String
        Dim Entry_Doubling_Yarn_Receipt As String
        Dim Entry_Doubling_Yarn_Bill_Making As String
        Dim Entry_Reeling_Yarn_Delivery As String
        Dim Entry_Reeling_Yarn_Receipt As String
        Dim Entry_Reeling_Yarn_Bill_Making As String
        Dim Entry_Cotton_Purchase_Entry As String
        Dim Entry_Cotton_Sales_Entry As String
        Dim Entry_Fibre_Sales_Order As String
        Dim Entry_Fibre_Sales_Invoice As String
        'Dim Processing_Entry As String
        'Dim Sewing_Entry As String
        'Dim Yarn_Processing_Entry As String
        Dim Crimp_entry As String


        Dim Bobin_purchase_entry As String
        Dim Bobin_Sales_order_Entry As String
        Dim Bobin_Production_Entry As String
        Dim Jari_production_Entry As String
        Dim Bobin_Sales_delivery_Entry As String
        Dim Bobin_Sales_delivery_Return_Entry As String
        Dim Jari_Sales_delivery_Entry As String
        Dim Jari_Sales_Return_Entry As String

        Dim Empty_Bobin_Delivery As String
        Dim Empty_Bobin_Receipt As String
        Dim Proforma_bobin_sales As String

        Dim VanTrip_Entry As String
        Dim Weaver_Cloth_Return_Delivery As String
        ''*********************************************************************************************************
        Dim Store_purchase_Order_entry As String
        Dim Store_purchase_Inward_entry As String
        Dim Store_purchase_Return_entry As String
        Dim Store_Item_Issue_To_machine As String
        Dim Store_Item_Return_from_Machine As String
        Dim Store_Item_Delivery_Entry As String
        Dim Store_Item_Receipt_Entry As String

        Dim Store_Service_Delivery_Entry As String
        Dim Store_Service_Receipt_Entry As String
        Dim Stores_gate_Pass_Entry As String
        Dim Stores_Item_Excess_Short_Entry As String
        Dim Stores_Dispose_Entry As String


        Dim Stores_Oil_Service_Entry As String

        ''*********************************************************************************************************
        Dim Voucher_Entry As String

        ''***********************************************************************************************************
        Dim Accounts_Ledger As String
        Dim Accounts_Ledger_with_DueDays As String
        Dim Accounts_GroupLedger As String
        Dim Accounts_DayBook As String
        Dim Accounts_AllLedger As String
        Dim Accounts_TB As String
        Dim Accounts_BalanceSheet As String
        Dim Accounts_Profit_Loss As String
        Dim Accounts_CustomerBills As String
        Dim Accounts_AgentBills As String
        Dim Accounts_Agentcommission As String
        Dim Accounts_Accounts_Receivable_Report As String
        Dim Accounts_Accounts_Payable_Report As String
        Dim Accounts_VoucherRegister As String
        Dim Accounts_Party_Sales_Register_Invoice As String
        Dim Accounts_Sales_party_Ledger_Print As String

        ''***********************************************************************************************************
        Dim Accounts_Purchase_Purchase_Entry_Gst As String
        Dim Accounts_Purchase_Purchase_Return As String
        Dim Accounts_Purchase_Payment_Bank As String
        Dim Accounts_Purchase_Payment_Cash As String
        Dim Accounts_Purchase_Debit_Note_Entry As String
        Dim Accounts_Purchase_Date_Wise_Ledger As String
        Dim Accounts_Purchase_Outstanding_Pending_Dues_Date_Wise As String
        Dim Accounts_Purchase_Group_Ledger As String
        Dim Accounts_Purchase_Item_Excess_Short_Entry As String

        ''***********************************************************************************************************
        Dim Accounts_Sales_Sales_Entry_Gst As String
        Dim Accounts_Sales_Sales_Return As String
        Dim Accounts_Sales_Payment_Receipt_Bank As String
        Dim Accounts_Sales_Payment_Receipt_Cash As String
        Dim Accounts_Sales_Credit_Note_Entry As String
        Dim Accounts_Sales_Date_Wise_Ledger As String
        Dim Accounts_Sales_Outstanding_Pending_Dues_Date_Wise As String
        Dim Accounts_Sales_Outstanding_Pending_Party_Wise As String
        Dim Accounts_Sales_Group_Ledger As String

        ''***********************************************************************************************************
        Dim Accounts_Others_Journal_Entry As String
        Dim Accounts_Others_Contra_Entry As String
        Dim Accounts_Others_Petty_Cash As String

        ''***********************************************************************************************************

        Dim Report_Master As String
        Dim Report_Register As String
        Dim Report_Sizing_Stock As String
        Dim Report_Rewinding_Stock As String
        Dim Report_Weaver_Stock As String
        Dim Report_Godown_Stock As String
        Dim Report_Day_Transaction_Details As String
        Dim Report_Cloth_Sales_Order_Pending As String
        Dim Report_Cloth_Invoice_Pending As String
        Dim Report_GST_return As String
        Dim Report_Annexure As String
        Dim Report_TDS As String
        Dim Report_TCS As String
        Dim Report_Stock_Value As String
        Dim Report_All_Statements As String
        Dim Report_Cotton_Reports As String
        Dim Report_Van_Trip As String
        Dim Report_Processing_Stock As String
        Dim Report_Sewing As String

        '************************************************************************************************************************
        Dim OWNSORT_REPORTS_PURCHASE_ORDER As String
        Dim OWNSORT_REPORTS_SALES_ORDER As String
        Dim OWNSORT_REPORTS_DELIVERY_CHALLAN As String
        Dim OWNSORT_REPORTS_PACKING_LIST As String
        Dim OWNSORT_REPORTS_SALES_INVOICE As String
        Dim OWNSORT_REPORTS_YARN_PURCHASE_REGISTER As String
        Dim OWNSORT_REPORTS_YARN_INWARD As String
        Dim OWNSORT_REPORTS_YARN_OUTWARD As String
        Dim OWNSORT_REPORTS_EMPTY_BEAM_DELIVERY As String
        Dim OWNSORT_REPORTS_WARP_RECEIPT As String
        Dim OWNSORT_REPORTS_SIZING_SET_REPORT As String
        Dim OWNSORT_REPORTS_WARP_BEAM_LOADING_REGISTER As String
        Dim OWNSORT_REPORTS_PIECE_DOFFING_REGISTER As String
        Dim OWNSORT_REPORTS_WARP_BEAM_RUNOUT_REGISTER As String
        Dim OWNSORT_REPORTS_RETURN As String
        Dim OWNSORT_REPORTS_SIZED_BEAM_STOCK_ON_FLOOR As String
        Dim OWNSORT_REPORTS_RUNNING_BEAM_DETAILS_ALL_LOOM As String
        Dim OWNSORT_REPORTS_WARP_LOADING_LOOM_WISE As String
        Dim OWNSORT_REPORTS_PIECE_CHECKING_REGISTER As String
        Dim OWNSORT_REPORTS_PRODUCTION_SUMMARY_LOOM_WISE As String
        Dim OWNSORT_REPORTS_DAILY_FABRIC_STOCK As String
        Dim OWNSORT_REPORTS_DAILY_PRODUCTION_STOCK As String

        Dim TRADING_REPORTS_SALES_INVOICE As String
        Dim TRADING_REPORTS_PURCHASE_INVOICE As String
        Dim TRADING_REPORTS_RECEIVED_REPORTS As String

        '************************************************************************************************************************

        Dim Report_stores As String
        Dim master_Stores As String
        ' Dim Inhouse_Entry As String
        Dim Packing_Slip2 As String
        Dim Fabric_Physical_Stock As String
        Dim Inhouse_Reports As String
        ' Dim Jobwork_Entry As String

        '************************************************************************************************************************
        Dim FP_Ledger_Creation As String
        Dim FP_Agent_Creation As String
        Dim FP_Transport_Creation As String
        Dim FP_Area_Creation As String
        Dim FP_Grey_Item_Creation As String
        Dim FP_Finished_Product_Creation As String
        Dim FP_Size_Creation As String
        Dim FP_Item_Group_Creation As String
        Dim FP_Unit_Creation As String
        Dim FP_Product_Sales_Name_Creation As String
        Dim FP_Process_Creation As String
        Dim FP_LotNo_Creation As String
        Dim FP_LotNo_Creation_1 As String
        Dim FP_Article_Creation As String
        Dim FP_Currency_Creation As String
        Dim FP_Colour_Creation As String
        Dim FP_RackNo_Creation As String
        Dim FP_Packing_Type_Creation As String
        Dim Packing_Type_Creation As String
        Dim FP_user_Creation As String
        '************************************************************************************************************************

        Dim FP_purchase_Entry As String
        Dim FP_purchase_Return_Entry As String
        Dim FP_Processing_Delivery_Entry As String
        Dim FP_Processing_Receipt_Entry As String
        Dim FP_Processing_Return_Entry As String
        Dim FP_Processing_Bill_Making_Entry As String
        Dim FP_delivery_Entry As String
        Dim FP_Return_Entry As String
        Dim FP_Set_Entry As String
        Dim FP_UnSet_Entry As String
        Dim FP_Item_transfer_Entry As String
        Dim FP_Packing_slip_Entry As String
        Dim FP_Order_indent_Entry As String
        Dim FP_Invoice_Entry As String
        Dim FP_Cash_Sales_Entry As String
        Dim FP_Sales_return_Entry As String
        Dim FP_Proforma_Invoice_Entry As String
        Dim FP_Shirt_bit_Entry As String
        Dim FP_Item_Excess_Short_Entry As String
        Dim FP_Party_Amount_Receipt_Entry As String
        Dim FP_Cheque_return_Entry As String
        '************************************************************************************************************************
        Dim Inhouse_Beam_knotting_Entry As String
        Dim Inhouse_Doffing_Entry As String
        Dim Inhouse_Piece_Checking_Entry As String
        Dim Inhouse_Doffing_and_PieceChecking_Entry As String
        Dim Inhouse_Beam_RunOut_Entry As String
        Dim Inhouse_Beam_Close_Entry As String
        Dim Inhouse_Weaving_Excess_Short_Entry As String
        Dim Inhouse_Sort_Change_Entry As String
        Dim Inhouse_Pavu_Delivery_Entry As String
        Dim Inhouse_Yarn_Delivery_Entry As String
        Dim Inhouse_Pavu_Receipt_Entry As String
        Dim Inhouse_Yarn_Receipt_Entry As String
        Dim Inhouse_Loom_Production_Entry As String
        Dim Inhouse_Knotting_Bill_Entry As String
        '************************************************************************************************************************
        Dim Jobwork_Order_Entry As String
        Dim Jobwork_Pavu_Yarn_Receipt_Entry As String
        Dim Jobwork_Production_Entry As String
        Dim Jobwork_Piece_Delivery_Entry As String
        Dim Jobwork_Piece_Inspection_Entry As String
        Dim Jobwork_Conversion_Bill_Entry As String
        Dim Jobwork_Pavu_Yarn_Return_Delivery_Entry As String
        Dim Jobwork_EmptyBeam_Return_Delivery_Entry As String

        Dim TEXTILE_JOBWORK_REGISTER_REPORT As String
        Dim TEXTILE_JOBWORK_PENDING_REGISTER_REPORT As String
        Dim TEXTILE_JOBWORK_YARN_STOCK_REPORT As String
        Dim TEXTILE_JOBWORK_PAVU_STOCK_REPORT As String
        Dim TEXTILE_JOBWORK_EMPTYBEAM_STOCK_REPORT As String
        Dim TEXTILE_JOBWORK_EMPTYBAG_STOCK_REPORT As String
        Dim TEXTILE_JOBWORK_EMPTYCONE_STOCK_REPORT As String
        Dim TEXTILE_JOBWORK_ALL_STOCK_LEDGER_REPORT As String
        Dim TEXTILE_JOBWORK_ALL_STOCK_SUMMARY_REPORT As String
        Dim TEXTILE_JOBWORK_JOBWORKER_STOCK_STATEMENT_REPORT As String
        Dim TEXTILE_JOBWORK_DAY_TRANSACTION_REPORT As String
        Dim TEXTILE_JOBWORK_RECONCILIATION_REPORT As String

        Dim TEXTILE_JOBWORK_DELIVERY_CHALLAN_REPORTS As String
        Dim TEXTILE_JOBWORK_INVOICE_REPORT As String
        Dim TEXTILE_JOBWORK_RECEIVED_REPORT As String
        Dim TEXTILE_JOBWORK_SIZED_BEAM_STOCK_ON_FLOOR As String
        Dim TEXTILE_JOBWORK_PRODUCTION_SUMMARY_LOOM_WISE As String
        Dim TEXTILE_JOBWORK_PIECE_CHECKING_REPORT As String
        Dim TEXTILE_JOBWORK_BEAM_RUNOUT_REGISTER As String
        Dim TEXTILE_JOBWORK_RUNNING_BEAM_DETAILS_ALL_LOOM As String
        Dim TEXTILE_JOBWORK_WARP_LOADING_LOOM_WISE As String
        Dim TEXTILE_JOBWORK_VENDOR_GRADING_REPORT As String
        Dim Sizing_Delivery_Party_Creation As String
        Dim Bag_Type_Creation As String
        Dim Cone_Type_Creation As String
        Dim Delivery_Address_Creation As String
        Dim Sizing_Item_Creaion As String
        Dim Unit_Creation As String
        Dim Sizing_BeamNo_Creation As String
        Dim Sizing_WasteCreation As String
        Dim Sizing_Spares_Creation As String
        Dim SizingMachine_No_Creation As String

        Dim ENTRY_SIZING_JOBWORK_MODULE_YARN_RECEIPT As String
        Dim ENTRY_SIZING_JOBWORK_MODULE_EMPTYBEAM_RECEIPT As String
        Dim ENTRY_SIZING_JOBWORK_MODULE_SIZING_SPECIFICATION As String
        Dim ENTRY_SIZING_JOBWORK_MODULE_STATEMENT As String
        Dim ENTRY_SIZING_JOBWORK_MODULE_INVOICE As String
        Dim ENTRY_SIZING_JOBWORK_MODULE_CASHDISCOUNT As String
        Dim ENTRY_SIZING_JOBWORK_MODULE_PAVU_DELIVERY As String
        Dim ENTRY_SIZING_JOBWORK_MODULE_YARN_DELIVERY As String
        Dim ENTRY_SIZING_JOBWORK_MODULE_EMPTY_BEAM_DELIVERY As String
        Dim ENTRY_SIZING_JOBWORK_KURAI_PAVU_RECEIPT As String
        Dim ENTRY_SIZING_JOBWORK_MODULE_EMPTY_BEAM_BAG_EXCESS_SHORT As String
        Dim ENTRY_SIZING_JOBWORK_MODULE_YARN_TRANSFER As String
        Dim ENTRY_SIZING_JOBWORK_MODULE_YARN_EXCESS_SHORT As String
        Dim ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_PURCHASE_ORDER As String
        Dim ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_PURCHASE As String
        Dim ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_PURCHASE_RETURN As String
        Dim ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_EXCESS_SHORT As String
        Dim ENTRY_SIZING_JOBWORK_MODULE_WASTE_MATERIAL_SALES As String
        Dim ENTRY_SIZING_JOBWORK_MODULE_SPARES_PURCHASE As String
        Dim ENTRY_SIZING_JOBWORK_MODULE_FIREWOOD_PURCHASE As String
        Dim ENTRY_SIZING_JOBWORK_MODULE_FIREWOOD_CONSUMPTION As String
        Dim ENTRY_SIZING_JOBWORK_MODULE_GENERAL_DELIVERY As String


        Dim SIZING_JOBWORK_MODULE_REPORT_EMPTY_BEAM_REGISTER As String
        Dim SIZING_JOBWORK_MODULE_REPORT_EMPTY_BAGS_REGISTER As String
        Dim SIZING_JOBWORK_MODULE_REPORT_CONES_REGISTER As String
        Dim SIZING_JOBWORK_MODULE_REPORT_YARN_REGISTER As String
        Dim SIZING_JOBWORK_MODULE_REPORT_PAVU_REGISTER As String
        Dim SIZING_JOBWORK_MODULE_REPORT_ALL_STOCK_LEDGER As String
        Dim SIZING_JOBWORK_MODULE_REPORT_ALL_STOCK_SUMMARY As String
        Dim SIZING_JOBWORK_MODULE_REPORTS_ALL_STOCK_STATEMENTS As String
        Dim SIZING_JOBWORK_MODULE_REPORT_PRODUCTION_REGISTER As String
        Dim SIZING_JOBWORK_MODULE_REPORT_INVOICE_REGISTER As String
        Dim SIZING_JOBWORK_MODULE_REPORTS_CASH_DISCOUNT As String
        Dim SIZING_JOBWORK_MODULE_REPORT_CHEMICAL_REGISTER As String
        Dim SIZING_JOBWORK_MODULE_REPORTS_HARDWARE_PURCHASE As String
        Dim SIZING_JOBWORK_MODULE_REPORTS_FIREWOOD_PURCHASE As String
        Dim SIZING_JOBWORK_MODULE_REPORT_FIREWOOD_CONSUMPTION_REGISTER As String
        Dim SIZING_JOBWORK_MODULE_REPORTS_WASTE_MATERIAL As String
        Dim SIZING_JOBWORK_MODULE_REPORTS_DAY_TRANSACTION As String
        Dim SIZING_JOBWORK_MODULE_REPORTS_GST_RETURN As String
        Dim SIZING_JOBWORK_MODULE_REPORTS_TDS_REPORT As String


        Dim OEENTRY_COTTON_PURCHASE_ENTRY As String
        Dim OEENTRY_COTTON_PURCHASE_RETURN_ENTRY As String
        Dim OEENTRY_MIXING_ENTRY As String
        Dim OEENTRY_PRODUCTION_ENTRY As String
        Dim OEENTRY_PACKING_ENTRY As String
        Dim OEENTRY_ORDER_ENTRY As String
        Dim OEENTRY_DELIVERY_ENTRY As String
        Dim OEENTRY_INVOICE_ENTRY As String
        Dim OEENTRY_WASTE_SALES_ENTRY As String
        Dim OEENTRY_LOCAL_WASTE_SALES_ENTRY As String
        Dim OEENTRY_INVOICE_RETURN_ENTRY As String
        Dim OEENTRY_DELIVERY_RETURN_ENTRY As String
        Dim OEENTRY_BORA_STRITCHING_ENTRY As String
        Dim OEENTRY_REELING_DELIVERY_ENTRY As String
        Dim OEENTRY_REELING_RECEIPT_ENTRY As String
        Dim OEENTRY_STOCK_TRANSFER_ENTRY As String


        Dim OESPINNING_REGISTER_REPORT As String
        Dim OESPINNING_COTTON_STOCK_REPORT As String
        Dim OESPINNING_MIXING_STOCK_REPORT As String
        Dim OESPINNING_BAG_YARN_STOCK_REPORT As String
        Dim OESPINNING_LOOSE_YARN_STOCK_REPORT As String
        Dim OESPINNING_REELING_STOCK_REPORT As String
        Dim OESPINNING_HANK_YARN_STOCK_REPORT As String
        Dim OESPINNING_WASTE_STOCK_REPORT As String
        Dim OESPINNING_YARN_STOCK_BAGNOWISE_STOCK_REPORT As String
        Dim OESPINNING_ALL_STOCK_SUMMARY_REPORT As String
        Dim OESPINNING_COMMISSION_REGISTER_REPORT As String
        Dim OESPINNING_GSTR_1_REPORT As String
        Dim OESPINNING_GSTR_2_REPORT As String
        Dim OESPINNING_ORDER_PENDING_REPORT As String
        Dim OESPINNING_CARDING_STOCK_REPORT As String

        Dim OESPINNING_EMPTY_BOBIN_STOCK_DETAILS As String
        Dim OESPINNING_EMPTY_BOBIN_STOCK_SUMMARY As String




        Dim REPORTS_STORES_MASTERS As String
        Dim REPORTS_STORES_REGISTER As String
        Dim REPORTS_STORES_PURCHASE_ORDER_PENDING As String

        Dim REPORTS_STORES_MONTHLY_ITEM_ISSUE_STATEMENT As String
        Dim REPORTS_STORES_MONTHLY_ITEM_ISSUE_STATEMENT_ALL_LOOM As String
        Dim REPORTS_STORES_SERVICE_RECEIPT_ITEM_PENDING As String
        Dim REPORTS_OIL_SERVICE_PENDING As String
        Dim REPORTS_STORES_NEW_ITEM_STOCK_DETAIL As String
        Dim REPORTS_STORES_OLD_ITEM_STOCK_DETAILS_USABLE As String
        Dim REPORTS_STORES_OLD_ITEM_STOCK_DETAILS_SCRAP As String
        Dim REPORTS_STORES_ITEM_STOCK_DETAILS_ALL As String
        Dim REPORTS_STORES_NEW_ITEM_STOCK_SUMMARY As String
        Dim REPORTS_STORES_OLD_ITEM_STOCK_SUMMARY_USABLE As String
        Dim REPORTS_STORES_OLD_ITEM_STOCK_SUMMARY_SCRAP As String
        Dim REPORTS_STORES_ITEM_STOCK_SUMMARY_ALL As String
        Dim REPORTS_STORES_ITEM_STOCK_VALUE As String
        Dim REPORTS_STORES_PURCHASE_PLANNING As String





        Dim PAYROLL_ENTRY_EMPLOYEE_ATTENDANCE As String
        Dim PAYROLL_ENTRY_ATTENDANCE_LOG_FROM_MACHINE As String
        Dim PAYROLL_ENTRY_EMPLOYEE_ATTENDANCE_FROM_MACHINE As String
        Dim PAYROLL_ENTRY_EMPLOYEE_TIMING_ADDITION As String
        Dim PAYROLL_ENTRY_EMPLOYEE_SALARY As String
        Dim PAYROLL_ENTRY_EMPLOYEE_SALARY_ADVANCE_PAYMENT As String
        Dim PAYROLL_ENTRY_EMPLOYEE_ADVANCE_ADDITION As String
        Dim PAYROLL_ENTRY_EMPLOYEE_CREATION As String
        Dim PAYROLL_ENTRY_CATEGORY_CREATION As String
        Dim PAYROLL_ENTRY_SALARY_PAYMENT_TYPE As String
        Dim PAYROLL_ENTRY_EMPLOYEE_ADVANCE As String


        Dim PAYROLL_REPORT_SALARY_REGISTER As String
        Dim PAYROLL_REPORT_NET_PAY_REGISTER As String
        Dim PAYROLL_REPORT_ATTENDANCE_REGISTER As String
        Dim PAYROLL_REPORT_ATTENDANCE_MONTHWISE_REGISTER As String
        Dim PAYROLL_REPORT_EMPLOYEE_PAYMENT_REGISTER As String
        Dim PAYROLL_REPORT_EMPLOYEE_DEDUCATION As String
        Dim PAYROLL_REPORT_EMPLOYEE_ACCOUNT_DETAILS As String
        Dim PAYROLL_REPORT_EMPLOYEE_REGISTER As String
        Dim PAYROLL_REPORT_LEDGER_REPORT_ALL As String
        Dim PAYROLL_REPORT_SALARY_LEDGER As String
        Dim PAYROLL_REPORT_ADVANCE_LEDGER As String
        Dim PAYROLL_REPORT_DEPOSIT_LEDGER As String


        Dim reports_user_modifications As String


        Dim GENERAL_REPORTS_EMPTY_BEAM_STOCK As String
        Dim GENERAL_REPORTS_YARN_STOCK_REPORTS As String
        Dim GENERAL_REPORTS_WARP_STOCK_REPORTS As String
        Dim GENERAL_REPORTS_FABRIC_STOCK_REPORTS As String
        Dim GENERAL_REPORTS_MONTHLY_PRODUCTION_REPORT As String
        Dim GENERAL_REPORTS_BEAM_TO_BEAM_RECONCILATION_REPORT As String
        Dim GENERAL_REPORTS_BEAM_TO_BEAM_RECONCILATION_SETNO_WISE As String
        Dim GENERAL_REPORTS_INHOUSE As String
        Dim GENERAL_REPORTS_AGENT_REPORT As String
        Dim GENERAL_REPORTS_GST_REPORT As String
        Dim GENERAL_REPORTS_TCS_REPORT As String
        Dim GENERAL_REPORTS_TDS_REPORT As String
        Dim ACCOUNTS_PURCHASE_REGISTER As String
        Dim ACCOUNTS_SALES_REGISTER As String
    End Structure
    Public Shared UR As UserRightsDetails

    Public Enum CommonLedger As Integer
        Cash_Ac = 1
        Weaving_Wages_Ac = 2
        Sizing_Charges_Ac = 3
        Godown_Ac = 4
        OwnSort_Ac = 5
        Transport_Charges_Ac = 7
        TDS_Payable_Ac = 8
        Freight_Charges_Ac = 9
        Salary_Ac = 10
        DD_COMMISSION_Ac = 11
        Stock_In_Hand_Ac = 12
        Profit_Loss_Ac = 13
        RATE_DIFFERENCE_Ac = 14
        CASH_DISCOUNT_Ac = 15
        Agent_Commission_Ac = 16
        Discount_Ac = 17
        Conversion_Bill_Charges_Ac = 18
        Processing_Charges_Ac = 19
        Vat_Ac = 20
        Purchase_Ac = 21
        Sales_Ac = 22
        KNOTTING_CHARGES_AC = 23
        CGST_AC = 24
        SGST_AC = 25
        IGST_AC = 26
        CGST_RCM_ITC_AC = 27
        SGST_RCM_ITC_AC = 28
        IGST_RCM_ITC_AC = 29
        ROUNDOFF_AC = 30
        CESS_AC = 31
        TCS_PAYABLE_AC = 32
        TCS_RECEIVABLE_AC = 33
        LOADING_UNLOADING_CHARGES_AC = 34
        SIZING_JOBWORK_CHARGES_AC = 35
        ADDLESS_AMOUNT_AC = 36
        Advance_Deduction = 37
        Deposit_ac = 38
        Canteen = 39
        TDS_Receivable_Ac = 40
        WEAVER_Sales_Ac = 41
        WEAVER_Purchase_Ac = 42
        WEAVER_LESS_AMOUNT = 43
    End Enum

    Public Enum SoftwareTypes As Integer
        Textile_Software = 1
        Sizing_Software = 2
        OE_Software = 3
        PayRoll_Software = 4
        Stores_Software = 5
        Billing_Software = 6
        Accounts_Software = 7
    End Enum

    'Public Enum DriveType As Integer   
    '    Unknown = 0
    '    NoRoot = 1
    '    Removable = 2
    '    Localdisk = 3
    '    Network = 4
    '    CD = 5
    '    RAMDrive = 6
    'End Enum

    Public Shared Sub Print_To_PrintDocument(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal PrintText As String, ByVal Xaxis As Decimal, ByVal Yaxis As Decimal, ByVal AlignMent As Integer, ByVal DataWidth As Decimal, ByVal DataFont As Font, Optional ByVal BrushColour As Brush = Nothing, Optional ByVal Shrink_To_Fit As Boolean = False, Optional ByVal X2axis As Decimal = 0)
        Dim X As Decimal, Y As Decimal
        Dim strWidth As Decimal, strHeight As Decimal = 0
        Dim vBrushClr As Brush
        Dim pFont As Font
        Dim vColWidth As Single = 0

        strWidth = e.Graphics.MeasureString(PrintText, DataFont).Width
        'strHeight = e.Graphics.MeasureString(PrintText, DataFont).Height

        If Shrink_To_Fit = True Then

            If DataWidth > 0 Then
                vColWidth = DataWidth
            Else
                vColWidth = X2axis - Xaxis
            End If

            If vColWidth > 0 Then
                pFont = DataFont
                If vColWidth < strWidth Then
                    Do While (vColWidth < strWidth And pFont.Size > 5)
                        pFont = New Font(DataFont.Name, pFont.Size - 1, DataFont.Style)
                        strWidth = e.Graphics.MeasureString(PrintText, pFont).Width
                    Loop
                    DataFont = pFont
                End If

            End If

        End If

        If AlignMent = 1 Then
            X = Xaxis - strWidth

        ElseIf AlignMent = 2 Then
            If DataWidth > strWidth Then
                X = Xaxis + (DataWidth - strWidth) / 2
            Else
                X = Xaxis
            End If

        Else
            X = Xaxis

        End If
        Y = Yaxis




        If IsNothing(BrushColour) = False Then
            vBrushClr = BrushColour
        Else
            vBrushClr = Brushes.Black
        End If

        e.Graphics.DrawString(PrintText, DataFont, vBrushClr, X, Y)

    End Sub


    Public Enum UserRightsCheckFor As Integer
        SavingEntry = 1
        DeletingEntry = 2
        InsertingEntry = 3
        PrintEntry = 4
    End Enum

    Public Shared Function Rupees_Converstion(ByVal amt As Single) As String
        Dim A1 As String = ""
        Dim s2 As String = ""
        Dim s3 As String = ""
        Dim Ps1 As Double ' Single
        Dim i, j As Integer
        Dim d(100) As String
        Dim Wrd(6) As String
        Dim Sum As Integer

        d(1) = "One"
        d(2) = "Two"
        d(3) = "Three"
        d(4) = "Four"
        d(5) = "Five"
        d(6) = "Six"
        d(7) = "Seven"
        d(8) = "Eight"
        d(9) = "Nine"
        d(10) = "Ten"
        d(11) = "Eleven"
        d(12) = "Twelve"
        d(13) = "Thirteen"
        d(14) = "Fourteen"
        d(15) = "Fifteen"
        d(16) = "Sixteen"
        d(17) = "Seventeen"
        d(18) = "Eighteen"
        d(19) = "Nineteen"
        d(20) = "Twenty"
        d(30) = "Thirty"
        d(40) = "Forty"
        d(50) = "Fifty"
        d(60) = "Sixty"
        d(70) = "Seventy"
        d(80) = "Eighty"
        d(90) = "Ninety"
        Wrd(1) = ""
        Wrd(2) = " Hundred "
        Wrd(3) = " Thousand "
        Wrd(4) = " Lakhs "
        Wrd(5) = " Crores "
        s3 = ""
        Ps1 = Val(Right$(Trim(Format(amt, "###########0.00")), 2))
        If Ps1 <> 0 Then If (Ps1 Mod 10 = 0) Or Ps1 <= 20 Then s3 = d(Ps1) + " Paise" Else s3 = d(Int(Ps1 / 10) * 10) + " " + d(Ps1 Mod 10) + " Paise"
        If Ps1 > 0 Then amt = amt - (Ps1 / 100)
        Do While amt > 0
            i = i + 1
            Sum = amt Mod (IIf((i = 2), 10, 100))
            amt = Int(amt / (IIf((i = 2), 10, 100)))
            If Sum <> 0 Then j = j + 1
            A1 = IIf((j = 2), "And ", "")
            If Sum <> 0 Then If (Sum Mod 10 = 0) Or Sum <= 20 Then s2 = d(Sum) + Wrd(i) + A1 + s2 Else s2 = d(Int(Sum / 10) * 10) + " " + d(Sum Mod 10) + Wrd(i) + A1 + s2
        Loop
        Rupees_Converstion = Trim(s2) + IIf((Len(Trim(s2)) > 0) And (Len(Trim(s3)) > 0), " Rupees And ", "") + s3 + " Only"
    End Function

    Public Shared Function Currency_Format(ByVal Value As Double) As String
        Dim s1 As String = ""
        Dim s2 As String = ""
        Dim k As String = ""

        If Value >= 0 Then k = "" Else k = "-"

        s1 = Trim(Format(Math.Abs(Value), "############0.00"))

        Select Case Len(s1)
            Case Is < 9
                s2 = Format(Val(s1), "##,##0.00")
            Case 9, 10
                s2 = Left$(s1, Len(s1) - 8) & "," & Mid$(s1, Len(s1) - 7, 2) & "," & Right$(s1, 6)
            Case 11, 12
                s2 = Left$(s1, Len(s1) - 10) & "," & Mid$(s1, Len(s1) - 9, 2) & "," & Mid$(s1, Len(s1) - 7, 2) & "," & Right$(s1, 6)
            Case 13, 14
                s2 = Left$(s1, Len(s1) - 12) & "," & Mid$(s1, Len(s1) - 11, 2) & "," & Mid$(s1, Len(s1) - 9, 2) & "," & Mid$(s1, Len(s1) - 7, 2) & "," & Right$(s1, 6)
            Case Is > 14
                s2 = Left$(s1, Len(s1) - 14) & "," & Mid$(s1, Len(s1) - 13, 2) & "," & Mid$(s1, Len(s1) - 11, 2) & "," & Mid$(s1, Len(s1) - 9, 2) & "," & Mid$(s1, Len(s1) - 7, 2) & "," & Right$(s1, 6)
        End Select
        Currency_Format = k & Trim(s2)
    End Function

    Public Shared Function get_VoucherType(ByVal VouName As String) As String
        Select Case Trim(LCase(VouName))
            Case "purc"
                get_VoucherType = "Purchase"
            Case "sale"
                get_VoucherType = "Sales"
            Case "rcpt"
                get_VoucherType = "Receipt"
            Case "pymt"
                get_VoucherType = "Payment"
            Case "cntr"
                get_VoucherType = "Contra"
            Case "jrnl"
                get_VoucherType = "Journal"
            Case "crnt"
                get_VoucherType = "Credit Note"
            Case "dbnt"
                get_VoucherType = "Debit Note"
            Case "csrp"
                get_VoucherType = "Cash Receipt"
            Case "cspy"
                get_VoucherType = "Cash Payment"
            Case "ptcs"
                get_VoucherType = "Petti Cash"
            Case "chrt"
                get_VoucherType = "Cheque Return"
            Case Else
                get_VoucherType = ""
        End Select
    End Function
    Public Shared Function get_AdvanceType(ByVal AdvName As String) As String
        Select Case Trim(LCase(AdvName))
            Case "adv"
                get_AdvanceType = "ADVANCE"
            Case "salary"
                get_AdvanceType = "SALARY"
            Case "advsala"
                get_AdvanceType = "SALARY ADVANCE"

            Case Else
                get_AdvanceType = ""
        End Select
    End Function

    Public Shared Function Remove_NonCharacters(ByVal Txt As String) As String
        Dim S As String
        Dim I As Integer
        Dim k As Integer

        S = ""
        For I = 1 To Len(Txt)
            k = Asc(Mid(Txt, I, 1))
            If k = 45 Or k = 47 Or (k >= 48 And k <= 57) Or (k >= 65 And k <= 90) Or (k >= 97 And k <= 122) Or k = 95 Then
                S = S & Chr(k)
            End If
        Next
        Remove_NonCharacters = S
    End Function

    Public Shared Function Replace_SpecialCharacters_With_UnderScore(ByVal Txt As String, Optional vEXCLUDECOMMA_STS As Boolean = False) As String

        Txt = Trim(Replace(Txt, "    ", "_"))
        Txt = Trim(Replace(Txt, "   ", "_"))
        Txt = Trim(Replace(Txt, "  ", "_"))
        Txt = Trim(Replace(Txt, " ", "_"))
        Txt = Trim(Replace(Txt, ".", "_"))
        If vEXCLUDECOMMA_STS = False Then
            Txt = Trim(Replace(Txt, ",", "_"))
        End If
        Txt = Trim(Replace(Txt, "-", "_"))
        Txt = Trim(Replace(Txt, "/", "_"))
        Txt = Trim(Replace(Txt, "\", "_"))
        Txt = Trim(Replace(Txt, "&", "_"))
        Txt = Trim(Replace(Txt, "(", "_"))
        Txt = Trim(Replace(Txt, ")", "_"))
        Txt = Trim(Replace(Txt, "[", "_"))
        Txt = Trim(Replace(Txt, "]", "_"))
        Txt = Trim(Replace(Txt, "{", "_"))
        Txt = Trim(Replace(Txt, "}", "_"))
        Txt = Trim(Replace(Txt, "<", "_"))
        Txt = Trim(Replace(Txt, ">", "_"))
        Txt = Trim(Replace(Txt, "#", "_"))
        Txt = Trim(Replace(Txt, "$", "_"))
        Txt = Trim(Replace(Txt, "%", "_"))
        Txt = Trim(Replace(Txt, "@", "_"))
        Txt = Trim(Replace(Txt, "^", "_"))
        Txt = Trim(Replace(Txt, "+", "_"))
        Txt = Trim(Replace(Txt, "!", "_"))
        Txt = Trim(Replace(Txt, "?", "_"))
        Txt = Trim(Replace(Txt, ":", "_"))
        Txt = Trim(Replace(Txt, ";", "_"))
        Txt = Trim(Replace(Txt, "~", "_"))
        Txt = Trim(Replace(Txt, "|", "_"))
        Txt = Trim(Replace(Txt, "*", "_"))
        Txt = Trim(Replace(Txt, "=", "_"))
        Txt = Trim(Replace(Txt, """", ""))
        Txt = Trim(Replace(Txt, "'", ""))
        Txt = Trim(Replace(Txt, "`", ""))

        Return Trim(Txt)

    End Function

    Public Shared Sub Control_Focus(ByVal Ka As Integer, ByVal Ctrl As Object)
        If Ka = 13 Or Ka = 40 Then SendKeys.Send("{TAB}")
        If Ka = 38 Then SendKeys.Send("+{TAB}")
        If TypeOf Ctrl Is TextBox Or TypeOf Ctrl Is ComboBox Then SendKeys.Send("{HOME}+{END}")
    End Sub

    Public Shared Function OrderBy_CodeToValue(ByVal Code As String) As Double
        Dim I As Integer
        Dim c As String = ""
        Dim k As String = 0
        Dim vNUMSTS As Boolean = False
        Dim vNUM_CHK_FINISH_STS As Boolean = False
        Dim vNUMSTR As String = ""

        If Trim(Code) = "" Then
            OrderBy_CodeToValue = 0
            Exit Function
        End If

        Code = Trim(UCase(Code))

        vNUMSTS = False
        vNUM_CHK_FINISH_STS = False
        vNUMSTR = ""
        For I = 1 To Len(Code)
            c = Mid(Code, I, 1)

            If vNUMSTS = False Then

                If Asc(c) >= 48 And Asc(c) <= 57 Then
                    vNUMSTR = Trim(vNUMSTR) & Trim(c)
                    vNUMSTS = True
                End If

            Else

                If vNUM_CHK_FINISH_STS = False And (Asc(c) >= 48 And Asc(c) <= 57) Then
                    vNUMSTR = Trim(vNUMSTR) & Trim(c)

                Else

                    vNUM_CHK_FINISH_STS = True
                    If Asc(c) >= 65 And Asc(c) <= 90 Then
                        k = 0
                        If Trim(c) <> "" Then k = Format((Asc(UCase(c)) - 64) / 100, "######0.00")
                        If k > 0 Then
                            vNUMSTR = Format(Val(vNUMSTR) + Val(k), "#########0.00")
                            Exit For
                        End If
                    End If

                End If

            End If

        Next I

        OrderBy_CodeToValue = Format(Val(vNUMSTR), "#####0.00")

        'c = Replace(Code, Val(Code), "")
        'k = 0
        'If Trim(c) <> "" Then k = Format((Asc(UCase(c)) - 64) / 100, "######0.00")
        'OrderBy_CodeToValue = Format(Val(Code) + Val(k), "#####0.00")

    End Function

    Public Shared Function OrderBy_CodeToValue_old_111(ByVal Code As String) As Single
        Dim c As String = ""
        Dim k As Single = 0

        If Val(Code) = 0 Then
            OrderBy_CodeToValue_old_111 = 0
            Exit Function
        End If

        c = Replace(Code, Val(Code), "")
        k = 0
        If Trim(c) <> "" Then k = Format((Asc(UCase(c)) - 64) / 100, "######0.00")

        OrderBy_CodeToValue_old_111 = Format(Val(Code) + k, "#####0.00")

    End Function

    Public Shared Function OrderBy_ValueToCode(ByVal value As Single) As String
        Dim c As String = ""
        Dim k As Single = 0

        If Val(value) = 0 Then
            OrderBy_ValueToCode = ""
            Exit Function
        End If

        k = Format(Val(value), "#####0.00") - Int(Val(value))

        c = ""
        If Val(k) > 0 Then c = UCase(Chr(64 + k))

        OrderBy_ValueToCode = Int(Val(value)) & c

    End Function

    Public Shared Function Accept_NumericOnly(ByVal KeyAscii_Value As Integer) As Integer
        Accept_NumericOnly = 0
        If (KeyAscii_Value >= 48 And KeyAscii_Value <= 57) Or KeyAscii_Value = 46 Or KeyAscii_Value = 13 Or KeyAscii_Value = 8 Or KeyAscii_Value = 9 Then
            Accept_NumericOnly = KeyAscii_Value
        End If
        'Accept_NumericOnly = 0
        'If (KeyAscii_Value >= 48 And KeyAscii_Value <= 57) Or KeyAscii_Value = 45 Or KeyAscii_Value = 46 Or KeyAscii_Value = 13 Or KeyAscii_Value = 8 Or KeyAscii_Value = 9 Then
        '    Accept_NumericOnly = KeyAscii_Value
        'End If
    End Function

    Public Shared Function Accept_NumericPositiveOnly(ByVal KeyAscii_Value As Integer) As Integer
        Accept_NumericPositiveOnly = 0
        If (KeyAscii_Value >= 48 And KeyAscii_Value <= 57) Or KeyAscii_Value = 46 Or KeyAscii_Value = 13 Or KeyAscii_Value = 8 Or KeyAscii_Value = 9 Then
            Accept_NumericPositiveOnly = KeyAscii_Value
        End If
    End Function

    Public Shared Function Accept_AlphaNumericOnly(ByVal KeyAscii_Value As Integer) As Integer
        Accept_AlphaNumericOnly = 0
        If (KeyAscii_Value <> 39 And (KeyAscii_Value >= 32 And KeyAscii_Value <= 57)) Or (KeyAscii_Value >= 65 And KeyAscii_Value <= 90) Or (KeyAscii_Value >= 97 And KeyAscii_Value <= 122) Or KeyAscii_Value = 13 Or KeyAscii_Value = 8 Or KeyAscii_Value = 9 Or KeyAscii_Value = 92 Then
            Accept_AlphaNumericOnly = KeyAscii_Value
        End If
    End Function

    Public Shared Function Accept_AlphaNumeric_WithOutSpecialCharacters_Only(ByVal KeyAscii_Value As Integer) As Integer
        Accept_AlphaNumeric_WithOutSpecialCharacters_Only = 0
        If (KeyAscii_Value >= 48 And KeyAscii_Value <= 57) Or (KeyAscii_Value >= 65 And KeyAscii_Value <= 90) Or (KeyAscii_Value >= 97 And KeyAscii_Value <= 122) Or KeyAscii_Value = 13 Or KeyAscii_Value = 8 Or KeyAscii_Value = 9 Then
            Accept_AlphaNumeric_WithOutSpecialCharacters_Only = KeyAscii_Value
        End If
    End Function

    Public Shared Function Accept_NegativeNumbers(ByVal KeyAscii_Value As Integer) As Integer
        Accept_NegativeNumbers = 0
        If (KeyAscii_Value >= 48 And KeyAscii_Value <= 57) Or KeyAscii_Value = 45 Or KeyAscii_Value = 46 Or KeyAscii_Value = 13 Or KeyAscii_Value = 8 Or KeyAscii_Value = 9 Then
            Accept_NegativeNumbers = KeyAscii_Value
        End If
    End Function
    Public Shared Function get_Prefix_from_OrderByCode(ByVal Code As String) As String
        Dim I As Integer
        Dim c As String = ""
        Dim vPREFIXSTR As String = ""

        If Trim(Code) = "" Then
            get_Prefix_from_OrderByCode = ""
            Exit Function
        End If

        Code = Trim(UCase(Code))



        vPREFIXSTR = ""
        For I = 1 To Len(Code)

            c = Mid(Code, I, 1)

            If (Asc(c) >= 48 And Asc(c) <= 57) Then
                Exit For
            Else
                vPREFIXSTR = Trim(vPREFIXSTR) & Trim(c)
            End If

        Next I

        get_Prefix_from_OrderByCode = Trim(vPREFIXSTR)

    End Function

    Public Shared Function get_Company_DataBaseName(ByVal CompGRPIdNo As Integer) As String
        Dim DbNm As String = ""
        Dim S As String = ""
        Dim I As Integer

        DbNm = ""

        If Trim(CompanyDetailsDataBaseName) <> "" Then

            If InStr(1, Trim(LCase(CompanyDetailsDataBaseName)), Trim(LCase("_companygroup_details"))) > 0 Then
                S = Replace(Trim(LCase(CompanyDetailsDataBaseName)), Trim(LCase("_companygroup_details")), "")
            Else
                If Microsoft.VisualBasic.Right(Trim(LCase(CompanyDetailsDataBaseName)), 1) > 0 Then
                    For I = Len(Trim(CompanyDetailsDataBaseName)) To 1 Step -1
                        If Mid(Trim(CompanyDetailsDataBaseName), I, 1) = "_" Then
                            S = Microsoft.VisualBasic.Left(Trim(LCase(CompanyDetailsDataBaseName)), I - 1)
                            Exit For
                        End If
                    Next
                End If
            End If

            DbNm = Trim(S) & "_" & Trim(Val(CompGRPIdNo))

        End If

        get_Company_DataBaseName = Trim(DbNm)

    End Function

    Public Shared Function get_Company_SizingDataBaseName(ByVal CompIdNo As Integer) As String
        Dim DbNm As String = ""
        Dim S As String = ""

        DbNm = ""

        If Trim(CompanyDetailsSizingDataBaseName) <> "" Then

            S = Replace(Trim(LCase(CompanyDetailsSizingDataBaseName)), "_companygroup_details", "")

            DbNm = Trim(S) & "_" & Trim(Val(CompIdNo))

        End If

        get_Company_SizingDataBaseName = Trim(DbNm)

    End Function

    Public Shared Function Company_NameToIdNo1111(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCompany_Nm As String) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vCompany_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Company_IdNo from Company_Head where Company_Name = '" & Trim(vCompany_Nm) & "'", Cn1)
        Da.Fill(Dt)

        vCompany_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vCompany_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Company_NameToIdNo1111 = Val(vCompany_ID)

    End Function

    Public Shared Function Company_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCompany_ID As Integer, Optional ByVal DbName As String = "") As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vCompany_Nm As String

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Company_Name from " & Trim(DbName) & " Company_Head where Company_IdNo = " & Str(Val(vCompany_ID)), Cn1)
        Dt = New DataTable
        Da.Fill(Dt)

        vCompany_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vCompany_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Company_IdNoToName = Trim(vCompany_Nm)

    End Function


    Public Shared Function Company_ShortNameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCompany_ShtNm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vCompany_ID As Integer

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Company_IdNo from " & Trim(DbName) & " Company_Head where Company_ShortName = '" & Trim(vCompany_ShtNm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vCompany_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vCompany_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Company_ShortNameToIdNo = Val(vCompany_ID)

    End Function


    Public Shared Function Company_IdNoToShortName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCompany_ID As Integer, Optional ByVal DbName As String = "", Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vCompany_ShtNm As String

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If

        Da = New SqlClient.SqlDataAdapter("select Company_ShortName from " & Trim(DbName) & "..Company_Head where Company_IdNo = " & Str(Val(vCompany_ID)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)


        vCompany_ShtNm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vCompany_ShtNm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Company_IdNoToShortName = Trim(vCompany_ShtNm)

    End Function

    Public Shared Function AccountsGroup_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vAccountsGroup_Nm As String) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vAccountsGroup_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select AccountsGroup_IdNo from AccountsGroup_Head where AccountsGroup_Name = '" & Trim(vAccountsGroup_Nm) & "'", Cn1)
        Da.Fill(Dt)

        vAccountsGroup_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vAccountsGroup_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        AccountsGroup_NameToIdNo = Val(vAccountsGroup_ID)

    End Function

    Public Shared Function AccountsGroup_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vAccountsGroup_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vAccountsGroup_Nm As String

        Da = New SqlClient.SqlDataAdapter("select AccountsGroup_Name from AccountsGroup_Head where AccountsGroup_IdNo = " & Str(Val(vAccountsGroup_ID)), Cn1)
        Da.Fill(Dt)

        vAccountsGroup_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vAccountsGroup_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        AccountsGroup_IdNoToName = Trim(vAccountsGroup_Nm)

    End Function

    Public Shared Function AccountsGroup_CodeToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vAccountsGroup_CD As String) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vAccountsGroup_Nm As String

        Da = New SqlClient.SqlDataAdapter("Select AccountsGroup_Name from AccountsGroup_Head where Parent_Idno = '" & Trim(vAccountsGroup_CD) & "'", Cn1)
        Dt = New DataTable
        Da.Fill(Dt)

        vAccountsGroup_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vAccountsGroup_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        AccountsGroup_CodeToName = Trim(vAccountsGroup_Nm)

    End Function

    Public Shared Function Ledger_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vLed_IdNo As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vLed_Name As String

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Ledger_Name from " & Trim(DbName) & " Ledger_Head where Ledger_IdNo = " & Str(Val(vLed_IdNo)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vLed_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vLed_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Ledger_IdNoToName = Trim(vLed_Name)

    End Function

    Public Shared Function Ledger_IdNoToMainName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vLed_IdNo As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vLed_Name As String

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Ledger_MainName from " & Trim(DbName) & " Ledger_Head where Ledger_IdNo = " & Str(Val(vLed_IdNo)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vLed_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vLed_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Ledger_IdNoToMainName = Trim(vLed_Name)

    End Function

    Public Shared Function Ledger_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vLed_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vLed_ID As Integer

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Ledger_IdNo from  " & Trim(DbName) & " Ledger_Head where Ledger_Name = '" & Trim(vLed_Name) & "' Order by Ledger_IdNo", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        vLed_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vLed_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Ledger_NameToIdNo = Val(vLed_ID)

    End Function

    Public Shared Function Contact_Designation_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vDesg_IdNo As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vDesg_Name As String

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Contact_Designation_Name from " & Trim(DbName) & " Contact_Designation_Head where Contact_Designation_IdNo = " & Str(Val(vDesg_IdNo)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vDesg_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vDesg_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Contact_Designation_IdNoToName = Trim(vDesg_Name)

    End Function
    Public Shared Function Contact_Designation_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vDesg_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vDesg_IdNo As Integer

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Contact_Designation_IdNo from  " & Trim(DbName) & " Contact_Designation_Head where Contact_Designation_Name = '" & Trim(vDesg_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        vDesg_IdNo = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vDesg_IdNo = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Contact_Designation_NameToIdNo = Val(vDesg_IdNo)

    End Function
    Public Shared Function Party_Category_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCatg_IdNo As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vCatg_Name As String

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Party_Category_Name from " & Trim(DbName) & " Party_Category_Head where Party_Category_IdNo = " & Str(Val(vCatg_IdNo)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vCatg_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vCatg_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Party_Category_IdNoToName = Trim(vCatg_Name)

    End Function
    Public Shared Function Party_Category_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCatg_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vCatg_IdNo As Integer

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Party_Category_IdNo from  " & Trim(DbName) & " Party_Category_Head where Party_Category_Name = '" & Trim(vCatg_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        vCatg_IdNo = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vCatg_IdNo = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Party_Category_NameToIdNo = Val(vCatg_IdNo)

    End Function
    Public Shared Function Fabric_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vFab_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vFab_IdNo As Integer

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Fabric_Name_IdNo from  " & Trim(DbName) & " Fabric_Name_Head where Fabric_Name = '" & Trim(vFab_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        vFab_IdNo = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vFab_IdNo = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Fabric_NameToIdNo = Val(vFab_IdNo)

    End Function
    Public Shared Function Fabric_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vFab_IdNo As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vFab_Name As String

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Fabric_Name from " & Trim(DbName) & " Fabric_Name_Head where Fabric_Name_IdNo = " & Str(Val(vFab_IdNo)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vFab_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vFab_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Fabric_IdNoToName = Trim(vFab_Name)

    End Function

    Public Shared Function Fabric_Category_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vFabctg_IdNo As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vFabctg_Name As String

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Fabric_Category_Name from " & Trim(DbName) & " Fabric_Category_Head where Fabric_Category_IdNo = " & Str(Val(vFabctg_IdNo)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vFabctg_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vFabctg_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Fabric_Category_IdNoToName = Trim(vFabctg_Name)

    End Function

    Public Shared Function Fabric_Category_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vFabctg_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vFabctg_IdNo As Integer

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Fabric_Category_IdNo from  " & Trim(DbName) & " Fabric_Category_Head where Fabric_Category_Name = '" & Trim(vFabctg_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        vFabctg_IdNo = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vFabctg_IdNo = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Fabric_Category_NameToIdNo = Val(vFabctg_IdNo)

    End Function


    Public Shared Function Ledger_AlaisNameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vLed_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vLed_ID As Integer

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If

        Da = New SqlClient.SqlDataAdapter("select Ledger_IdNo from " & Trim(DbName) & " Ledger_AlaisHead where Ledger_DisplayName = '" & Trim(vLed_Name) & "' Order by Ledger_IdNo", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        vLed_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vLed_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Ledger_AlaisNameToIdNo = Val(vLed_ID)

    End Function

    Public Shared Function AccountsGroup_NameToCode(ByVal Cn1 As SqlClient.SqlConnection, ByVal vAccountsGroup_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vAccountsGroup_Code As Integer

        Da = New SqlClient.SqlDataAdapter("select Parent_Idno from AccountsGroup_Head where AccountsGroup_Name = '" & Trim(vAccountsGroup_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable()
        Da.Fill(Dt)

        vAccountsGroup_Code = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vAccountsGroup_Code = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        AccountsGroup_NameToCode = Val(vAccountsGroup_Code)

    End Function

    Public Shared Function AccountsGroup_IdNoToCode(ByVal Cn1 As SqlClient.SqlConnection, ByVal vAccountsGroup_ID As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vAccountsGroup_Code As String

        Da = New SqlClient.SqlDataAdapter("select Parent_Idno from AccountsGroup_Head where AccountsGroup_IdNo = " & Str(Val(vAccountsGroup_ID)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable()
        Da.Fill(Dt)

        vAccountsGroup_Code = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vAccountsGroup_Code = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        AccountsGroup_IdNoToCode = Trim(vAccountsGroup_Code)

    End Function

    Public Shared Function Item_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vItem_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vItem_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Item_IdNo from Stores_Item_Head where Item_Name = '" & Trim(vItem_Name) & "' order by Item_IdNo ", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vItem_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vItem_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Item_NameToIdNo = Val(vItem_ID)

    End Function


    Public Shared Function Item_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vItem_ID As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vItem_Name As String

        Da = New SqlClient.SqlDataAdapter("select Item_Name from Stores_Item_Head where Item_IdNo = " & Str(Val(vItem_ID)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        vItem_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vItem_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Item_IdNoToName = Trim(vItem_Name)

    End Function

    Public Shared Function Salary_PaymentType_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vSaPyTy_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vSaPyTy_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Salary_Payment_Type_IdNo from PayRoll_Salary_Payment_Type_Head where Salary_Payment_Type_Name = '" & Trim(vSaPyTy_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vSaPyTy_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vSaPyTy_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Salary_PaymentType_NameToIdNo = Val(vSaPyTy_ID)

    End Function

    Public Shared Function Salary_PaymentType_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vSaPyTy_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vSaPyTy_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Salary_Payment_Type_Name from PayRoll_Salary_Payment_Type_Head where Salary_Payment_Type_IdNo = " & Str(Val(vSaPyTy_ID)), Cn1)
        Da.Fill(Dt)

        vSaPyTy_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vSaPyTy_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Salary_PaymentType_IdNoToName = Trim(vSaPyTy_Nm)

    End Function

    Public Shared Function Company_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCompany_Nm As String, Optional ByVal DbName As String = "") As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vCompany_ID As Integer

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Company_IdNo from  " & Trim(DbName) & "Company_Head where Company_Name = '" & Trim(vCompany_Nm) & "'", Cn1)
        Da.Fill(Dt)

        vCompany_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vCompany_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Company_NameToIdNo = Val(vCompany_ID)

    End Function

    Public Shared Function Category_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCategory_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vCategory_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Category_IdNo from PayRoll_Category_Head where Category_Name = '" & Trim(vCategory_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vCategory_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vCategory_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Category_NameToIdNo = Val(vCategory_ID)

    End Function

    Public Shared Function Category_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCategory_IdNo As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vCategory_Name As String = ""

        Da = New SqlClient.SqlDataAdapter("select Category_Name from PayRoll_Category_Head where Category_IdNo = " & Str(Val(vCategory_IdNo)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vCategory_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vCategory_Name = Dt.Rows(0)(0).ToString
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Category_IdNoToName = vCategory_Name

    End Function
    Public Shared Function ConeType_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vConeType_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vConeType_ID As Integer
        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If

        Da = New SqlClient.SqlDataAdapter("select Cone_Type_IdNo from " & Trim(DbName) & "Cone_Type_Head where Cone_Type_Name = '" & Trim(vConeType_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vConeType_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vConeType_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        ConeType_NameToIdNo = Val(vConeType_ID)

        'Da = New SqlClient.SqlDataAdapter("select Cone_Type_IdNo from Cone_Type_Head where Cone_Type_Name = '" & Trim(vConeType_Name) & "'", Cn1)
        'If IsNothing(sqltr) = False Then
        '    Da.SelectCommand.Transaction = sqltr
        'End If
        'Da.Fill(Dt)

        'vConeType_ID = 0
        'If Dt.Rows.Count > 0 Then
        '    If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
        '        vConeType_ID = Val(Dt.Rows(0)(0).ToString)
        '    End If
        'End If

        'Dt.Dispose()
        'Da.Dispose()

        'ConeType_NameToIdNo = Val(vConeType_ID)

    End Function


    Public Shared Function Conetype_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vConetype_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vConetype_Name As String

        Da = New SqlClient.SqlDataAdapter("select Cone_type_Name from Cone_Type_Head where Cone_Type_IdNo = " & Str(Val(vConetype_ID)), Cn1)
        Da.Fill(Dt)

        vConetype_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vConetype_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Conetype_IdNoToName = Trim(vConetype_Name)

    End Function

    Public Shared Function Size_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vSize_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vSize_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Size_IdNo from Size_Head where Size_Name = '" & Trim(vSize_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vSize_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vSize_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Size_NameToIdNo = Val(vSize_ID)

    End Function

    Public Shared Function Size_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vSize_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vSize_Name As String

        Da = New SqlClient.SqlDataAdapter("select Size_Name from Size_Head where Size_IdNo = " & Str(Val(vSize_ID)), Cn1)
        Da.Fill(Dt)

        vSize_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vSize_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Size_IdNoToName = Trim(vSize_Name)

    End Function

    Public Shared Function Unit_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vUnit_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vUnit_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Unit_IdNo from Unit_Head where Unit_Name = '" & Trim(vUnit_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vUnit_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vUnit_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Unit_NameToIdNo = Val(vUnit_ID)

    End Function


    Public Shared Function Unit_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vUnit_ID As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vUnit_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Unit_Name from Unit_Head where Unit_IdNo = " & Str(Val(vUnit_ID)), Cn1)
        Dt = New DataTable
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vUnit_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vUnit_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Unit_IdNoToName = Trim(vUnit_Nm)

    End Function

    Public Shared Function Motion_Type_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vMot_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vMotTyp_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Motion_Type_IdNo from Motion_Type_Head where Motion_Type_Name = '" & Trim(vMot_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vMotTyp_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vMotTyp_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Motion_Type_NameToIdNo = Val(vMotTyp_ID)

    End Function


    Public Shared Function Motion_Type_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vMotTyp_ID As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vMot_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Motion_Type_Name from Motion_Type_Head where Motion_Type_IdNo = " & Str(Val(vMotTyp_ID)), Cn1)
        Dt = New DataTable
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vMot_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vMot_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Motion_Type_IdNoToName = Trim(vMot_Nm)

    End Function

    Public Shared Function Month_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vMonth_Nm As String) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vMonth_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Month_IdNo from Month_Head where Month_Name = '" & Trim(vMonth_Nm) & "'", Cn1)
        Da.Fill(Dt)

        vMonth_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vMonth_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Month_NameToIdNo = Val(vMonth_ID)

    End Function

    Public Shared Function Month_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vMonth_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vMonth_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Month_Name from Month_Head where Month_IdNo = " & Str(Val(vMonth_ID)), Cn1)
        Da.Fill(Dt)

        vMonth_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vMonth_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Month_IdNoToName = Trim(vMonth_Nm)

    End Function

    Public Shared Function ItemGroup_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vItemGroup_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vItemGroup_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select ItemGroup_IdNo from ItemGroup_Head where ItemGroup_Name = '" & Trim(vItemGroup_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vItemGroup_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vItemGroup_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        ItemGroup_NameToIdNo = Val(vItemGroup_ID)

    End Function

    Public Shared Function ItemGroup_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vItemGroup_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vItemGroup_Name As String

        Da = New SqlClient.SqlDataAdapter("select ItemGroup_Name from ItemGroup_Head where ItemGroup_IdNo = " & Str(Val(vItemGroup_ID)), Cn1)
        Da.Fill(Dt)

        vItemGroup_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vItemGroup_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        ItemGroup_IdNoToName = Trim(vItemGroup_Name)

    End Function

    Public Shared Function Item_NameToItemGroupIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vItem_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vItemGroup_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select ItemGroup_IdNo from Item_Head where Item_Name = '" & Trim(vItem_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)


        vItemGroup_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vItemGroup_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Item_NameToItemGroupIdNo = Val(vItemGroup_ID)

    End Function

    'Public Shared Function Variety_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vVariety_Nm As String) As Integer
    '    Dim Da As New SqlClient.SqlDataAdapter
    '    Dim Dt As New DataTable
    '    Dim vVariety_ID As Integer

    '    Da = New SqlClient.SqlDataAdapter("select Variety_IdNo from Variety_Head where Variety_Name = '" & Trim(vVariety_Nm) & "'", Cn1)
    '    Da.Fill(Dt)

    '    vVariety_ID = 0
    '    If Dt.Rows.Count > 0 Then
    '        If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
    '            vVariety_ID = Val(Dt.Rows(0)(0).ToString)
    '        End If
    '    End If

    '    Dt.Dispose()
    '    Da.Dispose()

    '    Variety_NameToIdNo = Val(vVariety_ID)

    'End Function

    'Public Shared Function Variety_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vVariety_ID As Integer) As String
    '    Dim Da As New SqlClient.SqlDataAdapter
    '    Dim Dt As New DataTable
    '    Dim vVariety_Nm As String

    '    Da = New SqlClient.SqlDataAdapter("select Variety_Name from Variety_Head where Variety_IdNo = " & Str(Val(vVariety_ID)), Cn1)
    '    Da.Fill(Dt)

    '    vVariety_Nm = ""
    '    If Dt.Rows.Count > 0 Then
    '        If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
    '            vVariety_Nm = Trim(Dt.Rows(0)(0).ToString)
    '        End If
    '    End If

    '    Dt.Dispose()
    '    Da.Dispose()

    '    Variety_IdNoToName = Trim(vVariety_Nm)

    'End Function

    Public Shared Function Area_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vArea_Nm As String) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vArea_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Area_IdNo from Area_Head where Area_Name = '" & Trim(vArea_Nm) & "'", Cn1)
        Da.Fill(Dt)

        vArea_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vArea_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Area_NameToIdNo = Val(vArea_ID)

    End Function

    Public Shared Function Area_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vArea_ID As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vArea_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Area_Name from Area_Head where Area_IdNo = " & Str(Val(vArea_ID)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        vArea_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vArea_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Area_IdNoToName = Trim(vArea_Nm)

    End Function

    Public Shared Function Vendor_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vVndr_IdNo As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vVndr_Name As String

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If

        Da = New SqlClient.SqlDataAdapter("select Vendor_Name from " & Trim(DbName) & "  Vendor_Head where Vendor_IdNo = " & Str(Val(vVndr_IdNo)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vVndr_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vVndr_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Vendor_IdNoToName = Trim(vVndr_Name)

    End Function

    Public Shared Function Vendor_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vVndr_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vVndr_ID As Integer

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Vendor_IdNo from " & Trim(DbName) & " Vendor_Head where Vendor_Name = '" & Trim(vVndr_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If

        Da.Fill(Dt)

        vVndr_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vVndr_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Vendor_NameToIdNo = Val(vVndr_ID)

    End Function

    Public Shared Function Vendor_AlaisNameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vVndr_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vVndr_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Vendor_IdNo from Vendor_AlaisHead where Vendor_DisplayName = '" & Trim(vVndr_Name) & "' Order by Vendor_IdNo", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vVndr_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vVndr_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Vendor_AlaisNameToIdNo = Val(vVndr_ID)

    End Function


    Public Shared Function PackingType_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vPackingType_Nm As String) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vPackingType_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Packing_Type_IdNo from Packing_Type_Head where Packing_Type_Name = '" & Trim(vPackingType_Nm) & "'", Cn1)
        Da.Fill(Dt)

        vPackingType_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vPackingType_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        PackingType_NameToIdNo = Val(vPackingType_ID)

    End Function

    Public Shared Function PackingType_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vPackingType_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vPackingType_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Packing_Type_Name from Packing_Type_Head where Packing_Type_IdNo = " & Str(Val(vPackingType_ID)), Cn1)
        Da.Fill(Dt)

        vPackingType_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vPackingType_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        PackingType_IdNoToName = Trim(vPackingType_Nm)

    End Function

    Public Shared Function BeamWidth_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vBeam_Width_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vBeam_Width_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Beam_Width_IdNo from Beam_Width_Head where Beam_Width_Name = '" & Trim(vBeam_Width_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vBeam_Width_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vBeam_Width_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        BeamWidth_NameToIdNo = Val(vBeam_Width_ID)

    End Function

    Public Shared Function BeamWidth_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vBeam_Width_ID As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vBeam_Width_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Beam_Width_Name from Beam_Width_Head where Beam_Width_IdNo = " & Str(Val(vBeam_Width_ID)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vBeam_Width_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vBeam_Width_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        BeamWidth_IdNoToName = Trim(vBeam_Width_Nm)

    End Function


    Public Shared Function Count_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCount_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vCount_ID As Integer

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If

        Da = New SqlClient.SqlDataAdapter("select Count_IdNo from " & Trim(DbName) & "Count_Head where Count_Name = '" & Trim(vCount_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vCount_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vCount_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Count_NameToIdNo = Val(vCount_ID)

    End Function


    Public Shared Function Count_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCount_ID As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vCount_Nm As String

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If

        Da = New SqlClient.SqlDataAdapter("select Count_Name from " & Trim(DbName) & " Count_Head where Count_IdNo = " & Str(Val(vCount_ID)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        vCount_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vCount_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Count_IdNoToName = Trim(vCount_Nm)

    End Function

    Public Shared Function Mill_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vMill_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vMill_ID As Integer

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Mill_IdNo from " & Trim(DbName) & " Mill_Head where Mill_Name = '" & Trim(vMill_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vMill_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vMill_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Mill_NameToIdNo = Val(vMill_ID)

    End Function

    Public Shared Function Mill_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vMill_ID As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vMill_Nm As String

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Mill_Name from " & Trim(DbName) & " Mill_Head where Mill_IdNo = " & Str(Val(vMill_ID)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        vMill_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vMill_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Mill_IdNoToName = Trim(vMill_Nm)

    End Function

    Public Shared Function Processed_Item_SalesNameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vProcessed_Item_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vProcessed_Item_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Processed_Item_SalesIdNo from Processed_Item_SalesName_Head where Processed_Item_SalesName = '" & Trim(vProcessed_Item_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vProcessed_Item_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vProcessed_Item_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Processed_Item_SalesNameToIdNo = Val(vProcessed_Item_ID)

    End Function

    Public Shared Function Processed_Item_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vItem_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vItem_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Processed_Item_IdNo from Processed_Item_Head where Processed_Item_Name = '" & Trim(vItem_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vItem_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vItem_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Processed_Item_NameToIdNo = Val(vItem_ID)

    End Function

    Public Shared Function Processed_Item_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vItem_ID As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vItem_Name As String

        Da = New SqlClient.SqlDataAdapter("select Processed_Item_Name from Processed_Item_Head where Processed_Item_IdNo = " & Str(Val(vItem_ID)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vItem_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vItem_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Processed_Item_IdNoToName = Trim(vItem_Name)

    End Function


    Public Shared Function Rack_NoToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vRack_No As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vRack_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Rack_IdNo from Rack_Head where Rack_No= '" & Trim(vRack_No) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vRack_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vRack_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Rack_NoToIdNo = Val(vRack_ID)

    End Function

    Public Shared Function Rack_IdNoToNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vRack_IdNo As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vRack_No As String = ""

        Da = New SqlClient.SqlDataAdapter("select Rack_No from Rack_Head where Rack_IdNo = " & Str(Val(vRack_IdNo)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vRack_No = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vRack_No = Dt.Rows(0)(0).ToString
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Rack_IdNoToNo = vRack_No

    End Function

    Public Shared Function EndsCount_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vEndsCount_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vEndsCount_ID As Integer

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select EndsCount_IdNo from " & Trim(DbName) & " EndsCount_Head where EndsCount_Name = '" & Trim(vEndsCount_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vEndsCount_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vEndsCount_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        EndsCount_NameToIdNo = Val(vEndsCount_ID)

    End Function

    Public Shared Function EndsCount_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vEndsCount_ID As Integer, Optional ByVal DbName As String = "", Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vEndsCount_Nm As String

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If

        Da = New SqlClient.SqlDataAdapter("select EndsCount_Name from  " & Trim(DbName) & " EndsCount_Head where EndsCount_IdNo = " & Str(Val(vEndsCount_ID)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        vEndsCount_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vEndsCount_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        EndsCount_IdNoToName = Trim(vEndsCount_Nm)

    End Function

    Public Shared Function Cloth_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCloth_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vCloth_ID As Integer

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Cloth_IdNo from  " & Trim(DbName) & " Cloth_Head where Cloth_Name = '" & Trim(vCloth_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vCloth_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vCloth_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Cloth_NameToIdNo = Val(vCloth_ID)

    End Function

    Public Shared Function ClothType_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vClothType_ID As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vClothType_Nm As String

        Da = New SqlClient.SqlDataAdapter("select ClothType_Name from ClothType_Head where ClothType_IdNo = " & Str(Val(vClothType_ID)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)
        vClothType_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vClothType_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        ClothType_IdNoToName = Trim(vClothType_Nm)

    End Function

    Public Shared Function ClothType_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vClothType_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vClothType_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select ClothType_IdNo from ClothType_Head where ClothType_Name = '" & Trim(vClothType_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vClothType_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vClothType_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        ClothType_NameToIdNo = Val(vClothType_ID)

    End Function

    Public Shared Function Loom_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vLoom_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vLoom_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Loom_IdNo from Loom_Head where Loom_Name = '" & Trim(vLoom_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vLoom_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vLoom_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Loom_NameToIdNo = Val(vLoom_ID)

    End Function

    Public Shared Function Loom_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vLoom_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vLoom_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Loom_Name from Loom_Head where Loom_IdNo = " & Str(Val(vLoom_ID)), Cn1)
        Da.Fill(Dt)

        vLoom_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vLoom_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Loom_IdNoToName = Trim(vLoom_Nm)

    End Function

    Public Shared Function LoomType_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vLoomTy_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vLoomTy_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select LoomType_IdNo from LoomType_Head where LoomType_Name = '" & Trim(vLoomTy_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vLoomTy_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vLoomTy_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        LoomType_NameToIdNo = Val(vLoomTy_ID)

    End Function

    Public Shared Function LoomType_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vLoomTy_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vLoomTy_Nm As String

        Da = New SqlClient.SqlDataAdapter("select LoomType_Name from LoomType_Head where LoomType_IdNo = " & Str(Val(vLoomTy_ID)), Cn1)
        Dt = New DataTable
        Da.Fill(Dt)

        vLoomTy_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vLoomTy_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        LoomType_IdNoToName = Trim(vLoomTy_Nm)

    End Function

    Public Shared Function Cloth_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCloth_ID As Integer, Optional ByVal DbName As String = "", Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vCloth_Nm As String


        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If

        Da = New SqlClient.SqlDataAdapter("select Cloth_Name from " & Trim(DbName) & " Cloth_Head where Cloth_IdNo = " & Str(Val(vCloth_ID)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        vCloth_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vCloth_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Cloth_IdNoToName = Trim(vCloth_Nm)

    End Function

    Public Shared Function Article_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vArt_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vArt_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Article_Name from Article_Head where Article_IdNo = " & Str(Val(vArt_ID)), Cn1)
        Da.Fill(Dt)

        vArt_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vArt_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Article_IdNoToName = Trim(vArt_Nm)

    End Function

    Public Shared Function Article_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vArt_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vArt_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Article_IdNo from Article_Head where Article_Name = '" & Trim(vArt_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vArt_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vArt_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Article_NameToIdNo = Val(vArt_ID)

    End Function
    Public Shared Function Currency_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCurrency_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vCurrency_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Currency_Name from Currency_Head where Currency_IdNo = " & Str(Val(vCurrency_ID)), Cn1)
        Da.Fill(Dt)

        vCurrency_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vCurrency_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Currency_IdNoToName = Trim(vCurrency_Nm)

    End Function

    Public Shared Function Currency_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCurrency_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vCurrency_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Currency_IdNo from Currency_Head where Currency_Name = '" & Trim(vCurrency_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vCurrency_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vCurrency_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Currency_NameToIdNo = Val(vCurrency_ID)

    End Function

    Public Shared Function Colour_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vColour_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vColour_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Colour_IdNo from Colour_Head where Colour_Name = '" & Trim(vColour_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vColour_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vColour_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Colour_NameToIdNo = Val(vColour_ID)

    End Function

    Public Shared Function TexColour_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vColour_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vColour_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Colour_IdNo from Textile_Colour_Head where Colour_Name = '" & Trim(vColour_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vColour_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vColour_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        TexColour_NameToIdNo = Val(vColour_ID)

    End Function
    Public Shared Function TexColour_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vColour_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vColour_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Colour_Name from Textile_Colour_Head where Colour_IdNo = " & Str(Val(vColour_ID)), Cn1)
        Da.Fill(Dt)

        vColour_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vColour_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        TexColour_IdNoToName = Trim(vColour_Nm)

    End Function
    Public Shared Function Colour_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vColour_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vColour_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Colour_Name from Colour_Head where Colour_IdNo = " & Str(Val(vColour_ID)), Cn1)
        Da.Fill(Dt)

        vColour_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vColour_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Colour_IdNoToName = Trim(vColour_Nm)

    End Function

    Public Shared Function Lot_NoToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vLot_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vlot_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Lot_IdNo from Lot_Head where lot_No = '" & Trim(vLot_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vlot_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vlot_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Lot_NoToIdNo = Val(vlot_ID)

    End Function


    Public Shared Function Lot_IdNoToNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vLot_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vLot_Nm As String

        Da = New SqlClient.SqlDataAdapter("select lot_No from Lot_Head where Lot_IdNo = " & Str(Val(vLot_ID)), Cn1)
        Da.Fill(Dt)

        vLot_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vLot_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Lot_IdNoToNo = Trim(vLot_Nm)

    End Function


    Public Shared Function TexLot_NoToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vLot_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vlot_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Lot_IdNo from Textile_Lot_Head where lot_No = '" & Trim(vLot_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vlot_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vlot_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        TexLot_NoToIdNo = Val(vlot_ID)

    End Function


    Public Shared Function TexLot_IdNoToNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vLot_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vLot_Nm As String

        Da = New SqlClient.SqlDataAdapter("select lot_No from Textile_Lot_Head where Lot_IdNo = " & Str(Val(vLot_ID)), Cn1)
        Da.Fill(Dt)

        vLot_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vLot_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        TexLot_IdNoToNo = Trim(vLot_Nm)

    End Function

    Public Shared Function TexProcess_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vproce_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vproce_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Process_IdNo from Textile_Process_Head where Process_Name = '" & Trim(vproce_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vproce_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vproce_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        TexProcess_NameToIdNo = Val(vproce_ID)

    End Function

    Public Shared Function TexProcess_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vProcess_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vProcess_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Process_Name from Textile_Process_Head where Process_IdNo = " & Str(Val(vProcess_ID)), Cn1)
        Da.Fill(Dt)

        vProcess_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vProcess_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        TexProcess_IdNoToName = Trim(vProcess_Nm)

    End Function

    Public Shared Function Process_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vproce_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vproce_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Process_IdNo from Process_Head where Process_Name = '" & Trim(vproce_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vproce_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vproce_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Process_NameToIdNo = Val(vproce_ID)

    End Function

    Public Shared Function Process_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vProcess_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vProcess_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Process_Name from Process_Head where Process_IdNo = " & Str(Val(vProcess_ID)), Cn1)
        Da.Fill(Dt)

        vProcess_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vProcess_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Process_IdNoToName = Trim(vProcess_Nm)

    End Function

    Public Shared Function Shift_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vShift_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vShift_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Shift_IdNo from Shift_Head where Shift_Name = '" & Trim(vShift_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vShift_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vShift_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Shift_NameToIdNo = Val(vShift_ID)

    End Function

    Public Shared Function Shift_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vShift_IdNo As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vShift_Name As String = ""

        Da = New SqlClient.SqlDataAdapter("select Shift_Name from Shift_Head where Shift_IdNo = " & Str(Val(vShift_IdNo)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vShift_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vShift_Name = Dt.Rows(0)(0).ToString
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Shift_IdNoToName = vShift_Name

    End Function

    Public Shared Function Border_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vBorder_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vBorder_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Border_IdNo from Border_Head where Border_Name = '" & Trim(vBorder_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vBorder_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vBorder_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Border_NameToIdNo = Val(vBorder_ID)

    End Function

    Public Shared Function Border_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vBorder_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vBorder_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Border_Name from Border_Head where Bath_IdNo = " & Str(Val(vBorder_ID)), Cn1)
        Da.Fill(Dt)

        vBorder_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vBorder_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Border_IdNoToName = Trim(vBorder_Nm)

    End Function


    Public Shared Function BorderSize_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vBordersz_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vBordersz_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select BorderSize_IdNo from BorderSize_Head where BorderSize_Name = '" & Trim(vBordersz_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vBordersz_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vBordersz_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        BorderSize_NameToIdNo = Val(vBordersz_ID)

    End Function

    Public Shared Function BorderSize_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vBordersz_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vBordersz_Nm As String

        Da = New SqlClient.SqlDataAdapter("select BorderSize_Name from Bordersize_Head where BorderSize_IdNo = " & Str(Val(vBordersz_ID)), Cn1)
        Da.Fill(Dt)

        vBordersz_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vBordersz_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        BorderSize_IdNoToName = Trim(vBordersz_Nm)

    End Function

    Public Shared Function Employee_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vEmployee_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vEmployee_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Employee_IdNo from PayRoll_Employee_Head where Employee_Name = '" & Trim(vEmployee_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vEmployee_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vEmployee_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Employee_NameToIdNo = Val(vEmployee_ID)

    End Function

    Public Shared Function Employee_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vEmployee_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vEmployee_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Employee_Name from PayRoll_Employee_Head where Employee_IdNo = " & Str(Val(vEmployee_ID)), Cn1)
        Da.Fill(Dt)

        vEmployee_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vEmployee_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Employee_IdNoToName = Trim(vEmployee_Nm)

    End Function


    Public Shared Function User_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vUser_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vUser_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select User_IdNo from " & Trim(CompanyDetailsDataBaseName) & "..User_Head where User_Name = '" & Trim(vUser_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vUser_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vUser_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        User_NameToIdNo = Val(vUser_ID)

    End Function


    Public Shared Function User_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vUser_ID As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vUser_Nm As String

        Da = New SqlClient.SqlDataAdapter("select User_Name from " & Trim(CompanyDetailsDataBaseName) & "..User_Head where User_IdNo = " & Str(Val(vUser_ID)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        vUser_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vUser_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        User_IdNoToName = Trim(vUser_Nm)

    End Function

    Public Shared Function Employee_Simple_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vEmployee_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vEmployee_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Employee_IdNo from Employee_Head where Employee_Name = '" & Trim(vEmployee_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vEmployee_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vEmployee_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Employee_Simple_NameToIdNo = Val(vEmployee_ID)

    End Function

    Public Shared Function Employee_Simple_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vEmployee_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vEmployee_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Employee_Name from Employee_Head where Employee_IdNo = " & Str(Val(vEmployee_ID)), Cn1)
        Dt = New DataTable
        Da.Fill(Dt)

        vEmployee_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vEmployee_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Employee_Simple_IdNoToName = Trim(vEmployee_Nm)

    End Function

    Public Shared Function SoftwareModule_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vSOFTMOD_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vEmployee_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Software_Modules_IdNo from Software_Modules_Head where Software_Modules_Name = '" & Trim(vSOFTMOD_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vEmployee_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vEmployee_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        SoftwareModule_NameToIdNo = Val(vEmployee_ID)

    End Function

    Public Shared Function SoftwareModule_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vSOFTMOD_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vEmployee_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Software_Modules_Name from Software_Modules_Head where Software_Modules_IdNo = " & Str(Val(vSOFTMOD_ID)), Cn1)
        Dt = New DataTable
        Da.Fill(Dt)

        vEmployee_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vEmployee_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        SoftwareModule_IdNoToName = Trim(vEmployee_Nm)

    End Function

    Public Shared Function get_MaxIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vTable_name As String, ByVal vField_name As String, ByVal vCondition As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim MxId As Integer

        Da = New SqlClient.SqlDataAdapter("select max(" & vField_name & ") from " & vTable_name & IIf(Trim(vCondition) <> "", " Where ", "") & vCondition, Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        MxId = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                MxId = Val(Dt.Rows(0)(0).ToString)
            End If
        End If
        MxId = MxId + 1

        Dt.Dispose()
        Da.Dispose()

        get_MaxIdNo = Val(MxId)

    End Function

    Public Shared Function get_MaxCode(ByVal Cn1 As SqlClient.SqlConnection, ByVal vTable_name As String, ByVal vPK_Fieldname As String, ByVal vOrderBy_Fieldname As String, ByVal vCondition As String, ByVal vCompany_ID As Integer, ByVal vFinYr As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim MxId As Long
        Dim SqlCondt As String

        SqlCondt = ""
        If Trim(vCondition) <> "" Then
            SqlCondt = "(" & Trim(vCondition) & ")"
        End If
        If Val(vCompany_ID) <> 0 Then
            SqlCondt = Trim(SqlCondt) & IIf(Trim(SqlCondt) <> "", " and ", "") & " Company_IdNo = " & Str(Val(vCompany_ID))
        End If

        If Trim(vFinYr) <> "" Then
            SqlCondt = Trim(SqlCondt) & IIf(Trim(SqlCondt) <> "", " and ", "") & " " & vPK_Fieldname & " like '%/" & Trim(vFinYr) & "'"
        End If

        Da = New SqlClient.SqlDataAdapter("select max(" & vOrderBy_Fieldname & ") from " & vTable_name & IIf(Trim(SqlCondt) <> "", " Where ", "") & SqlCondt, Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        MxId = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                MxId = Int(Val(Dt.Rows(0)(0).ToString))
            End If
        End If
        MxId = MxId + 1

        Dt.Clear()
        Dt.Dispose()
        Da.Dispose()

        get_MaxCode = Trim(Val(MxId))

    End Function

    Public Shared Function get_Item_CurrentStock(ByVal Cn1 As SqlClient.SqlConnection, ByVal vComp_IdNo As Integer, ByVal vItem_IdNo As Integer) As Decimal

        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim CurStk As Decimal

        Da = New SqlClient.SqlDataAdapter("select sum(Quantity) from Item_Processing_Details where Company_IdNo = " & Str(Val(vComp_IdNo)) & " and Item_IdNo = " & Str(Val(vItem_IdNo)), Cn1)
        Da.Fill(Dt)

        CurStk = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                CurStk = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        get_Item_CurrentStock = Val(CurStk)

    End Function

    Public Shared Sub Default_GroupHead_Updation(ByVal Cn1 As SqlClient.SqlConnection)
        Dim cmd As New SqlClient.SqlCommand

        cmd.Connection = Cn1

        cmd.CommandText = "delete from AccountsGroup_Head where AccountsGroup_IdNo <= 32"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (0, '',          '',       '',    0, '',       0,  0,      '',                         ''      )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (1, 'BRANCH / DIVISION',          'BRANCHDIVISION',       'BRANCH / DIVISION',    1, '~1~',       0,  7,      '',                         'SUBSIDIARY FIRMS'      )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (2, 'CAPITAL ACCOUNT',            'CAPITALACCOUNT',       'CAPITAL ACCOUNT',      1,  '~2~',      0,  1,      '',                         'EQUITY'                )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (3, 'RESERVES & SURPLUS',        'RESERVESSURPLUS',       'CAPITAL ACCOUNT',      1,  '~3~2~',    0,  1.1,    '',                         'RETAINED EARNINGS'     )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (4, 'CURRENT ASSETS',             'CURRENTASSETS',        'CURRENT ASSETS',       1,  '~4~',      0,  6,      'CURRENT ASSETS',           ''                      )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (5, 'BANK ACCOUNTS',              'BANKACCOUNTS',         'CURRENT ASSETS',       1,  '~5~4~',    0,  6.7,    'CURRENT ASSETS',           ''                      )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (6, 'CASH-IN-HAND',               'CASHINHAND',           'CURRENT ASSETS',       1,  '~6~4~',    0,  6.6,    'CURRENT ASSETS',           ''                      )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (7, 'DEPOSITS (ASSET)',           'DEPOSITSASSET',        'CURRENT ASSETS',       1,  '~7~4~',    0,  6.2,    'CURRENT ASSETS',           ''                      )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (8, 'LOANS & ADVANCES (ASSET)',   'LOANSADVANCESASSET',   'CURRENT ASSETS',       1,  '~8~4~',    0,  6.3,    'CURRENT ASSETS',           ''                      )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (9, 'STOCK-IN-HAND',              'STOCKINHAND',          'CURRENT ASSETS',       1,  '~9~4~',    0,  6.1,    'CURRENT ASSETS',           ''                      )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (10, 'SUNDRY DEBTORS',            'SUNDRYDEBTORS',        'CURRENT ASSETS',       1,  '~10~4~',   0,  6.5,    'CURRENT ASSETS',           'ACCOUNTS RECEIVABLE'   )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (11, 'CURRENT LIABILITIES',       'CURRENTLIABILITIES',   'CURRENT LIABILITIES',  1,  '~11~',     0,  3,      'CURRENT LIABILITIES',      ''                      )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (12, 'DUTIES & TAXES',            'DUTIESTAXES',          'CURRENT LIABILITIES',  1,  '~12~11~',  0,  3.2,    'CURRENT LIABILITIES',      ''                      )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (13, 'PROVISIONS',                'PROVISIONS',           'CURRENT LIABILITIES',  1,  '~13~11~',  0,  3.3,    'CURRENT LIABILITIES',      ''                      )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (14, 'SUNDRY CREDITORS',          'SUNDRYCREDITORS',      'CURRENT LIABILITIES',  1,  '~14~11~',  0,  3.4,    'CURRENT LIABILITIES',      'ACCOUNTS PAYABLE'      )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (15, 'EXPENSES (DIRECT)',         'EXPENSESDIRECT',       'EXPENSES (DIRECT)',    1,  '~15~18~',  1,  13,     'EXPENDITURE ACCOUNT',      'MFG./TRDG. EXPENSES'   )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (16, 'EXPENSES (INDIRECT)',       'EXPENSESINDIRECT',     'EXPENSES (INDIRECT)',  1,  '~16~18~',  1,  15,     'EXPENDITURE ACCOUNT',      'ADMIN. EXPENSES'       )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (17, 'FIXED ASSETS',              'FIXEDASSETS',          'FIXED ASSETS',         1,  '~17~',     0,  4,      '',                         'IMMOVABLE PROPERTIES'  )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (18, 'REVENUE ACCOUNTS',          'REVENUEACCOUNTS',      'REVENUE ACCOUNTS',     1,  '~18~',     0,  18,     '',                         ''                      )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (19, 'INCOME (REVENUE)',          'INCOMEREVENUE',        'INCOME (REVENUE)',     1,  '~19~18~',  1,  12,     'REVENUE ACCOUNTS',         ''                      )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (20, 'INVESTMENTS',               'INVESTMENTS',          'INVESTMENTS',          1,  '~20~',     0,  5,      '',                         ''                      )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (21, 'LOANS (LIABILITY)',         'LOANSLIABILITY',       'LOANS (LIABILITY)',    1,  '~21~',     0,  2,      '',                         ''                      )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (23, 'BANK OCC A/C',              'BANKOCCAC',            'LOANS (LIABILITY)',    1,  '~23~21~',  0,  2.1,    'LOANS (LIABILITY)',        ''                      )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (24, 'SECURED LOANS',             'SECUREDLOANS',         'LOANS (LIABILITY)',    1,  '~24~21~',  0,  2.2,    'LOANS (LIABILITY)',        ''                      )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (25, 'UNSECURED LOANS',           'UNSECUREDLOANS',       'LOANS (LIABILITY)',    1,  '~25~21~',  0,  2.3,    'LOANS (LIABILITY)',        ''                      )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (26, 'MISC.EXPENSES (ASSET)',     'MISCEXPENSESASSET',    'MISC.EXPENSES (ASSET)',1,  '~26~',     0,  8,      'Misc Expenses (ASSET)',    'Misc Expenses (ASSET)' )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (27, 'PURCHASE ACCOUNT',          'PURCHASEACCOUNT',      'PURCHASE ACCOUNT',     1,  '~27~18~',  1,  11,     'REVENUE ACCOUNTS',         ''                      )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (28, 'SALES ACCOUNT',             'SALESACCOUNT',         'SALES ACCOUNT',        1,  '~28~18~',  1,  10,     'REVENUE ACCOUNTS',         ''                      )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (29, 'SUSPENSE ACCOUNT',          'SUSPENSEACCOUNT',      'SUSPENSE ACCOUNT',     1,  '~29~',     0,  9,      '',                         'TEMPORARY A/CS'        )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (30, 'PROFIT & LOSS A/C',         'PROFITLOSSAC',         'PROFIT & LOSS A/C',    1,  '~30~',     0,  16,     'Profit & Loss A/c',        'Profit & Loss Account' )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (31, 'ACCOUNTS RECEIVABLE',        'ACCOUNTSRECEIVABLE',  'CURRENT ASSETS',       1,  '~31~4~',     0,  6.4,     'CURRENT ASSETS',        ''                       )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (32, 'ACCOUNTS PAYABLE',           'ACCOUNTSPAYABLE',     'CURRENT LIABILITIES',  1,  '~32~11~',    0,  3.1,     'CURRENT LIABILITIES',   ''                       )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Update AccountsGroup_Head set LedgerOrder_Position = Order_Position Where LedgerOrder_Position is Null"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Update AccountsGroup_Head set LedgerOrder_Position = Order_Position Where LedgerOrder_Position = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Update AccountsGroup_Head set LedgerOrder_Position = 1.5 Where AccountsGroup_IdNo = 27"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Update AccountsGroup_Head set LedgerOrder_Position = 1.6 Where AccountsGroup_IdNo = 28"
        cmd.ExecuteNonQuery()

        cmd.Dispose()

    End Sub

    Public Shared Sub Default_LedgerHead_Updation(ByVal Cn1 As SqlClient.SqlConnection)
        Dim cmd As New SqlClient.SqlCommand
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim i As Integer = 0

        cmd.Connection = Cn1

        On Error Resume Next

        cmd.CommandText = "delete from Ledger_Head where Ledger_IdNo <= 100"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (0,     '',                           '',                     '',                         '',         0,      0,      '',         '',                 '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (1,     'CASH A/C',                   'CASHAC',               'CASH A/C',                 '',         0,      6,      '~6~4~',    'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (2,     'WEAVING CHARGES A/C',        'WEAVINGCHARGESAC',     'WEAVING CHARGES A/C',      '',         0,      15,     '~15~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (3,     'SIZING CHARGES A/C',         'SIZINGCHARGESAC',      'SIZING CHARGES A/C',       '',         0,      15,     '~15~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ,Ledger_State_IdNo ) Values (4,     'GODOWN',                     'GODOWN',               'GODOWN',                   '',         0,      9,      '~9~4~',    'BALANCE ONLY',     'GODOWN', '',     '',     '',     '',     '',     ''  , 32 )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (5,     'OWN SORT',                   'OWN SORT',             'OWNSORT',                  '',         0,      9,      '~9~4~',    'BALANCE ONLY',     'OWNSORT', '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (7,     'TRANSPORT CHARGES',          'TRANSPORTCHARGES',     'TRANSPORT CHARGES',        '',         0,      16,     '~16~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (8,     'TDS PAYABLE A/C',            'TDSPAYABLEAC',           'TDS PAYABLE A/C',        '',         0,      12,     '~12~11~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (9,     'FREIGHT CHARGES',            'FREIGHTCHARGES',         'FREIGHT CHARGES',        '',         0,      16,     '~16~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (10,    'SALARY A/C',                 'SALARYAC',             'SALARY A/C',               '',         0,      15,     '~15~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (11,    'DD COMMISSION A/C',          'DDCOMMISSIONAC',         'DD COMMISSION A/C',      '',         0,      16,     '~16~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (12,    'STOCK-IN-HAND',              'STOCKINHAND',          'STOCK-IN-HAND',            '',         0,      9,      '~9~4~',    'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (13,    'PROFIT & LOSS A/C',          'PROFITLOSSAC',         'PROFIT & LOSS A/C',        '',         0,      30,     '~30~',     'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (14,    'RATE DIFFERENCE A/C',        'RATEDIFFERENCEAC',     'RATE DIFFERENCE A/C',      '',         0,      16,     '~16~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (15,    'CASH DISCOUNT A/C',          'CASHDISCOUNTAC',       'CASH DISCOUNT A/C',        '',         0,      16,     '~16~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (16,    'AGENT COMMISSION A/C',       'AGENTCOMMISSIONAC',    'AGENT COMMISSION A/C',     '',         0,      16,     '~16~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (17,    'DISCOUNT A/C',               'DISCOUNTAC',           'DISCOUNT A/C',             '',         0,      16,     '~16~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (18,    'CONVERSION CHARGES A/C',     'CONVERSIONCHARGESAC',  'CONVERSION CHARGES A/C',   '',         0,      15,     '~15~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (19,    'PROCESSING CHARGES',         'PROCESSINGCHARGES',    'PROCESSING CHARGES',       '',         0,      15,     '~15~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (20,    'VAT A/C',                    'VATAC',                'VAT A/C',                  '',         0,      12,     '~12~11~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1005" Then '---- Jeno Textiles (Somanur)
            cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (21,    'PURCHASE A/C',               'PURCHASEAC',           'PURCHASE A/C',             '',         0,      27,     '~27~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (22,    'SALES A/C',                  'SALESAC',              'SALES A/C',                '',         0,      28,     '~28~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (23,     'KNOTTING CHARGES A/C',        'KNOTTINGCHARGESAC',     'KNOTTING CHARGES A/C',      '',         0,      15,     '~15~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
            cmd.ExecuteNonQuery()
        End If

        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (24,    'CGST A/C',                    'CGSTAC',                'CGST A/C',                  '',         0,      12,     '~12~11~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (25,    'SGST A/C',                    'SGSTAC',                'SGST A/C',                  '',         0,      12,     '~12~11~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (26,    'IGST A/C',                    'IGSTAC',                'IGST A/C',                  '',         0,      12,     '~12~11~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (27,    'CGST RCM ITC A/C',           'CGSTRCMITCA/C',   'CGST RCM ITC A/C',            '',         0,      12,     '~12~11~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (28,    'SGST RCM ITC A/C',           'SGSTRCMITCA/C',   'SGST RCM ITC A/C',        '',         0,      12,     '~12~11~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (29,    'IGST RCM ITC A/C',           'IGSTRCMITCA/C',   'IGST RCM ITC A/C',          '',         0,      12,     '~12~11~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (30,    'ROUNDOFF A/C',               'ROUNDOFFAC',       'ROUNDOFFAC',               '',         0,      16,     '~16~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (31,    'CESS A/C',                    'CESSAC',                'CESS A/C',                  '',         0,      12,     '~12~11~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (32,    'TCS PAYABLE A/C',            'TCSPAYABLEAC',                'TCS PAYABLE A/C',                  '',         0,      12,     '~12~11~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (33,    'TCS RECEIVABLE A/C',         'TCSRECEIVABLEAC',                'TCS RECEIVABLE A/C',                  '',         0,      12,     '~12~11~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (34,     'LOADING & UNLOADING CHARGES A/C',   'LOADINGUNLOADINGCHARGESAC',         'LOADING & UNLOADING CHARGES A/C',        '',         0,      16,     '~16~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (35,     'SIZING JOBWORK CHARGES A/C',         'SIZINGJOBWORKCHARGESAC',      'SIZING JOBWORK CHARGES A/C',       '',         0,      15,     '~15~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (36,    'ADD/LESS AMOUNT A/C',               'ADDLESSAMOUNTAC',           'ADD/LESS AMOUNT A/C',             '',         0,      16,     '~16~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (37,     'ADVANCE DEDUCTION A/C',            'ADVANCEDEDUCTIONAC',      'ADVANCE DEDUCTION A/C',           '',         0,      15,     '~15~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (38,     'DEPOSIT A/C',                         'DEPOSITAC',             'DEPOSIT A/C',                   '',         0,      15,     '~15~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()


        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (39,     'MESS EXPENSE A/C',                    'MESSEXPENSEAC',         'MESS EXPENSE A/C',              '',         0,      15,     '~15~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (40,     'TDS RECEIVABLE A/C',                'TDSRECEIVABLEAC',           'TDS RECEIVABLE A/C',           '',         0,      12,     '~12~11~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (41,    'WEAVER SALES A/C',                  'WEAVERSALESAC',              'WEAVER SALES A/C',             '',         0,      28,     '~28~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (42,    'WEAVER PURCHASE A/C',               'WEAVERPURCHASEAC',         'WEAVER PURCHASE A/C',             '',         0,      27,     '~27~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (43,   'WEAVER LESS AMOUNT A/C',             'WEAVERLESSAMOUNTAC',      'WEAVER LESS AMOUNT A/C',           '',         0,      16,     '~16~18~',  'BALANCE ONLY',     '',       '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()


        cmd.CommandText = "delete from Ledger_AlaisHead where Ledger_IdNo <= 100"
        cmd.ExecuteNonQuery()

        Da1 = New SqlClient.SqlDataAdapter("select * from Ledger_Head where Ledger_IdNo <= 100", Cn1)
        Dt1 = New DataTable
        Da1.Fill(Dt1)

        If Dt1.Rows.Count > 0 Then

            For i = 0 To Dt1.Rows.Count - 1
                cmd.CommandText = "Insert into Ledger_AlaisHead(Ledger_IdNo, Sl_No, Ledger_DisplayName, Ledger_Type, AccountsGroup_IdNo, Own_Loom_Status, Show_In_All_Entry, Verified_Status , Area_IdNo, Close_status) Values (" & Str(Val(Dt1.Rows(i).Item("Ledger_IdNo").ToString)) & ",    1,      '" & Trim(Dt1.Rows(i).Item("Ledger_Name").ToString) & "',   '" & Trim(Dt1.Rows(i).Item("Ledger_Type").ToString) & "',    " & Str(Val(Dt1.Rows(i).Item("AccountsGroup_IdNo").ToString)) & ", 0, 0, 1,  0, 0)"
                cmd.ExecuteNonQuery()
            Next

        End If


        cmd.Dispose()
        Dt1.Dispose()
        Da1.Dispose()

    End Sub

    Public Shared Sub Default_MonthHead_Updation(ByVal Cn1 As SqlClient.SqlConnection)
        Dim cmd As New SqlClient.SqlCommand

        cmd.Connection = Cn1

        cmd.CommandText = "delete from Month_Head"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Month_Head(Month_IdNo, Month_Name, Month_ShortName, Idno ) Values (0,     '',                '',         0)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Month_Head(Month_IdNo, Month_Name, Month_ShortName, Idno ) Values (4,     'APRIL',           'APR',      1)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Month_Head(Month_IdNo, Month_Name, Month_ShortName, Idno ) Values (5,     'MAY',             'MAY',      2)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Month_Head(Month_IdNo, Month_Name, Month_ShortName, Idno ) Values (6,     'JUNE',            'JUN',      3)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Month_Head(Month_IdNo, Month_Name, Month_ShortName, Idno ) Values (7,     'JULY',            'JUL',      4)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Month_Head(Month_IdNo, Month_Name, Month_ShortName, Idno ) Values (8,     'AUGUST',          'AUG',      5)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Month_Head(Month_IdNo, Month_Name, Month_ShortName, Idno ) Values (9,     'SEPTEMBER',       'SEP',      6)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Month_Head(Month_IdNo, Month_Name, Month_ShortName, Idno ) Values (10,     'OCTOBER',        'OCT',      7)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Month_Head(Month_IdNo, Month_Name, Month_ShortName, Idno ) Values (11,     'NOVEMBER',       'NOV',      8)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Month_Head(Month_IdNo, Month_Name, Month_ShortName, Idno ) Values (12,     'DECEMBER',       'DEC',      9)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Month_Head(Month_IdNo, Month_Name, Month_ShortName, Idno ) Values (1,     'JANUARY',         'JAN',      10)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Month_Head(Month_IdNo, Month_Name, Month_ShortName, Idno ) Values (2,     'FEBRUARY',        'FEB',      11)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Month_Head(Month_IdNo, Month_Name, Month_ShortName, Idno ) Values (3,     'MARCH',           'MAR',      12)"
        cmd.ExecuteNonQuery()

    End Sub
    Public Shared Sub Default_TaxHead_Updation(ByVal Cn1 As SqlClient.SqlConnection)
        Dim cmd As New SqlClient.SqlCommand

        cmd.Connection = Cn1

        cmd.CommandText = "delete from Tax_Head"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Tax_Head(Tax_IdNo, Tax_Name, Sur_Name, Tax_Ledger_Ac_IdNo) Values (0,   '',     '', 0)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Tax_Head(Tax_IdNo, Tax_Name, Sur_Name, Tax_Ledger_Ac_IdNo) Values (1,   'CGST',     'CGST', 24)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Tax_Head(Tax_IdNo, Tax_Name, Sur_Name, Tax_Ledger_Ac_IdNo) Values (2,   'SGST',     'SGST', 25)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Tax_Head(Tax_IdNo, Tax_Name, Sur_Name, Tax_Ledger_Ac_IdNo) Values (3,   'IGST',     'IGST', 26)"
        cmd.ExecuteNonQuery()
    End Sub

    Public Shared Sub Default_ClothType_Updation(ByVal Cn1 As SqlClient.SqlConnection)
        Dim cmd As New SqlClient.SqlCommand

        cmd.Connection = Cn1

        cmd.CommandText = "delete from ClothType_Head where ClothType_IdNo <= 5"
        cmd.ExecuteNonQuery()

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1018" Then '---- M.K Textiles (Palladam)
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName) Values (0,   '',             ''      )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName) Values (1,   'AB',        'AB'  )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (2,  'C',      'C')"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (3,  'SECONDS',         'ªêè‡†v' )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (4,  'BITS',       'èN¾'   )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (5,  'OTHERS',       'Þîó'   )"
            cmd.ExecuteNonQuery()

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1055" Then '---- Srinivasa Cotton Fabrics (Avinashi)

            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName) Values (0,   '',             ''      )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName) Values (1,   'SOUND',        'ê¾‡†'  )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (2,  'SOUND II',      'ªêè‡†v 2')"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (3,  'BITS',         'îQ óè‹' )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (4,  'REJECT',       'èN¾'   )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (5,  'OTHERS',       'Þîó'   )"
            cmd.ExecuteNonQuery()


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1267" Then '---- BRT TEXTILES(SOMANUR)
            'cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName) Values (0,   '',             ''  )"
            'cmd.ExecuteNonQuery()
            'cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName) Values (1,   'A',            'ê¾‡†'  )"
            'cmd.ExecuteNonQuery()
            'cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (2,  'B',            'ê¾‡†'  )"
            'cmd.ExecuteNonQuery()
            ''cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (3,  '' ,            ''   )"
            ''cmd.ExecuteNonQuery()
            'cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (4,  'REJECT',      'èN¾'   )"
            'cmd.ExecuteNonQuery()
            'cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (5,  'BITS',         'èN¾'   )"
            'cmd.ExecuteNonQuery()

            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName) Values (0,   '',             ''  )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName) Values (1,   'A',            'ê¾‡†'  )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (2,  'B',            'ê¾‡†'  )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (3,  'C 30+',        'ªêè‡†v'   )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (4,  'C 10-30',      'ªêè‡†v'   )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (5,  'BITS',         'èN¾'   )"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "delete from ClothType_App_Head where ClothType_App_IdNo <= 5"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Insert into ClothType_App_Head(ClothType_App_IdNo, ClothType_App_Name) Values (0,   '' )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_App_Head(ClothType_App_IdNo, ClothType_App_Name) Values (1,   'A' )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_App_Head(ClothType_App_IdNo, ClothType_App_Name) Values (2,  'B' )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_App_Head(ClothType_App_IdNo, ClothType_App_Name) Values (3,  'C' )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_App_Head(ClothType_App_IdNo, ClothType_App_Name) Values (4,  'REJECT' )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_App_Head(ClothType_App_IdNo, ClothType_App_Name) Values (5,  'BITS' )"
            cmd.ExecuteNonQuery()

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1301" Then '---- IEL FINEX PRIVATE LTD (OR) NST (TIRUPUR)(ERODE) (CHIDHAMBARAM)
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName) Values (0,   '',             ''  )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName) Values (1,   'I',            ''  )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (2,  'II',            ''   )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (3,  '20-40',        ''   )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (4,  '10-19',      ''   )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (5,  '1-9',         ''   )"
            cmd.ExecuteNonQuery()

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1464" Then '---- MANI OMEGA FABRICS (THIRUCHENKODU)

            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName) Values (0,   '',             ''      )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName) Values (1,   'SOUND',        'ê¾‡†'  )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (2,  'LESS',      'ªêè‡†v')"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (3,  'BITS',         'îQ óè‹' )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (4,  'REJECT',       'èN¾'   )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (5,  'OTHERS',       'Þîó'   )"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "delete from ClothType_App_Head where ClothType_App_IdNo <= 5"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Insert into ClothType_App_Head(ClothType_App_IdNo, ClothType_App_Name) Values (0,   '' )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_App_Head(ClothType_App_IdNo, ClothType_App_Name) Values (1,   'SOUND' )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_App_Head(ClothType_App_IdNo, ClothType_App_Name) Values (2,  'LESS' )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_App_Head(ClothType_App_IdNo, ClothType_App_Name) Values (3,  'BITS' )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_App_Head(ClothType_App_IdNo, ClothType_App_Name) Values (4,  'REJECT' )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_App_Head(ClothType_App_IdNo, ClothType_App_Name) Values (5,  'OTHERS' )"
            cmd.ExecuteNonQuery()

        Else

            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName) Values (0,   '',             ''      )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName) Values (1,   'SOUND',        'ê¾‡†'  )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (2,  'SECONDS',      'ªêè‡†v')"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (3,  'BITS',         'îQ óè‹' )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (4,  'REJECT',       'èN¾'   )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName ) Values (5,  'OTHERS',       'Þîó'   )"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "delete from ClothType_App_Head where ClothType_App_IdNo <= 5"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Insert into ClothType_App_Head(ClothType_App_IdNo, ClothType_App_Name) Values (0,   '' )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_App_Head(ClothType_App_IdNo, ClothType_App_Name) Values (1,   'SOUND' )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_App_Head(ClothType_App_IdNo, ClothType_App_Name) Values (2,  'SECONDS' )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_App_Head(ClothType_App_IdNo, ClothType_App_Name) Values (3,  'BITS' )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_App_Head(ClothType_App_IdNo, ClothType_App_Name) Values (4,  'REJECT' )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into ClothType_App_Head(ClothType_App_IdNo, ClothType_App_Name) Values (5,  'OTHERS' )"
            cmd.ExecuteNonQuery()

        End If


        cmd.Dispose()


    End Sub
    Public Shared Sub Default_Variety_Updation(ByVal Cn1 As SqlClient.SqlConnection)
        Dim cmd As New SqlClient.SqlCommand
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim NoofRec As Integer = 0

        Da = New SqlClient.SqlDataAdapter("select count(*) from Variety_Head where Variety_IdNo > 0 and Variety_IdNo <= 10", Cn1)
        Dt1 = New DataTable
        Da.Fill(Dt1)
        NoofRec = 0
        If Dt1.Rows.Count > 0 Then
            If IsDBNull(Dt1.Rows(0)(0).ToString) = False Then
                NoofRec = Val(Dt1.Rows(0)(0).ToString)
            End If
        End If
        Dt1.Clear()

        If NoofRec = 0 Then
            cmd.Connection = Cn1

            cmd.CommandText = "delete from Variety_Head"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Insert into Variety_Head ( Variety_IdNo, Variety_Name , Sur_Name ) Values (0,   '' , '')"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into Variety_Head ( Variety_IdNo, Variety_Name , Sur_Name) Values (1,   'WASTE' , 'WASTE')"
            cmd.ExecuteNonQuery()

        End If

        cmd.Dispose()
        Dt1.Dispose()
        Da.Dispose()

    End Sub
    Public Shared Sub Default_YarnType_Updation(ByVal Cn1 As SqlClient.SqlConnection)
        Dim cmd As New SqlClient.SqlCommand

        cmd.Connection = Cn1

        cmd.CommandText = "delete from YarnType_Head"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into YarnType_Head(Yarn_Type) Values ('')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into YarnType_Head(Yarn_Type) Values ('BABY')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into YarnType_Head(Yarn_Type) Values ('MILL')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into YarnType_Head(Yarn_Type) Values ('R/W')"
        cmd.ExecuteNonQuery()

    End Sub

    Public Shared Sub Default_Shift_Updation(ByVal Cn1 As SqlClient.SqlConnection)
        Dim cmd As New SqlClient.SqlCommand

        cmd.Connection = Cn1

        cmd.CommandText = "delete from Shift_Head"
        cmd.ExecuteNonQuery()


        cmd.CommandText = "Insert into Shift_Head(Shift_IdNo, Shift_Name) Values (0, '')"
        cmd.ExecuteNonQuery()

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1464" Then '---- MANI OMEGA FABRICS (THIRUCHENKODU)

            cmd.CommandText = "Insert into Shift_Head(Shift_IdNo, Shift_Name) Values (6, 'A')"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Insert into Shift_Head(Shift_IdNo, Shift_Name) Values (7, 'B')"
            cmd.ExecuteNonQuery()

        Else

            cmd.CommandText = "Insert into Shift_Head(Shift_IdNo, Shift_Name) Values (1, '1ST SHIFT')"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Insert into Shift_Head(Shift_IdNo, Shift_Name) Values (2, '2ND SHIFT')"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Insert into Shift_Head(Shift_IdNo, Shift_Name) Values (3, '3RD SHIFT')"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Insert into Shift_Head(Shift_IdNo, Shift_Name) Values (4, 'DAY')"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Insert into Shift_Head(Shift_IdNo, Shift_Name) Values (5, 'NIGHT')"
            cmd.ExecuteNonQuery()

        End If




    End Sub

    Public Shared Sub Default_Salary_PaymentType_Head_Updation(ByVal Cn1 As SqlClient.SqlConnection)
        Dim cmd As New SqlClient.SqlCommand
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim NoofRec As Integer = 0

        NoofRec = 0
        Da = New SqlClient.SqlDataAdapter("select count(*) from PayRoll_Salary_Payment_Type_Head where Salary_Payment_Type_IdNo = 1 or Salary_Payment_Type_IdNo = 2", Cn1)
        Dt1 = New DataTable
        Da.Fill(Dt1)
        NoofRec = 0
        If Dt1.Rows.Count > 0 Then
            If IsDBNull(Dt1.Rows(0)(0).ToString) = False Then
                NoofRec = Val(Dt1.Rows(0)(0).ToString)
            End If
        End If
        Dt1.Clear()

        If NoofRec = 0 Then

            cmd.Connection = Cn1

            cmd.CommandText = "delete from PayRoll_Salary_Payment_Type_Head where Salary_Payment_Type_IdNo = 1 or Salary_Payment_Type_IdNo = 2"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into PayRoll_Salary_Payment_Type_Head(Salary_Payment_Type_IdNo, Salary_Payment_Type_Name, Sur_Name, Monthly_Weekly) Values (1,   'WEEKLY',     'WEEKLY',    'WEEKLY' )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into PayRoll_Salary_Payment_Type_Head(Salary_Payment_Type_IdNo, Salary_Payment_Type_Name, Sur_Name, Monthly_Weekly) Values (2,   'MONTHLY',     'MONTHLY',    'MONTHLY' )"
            cmd.ExecuteNonQuery()

        End If

        cmd.Dispose()
        Dt1.Dispose()
        Da.Dispose()

    End Sub

    Public Shared Sub Default_GST_Account_Settings_Head_Updation(ByVal Cn1 As SqlClient.SqlConnection)
        Dim cmd As New SqlClient.SqlCommand
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim NoofRec As Integer = 0

        NoofRec = 0
        Da = New SqlClient.SqlDataAdapter("select count(*) from [GST_AccountSettings_Head] where [GST_Settings_IdNo] > 0 and [GST_Settings_IdNo] <= 4", Cn1)
        Dt1 = New DataTable
        Da.Fill(Dt1)
        NoofRec = 0
        If Dt1.Rows.Count > 0 Then
            If IsDBNull(Dt1.Rows(0)(0).ToString) = False Then
                NoofRec = Val(Dt1.Rows(0)(0).ToString)
            End If
        End If
        Dt1.Clear()

        If NoofRec = 0 Then

            cmd.Connection = Cn1

            cmd.CommandText = "delete from GST_AccountSettings_Head"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "INSERT INTO [GST_AccountSettings_Head] ( [GST_Settings_IdNo] ,[GST_Percentage] ,[IP_CGST_Ac_IdNo] ,[IP_SGST_Ac_IdNo] ,[IP_IGST_Ac_IdNo] ,[OP_CGST_Ac_IdNo] ,[OP_SGST_Ac_IdNo] ,[OP_IGST_Ac_IdNo] ,[RC_CGST_Ac_IdNo] ,[RC_SGST_Ac_IdNo] ,[RC_IGST_Ac_IdNo] ,[PA_CGST_Ac_IdNo] ,[PA_SGST_Ac_IdNo] ,[PA_IGST_Ac_IdNo] ) VALUES (1, 5,  24, 25, 26,  24, 25, 26,  24, 25, 26,  24, 25, 26)"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "INSERT INTO [GST_AccountSettings_Head] ( [GST_Settings_IdNo] ,[GST_Percentage] ,[IP_CGST_Ac_IdNo] ,[IP_SGST_Ac_IdNo] ,[IP_IGST_Ac_IdNo] ,[OP_CGST_Ac_IdNo] ,[OP_SGST_Ac_IdNo] ,[OP_IGST_Ac_IdNo] ,[RC_CGST_Ac_IdNo] ,[RC_SGST_Ac_IdNo] ,[RC_IGST_Ac_IdNo] ,[PA_CGST_Ac_IdNo] ,[PA_SGST_Ac_IdNo] ,[PA_IGST_Ac_IdNo] ) VALUES (2, 12,  24, 25, 26,  24, 25, 26,  24, 25, 26,  24, 25, 26)"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "INSERT INTO [GST_AccountSettings_Head] ( [GST_Settings_IdNo] ,[GST_Percentage] ,[IP_CGST_Ac_IdNo] ,[IP_SGST_Ac_IdNo] ,[IP_IGST_Ac_IdNo] ,[OP_CGST_Ac_IdNo] ,[OP_SGST_Ac_IdNo] ,[OP_IGST_Ac_IdNo] ,[RC_CGST_Ac_IdNo] ,[RC_SGST_Ac_IdNo] ,[RC_IGST_Ac_IdNo] ,[PA_CGST_Ac_IdNo] ,[PA_SGST_Ac_IdNo] ,[PA_IGST_Ac_IdNo] ) VALUES (3, 18,  24, 25, 26,  24, 25, 26,  24, 25, 26,  24, 25, 26)"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "INSERT INTO [GST_AccountSettings_Head] ( [GST_Settings_IdNo] ,[GST_Percentage] ,[IP_CGST_Ac_IdNo] ,[IP_SGST_Ac_IdNo] ,[IP_IGST_Ac_IdNo] ,[OP_CGST_Ac_IdNo] ,[OP_SGST_Ac_IdNo] ,[OP_IGST_Ac_IdNo] ,[RC_CGST_Ac_IdNo] ,[RC_SGST_Ac_IdNo] ,[RC_IGST_Ac_IdNo] ,[PA_CGST_Ac_IdNo] ,[PA_SGST_Ac_IdNo] ,[PA_IGST_Ac_IdNo] ) VALUES (4, 28,  24, 25, 26,  24, 25, 26,  24, 25, 26,  24, 25, 26)"
            cmd.ExecuteNonQuery()

        End If

        cmd.Dispose()
        Dt1.Dispose()
        Da.Dispose()

    End Sub
    Public Shared Sub Default_Master_Updation(ByVal Cn1 As SqlClient.SqlConnection)
        Dim Cn2 As New SqlClient.SqlConnection
        Dim cmd As New SqlClient.SqlCommand
        Dim Dat As Date

        On Error Resume Next

        If Trim(Common_Procedures.ConnectionString_CompanyGroupdetails) <> "" Then

            Cn2 = New SqlClient.SqlConnection(Common_Procedures.ConnectionString_CompanyGroupdetails)

            Cn2.Open()

            cmd.Connection = Cn2

            cmd.CommandText = "Delete from User_Head where user_idno = 0"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Insert into User_Head(User_IdNo, User_Name, Sur_Name, Account_Password, UnAccount_Password) values (0, '', '', '', '') "
            cmd.ExecuteNonQuery()

            Cn2.Close()
            Cn2.Dispose()

        End If

        cmd.Connection = Cn1

        Dat = #1/1/2000#
        cmd.Parameters.Clear()
        cmd.Parameters.AddWithValue("@EntryDate", Dat.ToShortDateString)

        cmd.CommandText = "delete from Sizing_JobCard_Head where Sizing_JobCard_Code = ''"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Sizing_JobCard_Head (Sizing_JobCard_Code,  Sizing_JobCode_forSelection  ,  Company_IdNo ,  Sizing_JobCard_No  ,  for_OrderBy,  Sizing_JobCard_Date  , ledger_idno, Loom_Type_idno , ends_name  , Beam_Length , Wrap_Length , Sizing_Length , Remarks  , Beam_Requirement_Date) " &
                                                      " Values ( ''            ,         ''                    ,       0       ,        ''           ,     0       ,     @EntryDate        ,    0       ,       0        ,     0      ,      0      ,    0        ,      0        ,    ''   ,     @EntryDate        ) "
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Weaving_JobCard_Head where Weaving_JobCard_Code = ''"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "insert into Weaving_JobCard_Head ( Weaving_JobCard_Code , Company_IdNo, Weaving_JobCard_No, for_OrderBy, Weaving_JobCard_Date, Ledger_IdNo, Cloth_IdNo, WarpCount_IdNo, WeftCount_IdNo, EndsCount_IdNo, Slevedge_IdNo , DeliveryTo_IdNo, Transport_IdNo , Sizing_IdNo , Weaving_JobCode_forSelection, Ends_Per_Inch , Pick_Per_Inch ) " &
                                       " Values             (    ''                ,        0    ,      ''           ,        0   ,         @EntryDate  ,     0      ,       0   ,       0       ,             0 ,             0 ,             0 ,        0       ,         0      ,          0  ,      ''                     ,      0        ,     0         ) "
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Weaver_Running_Fabrics_Head where Weaver_Running_Fabrics_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Weaver_Running_Fabrics_Head (    Weaver_Running_Fabrics_IdNo  , Weaver_IdNo , Weaver_Running_Fabrics_date, StartDate  ,  EndDate    , Particulars ,  Close_Status  , datetime_text ,  Startdate_text ,  Enddate_text , StartDate_EndDate_Particulars_for_Selection ) " &
                                  " Values                                 ( 0                       ,    0        ,       @EntryDate           ,  @EntryDate,   @EntryDate,     ''      ,      0         ,      ''       ,       ''        ,        ''     ,      ''                                     ) "
        cmd.ExecuteNonQuery()


        cmd.CommandText = "delete from ClothSales_Order_Head where ClothSales_Order_Code = '999999/00-00'"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into ClothSales_Order_Head ( ClothSales_Order_Code , Company_IdNo , ClothSales_Order_No , for_OrderBy, ClothSales_Order_Date, Ledger_IdNo, Party_OrderNo ,  Through_Name , Agent_IdNo , Agent_Comm_Perc , Agent_Comm_Type , Despatch_To  , Transport_IdNo  ,  Delivery_Address1 , Delivery_Address2 ,  Note  , Total_Bales , Total_Pcs  , Total_Order_Meters  , Total_Cancel_Meters, Total_AMount  ,  User_idNo  , Gr_Time ,  Gr_Date ,  Selection_Type ,  Payment_Terms  , Verified_Status , DeliveryTo_idno ,  ClothSales_OrderCode_forSelection    ) " &
                " Values                                     (  '999999/00-00'       ,      0       ,         ''          ,     0      ,       @EntryDate     ,      0     ,   ''          ,     ''        ,     0      ,       0         ,         ''      ,     ''       ,        0        ,          ''        ,       ''          ,    ''  ,     0       ,      0     ,          0          ,          0         ,       0       ,      0      ,    0    ,     ''   ,        ''       ,         ''      ,           0     ,          0      ,                 ''                    ) "
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Yarn_Lot_Head where Entry_ReferenceCode = '999999/00-00'"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Yarn_Lot_Head (          Entry_ReferenceCode , Company_IdNo ,  Reference_No , for_OrderBy , Reference_Date, LotCode_ForSelection ,  Lot_No , forOrderBy_LotNo,  Weight ,  Rate ) " &
                                        "     Values         ( '999999/00-00'       ,     0        ,        ''     ,      0      ,  @EntryDate   ,          ''          ,     ''  ,          0      ,    0    ,   0   ) "
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Packing_Slip_Head where Packing_Slip_Code = ''"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "delete from Packing_Slip_Head where Packing_Slip_Code = '999999/00-00'"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Packing_Slip_Head ( Packing_Slip_Code, Company_IdNo , Packing_Slip_PrefixNo , Packing_Slip_RefNo , Packing_Slip_SuffixNo ,  Packing_Slip_No  , for_OrderBy , Packing_Slip_Date,  Cloth_IdNo , ClothType_IdNo , Bale_Bundle ,  Folding , Total_Pcs , Total_Meters , Total_Weight,  Note , Ledger_IdNo , User_IdNo , WareHouse_IdNo ,  BaleGroup_IdNo , Verified_Status , Net_Weight , Tare_Weight , Gross_Weight  , Bale_Close_Sts ) " &
                                  " Values               (    '999999/00-00',      0       ,     ''                ,       ''           ,    '<BLANK>'          ,        ''         ,      0      ,      @EntryDate  ,     0       ,       0        ,      ''     ,     0    ,     0     ,      0       ,     0       ,    '' ,     0       ,    0      ,     0          ,       0         ,      0          , 0          ,     0       ,        0      ,     0           ) "
        cmd.ExecuteNonQuery()

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1155" Then
            cmd.CommandText = "Insert into Sizing_Machine_No_Head ( Sizing_Machine_No_Idno, Sizing_Machine_No_Name, Surname) values (101, 'A', 'A')"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into Sizing_Machine_No_Head ( Sizing_Machine_No_Idno, Sizing_Machine_No_Name, Surname) values (102, 'B', 'B')"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into Sizing_Machine_No_Head ( Sizing_Machine_No_Idno, Sizing_Machine_No_Name, Surname) values (103, 'C', 'C')"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into Sizing_Machine_No_Head ( Sizing_Machine_No_Idno, Sizing_Machine_No_Name, Surname) values (104, 'D', 'D')"
            cmd.ExecuteNonQuery()
        End If

        cmd.CommandText = "delete from Cloth_BitsGroup_Head where Cloth_BitsGroup_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Cloth_BitsGroup_Head(Cloth_BitsGroup_IdNo, Cloth_BitsGroup_Name, Sur_Name) Values (0,   '',     '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Checking_TableNo_Head where Checking_Table_Idno = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Checking_TableNo_Head(Checking_Table_Idno, Checking_Table_no, Sur_Name) Values (0,   '',     '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Marketting_Executive_Head where Marketting_Executive_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Marketting_Executive_Head(Marketting_Executive_IdNo, Marketting_Executive_Name, Sur_Name) Values (0,   '',     '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Mode_Of_Payment_Head where IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Mode_Of_Payment_Head(IdNo, Name) Values (0,   '')"
        cmd.ExecuteNonQuery()


        cmd.CommandText = "delete from Mode_Of_Payment_Head where IdNo = 1"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Mode_Of_Payment_Head(IdNo, Name) Values (1,   'Cheque/DD')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Mode_Of_Payment_Head where IdNo = 2"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Mode_Of_Payment_Head(IdNo, Name) Values (2,   'RTGS')"
        cmd.ExecuteNonQuery()


        cmd.CommandText = "delete from Mode_Of_Payment_Head where IdNo = 3"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Mode_Of_Payment_Head(IdNo, Name) Values (3,   'Cash')"
        cmd.ExecuteNonQuery()



        cmd.CommandText = "delete from Mode_Of_Payment_Head where IdNo = 4"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Mode_Of_Payment_Head(IdNo, Name) Values (4,   'Debit Entry - Others')"
        cmd.ExecuteNonQuery()


        cmd.CommandText = "delete from Mode_Of_Payment_Head where IdNo = 5"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Mode_Of_Payment_Head(IdNo, Name) Values (5,   'Credit Entry - Others')"
        cmd.ExecuteNonQuery()



        cmd.CommandText = "delete from Mode_Of_Payment_Head where IdNo = 6"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Mode_Of_Payment_Head(IdNo, Name) Values (6,   'Advance Paid - Bank')"
        cmd.ExecuteNonQuery()



        cmd.CommandText = "delete from Mode_Of_Payment_Head where IdNo = 7"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Mode_Of_Payment_Head(IdNo, Name) Values (7,   'Advance Paid - Cash')"
        cmd.ExecuteNonQuery()



        cmd.CommandText = "delete from Mode_Of_Payment_Head where IdNo = 8"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Mode_Of_Payment_Head(IdNo, Name) Values (8,   'Advance Deduction')"
        cmd.ExecuteNonQuery()


        cmd.CommandText = "delete from Mode_Of_Payment_Head where IdNo = 9"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Mode_Of_Payment_Head(IdNo, Name) Values (9,   'Deposit Paid - Bank')"
        cmd.ExecuteNonQuery()



        cmd.CommandText = "delete from Mode_Of_Payment_Head where IdNo = 10"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Mode_Of_Payment_Head(IdNo, Name) Values (10,   'Deposit Paid - Cash')"
        cmd.ExecuteNonQuery()


        cmd.CommandText = "delete from Mode_Of_Payment_Head where IdNo = 11"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Mode_Of_Payment_Head(IdNo, Name) Values (11,   'Deposit A/C')"
        cmd.ExecuteNonQuery()




        cmd.CommandText = "delete from Mode_Of_Payment_Head where IdNo = 12"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Mode_Of_Payment_Head(IdNo, Name) Values (12,   'Canteen')"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "delete from Sizing_Item_Head where Item_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Sizing_Item_Head(Item_IdNo, Item_Name, Sur_Name) Values (0,   '',     '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Ledger_Head where Ledger_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_Head(Ledger_IdNo, Ledger_Name, Sur_Name, Ledger_MainName, Ledger_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Ledger_Type, Ledger_Address1, Ledger_Address2, Ledger_Address3, Ledger_Address4, Ledger_TinNo, Ledger_CstNo ) Values (0,   '',   '',   '',     '',     0,      0,      '',     '',     '',     '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Ledger_AlaisHead where Ledger_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_AlaisHead(Ledger_IdNo, Sl_No, Ledger_DisplayName, Ledger_Type, AccountsGroup_IdNo ) Values (0,      0,     '',        '',         0)"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Ledger_PhoneNo_Head where Ledger_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Ledger_PhoneNo_Head(Ledger_IdNo, Sl_No, Ledger_PhoneNo) Values (0,      0,     '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from AccountsGroup_Head where AccountsGroup_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into AccountsGroup_Head(AccountsGroup_IdNo, AccountsGroup_Name, Sur_Name, Parent_Name, Indicate, Parent_Idno, Carried_Balance, Order_Position, TallyName, TallySubName ) Values (0, '',          '',       '',    0, '',       0,  0,      '',                         ''      )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Company_Head where Company_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Company_Head(Company_IdNo, Company_Name, Company_SurName, Company_ShortName, Company_Address1, Company_Address2, Company_Address3, Company_Address4, Company_City, Company_PinCode, Company_PhoneNo, Company_TinNo, Company_CstNo, Company_FaxNo, Company_EMail, Company_ContactPerson, Company_Description) Values (0,      '',     '',     '',     '',     '',     '',     '',     '',     '',     '',     '',     '',     '',     '',     '',     '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Processed_Item_Head where Processed_Item_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Processed_Item_Head ( Processed_Item_IdNo, Processed_Item_DisplaySlNo, Processed_Item_Type, Processed_Item_Name, Sur_Name, Processed_Item_Code, Processed_ItemGroup_IdNo, Unit_IdNo ) Values (0,   0,       '',     '',     '',     '',     0,     0)"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from ItemGroup_Head where ItemGroup_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into ItemGroup_Head(ItemGroup_IdNo, ItemGroup_Name, Sur_Name) Values (0,   '',     '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Variety_Head where Variety_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Variety_Head(Variety_IdNo, Variety_Name, Sur_Name) Values (0,   '',     '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Area_Head where Area_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Area_Head(Area_IdNo, Area_Name, Sur_Name) Values (0,   '',     '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Process_Head where Process_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Process_Head(Process_IdNo, Process_Name, Sur_Name) Values (0,   '',     '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Count_Head where Count_IdNo= 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Count_Head(Count_IdNo, Count_Name, Sur_Name, Count_Description, Count_StockUnder_IdNo, Resultant_Count) Values (0,  '',  '',  0,  0,  0)"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from EndsCount_Head where EndsCount_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into EndsCount_Head(EndsCount_IdNo , EndsCount_Name, Sur_Name, Ends_Name, Count_IdNo, Rate) Values (0,  '',  '',  0,  0,  0)"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from ClothType_Head where ClothType_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into ClothType_Head(ClothType_IdNo, ClothType_Name, ClothType_TamilName) Values (0,  '',  '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Cloth_Head where Cloth_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Cloth_Head(Cloth_IdNo, Cloth_Name, Sur_Name, ClothMain_name, Cloth_WarpCount_IdNo, Cloth_WeftCount_IdNo, Close_Status) Values (0,  '',  '', '', 0, 0, 0)"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from YarnType_Head where Yarn_Type = ''"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into YarnType_Head(Yarn_Type) Values ('')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Mill_Head where Mill_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Mill_Head(MIll_IdNo, Mill_Name, Sur_Name) Values (0,   '',     '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Loom_Head where Loom_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Loom_Head(Loom_IdNo, Loom_Name, Sur_Name) Values (0,   '',     '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Processed_Item_SalesName_Head where Processed_Item_SalesIdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Processed_Item_SalesName_Head(Processed_Item_SalesIdNo, Processed_Item_SalesName, Sur_Name) Values (0,   '',     '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Lot_Head where Lot_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Lot_Head(Lot_IdNo, Lot_No, Sur_Name, Lot_Description) Values (0,   '',     '',   '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Unit_Head where Unit_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Unit_Head(Unit_IdNo, Unit_Name, Sur_Name) Values (0,   '',     '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Party_Category_Head where Party_Category_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Party_Category_Head(Party_Category_IdNo, Party_Category_Name, Sur_Name) Values (0,   '',     '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Contact_Designation_Head where Contact_Designation_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Contact_Designation_Head(Contact_Designation_IdNo, Contact_Designation_Name, Sur_Name) Values (0,   '',     '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Rack_Head where Rack_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Rack_Head(Rack_IdNo, Rack_No, Sur_Name) Values (0,   '',     '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Shift_Head where Shift_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Shift_Head ( Shift_IdNo , Shift_Name ) Values (0,   '' )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Stock_SizedPavu_Processing_Details where Reference_Code = ''"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Stock_SizedPavu_Processing_Details ( Reference_Code , company_idno, Reference_No, For_OrderBy, Reference_Date, Ledger_IdNo, StockAt_IdNo, Set_Code, Set_No, setcode_forSelection, Ends_Name, Count_IdNo, EndsCount_IdNo, Sl_No, Beam_No, Meters ) " &
                            "          Values                             (       ''       ,   0         ,        ''   ,       0    ,   @EntryDate  ,      0     ,       0     ,    ''   ,    '' ,         ''          ,      ''  ,       0   ,       0       ,    0  ,   ''  ,    0   ) "
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Colour_Head where Colour_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Colour_Head ( Colour_IdNo , Colour_Name, Sur_Name ) Values (0,   '', '' )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from BorderSize_Head where BorderSize_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into BorderSize_Head ( BorderSize_IdNo, BorderSize_Name, Sur_Name ) Values (0,   '',    '' )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Employee_Head where Employee_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Employee_Head ( Employee_IdNo, Employee_Name, Sur_Name ) Values (0,   '',    '' )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Article_Head where Article_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Article_Head ( Article_IdNo, Article_Name, Sur_Name ) Values (0,   '',    '' )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Size_Head where Size_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Size_Head(Size_IdNo, Size_Name, Sur_Name) Values (0,   '',     '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Currency_Head where Currency_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Currency_Head(Currency_IdNo, Currency_Name, Sur_Name) Values (0,   '',     '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Brand_Head where Brand_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Brand_Head ( Brand_IdNo, Brand_Name, Sur_Name ) Values (0,   '',    '' )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Department_Head where Department_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into department_Head ( Department_IdNo, Department_Name, Sur_Name ) Values (0,   '',    '' )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Stores_Item_Head where Item_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Stores_item_Head ( Item_IdNo, Item_Name, Sur_Name, Item_DisplayName, Item_Code, Item_Type, Department_IdNo, Drawing_No, ReedCount_IdNo, ReedWidth_IdNo, Unit_IdNo, Minimum_Stock, Tax_Percentage, Rate , ReOrder_Quantity ) " &
                            "          Values           (      0   ,     ''   ,    ''   ,         ''      ,      ''  ,      ''   ,        0      ,     ''    ,          0    ,        0      ,      0   ,        0     ,        0      ,   0  ,      0           ) "
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Stores_Item_AlaisHead where Item_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Stores_Item_AlaisHead ( Item_IdNo, Sl_No, Item_DisplayName, Sur_Name, Department_IdNo, Drawing_No ) Values (0,   0,   '',    '' , 0 , '' )"
        cmd.ExecuteNonQuery()


        cmd.CommandText = "delete from PayRoll_Salary_Payment_Type_Head where Salary_Payment_Type_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into PayRoll_Salary_Payment_Type_Head(Salary_Payment_Type_IdNo, Salary_Payment_Type_Name, Sur_Name, Monthly_Weekly) Values (0,   '',     '',    '' )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Yarn_Purchase_Receipt_Head where Yarn_Purchase_Receipt_Code = ''"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Yarn_Purchase_Receipt_Head ( Yarn_Purchase_Receipt_Code                 , company_idno, Yarn_Purchase_Receipt_No, For_OrderBy, Yarn_Purchase_Receipt_Date, Ledger_IdNo, Vechile_No, Transport_IdNo ) " &
                            "          Values                             (       ''       ,   0         ,        ''   ,       0         ,   @EntryDate  ,      0     ,     ''        ,    0   ) "
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Vendor_Head where Vendor_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Vendor_Head(Vendor_IdNo, Vendor_Name, Sur_Name, Vendor_MainName, Vendor_AlaisName, Area_IdNo, AccountsGroup_IdNo, Parent_Code, Bill_Type, Vendor_Type, Vendor_Address1, Vendor_Address2, Vendor_Address3, Vendor_Address4, Vendor_TinNo, Vendor_CstNo ) Values (0,   '',   '',   '',     '',     0,      0,      '',     '',     '',     '',     '',     '',     '',     '',     ''  )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Vendor_AlaisHead where Vendor_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Vendor_AlaisHead(Vendor_IdNo, Sl_No, Vendor_DisplayName) Values (0,      0,     '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Tax_Head where Tax_IdNo = 0"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into Tax_Head(Tax_IdNo, Tax_Name, Sur_Name, Tax_Ledger_Ac_IdNo) Values (0,   '',     '', 0)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "delete from ClothSet_Head where Clothset_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into ClothSet_Head ( ClothSet_IdNo, ClothSet_Name, Sur_Name ) Values (0,   '',    '' )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Bobin_Size_Head where Bobin_Size_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Bobin_Size_Head ( Bobin_Size_IdNo, Bobin_Size_Name, Sur_Name ) Values (0,   '',    '' )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Weaver_Cloth_Receipt_Head where Weaver_ClothReceipt_Code = ''"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Weaver_Cloth_Receipt_Head ( Weaver_ClothReceipt_Code      , company_idno, Weaver_ClothReceipt_No, Weaver_ClothReceipt_RefNo, Weaver_ClothReceipt_SuffixNo, For_OrderBy, Weaver_ClothReceipt_Date , Ledger_IdNo  , Cloth_idno ) " &
                        "          Values                             (       ''       ,             0         ,        ''             ,             ''           ,             ''              ,    0       ,         @EntryDate    ,        0     ,     0) "
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Item_Head where Item_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Item_Head(Item_IdNo, Item_Name, Sur_Name) Values (0,   '',     '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Cloth_Purchase_Head where Cloth_Purchase_Code = ''"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Cloth_Purchase_Head(Cloth_Purchase_Code, Company_IdNo, Cloth_Purchase_No, for_OrderBy, Cloth_Purchase_Date, Ledger_IdNo, Bill_No) Values ('',    0,   '',     0,  @EntryDate,  0, '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Piece_Checking_Defect_head where Piece_Checking_Defect_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Piece_Checking_Defect_head(Piece_Checking_Defect_IdNo, Piece_Checking_Defect_Name, Sur_Name) Values (0,   '',     '')"
        cmd.ExecuteNonQuery()


        cmd.CommandText = "delete from Garments_Price_List_Head where Price_List_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Garments_Price_List_Head(Price_List_IdNo, Price_List_Name, Sur_Name) Values (0,   '',    '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Fibre_Head where Fibre_IdNo= 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Fibre_Head(Fibre_IdNo, Fibre_Name, Sur_Name, HSN_Code, GST_Percentage ) Values (0,  '',  '',  '',  0 )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Slevedge_Head where Slevedge_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Slevedge_Head(Slevedge_IdNo, Slevedge_Name, Sur_Name  ) Values (0,  '',  '' )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Fibre_Lot_Head  where Lot_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Fibre_Lot_Head(Lot_IdNo, LotNo_Name, Sur_Name) Values (0  , '',  '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Stamping_Head where Stamping_IdNo= 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Stamping_Head(Stamping_IdNo, Stamping_Name, Sur_Name ) Values (0,  '',  '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from TipType_Head where TipType_IdNo= 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into TipType_Head(TipType_IdNo, TipType_Name, Sur_Name ) Values (0,  '',  '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Delete From Cone_Type_Head where Cone_Type_Idno = ''"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "insert into Cone_Type_Head(Cone_Type_Idno , Cone_Type_Name , sur_name) Values (0, '', '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from OE_Machine_Head where machine_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into OE_Machine_Head ( Machine_IdNo, Machine_Name, Sur_Name ) Values (0,   '',    '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from OE_Manufacture_Head where Manufacture_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into OE_Manufacture_Head ( Manufacture_IdNo, Manufacture_Name, Sur_Name ) Values (0,   '',    '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from OE_Department_Head where Department_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into OE_Department_Head ( Department_IdNo, Department_Name, Sur_Name ) Values (0,   '',    '' )"
        cmd.ExecuteNonQuery()



        cmd.CommandText = "Delete From Beam_Width_Head where Beam_Width_Idno = ''"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "insert into Beam_Width_Head(Beam_Width_Idno , Beam_Width_Name , sur_name , Beam_Width_Rate) Values (0, '', '', 0)"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from JobWork_yarn_Receipt_Details where JobWork_PavuYarn_Receipt_Code = ''"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "insert into JobWork_yarn_Receipt_Details(JobWork_PavuYarn_Receipt_Code, Company_IdNo, JobWork_PavuYarn_Receipt_REFNo, JobWork_PavuYarn_Receipt_No, for_OrderBy, JobWork_PavuYarn_Receipt_Date, Ledger_IdNo, Sl_No, count_idno, Yarn_Type, Mill_IdNo, Bags, Cones, Weight , Po_No , Weft_Lot_No )" &
                                       "values             (                  ''                 ,         0   ,           ''                  ,            ''              ,        0   ,       0                      ,      0     ,   0  ,     0    ,      ''   ,       0  ,  0  ,  0   ,    0   ,   ''   ,     ''     )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "delete from Checking_Section_Head where Checking_Section_IdNo = 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Checking_Section_Head(Checking_Section_IdNo, Checking_Section_Name, Sur_Name) Values (0,   '',     '')"
        cmd.ExecuteNonQuery()
        cmd.Dispose()

        cmd.Dispose()

    End Sub

    Public Shared Sub Sql_AutoBackUP(ByVal Db_Name As String, ByVal vPENDRV_WARNING_STS As Boolean)
        Dim cn1 As SqlClient.SqlConnection
        Dim cn2 As SqlClient.SqlConnection
        Dim cmd As New SqlClient.SqlCommand
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Fl_Name As String, Fl_Name2 As String, Fl_Name3 As String, Fl_Name4 As String
        Dim ServrNm As String = ""
        Dim ServrPath As String = ""
        Dim ServrAutBckupPath As String = ""
        Dim Nr As Long = 0
        Dim vPENDRV_STS As Boolean = False

        Dim vCLIENTBACKUP_sts As Boolean = False
        Dim vIS_SERVERSHARED_STS As Boolean = False
        Dim ServrAutBckupPenDrivePath As String = ""
        Dim ServrPenDrivePath As String = ""
        Dim vPENDRV_BCKUP_STS As Boolean = True
        Dim vDBBACKUPSZ_in_KB As Long = 0
        Dim vFreeBytes_IN_kb As Long = 0
        Dim vBACKUPDRIVENAME As String = ""

        cn1 = New SqlClient.SqlConnection(Common_Procedures.ConnectionString_Master)
        cn1.Open()

        cmd.Connection = cn1

        vIS_SERVERSHARED_STS = False
        ServrNm = Common_Procedures.get_Server_SystemName()
        'If Trim(UCase(ServrNm)) = Trim(UCase(SystemInformation.ComputerName)) Then
        If is_ServerSystem() = True Then

            Fl_Name = Common_Procedures.AppPath & "\Auto_BackUP"

            If System.IO.Directory.Exists(Fl_Name) = False Then
                System.IO.Directory.CreateDirectory(Fl_Name)
            End If
            If System.IO.Directory.Exists(Fl_Name) = False Then
                Exit Sub
            End If

            Nr = 0
            cmd.CommandText = "Update " & Trim(Common_Procedures.CompanyDetailsDataBaseName) & "..Settings_Head set Autobackup_Path_Server = '" & Trim(Common_Procedures.AppPath) & "'"
            Nr = cmd.ExecuteNonQuery()
            If Nr = 0 Then
                cmd.CommandText = "Insert into " & Trim(Common_Procedures.CompanyDetailsDataBaseName) & "..Settings_Head ( Autobackup_Path_Server ) values ('" & Trim(Common_Procedures.AppPath) & "')"
                cmd.ExecuteNonQuery()
            End If

            cmd.CommandText = "Update " & Trim(Common_Procedures.CompanyDetailsDataBaseName) & "..Settings_Head set Autobackup_PenDrive_Path_Server = ''"
            cmd.ExecuteNonQuery()
        Else

            cn2 = New SqlClient.SqlConnection(Common_Procedures.ConnectionString_CompanyGroupdetails)
            cn2.Open()

            ServrAutBckupPath = Trim(Common_Procedures.get_FieldValue(cn2, "Settings_Head", "Autobackup_Path_Server", ""))
            ServrAutBckupPenDrivePath = Trim(Common_Procedures.get_FieldValue(cn2, "Settings_Head", "Autobackup_PenDrive_Path_Server", ""))

            cn2.Close()
            cn2.Dispose()

            If ServrAutBckupPath = "" Then
                Dim mymsgbox As New Tsoft_MessageBox("Backup preparation from client system failed......" & Chr(13) & "Open software in Server System", "OK,CANCEL", "AUTOBACKUP FAILED FROM CLIENT...", "it is adviced to take autobackup in client system also" & Chr(13) & "Contact System Admin...", MesssageBoxIcons.Exclamations, 1)
                mymsgbox.ShowDialog()

                'MessageBox.Show("Insert a Pendrive in Server to take AutoBackup......, " & Chr(13) & "Software will Close now", "DOES NOT PREPARE AUTOBACKUP...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                If Common_Procedures.vShowEntrance_Status_FromMDI = False And Common_Procedures.vShowEntrance_Status_FromCCupdate = False Then
                    Application.Exit()
                    End
                End If
                Exit Sub
            End If

            ServrPath = ServrAutBckupPath
            If Microsoft.VisualBasic.Left(Trim(ServrPath), 2) <> "\\" Then
                ServrPath = "\\" & Trim(ServrNm) & "\" & Replace(ServrPath, ":", "")
            End If

            If System.IO.Directory.Exists(ServrPath) = False Then

                ServrPath = ServrAutBckupPath
                ServrPath = "\\" & Trim(ServrNm) & "\" & Mid(Trim(ServrPath), 4, Len(Trim(ServrPath)))

                If System.IO.Directory.Exists(ServrPath) = False Then
                    ServrPath = ServrAutBckupPath
                Else
                    vIS_SERVERSHARED_STS = True
                End If

            Else

                vIS_SERVERSHARED_STS = True
            End If

            Fl_Name = Trim(ServrPath) & "\Auto_BackUP"

            ServrPenDrivePath = ServrAutBckupPenDrivePath

            If Microsoft.VisualBasic.Left(Trim(ServrPenDrivePath), 2) <> "\\" Then
                ServrPenDrivePath = "\\" & Trim(ServrNm) & "\" & Replace(ServrPenDrivePath, ":", "")
            End If


            If System.IO.Directory.Exists(ServrPenDrivePath) = False Then

                ServrPenDrivePath = ServrAutBckupPenDrivePath
                ServrPenDrivePath = "\\" & Trim(ServrNm) & "\" & Mid(Trim(ServrPenDrivePath), 4, Len(Trim(ServrPenDrivePath)))

                If System.IO.Directory.Exists(ServrPenDrivePath) = False Then
                    ServrPenDrivePath = ""

                End If
            End If


        End If

        Fl_Name = Trim(Fl_Name) & "\" & Trim(Db_Name) & "_BackUp_" & Trim(Format(Now, "yyyy_MM_dd_hh_mm_tt")) & ".tssl"
        System.Threading.Thread.Sleep(100)

        If Common_Procedures.is_ServerSystem = True Then
            vDBBACKUPSZ_in_KB = get_Database_Backup_Size(Db_Name)
            vBACKUPDRIVENAME = Path.GetPathRoot(Fl_Name)
            vFreeBytes_IN_kb = GetDriveFreespace_in_KB(vBACKUPDRIVENAME)
            If vDBBACKUPSZ_in_KB > vFreeBytes_IN_kb Then
                MessageBox.Show("There is insufficient free disk space on drive " & vBACKUPDRIVENAME & Chr(13) & "Free up some space", "DOES NOT PREPARE AN AUTO-BACKUP...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                Exit Sub
            End If
        End If

        System.Threading.Thread.Sleep(100)

        Try

            cmd.CommandTimeout = 1500

            cmd.CommandText = "BACKUP DATABASE " & Trim(Db_Name) & " TO DISK = '" & Trim(Fl_Name) & "' WITH INIT, CHECKSUM"
            cmd.ExecuteNonQuery()

        Catch ex As Exception

            MessageBox.Show(ex.Message, "SOFTWARE AUTOBACKUP FAILED...", MessageBoxButtons.OKCancel, MessageBoxIcon.Information)
            Application.Exit()
            End

        End Try

        System.Threading.Thread.Sleep(500)
        System.Threading.Thread.Sleep(500)


        'If File.Exists(Fl_Name) = True Then
        '    ZipFile.CreateFromDirecto(FilePath1, FilePath3_ZippedFile)
        'End If

        cmd.Dispose()

        cn1.Close()
        cn1.Dispose()

        Try

            vCLIENTBACKUP_sts = False
            vPENDRV_STS = False

            If is_ServerSystem() = False Then

                If vIS_SERVERSHARED_STS = True Then

                    If Trim(ServrPenDrivePath) <> "" Then
                        If System.IO.Directory.Exists(ServrPenDrivePath) = True Then
                            Fl_Name3 = Trim(ServrPenDrivePath) & "\" & Trim(Db_Name) & "_BackUp_" & Trim(Format(Now, "yyyy_MM_dd_hh_mm_tt")) & ".tssl"

                            vBACKUPDRIVENAME = Path.GetPathRoot(Fl_Name3)
                            vFreeBytes_IN_kb = GetDriveFreespace_in_KB(vBACKUPDRIVENAME)
                            If vDBBACKUPSZ_in_KB > vFreeBytes_IN_kb Then
                                MessageBox.Show("There is insufficient free disk space on PENDRIVE " & vBACKUPDRIVENAME & Chr(13) & "Free up some space", "DOES NOT PREPARE AN AUTO-BACKUP...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                                Exit Sub

                            Else
                                System.IO.File.Copy(Fl_Name, Fl_Name3)
                                vPENDRV_STS = True

                            End If
                        End If

                    End If

                    vCLIENTBACKUP_sts = Sql_AutoBackUP_File_To_Client_Sysytem(Fl_Name, Trim(Db_Name), ServrNm)

                    Sql_AutoBackUP_Delete_Old_Files(Fl_Name, Db_Name)

                End If

            End If

        Catch ex As Exception
            '-----------

        End Try
        Try

            vPENDRV_BCKUP_STS = True
            If is_ServerSystem() = False Then
                If vIS_SERVERSHARED_STS = False Then
                    vPENDRV_BCKUP_STS = False
                End If
            End If

            If vPENDRV_BCKUP_STS = True Then

                Dim allDrives() As DriveInfo = DriveInfo.GetDrives()
                Dim d As DriveInfo

                For Each d In allDrives

                    If d.IsReady = True Then

                        If d.DriveType = DriveType.Removable Then

                            Fl_Name2 = Trim(d.Name) & "TSOFT\Auto_BackUP"

                            If System.IO.Directory.Exists(Fl_Name2) = False Then
                                System.IO.Directory.CreateDirectory(Fl_Name2)
                            End If

                            If System.IO.Directory.Exists(Fl_Name2) = True Then

                                Fl_Name4 = Trim(Fl_Name2) & "\" & Trim(Db_Name) & "_BackUp_" & Trim(Format(Now, "yyyy_MM_dd_hh_mm_tt")) & ".tssl"
                                vBACKUPDRIVENAME = Path.GetPathRoot(Fl_Name4)
                                vFreeBytes_IN_kb = GetDriveFreespace_in_KB(vBACKUPDRIVENAME)
                                If vDBBACKUPSZ_in_KB > vFreeBytes_IN_kb Then
                                    MessageBox.Show("There is insufficient free disk space on PENDRIVE " & vBACKUPDRIVENAME & Chr(13) & "Free up some space", "DOES NOT PREPARE AN AUTO-BACKUP...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                                    Exit Sub

                                Else
                                    System.IO.File.Copy(Fl_Name, Fl_Name4, True)

                                    If is_ServerSystem() = True Then

                                        cn2 = New SqlClient.SqlConnection(Common_Procedures.ConnectionString_CompanyGroupdetails)
                                        cn2.Open()

                                        cmd.Connection = cn2

                                        Nr = 0
                                        cmd.CommandText = "update Settings_Head set Autobackup_PenDrive_Path_Server = '" & Trim(Fl_Name2) & "'"
                                        Nr = cmd.ExecuteNonQuery()
                                        If Nr = 0 Then
                                            cmd.CommandText = "Insert into Settings_Head ( Autobackup_PenDrive_Path_Server ) values ('" & Trim(Fl_Name2) & "')"
                                            cmd.ExecuteNonQuery()
                                        End If

                                        cn2.Close()
                                        cn2.Dispose()

                                    End If
                                    vPENDRV_STS = True

                                End If
                                Sql_AutoBackUP_Delete_Old_Files(Fl_Name2, Db_Name)

                                Exit For

                            End If

                        End If

                    End If

                Next

            End If

            If vPENDRV_WARNING_STS = True Then

                If is_ServerSystem() = False Then

                    If vCLIENTBACKUP_sts = False Then

                        Dim mymsgbox As New Tsoft_MessageBox("AutoBackup in client system failed......", "OK,CANCEL", "AUTOBACKUP FAILED IN CLIENT...", "AutoBackup Prepared in Server, but it is adviced to take autobackup in client system also" & Chr(13) & "Contact System Admin...", MesssageBoxIcons.Exclamations, 1)
                        mymsgbox.ShowDialog()

                        'MessageBox.Show("Insert a Pendrive in Server to take AutoBackup......, " & Chr(13) & "Software will Close now", "DOES NOT PREPARE AUTOBACKUP...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                        If Common_Procedures.vShowEntrance_Status_FromMDI = False And Common_Procedures.vShowEntrance_Status_FromCCupdate = False Then
                            Application.Exit()
                            End
                        End If

                        Exit Sub
                    End If

                End If


                If vPENDRV_STS = False Then

                    Dim mymsgbox As New Tsoft_MessageBox("Insert a Pendrive in Server to take AutoBackup......", "OK,CANCEL", "PENDRIVE AUTOBACKUP FAILED...", "Autobackup prepared in harddisk, but it is adviced to take autobackup in pendrive also", MesssageBoxIcons.Exclamations, 1)
                    mymsgbox.ShowDialog()

                    'MessageBox.Show("Insert a Pendrive in Server to take AutoBackup......, " & Chr(13) & "Software will Close now", "DOES NOT PREPARE AUTOBACKUP...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                    If Common_Procedures.vShowEntrance_Status_FromMDI = False And Common_Procedures.vShowEntrance_Status_FromCCupdate = False Then
                        Application.Exit()
                        End
                    End If
                    Exit Sub
                End If
            End If

        Catch ex As Exception
            '---

        End Try

    End Sub

    Public Shared Function Sql_AutoBackUP_File_To_Client_Sysytem(ByVal File_Name As String, ByVal Db_Name As String, ByVal Servnam As String) As Boolean
        Dim cn1 As SqlClient.SqlConnection
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim Path1 As String = ""
        Dim Path2 As String = ""
        Dim clientNAM As String = ""
        Dim srvNAM As String = ""
        Dim NoofClients As Integer = 0

        Try

            Common_Procedures.Sql_AutoBackUP_Client_Path()

            cn1 = New SqlClient.SqlConnection(Common_Procedures.ConnectionString_CompanyGroupdetails)
            cn1.Open()

            NoofClients = 0
            Da = New SqlClient.SqlDataAdapter("select * from AutoBackup_Path_Head Where Computer_Name = '" & Trim(SystemInformation.ComputerName) & "' order by Auto_SlNo asc ", cn1)
            Dt = New DataTable
            Da.Fill(Dt)
            If Dt.Rows.Count > 0 Then

                For i = 0 To Dt.Rows.Count - 1

                    If IsDBNull(Dt.Rows(i).Item("App_Path").ToString) = False Then

                        If Trim(Dt.Rows(i).Item("App_Path").ToString) <> "" Then

                            If Not Directory.Exists(Trim(Dt.Rows(i).Item("App_Path").ToString)) Then
                                clientNAM = Replace(Trim(Dt.Rows(i).Item("App_Path").ToString), "\\" & Trim(UCase(SystemInformation.ComputerName)) & "\", "") & "\"
                                clientNAM = clientNAM.Insert(1, ":")

                                If Not Directory.Exists(Trim(clientNAM)) Then
                                    Continue For
                                End If

                            End If
                            If is_ServerSystem() = True Then
                                System.IO.File.Copy(File_Name, Trim(Dt.Rows(i).Item("App_Path").ToString) & "\" & Trim(Db_Name) & "_BackUp_" & Trim(Format(Now, "yyyy_MM_dd_hh_mm_tt")) & ".tssl")
                                NoofClients = NoofClients + 1

                            Else

                                srvNAM = File_Name
                                If Microsoft.VisualBasic.Left(Trim(File_Name), 2) <> "\\" Then
                                    srvNAM = "\\" & Trim(Servnam) & "\" & Replace(File_Name, ":", "")
                                End If

                                clientNAM = Replace(Trim(Dt.Rows(i).Item("App_Path").ToString), "\\" & Trim(UCase(SystemInformation.ComputerName)) & "\", "") & "\"
                                clientNAM = clientNAM.Insert(1, ":")
                                System.IO.File.Copy(srvNAM, Trim(clientNAM) & Trim(Db_Name) & "_BackUp_" & Trim(Format(Now, "yyyy_MM_dd_hh_mm_tt")) & ".tssl")
                                NoofClients = NoofClients + 1
                            End If

                        End If

                    End If
                Next

            End If

            Dt.Dispose()
            Da.Dispose()

            cn1.Close()
            cn1.Dispose()

        Catch ex As Exception
            '----

        End Try

        If NoofClients = 0 Then
            Return False
        Else
            Return True
        End If

    End Function

    Public Shared Sub Sql_AutoBackUP_Client_Path()
        Dim cmd As New SqlClient.SqlCommand
        Dim cn1 As SqlClient.SqlConnection
        Dim ServrNm As String = ""
        Dim Path_Sts As Boolean = False
        Dim Client_Count As Integer = 0
        Dim Nr As Integer = 0
        Dim Path1 As String = ""

        Try

            ServrNm = Common_Procedures.get_Server_SystemName()
            If Trim(UCase(ServrNm)) = Trim(UCase(SystemInformation.ComputerName)) Then
                Exit Sub
            End If

            cn1 = New SqlClient.SqlConnection(Common_Procedures.ConnectionString_CompanyGroupdetails)
            cn1.Open()
            cmd.Connection = cn1

            Path1 = Trim(Common_Procedures.AppPath & "\Auto_BackUP")
            If Not Directory.Exists(Path1) Then
                Directory.CreateDirectory(Path1)
            End If

            Path1 = Replace(Trim(Path1), ":", "")
            Path1 = "\\" & Trim(UCase(SystemInformation.ComputerName)) & "\" & Trim(Path1)

            Nr = 0
            cmd.CommandText = "update AutoBackup_Path_Head set App_Path = '" & Trim(Path1) & "' where Computer_Name = '" & Trim(Trim(UCase(SystemInformation.ComputerName))) & "'"
            Nr = cmd.ExecuteNonQuery()
            If Nr = 0 Then
                cmd.CommandText = "Insert into AutoBackup_Path_Head(Computer_Name,App_Path) Values ('" & Trim(Trim(UCase(SystemInformation.ComputerName))) & "' ,'" & Trim(Path1) & "' )"
                cmd.ExecuteNonQuery()
            End If

            cn1.Close()
            cn1.Dispose()

        Catch ex As Exception
            '----

        End Try

    End Sub






    Public Shared Function userright_check(ByVal user_access_type As String, ByVal newentry_status As Boolean) As Boolean

        userright_check = True

        If Val(Common_Procedures.User.IdNo) <> 1 Then
            If InStr(Trim(UCase(user_access_type)), Trim(UCase("~l~"))) = 0 Then
                If newentry_status = True Then
                    If InStr(Trim(UCase(user_access_type)), Trim(UCase("~a~"))) = 0 Then
                        MessageBox.Show("you have no rights to add", "does not save...", MessageBoxButtons.OK, MessageBoxIcon.Error)
                        userright_check = False
                    End If

                Else
                    If InStr(Trim(UCase(user_access_type)), Trim(UCase("~e~"))) = 0 Then
                        MessageBox.Show("you have no rights to change", "does not save...", MessageBoxButtons.OK, MessageBoxIcon.Error)
                        userright_check = False
                    End If

                End If
            End If
        End If

    End Function

    Public Shared Function get_FieldValue(ByVal Cn1 As SqlClient.SqlConnection, ByVal vTable_name As String, ByVal vField_Name As String, ByVal vCondition As String, Optional ByVal vCompany_ID As Integer = 0, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim RetVal As String
        Dim SqlCondt As String
        Dim SQL1 As String = ""

        SqlCondt = ""
        If Trim(vCondition) <> "" Then
            SqlCondt = "(" & Trim(vCondition) & ")"
        End If

        If Val(vCompany_ID) <> 0 Then
            SqlCondt = Trim(SqlCondt) & IIf(Trim(SqlCondt) <> "", " and ", "") & " Company_IdNo = " & Str(Val(vCompany_ID))
        End If

        Da = New SqlClient.SqlDataAdapter("select " & vField_Name & " from " & vTable_name & IIf(Trim(SqlCondt) <> "", " Where ", "") & SqlCondt, Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        RetVal = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                RetVal = Dt.Rows(0)(0).ToString
            End If
        End If

        Dt.Clear()
        Dt.Dispose()
        Da.Dispose()

        get_FieldValue = RetVal

    End Function

    Public Shared Function get_Weft_ConsumedYarn(ByVal Cn1 As SqlClient.SqlConnection, ByVal vClo_IdNo As Integer, ByVal vClo_Mtrs As Single, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal ActWeight_Calc As Boolean = False, Optional ByVal vFOLDINGPERC As String = "100") As Double
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim ConsYarn As String = 0
        Dim Wgt_Mtr As Double = 0
        Dim RdSp As Single = 0
        Dim Pick As Single = 0
        Dim Weft As Single = 0
        Dim ConsYrn_Int As Long = 0
        Dim s1 As String = ""
        Dim s2 As String = ""

        '0.000593 * reedspace * pick / count * wastage (1.02)
        '-----  Consumed   Yarn Formula  = "(METERS * REEDSPACE * PICK * 1.0937) / (84 * 22 * WEFT)"
        If Val(vClo_IdNo) = 0 Then
            get_Weft_ConsumedYarn = 0
            Exit Function
        End If

        If Val(vFOLDINGPERC) = 0 Then vFOLDINGPERC = 100
        vClo_Mtrs = Format(Val(vClo_Mtrs) * Val(vFOLDINGPERC) / 100, "##########0.00")

        If ActWeight_Calc = True Then
            Wgt_Mtr = Val(get_FieldValue(Cn1, "cloth_head", "ActualWeight_Meter_Weft", "(cloth_idno = " & Str(Val(vClo_IdNo)) & ")", , sqltr))
        Else
            Wgt_Mtr = Val(get_FieldValue(Cn1, "cloth_head", "Weight_Meter_Weft", "(cloth_idno = " & Str(Val(vClo_IdNo)) & ")", , sqltr))
        End If

        If Val(Wgt_Mtr) <> 0 Then

            If Val(Common_Procedures.settings.Weaver_YarnStock_InMeter_Status) = 1 Then
                ConsYarn = Format(Val(vClo_Mtrs), "##########0.0000")
            Else
                ConsYarn = Format(vClo_Mtrs * Wgt_Mtr, "##########0.0000")
            End If

        Else

            RdSp = 0
            Pick = 0
            Weft = 0
            Da = New SqlClient.SqlDataAdapter("select a.*, b.Count_Name as Weft_Count, b.Resultant_Count from cloth_head a, Count_Head b Where a.cloth_idno = " & Str(Val(vClo_IdNo)) & " and  a.Cloth_WeftCount_IdNo = b.Count_IdNo ", Cn1)
            Da.SelectCommand.Transaction = sqltr
            Dt = New DataTable
            Da.Fill(Dt)
            If Dt.Rows.Count > 0 Then
                RdSp = Val(Dt.Rows(0).Item("Cloth_ReedSpace").ToString)
                Pick = Val(Dt.Rows(0).Item("Cloth_Pick").ToString)
                Weft = Val(get_FieldValue(Cn1, "count_head", "Resultant_Count", "(count_idno = " & Str(Val(Dt.Rows(0).Item("Cloth_WeftCount_IdNo").ToString)) & ")", , sqltr))
                If Val(Weft) = 0 Then
                    Weft = Val(Dt.Rows(0).Item("Weft_Count").ToString)
                End If
            End If
            Dt.Clear()

            ConsYarn = Format((vClo_Mtrs * RdSp * Pick * 1.0937) / (84 * 22 * Weft), "##########0.0000")

        End If

        If Trim(Common_Procedures.settings.CustomerCode) = "1009" Or Trim(Common_Procedures.settings.CustomerCode) = "1032" Or Trim(Common_Procedures.settings.CustomerCode) = "1060" Or Trim(Common_Procedures.settings.CustomerCode) = "1283" Or Trim(Common_Procedures.settings.CustomerCode) = "1444" Then
            get_Weft_ConsumedYarn = Format(Val(ConsYarn), "#########0.0")

        ElseIf Trim(Common_Procedures.settings.CustomerCode) = "1044" Then
            get_Weft_ConsumedYarn = Format(Val(ConsYarn), "##########0.00")

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1035" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1238" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1239" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1278" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1440" Then '---- KALAIMAGAL TEX

            ConsYarn = Format(Val(ConsYarn), "#########0")

            get_Weft_ConsumedYarn = Val(Format(Val(ConsYarn), "#########0.000"))


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1057" Then
            s1 = Trim(Format(Val(ConsYarn), "#########0.000"))
            s2 = Microsoft.VisualBasic.Right(s1, 2)
            Select Case Val(s2)
                Case Is < 25
                    ConsYarn = Val(Microsoft.VisualBasic.Left(s1, Len(s1) - 2))
                Case Is < 75
                    ConsYarn = Val(Microsoft.VisualBasic.Left(s1, Len(s1) - 2)) + 0.05
                Case Else
                    ConsYarn = Val(Microsoft.VisualBasic.Left(s1, Len(s1) - 2)) + 0.1
            End Select

            get_Weft_ConsumedYarn = Val(Format(Val(ConsYarn), "#########0.000"))

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1081" Then  '---- S.Ravichandran Textiles (Erode)
            get_Weft_ConsumedYarn = Val(Format(Val(vClo_Mtrs), "##########0"))

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1242" Then '---- SOUTHERN SAREESS (ERODE)
            s1 = Trim(Format(Val(ConsYarn), "#########0.000"))
            s2 = Microsoft.VisualBasic.Left(s1, Len(s1) - 2)
            get_Weft_ConsumedYarn = Format(Val(s2), "#########0.000")

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1408" Then '------AMIRTHAM

            s1 = Trim(Format(Val(ConsYarn), "#########0.000"))
            s2 = Microsoft.VisualBasic.Right(s1, 2)
            Select Case Val(s2)
                Case Is < 13
                    s2 = "0"
                Case Is < (25 + 13)
                    s2 = "0.025"
                Case Is < (50 + 13)
                    s2 = "0.050"
                Case Is < (75 + 13)
                    s2 = "0.075"
                Case Else
                    s2 = "0.1"
            End Select

            ConsYarn = Val(Microsoft.VisualBasic.Left(s1, Len(s1) - 2)) + Val(s2)

            'Select Case Val(s2)
            '    Case Is < 25
            '        ConsYarn = Val(Microsoft.VisualBasic.Left(s1, Len(s1) - 2))
            '    Case Is < 75
            '        ConsYarn = Val(Microsoft.VisualBasic.Left(s1, Len(s1) - 2)) + 0.05
            '    Case Else
            '        ConsYarn = Val(Microsoft.VisualBasic.Left(s1, Len(s1) - 2)) + 0.1
            'End Select

            get_Weft_ConsumedYarn = Val(Format(Val(ConsYarn), "#########0.000"))


        Else
            get_Weft_ConsumedYarn = Val(Format(Val(ConsYarn), "#########0.000"))

        End If

        Dt.Dispose()
        Da.Dispose()

    End Function

    Public Shared Function get_Pavu_Consumption(ByVal Cn1 As SqlClient.SqlConnection, ByVal vClo_IdNo As Integer, ByVal vLm_IdNo As Integer, ByVal vClo_Mtrs As Single, ByVal vWidth_Type As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal vCrimpPerc As String = "", Optional ByVal ActMeter_Calc As Boolean = False, Optional ByVal vCalc_AutoLoom_JobWork_PavuWidthWiseConsumption As Boolean = False, Optional ByVal vFOLDINGPERC As String = "100") As Decimal
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim PavuConsMtrs As String = 0
        Dim NoofBeams As Integer = 0
        Dim WidTyp As Single = 0
        Dim Crmp_Perc As String = 0
        Dim Crmp_Mtrs As String = 0

        If Val(vFOLDINGPERC) = 0 Then vFOLDINGPERC = 100
        vClo_Mtrs = Format(Val(vClo_Mtrs) * Val(vFOLDINGPERC) / 100, "##########0.00")

        NoofBeams = 0

        If Trim(vWidth_Type) <> "" Then
            If InStr(1, Trim(UCase(vWidth_Type)), "1 BEAM") > 0 Then
                NoofBeams = 1
            ElseIf InStr(1, Trim(UCase(vWidth_Type)), "2 BEAM") > 0 Then
                NoofBeams = 2
            End If
        End If

        If Val(NoofBeams) = 0 Then
            NoofBeams = Val(Common_Procedures.get_FieldValue(Cn1, "Loom_Head", "Noof_Input_Beams", "(Loom_IdNo = " & Str(Val(vLm_IdNo)) & ")", , sqltr))
            If Val(NoofBeams) = 0 Then NoofBeams = 1
        End If

        If ActMeter_Calc = True Then
            Crmp_Perc = Val(Common_Procedures.get_FieldValue(Cn1, "Cloth_Head", "ActualCrimp_Percentage", "(Cloth_IdNo = " & Str(Val(vClo_IdNo)) & ")", , sqltr))

        Else

            If Val(vCrimpPerc) <> 0 Then
                Crmp_Perc = Val(vCrimpPerc)
            Else
                Crmp_Perc = Val(Common_Procedures.get_FieldValue(Cn1, "Cloth_Head", "Crimp_Percentage", "(Cloth_IdNo = " & Str(Val(vClo_IdNo)) & ")", , sqltr))
            End If

        End If
        Crmp_Perc = Format(Val(Crmp_Perc), "##########0.00")

        WidTyp = 0
        If Trim(UCase(vWidth_Type)) = "SIX" Or InStr(1, Trim(UCase(vWidth_Type)), "SIX") > 0 Then
            WidTyp = 6
        ElseIf Trim(UCase(vWidth_Type)) = "FIVE" Or InStr(1, Trim(UCase(vWidth_Type)), "FIVE") > 0 Then
            WidTyp = 5
        ElseIf Trim(UCase(vWidth_Type)) = "FOURTH" Or InStr(1, Trim(UCase(vWidth_Type)), "FOURTH") > 0 Or InStr(1, Trim(UCase(vWidth_Type)), "FOUR") > 0 Then
            WidTyp = 4
        ElseIf Trim(UCase(vWidth_Type)) = "TRIPLE" Or InStr(1, Trim(UCase(vWidth_Type)), "TRIPLE") > 0 Then
            WidTyp = 3
        ElseIf Trim(UCase(vWidth_Type)) = "DOUBLE" Or InStr(1, Trim(UCase(vWidth_Type)), "DOUBLE") > 0 Then
            WidTyp = 2
        ElseIf Trim(UCase(vWidth_Type)) = "SINGLE" Or InStr(1, Trim(UCase(vWidth_Type)), "SINGLE") > 0 Then
            WidTyp = 1
        End If


        If Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 1 And vCalc_AutoLoom_JobWork_PavuWidthWiseConsumption = False Then
            PavuConsMtrs = Format(Val(vClo_Mtrs), "##########0.00")

        Else

            If WidTyp = 0 Then
                PavuConsMtrs = Format(Val(vClo_Mtrs), "##########0.00")

            Else
                PavuConsMtrs = Format((Val(vClo_Mtrs) / Val(WidTyp)) * Val(NoofBeams), "##########0.00")

            End If

        End If

        Crmp_Mtrs = 0
        If Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_SeparateEntry = 0 And Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_Delivery_Receipt_Entry = 0 Then
            Crmp_Mtrs = Format(Val(PavuConsMtrs) * Val(Crmp_Perc) / 100, "##########0.00")
        End If

        PavuConsMtrs = Format(Val(PavuConsMtrs) + Val(Crmp_Mtrs), "##########0.00")

        get_Pavu_Consumption = Format(Val(PavuConsMtrs), "##########0.00")

    End Function

    Public Shared Function get_Warp_ConsumedYarn(ByVal Cn1 As SqlClient.SqlConnection, ByVal vClo_IdNo As Integer, ByVal vClo_Mtrs As Single, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal vFOLDINGPERC As String = "100") As Double
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim ConsYarn As String = 0
        Dim Wgt_Mtr As Double = 0
        Dim RdSp As Single = 0
        Dim Pick As Single = 0
        Dim Weft As Single = 0
        Dim ConsYrn_Int As Long = 0
        Dim s1 As String = ""
        Dim s2 As String = ""


        If Val(vClo_IdNo) = 0 Then
            get_Warp_ConsumedYarn = 0
            Exit Function
        End If

        If Val(vFOLDINGPERC) = 0 Then vFOLDINGPERC = 100
        vClo_Mtrs = Format(Val(vClo_Mtrs) * Val(vFOLDINGPERC) / 100, "##########0.00")


        Wgt_Mtr = Val(get_FieldValue(Cn1, "cloth_head", "Weight_Meter_Warp", "(cloth_idno = " & Str(Val(vClo_IdNo)) & ")", , sqltr))

        ConsYarn = 0
        If Val(Wgt_Mtr) <> 0 Then
            ConsYarn = Format(vClo_Mtrs * Wgt_Mtr, "##########0.0000")
        End If

        get_Warp_ConsumedYarn = Format(Val(ConsYarn), "#########0.000")

        Dt.Dispose()
        Da.Dispose()

    End Function

    Public Shared Sub ComboBox_ItemSelection_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs, ByVal Cn1 As SqlClient.SqlConnection, ByVal CboName As ComboBox, ByVal NextCtrlName As Object, ByVal vTableName As String, ByVal vSelectionFieldName As String, ByVal vSqlCondition As String, ByVal vBlankFieldCondition As String, Optional ByVal vBlock_Typing_Status As Boolean = True, Optional ByVal UPPERCASE As Boolean = True)
        Dim da As New SqlClient.SqlDataAdapter
        Dim Cmd As New SqlClient.SqlCommand
        Dim dt As New DataTable
        Dim SqlCondt As String, Condt2 As String
        Dim FindStr As String = ""
        Dim indx As Integer = -1
        Dim SelStrt As Integer = 0
        Dim Mtch_STS As Boolean = False
        Dim vFndStr2 As String = ""
        Dim vS1 As String = ""
        Dim vS2 As String = ""
        Dim vS3 As String = ""

        Try

            With CboName

                If Asc(e.KeyChar) <> 27 Then

                    SelStrt = .SelectionStart

                    'If .Text.Length > 3 Then
                    '    Debug.Print(e.KeyChar)
                    'End If

                    If Asc(e.KeyChar) = 13 Then

                        Try

                            If Trim(.Text) <> "" Then

                                If .DroppedDown = True Then

                                    If .Items.Count > 0 Then

                                        indx = .FindString(FindStr)

                                        If indx <> -1 Then

                                            If .SelectedIndex >= 0 Then
                                                .SelectedItem = .Items(.SelectedIndex)
                                                If UPPERCASE = True Then
                                                    .Text = UCase(.GetItemText(.SelectedItem))
                                                Else
                                                    .Text = .GetItemText(.SelectedItem)
                                                End If

                                            Else

                                                If Trim(vTableName) <> "" And Trim(vSelectionFieldName) <> "" Then
                                                    .SelectedIndex = 0
                                                    .SelectedItem = .Items(0)
                                                    If UPPERCASE = True Then
                                                        .Text = UCase(.GetItemText(.SelectedItem))
                                                    Else
                                                        .Text = .GetItemText(.SelectedItem)
                                                    End If

                                                End If

                                            End If

                                        End If

                                    End If

                                End If

                            End If

                        Catch ex As Exception
                            '---

                        End Try


                        If IsNothing(NextCtrlName) = False Then
                            If NextCtrlName.Enabled Then
                                NextCtrlName.Focus()

                            Else
                                SendKeys.Send("{TAB}")

                            End If
                        End If

                    Else

                        SqlCondt = ""
                        Condt2 = ""
                        FindStr = ""
                        indx = -1

                        If Asc(e.KeyChar) = 8 Then

                            If Trim(.Text) <> "" Then

                                If .SelectionLength = 0 Then
                                    If .SelectionStart > 1 Then
                                        FindStr = .Text.Substring(0, .SelectionStart - 1)
                                    End If
                                    FindStr = FindStr & Mid(CboName.Text, CboName.SelectionStart + 1, Len(CboName.Text))

                                Else

                                    If .SelectionStart <= 1 Then
                                        .Text = ""
                                    Else
                                        FindStr = .Text.Substring(0, .SelectionStart - 1)
                                    End If

                                End If

                            End If

                        Else

                            If .SelectionLength = 0 Then
                                If .SelectionStart > 0 Then FindStr = .Text.Substring(0, .SelectionStart)
                                FindStr = FindStr & e.KeyChar & Mid(CboName.Text, CboName.SelectionStart + 1, Len(CboName.Text))

                            Else
                                FindStr = .Text.Substring(0, .SelectionStart) & e.KeyChar

                            End If

                        End If

                        FindStr = LTrim(FindStr)
                        If Trim(vTableName) <> "" Then

                            indx = .FindString(FindStr)

                            SqlCondt = ""
                            If Trim(FindStr) <> "" Then
                                'vS1 = " (" & vSelectionFieldName & " like '" & FindStr & "%' or " & vSelectionFieldName & " like '% " & FindStr & "%' or " & vSelectionFieldName & " like '% (" & FindStr & "%' or " & vSelectionFieldName & " like '(" & FindStr & "%' or " & vSelectionFieldName & " like '% {" & FindStr & "%' or " & vSelectionFieldName & " like '{" & FindStr & "%'   or " & vSelectionFieldName & " like '% [" & FindStr & "%' or " & vSelectionFieldName & " like '[" & FindStr & "%' or " & vSelectionFieldName & " LIKE '" & Replace(FindStr, ".", "") & "%'  or " & vSelectionFieldName & " LIKE '" & Replace(FindStr, ".", " ") & "%' or " & Replace(vSelectionFieldName, ".", "") & " like '" & FindStr & "%'  or " & Replace(vSelectionFieldName, ".", " ") & " like '" & FindStr & "%' )"

                                'If Len(FindStr) <= 3 Then
                                '    vFndStr2 = Microsoft.VisualBasic.Left(FindStr, 1)
                                '    For i = 2 To Len(FindStr)
                                '        vFndStr2 = vFndStr2 & "." & Mid(FindStr, i, 1)
                                '    Next

                                '    vS2 = " (" & vSelectionFieldName & " like '" & vFndStr2 & "%' or " & vSelectionFieldName & " like '% " & vFndStr2 & "%' or " & vSelectionFieldName & " like '% (" & vFndStr2 & "%' or " & vSelectionFieldName & " like '(" & vFndStr2 & "%' or " & vSelectionFieldName & " like '% {" & vFndStr2 & "%' or " & vSelectionFieldName & " like '{" & vFndStr2 & "%'   or " & vSelectionFieldName & " like '% [" & vFndStr2 & "%' or " & vSelectionFieldName & " like '[" & vFndStr2 & "%' or " & vSelectionFieldName & " LIKE '" & Replace(vFndStr2, ".", "") & "%'  or " & vSelectionFieldName & " LIKE '" & Replace(vFndStr2, ".", " ") & "%' or " & Replace(vSelectionFieldName, ".", "") & " like '" & vFndStr2 & "%'  or " & Replace(vSelectionFieldName, ".", " ") & " like '" & vFndStr2 & "%' )"

                                '    vFndStr2 = vFndStr2 & "."

                                '    vS3 = " (" & vSelectionFieldName & " like '" & vFndStr2 & "%' or " & vSelectionFieldName & " like '% " & vFndStr2 & "%' or " & vSelectionFieldName & " like '% (" & vFndStr2 & "%' or " & vSelectionFieldName & " like '(" & vFndStr2 & "%' or " & vSelectionFieldName & " like '% {" & vFndStr2 & "%' or " & vSelectionFieldName & " like '{" & vFndStr2 & "%'   or " & vSelectionFieldName & " like '% [" & vFndStr2 & "%' or " & vSelectionFieldName & " like '[" & vFndStr2 & "%' or " & vSelectionFieldName & " LIKE '" & Replace(vFndStr2, ".", "") & "%'  or " & vSelectionFieldName & " LIKE '" & Replace(vFndStr2, ".", " ") & "%' or " & Replace(vSelectionFieldName, ".", "") & " like '" & vFndStr2 & "%'  or " & Replace(vSelectionFieldName, ".", " ") & " like '" & vFndStr2 & "%' )"

                                '    SqlCondt = " Where " & vSqlCondition & IIf(Trim(vSqlCondition) <> "", " and ", "") & " (" & vS1 & " or " & vS2 & "  or " & vS3 & " )"


                                'Else

                                '    SqlCondt = " Where " & vSqlCondition & IIf(Trim(vSqlCondition) <> "", " and ", "") & " (" & vS1 & ")"

                                'End If

                                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1005" Then '---- Jeno Textiles (Somanur)
                                    SqlCondt = " Where " & vSqlCondition & IIf(Trim(vSqlCondition) <> "", " and ", "") & " (" & vSelectionFieldName & " like '" & FindStr & "%') "
                                Else
                                    SqlCondt = " Where " & vSqlCondition & IIf(Trim(vSqlCondition) <> "", " and ", "") & " (" & vSelectionFieldName & " like '" & FindStr & "%' or " & vSelectionFieldName & " like '% " & FindStr & "%' )"
                                End If

                                'SqlCondt = " Where " & vSqlCondition & IIf(Trim(vSqlCondition) <> "", " and ", "") & " (" & vSelectionFieldName & " like '" & FindStr & "%' or " & vSelectionFieldName & " like '% " & FindStr & "%' or " & vSelectionFieldName & " like '% (" & FindStr & "%' or " & vSelectionFieldName & " like '(" & FindStr & "%' or " & vSelectionFieldName & " like '% {" & FindStr & "%' or " & vSelectionFieldName & " like '{" & FindStr & "%'   or " & vSelectionFieldName & " like '% [" & FindStr & "%' or " & vSelectionFieldName & " like '[" & FindStr & "%' )"
                                'SqlCondt = " Where " & vSqlCondition & IIf(Trim(vSqlCondition) <> "", " and ", "") & " (" & vSelectionFieldName & " like '" & FindStr & "%' or " & vSelectionFieldName & " like '% " & FindStr & "%' or " & vSelectionFieldName & " like '% (" & FindStr & "%' or " & vSelectionFieldName & " like '(" & FindStr & "%' or " & vSelectionFieldName & " like '% {" & FindStr & "%' or " & vSelectionFieldName & " like '{" & FindStr & "%'   or " & vSelectionFieldName & " like '% [" & FindStr & "%' or " & vSelectionFieldName & " like '[" & FindStr & "%' or " & vSelectionFieldName & " LIKE '" & Replace(FindStr, ".", "") & "%'  or " & vSelectionFieldName & " LIKE '" & Replace(FindStr, ".", " ") & "%' or " & Replace(vSelectionFieldName, ".", "") & " like '" & FindStr & "%'  or " & Replace(vSelectionFieldName, ".", " ") & " like '" & FindStr & "%' )"

                                If Len(FindStr) >= 2 Then
                                    Debug.Print(vFndStr2)
                                End If

                            Else

                                Condt2 = ""
                                If Trim(vSqlCondition) <> "" Then
                                    Condt2 = Trim(vSqlCondition)
                                    If Trim(vBlankFieldCondition) <> "" Then Condt2 = Condt2 & IIf(Trim(Condt2) <> "", " or ", "") & vBlankFieldCondition
                                End If

                                If Trim(Condt2) <> "" Then
                                    SqlCondt = " Where " & Trim(Condt2)
                                End If

                            End If

                            Mtch_STS = False
                            da = New SqlClient.SqlDataAdapter("select distinct(" & vSelectionFieldName & ") from " & vTableName & " " & SqlCondt & " order by " & vSelectionFieldName, Cn1)
                            da.SelectCommand.CommandTimeout = 1000
                            dt = New DataTable
                            da.Fill(dt)
                            If dt.Rows.Count > 0 Then
                                Mtch_STS = True
                            End If

                            If Mtch_STS = True Then

                                da = New SqlClient.SqlDataAdapter("Select distinct(" & vSelectionFieldName & ") from " & vTableName & " " & SqlCondt & " order by " & vSelectionFieldName, Cn1)
                                da.SelectCommand.CommandTimeout = 1000
                                dt = New DataTable
                                da.Fill(dt)
                                .DataSource = dt
                                .DisplayMember = Trim(vSelectionFieldName)

                                If .Items.Count > 0 Then
                                    If Asc(e.KeyChar) = 32 And Len(FindStr) = 0 Then .DroppedDown = False
                                    .DroppedDown = True
                                End If

                                If UPPERCASE = True Then
                                    .Text = UCase(FindStr)
                                Else
                                    .Text = FindStr
                                End If

                                If Asc(e.KeyChar) = 8 Then
                                    If SelStrt > 0 Then .SelectionStart = SelStrt - 1
                                Else
                                    .SelectionStart = SelStrt + 1
                                End If

                            Else

                                If vBlock_Typing_Status = True Then
                                    If Trim(FindStr) <> "" Then
                                        If UPPERCASE = True Then
                                            .Text = UCase(Microsoft.VisualBasic.Left(FindStr, Len(FindStr) - 1))
                                        Else
                                            .Text = Microsoft.VisualBasic.Left(FindStr, Len(FindStr) - 1)
                                        End If

                                        .SelectionStart = .Text.Length
                                    End If

                                Else
                                    .DataSource = Nothing
                                    .DisplayMember = ""

                                    If UPPERCASE = True Then
                                        .Text = UCase(FindStr)
                                    Else
                                        .Text = FindStr
                                    End If
                                    If Asc(e.KeyChar) = 8 Then
                                        If SelStrt > 0 Then .SelectionStart = SelStrt - 1
                                    Else
                                        .SelectionStart = SelStrt + 1
                                    End If

                                End If

                            End If

                            e.Handled = True

                            If Mtch_STS = False And vBlock_Typing_Status = False Then

                                If .DroppedDown = True Then


                                    Cmd.Connection = Cn1
                                    Cmd.CommandTimeout = 1000

                                    Cmd.CommandText = "truncate table Combo_Temp"
                                    Cmd.ExecuteNonQuery()


                                    Cmd.CommandText = "insert into Combo_Temp(name1) values ('" & Trim(UCase(FindStr)) & "')"
                                    Cmd.ExecuteNonQuery()


                                    da = New SqlClient.SqlDataAdapter("Select distinct(Name1) from Combo_Temp", Cn1)
                                    dt = New DataTable
                                    da.Fill(dt)
                                    .DataSource = dt
                                    .DisplayMember = "Name1"


                                    indx = .FindString(FindStr)

                                    If indx <> -1 Then
                                        If .SelectedIndex >= 0 Then
                                            .SelectedIndex = 0
                                            .SelectedItem = .Items(.SelectedIndex)
                                            If UPPERCASE = True Then
                                                .Text = UCase(.GetItemText(.SelectedItem))
                                            Else
                                                .Text = .GetItemText(.SelectedItem)
                                            End If
                                        End If
                                    End If

                                    Try
                                        .DroppedDown = False
                                    Catch ex As Exception
                                        '----
                                    End Try


                                    Try
                                        If UPPERCASE = True Then
                                            .Text = UCase(FindStr)
                                        Else
                                            .Text = FindStr
                                        End If
                                    Catch ex As Exception
                                        ''---
                                    End Try

                                    If Asc(e.KeyChar) = 8 Then
                                        If SelStrt > 0 Then .SelectionStart = SelStrt - 1
                                    Else
                                        .SelectionStart = SelStrt + 1 'FindStr.Length
                                    End If

                                    .SelectionLength = .Text.Length

                                    '.SelectedIndex = -1

                                End If

                            End If

                        Else

                            indx = .FindString(FindStr)
                            If indx <> -1 Then

                                If .Items.Count > 0 Then
                                    If Asc(e.KeyChar) = 32 And Len(FindStr) = 0 Then .DroppedDown = False
                                    .DroppedDown = True
                                End If

                                '.SelectedText = ""
                                .SelectedIndex = indx
                                .SelectedItem = .Items(.SelectedIndex)
                                'If UPPERCASE = True Then
                                '    .Text = UCase(.GetItemText(.SelectedItem))
                                'Else
                                .Text = .GetItemText(.SelectedItem)
                                'End If

                                If Asc(e.KeyChar) = 8 Then
                                    If SelStrt > 0 Then .SelectionStart = SelStrt - 1
                                Else
                                    .SelectionStart = SelStrt + 1 'FindStr.Length
                                End If

                                .SelectionLength = .Text.Length
                                e.Handled = True

                            Else

                                If vBlock_Typing_Status = True Then
                                    If Trim(FindStr) <> "" Then
                                        'If UPPERCASE = True Then
                                        '    .Text = UCase(Microsoft.VisualBasic.Left(FindStr, Len(FindStr) - 1))
                                        'Else
                                        .Text = Microsoft.VisualBasic.Left(FindStr, Len(FindStr) - 1)
                                        'End If
                                        .SelectionStart = .Text.Length
                                    End If

                                Else
                                    .DataSource = Nothing
                                    .DisplayMember = ""
                                    .SelectedText = ""
                                    .SelectedIndex = -1

                                    'If UPPERCASE = True Then
                                    '    .Text = UCase(FindStr)
                                    'Else
                                    .Text = FindStr
                                    'End If

                                    If Asc(e.KeyChar) = 8 Then
                                        If SelStrt > 0 Then .SelectionStart = SelStrt - 1
                                    Else
                                        .SelectionStart = SelStrt + 1 'FindStr.Length
                                    End If
                                End If

                                e.Handled = True
                            End If

                        End If

                    End If

                End If

            End With


        Catch ex As NullReferenceException
            'MessageBox.Show(ex.Message, "ERROR IN WHILE KEYPRESS IN COMBOBOX " & sender.ToString & "....", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        Catch ex As ObjectDisposedException
            'MessageBox.Show(ex.Message, "ERROR IN WHILE KEYPRESS IN COMBOBOX " & sender.ToString & "....", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        Catch ex As ArgumentException
            'MessageBox.Show(ex.Message, "ERROR IN WHILE KEYPRESS IN COMBOBOX " & sender.ToString & "....", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

            ' Catch ex As ArgumentOutOfRangeException
            '---MessageBox.Show(ex.Message, "ERROR IN WHILE KEYPRESS IN COMBOBOX " & sender.ToString & "....", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "ERROR IN WHILE KEYPRESS IN COMBOBOX " & sender.ToString & "....", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub


    Public Shared Sub ComboBox_ItemSelection_KeyPress_111(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs, ByVal Cn1 As SqlClient.SqlConnection, ByVal CboName As ComboBox, ByVal NextCtrlName As Object, ByVal vTableName As String, ByVal vSelectionFieldName As String, ByVal vSqlCondition As String, ByVal vBlankFieldCondition As String, Optional ByVal vBlock_Typing_Status As Boolean = True)
        Dim da As New SqlClient.SqlDataAdapter
        Dim dt As New DataTable
        Dim SqlCondt As String, Condt2 As String
        Dim FindStr As String
        Dim indx As Integer = -1
        Dim SelStrt As Integer = 0

        Try

            With CboName


                If Asc(e.KeyChar) <> 27 Then

                    SelStrt = .SelectionStart

                    If Asc(e.KeyChar) = 13 Then

                        If Trim(.Text) <> "" Then

                            If .DroppedDown = True Then

                                If .Items.Count > 0 Then

                                    If .SelectedIndex >= 0 Then
                                        .SelectedItem = .Items(.SelectedIndex)
                                        .Text = .GetItemText(.SelectedItem)

                                    Else
                                        If Trim(vTableName) <> "" And Trim(vSelectionFieldName) <> "" Then
                                            .SelectedIndex = 0
                                            .SelectedItem = .Items(0)
                                            .Text = .GetItemText(.SelectedItem)

                                        End If

                                    End If

                                End If

                            End If

                        End If

                        If IsNothing(NextCtrlName) = False Then
                            If NextCtrlName.Enabled Then
                                NextCtrlName.Focus()

                            Else
                                SendKeys.Send("{TAB}")

                            End If
                        End If

                    Else

                        SqlCondt = ""
                        Condt2 = ""
                        FindStr = ""
                        indx = -1

                        If Asc(e.KeyChar) = 8 Then

                            If Trim(.Text) <> "" Then

                                If .SelectionLength = 0 Then
                                    If .SelectionStart > 1 Then
                                        FindStr = .Text.Substring(0, .SelectionStart - 1)
                                    End If
                                    FindStr = FindStr & Mid(CboName.Text, CboName.SelectionStart + 1, Len(CboName.Text))

                                Else


                                    If .SelectionStart <= 1 Then
                                        .Text = ""
                                    Else
                                        FindStr = .Text.Substring(0, .SelectionStart - 1)
                                    End If

                                End If

                            End If

                        Else

                            If .SelectionLength = 0 Then

                                If .SelectionStart > 0 Then FindStr = .Text.Substring(0, .SelectionStart)

                                FindStr = FindStr & e.KeyChar & Mid(CboName.Text, CboName.SelectionStart + 1, Len(CboName.Text))

                            Else
                                FindStr = .Text.Substring(0, .SelectionStart) & e.KeyChar

                            End If

                        End If

                        FindStr = LTrim(FindStr)

                        If Trim(vTableName) <> "" Then

                            indx = .FindString(FindStr)

                            If indx <> -1 Or vBlock_Typing_Status = False Then

                                SqlCondt = ""

                                If Trim(FindStr) <> "" Then
                                    If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1005" Then '---- Jeno Textiles (Somanur)
                                        SqlCondt = " Where " & vSqlCondition & IIf(Trim(vSqlCondition) <> "", " and ", "") & " (" & vSelectionFieldName & " like '" & FindStr & "%') "
                                    Else
                                        SqlCondt = " Where " & vSqlCondition & IIf(Trim(vSqlCondition) <> "", " and ", "") & " (" & vSelectionFieldName & " like '" & FindStr & "%' or " & vSelectionFieldName & " like '% " & FindStr & "%') "
                                    End If

                                Else

                                    Condt2 = ""
                                    If Trim(vSqlCondition) <> "" Then
                                        Condt2 = Trim(vSqlCondition)
                                        If Trim(vBlankFieldCondition) <> "" Then Condt2 = Condt2 & IIf(Trim(Condt2) <> "", " or ", "") & vBlankFieldCondition
                                    End If

                                    If Trim(Condt2) <> "" Then
                                        SqlCondt = " Where " & Trim(Condt2)
                                    End If

                                End If

                                da = New SqlClient.SqlDataAdapter("select distinct(" & vSelectionFieldName & ") from " & vTableName & " " & SqlCondt & " order by " & vSelectionFieldName, Cn1)
                                da.Fill(dt)
                                .DataSource = dt
                                .DisplayMember = Trim(vSelectionFieldName)

                                .Text = FindStr

                                If Asc(e.KeyChar) = 8 Then
                                    If SelStrt > 0 Then .SelectionStart = SelStrt - 1
                                Else
                                    .SelectionStart = SelStrt + 1
                                End If

                            End If

                            e.Handled = True

                        Else

                            indx = .FindString(FindStr)
                            If indx <> -1 Then
                                .SelectedText = ""
                                .SelectedIndex = indx

                                If Asc(e.KeyChar) = 8 Then
                                    If SelStrt > 0 Then .SelectionStart = SelStrt - 1
                                Else
                                    .SelectionStart = SelStrt + 1 'FindStr.Length
                                End If
                                .SelectionLength = .Text.Length
                                e.Handled = True

                            Else

                                .SelectedText = ""
                                .SelectedIndex = -1

                                .Text = FindStr

                                If Asc(e.KeyChar) = 8 Then
                                    If SelStrt > 0 Then .SelectionStart = SelStrt - 1
                                Else
                                    .SelectionStart = SelStrt + 1 'FindStr.Length
                                End If

                                e.Handled = True

                            End If

                        End If

                    End If

                End If

            End With

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "ERROR IN WHILE KEYPRESS IN COMBOBOX " & sender.ToString & "....", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Shared Sub ComboBox_ItemSelection_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs, ByVal Cn1 As SqlClient.SqlConnection, ByVal CboName As ComboBox, ByVal PreviousCtrlName As Object, ByVal NextCtrlName As Object, ByVal vTableName As String, ByVal vSelectionFieldName As String, ByVal vSqlCondition As String, ByVal vBlankFieldCondition As String)
        Dim da As New SqlClient.SqlDataAdapter
        Dim dt As New DataTable
        Dim SqlCondt As String, Condt2 As String
        Dim FindStr As String
        Dim indx As Integer
        Dim SelStrt As Integer

        Try

            With CboName

                If (e.KeyValue = 38 And sender.DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                    e.Handled = True
                    If IsNothing(PreviousCtrlName) = False Then
                        PreviousCtrlName.Focus()
                    End If

                ElseIf (e.KeyValue = 40 And sender.DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                    e.Handled = True
                    If IsNothing(NextCtrlName) = False Then
                        NextCtrlName.Focus()
                    End If

                ElseIf e.KeyValue = 46 Then

                    SqlCondt = ""
                    Condt2 = ""
                    FindStr = ""
                    indx = -1

                    SelStrt = .SelectionStart

                    If .SelectionStart <= 1 And .SelectionLength > 0 Then
                        .Text = ""
                    End If

                    If Trim(.Text) <> "" Then

                        If .SelectionLength = 0 Then

                            If .SelectionStart > 0 Then
                                FindStr = .Text.Substring(0, .SelectionStart)
                            End If
                            FindStr = FindStr & Mid(CboName.Text, CboName.SelectionStart + 2, Len(CboName.Text))

                        Else

                            FindStr = .Text.Substring(0, .SelectionStart - 1)

                        End If

                    End If

                    FindStr = LTrim(FindStr)

                    If Trim(vTableName) <> "" Then

                        SqlCondt = ""

                        If Trim(FindStr) <> "" Then
                            SqlCondt = " Where " & vSqlCondition & IIf(Trim(vSqlCondition) <> "", " and ", "") & " (" & vSelectionFieldName & " like '" & FindStr & "%' or " & vSelectionFieldName & " like '% " & FindStr & "%') "

                        Else

                            Condt2 = ""
                            If Trim(vSqlCondition) <> "" Then
                                Condt2 = Trim(vSqlCondition)
                                If Trim(vBlankFieldCondition) <> "" Then Condt2 = Condt2 & IIf(Trim(Condt2) <> "", " or ", "") & vBlankFieldCondition
                            End If

                            If Trim(Condt2) <> "" Then
                                SqlCondt = " Where " & Trim(Condt2)
                            End If

                        End If

                        da = New SqlClient.SqlDataAdapter("select " & vSelectionFieldName & " from " & vTableName & " " & SqlCondt & " order by " & vSelectionFieldName, Cn1)
                        da.SelectCommand.CommandTimeout = 1000
                        da.Fill(dt)
                        .DataSource = dt
                        .DisplayMember = Trim(vSelectionFieldName)

                        .Text = FindStr

                        .SelectionStart = SelStrt  ' FindStr.Length

                        e.Handled = True

                    Else

                        indx = .FindString(FindStr)

                        If indx <> -1 Then
                            .SelectedText = ""
                            .SelectedIndex = indx

                            .SelectionStart = SelStrt  ' FindStr.Length
                            .SelectionLength = .Text.Length
                            e.Handled = True

                        Else
                            .Text = FindStr

                            .SelectionStart = SelStrt  ' FindStr.Length

                            e.Handled = True

                        End If

                    End If

                ElseIf e.KeyValue <> 13 And e.KeyValue <> 17 And e.KeyValue <> 27 Then
                    'If .DroppedDown = False Then
                    '    .DroppedDown = True
                    'End If

                End If

            End With

        Catch ex As NullReferenceException
            'MessageBox.Show(ex.Message, "ERROR IN WHILE KEYDOWN IN COMBOBOX " & sender.ToString & "....", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        Catch ex As ObjectDisposedException
            'MessageBox.Show(ex.Message, "ERROR IN WHILE KEYDOWN IN COMBOBOX " & sender.ToString & "....", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        Catch ex As ArgumentException
            'MessageBox.Show(ex.Message, "ERROR IN WHILE KEYDOWN IN COMBOBOX " & sender.ToString & "....", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

            ' Catch ex As ArgumentOutOfRangeException
            '---MessageBox.Show(ex.Message, "ERROR IN WHILE KEYDOWN IN COMBOBOX " & sender.ToString & "....", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "ERROR IN WHILE KEYDOWN IN COMBOBOX " & sender.ToString & "....", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Shared Sub ComboBox_ItemSelection_KeyDown_111(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs, ByVal Cn1 As SqlClient.SqlConnection, ByVal CboName As ComboBox, ByVal PreviousCtrlName As Object, ByVal NextCtrlName As Object, ByVal vTableName As String, ByVal vSelectionFieldName As String, ByVal vSqlCondition As String, ByVal vBlankFieldCondition As String)
        Dim da As New SqlClient.SqlDataAdapter
        Dim dt As New DataTable
        Dim SqlCondt As String, Condt2 As String
        Dim FindStr As String
        Dim indx As Integer
        Dim SelStrt As Integer

        Try

            With CboName


                If (e.KeyValue = 38 And .DroppedDown = False) Or (e.Control = True And e.KeyValue = 38) Then
                    e.Handled = True
                    If IsNothing(PreviousCtrlName) = False Then
                        PreviousCtrlName.Focus()
                    End If

                ElseIf (e.KeyValue = 40 And .DroppedDown = False) Or (e.Control = True And e.KeyValue = 40) Then
                    e.Handled = True
                    If IsNothing(NextCtrlName) = False Then
                        NextCtrlName.Focus()
                    End If

                ElseIf e.KeyValue = 46 Then

                    SqlCondt = ""
                    Condt2 = ""
                    FindStr = ""
                    indx = -1

                    SelStrt = .SelectionStart

                    If .SelectionStart <= 1 And .SelectionLength > 0 Then
                        .Text = ""
                    End If

                    If Trim(.Text) <> "" Then

                        If .SelectionLength = 0 Then

                            If .SelectionStart > 0 Then
                                FindStr = .Text.Substring(0, .SelectionStart)
                            End If
                            FindStr = FindStr & Mid(CboName.Text, CboName.SelectionStart + 2, Len(CboName.Text))

                        Else

                            FindStr = .Text.Substring(0, .SelectionStart - 1)

                        End If

                        'If .SelectionLength = 0 Then
                        '    FindStr = .Text.Substring(0, .Text.Length - 1)
                        'Else
                        '    FindStr = .Text.Substring(0, .SelectionStart - 1)
                        'End If
                    End If

                    FindStr = LTrim(FindStr)

                    If Trim(vTableName) <> "" Then

                        SqlCondt = ""

                        If Trim(FindStr) <> "" Then
                            SqlCondt = " Where " & vSqlCondition & IIf(Trim(vSqlCondition) <> "", " and ", "") & " (" & vSelectionFieldName & " like '" & FindStr & "%' or " & vSelectionFieldName & " like '% " & FindStr & "%') "

                        Else

                            Condt2 = ""
                            If Trim(vSqlCondition) <> "" Then
                                Condt2 = Trim(vSqlCondition)
                                If Trim(vBlankFieldCondition) <> "" Then Condt2 = Condt2 & IIf(Trim(Condt2) <> "", " or ", "") & vBlankFieldCondition
                            End If

                            If Trim(Condt2) <> "" Then
                                SqlCondt = " Where " & Trim(Condt2)
                            End If

                        End If

                        da = New SqlClient.SqlDataAdapter("select " & vSelectionFieldName & " from " & vTableName & " " & SqlCondt & " order by " & vSelectionFieldName, Cn1)
                        da.Fill(dt)
                        .DataSource = dt
                        .DisplayMember = Trim(vSelectionFieldName)

                        .Text = FindStr

                        .SelectionStart = SelStrt  ' FindStr.Length

                        e.Handled = True

                    Else

                        indx = .FindString(FindStr)

                        If indx <> -1 Then
                            .SelectedText = ""
                            .SelectedIndex = indx

                            .SelectionStart = SelStrt  ' FindStr.Length
                            '.SelectionStart = FindStr.Length
                            .SelectionLength = .Text.Length
                            e.Handled = True

                        Else
                            .Text = FindStr

                            .SelectionStart = SelStrt  ' FindStr.Length

                            e.Handled = True

                        End If

                    End If

                ElseIf e.KeyValue <> 13 And e.KeyValue <> 17 And e.KeyValue <> 27 Then
                    If .DroppedDown = False Then
                        .DroppedDown = True
                    End If

                End If

            End With

        Catch ex As Exception
            'MessageBox.Show(ex.Message, "ERROR IN WHILE KEYDOWN IN COMBOBOX " & sender.ToString & "....", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Shared Sub ComboBox_ItemSelection_DrawItem(ByVal sender As Object, ByVal e As System.Windows.Forms.DrawItemEventArgs)

        Try

            If (e.Index >= 0 AndAlso DirectCast(sender, ComboBox).Items(e.Index) IsNot Nothing) Then

                ' Draw the background 
                e.DrawBackground()
                Dim combo As ComboBox = DirectCast(sender, ComboBox)
                ' Get the item text    
                Dim text As String = combo.GetItemText(combo.Items(e.Index))
                Dim brush As Brush

                'text = combo.GetItemText(combo.Items(e.Index))


                If (e.State And DrawItemState.Selected) = DrawItemState.Selected Then

                    brush = Brushes.White
                    e.Graphics.FillRectangle(brush, e.Bounds)
                    TextRenderer.DrawText(e.Graphics, text, e.Font, e.Bounds.Location, Color.Blue)

                    'e.Graphics.FillRectangle(SystemBrushes.Highlight, e.Bounds)
                    'TextRenderer.DrawText(e.Graphics, text, e.Font, e.Bounds.Location, SystemColors.HighlightText)

                Else
                    e.Graphics.FillRectangle(Brushes.Blue, e.Bounds)
                    TextRenderer.DrawText(e.Graphics, text, e.Font, e.Bounds.Location, Color.White)

                End If

            End If

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT DRAW ITEM...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Shared Function get_Company_From_CompanySelection(ByVal Cn1 As SqlClient.SqlConnection) As String
        Dim da As SqlClient.SqlDataAdapter
        Dim dt1 As New DataTable
        Dim NoofComps As Integer
        Dim CompCondt As String
        Dim CompNm As String

        CompNm = ""
        Common_Procedures.CompIdNo = 0

        If Common_Procedures.settings.CompanyWise_User_Rights = False Or User.IdNo = 1 Then
            Try

                CompCondt = ""
                If Trim(UCase(Common_Procedures.User.Type)) <> "UNACCOUNT" Then
                    CompCondt = "(Company_Type <> 'UNACCOUNT')"
                End If

                da = New SqlClient.SqlDataAdapter("select count(*) from Company_Head Where " & CompCondt & IIf(Trim(CompCondt) <> "", " and ", "") & " Company_IdNo <> 0 and Close_Status = 0", Cn1)
                dt1 = New DataTable
                da.Fill(dt1)

                NoofComps = 0
                If dt1.Rows.Count > 0 Then
                    If IsDBNull(dt1.Rows(0)(0).ToString) = False Then
                        NoofComps = Val(dt1.Rows(0)(0).ToString)
                    End If
                End If
                dt1.Clear()

                If Val(NoofComps) = 1 Then

                    da = New SqlClient.SqlDataAdapter("select Company_IdNo, Company_Name, Company_ShortName from Company_Head Where " & CompCondt & IIf(Trim(CompCondt) <> "", " and ", "") & " Company_IdNo <> 0 and Close_Status = 0 Order by Company_IdNo", Cn1)
                    dt1 = New DataTable
                    da.Fill(dt1)

                    If dt1.Rows.Count > 0 Then
                        If IsDBNull(dt1.Rows(0)(0).ToString) = False Then
                            Common_Procedures.CompIdNo = Val(dt1.Rows(0)(0).ToString)
                            CompNm = Trim(dt1.Rows(0)(1).ToString) & "  -  " & Trim(dt1.Rows(0)(2).ToString)
                        End If
                    End If
                    dt1.Clear()

                Else

                    Dim f As New Company_Selection
                    f.ShowDialog()

                    If Val(Common_Procedures.CompIdNo) <> 0 Then

                        da = New SqlClient.SqlDataAdapter("select Company_IdNo, Company_Name, Company_ShortName from Company_Head where Company_IdNo = " & Str(Val(Common_Procedures.CompIdNo)), Cn1)
                        dt1 = New DataTable
                        da.Fill(dt1)

                        If dt1.Rows.Count > 0 Then
                            If IsDBNull(dt1.Rows(0)(0).ToString) = False Then
                                Common_Procedures.CompIdNo = Val(dt1.Rows(0)(0).ToString)
                                CompNm = Trim(dt1.Rows(0)(1).ToString) & "  -  " & Trim(dt1.Rows(0)(2).ToString)
                            End If
                        End If
                        dt1.Clear()

                    Else
                        MessageBox.Show("Invalid Company Selection", "DOES NOT SELECT...", MessageBoxButtons.OK, MessageBoxIcon.Error)
                        Common_Procedures.CompIdNo = 0
                        get_Company_From_CompanySelection = ""
                        Exit Function

                    End If

                End If

            Catch ex As Exception
                'MessageBox.Show(ex.Message, "DOES NOT SHOW...", MessageBoxButtons.OK, MessageBoxIcon.Error)

            End Try

            get_Company_From_CompanySelection = Trim(CompNm)

        Else


            Try

                CompCondt = ""
                If Trim(UCase(Common_Procedures.User.Type)) <> "UNACCOUNT" Then
                    CompCondt = "(Company_Type <> 'UNACCOUNT')"
                End If

                da = New SqlClient.SqlDataAdapter("select count(*) from Company_Head Where " & CompCondt & IIf(Trim(CompCondt) <> "", " and ", "") &
                                                  " Company_IdNo <> 0 and Close_Status = 0 and Company_IdNo in " &
                                                  "(Select Company_IdNo from " & Common_Procedures.CompanyDetailsDataBaseName & "..User_Access_Rights_CompanyWise where CompanyGroup_IdNo = " & Common_Procedures.CompGroupIdNo.ToString &
                                                  " and User_IdNo = " & User.IdNo & ")", Cn1)
                dt1 = New DataTable
                da.Fill(dt1)

                NoofComps = 0
                If dt1.Rows.Count > 0 Then
                    If IsDBNull(dt1.Rows(0)(0).ToString) = False Then
                        NoofComps = Val(dt1.Rows(0)(0).ToString)
                    End If
                End If
                dt1.Clear()

                If Val(NoofComps) = 1 Then

                    da = New SqlClient.SqlDataAdapter(" select Company_IdNo, Company_Name, Company_ShortName from Company_Head Where " & CompCondt & IIf(Trim(CompCondt) <> "", " And ", "") &
                                                      " Company_IdNo <> 0 And Close_Status = 0  and Company_IdNo in " &
                                                      " (Select Company_IdNo from " & Common_Procedures.CompanyDetailsDataBaseName & "..User_Access_Rights_CompanyWise where CompanyGroup_IdNo = " & Common_Procedures.CompGroupIdNo.ToString &
                                                      " and User_IdNo = " & User.IdNo & ") Order by Company_IdNo", Cn1)
                    dt1 = New DataTable
                    da.Fill(dt1)

                    If dt1.Rows.Count > 0 Then
                        If IsDBNull(dt1.Rows(0)(0).ToString) = False Then
                            Common_Procedures.CompIdNo = Val(dt1.Rows(0)(0).ToString)
                            CompNm = Trim(dt1.Rows(0)(1).ToString) & "  -  " & Trim(dt1.Rows(0)(2).ToString)
                        End If
                    End If
                    dt1.Clear()

                Else

                    Dim f As New Company_Selection
                    f.ShowDialog()

                    If Val(Common_Procedures.CompIdNo) <> 0 Then

                        da = New SqlClient.SqlDataAdapter("select Company_IdNo, Company_Name, Company_ShortName from Company_Head where Company_IdNo = " & Str(Val(Common_Procedures.CompIdNo)), Cn1)
                        dt1 = New DataTable
                        da.Fill(dt1)

                        If dt1.Rows.Count > 0 Then
                            If IsDBNull(dt1.Rows(0)(0).ToString) = False Then
                                Common_Procedures.CompIdNo = Val(dt1.Rows(0)(0).ToString)
                                CompNm = Trim(dt1.Rows(0)(1).ToString) & "  -  " & Trim(dt1.Rows(0)(2).ToString)
                            End If
                        End If
                        dt1.Clear()

                    Else
                        MessageBox.Show("Invalid Company Selection", "DOES Not SELECT...", MessageBoxButtons.OK, MessageBoxIcon.Error)
                        Common_Procedures.CompIdNo = 0
                        get_Company_From_CompanySelection = ""
                        Exit Function

                    End If

                End If

            Catch ex As Exception
                'MessageBox.Show(ex.Message, "DOES Not SHOW...", MessageBoxButtons.OK, MessageBoxIcon.Error)

            End Try

            get_Company_From_CompanySelection = Trim(CompNm)


        End If
    End Function

    Public Shared Function Show_CompanySelection_On_FormClose(ByVal Cn1 As SqlClient.SqlConnection) As String
        Dim da As SqlClient.SqlDataAdapter
        Dim dt1 As New DataTable
        Dim NoofComps As Integer
        Dim CompCondt As String
        Dim CompNm As String

        CompNm = ""
        Common_Procedures.CompIdNo = 0

        Try

            CompCondt = ""
            If Trim(UCase(Common_Procedures.User.Type)) = "ACCOUNT" Then
                CompCondt = "(Company_Type <> 'UNACCOUNT')"
            End If

            da = New SqlClient.SqlDataAdapter("select count(*) from Company_Head Where " & CompCondt & IIf(Trim(CompCondt) <> "", " and ", "") & " Company_IdNo <> 0", Cn1)
            dt1 = New DataTable
            da.Fill(dt1)

            NoofComps = 0
            If dt1.Rows.Count > 0 Then
                If IsDBNull(dt1.Rows(0)(0).ToString) = False Then
                    NoofComps = Val(dt1.Rows(0)(0).ToString)
                End If
            End If
            dt1.Clear()

            If Val(NoofComps) > 1 Then

                Dim f As New Company_Selection
                f.ShowDialog()

                If Val(Common_Procedures.CompIdNo) <> 0 Then

                    da = New SqlClient.SqlDataAdapter("select Company_IdNo, Company_Name, Company_ShortName from Company_Head where Company_IdNo = " & Str(Val(Common_Procedures.CompIdNo)), Cn1)
                    dt1 = New DataTable
                    da.Fill(dt1)

                    If dt1.Rows.Count > 0 Then
                        If IsDBNull(dt1.Rows(0)(0).ToString) = False Then
                            Common_Procedures.CompIdNo = Val(dt1.Rows(0)(0).ToString)
                            CompNm = Trim(dt1.Rows(0)(1).ToString) & "  -  " & Trim(dt1.Rows(0)(2).ToString)
                        End If
                    End If
                    dt1.Clear()

                End If

            End If


        Catch ex As Exception
            'MessageBox.Show(ex.Message, "DOES NOT SHOW...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

        Show_CompanySelection_On_FormClose = Trim(CompNm)

    End Function

    Public Shared Function Show_CompanyCondition_for_Report(ByVal Cn1 As SqlClient.SqlConnection) As Boolean
        Dim da As New SqlClient.SqlDataAdapter
        Dim dt1 As New DataTable
        Dim NoofComps As Integer
        Dim CompCondt As String

        Show_CompanyCondition_for_Report = False

        Try

            CompCondt = ""
            If Trim(UCase(Common_Procedures.User.Type)) <> "UNACCOUNT" Then
                CompCondt = "(Company_Type <> 'UNACCOUNT')"
            End If

            If User.IdNo = 1 Or Not settings.CompanyWise_User_Rights Then
                da = New SqlClient.SqlDataAdapter("select count(*) from Company_Head Where " & CompCondt & IIf(Trim(CompCondt) <> "", " and ", "") & " Company_IdNo <> 0 and Close_Status = 0", Cn1)
            Else
                da = New SqlClient.SqlDataAdapter("select count(*) from Company_Head Where " & CompCondt & IIf(Trim(CompCondt) <> "", " and ", "") & " Company_IdNo IN (Select Company_Idno from " &
                                                  Common_Procedures.CompanyDetailsDataBaseName & "..User_Access_Rights_CompanyWise WHERE User_IdNo = " & User.IdNo & " and CompanyGroup_IdNo = " & CompGroupIdNo.ToString & ") and Close_Status = 0", Cn1)
            End If
            dt1 = New DataTable
            da.Fill(dt1)

            NoofComps = 0
            If dt1.Rows.Count > 0 Then
                If IsDBNull(dt1.Rows(0)(0).ToString) = False Then
                    NoofComps = Val(dt1.Rows(0)(0).ToString)
                End If
            End If
            dt1.Clear()

            If Val(NoofComps) > 1 Then

                Show_CompanyCondition_for_Report = True

            End If


        Catch ex As Exception
            'MessageBox.Show(ex.Message, "DOES NOT SHOW...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        Finally
            dt1.Dispose()
            da.Dispose()

        End Try

    End Function

    Public Shared Sub get_VehicleNo_From_All_Entries(ByVal Cn1 As SqlClient.SqlConnection, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing)
        Dim Cmd As New SqlClient.SqlCommand

        Cmd.Connection = Cn1
        If IsNothing(sqltr) = False Then
            Cmd.Transaction = sqltr
        End If

        Cmd.CommandText = "truncate table " & Trim(Common_Procedures.EntryTempTable) & ""
        Cmd.ExecuteNonQuery()

        Cmd.CommandText = "Insert into " & Trim(Common_Procedures.EntryTempTable) & "(Name1, Int1) select Vehicle_No, count(*) from FinishedProduct_CashSales_Head group by Vehicle_No"
        Cmd.ExecuteNonQuery()
        Cmd.CommandText = "Insert into " & Trim(Common_Procedures.EntryTempTable) & "(Name1, Int1) select Vehicle_No, count(*) from JobWork_Piece_Delivery_Head group by Vehicle_No"
        Cmd.ExecuteNonQuery()

        Cmd.CommandText = "truncate table Vehicle_Head"
        Cmd.ExecuteNonQuery()
        Cmd.CommandText = "Insert into Vehicle_Head(Vehicle_No) values ('')"
        Cmd.ExecuteNonQuery()
        Cmd.CommandText = "Insert into Vehicle_Head(Vehicle_No) select distinct(name1) from " & Trim(Common_Procedures.EntryTempTable) & " where name1 <> ''"
        Cmd.ExecuteNonQuery()

    End Sub

    Public Shared Sub get_CashPartyName_From_All_Entries(ByVal Cn1 As SqlClient.SqlConnection, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing)
        Dim Cmd As New SqlClient.SqlCommand

        Cmd.Connection = Cn1
        If IsNothing(sqltr) = False Then
            Cmd.Transaction = sqltr
        End If

        Cmd.CommandText = "truncate table " & Trim(Common_Procedures.EntryTempTable) & ""
        Cmd.ExecuteNonQuery()

        'Cmd.CommandText = "Insert into " & Trim(Common_Procedures.EntryTempTable) & "(Name1, Int1) select Ledger_DisplayName, count(*) from Ledger_AlaisHead where (Ledger_IdNo = 0 or (Ledger_Type = '' and (AccountsGroup_IdNo = 10 or AccountsGroup_IdNo = 14) ) ) group by Ledger_DisplayName"
        'Cmd.ExecuteNonQuery()
        Cmd.CommandText = "Insert into " & Trim(Common_Procedures.EntryTempTable) & "(Name1, Int1) select Party_Name, count(*) from FinishedProduct_CashSales_Head group by Party_Name"
        Cmd.ExecuteNonQuery()

        Cmd.CommandText = "truncate table Temp_Party_Head"
        Cmd.ExecuteNonQuery()
        Cmd.CommandText = "Insert into Temp_Party_Head(Party_Name) values ('')"
        Cmd.ExecuteNonQuery()
        Cmd.CommandText = "Insert into Temp_Party_Head(Party_Name) select distinct(name1) from " & Trim(Common_Procedures.EntryTempTable) & " where name1 <> ''"
        Cmd.ExecuteNonQuery()

    End Sub

    Public Shared Function Voucher_Updation(ByVal Cn1 As SqlClient.SqlConnection, ByVal Vou_Type As String, ByVal Comp_IdNo As Integer, ByVal Ent_IdnCode As String, ByVal Ref_No As String, ByVal Vou_Date As Date, ByVal vNarr As String, ByVal Led_IDNos As String, ByVal Vou_Amts As String, ByRef ErrMsg As String, Optional ByVal SqlTr As SqlClient.SqlTransaction = Nothing, Optional ByVal vSOFTMOD_IDNo As Integer = 0) As Boolean
        Dim cmd As New SqlClient.SqlCommand
        Dim vforOrdBy As Single = 0
        Dim LedAr() As String, AmtAr() As String
        Dim db_idno As Integer = 0
        Dim cr_idno As Integer = 0
        Dim vTotCrAmt As String = 0
        Dim vTotDrAmt As String = 0
        Dim Mx_DrAmt As String = 0
        Dim Mx_CrAmt As String = 0
        Dim i As Integer = 0
        Dim Sno As Integer = 0
        Dim Nr As Integer = 0
        Dim EntID As String = ""

        Voucher_Updation = False
        ErrMsg = ""

        vforOrdBy = Val(Common_Procedures.OrderBy_CodeToValue(Ref_No))

        LedAr = Split(Led_IDNos, "|")
        AmtAr = Split(Vou_Amts, "|")

        If UBound(LedAr) <> UBound(AmtAr) Then
            ErrMsg = "Invalid Voucher Posting, mismatch of ledger and Amount details"
            Exit Function
        End If

        db_idno = 0 : cr_idno = 0
        Mx_DrAmt = 0 : Mx_CrAmt = 0
        vTotDrAmt = 0 : vTotCrAmt = 0

        For i = 0 To UBound(LedAr)

            If Val(LedAr(i)) <> 0 And Val(AmtAr(i)) <> 0 Then

                If Val(AmtAr(i)) < 0 Then
                    If (db_idno = 0 Or Math.Abs(Val(AmtAr(i))) > Val(Mx_DrAmt)) Then
                        db_idno = Val(LedAr(i))
                        Mx_DrAmt = Math.Abs(Val(AmtAr(i)))
                        Mx_DrAmt = Format(Val(Mx_DrAmt), "##########0.00")
                    End If
                    vTotDrAmt = Format(Val(vTotDrAmt) + Val(AmtAr(i)), "##########0.00")
                End If

                If Val(AmtAr(i)) > 0 Then
                    If (cr_idno = 0 Or Math.Abs(Val(AmtAr(i))) > Val(Mx_CrAmt)) Then
                        cr_idno = Val(LedAr(i))
                        Mx_CrAmt = Math.Abs(Val(AmtAr(i)))
                        Mx_CrAmt = Format(Val(Mx_CrAmt), "##########0.00")
                    End If
                    vTotCrAmt = Format(Val(vTotCrAmt) + Val(AmtAr(i)), "##########0.00")
                End If

            End If

        Next

        vTotDrAmt = Format(Val(vTotDrAmt), "##########0.00")
        vTotCrAmt = Format(Val(vTotCrAmt), "##########0.00")

        If Math.Abs(Val(vTotDrAmt)) <> Math.Abs(Val(vTotCrAmt)) Then
            ErrMsg = "Invalid Voucher Amount - Debit and Credit amount not equal"
            Exit Function
        End If

        EntID = Left(Trim(Ent_IdnCode), 6) & Trim(Ref_No)

        cmd.Connection = Cn1
        If IsNothing(SqlTr) = False Then
            cmd.Transaction = SqlTr
        End If


        cmd.CommandText = "Delete from Voucher_Head Where Company_IdNo = " & Str(Val(Comp_IdNo)) & " and Voucher_Code = '" & Trim(Ent_IdnCode) & "' and Entry_Identification = '" & Trim(Ent_IdnCode) & "'"
        Nr = cmd.ExecuteNonQuery()
        cmd.CommandText = "Delete from Voucher_Details Where Company_IdNo = " & Str(Val(Comp_IdNo)) & " and Voucher_Code = '" & Trim(Ent_IdnCode) & "' and Entry_Identification = '" & Trim(Ent_IdnCode) & "'"
        cmd.ExecuteNonQuery()

        If Val(vTotDrAmt) <> 0 And Val(vTotCrAmt) <> 0 Then


            cmd.Parameters.Clear()
            cmd.Parameters.AddWithValue("@VouchDate", Vou_Date.Date)


            cmd.CommandText = "Insert into Voucher_Head ( Voucher_Code         ,      For_OrderByCode       ,         Company_IdNo       ,          Voucher_No   ,           For_OrderBy      ,         Voucher_Type    , Voucher_Date,          Creditor_Idno   ,          Debtor_Idno     ,     Total_VoucherAmount,          Narration   , Indicate,             Year_For_Report                               ,       Entry_Identification ,           Entry_ID   , Voucher_Receipt_Code ,        Software_Module_IdNo     ) " &
                                        "   Values ('" & Trim(Ent_IdnCode) & "', " & Str(Val(vforOrdBy)) & ", " & Str(Val(Comp_IdNo)) & ", '" & Trim(Ref_No) & "', " & Str(Val(vforOrdBy)) & ", '" & Trim(Vou_Type) & "',   @VouchDate, " & Str(Val(cr_idno)) & ", " & Str(Val(db_idno)) & ", " & Str(vTotDrAmt) & " , '" & Trim(vNarr) & "',     1   , " & Str(Val(Year(Common_Procedures.Company_FromDate))) & ", '" & Trim(Ent_IdnCode) & "', '" & Trim(EntID) & "',             ''       , " & Str(Val(vSOFTMOD_IDNo)) & " ) "
            cmd.ExecuteNonQuery()

            Sno = 0

            For i = 0 To UBound(LedAr)

                If Val(LedAr(i)) <> 0 And Val(AmtAr(i)) <> 0 Then

                    Sno = Sno + 1
                    cmd.CommandText = "Insert into Voucher_Details ( Voucher_Code   ,        For_OrderByCode     ,          Company_IdNo      ,        Voucher_No     ,           For_OrderBy      ,       Voucher_Type      , Voucher_Date,           SL_No      ,          Ledger_IdNo      ,              Voucher_Amount                         ,         Narration    ,             Year_For_Report                               ,   Entry_Identification     ,           Entry_ID   ,        Software_Module_IdNo    ) " &
                                      " Values          ('" & Trim(Ent_IdnCode) & "', " & Str(Val(vforOrdBy)) & ", " & Str(Val(Comp_IdNo)) & ", '" & Trim(Ref_No) & "', " & Str(Val(vforOrdBy)) & ", '" & Trim(Vou_Type) & "',  @VouchDate , " & Str(Val(Sno)) & ", " & Str(Val(LedAr(i))) & ", " & Str(Format(Val(AmtAr(i)), "##########0.00")) & ", '" & Trim(vNarr) & "', " & Str(Val(Year(Common_Procedures.Company_FromDate))) & ", '" & Trim(Ent_IdnCode) & "', '" & Trim(EntID) & "', " & Str(Val(vSOFTMOD_IDNo)) & ")"
                    cmd.ExecuteNonQuery()

                End If

            Next i

        End If

        cmd.Dispose()

        Voucher_Updation = True

    End Function

    Public Shared Function Voucher_Deletion(ByVal Cn1 As SqlClient.SqlConnection, ByVal Comp_IdNo As Integer, ByVal Ent_IdnCode As String, Optional ByVal SqlTr As SqlClient.SqlTransaction = Nothing) As Boolean
        Dim cmd As New SqlClient.SqlCommand

        Voucher_Deletion = False

        cmd.Connection = Cn1
        If IsNothing(SqlTr) = False Then
            cmd.Transaction = SqlTr
        End If

        cmd.CommandText = "Delete from Voucher_Head Where Company_IdNo = " & Str(Val(Comp_IdNo)) & " and Voucher_Code = '" & Trim(Ent_IdnCode) & "' and Entry_Identification = '" & Trim(Ent_IdnCode) & "'"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Delete from Voucher_Details Where Company_IdNo = " & Str(Val(Comp_IdNo)) & " and Voucher_Code = '" & Trim(Ent_IdnCode) & "' and Entry_Identification = '" & Trim(Ent_IdnCode) & "'"
        cmd.ExecuteNonQuery()

        Voucher_Deletion = True
    End Function

    Public Shared Function VoucherBill_Posting(ByVal Cn1 As SqlClient.SqlConnection, ByVal Comp_IdNo As Integer, ByVal Vou_Bil_Date As Date, ByVal Led_IdNo As Integer, ByVal Par_Bil_No As String, ByVal Agt_Idno As Integer, ByVal Bil_Amt As Double, ByVal CrDr_Type As String, ByVal Ent_Idn As String, Optional ByVal SqlTr As SqlClient.SqlTransaction = Nothing, Optional ByVal vSOFTMOD_IDNo As Integer = 0, Optional ByVal SaveAll_STS As Boolean = False) As String
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Cmd As New SqlClient.SqlCommand
        Dim Posting_Column As String = ""
        Dim Adjust_Column As String = ""
        Dim Nr As Long = 0
        Dim adj_amt As Double = 0
        Dim amt As Double = 0
        Dim RcptAmt As Double = 0
        Dim Tot_AdvBil_Amt As Single = 0
        Dim vou_amt As Double = 0
        Dim bill_main_sts As Boolean = False
        Dim vou_bil_no As String = ""
        Dim vou_bil_code As String = ""
        Dim vou_bil_detcode As String = ""
        Dim NewEntry As Boolean = False
        Dim Show_AdvBillAdj_sts As Boolean = False

        Err.Clear()
        Err.Description = ""

        vou_bil_code = get_FieldValue(Cn1, "Voucher_Bill_Head", "VoUcher_Bill_Code", "(Entry_Identification = '" & Trim(Ent_Idn) & "')", , SqlTr)
        vou_bil_no = get_FieldValue(Cn1, "Voucher_Bill_Head", "VoUcher_Bill_No", "(Entry_Identification = '" & Trim(Ent_Idn) & "')", , SqlTr)

        vou_bil_detcode = get_FieldValue(Cn1, "Voucher_Bill_Details", "VoUcher_Bill_Code", "(Entry_Identification = '" & Trim(Ent_Idn) & "')", , SqlTr)

        If Trim(UCase(get_FieldValue(Cn1, "Ledger_head", "Bill_Type", "(Ledger_idno = " & Str(Val(Led_IdNo)) & ")", , SqlTr))) = "BILL TO BILL" Then bill_main_sts = True Else bill_main_sts = False

        Cmd.Connection = Cn1
        Cmd.Parameters.Clear()
        Cmd.Parameters.AddWithValue("@VouchDate", Vou_Bil_Date)

        If IsNothing(SqlTr) = False Then
            Cmd.Transaction = SqlTr
        End If

        If bill_main_sts = False Then

            If Trim(vou_bil_code) = "" And Trim(vou_bil_detcode) = "" Then
                VoucherBill_Posting = ""
                Exit Function

            Else

                If VoucherBill_Checking(Cn1, vou_bil_code, Ent_Idn, CrDr_Type, Led_IdNo, Bil_Amt, SqlTr) = False Then
                    VoucherBill_Posting = "Error"
                    Exit Function

                Else

                    Cmd.CommandText = "delete from voucher_bill_head where entry_identification = '" & Trim(Ent_Idn) & "'"
                    Cmd.ExecuteNonQuery()

                    Cmd.CommandText = "delete from voucher_bill_details where entry_identification = '" & Trim(Ent_Idn) & "'"
                    Cmd.ExecuteNonQuery()

                    Cmd.CommandText = "delete from voucher_bill_details where Voucher_Bill_Code = '" & Trim(vou_bil_code) & "'"
                    Cmd.ExecuteNonQuery()

                    VoucherBill_Posting = ""
                    Exit Function

                End If

            End If

        End If

        Posting_Column = IIf(Trim(UCase(CrDr_Type)) = "CR", "Credit", "Debit")
        Adjust_Column = IIf(Trim(UCase(CrDr_Type)) = "CR", "Debit", "Credit")

        Nr = 0
        If Trim(vou_bil_code) = "" Then

            vou_bil_no = get_MaxCode(Cn1, "Voucher_Bill_Head", "Voucher_Bill_Code", "For_OrderBy", "", Val(Comp_IdNo), Common_Procedures.FnYearCode, SqlTr)
            vou_bil_code = Trim(Val(Comp_IdNo)) & "-" & Trim(vou_bil_no) & "/" & Trim(Common_Procedures.FnYearCode)

            Err.Description = ""
            NewEntry = True
            GoTo AdvanceBills_Display
LOOP100:
            If Trim(UCase(Err.Description)) = "ERROR" Then
                VoucherBill_Posting = "Error"
                Exit Function
            End If

            Nr = 0
            Cmd.CommandText = "Insert into Voucher_bill_head ( voucher_bill_code,          company_idno      ,          voucher_bill_no  ,             for_orderby     , voucher_bill_date,            ledger_idno    ,         party_bill_no     ,          agent_idno       ,         bill_amount      , " & Trim(Posting_Column) & "_amount, " & Trim(Adjust_Column) & "_amount,              crdr_type          ,       entry_identification     ,        Software_Module_IdNo    ) " _
                                    & " Values (    '" & Trim(vou_bil_code) & "', " & Str(Val(Comp_IdNo)) & ", '" & Trim(vou_bil_no) & "', " & Str(Val(vou_bil_no)) & ",     @VouchDate   , " & Str(Val(Led_IdNo)) & ", '" & Trim(Par_Bil_No) & "', " & Str(Val(Agt_Idno)) & ", " & Str(Val(Bil_Amt)) & ", " & Str(Val(Bil_Amt)) & "          , " & Str(Val(adj_amt)) & "         , '" & Trim(UCase(CrDr_Type)) & "', '" & Trim(UCase(Ent_Idn)) & "' , " & Str(Val(vSOFTMOD_IDNo)) & ")"
            Nr = Cmd.ExecuteNonQuery

        Else

            If VoucherBill_Checking(Cn1, vou_bil_code, Ent_Idn, CrDr_Type, Led_IdNo, Bil_Amt, SqlTr) = False Then
                VoucherBill_Posting = "Error"
                Exit Function
            End If

            Err.Description = ""
            NewEntry = False
            GoTo AdvanceBills_Display

LOOP200:
            If Trim(UCase(Err.Description)) = "ERROR" Then
                VoucherBill_Posting = "Error"
                Exit Function
            End If

            Nr = 0
            Cmd.CommandText = "update voucher_bill_head set Voucher_bill_date = @VouchDate, party_bill_no = '" & Trim(Par_Bil_No) & "', agent_idno = " & Str(Val(Agt_Idno)) & ", bill_amount = " & Str(Val(Bil_Amt)) & ", " & Trim(Posting_Column) & "_amount = " & Str(Val(Bil_Amt)) & ", " & Trim(Adjust_Column) & "_amount = " & Str(Val(adj_amt + vou_amt)) & ", Software_Module_IdNo = " & Str(Val(vSOFTMOD_IDNo)) & " " _
                                & "  Where voucher_bill_code = '" & Trim(vou_bil_code) & "' and Ledger_Idno = " & Str(Led_IdNo)
            Nr = Cmd.ExecuteNonQuery

            If Nr = 0 Then

                Cmd.CommandText = "update voucher_bill_head set credit_amount = a.credit_amount - b.amount from voucher_bill_head a, voucher_bill_details b where b.entry_identification = '" & Trim(UCase(Ent_Idn)) & "' and b.Ledger_Idno <> " & Str(Led_IdNo) & " and b.crdr_type = 'CR' and a.voucher_bill_code = b.voucher_bill_code"
                Cmd.ExecuteNonQuery()

                Cmd.CommandText = "update voucher_bill_head set debit_amount = a.debit_amount - b.amount from voucher_bill_head a, voucher_bill_details b where b.entry_identification = '" & Trim(UCase(Ent_Idn)) & "' and b.Ledger_Idno <> " & Str(Led_IdNo) & " and b.crdr_type = 'DR' and a.voucher_bill_code = b.voucher_bill_code"
                Cmd.ExecuteNonQuery()

                Cmd.CommandText = "delete from voucher_bill_details where entry_identification = '" & Trim(UCase(Ent_Idn)) & "' and Ledger_Idno <> " & Str(Led_IdNo)
                Cmd.ExecuteNonQuery()

                Cmd.CommandText = "delete from voucher_bill_head where entry_identification = '" & Trim(UCase(Ent_Idn)) & "' and Ledger_Idno <> " & Str(Led_IdNo)
                Cmd.ExecuteNonQuery()

                Cmd.CommandText = "Insert into voucher_bill_head ( voucher_bill_code,           company_idno     ,        voucher_bill_no    ,            for_orderby      , voucher_bill_date,        ledger_idno   ,        party_bill_no      ,        agent_idno    ,      bill_amount    , " & Trim(Posting_Column) & "_amount, " & Trim(Adjust_Column) & "_amount,         crdr_type        ,        entry_identification    ,      Software_Module_IdNo      ) " _
                                        & "  Values ( '" & Trim(vou_bil_code) & "'  , " & Str(Val(Comp_IdNo)) & ", '" & Trim(vou_bil_no) & "', " & Str(Val(vou_bil_no)) & ",     @VouchDate   , " & Str(Led_IdNo) & ", '" & Trim(Par_Bil_No) & "', " & Str(Agt_Idno) & ", " & Str(Bil_Amt) & ", " & Str(Bil_Amt) & "               , " & Str(adj_amt) & "              , '" & Trim(CrDr_Type) & "', '" & Trim(UCase(Ent_Idn)) & "' , " & Str(Val(vSOFTMOD_IDNo)) & ")"
                Nr = Cmd.ExecuteNonQuery

            End If

        End If

        If Val(adj_amt) > 0 Then
            Cmd.CommandText = "Insert into voucher_bill_details ( Voucher_Bill_Code,           Company_Idno     , Voucher_Bill_Date,        Ledger_Idno        ,   entry_identification ,            Amount        ,              CrDr_Type                   ) " &
                                            " Values ( '" & Trim(vou_bil_code) & "', " & Str(Val(Comp_IdNo)) & ",      @VouchDate  , " & Str(Val(Led_IdNo)) & ", '" & Trim(Ent_Idn) & "', " & Str(Val(adj_amt)) & ", '" & Trim(Left$(Adjust_Column, 1)) & "R' )"
            Cmd.ExecuteNonQuery()
        End If

        If Nr = 0 Then VoucherBill_Posting = "Error" Else VoucherBill_Posting = vou_bil_code

        Cmd.Dispose()
        Dt1.Dispose()
        Da1.Dispose()

        Exit Function


AdvanceBills_Display:

        RcptAmt = 0
        Da1 = New SqlClient.SqlDataAdapter("Select sum(amount) from voucher_bill_details where ledger_idno = " & Str(Val(Led_IdNo)) & " and Voucher_Bill_Code = '" & Trim(vou_bil_code) & "' and Entry_Identification <> '" & Trim(Ent_Idn) & "'", Cn1)
        If IsNothing(SqlTr) = False Then
            Da1.SelectCommand.Transaction = SqlTr
        End If
        Dt1 = New DataTable
        Da1.Fill(Dt1)
        If Dt1.Rows.Count > 0 Then
            If IsDBNull(Dt1.Rows(0)(0).ToString) = False Then RcptAmt = Val(Dt1.Rows(0)(0).ToString)
        End If
        Dt1.Clear()
        Dt1.Dispose()
        Da1.Dispose()

        Show_AdvBillAdj_sts = True
        If RcptAmt > 0 Then
            If RcptAmt >= Bil_Amt Then
                Show_AdvBillAdj_sts = False
            End If
        End If

        amt = 0
        adj_amt = 0 : vou_amt = 0
        Tot_AdvBil_Amt = 0

        If Show_AdvBillAdj_sts = True Then

            Da1 = New SqlClient.SqlDataAdapter("Select sum(" & Trim(Adjust_Column) & "_amount - " & Trim(Posting_Column) & "_amount) from voucher_bill_head where company_idno = " & Str(CompIdNo) & " and ledger_idno = " & Str(Val(Led_IdNo)) & " and " & Trim(Adjust_Column) & "_amount > " & Trim(Posting_Column) & "_amount", Cn1)
            If IsNothing(SqlTr) = False Then
                Da1.SelectCommand.Transaction = SqlTr
            End If
            Dt1 = New DataTable
            Da1.Fill(Dt1)
            If Dt1.Rows.Count > 0 Then
                If IsDBNull(Dt1.Rows(0)(0).ToString) = False Then amt = Val(Dt1.Rows(0)(0).ToString)
            End If
            Dt1.Clear()

            Da1 = New SqlClient.SqlDataAdapter("Select sum(amount) from voucher_bill_details where company_idno = " & Str(CompIdNo) & " and ledger_idno = " & Str(Val(Led_IdNo)) & " and entry_identification = '" & Trim(Ent_Idn) & "'", Cn1)
            If IsNothing(SqlTr) = False Then
                Da1.SelectCommand.Transaction = SqlTr
            End If
            Dt1 = New DataTable
            Da1.Fill(Dt1)
            If Dt1.Rows.Count > 0 Then
                If IsDBNull(Dt1.Rows(0)(0).ToString) = False Then amt = amt + Val(Dt1.Rows(0)(0).ToString)
            End If
            Dt1.Clear()

            adj_amt = 0 : vou_amt = 0
            Tot_AdvBil_Amt = 0
            If amt > 0 Then

                'If Common_Procedures.settings.CustomerCode <> "1393" Then

                Dim f1 As New Advance_Bill_Adjustment

                f1.Bills_Display(Cn1, Comp_IdNo, vou_bil_code, Vou_Bil_Date, Led_IdNo, Par_Bil_No, Agt_Idno, CrDr_Type, Bil_Amt, Ent_Idn, Tot_AdvBil_Amt, SqlTr, SaveAll_STS)

                If Tot_AdvBil_Amt > 0 Then
                    f1.ShowDialog()


                Else
                    f1.Close()
                    f1.Dispose()

                End If

                'End If


            End If

        End If

        Da1 = New SqlClient.SqlDataAdapter("Select sum(amount) from voucher_bill_details where voucher_bill_code = '" & Trim(vou_bil_code) & "' and entry_identification <> '" & Trim(Ent_Idn) & "'", Cn1)
        If IsNothing(SqlTr) = False Then
            Da1.SelectCommand.Transaction = SqlTr
        End If
        Dt1 = New DataTable
        Da1.Fill(Dt1)
        If Dt1.Rows.Count > 0 Then
            If IsDBNull(Dt1.Rows(0)(0).ToString) = False Then vou_amt = Val(Dt1.Rows(0)(0).ToString)
        End If
        Dt1.Clear()

        Da1 = New SqlClient.SqlDataAdapter("Select sum(amount) from voucher_bill_details where voucher_bill_code <> '" & Trim(vou_bil_code) & "' and entry_identification = '" & Trim(Ent_Idn) & "' and ledger_idno = " & Str(Val(Led_IdNo)), Cn1)
        If IsNothing(SqlTr) = False Then
            Da1.SelectCommand.Transaction = SqlTr
        End If
        Dt1 = New DataTable
        Da1.Fill(Dt1)
        If Dt1.Rows.Count > 0 Then
            If IsDBNull(Dt1.Rows(0)(0).ToString) = False Then adj_amt = Val(Dt1.Rows(0)(0).ToString)
        End If
        Dt1.Clear()

        If NewEntry = True Then
            GoTo LOOP100
        Else
            GoTo LOOP200
        End If

    End Function

    Public Shared Function VoucherBill_Checking(ByVal Cn1 As SqlClient.SqlConnection, ByVal vou_bil_cd As String, ByVal ent_idn As String, ByVal crdr_type As String, ByVal c_ledidno As Integer, ByVal c_amt As Double, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Boolean
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim amt As Double = 0
        Dim Led_Id As Integer = 0

        VoucherBill_Checking = True

        Err.Clear()
        Led_Id = 0
        amt = 0

        Da1 = New SqlClient.SqlDataAdapter("Select ledger_idno, sum(amount) from voucher_bill_details where Voucher_Bill_Code = '" & Trim(vou_bil_cd) & "' and Entry_Identification <> '" & Trim(ent_idn) & "' group by ledger_idno", Cn1)
        If IsNothing(sqltr) = False Then
            Da1.SelectCommand.Transaction = sqltr
        End If
        Dt1 = New DataTable
        Da1.Fill(Dt1)
        If Dt1.Rows.Count > 0 Then
            If IsDBNull(Dt1.Rows(0)(0).ToString) = False Then Led_Id = Val(Dt1.Rows(0)(0).ToString)
            If IsDBNull(Dt1.Rows(0)(1).ToString) = False Then amt = Val(Dt1.Rows(0)(1).ToString)
        End If
        Dt1.Clear()
        Dt1.Dispose()
        Da1.Dispose()

        If amt > 0 Then
            If amt > c_amt Then
                Err.Description = "Already " & IIf(crdr_type = "Cr", "paid", "received") & " amount is Rs." & Trim(Format(amt, "#######0.00"))
                VoucherBill_Checking = False
            End If
            If c_ledidno <> Led_Id Then
                Err.Description = "Does not change the party name" & Chr(13) & "Already " & IIf(crdr_type = "Cr", "paid", "received") & " amount is Rs." & Trim(Format(amt, "#######0.00"))
                VoucherBill_Checking = False
            End If
        End If

    End Function

    Public Shared Function VoucherBill_Deletion(ByVal Cn1 As SqlClient.SqlConnection, ByVal ent_idn As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Boolean
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Cmd As New SqlClient.SqlCommand
        Dim vou_bil_code As String = ""
        Dim Amt As Double = 0
        Dim Nr As Long = 0

        vou_bil_code = get_FieldValue(Cn1, "Voucher_Bill_Head", "VoUcher_Bill_Code", "(Entry_Identification = '" & Trim(ent_idn) & "')", , sqltr)

        Amt = 0
        Da1 = New SqlClient.SqlDataAdapter("Select sum(amount) from voucher_bill_details where voucher_bill_code = '" & Trim(vou_bil_code) & "' and entry_identification <> '" & Trim(ent_idn) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da1.SelectCommand.Transaction = sqltr
        End If
        Dt1 = New DataTable
        Da1.Fill(Dt1)
        If Dt1.Rows.Count > 0 Then
            If IsDBNull(Dt1.Rows(0)(0).ToString) = False Then Amt = Val(Dt1.Rows(0)(0).ToString)
        End If
        Dt1.Clear()

        If Val(Amt) <> 0 Then
            VoucherBill_Deletion = False
            Throw New ApplicationException("Already Received/Paid Amount is  Rs." & Trim(Format(Amt, "#########0.00")))
            'Err.Description = "Already Received/Paid Amount is  Rs." & Trim(Format(Amt, "#########0.00"))

        Else

            Cmd.Connection = Cn1

            If IsNothing(sqltr) = False Then
                Cmd.Transaction = sqltr
            End If

            Cmd.CommandText = "update voucher_bill_head set credit_amount = a.credit_amount - b.amount from voucher_bill_head a, voucher_bill_details b where b.entry_identification = '" & Trim(ent_idn) & "' and b.crdr_type = 'CR' and a.voucher_bill_code = b.voucher_bill_code"
            Nr = Cmd.ExecuteNonQuery()

            Cmd.CommandText = "update voucher_bill_head set debit_amount = a.debit_amount - b.amount from voucher_bill_head a, voucher_bill_details b where b.entry_identification = '" & Trim(ent_idn) & "' and b.crdr_type = 'DR' and a.voucher_bill_code = b.voucher_bill_code"
            Nr = Cmd.ExecuteNonQuery()

            Cmd.CommandText = "delete from voucher_bill_details where entry_identification = '" & Trim(ent_idn) & "'"
            Nr = Cmd.ExecuteNonQuery()

            Cmd.CommandText = "delete from voucher_bill_head where entry_identification = '" & Trim(ent_idn) & "'"
            Nr = Cmd.ExecuteNonQuery()

            VoucherBill_Deletion = True

        End If

        Cmd.Dispose()
        Da1.Dispose()
        Dt1.Dispose()

    End Function

    Public Shared Function Meter_RoundOff(ByVal Mtr As Single) As Single

        Select Case Val(Mtr) - Int(Val(Mtr))
            Case Is < 0.13
                Mtr = Int(Mtr)
            Case Is < 0.25 + 0.13
                Mtr = Int(Mtr) + 0.25
            Case Is < 0.5 + 0.13
                Mtr = Int(Mtr) + 0.5
            Case Is < 0.75 + 0.13
                Mtr = Int(Mtr) + 0.75
            Case Else
                Mtr = Int(Mtr) + 1
        End Select

        Meter_RoundOff = Val(Mtr)

    End Function

    Public Shared Sub Printing_PackingSlip_Format1(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByVal prn_HdMxIndx As Integer, ByVal prn_DetMxIndx As Integer, ByRef prn_HdAr(,) As String, ByRef prn_DetAr(,,) As String, ByRef prn_PageNo As Integer, ByRef prn_Count As Integer, ByRef prn_HdIndx As Integer, ByRef prn_DetIndx As Integer)
        Dim I As Integer, NoofDets As Integer, NoofItems_PerPage As Integer
        Dim pFont As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim ps As Printing.PaperSize
        Dim strHeight As Single = 0
        Dim PpSzSTS As Boolean = False
        Dim LM As Single = 0, TM As Single = 0
        Dim PgWt As Single = 0, PrWt As Single = 0
        Dim PgHt As Single = 0, PrHt As Single = 0

        For I = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(I).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(I)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                PrintDocument1.DefaultPageSettings.Landscape = False
                e.PageSettings.PaperSize = ps
                Exit For
            End If
        Next

        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 20 ' 40
            .Right = 40
            .Top = 20 ' 30  '60
            .Bottom = 40
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = (.Width / 2) - RMargin - LMargin
            PrintHeight = (.Height / 2) - TMargin - BMargin
            PageWidth = (.Width / 2) - RMargin
            PageHeight = (.Height / 2) - BMargin
        End With

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        pFont = New Font("Calibri", 10, FontStyle.Regular)

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1267" Then '---- BRT SIZING (SOMANUR)
            NoofItems_PerPage = 12 '10
        Else
            NoofItems_PerPage = 13 ' 17 ' 20 
        End If

        Erase ClArr
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = 110 : ClArr(2) = 110 : ClArr(3) = 120

        TxtHgt = 18.75 ' 19 ' e.Graphics.MeasureString("A", pFont).Height  ' 20

        Try

            If prn_HdDt.Rows.Count > 0 Then

                If prn_HdMxIndx > 0 Then

                    Do While prn_HdIndx <= prn_HdMxIndx

                        If prn_Count Mod 4 = 1 Then
                            LM = LMargin
                            TM = TMargin
                            PgWt = PageWidth
                            PgHt = PageHeight
                            PrWt = PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 4 = 2 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + LMargin
                            TM = TMargin
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 4 = 3 Then
                            LM = LMargin
                            TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 2) + TMargin
                            PgWt = PageWidth
                            PgHt = PageHeight
                            PrWt = PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 4 = 0 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + LMargin
                            TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 2) + TMargin
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PrintWidth
                            PrHt = PrintHeight

                        End If

                        Erase LnAr
                        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

                        Printing_PackingSlip_Format1_PageHeader(PrintDocument1, e, prn_HdDt, prn_HdAr, TxtHgt, pFont, LM, RMargin, TM, BMargin, PgWt, PrWt, prn_PageNo, NoofItems_PerPage, CurY, LnAr, ClArr, prn_HdIndx)
                        CurY = CurY - 10

                        NoofDets = 0
                        Do While prn_DetIndx < Val(prn_HdAr(prn_HdIndx, 3))

                            If NoofDets >= NoofItems_PerPage Then

                                CurY = CurY + TxtHgt
                                Common_Procedures.Print_To_PrintDocument(e, "Continued....", LM + ClArr(1) + ClArr(2) + ClArr(3) - 10, CurY, 1, 0, pFont)
                                NoofDets = NoofDets + 1

                                Printing_PackingSlip_Format1_PageFooter(PrintDocument1, e, prn_HdAr, TxtHgt, pFont, LM, RMargin, TM, BMargin, PgWt, PrWt, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_HdIndx, False)

                                'prn_DetIndx = prn_DetIndx + NoofItems_PerPage

                                e.HasMorePages = True

                                prn_Count = prn_Count + 1

                                Return

                            End If

                            prn_DetIndx = prn_DetIndx + 1

                            If Val(prn_DetAr(prn_HdIndx, prn_DetIndx, 3)) <> 0 Then

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, prn_DetIndx, 1)), LM + 15, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, prn_DetIndx, 2)), LM + ClArr(1) + 15, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr(prn_HdIndx, prn_DetIndx, 3)), "#########0.00"), LM + ClArr(1) + ClArr(2) + ClArr(3) - 15, CurY, 1, 0, pFont)

                                NoofDets = NoofDets + 1

                            End If

                        Loop

                        Printing_PackingSlip_Format1_PageFooter(PrintDocument1, e, prn_HdAr, TxtHgt, pFont, LM, RMargin, TM, BMargin, PgWt, PrWt, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_HdIndx, True)

                        prn_HdIndx = prn_HdIndx + 1
                        prn_Count = prn_Count + 1
                        prn_DetIndx = 0

                        If prn_HdIndx <= prn_HdMxIndx Then

                            If (prn_Count - 1) Mod 4 = 0 Then

                                e.HasMorePages = True
                                Return

                            End If

                        End If

                    Loop

                End If

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

        e.HasMorePages = False

    End Sub

    Public Shared Sub Printing_PackingSlip_Format1_PageHeader(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal prn_HdIndx As Integer)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim dt3 As New DataTable
        Dim dt4 As New DataTable
        Dim p1Font As Font
        Dim strHeight As Single
        Dim W1 As Single
        Dim PrntWt As Single = 0
        Dim Cmp_Name As String = ""
        Dim Cmp_Add As String = ""

        PageNo = PageNo + 1

        CurY = TMargin

        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString

        Cmp_Add = ""
        If Trim(prn_HdDt.Rows(0).Item("Company_Address4").ToString) <> "" Then
            Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address4").ToString)
        ElseIf Trim(prn_HdDt.Rows(0).Item("Company_Address3").ToString) <> "" Then
            Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address3").ToString)
        ElseIf Trim(prn_HdDt.Rows(0).Item("Company_Address2").ToString) <> "" Then
            Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address2").ToString)
        ElseIf Trim(prn_HdDt.Rows(0).Item("Company_Address1").ToString) <> "" Then
            Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address1").ToString)
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_logo_Image").ToString) <> "" Then

            If IsDBNull(prn_HdDt.Rows(0).Item("Company_logo_Image")) = False Then

                Dim imageData As Byte() = DirectCast(prn_HdDt.Rows(0).Item("Company_logo_Image"), Byte())
                If Not imageData Is Nothing Then
                    Using ms As New MemoryStream(imageData, 0, imageData.Length)
                        ms.Write(imageData, 0, imageData.Length)

                        If imageData.Length > 0 Then

                            '.BackgroundImage = Image.FromStream(ms)

                            ' e.Graphics.DrawImage(DirectCast(pic_IRN_QRCode_Image_forPrinting.BackgroundImage, Drawing.Image), PageWidth - 108, CurY + 10, 90, 90)
                            e.Graphics.DrawImage(DirectCast(Image.FromStream(ms), Drawing.Image), LMargin, CurY, 70, 70)

                        End If

                    End Using

                End If

            End If

        End If
        PrntWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) - PrintDocument1.DefaultPageSettings.Margins.Right - PrintDocument1.DefaultPageSettings.Margins.Left

        If Trim(Common_Procedures.settings.CustomerCode) <> "1234" Then

            CurY = TMargin
            p1Font = New Font("Calibri", 16, FontStyle.Bold)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrntWt, p1Font)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            CurY = CurY + strHeight - 5
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Add, LMargin, CurY, 2, PrntWt, pFont)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            CurY = CurY + TxtHgt + 5
        End If

        p1Font = New Font("Calibri", 13, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, "PACKING SLIP", LMargin, CurY, 2, PrntWt, p1Font)
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

        Try

            W1 = e.Graphics.MeasureString("BUNDLE NO   :  ", pFont).Width

            CurY = CurY + strHeight + 5
            If Trim(UCase(prn_HdAr(prn_HdIndx, 5))) = "BUNDLE" Then
                Common_Procedures.Print_To_PrintDocument(e, "BUNDLE NO", LMargin, CurY, 0, 0, pFont)
            ElseIf Trim(UCase(prn_HdAr(prn_HdIndx, 5))) = "ROLL" Then
                Common_Procedures.Print_To_PrintDocument(e, "ROLL NO", LMargin, CurY, 0, 0, pFont)
            Else
                Common_Procedures.Print_To_PrintDocument(e, "BALE NO", LMargin, CurY, 0, 0, pFont)
            End If
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1, CurY, 0, 0, pFont)
            p1Font = New Font("Calibri", 13, FontStyle.Bold)
            Common_Procedures.Print_To_PrintDocument(e, prn_HdAr(prn_HdIndx, 1), LMargin + W1 + 25, CurY, 0, 0, p1Font)

            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, "QUALITY", LMargin, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, prn_HdAr(prn_HdIndx, 2), LMargin + W1 + 25, CurY, 0, 0, pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(1) = CurY

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "LOT NO", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PCS NO", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "METERS", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(2) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Shared Sub Printing_PackingSlip_Format1_PageFooter(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal NoofDets As Integer, ByVal prn_HdIndx As Integer, ByVal is_LastPage As Boolean)
        Dim I As Integer

        Try

            For I = NoofDets + 1 To NoofItems_PerPage
                CurY = CurY + TxtHgt
            Next

            CurY = CurY + TxtHgt
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(3) = CurY

            CurY = CurY + TxtHgt - 10

            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdAr(prn_HdIndx, 3))), LMargin + ClAr(1) + 15, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdAr(prn_HdIndx, 4)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) - 15, CurY, 1, 0, pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(4) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(1))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY, LMargin + ClAr(1), LnAr(1))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY, LMargin + ClAr(1) + ClAr(2), LnAr(1))
            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(1))

            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1267" Then '---- BRT SIZING (SOMANUR)
                Dim vYrCode As String = ""
                Dim vBarCode As String = ""
                Dim BarFont As Font
                Dim CurX As Single
                Dim PrntWt As Single
                Dim strWidth As Single
                Dim strHEIGHT As Single

                vYrCode = Microsoft.VisualBasic.Right(prn_HdAr(prn_HdIndx, 6), 5)
                vBarCode = Microsoft.VisualBasic.Left(vYrCode, 2) & Trim(Val(prn_HdAr(prn_HdIndx, 7))) & Trim(UCase(prn_HdAr(prn_HdIndx, 1)))
                vBarCode = "*" & Trim(UCase(vBarCode)) & "*"

                BarFont = New Font("Free 3 of 9", 36, FontStyle.Regular)
                'BarFont = New Font("Free 3 of 9", 24, FontStyle.Regular)
                'BarFont = New Font("Free 3 of 9", 18, FontStyle.Regular)

                PrntWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) - PrintDocument1.DefaultPageSettings.Margins.Right - PrintDocument1.DefaultPageSettings.Margins.Left

                strWidth = e.Graphics.MeasureString(Trim(vBarCode), BarFont).Width
                strHEIGHT = e.Graphics.MeasureString(Trim(vBarCode), BarFont).Height

                If PrntWt > strWidth Then
                    CurX = LMargin + (PrntWt - strWidth) / 2
                Else
                    CurX = LMargin
                End If

                CurY = CurY + TxtHgt - 5
                e.Graphics.DrawString(Trim(vBarCode), BarFont, Brushes.Black, CurX, CurY)

                pFont = New Font("Calibri", 9, FontStyle.Bold)
                CurY = CurY + strHEIGHT + 2 ' 5
                CurX = LMargin
                Common_Procedures.Print_To_PrintDocument(e, Trim(vBarCode), CurX, CurY, 2, PrntWt, pFont, , True)

                'Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrntWt, p1Font)

            End If


        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub



    Public Shared Sub Printing_PackingSlip_Format2(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByVal prn_HdMxIndx As Integer, ByVal prn_DetMxIndx As Integer, ByRef prn_HdAr(,) As String, ByRef prn_DetAr(,,) As String, ByRef prn_PageNo As Integer, ByRef prn_Count As Integer, ByRef prn_HdIndx As Integer, ByRef prn_DetIndx As Integer)
        Dim I As Integer, NoofDets As Integer, NoofItems_PerPage As Integer
        Dim pFont As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim ps As Printing.PaperSize
        Dim strHeight As Single = 0
        Dim PpSzSTS As Boolean = False
        Dim LM As Single = 0, TM As Single = 0
        Dim PgWt As Single = 0, PrWt As Single = 0
        Dim PgHt As Single = 0, PrHt As Single = 0

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1019" Then '---- SUBHAM Textiles (Somanur)
            For I = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
                If PrintDocument1.PrinterSettings.PaperSizes(I).Kind = Printing.PaperKind.A4 Then
                    ps = PrintDocument1.PrinterSettings.PaperSizes(I)
                    PrintDocument1.DefaultPageSettings.PaperSize = ps
                    PrintDocument1.DefaultPageSettings.Landscape = False
                    e.PageSettings.PaperSize = ps
                    Exit For
                End If
            Next

        Else
            For I = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
                If PrintDocument1.PrinterSettings.PaperSizes(I).Kind = Printing.PaperKind.GermanStandardFanfold Then
                    ps = PrintDocument1.PrinterSettings.PaperSizes(I)
                    PrintDocument1.DefaultPageSettings.PaperSize = ps
                    PrintDocument1.DefaultPageSettings.Landscape = False
                    e.PageSettings.PaperSize = ps
                    PpSzSTS = True
                    Exit For
                End If
            Next

            If PpSzSTS = False Then
                For I = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
                    If PrintDocument1.PrinterSettings.PaperSizes(I).Kind = Printing.PaperKind.A4 Then
                        ps = PrintDocument1.PrinterSettings.PaperSizes(I)
                        PrintDocument1.DefaultPageSettings.PaperSize = ps
                        PrintDocument1.DefaultPageSettings.Landscape = False
                        e.PageSettings.PaperSize = ps
                        Exit For
                    End If
                Next
            End If

        End If


        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 20 ' 40
            .Right = 40
            .Top = 20 ' 30  '60
            .Bottom = 40
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = (.Width / 4) - RMargin - LMargin
            PrintHeight = (.Height / 4) - TMargin - BMargin
            PageWidth = (.Width / 4) - RMargin
            PageHeight = (.Height / 4) - BMargin
        End With

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        pFont = New Font("Calibri", 10, FontStyle.Regular)

        NoofItems_PerPage = 13 ' 17 ' 20 

        Erase ClArr
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = 0 : ClArr(2) = 50 : ClArr(3) = 100
        'ClArr(1) = 110 : ClArr(2) = 110 : ClArr(3) = 120

        TxtHgt = 18.75 ' 19 ' e.Graphics.MeasureString("A", pFont).Height  ' 20

        Try

            If prn_HdDt.Rows.Count > 0 Then

                If prn_HdMxIndx > 0 Then

                    Do While prn_HdIndx <= prn_HdMxIndx

                        'If prn_Count Mod 4 = 1 Then
                        '    LM = LMargin
                        '    TM = TMargin
                        '    PgWt = PageWidth
                        '    PgHt = PageHeight
                        '    PrWt = PrintWidth
                        '    PrHt = PrintHeight

                        'ElseIf prn_Count Mod 4 = 2 Then
                        '    LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + LMargin
                        '    TM = TMargin
                        '    PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PageWidth
                        '    PgHt = PageHeight
                        '    PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PrintWidth
                        '    PrHt = PrintHeight

                        'ElseIf prn_Count Mod 4 = 3 Then
                        '    LM = LMargin
                        '    TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 2) + TMargin
                        '    PgWt = PageWidth
                        '    PgHt = PageHeight
                        '    PrWt = PrintWidth
                        '    PrHt = PrintHeight

                        'ElseIf prn_Count Mod 4 = 0 Then
                        '    LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + LMargin
                        '    TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 2) + TMargin
                        '    PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PageWidth
                        '    PgHt = PageHeight
                        '    PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PrintWidth
                        '    PrHt = PrintHeight
                        'End If

                        If prn_Count Mod 8 = 1 Then
                            LM = LMargin
                            TM = TMargin
                            PgWt = PageWidth
                            PgHt = PageHeight
                            PrWt = PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 8 = 2 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + LMargin
                            TM = TMargin
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 8 = 3 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + LMargin
                            TM = TMargin
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 8 = 4 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + LMargin
                            TM = TMargin
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 8 = 5 Then
                            LM = LMargin
                            TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 2) + TMargin
                            PgWt = PageWidth
                            PgHt = PageHeight
                            PrWt = PrintWidth
                            PrHt = PrintHeight
                        ElseIf prn_Count Mod 8 = 6 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + LMargin
                            TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 2) + TMargin
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 8 = 7 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + LMargin
                            TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 2) + TMargin
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PrintWidth
                            PrHt = PrintHeight
                        ElseIf prn_Count Mod 8 = 0 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + LMargin
                            TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 2) + TMargin
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + PrintWidth
                            PrHt = PrintHeight
                        End If

                        Erase LnAr
                        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

                        Printing_PackingSlip_Format2_PageHeader(PrintDocument1, e, prn_HdDt, prn_HdAr, TxtHgt, pFont, LM, RMargin, TM, BMargin, PgWt, PrWt, prn_PageNo, NoofItems_PerPage, CurY, LnAr, ClArr, prn_HdIndx)
                        CurY = CurY - 10

                        NoofDets = 0
                        Do While prn_DetIndx < Val(prn_HdAr(prn_HdIndx, 3))

                            If NoofDets >= NoofItems_PerPage Then

                                CurY = CurY + TxtHgt
                                Common_Procedures.Print_To_PrintDocument(e, "Continued....", LM + ClArr(1) + ClArr(2) + ClArr(3) - 10, CurY, 1, 0, pFont)
                                NoofDets = NoofDets + 1

                                Printing_PackingSlip_Format2_PageFooter(PrintDocument1, e, prn_HdAr, TxtHgt, pFont, LM, RMargin, TM, BMargin, PgWt, PrWt, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_HdIndx, False)

                                'prn_DetIndx = prn_DetIndx + NoofItems_PerPage

                                e.HasMorePages = True

                                prn_Count = prn_Count + 1

                                Return

                            End If

                            prn_DetIndx = prn_DetIndx + 1

                            If Val(prn_DetAr(prn_HdIndx, prn_DetIndx, 3)) <> 0 Then

                                CurY = CurY + TxtHgt

                                '  Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, prn_DetIndx, 1)), LM + 15, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, prn_DetIndx, 2)), LM + ClArr(1) + 15, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr(prn_HdIndx, prn_DetIndx, 3)), "#########0.00"), LM + ClArr(1) + ClArr(2) + ClArr(3) - 10, CurY, 1, 0, pFont)

                                NoofDets = NoofDets + 1

                            End If

                        Loop

                        Printing_PackingSlip_Format2_PageFooter(PrintDocument1, e, prn_HdAr, TxtHgt, pFont, LM, RMargin, TM, BMargin, PgWt, PrWt, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_HdIndx, True)

                        prn_HdIndx = prn_HdIndx + 1
                        prn_Count = prn_Count + 1
                        prn_DetIndx = 0

                        If prn_HdIndx <= prn_HdMxIndx Then

                            If (prn_Count - 1) Mod 8 = 0 Then

                                e.HasMorePages = True
                                Return

                            End If

                        End If

                    Loop

                End If

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

        e.HasMorePages = False

    End Sub

    Public Shared Sub Printing_PackingSlip_Format2_PageHeader(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal prn_HdIndx As Integer)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim dt3 As New DataTable
        Dim dt4 As New DataTable
        Dim p1Font As Font
        Dim strHeight As Single
        Dim W1 As Single
        Dim PrntWt As Single = 0
        Dim Cmp_Name As String = ""
        Dim Cmp_Add As String = ""
        Dim Cmp_Phone As String = ""

        PageNo = PageNo + 1

        CurY = TMargin

        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString

        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_Phone = "Phone : " & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
        End If


        Cmp_Add = ""
        If Trim(prn_HdDt.Rows(0).Item("Company_Address4").ToString) <> "" Then
            Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address4").ToString)
        ElseIf Trim(prn_HdDt.Rows(0).Item("Company_Address3").ToString) <> "" Then
            Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address3").ToString)
        ElseIf Trim(prn_HdDt.Rows(0).Item("Company_Address2").ToString) <> "" Then
            Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address2").ToString)
        ElseIf Trim(prn_HdDt.Rows(0).Item("Company_Address1").ToString) <> "" Then
            Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address1").ToString)
        End If

        PrntWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) - PrintDocument1.DefaultPageSettings.Margins.Right - PrintDocument1.DefaultPageSettings.Margins.Left
        ' PrntWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) '- PrintDocument1.DefaultPageSettings.Margins.Right - PrintDocument1.DefaultPageSettings.Margins.Left


        CurY = TMargin
        p1Font = New Font("Calibri", 11, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrntWt, p1Font)
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

        CurY = CurY + strHeight - 5
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Add, LMargin, CurY, 2, PrntWt, pFont)
        strHeight = e.Graphics.MeasureString(Cmp_Add, p1Font).Height

        CurY = CurY + strHeight - 5
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Phone, LMargin, CurY, 2, PrntWt, pFont)
        strHeight = e.Graphics.MeasureString(Cmp_Phone, p1Font).Height

        CurY = CurY + TxtHgt + 5
        p1Font = New Font("Calibri", 9, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, "PACKING SLIP", LMargin, CurY, 2, PrntWt, p1Font)
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

        Try

            W1 = e.Graphics.MeasureString("QUALITY   :  ", pFont).Width

            p1Font = New Font("Calibri", 8, FontStyle.Regular)

            CurY = CurY + strHeight + 5
            Common_Procedures.Print_To_PrintDocument(e, "BALE NO", LMargin + 10, CurY, 0, 0, p1Font)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1, CurY, 0, 0, p1Font)
            Common_Procedures.Print_To_PrintDocument(e, prn_HdAr(prn_HdIndx, 1), LMargin + W1 + 25, CurY, 0, 0, p1Font)

            CurY = CurY + TxtHgt
            p1Font = New Font("Calibri", 8, FontStyle.Regular Or FontStyle.Underline)
            Common_Procedures.Print_To_PrintDocument(e, "QUALITY", LMargin + 10, CurY, 0, 0, p1Font)
            'Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1, CurY, 0, 0, p1Font)
            'Common_Procedures.Print_To_PrintDocument(e, prn_HdAr(prn_HdIndx, 2), LMargin + W1 + 25, CurY, 0, 0, p1Font)

            CurY = CurY + TxtHgt
            p1Font = New Font("Calibri", 8, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, prn_HdAr(prn_HdIndx, 2), LMargin + 10, CurY, 0, 0, p1Font)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(1) = CurY

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "", LMargin, CurY, 2, ClAr(1), pFont)
            'Common_Procedures.Print_To_PrintDocument(e, "LOT NO", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PCS NO", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "METERS", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(2) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Shared Sub Printing_PackingSlip_Format2_PageFooter(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal NoofDets As Integer, ByVal prn_HdIndx As Integer, ByVal is_LastPage As Boolean)
        Dim I As Integer
        Dim PrntWt As Single = 0

        Try


            PrntWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) - PrintDocument1.DefaultPageSettings.Margins.Right - PrintDocument1.DefaultPageSettings.Margins.Left
            'PrntWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)

            For I = NoofDets + 1 To NoofItems_PerPage
                CurY = CurY + TxtHgt
            Next

            CurY = CurY + TxtHgt
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(3) = CurY

            CurY = CurY + TxtHgt - 10

            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdAr(prn_HdIndx, 3))), LMargin + ClAr(1) + 15, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdAr(prn_HdIndx, 4)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) - 15, CurY, 1, 0, pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(4) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(1))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY, LMargin + ClAr(1), LnAr(1))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY, LMargin + ClAr(1) + ClAr(2), LnAr(1))
            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(1))

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Shared Sub Printing_PackingSlip_Format3(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByVal prn_HdMxIndx As Integer, ByVal prn_DetMxIndx As Integer, ByRef prn_HdAr(,) As String, ByRef prn_DetAr(,,) As String, ByRef prn_PageNo As Integer, ByRef prn_Count As Integer, ByRef prn_HdIndx As Integer, ByRef prn_DetIndx As Integer)
        Dim I As Integer, NoofDets As Integer, NoofItems_PerPage As Integer
        Dim pFont As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim ps As Printing.PaperSize
        Dim strHeight As Single = 0
        Dim PpSzSTS As Boolean = False
        Dim LM As Single = 0, TM As Single = 0
        Dim PgWt As Single = 0, PrWt As Single = 0
        Dim PgHt As Single = 0, PrHt As Single = 0

        For I = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(I).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(I)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                e.PageSettings.PaperSize = ps
                Exit For
            End If
        Next

        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 20 ' 40
            .Right = 60
            .Top = 20 ' 30  '60
            .Bottom = 40
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = (.Width / 2) - RMargin - LMargin
            PrintHeight = (.Height / 2) - TMargin - BMargin
            PageWidth = (.Width / 2) - RMargin
            PageHeight = (.Height / 2) - BMargin
        End With

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        pFont = New Font("Calibri", 10, FontStyle.Regular)

        NoofItems_PerPage = 13 ' 17 ' 20 

        Erase ClArr
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = 100 : ClArr(2) = 120 : ClArr(3) = 100

        TxtHgt = 18.5 ' 18.75 ' 19 ' e.Graphics.MeasureString("A", pFont).Height  ' 20

        Try

            If prn_HdDt.Rows.Count > 0 Then

                If prn_HdMxIndx > 0 Then

                    Do While prn_HdIndx <= prn_HdMxIndx

                        If prn_Count Mod 4 = 1 Then
                            LM = LMargin
                            TM = TMargin
                            PgWt = PageWidth
                            PgHt = PageHeight
                            PrWt = PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 4 = 2 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + LMargin
                            TM = TMargin
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 4 = 3 Then
                            LM = LMargin
                            TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 2) + TMargin
                            PgWt = PageWidth
                            PgHt = PageHeight
                            PrWt = PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 4 = 0 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + LMargin
                            TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 2) + TMargin
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PrintWidth
                            PrHt = PrintHeight

                        End If

                        Erase LnAr
                        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

                        Printing_PackingSlip_Format3_PageHeader(PrintDocument1, e, prn_HdDt, prn_HdAr, TxtHgt, pFont, LM, RMargin, TM, BMargin, PgWt, PrWt, prn_PageNo, NoofItems_PerPage, CurY, LnAr, ClArr, prn_HdIndx)
                        CurY = CurY - 10

                        NoofDets = 0
                        Do While prn_DetIndx < Val(prn_HdAr(prn_HdIndx, 3))

                            If NoofDets >= NoofItems_PerPage Then

                                CurY = CurY + TxtHgt
                                Common_Procedures.Print_To_PrintDocument(e, "Continued....", LM + ClArr(1) + ClArr(2) + ClArr(3) - 10, CurY, 1, 0, pFont)
                                NoofDets = NoofDets + 1

                                Printing_PackingSlip_Format3_PageFooter(e, prn_HdAr, TxtHgt, pFont, LM, RMargin, TM, BMargin, PgWt, PrWt, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_HdIndx, False)

                                e.HasMorePages = True

                                prn_Count = prn_Count + 1

                                Return

                            End If

                            prn_DetIndx = prn_DetIndx + 1

                            If Val(prn_DetAr(prn_HdIndx, prn_DetIndx, 3)) <> 0 Then

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, prn_DetIndx, 2)), LM + 15, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr(prn_HdIndx, prn_DetIndx, 3)), "#########0.00"), LM + ClArr(1) + ClArr(2) - 15, CurY, 1, 0, pFont)
                                If Val(prn_DetAr(prn_HdIndx, prn_DetIndx, 5)) <> 0 Then
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr(prn_HdIndx, prn_DetIndx, 5)), "#########0.000"), LM + ClArr(1) + ClArr(2) + ClArr(3) - 15, CurY, 1, 0, pFont)
                                End If

                                NoofDets = NoofDets + 1

                            End If

                        Loop


                        Printing_PackingSlip_Format3_PageFooter(e, prn_HdAr, TxtHgt, pFont, LM, RMargin, TM, BMargin, PgWt, PrWt, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_HdIndx, True)

                        prn_HdIndx = prn_HdIndx + 1
                        prn_Count = prn_Count + 1
                        prn_DetIndx = 0

                        If prn_HdIndx <= prn_HdMxIndx Then

                            If (prn_Count - 1) Mod 4 = 0 Then

                                e.HasMorePages = True
                                Return

                            End If

                        End If

                    Loop

                End If

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

        e.HasMorePages = False

    End Sub

    Public Shared Sub Printing_PackingSlip_Format3_PageHeader(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal prn_HdIndx As Integer)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim dt3 As New DataTable
        Dim dt4 As New DataTable
        Dim p1Font As Font
        Dim strHeight As Single
        Dim W1 As Single
        Dim PrntWt As Single = 0
        Dim Cmp_Name As String = ""
        Dim Cmp_Add As String = ""
        Dim Cmp_PhNo As String = ""

#Disable Warning IDE0054 ' Use compound assignment
        PageNo = PageNo + 1

        CurY = TMargin

        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString

        Cmp_Add = ""
        If Trim(prn_HdDt.Rows(0).Item("Company_Address4").ToString) <> "" Then
            Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address4").ToString)
        ElseIf Trim(prn_HdDt.Rows(0).Item("Company_Address3").ToString) <> "" Then
            Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address3").ToString)
        ElseIf Trim(prn_HdDt.Rows(0).Item("Company_Address2").ToString) <> "" Then
            Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address2").ToString)
        ElseIf Trim(prn_HdDt.Rows(0).Item("Company_Address1").ToString) <> "" Then
            Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address1").ToString)
        End If

        Cmp_PhNo = ""
        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString)
        End If


        PrntWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) - PrintDocument1.DefaultPageSettings.Margins.Right - PrintDocument1.DefaultPageSettings.Margins.Left

        If Trim(Common_Procedures.settings.CustomerCode) <> "1234" Then

            CurY = TMargin
            p1Font = New Font("Calibri", 16, FontStyle.Bold)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrntWt, p1Font)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            CurY = CurY + strHeight - 5
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Add, LMargin, CurY, 2, PrntWt, pFont)

            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrntWt, pFont)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height


            CurY = CurY + TxtHgt + 5
        End If

        p1Font = New Font("Calibri", 13, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, "PACKING SLIP", LMargin, CurY, 2, PrntWt, p1Font)
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

        Try

            W1 = e.Graphics.MeasureString("QUALITY   :  ", pFont).Width

            CurY = CurY + strHeight + 5
            Common_Procedures.Print_To_PrintDocument(e, "BALE NO", LMargin, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, prn_HdAr(prn_HdIndx, 1), LMargin + W1 + 25, CurY, 0, 0, pFont)

            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, "QUALITY", LMargin, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, prn_HdAr(prn_HdIndx, 2), LMargin + W1 + 25, CurY, 0, 0, pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(1) = CurY

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "PCS NO", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "METERS", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "GRAMS", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(2) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Shared Sub Printing_PackingSlip_Format3_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal NoofDets As Integer, ByVal prn_HdIndx As Integer, ByVal is_LastPage As Boolean)
        Dim I As Integer

        Try

            For I = NoofDets + 1 To NoofItems_PerPage
                CurY = CurY + TxtHgt
            Next

            CurY = CurY + TxtHgt
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(3) = CurY

            CurY = CurY + TxtHgt - 10

            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdAr(prn_HdIndx, 3))), LMargin + 15, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdAr(prn_HdIndx, 4)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) - 15, CurY, 1, 0, pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(4) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(1))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY, LMargin + ClAr(1), LnAr(1))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY, LMargin + ClAr(1) + ClAr(2), LnAr(1))
            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(1))

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Shared Sub get_ProcessedItem_CurrentStock(ByVal Cn1 As SqlClient.SqlConnection, ByVal vComp_IdNo As Integer, ByVal vParty_IdNo As Integer, ByVal vItem_IdNo As Integer, ByRef vOnFlr_Stk As Integer, ByRef vOnRck_Stk As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing)
        Dim Cmd As New SqlClient.SqlCommand
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim ItmTyp As String = ""

        Try

            ItmTyp = Common_Procedures.get_FieldValue(Cn1, "Processed_Item_Head", "Processed_Item_Type", "( Processed_Item_IdNo = " & Str(Val(vItem_IdNo)) & " )", , sqltr)

            Cmd.Connection = Cn1

            If IsNothing(sqltr) = False Then
                Cmd.Transaction = sqltr
            End If

            Cmd.CommandText = "Truncate table " & Trim(Common_Procedures.ReportTempSubTable) & ""
            Cmd.ExecuteNonQuery()


            If Trim(UCase(ItmTyp)) = "GREY" Then
                Cmd.CommandText = "Insert into " & Trim(Common_Procedures.ReportTempSubTable) & "( Weight1 ) Select sum(a.Meters) from Stock_Item_Processing_Details a Where  a.Item_IdNo = " & Str(Val(vItem_IdNo)) & " and a.DeliveryTo_StockIdNo = " & Str(Val(vParty_IdNo))
                Cmd.ExecuteNonQuery()

                Cmd.CommandText = "Insert into " & Trim(Common_Procedures.ReportTempSubTable) & "( Weight1 ) Select -1*Sum(a.Meters)  from Stock_Item_Processing_Details a Where a.Item_IdNo = " & Str(Val(vItem_IdNo)) & " and a.ReceivedFrom_StockIdNo = " & Str(Val(vParty_IdNo))
                Cmd.ExecuteNonQuery()

            Else

                Cmd.CommandText = "Insert into " & Trim(Common_Procedures.ReportTempSubTable) & "( Weight1 ) Select sum(a.Quantity) from Stock_Item_Processing_Details a Where a.Item_IdNo = " & Str(Val(vItem_IdNo)) & " and a.DeliveryTo_StockIdNo = " & Str(Val(vParty_IdNo)) & " and a.Rack_Idno = 0"
                Cmd.ExecuteNonQuery()

                Cmd.CommandText = "Insert into " & Trim(Common_Procedures.ReportTempSubTable) & "( Weight1 ) Select -1*Sum(a.Quantity)  from Stock_Item_Processing_Details a Where a.Item_IdNo = " & Str(Val(vItem_IdNo)) & " and a.ReceivedFrom_StockIdNo = " & Str(Val(vParty_IdNo)) & " and a.Rack_Idno = 0"
                Cmd.ExecuteNonQuery()

                Cmd.CommandText = "Insert into " & Trim(Common_Procedures.ReportTempSubTable) & "( Weight2 ) Select sum(a.Quantity) from Stock_Item_Processing_Details a Where a.Item_IdNo = " & Str(Val(vItem_IdNo)) & " and a.DeliveryTo_StockIdNo = " & Str(Val(vParty_IdNo)) & " and a.Rack_Idno <> 0"
                Cmd.ExecuteNonQuery()

                Cmd.CommandText = "Insert into " & Trim(Common_Procedures.ReportTempSubTable) & "( Weight2 ) Select -1*Sum(a.Quantity) from Stock_Item_Processing_Details a Where a.Item_IdNo = " & Str(Val(vItem_IdNo)) & " and a.ReceivedFrom_StockIdNo = " & Str(Val(vParty_IdNo)) & " and a.Rack_Idno <> 0"
                Cmd.ExecuteNonQuery()

            End If

            '            If Trim(UCase(ItmTyp)) = "GREY" Then
            '                Cmd.CommandText = "Insert into " & Trim(Common_Procedures.ReportTempSubTable) & "( Weight1 ) Select sum(a.Meters) from Stock_Item_Processing_Details a Where a.Company_IdNo = " & Str(Val(vComp_IdNo)) & " and a.Item_IdNo = " & Str(Val(vItem_IdNo)) & " and a.DeliveryTo_StockIdNo = " & Str(Val(vParty_IdNo))
            '                Cmd.ExecuteNonQuery()
            '
            '                Cmd.CommandText = "Insert into " & Trim(Common_Procedures.ReportTempSubTable) & "( Weight1 ) Select -1*Sum(a.Meters)  from Stock_Item_Processing_Details a Where a.Company_IdNo = " & Str(Val(vComp_IdNo)) & " and a.Item_IdNo = " & Str(Val(vItem_IdNo)) & " and a.ReceivedFrom_StockIdNo = " & Str(Val(vParty_IdNo))
            '                Cmd.ExecuteNonQuery()
            '
            '            Else
            '
            '                Cmd.CommandText = "Insert into " & Trim(Common_Procedures.ReportTempSubTable) & "( Weight1 ) Select sum(a.Quantity) from Stock_Item_Processing_Details a Where a.Company_IdNo = " & Str(Val(vComp_IdNo)) & " and a.Item_IdNo = " & Str(Val(vItem_IdNo)) & " and a.DeliveryTo_StockIdNo = " & Str(Val(vParty_IdNo)) & " and a.Rack_Idno = 0"
            '                Cmd.ExecuteNonQuery()
            '
            '                Cmd.CommandText = "Insert into " & Trim(Common_Procedures.ReportTempSubTable) & "( Weight1 ) Select -1*Sum(a.Quantity)  from Stock_Item_Processing_Details a Where a.Company_IdNo = " & Str(Val(vComp_IdNo)) & " and a.Item_IdNo = " & Str(Val(vItem_IdNo)) & " and a.ReceivedFrom_StockIdNo = " & Str(Val(vParty_IdNo)) & " and a.Rack_Idno = 0"
            '                Cmd.ExecuteNonQuery()
            '
            '                Cmd.CommandText = "Insert into " & Trim(Common_Procedures.ReportTempSubTable) & "( Weight2 ) Select sum(a.Quantity) from Stock_Item_Processing_Details a Where a.Company_IdNo = " & Str(Val(vComp_IdNo)) & " and a.Item_IdNo = " & Str(Val(vItem_IdNo)) & " and a.DeliveryTo_StockIdNo = " & Str(Val(vParty_IdNo)) & " and a.Rack_Idno <> 0"
            '                Cmd.ExecuteNonQuery()
            '
            '                Cmd.CommandText = "Insert into " & Trim(Common_Procedures.ReportTempSubTable) & "( Weight2 ) Select -1*Sum(a.Quantity) from Stock_Item_Processing_Details a Where a.Company_IdNo = " & Str(Val(vComp_IdNo)) & " and a.Item_IdNo = " & Str(Val(vItem_IdNo)) & " and a.ReceivedFrom_StockIdNo = " & Str(Val(vParty_IdNo)) & " and a.Rack_Idno <> 0"
            '                Cmd.ExecuteNonQuery()
            '
            '            End If

            Da = New SqlClient.SqlDataAdapter("select sum(Weight1) as OnFloorStock, sum(Weight2) as OnRackStock from " & Trim(Common_Procedures.ReportTempSubTable) & "", Cn1)
            If IsNothing(sqltr) = False Then
                Da.SelectCommand.Transaction = sqltr
            End If
            Dt = New DataTable
            Da.Fill(Dt)

            vOnFlr_Stk = 0 : vOnRck_Stk = 0
            If Dt.Rows.Count > 0 Then
                If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                    vOnFlr_Stk = Val(Dt.Rows(0)(0).ToString)
                End If
                If IsDBNull(Dt.Rows(0)(1).ToString) = False Then
                    vOnRck_Stk = Val(Dt.Rows(0)(1).ToString)
                End If
            End If

            Dt.Clear()

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT SHOW STOCK...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        Finally
            Dt.Dispose()
            Da.Dispose()
            Cmd.Dispose()

        End Try

    End Sub

    Public Shared Sub Show_ProcessedItem_CurrentStock_Display(ByVal Cn1 As SqlClient.SqlConnection, ByVal vComp_IdNo As Integer, ByVal vParty_IdNo As Integer, ByVal vItem_IdNo As Integer)
        Dim vOnFlr_Stk As Decimal, vOnRck_Stk As Decimal

        vOnFlr_Stk = 0 : vOnRck_Stk = 0
        get_ProcessedItem_CurrentStock(Cn1, vComp_IdNo, vParty_IdNo, vItem_IdNo, vOnFlr_Stk, vOnRck_Stk)

        StockDisplay_ProcessedItem_Name = Common_Procedures.get_FieldValue(Cn1, "Processed_Item_Head", "Processed_Item_Name", "(Processed_Item_IdNo = " & Str(Val(vItem_IdNo)) & ")")
        StockDisplay_ProcessedItem_OnFloorStock = Val(vOnFlr_Stk)
        StockDisplay_ProcessedItem_OnRackStock = Val(vOnRck_Stk)

        Hide_CurrentStock_Display()

        Dim f1 As New StockDisplay_ProcessedItem
        f1.MdiParent = MDIParent1
        f1.TopMost = True
        'f1.Show()

        f1.lbl_ItemName.Text = "  " & Trim(StockDisplay_ProcessedItem_Name)
        f1.lbl_OnFloorStock.Text = Val(StockDisplay_ProcessedItem_OnFloorStock)
        f1.lbl_OnRackStock.Text = Val(StockDisplay_ProcessedItem_OnRackStock)
        f1.lbl_TotalStock.Text = Val(f1.lbl_OnFloorStock.Text) + Val(f1.lbl_OnRackStock.Text)

        ShowWindow(f1.Handle, SW_SHOWNOACTIVATE)
        'ShowWindow(f1.Handle, SW_SHOWNA)
        'f1.Visible = False
        f1.Left = Screen.PrimaryScreen.WorkingArea.X + 10
        f1.Top = Screen.PrimaryScreen.WorkingArea.Height - 100 - f1.Height '92
        'f1.Visible = True

    End Sub

    Public Shared Function Check_is_Negative_Stock_Status(ByVal Cn1 As SqlClient.SqlConnection, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Boolean
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Led_Idno As Integer = 0
        Dim I As Integer = 0
        Dim Stk As Single = 0
        Dim ForStk_Weight As String = ""
        Dim vERRDescp As String = ""
        Dim vProcItemOnFlr_Stk As Decimal, vProcItemOnRck_Stk As Decimal
        Dim vYRN_UPTO_Date_Stk As String = 0, vYRN_Current_Stk As String = 0
        Dim vRETURNSTOCK_MillIdNo As Integer = 0
        Dim vPAVU_UPTO_Date_Stk As String = 0, vPAVU_Current_Stk As String = 0
        Dim vFAB_CURRSTOCK_TYPE1 As String, vFAB_CURRSTOCK_TYPE2 As String, vFAB_CURRSTOCK_TYPE3 As String, vFAB_CURRSTOCK_TYPE4 As String, vFAB_CURRSTOCK_TYPE5 As String
        Dim vFAB_UPTO_DateSTOCK_TYPE1 As String, vFAB_UPTO_DateSTOCK_TYPE2 As String, vFAB_UPTO_DateSTOCK_TYPE3 As String, vFAB_UPTO_DateSTOCK_TYPE4 As String, vFAB_UPTO_DateSTOCK_TYPE5 As String
        Dim vFAB_CURRSTK As String = 0
        Dim vFAB_UPTOSTK As String = 0

        Check_is_Negative_Stock_Status = False

        Da1 = New SqlClient.SqlDataAdapter("select Stock_Type, Reference_Code, Reference_Date, Company_Idno, Ledger_Idno, Yarn_Type, Mill_Idno, Count_IdNo, EndsCount_IdNo, StockOff_IdNo, Cloth_IdNo, ClothType_IdNo, Folding, Item_IdNo, Rack_IdNo, sum(Quantity) from TempTable_For_NegativeStock group by Stock_Type, Reference_Code, Reference_Date, Company_Idno, Ledger_Idno, Yarn_Type, Mill_Idno, Count_IdNo, EndsCount_IdNo, StockOff_IdNo, Cloth_IdNo, ClothType_IdNo, Folding, Item_IdNo, Rack_IdNo", Cn1)
        If IsNothing(sqltr) = False Then
            Da1.SelectCommand.Transaction = sqltr
        End If
        Dt1 = New DataTable
        Da1.Fill(Dt1)

        If Dt1.Rows.Count > 0 Then

            For I = 0 To Dt1.Rows.Count - 1

                If Val(Dt1.Rows(I).Item("Ledger_Idno").ToString) <> 0 Then

                    vERRDescp = "NEGATIVE STOCK : " & Chr(13)

                    If Trim(UCase(Dt1.Rows(I).Item("Stock_Type").ToString)) = "YARN" And Val(Common_Procedures.settings.Negative_Stock_Restriction_for_Yarn_Stock) = 1 Then  '****************** YARN STOCK

                        If Val(Common_Procedures.settings.Negative_Stock_Restriction_for_Yarn_Stock) = 0 Then
                            Continue For
                        End If

                        vYRN_UPTO_Date_Stk = 0
                        vYRN_Current_Stk = 0
                        vRETURNSTOCK_MillIdNo = 0

                        get_YARN_CurrentStock(Cn1, Val(Dt1.Rows(I).Item("Company_Idno").ToString), Val(Dt1.Rows(I).Item("Ledger_Idno").ToString), Dt1.Rows(I).Item("Reference_Date"), Val(Dt1.Rows(I).Item("Count_IdNo").ToString), Dt1.Rows(I).Item("Yarn_Type").ToString, Val(Dt1.Rows(I).Item("Mill_Idno").ToString), vYRN_UPTO_Date_Stk, vYRN_Current_Stk, vRETURNSTOCK_MillIdNo, sqltr)

                        If Val(vYRN_Current_Stk) < 0 Then

                            vERRDescp = "NEGATIVE YARN STOCK : " & Chr(13) & Chr(13)
                            vERRDescp = vERRDescp & "PARTY NAME : " & Common_Procedures.Ledger_IdNoToName(Cn1, Val(Dt1.Rows(I).Item("Ledger_Idno").ToString), sqltr) & Chr(13)
                            vERRDescp = vERRDescp & "Count Name : " & Common_Procedures.Count_IdNoToName(Cn1, Val(Dt1.Rows(I).Item("Count_IdNo").ToString), sqltr) & Chr(13)
                            If Val(vRETURNSTOCK_MillIdNo) <> 0 Then
                                vERRDescp = vERRDescp & "Mill Name : " & Common_Procedures.Mill_IdNoToName(Cn1, Val(vRETURNSTOCK_MillIdNo), sqltr) & Chr(13)
                            End If
                            vERRDescp = vERRDescp & Chr(13) & "Current Stock : " & Format(Val(vYRN_Current_Stk), "##########0.000")

                            Check_is_Negative_Stock_Status = True
                            Throw New ApplicationException(vERRDescp)
                            Exit Function

                        ElseIf Val(vYRN_UPTO_Date_Stk) < 0 Then

                            vERRDescp = "NEGATIVE YARN STOCK : " & Chr(13)
                            vERRDescp = vERRDescp & "PARTY NAME : " & Common_Procedures.Ledger_IdNoToName(Cn1, Val(Dt1.Rows(I).Item("Ledger_Idno").ToString), sqltr) & Chr(13)
                            vERRDescp = vERRDescp & "Count Name : " & Common_Procedures.Count_IdNoToName(Cn1, Val(Dt1.Rows(I).Item("Count_IdNo").ToString), sqltr) & Chr(13)
                            If Val(vRETURNSTOCK_MillIdNo) <> 0 Then
                                vERRDescp = vERRDescp & "Mill Name : " & Common_Procedures.Mill_IdNoToName(Cn1, Val(vRETURNSTOCK_MillIdNo), sqltr) & Chr(13)
                            End If
                            vERRDescp = vERRDescp & Chr(13) & "Stock AS ON (" & Trim(Format(Convert.ToDateTime(Dt1.Rows(I).Item("Reference_Date")), "dd-MM-yyyy").ToString()) & ") : " & Format(Val(vYRN_UPTO_Date_Stk), "##########0.000")

                            Check_is_Negative_Stock_Status = True
                            Throw New ApplicationException(vERRDescp)
                            Exit Function

                        End If


                    ElseIf Trim(UCase(Dt1.Rows(I).Item("Stock_Type").ToString)) = "PAVU" And Val(Common_Procedures.settings.Negative_Stock_Restriction_for_Pavu_Stock) = 1 Then   '****************** PAVU STOCK

                        If Val(Common_Procedures.settings.Negative_Stock_Restriction_for_Pavu_Stock) = 0 Then
                            Continue For
                        End If

                        vPAVU_UPTO_Date_Stk = 0
                        vPAVU_Current_Stk = 0

                        get_PAVU_CurrentStock(Cn1, Val(Dt1.Rows(I).Item("Company_Idno").ToString), Val(Dt1.Rows(I).Item("Ledger_Idno").ToString), Dt1.Rows(I).Item("Reference_Date"), Val(Dt1.Rows(I).Item("EndsCount_IdNo").ToString), vPAVU_UPTO_Date_Stk, vPAVU_Current_Stk, sqltr)

                        If Val(vPAVU_Current_Stk) < 0 Then

                            vERRDescp = "NEGATIVE PAVU STOCK : " & Chr(13) & Chr(13)
                            vERRDescp = vERRDescp & "PARTY NAME : " & Common_Procedures.Ledger_IdNoToName(Cn1, Val(Dt1.Rows(I).Item("Ledger_Idno").ToString), sqltr) & Chr(13)
                            vERRDescp = vERRDescp & "Ends/Count Name : " & Common_Procedures.EndsCount_IdNoToName(Cn1, Val(Dt1.Rows(I).Item("EndsCount_IdNo").ToString), "", sqltr) & Chr(13)
                            vERRDescp = vERRDescp & Chr(13) & "Current Stock : " & Format(Val(vPAVU_Current_Stk), "##########0.00")

                            Check_is_Negative_Stock_Status = True
                            Throw New ApplicationException(vERRDescp)
                            Exit Function

                        ElseIf Val(vPAVU_UPTO_Date_Stk) < 0 Then

                            vERRDescp = "NEGATIVE PAVU STOCK : " & Chr(13) & Chr(13)
                            vERRDescp = vERRDescp & "PARTY NAME : " & Common_Procedures.Ledger_IdNoToName(Cn1, Val(Dt1.Rows(I).Item("Ledger_Idno").ToString), sqltr) & Chr(13)
                            vERRDescp = vERRDescp & "Ends/Count Name : " & Common_Procedures.EndsCount_IdNoToName(Cn1, Val(Dt1.Rows(I).Item("EndsCount_IdNo").ToString), "", sqltr) & Chr(13)
                            vERRDescp = vERRDescp & Chr(13) & "Stock AS ON (" & Trim(Format(Convert.ToDateTime(Dt1.Rows(I).Item("Reference_Date")), "dd-MM-yyyy").ToString()) & ") : " & Format(Val(vPAVU_UPTO_Date_Stk), "##########0.00")

                            Check_is_Negative_Stock_Status = True
                            Throw New ApplicationException(vERRDescp)
                            Exit Function

                        End If



                    ElseIf Trim(UCase(Dt1.Rows(I).Item("Stock_Type").ToString)) = "CLOTH" And Val(Common_Procedures.settings.Negative_Stock_Restriction_for_Cloth_Stock) = 1 Then   '******************FABRIC STOCK

                        If Val(Common_Procedures.settings.Negative_Stock_Restriction_for_Cloth_Stock) = 0 Then
                            Continue For
                        End If

                        vYRN_UPTO_Date_Stk = 0
                        vYRN_Current_Stk = 0
                        vRETURNSTOCK_MillIdNo = 0

                        'Da1 = New SqlClient.SqlDataAdapter("select Stock_Type, Reference_Code, Reference_Date, Company_Idno, Ledger_Idno, Yarn_Type, Mill_Idno, Count_IdNo, EndsCount_IdNo, Cloth_IdNo, ClothType_IdNo, Folding, Item_IdNo, Rack_IdNo, sum(Quantity) from TempTable_For_NegativeStock group by Stock_Type, Reference_Code, Reference_Date, Company_Idno, Ledger_Idno, Yarn_Type, Mill_Idno, Count_IdNo, EndsCount_IdNo, Cloth_IdNo, ClothType_IdNo, Folding, Item_IdNo, Rack_IdNo ", Cn1)


                        vFAB_CURRSTOCK_TYPE1 = 0 : vFAB_CURRSTOCK_TYPE2 = 0 : vFAB_CURRSTOCK_TYPE3 = 0 : vFAB_CURRSTOCK_TYPE4 = 0 : vFAB_CURRSTOCK_TYPE5 = 0
                        vFAB_UPTO_DateSTOCK_TYPE1 = 0 : vFAB_UPTO_DateSTOCK_TYPE2 = 0 : vFAB_UPTO_DateSTOCK_TYPE3 = 0 : vFAB_UPTO_DateSTOCK_TYPE4 = 0 : vFAB_UPTO_DateSTOCK_TYPE5 = 0

                        get_Fabric_CurrentStock(Cn1, Val(Dt1.Rows(I).Item("Company_Idno").ToString), Val(Dt1.Rows(I).Item("StockOff_IdNo").ToString), Val(Dt1.Rows(I).Item("Ledger_Idno").ToString), Dt1.Rows(I).Item("Reference_Date"), Val(Dt1.Rows(I).Item("Cloth_IdNo").ToString), Val(Dt1.Rows(I).Item("ClothType_IdNo").ToString), Val(Dt1.Rows(I).Item("Folding").ToString), vFAB_CURRSTOCK_TYPE1, vFAB_CURRSTOCK_TYPE2, vFAB_CURRSTOCK_TYPE3, vFAB_CURRSTOCK_TYPE4, vFAB_CURRSTOCK_TYPE5, vFAB_UPTO_DateSTOCK_TYPE1, vFAB_UPTO_DateSTOCK_TYPE2, vFAB_UPTO_DateSTOCK_TYPE3, vFAB_UPTO_DateSTOCK_TYPE4, vFAB_UPTO_DateSTOCK_TYPE5, sqltr)


                        vFAB_CURRSTK = 0
                        vFAB_UPTOSTK = 0

                        If Val(Dt1.Rows(I).Item("Clothtype_Idno").ToString) = 1 Then
                            vFAB_CURRSTK = vFAB_CURRSTOCK_TYPE1
                            vFAB_UPTOSTK = vFAB_UPTO_DateSTOCK_TYPE1

                        ElseIf Val(Dt1.Rows(I).Item("Clothtype_Idno").ToString) = 2 Then
                            vFAB_CURRSTK = vFAB_CURRSTOCK_TYPE2
                            vFAB_UPTOSTK = vFAB_UPTO_DateSTOCK_TYPE2

                        ElseIf Val(Dt1.Rows(I).Item("Clothtype_Idno").ToString) = 3 Then
                            vFAB_CURRSTK = vFAB_CURRSTOCK_TYPE3
                            vFAB_UPTOSTK = vFAB_UPTO_DateSTOCK_TYPE3

                        ElseIf Val(Dt1.Rows(I).Item("Clothtype_Idno").ToString) = 4 Then
                            vFAB_CURRSTK = vFAB_CURRSTOCK_TYPE4
                            vFAB_UPTOSTK = vFAB_UPTO_DateSTOCK_TYPE4

                        ElseIf Val(Dt1.Rows(I).Item("Clothtype_Idno").ToString) = 5 Then
                            vFAB_CURRSTK = vFAB_CURRSTOCK_TYPE5
                            vFAB_UPTOSTK = vFAB_UPTO_DateSTOCK_TYPE5

                        Else
                            vFAB_CURRSTK = Val(vFAB_CURRSTOCK_TYPE1) + Val(vFAB_CURRSTOCK_TYPE2) + Val(vFAB_CURRSTOCK_TYPE3) + Val(vFAB_CURRSTOCK_TYPE4) + Val(vFAB_CURRSTOCK_TYPE5)
                            vFAB_UPTOSTK = Val(vFAB_UPTO_DateSTOCK_TYPE1) + Val(vFAB_UPTO_DateSTOCK_TYPE2) + Val(vFAB_UPTO_DateSTOCK_TYPE3) + Val(vFAB_UPTO_DateSTOCK_TYPE4) + Val(vFAB_UPTO_DateSTOCK_TYPE5)

                        End If


                        If Val(vFAB_CURRSTK) < 0 Then

                            vERRDescp = "NEGATIVE FABRIC STOCK : " & Chr(13) & Chr(13)
                            vERRDescp = vERRDescp & "FABRIC NAME : " & Common_Procedures.Cloth_IdNoToName(Cn1, Val(Dt1.Rows(I).Item("Cloth_IdNo").ToString), "", sqltr) & Chr(13)
                            vERRDescp = vERRDescp & "Folding % : " & Val(Dt1.Rows(I).Item("Folding").ToString) & Chr(13)
                            If Val(Dt1.Rows(I).Item("Clothtype_Idno").ToString) <> 0 Then
                                vERRDescp = vERRDescp & "Cloth Type : " & Common_Procedures.ClothType_IdNoToName(Cn1, Val(Dt1.Rows(I).Item("Clothtype_Idno").ToString), sqltr) & Chr(13)
                            End If
                            vERRDescp = vERRDescp & Chr(13) & "Current Stock : " & Format(Val(vFAB_CURRSTK), "##########0.00")

                            Check_is_Negative_Stock_Status = True
                            Throw New ApplicationException(vERRDescp)
                            Exit Function

                        ElseIf Val(vFAB_UPTOSTK) < 0 Then

                            vERRDescp = "NEGATIVE FABRIC STOCK : " & Chr(13) & Chr(13)
                            vERRDescp = vERRDescp & "FABRIC NAME : " & Common_Procedures.Cloth_IdNoToName(Cn1, Val(Dt1.Rows(I).Item("Cloth_IdNo").ToString), "", sqltr) & Chr(13)
                            vERRDescp = vERRDescp & "Folding % : " & Val(Dt1.Rows(I).Item("Folding").ToString) & Chr(13)
                            If Val(Dt1.Rows(I).Item("Clothtype_Idno").ToString) <> 0 Then
                                vERRDescp = vERRDescp & "Cloth Type : " & Common_Procedures.ClothType_IdNoToName(Cn1, Val(Dt1.Rows(I).Item("Clothtype_Idno").ToString), sqltr) & Chr(13)
                            End If
                            vERRDescp = vERRDescp & Chr(13) & "Stock AS ON (" & Trim(Format(Convert.ToDateTime(Dt1.Rows(I).Item("Reference_Date")), "dd-MM-yyyy").ToString) & ")  :  " & Format(Val(vFAB_UPTOSTK), "###########0.00")

                            Check_is_Negative_Stock_Status = True
                            Throw New ApplicationException(vERRDescp)
                            Exit Function


                        End If



                    ElseIf Trim(UCase(Dt1.Rows(I).Item("Stock_Type").ToString)) = "PI" Then  '****************** ProcessedItem STOCK

                        If Val(Common_Procedures.settings.NegativeStock_Restriction) = 0 Then
                            Continue For
                        End If

                        vProcItemOnFlr_Stk = 0 : vProcItemOnRck_Stk = 0

                        get_ProcessedItem_CurrentStock(Cn1, Val(Dt1.Rows(I).Item("Company_Idno").ToString), Val(Dt1.Rows(I).Item("Ledger_Idno").ToString), Val(Dt1.Rows(I).Item("Item_IdNo").ToString), vProcItemOnFlr_Stk, vProcItemOnRck_Stk, sqltr)

                        If Val(Dt1.Rows(I).Item("Rack_IdNo").ToString) <> 0 Then

                            If vProcItemOnRck_Stk < 0 Then

                                vERRDescp = vERRDescp & "PARTY NAME : " & Common_Procedures.Ledger_IdNoToName(Cn1, Val(Dt1.Rows(I).Item("Ledger_Idno").ToString), sqltr) & Chr(13)
                                vERRDescp = vERRDescp & "Item : " & Common_Procedures.Processed_Item_IdNoToName(Cn1, Val(Dt1.Rows(I).Item("Item_IdNo").ToString), sqltr)
                                vERRDescp = vERRDescp & "   -  Rack : " & Common_Procedures.Rack_IdNoToNo(Cn1, Val(Dt1.Rows(I).Item("Rack_IdNo").ToString), sqltr) & Chr(13)
                                vERRDescp = vERRDescp & Space(40) & " Stock : " & Format(vProcItemOnRck_Stk, "#########.000")

                                Check_is_Negative_Stock_Status = True
                                Throw New ApplicationException(vERRDescp)
                                Exit Function
                            End If

                        Else

                            If vProcItemOnFlr_Stk < 0 Then

                                vERRDescp = vERRDescp & "PARTY NAME : " & Common_Procedures.Ledger_IdNoToName(Cn1, Val(Dt1.Rows(I).Item("Ledger_Idno").ToString), sqltr) & Chr(13)
                                vERRDescp = vERRDescp & "Item : " & Common_Procedures.Processed_Item_IdNoToName(Cn1, Val(Dt1.Rows(I).Item("Item_IdNo").ToString), sqltr)
                                vERRDescp = vERRDescp & Chr(13) & Space(40) & " Stock : " & Format(vProcItemOnFlr_Stk, "#########.000")

                                Check_is_Negative_Stock_Status = True
                                Throw New ApplicationException(vERRDescp)
                                Exit Function

                            End If

                        End If

                        'Stk = vProcItemOnFlr_Stk + vProcItemOnRck_Stk

                        'If Stk < 0 Then
                        '    Check_is_Negative_Stock_Status = True
                        '    Throw New ApplicationException(vERRDescp)
                        '    Exit Function
                        'End If

                    End If

                End If

            Next I

        End If

        Dt1.Clear()

        Dt1.Dispose()
        Da1.Dispose()

    End Function

    Public Shared Sub Hide_CurrentStock_Display()
        'Close all stock display forms
        For Each ChildForm As Form In MDIParent1.MdiChildren
            If ChildForm.Name = StockDisplay_ProcessedItem.Name Then
                ChildForm.Close()
            End If
        Next
    End Sub

    Public Shared Function get_Bobin_CurrentStock(ByVal Cn1 As SqlClient.SqlConnection, ByVal vComp_IdNo As Integer, ByVal vLed_IdNo As Integer, ByVal vEndsCnt_IdNo As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Decimal
        Dim Cmd As New SqlClient.SqlCommand
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim CurStk As Decimal = 0
        Dim CompIDCondt As String = ""


        CompIDCondt = "(a.company_idno = " & Str(Val(vComp_IdNo)) & ")"
        If Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1 Then
            CompIDCondt = ""
            If Trim(UCase(Common_Procedures.User.Type)) = "ACCOUNT" Then
                CompIDCondt = "(tZ.Company_Type <> 'UNACCOUNT')"
            End If
        End If

        Cmd.Connection = Cn1

        If IsNothing(sqltr) = False Then
            Cmd.Transaction = sqltr
        End If

        Cmd.CommandText = "Truncate table " & Trim(Common_Procedures.ReportTempSubTable) & ""
        Cmd.ExecuteNonQuery()


        Cmd.CommandText = "Insert into " & Trim(Common_Procedures.ReportTempSubTable) & " ( int1, meters1 ) Select sum(a.Bobins), sum(a.Meters) from Stock_Pavu_Processing_Details a INNER JOIN Company_Head tZ ON a.Company_IdNo <> 0 and a.Company_IdNo = tZ.Company_IdNo Where " & CompIDCondt & IIf(Trim(CompIDCondt) <> "", " and ", "") & " a.DeliveryTo_Idno = " & Str(Val(Common_Procedures.CommonLedger.Godown_Ac)) & " and a.EndsCount_IdNo = " & Str(Val(vEndsCnt_IdNo)) & " and a.Meters <> 0 having sum(a.Bobins ) <> 0 "
        Cmd.ExecuteNonQuery()
        Cmd.CommandText = "Insert into " & Trim(Common_Procedures.ReportTempSubTable) & " ( int1, meters1 ) Select -1*sum(a.Bobins), -1*sum(a.Meters) from Stock_Pavu_Processing_Details a INNER JOIN Company_Head tZ ON a.Company_IdNo <> 0 and a.Company_IdNo = tZ.Company_IdNo Where " & CompIDCondt & IIf(Trim(CompIDCondt) <> "", " and ", "") & " a.ReceivedFrom_Idno = " & Str(Val(Common_Procedures.CommonLedger.Godown_Ac)) & " and a.EndsCount_IdNo = " & Str(Val(vEndsCnt_IdNo)) & " and a.Meters <> 0 having sum(a.Bobins ) <> 0"
        Cmd.ExecuteNonQuery()

        Da = New SqlClient.SqlDataAdapter("Select sum(a.int1), Sum(a.Meters1) from " & Trim(Common_Procedures.ReportTempSubTable) & " a having sum(a.int1) <> 0", Cn1)
        Da.SelectCommand.Transaction = sqltr
        Dt = New DataTable
        Da.Fill(Dt)

        CurStk = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                CurStk = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        get_Bobin_CurrentStock = Val(CurStk)

    End Function


    Public Shared Function get_Fabric_CurrentStock(ByVal Cn1 As SqlClient.SqlConnection, ByVal vComp_IdNo As Integer, ByVal vSTOCKOF_IdNo As Integer, ByVal vGODWN_IdNo As Integer, ByVal vREFDATE As Date, ByVal vCloth_IdNo As Integer, ByVal vClothType_IdNo As Integer, ByVal vFOLDINGPERC As Double, ByRef vFAB_CURRSTOCK_TYPE1 As String, ByRef vFAB_CURRSTOCK_TYPE2 As String, ByRef vFAB_CURRSTOCK_TYPE3 As String, ByRef vFAB_CURRSTOCK_TYPE4 As String, ByRef vFAB_CURRSTOCK_TYPE5 As String, ByRef vFAB_UPTO_DateSTOCK_TYPE1 As String, ByRef vFAB_UPTO_DateSTOCK_TYPE2 As String, ByRef vFAB_UPTO_DateSTOCK_TYPE3 As String, ByRef vFAB_UPTO_DateSTOCK_TYPE4 As String, ByRef vFAB_UPTO_DateSTOCK_TYPE5 As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Boolean
        Dim Cmd As New SqlClient.SqlCommand
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim CurStk As Decimal = 0
        Dim vCondt As String = ""
        Dim vRptCondt As String = ""
        Dim vCURRSTK_TYPE1 As String, vCURRSTK_TYPE2 As String, vCURRSTK_TYPE3 As String, vCURRSTK_TYPE4 As String, vCURRSTK_TYPE5 As String


        vFAB_CURRSTOCK_TYPE1 = 0 : vFAB_CURRSTOCK_TYPE2 = 0 : vFAB_CURRSTOCK_TYPE3 = 0 : vFAB_CURRSTOCK_TYPE4 = 0 : vFAB_CURRSTOCK_TYPE5 = 0
        vFAB_UPTO_DateSTOCK_TYPE1 = 0 : vFAB_UPTO_DateSTOCK_TYPE2 = 0 : vFAB_UPTO_DateSTOCK_TYPE3 = 0 : vFAB_UPTO_DateSTOCK_TYPE4 = 0 : vFAB_UPTO_DateSTOCK_TYPE5 = 0


        vCURRSTK_TYPE1 = 0
        vCURRSTK_TYPE2 = 0
        vCURRSTK_TYPE3 = 0
        vCURRSTK_TYPE4 = 0
        vCURRSTK_TYPE5 = 0


        vCondt = ""
        If Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0 Then
            vCondt = "(a.company_idno = " & Str(Val(vComp_IdNo)) & ")"
        End If

        If vCloth_IdNo <> 0 Then
            vCondt = Trim(vCondt) & IIf(Trim(vCondt) <> "", " and ", "") & " tQ.Cloth_IdNo = " & Str(Val(vCloth_IdNo))
        End If

        If vSTOCKOF_IdNo <> 0 Then
            If vSTOCKOF_IdNo = 4 Or vSTOCKOF_IdNo = 5 Then
                vCondt = Trim(vCondt) & IIf(Trim(vCondt) <> "", " and ", "") & " (tSP.Ledger_IdNo = 4 or tSP.Ledger_IdNo = 5)"
            Else
                vCondt = Trim(vCondt) & IIf(Trim(vCondt) <> "", " and ", "") & " tSP.Ledger_IdNo = " & Str(Val(vSTOCKOF_IdNo))
            End If
        Else
            vCondt = Trim(vCondt) & IIf(Trim(vCondt) <> "", " and ", "") & " (tSP.Ledger_IdNo = 4 or tSP.Ledger_IdNo = 5)"
        End If

        If Val(vFOLDINGPERC) <> 0 Then
            vCondt = Trim(vCondt) & IIf(Trim(vCondt) <> "", " and ", "") & " a.Folding = " & Str(Val(vFOLDINGPERC))
        End If

        If vGODWN_IdNo <> 0 Then
            vCondt = Trim(vCondt) & IIf(Trim(vCondt) <> "", " and ", "") & " tGOD.Ledger_IdNo = " & Str(Val(vGODWN_IdNo))
        Else
            vCondt = Trim(vCondt) & IIf(Trim(vCondt) <> "", " and ", "") & " tGOD.Ledger_IdNo = " & Str(Val(Common_Procedures.CommonLedger.Godown_Ac))
        End If

        Cmd.Connection = Cn1

        If IsNothing(sqltr) = False Then
            Cmd.Transaction = sqltr
        End If

        For indx = 1 To 2

            vRptCondt = Trim(vCondt)

            Cmd.Parameters.Clear()
            If indx = 2 Then
                If Trim(vREFDATE) <> "" Then
                    If IsNothing(vREFDATE) = False Then
                        If IsDate(vREFDATE) = True Then
                            If Year(vREFDATE) <> 1900 Then
                                Cmd.Parameters.AddWithValue("@uptodate", vREFDATE)
                                vRptCondt = Trim(vRptCondt) & IIf(Trim(vRptCondt) <> "", " and ", "") & " a.Reference_Date <= @uptodate "
                            End If
                        End If
                    End If
                End If
            End If




            Cmd.CommandText = "Truncate table " & Trim(Common_Procedures.ReportTempSubTable) & ""
            Cmd.ExecuteNonQuery()



            Cmd.CommandText = "Insert into " & Trim(Common_Procedures.ReportTempSubTable) & " ( Weight1, meters1, meters2, meters3, meters4, meters5) Select sum(a.UnChecked_Meters), sum(a.Meters_Type1), sum(a.Meters_Type2), sum(a.Meters_Type3), sum(a.Meters_Type4), sum(a.Meters_Type5) from Stock_Cloth_Processing_Details a INNER JOIN Company_Head tZ ON a.Company_IdNo <> 0 and a.Company_IdNo = tZ.Company_IdNo INNER JOIN Ledger_Head tGOD ON a.DeliveryTo_Idno <> 0 and tGOD.Ledger_Type = 'GODOWN' and a.DeliveryTo_Idno = tGOD.Ledger_IdNo INNER JOIN Ledger_Head tSP ON a.StockOff_IdNo <> 0 and a.StockOff_IdNo = tSP.Ledger_IdNo INNER JOIN Cloth_Head tQ ON a.Cloth_IdNo <> 0 and a.Cloth_IdNo = tQ.Cloth_IdNo Where " & vCondt & IIf(Trim(vCondt) <> "", " and ", "") & " ( a.UnChecked_Meters <> 0 or a.Meters_Type1 <> 0 or a.Meters_Type2 <> 0 or a.Meters_Type3 <> 0 or a.Meters_Type4 <> 0 or a.Meters_Type5 <> 0 )"
            Cmd.ExecuteNonQuery()
            Cmd.CommandText = "Insert into " & Trim(Common_Procedures.ReportTempSubTable) & " ( Weight1, meters1, meters2, meters3, meters4, meters5) Select -1*sum(a.UnChecked_Meters), -1*sum(a.Meters_Type1), -1*sum(a.Meters_Type2), -1*sum(a.Meters_Type3), -1*sum(a.Meters_Type4), -1*sum(a.Meters_Type5) from Stock_Cloth_Processing_Details a INNER JOIN Company_Head tZ ON a.Company_IdNo <> 0 and a.Company_IdNo = tZ.Company_IdNo INNER JOIN Ledger_Head tGOD ON a.ReceivedFrom_Idno <> 0 and tGOD.Ledger_Type = 'GODOWN' and a.ReceivedFrom_Idno = tGOD.Ledger_IdNo INNER JOIN Ledger_Head tSP ON a.StockOff_IdNo <> 0 and a.StockOff_IdNo = tSP.Ledger_IdNo  INNER JOIN Cloth_Head tQ ON a.Cloth_IdNo <> 0 and a.Cloth_IdNo = tQ.Cloth_IdNo Where " & vCondt & IIf(Trim(vCondt) <> "", " and ", "") & " ( a.UnChecked_Meters <> 0 or a.Meters_Type1 <> 0 or a.Meters_Type2 <> 0 or a.Meters_Type3 <> 0 or a.Meters_Type4 <> 0 or a.Meters_Type5 <> 0 )"
            Cmd.ExecuteNonQuery()

            vCURRSTK_TYPE1 = 0
            vCURRSTK_TYPE2 = 0
            vCURRSTK_TYPE3 = 0
            vCURRSTK_TYPE4 = 0
            vCURRSTK_TYPE5 = 0

            Da = New SqlClient.SqlDataAdapter("Select Sum(a.Meters1) as Type1, Sum(a.Meters2) as Type2, Sum(a.Meters3) as Type3, Sum(a.Meters4) as Type4, Sum(a.Meters5) as Type5 from " & Trim(Common_Procedures.ReportTempSubTable) & " a having Sum(a.Meters1) <> 0 or Sum(a.Meters2) <> 0 or Sum(a.Meters3) <> 0 or Sum(a.Meters4) <> 0 or Sum(a.Meters5) <> 0", Cn1)
            Da.SelectCommand.Transaction = sqltr
            Dt = New DataTable
            Da.Fill(Dt)

            CurStk = 0
            If Dt.Rows.Count > 0 Then
                If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                    vCURRSTK_TYPE1 = Val(Dt.Rows(0)(0).ToString)
                End If
                If IsDBNull(Dt.Rows(0)(1).ToString) = False Then
                    vCURRSTK_TYPE2 = Val(Dt.Rows(0)(1).ToString)
                End If
                If IsDBNull(Dt.Rows(0)(2).ToString) = False Then
                    vCURRSTK_TYPE3 = Val(Dt.Rows(0)(2).ToString)
                End If
                If IsDBNull(Dt.Rows(0)(3).ToString) = False Then
                    vCURRSTK_TYPE4 = Val(Dt.Rows(0)(3).ToString)
                End If
                If IsDBNull(Dt.Rows(0)(4).ToString) = False Then
                    vCURRSTK_TYPE5 = Val(Dt.Rows(0)(4).ToString)
                End If
            End If


            If indx = 2 Then

                vFAB_UPTO_DateSTOCK_TYPE1 = vCURRSTK_TYPE1
                vFAB_UPTO_DateSTOCK_TYPE2 = vCURRSTK_TYPE2
                vFAB_UPTO_DateSTOCK_TYPE3 = vCURRSTK_TYPE3
                vFAB_UPTO_DateSTOCK_TYPE4 = vCURRSTK_TYPE4
                vFAB_UPTO_DateSTOCK_TYPE5 = vCURRSTK_TYPE5

                If vClothType_IdNo = 1 Then
                    If Val(vCURRSTK_TYPE1) < 0 Then
                        Return False
                        Exit Function
                    End If

                ElseIf vClothType_IdNo = 2 Then
                    If Val(vCURRSTK_TYPE2) < 0 Then
                        Return False
                        Exit Function
                    End If

                ElseIf vClothType_IdNo = 3 Then
                    If Val(vCURRSTK_TYPE3) < 0 Then
                        Return False
                        Exit Function
                    End If

                ElseIf vClothType_IdNo = 4 Then
                    If Val(vCURRSTK_TYPE4) < 0 Then
                        Return False
                        Exit Function
                    End If

                ElseIf vClothType_IdNo = 5 Then
                    If Val(vCURRSTK_TYPE5) < 0 Then
                        Return False
                        Exit Function
                    End If

                Else

                    If Val(vCURRSTK_TYPE1) < 0 Or Val(vCURRSTK_TYPE2) < 0 Or Val(vCURRSTK_TYPE3) < 0 Or Val(vCURRSTK_TYPE4) < 0 Or Val(vCURRSTK_TYPE5) < 0 Then
                        Return False
                        Exit Function
                    End If

                End If



            Else


                vFAB_CURRSTOCK_TYPE1 = vCURRSTK_TYPE1
                vFAB_CURRSTOCK_TYPE2 = vCURRSTK_TYPE2
                vFAB_CURRSTOCK_TYPE3 = vCURRSTK_TYPE3
                vFAB_CURRSTOCK_TYPE4 = vCURRSTK_TYPE4
                vFAB_CURRSTOCK_TYPE5 = vCURRSTK_TYPE5

                If vClothType_IdNo = 1 Then
                    If Val(vCURRSTK_TYPE1) < 0 Then
                        Return False
                        Exit Function
                    End If

                ElseIf vClothType_IdNo = 2 Then
                    If Val(vCURRSTK_TYPE2) < 0 Then
                        Return False
                        Exit Function
                    End If

                ElseIf vClothType_IdNo = 3 Then
                    If Val(vCURRSTK_TYPE3) < 0 Then
                        Return False
                        Exit Function
                    End If

                ElseIf vClothType_IdNo = 4 Then
                    If Val(vCURRSTK_TYPE4) < 0 Then
                        Return False
                        Exit Function
                    End If

                ElseIf vClothType_IdNo = 5 Then
                    If Val(vCURRSTK_TYPE5) < 0 Then
                        Return False
                        Exit Function
                    End If

                Else

                    If Val(vCURRSTK_TYPE1) < 0 Or Val(vCURRSTK_TYPE2) < 0 Or Val(vCURRSTK_TYPE3) < 0 Or Val(vCURRSTK_TYPE4) < 0 Or Val(vCURRSTK_TYPE5) < 0 Then
                        Return False
                        Exit Function
                    End If

                End If

            End If

        Next indx


        Dt.Dispose()
        Da.Dispose()

    End Function

    Public Shared Sub get_Fabric_CurrentStock_111(ByVal Cn1 As SqlClient.SqlConnection, ByVal vComp_IdNo As Integer, ByVal vSTOCKOF_IdNo As Integer, ByVal vGODWN_IdNo As Integer, ByVal vCloth_IdNo As Integer, ByVal vFOLDINGPERC As Double, ByRef vCURRSTOCK_TYPE1 As String, ByRef vCURRSTOCK_TYPE2 As String, ByRef vCURRSTOCK_TYPE3 As String, ByRef vCURRSTOCK_TYPE4 As String, ByRef vCURRSTOCK_TYPE5 As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing)
        Dim Cmd As New SqlClient.SqlCommand
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim CurStk As Decimal = 0
        Dim RptCondt As String = ""

        vCURRSTOCK_TYPE1 = 0
        vCURRSTOCK_TYPE2 = 0
        vCURRSTOCK_TYPE3 = 0
        vCURRSTOCK_TYPE4 = 0
        vCURRSTOCK_TYPE5 = 0

        RptCondt = "(a.company_idno = " & Str(Val(vComp_IdNo)) & ")"
        If Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1 Then
            RptCondt = ""
            If Trim(UCase(Common_Procedures.User.Type)) = "ACCOUNT" Then
                RptCondt = "(tZ.Company_Type <> 'UNACCOUNT')"
            End If
        End If

        If vCloth_IdNo <> 0 Then
            RptCondt = Trim(RptCondt) & IIf(Trim(RptCondt) <> "", " and ", "") & " tQ.Cloth_IdNo = " & Str(Val(vCloth_IdNo))
        End If

        If vSTOCKOF_IdNo <> 0 Then
            If vSTOCKOF_IdNo = 4 Or vSTOCKOF_IdNo = 5 Then
                RptCondt = Trim(RptCondt) & IIf(Trim(RptCondt) <> "", " and ", "") & " (tSP.Ledger_IdNo = 4 or tSP.Ledger_IdNo = 5)"
            Else
                RptCondt = Trim(RptCondt) & IIf(Trim(RptCondt) <> "", " and ", "") & " tSP.Ledger_IdNo = " & Str(Val(vSTOCKOF_IdNo))
            End If
        Else
            RptCondt = Trim(RptCondt) & IIf(Trim(RptCondt) <> "", " and ", "") & " (tSP.Ledger_IdNo = 4 or tSP.Ledger_IdNo = 5)"
        End If

        If Val(vFOLDINGPERC) <> 0 Then
            RptCondt = Trim(RptCondt) & IIf(Trim(RptCondt) <> "", " and ", "") & " a.Folding = " & Str(Val(vFOLDINGPERC))
        End If

        If vGODWN_IdNo <> 0 Then
            RptCondt = Trim(RptCondt) & IIf(Trim(RptCondt) <> "", " and ", "") & " tGOD.Ledger_IdNo = " & Str(Val(vGODWN_IdNo))
        Else
            RptCondt = Trim(RptCondt) & IIf(Trim(RptCondt) <> "", " and ", "") & " tGOD.Ledger_IdNo = " & Str(Val(Common_Procedures.CommonLedger.Godown_Ac))
        End If

        Cmd.Connection = Cn1

        If IsNothing(sqltr) = False Then
            Cmd.Transaction = sqltr
        End If

        Cmd.CommandText = "Truncate table " & Trim(Common_Procedures.ReportTempSubTable) & ""
        Cmd.ExecuteNonQuery()

        Cmd.CommandText = "Insert into " & Trim(Common_Procedures.ReportTempSubTable) & " ( Weight1, meters1, meters2, meters3, meters4, meters5) Select sum(a.UnChecked_Meters), sum(a.Meters_Type1), sum(a.Meters_Type2), sum(a.Meters_Type3), sum(a.Meters_Type4), sum(a.Meters_Type5) from Stock_Cloth_Processing_Details a INNER JOIN Company_Head tZ ON a.Company_IdNo <> 0 and a.Company_IdNo = tZ.Company_IdNo INNER JOIN Ledger_Head tGOD ON a.DeliveryTo_Idno <> 0 and tGOD.Ledger_Type = 'GODOWN' and a.DeliveryTo_Idno = tGOD.Ledger_IdNo INNER JOIN Ledger_Head tSP ON a.StockOff_IdNo <> 0 and a.StockOff_IdNo = tSP.Ledger_IdNo INNER JOIN Cloth_Head tQ ON a.Cloth_IdNo <> 0 and a.Cloth_IdNo = tQ.Cloth_IdNo Where " & RptCondt & IIf(Trim(RptCondt) <> "", " and ", "") & " ( a.UnChecked_Meters <> 0 or a.Meters_Type1 <> 0 or a.Meters_Type2 <> 0 or a.Meters_Type3 <> 0 or a.Meters_Type4 <> 0 or a.Meters_Type5 <> 0 )"
        Cmd.ExecuteNonQuery()
        Cmd.CommandText = "Insert into " & Trim(Common_Procedures.ReportTempSubTable) & " ( Weight1, meters1, meters2, meters3, meters4, meters5) Select -1*sum(a.UnChecked_Meters), -1*sum(a.Meters_Type1), -1*sum(a.Meters_Type2), -1*sum(a.Meters_Type3), -1*sum(a.Meters_Type4), -1*sum(a.Meters_Type5) from Stock_Cloth_Processing_Details a INNER JOIN Company_Head tZ ON a.Company_IdNo <> 0 and a.Company_IdNo = tZ.Company_IdNo INNER JOIN Ledger_Head tGOD ON a.ReceivedFrom_Idno <> 0 and tGOD.Ledger_Type = 'GODOWN' and a.ReceivedFrom_Idno = tGOD.Ledger_IdNo INNER JOIN Ledger_Head tSP ON a.StockOff_IdNo <> 0 and a.StockOff_IdNo = tSP.Ledger_IdNo  INNER JOIN Cloth_Head tQ ON a.Cloth_IdNo <> 0 and a.Cloth_IdNo = tQ.Cloth_IdNo Where " & RptCondt & IIf(Trim(RptCondt) <> "", " and ", "") & " ( a.UnChecked_Meters <> 0 or a.Meters_Type1 <> 0 or a.Meters_Type2 <> 0 or a.Meters_Type3 <> 0 or a.Meters_Type4 <> 0 or a.Meters_Type5 <> 0 )"
        Cmd.ExecuteNonQuery()

        vCURRSTOCK_TYPE1 = 0
        vCURRSTOCK_TYPE2 = 0
        vCURRSTOCK_TYPE3 = 0
        vCURRSTOCK_TYPE4 = 0
        vCURRSTOCK_TYPE5 = 0

        Da = New SqlClient.SqlDataAdapter("Select Sum(a.Meters1) as Type1, Sum(a.Meters2) as Type2, Sum(a.Meters3) as Type3, Sum(a.Meters4) as Type4, Sum(a.Meters5) as Type5 from " & Trim(Common_Procedures.ReportTempSubTable) & " a having Sum(a.Meters1) <> 0 or Sum(a.Meters2) <> 0 or Sum(a.Meters3) <> 0 or Sum(a.Meters4) <> 0 or Sum(a.Meters5) <> 0", Cn1)
        Da.SelectCommand.Transaction = sqltr
        Dt = New DataTable
        Da.Fill(Dt)

        CurStk = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vCURRSTOCK_TYPE1 = Val(Dt.Rows(0)(0).ToString)
            End If
            If IsDBNull(Dt.Rows(0)(1).ToString) = False Then
                vCURRSTOCK_TYPE2 = Val(Dt.Rows(0)(1).ToString)
            End If
            If IsDBNull(Dt.Rows(0)(2).ToString) = False Then
                vCURRSTOCK_TYPE3 = Val(Dt.Rows(0)(2).ToString)
            End If
            If IsDBNull(Dt.Rows(0)(3).ToString) = False Then
                vCURRSTOCK_TYPE4 = Val(Dt.Rows(0)(3).ToString)
            End If
            If IsDBNull(Dt.Rows(0)(4).ToString) = False Then
                vCURRSTOCK_TYPE5 = Val(Dt.Rows(0)(4).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

    End Sub

    Public Shared Sub ComboBox_ItemSelection_SetDataSource(ByVal sender As Object, ByVal Cn1 As SqlClient.SqlConnection, ByVal vTableName As String, ByVal vSelectionFieldName As String, ByVal vSqlCondition As String, ByVal vBlankFieldCondition As String)
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim vCboTxt As String = ""
        Dim SqlCondt As String = ""

        Try

            With sender

                If Trim(vTableName) <> "" And Trim(vSelectionFieldName) <> "" Then

                    vCboTxt = .Text

                    .DataSource = Nothing
                    .DisplayMember = ""
                    .SelectedText = ""
                    .SelectedIndex = -1

                    SqlCondt = ""
                    If Trim(vCboTxt) <> "" Then
                        SqlCondt = " Where " & Trim(vSelectionFieldName) & " = '" & Trim(vCboTxt) & "'"
                    End If

                    Da = New SqlClient.SqlDataAdapter("select distinct(" & Trim(vSelectionFieldName) & ") from " & vTableName & " " & SqlCondt & " order by " & vSelectionFieldName, Cn1)
                    Da.SelectCommand.CommandTimeout = 1000
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    If Dt1.Rows.Count > 0 Then
                        SqlCondt = ""
                        If Trim(vSqlCondition) <> "" Then
                            SqlCondt = " Where " & Trim(vBlankFieldCondition) & IIf(Trim(vBlankFieldCondition) <> "", " or ", "") & Trim(vSqlCondition)
                        End If

                        Da = New SqlClient.SqlDataAdapter("select distinct(" & Trim(vSelectionFieldName) & ") from " & vTableName & " " & SqlCondt & " order by " & vSelectionFieldName, Cn1)
                        Da.SelectCommand.CommandTimeout = 1000
                        Dt1 = New DataTable
                        Da.Fill(Dt1)
                        .DataSource = Dt1
                        .DisplayMember = Trim(vSelectionFieldName)

                    Else

                        Da = New SqlClient.SqlDataAdapter("select distinct(" & Trim(vSelectionFieldName) & ") from " & vTableName & " order by " & vSelectionFieldName, Cn1)
                        Da.SelectCommand.CommandTimeout = 1000
                        Dt1 = New DataTable
                        Da.Fill(Dt1)
                        If Dt1.Rows.Count > 0 Then
                            SqlCondt = ""
                            If Trim(vSqlCondition) <> "" Then
                                SqlCondt = " Where " & Trim(vBlankFieldCondition) & IIf(Trim(vBlankFieldCondition) <> "", " or ", "") & Trim(vSqlCondition)
                            End If

                            Da = New SqlClient.SqlDataAdapter("select distinct(" & Trim(vSelectionFieldName) & ") from " & vTableName & " " & SqlCondt & " order by " & vSelectionFieldName, Cn1)
                            Da.SelectCommand.CommandTimeout = 1000
                            Dt1 = New DataTable
                            Da.Fill(Dt1)
                            .DataSource = Dt1
                            .DisplayMember = Trim(vSelectionFieldName)
                        End If

                    End If

                    .Text = Trim(vCboTxt)

                End If

            End With

        Catch ex As Exception
            '---MessageBox.Show(ex.Message, "ERROR IN SETTING DATASOURCE " & sender.ToString & "....", MessageBoxButtons.OK, MessageBoxIcon.Error)

        Finally
            Da.Dispose()

        End Try

    End Sub


    Public Shared Sub ComboBox_ItemSelection_SetDataSource_111(ByVal sender As Object, ByVal Cn1 As SqlClient.SqlConnection, ByVal vTableName As String, ByVal vSelectionFieldName As String, ByVal vSqlCondition As String, ByVal vBlankFieldCondition As String)
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim vCboTxt As String = ""
        Dim SqlCondt As String = ""

        Try
            With sender
                If Trim(vTableName) <> "" And Trim(vSelectionFieldName) <> "" Then

                    vCboTxt = .Text

                    SqlCondt = ""
                    If Trim(vSqlCondition) <> "" Then
                        SqlCondt = " Where " & Trim(vBlankFieldCondition) & IIf(Trim(vBlankFieldCondition) <> "", " or ", "") & Trim(vSqlCondition)
                    End If

                    Da = New SqlClient.SqlDataAdapter("select distinct(" & Trim(vSelectionFieldName) & ") from " & vTableName & " " & SqlCondt & " order by " & vSelectionFieldName, Cn1)
                    Dt1 = New DataTable
                    Da.Fill(Dt1)
                    .DataSource = Dt1
                    .DisplayMember = Trim(vSelectionFieldName)

                    .Text = Trim(vCboTxt)

                End If

            End With


        Catch ex As Exception
            'MessageBox.Show(ex.Message, "ERROR IN SETTING DATASOURCE " & sender.ToString & "....", MessageBoxButtons.OK, MessageBoxIcon.Error)

        Finally
            Da.Dispose()

        End Try

    End Sub

    'Public Shared Sub ComboBox_ItemSelection_SetDataSource(ByVal sender As Object, ByVal Cn1 As SqlClient.SqlConnection, ByVal vTableName As String, ByVal vSelectionFieldName As String, ByVal vSqlCondition As String, ByVal vBlankFieldCondition As String)
    '    Dim Da As New SqlClient.SqlDataAdapter
    '    Dim Dt1 As New DataTable
    '    Dim vCboTxt As String = ""
    '    Dim SqlCondt As String = ""

    '    Try
    '        With sender
    '            If Trim(vTableName) <> "" And Trim(vSelectionFieldName) <> "" Then

    '                vCboTxt = .Text

    '                SqlCondt = ""
    '                If Trim(vSqlCondition) <> "" Then
    '                    SqlCondt = " Where " & Trim(vBlankFieldCondition) & IIf(Trim(vBlankFieldCondition) <> "", " or ", "") & Trim(vSqlCondition)
    '                End If

    '                Da = New SqlClient.SqlDataAdapter("select distinct(" & Trim(vSelectionFieldName) & ") from " & vTableName & " " & SqlCondt & " order by " & vSelectionFieldName, Cn1)
    '                Dt1 = New DataTable
    '                Da.Fill(Dt1)
    '                .DataSource = Dt1
    '                .DisplayMember = Trim(vSelectionFieldName)

    '                .Text = Trim(vCboTxt)

    '            End If

    '        End With

    '    Catch ex As Exception
    '        '---MessageBox.Show(ex.Message, "ERROR IN SETTING DATASOURCE " & sender.ToString & "....", MessageBoxButtons.OK, MessageBoxIcon.Error)

    '    Finally
    '        Da.Dispose()

    '    End Try

    'End Sub

    Public Shared Sub Drop_Column_Default_Constraint(ByVal Cn1 As SqlClient.SqlConnection, ByVal TblName As String, ByVal FldName As String)
        Dim Cmd As New SqlClient.SqlCommand
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim DF_ConsName As String

        Try

            DF_ConsName = ""

            Da = New SqlClient.SqlDataAdapter("select d.name as Default_ConstraintName from sysobjects a inner join dbo.syscolumns c on a.id = c.id inner join dbo.sysobjects d on c.cdefault = d.id Where a.name = '" & Trim(TblName) & "' and c.name = '" & Trim(FldName) & "'", Cn1)
            Dt1 = New DataTable
            Da.Fill(Dt1)
            If Dt1.Rows.Count > 0 Then
                If IsDBNull(Dt1.Rows(0).Item("Default_ConstraintName").ToString) = False Then
                    If Trim(Dt1.Rows(0).Item("Default_ConstraintName").ToString) <> "" Then DF_ConsName = Dt1.Rows(0).Item("Default_ConstraintName").ToString
                End If
            End If
            Dt1.Clear()

            If Trim(DF_ConsName) <> "" Then

                Cmd.Connection = Cn1

                Cmd.CommandText = "ALTER TABLE [dbo].[" & Trim(TblName) & "] DROP CONSTRAINT " & Trim(DF_ConsName)
                Cmd.ExecuteNonQuery()

            End If

        Catch ex As Exception
            '---MessageBox.Show(ex.Message, "ERROR IN DROPPING CONSTRAINT....", MessageBoxButtons.OK, MessageBoxIcon.Error)

        Finally
            Da.Dispose()
            Dt1.Dispose()
            Cmd.Dispose()

        End Try

    End Sub


    Public Shared Function Create_Sql_ConnectionString(ByVal DBName As String) As String
        Dim myConnection_string As String
        Dim pth As String
        Dim fs As FileStream
        Dim w As StreamWriter
        Dim sInpIP As String = ""

        If Trim(UCase(Common_Procedures.ServerWindowsLogin)) = "IP" Or Trim(UCase(Common_Procedures.ServerWindowsLogin)) = "SIP" Or Trim(UCase(Common_Procedures.ServerWindowsLogin)) = "DIP" Then
            If Trim(UCase(Common_Procedures.ServerWindowsLogin)) = "DIP" Then
                If Common_Procedures.First_Opened_Today = True Then
                    sInpIP = InputBox("Enter Server System IP address :", "FOR CORRECT SERVER SYSTEM IP ADDRESS..", Trim(Common_Procedures.ServerName))

                    If Trim(sInpIP) <> "" Then
                        pth = Trim(Common_Procedures.AppPath) & "\connection.ini"

                        If File.Exists(pth) = True Then
                            File.Delete(pth)
                        End If

                        Common_Procedures.ServerName = Trim(sInpIP)

                        fs = New FileStream(pth, FileMode.Create)
                        w = New StreamWriter(fs)
                        w.WriteLine(Trim(Common_Procedures.ServerName) & "," & Trim(Common_Procedures.ServerPassword) & ",DIP")
                        w.Close()
                        fs.Close()
                        w.Dispose()
                        fs.Dispose()

                        Common_Procedures.First_Opened_Today = False

                    End If
                End If
            End If

            If Val(Common_Procedures.SqlServer_PortNumber) = 0 Then Common_Procedures.SqlServer_PortNumber = "1433"
            If Trim(Common_Procedures.ServerLoginID) = "" Then Common_Procedures.ServerLoginID = "sa"
            myConnection_string = "Data Source=" & Trim(Common_Procedures.ServerName) & "," & Trim(Val(Common_Procedures.SqlServer_PortNumber)) & ";Network Library=DBMSSOCN;Initial Catalog=" & Trim(DBName) & ";User ID=" & Trim(Common_Procedures.ServerLoginID) & ";Password=" & Trim(Common_Procedures.ServerPassword) & ";Integrated Security=False;Connect Timeout=120"
            'myConnection_string = "Data Source=" & Trim(Common_Procedures.ServerName) & ",1433;Network Library=DBMSSOCN;Initial Catalog=" & Trim(DBName) & ";User ID=sa;Password=" & Trim(Common_Procedures.ServerPassword) & ";Integrated Security=False;Connect Timeout=60"

        ElseIf Trim(UCase(Common_Procedures.ServerWindowsLogin)) = "WIN" Then
            myConnection_string = "Data Source=" & Trim(Common_Procedures.ServerName) & ";Initial Catalog=" & Trim(DBName) & ";Integrated Security=True;Connect Timeout=120"

        Else
            If Trim(Common_Procedures.ServerLoginID) = "" Then Common_Procedures.ServerLoginID = "sa"
            myConnection_string = "Data Source=" & Trim(Common_Procedures.ServerName) & ";Initial Catalog=" & Trim(DBName) & ";User ID=" & Trim(Common_Procedures.ServerLoginID) & ";Password=" & Trim(Common_Procedures.ServerPassword) & ";Integrated Security=False;Connect Timeout=120"

        End If


        Create_Sql_ConnectionString = Trim(myConnection_string)

    End Function

    Public Shared Sub get_SMS_Provider_Details(ByVal Cn1 As SqlClient.SqlConnection, ByVal CompIDNo As Integer, ByRef SMS_SenderID As String, ByRef SMS_Key As String, ByRef SMS_RouteID As String, ByRef SMS_Type As String)
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim S_SenderID As String = ""
        Dim S_Key As String = ""
        Dim S_RouteID As String = ""
        Dim S_Type As String = ""

        Try
            If Val(CompIDNo) = 0 Then

                SMS_SenderID = Trim(Common_Procedures.settings.SMS_Provider_SenderID)
                SMS_Key = Trim(Common_Procedures.settings.SMS_Provider_Key)
                SMS_RouteID = Trim(Common_Procedures.settings.SMS_Provider_RouteID)
                SMS_Type = Trim(Common_Procedures.settings.SMS_Provider_Type)

            Else

                S_SenderID = ""
                S_Key = ""
                S_RouteID = ""
                S_Type = ""

                Da1 = New SqlClient.SqlDataAdapter("select * from company_head where company_idno = " & Str(Val(CompIDNo)), Cn1)
                Dt1 = New DataTable
                Da1.Fill(Dt1)
                If Dt1.Rows.Count > 0 Then
                    If IsDBNull(Dt1.Rows(0).Item("SMS_Provider_SenderID").ToString) = False Then
                        S_SenderID = Trim(Dt1.Rows(0).Item("SMS_Provider_SenderID").ToString)
                    End If
                    If IsDBNull(Dt1.Rows(0).Item("SMS_Provider_Key").ToString) = False Then
                        S_Key = Trim(Dt1.Rows(0).Item("SMS_Provider_Key").ToString)
                    End If
                    If IsDBNull(Dt1.Rows(0).Item("SMS_Provider_RouteID").ToString) = False Then
                        S_RouteID = Trim(Dt1.Rows(0).Item("SMS_Provider_RouteID").ToString)
                    End If
                    If IsDBNull(Dt1.Rows(0).Item("SMS_Provider_Type").ToString) = False Then
                        S_Type = Trim(Dt1.Rows(0).Item("SMS_Provider_Type").ToString)
                    End If
                End If
                Dt1.Clear()

                If Trim(S_SenderID) <> "" And Trim(S_Key) <> "" And Trim(S_RouteID) <> "" Then
                    SMS_SenderID = Trim(S_SenderID)
                    SMS_Key = Trim(S_Key)
                    SMS_RouteID = Trim(S_RouteID)
                    SMS_Type = Trim(S_Type)

                Else
                    SMS_SenderID = Trim(Common_Procedures.settings.SMS_Provider_SenderID)
                    SMS_Key = Trim(Common_Procedures.settings.SMS_Provider_Key)
                    SMS_RouteID = Trim(Common_Procedures.settings.SMS_Provider_RouteID)
                    SMS_Type = Trim(Common_Procedures.settings.SMS_Provider_Type)

                End If

            End If

            Dt1.Dispose()
            Da1.Dispose()

        Catch ex As Exception
            MessageBox.Show(ex.Message, "ERROR GETTING SMS PROVIDER DETAILS...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub
    Public Shared Function Machine_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vMachine_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vMachine_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Machine_IdNo from Machine_Head where Machine_Name = '" & Trim(vMachine_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vMachine_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vMachine_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Machine_NameToIdNo = Val(vMachine_ID)

    End Function

    Public Shared Function Machine_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vMachine_ID As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vMachine_Name As String

        Da = New SqlClient.SqlDataAdapter("select Machine_Name from Machine_Head where Machine_IdNo = " & Str(Val(vMachine_ID)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vMachine_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vMachine_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Machine_IdNoToName = Trim(vMachine_Name)

    End Function
    Public Shared Function itemalais_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vitemalais_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vitemalais_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select item_IdNo from Stores_item_alaisHead where item_DisplayName = '" & Trim(vitemalais_Name) & "' order by Item_IdNo", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vitemalais_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vitemalais_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        itemalais_NameToIdNo = Val(vitemalais_ID)

    End Function

    Public Shared Function itemalais_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vitemalais_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vitemalais_Name As String

        Da = New SqlClient.SqlDataAdapter("select item_DisplayName from Stores_item_alaisHead where item_IdNo = " & Str(Val(vitemalais_ID)), Cn1)
        Da.Fill(Dt)

        vitemalais_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vitemalais_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        itemalais_IdNoToName = Trim(vitemalais_Name)

    End Function
    Public Shared Function reedcount_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vreedcount_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vreedcount_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Count_IdNo from Count_Head where Count_Name = '" & Trim(vreedcount_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vreedcount_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vreedcount_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        reedcount_NameToIdNo = Val(vreedcount_ID)

    End Function

    Public Shared Function reedcount_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vreedcount_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vreedcount_Name As String

        Da = New SqlClient.SqlDataAdapter("select Count_Name from Count_Head where Count_IdNo = " & Str(Val(vreedcount_ID)), Cn1)
        Da.Fill(Dt)

        vreedcount_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vreedcount_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        reedcount_IdNoToName = Trim(vreedcount_Name)

    End Function
    Public Shared Function reedwidth_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vreedwidth_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vreedwidth_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select ReedWidth_IdNo from ReedWidth_Head where ReedWidth_Name = '" & Trim(vreedwidth_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vreedwidth_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vreedwidth_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        reedwidth_NameToIdNo = Val(vreedwidth_ID)

    End Function

    Public Shared Function reedwidth_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vreedwidth_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vreedwidth_Name As String

        Da = New SqlClient.SqlDataAdapter("select ReedWidth_Name from ReedWidth_Head where ReedWidth_IdNo = " & Str(Val(vreedwidth_ID)), Cn1)
        Da.Fill(Dt)

        vreedwidth_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vreedwidth_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        reedwidth_IdNoToName = Trim(vreedwidth_Name)

    End Function
    Public Shared Function Department_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vDepartment_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vDepartment_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Department_IdNo from Department_Head where Department_Name = '" & Trim(vDepartment_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vDepartment_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vDepartment_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Department_NameToIdNo = Val(vDepartment_ID)

    End Function

    Public Shared Function Department_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vDepartment_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vDepartment_Name As String

        Da = New SqlClient.SqlDataAdapter("select Department_Name from Department_Head where Department_IdNo = " & Str(Val(vDepartment_ID)), Cn1)
        Da.Fill(Dt)

        vDepartment_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vDepartment_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Department_IdNoToName = Trim(vDepartment_Name)

    End Function

    Public Shared Function Variety_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vVarty_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vVarty_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Variety_IdNo from Variety_Head where Variety_Name = '" & Trim(vVarty_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vVarty_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vVarty_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Variety_NameToIdNo = Val(vVarty_ID)

    End Function

    Public Shared Function Variety_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vVarty_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vVarty_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Variety_Name from Variety_Head where Variety_IdNo = " & Str(Val(vVarty_ID)), Cn1)
        Da.Fill(Dt)

        vVarty_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vVarty_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Variety_IdNoToName = Trim(vVarty_Nm)

    End Function

    Public Shared Function Brand_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vBrand_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vBrand_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Brand_IdNo from Brand_Head where Brand_Name = '" & Trim(vBrand_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vBrand_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vBrand_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Brand_NameToIdNo = Val(vBrand_ID)

    End Function

    Public Shared Function Brand_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vBrand_ID As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vBrand_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Brand_Name from Brand_Head where Brand_IdNo = " & Str(Val(vBrand_ID)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vBrand_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vBrand_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Brand_IdNoToName = Trim(vBrand_Nm)

    End Function
    Public Shared Function Stores_Item_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vItem_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vItem_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Item_IdNo from Stores_item_head where Item_Name = '" & Trim(vItem_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vItem_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vItem_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Stores_Item_NameToIdNo = Val(vItem_ID)

    End Function

    Public Shared Function Stores_Item_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vItem_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vItem_Name As String

        Da = New SqlClient.SqlDataAdapter("select Item_Name from Stores_item_head where Item_IdNo = " & Str(Val(vItem_ID)), Cn1)
        Da.Fill(Dt)

        vItem_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vItem_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Stores_Item_IdNoToName = Trim(vItem_Name)

    End Function

    Public Shared Sub maskEdit_Date_ON_DelBackSpace(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs, ByVal mskOldText As String, ByVal mskSelStrt As Integer)
        Dim vmRetTxt As String = ""
        Dim vmRetSelStrt As Integer = -1

        If e.KeyCode = 46 Or e.KeyCode = 8 Then

            If e.KeyCode = 46 Then
                If mskSelStrt <= 2 Then
                    vmRetTxt = "  " & Microsoft.VisualBasic.Mid(mskOldText, 3, Len(mskOldText))
                    vmRetSelStrt = 0
                ElseIf mskSelStrt >= 3 And mskSelStrt <= 5 Then
                    vmRetTxt = Microsoft.VisualBasic.Left(mskOldText, 3) & "  " & Microsoft.VisualBasic.Mid(mskOldText, 6, Len(mskOldText))
                    vmRetSelStrt = 3
                Else
                    vmRetTxt = Microsoft.VisualBasic.Left(mskOldText, 6)
                    vmRetSelStrt = 6
                End If

                sender.Text = vmRetTxt
                sender.SelectionStart = vmRetSelStrt

            ElseIf e.KeyCode = 8 Then
                If mskSelStrt > 0 Then
                    vmRetTxt = Microsoft.VisualBasic.Left(mskOldText, mskSelStrt - 1) & " " & Microsoft.VisualBasic.Mid(mskOldText, mskSelStrt + 1, Len(mskOldText))
                Else
                    vmRetTxt = mskOldText
                End If

                sender.Text = vmRetTxt

                If mskSelStrt > 0 Then
                    sender.SelectionStart = mskSelStrt - 1
                End If

            End If

        End If

    End Sub

    Public Shared Function is_ServerSystem() As Boolean
        Dim InstNm As String
        Dim vIPAddress As String

        InstNm = Right(Common_Procedures.ServerName, Len(Common_Procedures.ServerName) - InStr(1, Common_Procedures.ServerName, "\"))

        is_ServerSystem = False
        If Trim(UCase(Common_Procedures.ServerWindowsLogin)) = "IP" Or Trim(UCase(Common_Procedures.ServerWindowsLogin)) = "SIP" Or Trim(UCase(Common_Procedures.ServerWindowsLogin)) = "DIP" Then
            Exit Function
        End If
        vIPAddress = Common_Procedures.GetIPAddress()
        If Trim(UCase(Common_Procedures.ServerName)) = Trim(UCase(Trim(SystemInformation.ComputerName))) Or Trim(UCase(Common_Procedures.ServerName)) = Trim(UCase(vIPAddress)) Or Trim(UCase(Common_Procedures.ServerName)) = Trim(UCase(Trim(SystemInformation.ComputerName) & "\" & Trim(InstNm))) Or Trim(UCase(Common_Procedures.ServerName)) = Trim(UCase(Trim(vIPAddress) & "\" & Trim(InstNm))) Then
            is_ServerSystem = True
        End If

    End Function

    Public Shared Function GetIPAddress() As String
        Dim strHostName As String
        Dim strIPAddress As String

        strHostName = System.Net.Dns.GetHostName()
        strIPAddress = System.Net.Dns.GetHostByName(strHostName).AddressList(0).ToString()

        Return strIPAddress
    End Function

    Public Shared Function get_Server_SystemName() As String
        Dim InstNm As String = ""
        Dim ServerNm As String = ""

        If InStr(1, Common_Procedures.ServerName, "\") > 0 Then
            InstNm = Right(Common_Procedures.ServerName, Len(Common_Procedures.ServerName) - InStr(1, Common_Procedures.ServerName, "\"))

            ServerNm = Replace(Trim(UCase(Common_Procedures.ServerName)), Trim(UCase("\" & InstNm)), "")
        Else
            ServerNm = Trim(UCase(Common_Procedures.ServerName))
        End If


        get_Server_SystemName = ServerNm

    End Function

    Public Shared Function get_SQLServer_InstanceName() As String
        Dim InstNm As String

        If InStr(1, Common_Procedures.ServerName, "\") > 0 Then

            InstNm = Right(Common_Procedures.ServerName, Len(Common_Procedures.ServerName) - InStr(1, Common_Procedures.ServerName, "\"))

        Else

            InstNm = ""

        End If

        get_SQLServer_InstanceName = InstNm

    End Function

    Public Shared Function is_Database_File_Exists(ByVal DbName As String) As Boolean
        Dim cn1 As SqlClient.SqlConnection
        Dim da1 As New SqlClient.SqlDataAdapter
        Dim dt1 As New DataTable
        Dim mdf_filname As String = "", ldf_filname As String = "", FlNm As String = ""
        Dim SysNm As String

        is_Database_File_Exists = False
        Err.Description = ""

        Try

            cn1 = New SqlClient.SqlConnection(Common_Procedures.ConnectionString_Master)
            cn1.Open()

            da1 = New SqlClient.SqlDataAdapter("Select * from sysdatabases where name = '" & Trim(DbName) & "'", cn1)
            dt1 = New DataTable
            da1.Fill(dt1)

            If dt1.Rows.Count > 0 Then

                Call get_DataBase_MdfLdf_FileNames(DbName, mdf_filname, ldf_filname)

                If Trim(mdf_filname) = "" Then
                    Err.Description = "database file does not exists"
                    Exit Function
                End If
                If Trim(ldf_filname) = "" Then
                    Err.Description = "database file does not exists"
                    Exit Function
                End If

                FlNm = Trim(mdf_filname)
                If Common_Procedures.is_ServerSystem = False Then

                    SysNm = Common_Procedures.get_Server_SystemName
                    FlNm = "\\" & Trim(SysNm) & "\" & Trim(Replace(mdf_filname, ":\", "\"))

                    'If InStr(1, "\mssql\data\") > 0 Then
                    '    FldrNm()

                    'End If

                    If File.Exists(FlNm) = False Then
                        Err.Description = "database file does not exists"
                        Exit Function
                    End If

                    'Dim sFile As New FileInfo(FlNm)

                    ''FileInfo sFile = new FileInfo(@"\\server\share\file.xml")
                    ''bool fileExist = sFile.Exists;

                    'If sFile.Exists = False Then
                    '    Err.Description = "database file does not exists"
                    '    Exit Function
                    'End If


                Else
                    If File.Exists(FlNm) = False Then
                        Err.Description = "database file does not exists"
                        Exit Function
                    End If

                End If



                FlNm = Trim(ldf_filname)
                If Common_Procedures.is_ServerSystem = False Then
                    SysNm = Common_Procedures.get_Server_SystemName

                    FlNm = "\\" & Trim(SysNm) & "\" & Trim(Replace(ldf_filname, ":\", "\"))
                End If
                If File.Exists(FlNm) = False Then
                    Err.Description = "database file does not exists"
                    Exit Function
                End If

            Else
                Err.Description = Trim(DbName) & " does not exists"
                Exit Function

            End If

            dt1.Dispose()
            da1.Dispose()

            cn1.Close()
            cn1 = Nothing

            is_Database_File_Exists = True

        Catch ex As Exception
            MessageBox.Show("Select Company Group Name", "INVALID COMPANY GROUP SELECTION....", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Function

    Public Shared Function is_Table_Exists(ByVal DBName As String, ByVal tblName As String) As Boolean
        Dim Cn1 As SqlClient.SqlConnection
        Dim cmd As New SqlClient.SqlCommand
        Dim vConnStr As String

        If Trim(DBName) = "" Or Trim(tblName) = "" Then
            is_Table_Exists = False
            Exit Function
        End If

        vConnStr = Common_Procedures.Create_Sql_ConnectionString(Trim(DBName))

        Cn1 = New SqlClient.SqlConnection(vConnStr)
        Cn1.Open()

        Dim restrictions(3) As String
        restrictions(2) = Trim(tblName)

        Dim dbTbl As DataTable = Cn1.GetSchema("Tables", restrictions)

        If dbTbl.Rows.Count = 0 Then
            is_Table_Exists = False
        Else
            is_Table_Exists = True
        End If
        dbTbl.Clear()

        dbTbl.Dispose()
        Cn1.Close()
        Cn1.Dispose()
    End Function

    Public Shared Function is_FieldName_Exists(ByVal Cn1 As SqlClient.SqlConnection, ByVal tblName As String, ByVal fldName As String) As Boolean
        Dim Da1 As SqlClient.SqlDataAdapter
        Dim Dt1 As DataTable
        Dim vRETSTS As Boolean = False

        If Trim(fldName) = "" Or Trim(tblName) = "" Then
            Return False
            Exit Function
        End If


        vRETSTS = False

        Da1 = New SqlClient.SqlDataAdapter("SELECT * FROM sys.columns  WHERE Name = N'" & Trim(fldName) & "' AND Object_ID = Object_ID(N'" & Trim(tblName) & "')", Cn1)
        Dt1 = New DataTable
        Da1.Fill(Dt1)

        If Dt1.Rows.Count > 0 Then
            If IsDBNull(Dt1.Rows(0)(0).ToString) = False Then
                vRETSTS = True
            End If
        End If

        Dt1.Dispose()
        Da1.Dispose()

        Return vRETSTS

    End Function
    Public Shared Sub get_DataBase_MdfLdf_FileNames(ByVal DbName As String, ByRef MDF_FileName As String, ByRef LDF_FileName As String)
        Dim CnMas As SqlClient.SqlConnection
        Dim Da1 As SqlClient.SqlDataAdapter
        Dim Dt1 As DataTable
        Dim Da2 As SqlClient.SqlDataAdapter
        Dim Dt2 As DataTable

        Dim DefPath As String

        CnMas = New SqlClient.SqlConnection(Common_Procedures.ConnectionString_Master)
        CnMas.Open()

        MDF_FileName = ""
        LDF_FileName = ""

        Da1 = New SqlClient.SqlDataAdapter("SELECT * FROM sysdatabases WHERE name = '" & Trim(DbName) & "'", CnMas)
        Dt1 = New DataTable
        Da1.Fill(Dt1)

        If Dt1.Rows.Count > 0 Then

            MDF_FileName = Dt1.Rows(0).Item("FileName").ToString
            If InStr(1, LCase(MDF_FileName), "_data.mdf") > 0 Then
                LDF_FileName = Replace(LCase(MDF_FileName), "_data.mdf", "_log.ldf")
            Else
                LDF_FileName = Replace(LCase(MDF_FileName), ".mdf", "_log.ldf")
            End If


            'If Common_Procedures.is_ServerSystem = True Then
            '    If File.Exists(LDF_FileName) = False Then
            '        LDF_FileName = Replace(LCase(MDF_FileName), "_data.mdf", "_log.ldf")
            '        If File.Exists(LDF_FileName) = False Then
            '            GoTo 100
            '        End If
            '    End If
            'End If


        Else

100:
            Da2 = New SqlClient.SqlDataAdapter("SELECT * FROM sysdatabases WHERE name = 'master'", CnMas)
            Dt2 = New DataTable
            Da2.Fill(Dt2)

            If Dt2.Rows.Count > 0 Then

                DefPath = Replace(LCase(Dt2.Rows(0).Item("FileName").ToString), "\master_data.mdf", "")
                DefPath = Replace(LCase(Dt2.Rows(0).Item("FileName").ToString), "\master.mdf", "")

                MDF_FileName = Trim(DefPath) & "\" & Trim(DbName) & ".mdf"
                LDF_FileName = Trim(DefPath) & "\" & Trim(DbName) & "_log.ldf"

            End If
            Dt2.Dispose()
        End If
        Dt1.Dispose()

        CnMas.Close()
        CnMas = Nothing

    End Sub

    Public Shared Function Encrypt(ByVal plainText As String, ByVal passPhrase As String, ByVal saltValue As String) As String
        'Dim passPhrase As String = "T.ThanGesWaran"
        'Dim saltValue As String = "N.VaRaLakshmi"
        Dim hashAlgorithm As String = "SHA1"

        Dim passwordIterations As Integer = 2
        Dim initVector As String = "@1B2c3D4e5F6g7H8"
        Dim keySize As Integer = 256

        Dim initVectorBytes As Byte() = Encoding.ASCII.GetBytes(initVector)
        Dim saltValueBytes As Byte() = Encoding.ASCII.GetBytes(saltValue)

        Dim plainTextBytes As Byte() = Encoding.UTF8.GetBytes(plainText)

        Dim mypassword As New Rfc2898DeriveBytes(passPhrase, saltValueBytes, passwordIterations)

        Dim keyBytes As Byte() = mypassword.GetBytes(keySize \ 8)
        Dim symmetricKey As New RijndaelManaged()

        symmetricKey.Mode = CipherMode.CBC

        Dim encryptor As ICryptoTransform = symmetricKey.CreateEncryptor(keyBytes, initVectorBytes)

        Dim memoryStream As New MemoryStream()
        Dim cryptoStream As New CryptoStream(memoryStream, encryptor, CryptoStreamMode.Write)

        cryptoStream.Write(plainTextBytes, 0, plainTextBytes.Length)
        cryptoStream.FlushFinalBlock()
        Dim cipherTextBytes As Byte() = memoryStream.ToArray()
        memoryStream.Close()
        cryptoStream.Close()
        Dim cipherText As String = Convert.ToBase64String(cipherTextBytes)
        Return cipherText
    End Function

    Public Shared Function Decrypt(ByVal cipherText As String, ByVal passPhrase As String, ByVal saltValue As String) As String
        Dim plainText As String = ""

        Try

            'Dim passPhrase As String = "T.ThanGesWaran"
            'Dim saltValue As String = "N.VaRaLakshmi"
            Dim hashAlgorithm As String = "SHA1"

            Dim passwordIterations As Integer = 2
            Dim initVector As String = "@1B2c3D4e5F6g7H8"
            Dim keySize As Integer = 256
            ' Convert strings defining encryption key characteristics into byte
            ' arrays. Let us assume that strings only contain ASCII codes.
            ' If strings include Unicode characters, use Unicode, UTF7, or UTF8
            ' encoding.
            Dim initVectorBytes As Byte() = Encoding.ASCII.GetBytes(initVector)
            Dim saltValueBytes As Byte() = Encoding.ASCII.GetBytes(saltValue)

            ' Convert our ciphertext into a byte array.
            Dim cipherTextBytes As Byte() = Convert.FromBase64String(cipherText)

            ' First, we must create a password, from which the key will be 
            ' derived. This password will be generated from the specified 
            ' passphrase and salt value. The password will be created using
            ' the specified hash algorithm. Password creation can be done in
            ' several iterations.
            Dim mypassword As New Rfc2898DeriveBytes(passPhrase, saltValueBytes, passwordIterations)
            'Dim mypassword As New PasswordDeriveBytes(passPhrase, saltValueBytes, hashAlgorithm, passwordIterations)

            ' Use the password to generate pseudo-random bytes for the encryption
            ' key. Specify the size of the key in bytes (instead of bits).
            Dim keyBytes As Byte() = mypassword.GetBytes(keySize \ 8)

            ' Create uninitialized Rijndael encryption object.
            Dim symmetricKey As New RijndaelManaged()

            ' It is reasonable to set encryption mode to Cipher Block Chaining
            ' (CBC). Use default options for other symmetric key parameters.
            symmetricKey.Mode = CipherMode.CBC

            ' Generate decryptor from the existing key bytes and initialization 
            ' vector. Key size will be defined based on the number of the key 
            ' bytes.
            Dim decryptor As ICryptoTransform = symmetricKey.CreateDecryptor(keyBytes, initVectorBytes)

            ' Define memory stream which will be used to hold encrypted data.
            Dim memoryStream As New MemoryStream(cipherTextBytes)

            ' Define cryptographic stream (always use Read mode for encryption).
            Dim cryptoStream As New CryptoStream(memoryStream, decryptor, CryptoStreamMode.Read)

            ' Since at this point we don't know what the size of decrypted data
            ' will be, allocate the buffer long enough to hold ciphertext;
            ' plaintext is never longer than ciphertext.
            Dim plainTextBytes As Byte() = New Byte(cipherTextBytes.Length - 1) {}

            ' Start decrypting.
            Dim decryptedByteCount As Integer = cryptoStream.Read(plainTextBytes, 0, plainTextBytes.Length)

            ' Close both streams.
            memoryStream.Close()
            cryptoStream.Close()

            ' Convert decrypted data into a string. 
            ' Let us assume that the original plaintext string was UTF8-encoded.
            plainText = Encoding.UTF8.GetString(plainTextBytes, 0, decryptedByteCount)

            ' Return decrypted string.   
            Return plainText

        Catch ex As Exception
            plainText = "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
            Return plainText

        End Try

    End Function

    Public Shared Function GetDriveSerialNumber(ByVal DriveLetter As String) As String
        Try
            Dim disk As ManagementObject = New ManagementObject(String.Format("Win32_Logicaldisk='{0}'", DriveLetter))
            Dim VolumeName As String = disk.Properties("VolumeName").Value.ToString()
            Dim SerialNumber As String = disk.Properties("VolumeSerialnumber").Value.ToString()
            Return SerialNumber
            'Return SerialNumber.Insert(4, "-")

        Catch ex As Exception
            Return ""

        End Try
    End Function


    Public Shared Sub Default_StateHead_Updation(ByVal Cn1 As SqlClient.SqlConnection)
        Dim cmd As New SqlClient.SqlCommand

        cmd.Connection = Cn1

        cmd.CommandText = "delete from State_Head"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (0,     '',                '',         0)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (1,     'ANDAMAN AND NICOBAR ISLANDS'  ,   'ANDAMANANDNICOBARISLANDS'    ,      35)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (2,     'ANDHRA PRADESH'               ,    'ANDHRAPRADESH'              ,      37)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (3,     'ANDHRA PRADESH (NEW)'         ,    'ANDHRAPRADESHNEW'           ,      37)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (4,     'ARUNACHAL PRADESH'            ,    'ARUNACHALPRADESH'           ,      12)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (5,     'ASSAM'                        ,    'ASSAM'                      ,      18)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (6,     'BIHAR'                        ,    'BIHAR'                      ,      10)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (7,     'CHANDIGARH'                   ,   'CHANDIGARH'                  ,      '04')"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (8,     'CHHATTISGARH'                 ,    'CHHATTISGARH'               ,      22)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (9,     'DADRA AND NAGAR HAVELI'       ,    'DADRAANDNAGARHAVELI'        ,      26)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (10,    'DAMAN AND DIU'                ,    'DAMANANDDIU'                ,      26)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (11,    'DELHI'                        ,    'DELHI'                      ,      '07')"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (12,    'GOA'                          ,    'GOA'                        ,      30)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (13,    'GUJARAT'                      ,    'GUJARAT'                    ,      24)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (14,    'HARYANA '                     ,    'HARYANA'                    ,      '06')"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (15,    'HIMACHAL PRADESH'             ,    'HIMACHALPRADESH'            ,      '02')"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (16,    'JAMMU AND KASHMIR'            ,    'JAMMUANDKASHMIR'            ,      '01')"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (17,    'JHARKHAND'                    ,    'JHARKHAND'                  ,      20)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (18,    'KARNATAKA'                    ,    'KARNATAKA'                  ,     29)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (19,    'KERALA'                       ,    'KERALA'                     ,     32)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (20,    'LAKSHADWEEPH'                 ,    'LAKSHADWEEPH'               ,      31)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (21,    'MADHYA PRADESH'               ,    'MADHYAPRADESH'              ,     23)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (22,    'MAHARASHTRA'                  ,    'MAHARASHTRA'                ,     27)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (23,    'MANIPUR'                      ,    'MANIPUR'                    ,      14)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (24,    'MEGHALAYA'                    ,    'MEGHALAYA'                  ,      17)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (25,    'MIZORAM'                      ,    'MIZORAM'                    ,     15)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (26,    'NAGALAND'                     ,    'NAGALAND'                   ,      13)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (27,    'ODISHA'                       ,    'ODISHA'                     ,      21)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (28,    'PUDUCHERRY'                   ,    'PUDUCHERRY'                 ,     34)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (29,    'PUNJAB'                       ,    'PUNJAB'                     ,      '03')"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (30,    'RAJASTHAN'                    ,    'RAJASTHAN'                  ,      '08')"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (31,    'SIKKIM'                       ,    'SIKKIM'                     ,      11)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (32,    'TAMIL NADU'                   ,    'TAMILNADU'                  ,      33)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (33,    'TELANGANA'                    ,    'TELANGANA'                  ,      36)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (34,    'TRIPURA'                      ,    'TRIPURA'                    ,      16)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (35,    'UTTAR PRADESH'                ,    'UTTARPRADESH'               ,      '09')"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (36,    'UTTARAKHAND'                  ,    'UTTARAKHAND'                ,     '05')"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (37,    'WEST BENGAL'                  ,    'WESTBENGAL'                 ,      19)"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (38,    'OTHER TERRITORY'              ,    'OTHERTERRITORY'            ,      97 )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (39,    'LADAKH'                       ,    'LADAKH'                     ,      38 )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into State_Head(State_IdNo, State_Name, Sur_Name, State_Code ) Values (40,    'FOREIGN TERRITORY'            ,    'FOREIGNTERRITORY'            ,      96 )"
        cmd.ExecuteNonQuery()

    End Sub

    Public Shared Function State_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vSte_IdNo As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vste_Name As String

        Da = New SqlClient.SqlDataAdapter("select State_Name from State_Head where State_IdNo = " & Str(Val(vSte_IdNo)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vste_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vste_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        State_IdNoToName = Trim(vste_Name)

    End Function

    Public Shared Function State_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vSte_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vSte_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select State_IdNo from State_Head where State_Name = '" & Trim(vSte_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vSte_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vSte_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        State_NameToIdNo = Val(vSte_ID)

    End Function

    Public Shared Function Salesman_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vSte_IdNo As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vste_Name As String

        Da = New SqlClient.SqlDataAdapter("select Salesman_Name from Salesman_Head where Salesman_Idno = " & Str(Val(vSte_IdNo)), Cn1)
        Da.Fill(Dt)

        vste_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vste_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Salesman_IdNoToName = Trim(vste_Name)

    End Function

    Public Shared Function Is_InterState_Party(ByVal Cn1 As SqlClient.SqlConnection, ByVal CompIdNo As Integer, ByVal LedIdNo As Integer) As Boolean
        Dim CompStateIdNo As Integer = 0
        Dim LedStateIdNo As Integer = 0
        Dim sts As Boolean = False

        CompStateIdNo = Val(Common_Procedures.get_FieldValue(Cn1, "Company_Head", "Company_State_IdNo", "(Company_IdNo = " & Str(Val(CompIdNo)) & ")"))
        LedStateIdNo = Val(Common_Procedures.get_FieldValue(Cn1, "Ledger_Head", "Ledger_State_IdNo", "(Ledger_IdNo = " & Str(Val(LedIdNo)) & ")"))

        If Val(CompStateIdNo) = 0 Or Val(LedStateIdNo) = 0 Then
            sts = False
        ElseIf Val(CompStateIdNo) <> Val(LedStateIdNo) Then
            sts = True
        Else
            sts = False
        End If

        Is_InterState_Party = sts

    End Function

    Public Shared Sub FillRegionRectangle(ByVal e As System.Drawing.Printing.PrintPageEventArgs, ByVal X1axis As Decimal, ByVal Y1axis As Decimal, ByVal X2axis As Decimal, ByVal Y2axis As Decimal, Optional ByVal BrushColour As Brush = Nothing)
        Dim Hght As Double = 0
        Dim Wdth As Double = 0
        Dim vBrushClr As Brush

        ' Create solid brush.
        If IsNothing(BrushColour) = False Then
            vBrushClr = BrushColour
        Else
            Dim blueBrush As New SolidBrush(Color.FromArgb(235, 235, 235))
            vBrushClr = blueBrush
        End If



        Wdth = X2axis - X1axis
        Hght = Y2axis - Y1axis

        ' Create rectangle for region.
        Dim fillRect As New Rectangle(X1axis, Y1axis, Wdth, Hght)

        ' Create region for fill.
        Dim fillRegion As New [Region](fillRect)

        ' Fill region to screen.
        e.Graphics.FillRegion(vBrushClr, fillRegion)

    End Sub

    Public Shared Function is_OfficeSystem() As Boolean
        Dim STS As Boolean = False

        Try

            Common_Procedures.DriveVolumeSerialName = ""
            Try
                Common_Procedures.DriveVolumeSerialName = Common_Procedures.GetDriveSerialNumber("D:")
            Catch ex As Exception
                '---
            End Try

            '---                                                      T-Server                                                        BOOPATHI-LENOVO-LAP                                                 GOPAL-LENOVO-LAP                                                thanges-HP-LAP(laptop-64BIT)                                             thanges-HP-LAP(laptop-32BIT)                                           NAVEEN-HPLAP2-PC                                                        Thanges-Le(256gb)                                              Thanges-Le(512gb)                                                              ACER                                                             Lenovo_vinoth                                       JAI-INDUSTRIES-KUMAR-PC                                 SYSTEM1-PANDI                                                       SYSTEM2-THANGES                                                  SYSTEM3-TSERVER                                               LENOVALAP2-DEVA 
            If Trim(UCase(Common_Procedures.DriveVolumeSerialName)) = "B822FFB4" Or Trim(UCase(Common_Procedures.DriveVolumeSerialName)) = "E2765DF9" Or Trim(UCase(Common_Procedures.DriveVolumeSerialName)) = "424638AA" Or Trim(UCase(Common_Procedures.DriveVolumeSerialName)) = "683AD140" Or Trim(UCase(Common_Procedures.DriveVolumeSerialName)) = "D07B8F77" Or Trim(UCase(Common_Procedures.DriveVolumeSerialName)) = "FACD73A4" Or Trim(UCase(Common_Procedures.DriveVolumeSerialName)) = "D662D1E9" Or Trim(UCase(Common_Procedures.DriveVolumeSerialName)) = "AC869928" Or Trim(UCase(Common_Procedures.DriveVolumeSerialName)) = "5AA15081" Or Trim(UCase(Common_Procedures.DriveVolumeSerialName)) = "BEDE2419" Or Trim(UCase(Common_Procedures.DriveVolumeSerialName)) = "568A957E" Or Trim(UCase(Common_Procedures.DriveVolumeSerialName)) = "4213D8BB" Or Trim(UCase(Common_Procedures.DriveVolumeSerialName)) = "68F0D532" Or Trim(UCase(Common_Procedures.DriveVolumeSerialName)) = "DE992652" Or Trim(UCase(Common_Procedures.DriveVolumeSerialName)) = "68FA1FD6" Then
                STS = True
            End If

            Return STS

        Catch ex As Exception
            Return ""

        End Try
    End Function

    Public Shared Function get_FP_MaxCode(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCompany_ID As Integer, ByVal vFinYr As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim MxId1 As String = ""
        Dim MxId2 As String = ""
        Dim MxCode As String = ""

        Try

            MxId1 = Common_Procedures.get_MaxCode(Cn1, "FinishedProduct_Invoice_Head", "FinishedProduct_Invoice_Code", "For_OrderBy", "(Entry_VAT_GST_Type = 'GST')", vCompany_ID, vFinYr, sqltr)

            MxId2 = Common_Procedures.get_MaxCode(Cn1, "FinishedProduct_CashSales_Head", "FinishedProduct_CashSales_Code", "For_OrderBy", "(FinishedProduct_CashSales_Code LIKE 'GFPCN-%')", vCompany_ID, vFinYr, sqltr)

            MxCode = IIf(Val(MxId1) > Val(MxId2), MxId1, MxId2)

            Return Trim(MxCode)

        Catch ex As Exception
            Return ""

        End Try

    End Function

    Public Shared Function ClothSet_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vClthSet_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vClthSet_Nm As String

        Da = New SqlClient.SqlDataAdapter("select ClothSet_Name from ClothSet_Head where ClothSet_IdNo = " & Str(Val(vClthSet_ID)), Cn1)
        Da.Fill(Dt)

        vClthSet_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vClthSet_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        ClothSet_IdNoToName = Trim(vClthSet_Nm)

    End Function

    Public Shared Function ClothSet_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vClthSet_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vClthSet_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select ClothSet_IdNo from ClothSet_Head where ClothSet_Name = '" & Trim(vClthSet_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vClthSet_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vClthSet_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        ClothSet_NameToIdNo = Val(vClthSet_ID)

    End Function
    Public Shared Function RequirementStatus_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vRequirSts_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vRequirSts_Nm As String

        Da = New SqlClient.SqlDataAdapter("select RequirementStatus_Name from RequirementStatus_Head where RequirementStatus_IdNo = " & Str(Val(vRequirSts_ID)), Cn1)
        Da.Fill(Dt)

        vRequirSts_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vRequirSts_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        RequirementStatus_IdNoToName = Trim(vRequirSts_Nm)

    End Function

    Public Shared Function RequirementStatus_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vRequirSts_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vRequirSts_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select RequirementStatus_IdNo from RequirementStatus_Head where RequirementStatus_Name = '" & Trim(vRequirSts_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vRequirSts_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vRequirSts_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        RequirementStatus_NameToIdNo = Val(vRequirSts_ID)

    End Function

    Public Shared Function MarketStatus_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vMarketSts_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vMarketSts_Nm As String

        Da = New SqlClient.SqlDataAdapter("select MarketStatus_Name from MarketStatus_Head where MarketStatus_IdNo = " & Str(Val(vMarketSts_ID)), Cn1)
        Da.Fill(Dt)

        vMarketSts_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vMarketSts_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        MarketStatus_IdNoToName = Trim(vMarketSts_Nm)

    End Function

    Public Shared Function MarketStatus_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vMarketSts_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vMarketSts_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select MarketStatus_IdNo from MarketStatus_Head where MarketStatus_Name = '" & Trim(vMarketSts_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vMarketSts_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vMarketSts_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        MarketStatus_NameToIdNo = Val(vMarketSts_ID)

    End Function
    Public Shared Function PriorityStatus_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vPrioritySts_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vPrioritySts_Nm As String

        Da = New SqlClient.SqlDataAdapter("select PriorityStatus_Name from PriorityStatus_Head where PriorityStatus_IdNo = " & Str(Val(vPrioritySts_ID)), Cn1)
        Da.Fill(Dt)

        vPrioritySts_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vPrioritySts_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        PriorityStatus_IdNoToName = Trim(vPrioritySts_Nm)

    End Function

    Public Shared Function PriorityStatus_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vPrioritySts_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vPrioritySts_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select PriorityStatus_IdNo from PriorityStatus_Head where PriorityStatus_Name = '" & Trim(vPrioritySts_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vPrioritySts_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vPrioritySts_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        PriorityStatus_NameToIdNo = Val(vPrioritySts_ID)

    End Function

    Public Shared Sub Default_MarketStatus_Updation(ByVal Cn1 As SqlClient.SqlConnection)
        Dim cmd As New SqlClient.SqlCommand

        cmd.Connection = Cn1

        cmd.CommandText = "delete from MarketStatus_Head Where MarketStatus_IdNo <= 100 "
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into MarketStatus_Head(MarketStatus_IdNo, MarketStatus_Name, Sur_Name) Values (0, '', '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into MarketStatus_Head(MarketStatus_IdNo, MarketStatus_Name, Sur_Name) Values (1, 'PEAK', 'PEAK')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into MarketStatus_Head(MarketStatus_IdNo, MarketStatus_Name, Sur_Name) Values (2, 'MEDIUM', 'MEDIUM')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into MarketStatus_Head(MarketStatus_IdNo, MarketStatus_Name, Sur_Name) Values (3, 'POOR', 'POOR')"
        cmd.ExecuteNonQuery()

    End Sub

    Public Shared Sub Default_RequirementStatus_Updation(ByVal Cn1 As SqlClient.SqlConnection)
        Dim cmd As New SqlClient.SqlCommand

        cmd.Connection = Cn1

        cmd.CommandText = "delete from RequirementStatus_Head"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into RequirementStatus_Head(RequirementStatus_IdNo, RequirementStatus_Name) Values (0, '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into RequirementStatus_Head(RequirementStatus_IdNo, RequirementStatus_Name) Values (1, 'ONE TIME')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into RequirementStatus_Head(RequirementStatus_IdNo, RequirementStatus_Name) Values (2, 'CONTINOUS')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into RequirementStatus_Head(RequirementStatus_IdNo, RequirementStatus_Name) Values (3, 'JUST ENQUIRY')"
        cmd.ExecuteNonQuery()

    End Sub
    Public Shared Sub Default_PriorityStatus_Updation(ByVal Cn1 As SqlClient.SqlConnection)
        Dim cmd As New SqlClient.SqlCommand

        cmd.Connection = Cn1

        cmd.CommandText = "delete from PriorityStatus_Head"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into PriorityStatus_Head(PriorityStatus_IdNo, PriorityStatus_Name) Values (0, '')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into PriorityStatus_Head(PriorityStatus_IdNo, PriorityStatus_Name) Values (1, 'HIGH')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into PriorityStatus_Head(PriorityStatus_IdNo, PriorityStatus_Name) Values (2, 'LOW')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into PriorityStatus_Head(PriorityStatus_IdNo, PriorityStatus_Name) Values (3, 'INFO')"
        cmd.ExecuteNonQuery()

    End Sub

    Public Shared Sub AutoBackup(ByVal vPendrive_Compulsary_Status As Boolean)
        Dim cn1 As SqlClient.SqlConnection
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Mins As Long = 0
        Dim DtTm1 As Date
        Dim vDys As Long = 0
        Dim vIS_PenDrv_Exists_StS As Boolean = False
        Dim BckUP_STS As Boolean = False

        If Common_Procedures.is_OfficeSystem = True Then
            Exit Sub
        End If

        If (Trim(UCase(Common_Procedures.ServerWindowsLogin)) = "IP" Or Trim(UCase(Common_Procedures.ServerWindowsLogin)) = "SIP" Or Trim(UCase(Common_Procedures.ServerWindowsLogin)) = "DIP") Then
            Exit Sub
        End If

        DtTm1 = #1/1/2000#
        If IsDate(Common_Procedures.settings.AutoBackUp_Date) = True Then
            DtTm1 = Common_Procedures.settings.AutoBackUp_Date
        End If

        'DtTm1 = #1/1/2000#

        'cn1 = New SqlClient.SqlConnection(Common_Procedures.ConnectionString_Master)
        'cn1.Open()

        'Da = New SqlClient.SqlDataAdapter("SELECT max(bus.backup_finish_date) FROM sys.sysdatabases sdb LEFT OUTER JOIN msdb.dbo.backupset bus ON bus.database_name = sdb.name where sdb.Name = '" & Trim(Common_Procedures.DataBaseName) & "'", cn1)
        'Dt1 = New DataTable
        'Da.Fill(Dt1)
        'If Dt1.Rows.Count > 0 Then
        '    If IsDBNull(Dt1.Rows(0)(0)) = False Then
        '        DtTm1 = Dt1.Rows(0)(0)
        '    End If
        'End If
        'Dt1.Clear()

        'Dt1.Dispose()
        'Da.Dispose()

        'cn1.Close()
        'cn1.Dispose()

        If vPendrive_Compulsary_Status = True Then

            vDys = DateDiff(DateInterval.Day, DtTm1, Now)

            If vDys >= 1 Then

                Try

                    Dim allDrives() As DriveInfo = DriveInfo.GetDrives()
                    Dim d As DriveInfo

                    For Each d In allDrives

                        If d.IsReady = True Then

                            If d.DriveType = DriveType.Removable Then

                                vIS_PenDrv_Exists_StS = True

                            End If

                        End If

                    Next

                    If vIS_PenDrv_Exists_StS = False Then
                        Dim mymsgbox As New Tsoft_MessageBox("Insert a Pendrive in Server to prepare Backup......" & Chr(13) & "Software will Close now", "OK,CANCEL", "PENDRIVE BACKUP FAILED...", "Autobackup prepared in harddisk, but it is adviced to take autobackup in pendrive also" & Chr(13) & "Software opens only after taking backup in pendrive", MesssageBoxIcons.Exclamations, 1)
                        mymsgbox.ShowDialog()
                        'MessageBox.Show("Insert Pendrive to take Backup......, " & Chr(13) & "Software will Close now", "DOES NOT PREPARE BACKUP...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                        Application.Exit()
                        End
                        Exit Sub
                    End If

                Catch ex As Exception
                    '---

                End Try

            End If

        End If

        BckUP_STS = False
        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1040" Then

            vDys = DateDiff(DateInterval.Day, DtTm1, Now)
            If vDys > 1 Then
                BckUP_STS = True
            End If

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1155" Then '----KRG TEXTILE MILLS (PALLADAM)

            If is_ServerSystem() = True Or Trim(UCase(SystemInformation.ComputerName)) = "SYSTEM1" Or Trim(UCase(SystemInformation.ComputerName)) = "SYSTEM5" Or Trim(UCase(SystemInformation.ComputerName)) = "SYSTEM8" Then
                Mins = DateDiff(DateInterval.Minute, DtTm1, Now)
                If Mins > 60 Then
                    BckUP_STS = True
                End If
            End If

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1267" Then '---- BRT TEXTILES(SOMANUR)
            If is_ServerSystem() = True Then
                Mins = DateDiff(DateInterval.Minute, DtTm1, Now)
                If Mins > 60 Then
                    BckUP_STS = True
                End If
            End If

        Else

            Mins = DateDiff(DateInterval.Minute, DtTm1, Now)
            If Mins > 120 Then
                BckUP_STS = True
            End If

        End If

        If BckUP_STS = True Then

            frm_PreparingBackup.ShowDialog()

            'Common_Procedures.Sql_AutoBackUP(Common_Procedures.DataBaseName)

            'Common_Procedures.Sql_AutoBackUP(Common_Procedures.CompanyDetailsDataBaseName)

            'Dim cn1 As New SqlClient.SqlConnection(Common_Procedures.Connection_String)
            'Dim cmd As New SqlClient.SqlCommand

            'cn1.Open()

            'cmd.Connection = cn1

            'cmd.Parameters.Clear()
            'cmd.Parameters.AddWithValue("@BackupDate", Now)

            'cmd.CommandText = "update settings_head set AutoBackUp_Date = @BackupDate"
            'cmd.ExecuteNonQuery()

            'cmd.Dispose()

            'cn1.Close()
            'cn1.Dispose()

        End If

    End Sub

    Public Shared Sub AccountsVoucher_Posting_For_ProfitAndLoss()
        Dim Cn1 As New SqlClient.SqlConnection(Common_Procedures.Connection_String)
        Dim cmd As New SqlClient.SqlCommand
        Dim Da As New SqlClient.SqlDataAdapter
        Dim DT1 As New DataTable
        Dim DT2 As New DataTable
        Dim vAmt As String = ""
        Dim FnYr As String = ""
        Dim FromDaTe As Date
        Dim ToDaTe As Date
        Dim NewCode As String = ""
        Dim vCompID As Integer = 0
        Dim Nr As Long = 0

        Cn1.Open()

        cmd.Connection = Cn1

        FromDaTe = DateAdd("yyyy", -1, Common_Procedures.Company_FromDate)
        ToDaTe = DateAdd("yyyy", -1, Common_Procedures.Company_ToDate)
        FnYr = Trim(Right((Year(Common_Procedures.Company_FromDate) - 1), 2)) & "-" & Trim(Right(Year(Common_Procedures.Company_FromDate), 2))

        cmd.CommandText = "delete from voucher_details where entry_identification LIKE 'PR&LS-%" & Trim(FnYr) & "'"
        cmd.ExecuteNonQuery()

        cmd.Parameters.Clear()
        cmd.Parameters.AddWithValue("@FromDate", FromDaTe)
        cmd.Parameters.AddWithValue("@ToDate", ToDaTe)

        Da = New SqlClient.SqlDataAdapter("Select * from Company_Head Where Company_IdNo <> 0 Order by Company_IdNo", Cn1)
        DT1 = New DataTable
        Da.Fill(DT1)
        If DT1.Rows.Count > 0 Then
            For I = 0 To DT1.Rows.Count - 1
                vAmt = 0

                vCompID = Val(DT1.Rows(I).Item("Company_Idno").ToString)

                Da = New SqlClient.SqlDataAdapter("Select sum(b.voucher_amount) from ledger_head a, voucher_details b where b.company_idno = " & Str(Val(vCompID)) & " and b.voucher_date between '" & Trim(Format(DateAdd("d", 1, DateAdd("yyyy", -1, ToDaTe)), "MM/dd/yyyy")) & "' and '" & Trim(Format(ToDaTe, "MM/dd/yyyy")) & "' and ( a.parent_code like '%~18~' ) and b.year_for_report < " & Str(Year(ToDaTe)) & " and a.ledger_idno = b.ledger_idno", Cn1)
                DT2 = New DataTable
                Da.Fill(DT2)
                If DT2.Rows.Count > 0 Then
                    If IsDBNull(DT2.Rows(0)(0).ToString) = False Then
                        vAmt = Val(DT2.Rows(0)(0).ToString)
                    End If
                End If
                DT2.Clear()

                If Val(vAmt) <> 0 Then

                    cmd.CommandText = "truncate table " & Trim(Common_Procedures.ReportTempSubTable) & ""
                    cmd.ExecuteNonQuery()
                    cmd.CommandText = "insert into " & Trim(Common_Procedures.ReportTempSubTable) & " ( date1, currency1 ) Select tZ.Closing_Stock_Value_Date, sum(tz.Closing_Stock_Value) from Closing_Stock_Value_Head tz where tZ.company_idno = " & Str(Val(vCompID)) & " and tz.Closing_Stock_Value_Date <= @FromDaTe group by tZ.Closing_Stock_Value_Date "
                    Nr = cmd.ExecuteNonQuery()

                    '----OPENING STOCK
                    cmd.CommandText = "Select top 1 Currency1 as OpStockValue from " & Trim(Common_Procedures.ReportTempSubTable) & " where date1 <= @FromDaTe Order by date1 desc"
                    Da = New SqlClient.SqlDataAdapter(cmd)
                    DT2 = New DataTable
                    Da.Fill(DT2)
                    If DT2.Rows.Count > 0 Then
                        If IsDBNull(DT2.Rows(0)(0).ToString) = False Then
                            vAmt = Val(vAmt) - Val(DT2.Rows(0)(0).ToString)
                        End If
                    End If
                    DT2.Clear()


                    cmd.CommandText = "truncate table " & Trim(Common_Procedures.ReportTempSubTable) & ""
                    cmd.ExecuteNonQuery()
                    cmd.CommandText = "insert into " & Trim(Common_Procedures.ReportTempSubTable) & " ( date1, currency1 ) Select tZ.Closing_Stock_Value_Date, sum(tz.Closing_Stock_Value) from Closing_Stock_Value_Head tz where tZ.company_idno = " & Str(Val(vCompID)) & " and tz.Closing_Stock_Value_Date <= @todate group by tZ.Closing_Stock_Value_Date "
                    Nr = cmd.ExecuteNonQuery()

                    '----CLOSING STOCK
                    cmd.CommandText = "Select top 1 Currency1 as OpStockValue from " & Trim(Common_Procedures.ReportTempSubTable) & " where date1 <= @todate Order by date1 desc"
                    Da = New SqlClient.SqlDataAdapter(cmd)
                    DT2 = New DataTable
                    Da.Fill(DT2)
                    If DT2.Rows.Count > 0 Then
                        If IsDBNull(DT2.Rows(0)(0).ToString) = False Then
                            vAmt = Val(vAmt) + Val(DT2.Rows(0)(0).ToString)
                        End If
                    End If
                    DT2.Clear()

                    NewCode = "PR&LS-" & Trim(Val(vCompID)) & "-2000/" & Trim(FnYr)

                    cmd.CommandText = "delete from voucher_details where entry_identification = '" & Trim(NewCode) & "'"
                    cmd.ExecuteNonQuery()

                    cmd.CommandText = "Insert into Voucher_Details (     Voucher_Code      , For_OrderByCode ,          Company_IdNo    , Voucher_No, For_OrderBy , Voucher_Type, Voucher_Date, SL_No , Ledger_IdNo ,        Voucher_Amount , Narration,         Year_For_Report     ,   Entry_Identification  ) " &
                                        "          Values          ('" & Trim(NewCode) & "',     -2000       , " & Str(Val(vCompID)) & ",  '-2000'  ,    -2000    ,   'P&L.Jrnl'   , @ToDate     ,   13  ,     13      , " & Str(Val(vAmt)) & ",    ''    , " & Str(Val(Year(ToDaTe))) & ", '" & Trim(NewCode) & "' ) "
                    cmd.ExecuteNonQuery()


                End If


            Next I

        End If
        DT1.Clear()

        DT1.Dispose()
        DT2.Dispose()
        Da.Dispose()

        Cn1.Close()
        Cn1.Dispose()

    End Sub

    Public Shared Function get_CloYarn_MaxCode(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCompany_ID As Integer, ByVal vFinYr As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim MxId1 As String = ""
        Dim MxId2 As String = ""
        Dim MxId3 As String = ""
        Dim MxId4 As String = ""
        Dim MxId5 As String = ""
        Dim MxCode As String = ""

        Try

            MxId1 = Common_Procedures.get_MaxCode(Cn1, "ClothSales_Invoice_Head", "ClothSales_Invoice_Code", "For_OrderBy", "(ClothSales_Invoice_Code LIKE 'GCINV-%')", vCompany_ID, vFinYr, sqltr)
            MxId2 = Common_Procedures.get_MaxCode(Cn1, "Yarn_Sales_Head", "Yarn_Sales_Code", "For_OrderBy", "(Entry_VAT_GST_Type = 'GST')", vCompany_ID, vFinYr, sqltr)
            MxId3 = Common_Procedures.get_MaxCode(Cn1, "Other_GST_Entry_Head", "Other_GST_Entry_Reference_Code", "For_OrderBy", "(Other_GST_Entry_Type='SALE')", vCompany_ID, vFinYr, sqltr)
            MxId4 = Common_Procedures.get_MaxCode(Cn1, "JobWork_ConversionBill_Head", "JobWork_ConversionBill_Code", "For_OrderBy", "", vCompany_ID, vFinYr, sqltr)
            MxId5 = Common_Procedures.get_MaxCode(Cn1, "Cotton_Sales_Head", "Cotton_Sales_Code", "for_OrderBy", "(Cotton_Sales_Code LIKE 'GCOSE-%')", vCompany_ID, vFinYr, sqltr)

            Dim arr As Integer() = {MxId1, MxId2, MxId3, MxId4, MxId5}
            Dim large As Integer = 0

            For i As Integer = 0 To 4 Step 1
                If (large < arr(i)) Then '10< 10
                    large = arr(i) '10
                End If
            Next
            MxCode = large
            Return Trim(MxCode)

        Catch ex As Exception
            Return ""

        End Try

    End Function

    ''yarn_proforma_sales to cloth proforma sales


    Public Shared Function get_Yarn_Cloth_Proforma_MaxCode(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCompany_ID As Integer, ByVal vFinYr As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim MxId1 As String = ""
        Dim MxId2 As String = ""
        Dim MxCode As String = ""

        Try

            MxId1 = Common_Procedures.get_MaxCode(Cn1, "ClothSales_ProformaInvoice_Head", "ClothSales_ProformaInvoice_Code", "For_OrderBy", "(ClothSales_ProformaInvoice_Code LIKE 'GCPIN-%')", vCompany_ID, vFinYr, sqltr)
            'lbl_InvNo.Text = Common_Procedures.get_MaxCode(cn1, "ClothSales_Invoice_Head", "ClothSales_Invoice_Code", "For_OrderBy", "(ClothSales_Invoice_Code LIKE '" & Trim(Pk_Condition) & "%')", Val(lbl_Company.Tag), Common_Procedures.FnYearCode)

            MxId2 = Common_Procedures.get_MaxCode(Cn1, "Yarn_Sales_Prroforma_Head", "Yarn_Sales_Code", "For_OrderBy", "(Yarn_Sales_Code LIKE 'GYPSL-%')", vCompany_ID, vFinYr, sqltr)
            'lbl_InvoiceNo.Text = Common_Procedures.get_MaxCode(cn1, "Yarn_Sales_Head", "Yarn_Sales_Code", "For_OrderBy", "(Entry_VAT_GST_Type = 'GST')", Val(lbl_Company.Tag), Common_Procedures.FnYearCode, tr)

            MxCode = IIf(Val(MxId1) > Val(MxId2), MxId1, MxId2)

            Return Trim(MxCode)

        Catch ex As Exception
            Return ""

        End Try

    End Function

    ''Tex_Yarnsales_To_OE_YarnSales

    Public Shared Function get_YarnTex_OEYarn_MaxCode(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCompany_ID As Integer, ByVal vFinYr As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim MxId1 As String = ""
        Dim MxId2 As String = ""
        Dim MxId3 As String = ""
        Dim MxCode As String = ""

        Try

            MxId1 = Common_Procedures.get_MaxCode(Cn1, "Yarn_Sales_Head", "Yarn_Sales_Code", "For_OrderBy", "(Yarn_Sales_Code LIKE 'GYNSL-%')", vCompany_ID, vFinYr, sqltr)
            'lbl_InvNo.Text = Common_Procedures.get_MaxCode(cn1, "ClothSales_Invoice_Head", "ClothSales_Invoice_Code", "For_OrderBy", "(ClothSales_Invoice_Code LIKE '" & Trim(Pk_Condition) & "%')", Val(lbl_Company.Tag), Common_Procedures.FnYearCode)

            MxId2 = Common_Procedures.get_MaxCode(Cn1, "Cotton_Invoice_Head", "Cotton_Invoice_Code", "For_OrderBy", "(Cotton_Invoice_Code LIKE 'GCNIN-%')", vCompany_ID, vFinYr, sqltr)


            MxId3 = Common_Procedures.get_MaxCode(Cn1, "Yarn_Sales_Head", "Yarn_Sales_Code", "For_OrderBy", "(Yarn_Sales_Code LIKE 'GCNIN-%')", vCompany_ID, vFinYr, sqltr)


            If Val((MxId1) > Val(MxId2)) And Val((MxId1) > Val(MxId3)) Then
                MxCode = MxId1
            ElseIf Val((MxId2) > Val(MxId3)) And Val((MxId2) > Val(MxId1)) Then
                MxCode = MxId2
            Else
                MxCode = MxId3
            End If

            Return Trim(MxCode)

        Catch ex As Exception
            Return ""

        End Try

    End Function

    '----

    Public Shared Sub Sql_AutoBackUP_Delete_Old_Files(ByVal vBkUpPath As String, ByVal vBkUpDBName As String)
        Dim vOldDays As Integer = 50
        Dim Fl_Name As String = ""

        Try

            Fl_Name = Trim(vBkUpDBName) & "_BackUp_"

            If Directory.Exists(vBkUpPath) Then

                Dim theFiles() As String = System.IO.Directory.GetFiles(vBkUpPath)

                For Each vCurrentFile As String In theFiles

                    Dim vFileInfo As New System.IO.FileInfo(vCurrentFile)

                    If InStr(1, Trim(UCase(vFileInfo.Name)), Trim(UCase(Fl_Name))) > 0 Then

                        Dim dateDiff As TimeSpan = DateTime.Now.Subtract(vFileInfo.CreationTime.Date)

                        If dateDiff.Days >= vOldDays Then

                            System.IO.File.Delete(vCurrentFile)

                        End If

                    End If

                Next

            End If


        Catch ex As Exception
            '-----

        End Try

    End Sub

    Public Shared Sub Get_Company_SettingsValue(ByVal Cn1 As SqlClient.SqlConnection)
        Dim da1 As New SqlClient.SqlDataAdapter
        Dim dt1 As New DataTable

        Try

            Call FieldCheck_Company_Db(Cn1)

            Common_Procedures.settings.CompanyName = ""
            Common_Procedures.settings.AutoBackUp_Date = #1/1/1900#

            da1 = New SqlClient.SqlDataAdapter("select * from Settings_Head", Cn1)
            dt1 = New DataTable
            da1.Fill(dt1)

            If dt1.Rows.Count > 0 Then
                If IsDBNull(dt1.Rows(0).Item("C_Name").ToString) = False Then
                    Common_Procedures.settings.CompanyName = dt1.Rows(0).Item("C_Name").ToString()
                End If

                If IsDBNull(dt1.Rows(0).Item("S_Name").ToString) = False Then
                    If Trim(dt1.Rows(0).Item("S_Name").ToString) <> "" Then
                        Common_Procedures.settings.SoftWareName = dt1.Rows(0).Item("S_Name").ToString()
                    End If
                End If

                If IsDBNull(dt1.Rows(0).Item("AutoBackUp_Date").ToString) = False Then
                    If IsDate(dt1.Rows(0).Item("AutoBackUp_Date").ToString) = True Then
                        Common_Procedures.settings.AutoBackUp_Date = dt1.Rows(0).Item("AutoBackUp_Date")
                    End If
                End If

            End If

            dt1.Dispose()
            da1.Dispose()

        Catch ex As Exception
            MessageBox.Show(ex.Message, "ERROR IN GETTING SETTINGS VALUES...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

        Try

            Common_Procedures.settings.Email_Address = ""
            Common_Procedures.settings.Email_Password = ""
            Common_Procedures.settings.Email_Host = ""
            Common_Procedures.settings.Email_Port = 0
            da1 = New SqlClient.SqlDataAdapter("select * from Mail_Settings_Head", Cn1)
            dt1 = New DataTable
            da1.Fill(dt1)
            If dt1.Rows.Count > 0 Then
                If IsDBNull(dt1.Rows(0).Item("EMail_Id").ToString) = False Then
                    Common_Procedures.settings.Email_Address = dt1.Rows(0).Item("EMail_Id").ToString
                End If
                If IsDBNull(dt1.Rows(0).Item("EMail_pwd").ToString) = False Then
                    Common_Procedures.settings.Email_Password = dt1.Rows(0).Item("EMail_pwd").ToString
                End If
                If IsDBNull(dt1.Rows(0).Item("EMail_Host").ToString) = False Then
                    Common_Procedures.settings.Email_Host = dt1.Rows(0).Item("EMail_Host").ToString
                End If
                If IsDBNull(dt1.Rows(0).Item("EMail_Port").ToString) = False Then
                    Common_Procedures.settings.Email_Port = Val(dt1.Rows(0).Item("EMail_Port").ToString)
                End If
            End If
            dt1.Dispose()
            da1.Dispose()


        Catch ex As Exception
            '------
            MsgBox(ex.Message)
        End Try

    End Sub

    Public Shared Sub FieldCheck_Company_Db(ByVal cn1 As SqlClient.SqlConnection)
        Dim cmd As New SqlClient.SqlCommand
        Dim da1 As New SqlClient.SqlDataAdapter
        Dim dt1 As New DataTable

        On Error Resume Next

        cmd.Connection = cn1

        cmd.CommandText = "CREATE TABLE [Year_Head] ( [Year_IdNo] [int] NOT NULL, [Year_Code] [nvarchar](50) NOT NULL, [Year_Range] [nvarchar](50) NOT NULL, CONSTRAINT [PK_Year_Head] PRIMARY KEY CLUSTERED ( [Year_Code] )ON [PRIMARY], CONSTRAINT [IX_Year_Head_1] UNIQUE NONCLUSTERED ( [Year_IdNo] ) ON [PRIMARY], CONSTRAINT [IX_Year_Head_2] UNIQUE NONCLUSTERED  ( [Year_Range]  ) ON [PRIMARY] ) ON [PRIMARY]"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "CREATE TABLE [Mail_Settings_Head] ( [Setting_Idno] [int]  IDENTITY (1, 1) NOT NULL, [EMail_Id] [varchar](50) NULL, [EMail_pwd] [varchar](50) NULL, [EMail_Host] [varchar](50) NULL, [EMail_Port] Int NULL, CONSTRAINT [PK_Mail_Settings_Head] PRIMARY KEY CLUSTERED ( [Setting_Idno] ) ON [PRIMARY] ) ON [PRIMARY]"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Alter table Settings_Head add ChangePeriod_CreateNewYear_Alert_Dont_Ask_Status tinyint default 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Update Settings_Head set ChangePeriod_CreateNewYear_Alert_Dont_Ask_Status = 0 Where ChangePeriod_CreateNewYear_Alert_Dont_Ask_Status is Null"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "` table Settings_Head add C_Name varchar(50) default ''"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Update Settings_Head set C_Name = '' Where C_Name is Null"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Alter table Settings_Head add S_Name varchar(50) default ''"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Update Settings_Head set S_Name = '' Where S_Name is Null"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Alter table Settings_Head add AutoBackUp_Date smalldatetime"
        cmd.ExecuteNonQuery()

        da1 = New SqlClient.SqlDataAdapter("select * from Settings_Head", cn1)
        dt1 = New DataTable
        da1.Fill(dt1)

        If dt1.Rows.Count = 0 Then
            cmd.CommandText = "truncate table Settings_Head"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Insert into Settings_Head(C_Name) values ('')"
            cmd.ExecuteNonQuery()
        End If
        dt1.Clear()

        dt1.Dispose()
        da1.Dispose()

        cmd.Dispose()

    End Sub


    Public Shared Sub get_Admin_Name_PassWord_From_DB(ByRef vUsrNm As String, ByRef vAcPwd As String, ByRef vUnAcPwd As String)
        Dim Cn1 As New SqlClient.SqlConnection
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable

        vUsrNm = ""
        vAcPwd = ""
        vUnAcPwd = ""

        Cn1 = New SqlClient.SqlConnection(Common_Procedures.ConnectionString_CompanyGroupdetails)
        Cn1.Open()

        Da = New SqlClient.SqlDataAdapter("select * from user_head where user_idno = 1", Cn1)
        Dt1 = New DataTable
        Da.Fill(Dt1)
        If Dt1.Rows.Count > 0 Then
            If IsDBNull(Dt1.Rows(0).Item("User_Name").ToString) = False Then
                vUsrNm = Dt1.Rows(0).Item("User_Name").ToString
            End If
            If IsDBNull(Dt1.Rows(0).Item("Account_Password").ToString) = False Then
                vAcPwd = Dt1.Rows(0).Item("Account_Password").ToString
            End If
            If IsDBNull(Dt1.Rows(0).Item("UnAccount_Password").ToString) = False Then
                vUnAcPwd = Dt1.Rows(0).Item("UnAccount_Password").ToString
            End If
        End If

        Dt1.Dispose()
        Da.Dispose()

        Cn1.Close()
        Cn1.Dispose()

    End Sub

    Public Shared Function ChangePeriod_Create_NewYear(ByVal vVBForm As Form, ByVal vFromYear As Integer) As Boolean
        Dim Cn1 As New SqlClient.SqlConnection
        Dim cmd As New SqlClient.SqlCommand
        Dim da1 As SqlClient.SqlDataAdapter
        Dim dt1 As DataTable
        Dim st_year As Integer = 0, en_year As Integer = 0
        Dim amt As Double = 0
        Dim dttm As DateTime
        Dim CmpGrp_Fromdate As DateTime
        Dim CmpGrp_Todate As DateTime
        Dim vUsrNm As String = "", vAcPwd As String = "", vUnAcPwd As String = ""
        Dim vToYear As Integer = 0
        Dim vNewYrCReaSTS As Boolean = False
        Dim UID As Integer = 0

        vToYear = Val(vFromYear) + 1

        ChangePeriod_Create_NewYear = False

        If Val(vFromYear) = 0 Or Len(Trim(vFromYear)) < 4 Then
            MessageBox.Show("Invalid From Year", "DOES NOT CHANGE YEAR...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            Exit Function
        End If

        If Val(vToYear) = 0 Or Len(Trim(vToYear)) < 4 Then
            MessageBox.Show("Invalid To Year", "DOES NOT CHANGE YEAR...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            Exit Function
        End If

        st_year = Val(Microsoft.VisualBasic.Left(Common_Procedures.FnRange, 4))
        en_year = Val(Microsoft.VisualBasic.Right(Common_Procedures.FnRange, 4)) - 1

        If Not (Val(vFromYear) >= st_year And Val(vFromYear) <= en_year + 1) Then
            MessageBox.Show("Invalid Financial Year", "DOES NOT CHANGE YEAR...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            Exit Function
        End If

        CmpGrp_Fromdate = New DateTime(Val(vFromYear), 4, 1)
        CmpGrp_Todate = New DateTime(Val(vToYear), 3, 31)

        Cn1 = New SqlClient.SqlConnection(Common_Procedures.Connection_String)
        Cn1.Open()

        da1 = New SqlClient.SqlDataAdapter("select * from " & Trim(Common_Procedures.CompanyDetailsDataBaseName) & "..CompanyGroup_Head where CompanyGroup_IdNo = " & Str(Val(Common_Procedures.CompGroupIdNo)), Cn1)
        dt1 = New DataTable
        da1.Fill(dt1)
        If dt1.Rows.Count > 0 Then
            If IsDBNull(dt1.Rows(0).Item("From_Date").ToString) = False Then
                If IsDate(dt1.Rows(0).Item("From_Date").ToString) = True Then
                    CmpGrp_Fromdate = dt1.Rows(0).Item("From_Date")
                End If
            End If
            If IsDBNull(dt1.Rows(0).Item("To_Date").ToString) = False Then
                If IsDate(dt1.Rows(0).Item("To_Date").ToString) = True Then
                    CmpGrp_Todate = dt1.Rows(0).Item("To_Date")
                End If
            End If
        End If
        dt1.Clear()

        vNewYrCReaSTS = False
        If Val(vFromYear) < st_year Or Val(vFromYear) > en_year Then

            If MessageBox.Show("Do you want to Create New year  (" & Trim(vFromYear) & "-" & Trim(vToYear) & ") ?" & vbCrLf & "(" & Trim(Val(Common_Procedures.CompGroupIdNo)) & ". " & Trim(Common_Procedures.CompGroupName) & "(" & Trim(Common_Procedures.CompGroupFnRange) & ") )", "For New PERIOD CREATION...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) = Windows.Forms.DialogResult.Yes Then

                'If Year(Common_Procedures.Company_ToDate) <> Val(vFromYear) Then
                '    MessageBox.Show("You can create a New year from the last year only", "DOES Not CHANGE YEAR...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                '    Exit Sub
                'End If

                Common_Procedures.get_UserName_Password(vVBForm)

                If Val(Common_Procedures.User.IdNo) = 0 Then
                    MessageBox.Show("Invalid LoginName And Password", "CREATE Next YEAR FAILED...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                    Application.Exit()
                    End
                End If

                'Common_Procedures.Password_Input = ""
                'Dim g As New Admin_Password
                'g.ShowDialog()

                'UID = 1
                'Common_Procedures.get_Admin_Name_PassWord_From_DB(vUsrNm, vAcPwd, vUnAcPwd)

                'vAcPwd = Common_Procedures.Decrypt(Trim(vAcPwd), Trim(Common_Procedures.UserCreation_AcPassWord.passPhrase) & Trim(Val(UID)) & Trim(UCase(vUsrNm)), Trim(Common_Procedures.UserCreation_AcPassWord.saltValue) & Trim(Val(UID)) & Trim(UCase(vUsrNm)))
                'vUnAcPwd = Common_Procedures.Decrypt(Trim(vUnAcPwd), Trim(Common_Procedures.UserCreation_UnAcPassWord.passPhrase) & Trim(Val(UID)) & Trim(UCase(vUsrNm)), Trim(Common_Procedures.UserCreation_UnAcPassWord.saltValue) & Trim(Val(UID)) & Trim(UCase(vUsrNm)))

                'If Trim(Common_Procedures.Password_Input) <> Trim(vAcPwd) And Trim(Common_Procedures.Password_Input) <> Trim(vUnAcPwd) Then
                '    MessageBox.Show("Invalid Admin Password", "ADMIN PASSWORD FAILED...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                '    Exit Function
                'End If

                If Val(vFromYear) < st_year Then st_year = Val(vFromYear)

                en_year = en_year + 1

                If Val(vToYear) > en_year Then en_year = Val(vToYear)

                Common_Procedures.FnRange = Trim(st_year) & "-" & Trim(en_year)
                Common_Procedures.CompGroupFnRange = Common_Procedures.FnRange

                dttm = New DateTime(Val(en_year), Microsoft.VisualBasic.DateAndTime.Month(CmpGrp_Todate), Microsoft.VisualBasic.DateAndTime.Day(CmpGrp_Todate))
                Common_Procedures.Company_ToDate = dttm

                cmd.Connection = Cn1

                cmd.Parameters.Clear()
                cmd.Parameters.AddWithValue("@CompanyToDate", Common_Procedures.Company_ToDate)

                cmd.CommandText = "Truncate table FinancialRange_Head"
                cmd.ExecuteNonQuery()
                cmd.CommandText = "insert into FinancialRange_Head ( Financial_Range ) Values ('" & Trim(Common_Procedures.FnRange) & "')"
                cmd.ExecuteNonQuery()

                cmd.CommandText = "Update " & Trim(Common_Procedures.CompanyDetailsDataBaseName) & "..CompanyGroup_Head set Financial_Range = '" & Trim(Common_Procedures.FnRange) & "', To_Date = @CompanyToDate Where CompanyGroup_IdNo = " & Str(Val(Common_Procedures.CompGroupIdNo))
                cmd.ExecuteNonQuery()

                vNewYrCReaSTS = True

            Else

                Exit Function

            End If

        End If

        Common_Procedures.FnYearCode = Trim(Microsoft.VisualBasic.Right(Val(vFromYear), 2)) & "-" & Trim(Microsoft.VisualBasic.Right(Val(vFromYear) + 1, 2))

        dttm = New DateTime(Val(vFromYear), Microsoft.VisualBasic.DateAndTime.Month(CmpGrp_Fromdate), Microsoft.VisualBasic.DateAndTime.Day(CmpGrp_Fromdate))
        Common_Procedures.Company_FromDate = dttm

        dttm = New DateTime(Val(vToYear), Microsoft.VisualBasic.DateAndTime.Month(CmpGrp_Todate), Microsoft.VisualBasic.DateAndTime.Day(CmpGrp_Todate))
        Common_Procedures.Company_ToDate = dttm

        ChangePeriod_Create_NewYear = True

        On Error Resume Next

        MDIParent1.btn_Cur_Year.Text = Trim(Microsoft.VisualBasic.Right(Common_Procedures.Company_FromDate, 4)) & "-" & Trim(Microsoft.VisualBasic.Right(Common_Procedures.Company_ToDate, 4))
        MDIParent1.Text = Common_Procedures.CompGroupIdNo & ". " & Common_Procedures.CompGroupName & " (" & Common_Procedures.CompGroupFnRange & ")         -          " & Common_Procedures.Company_FromDate & "  TO  " & Common_Procedures.Company_ToDate

        Common_Procedures.AccountsVoucher_Posting_For_ProfitAndLoss()

        If vNewYrCReaSTS = True Then
            MessageBox.Show("Year " & Val(vFromYear) & "-" & Val(vToYear) & " Created Successfully", "FOR NEXT FINANCIAL YEAR CREATION...", MessageBoxButtons.OKCancel, MessageBoxIcon.Information)
        End If

    End Function

    Public Shared Function BobinSize_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vBobinSize_ID As Integer, Optional ByVal DbName As String = "") As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vBobinSize_Nm As String

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If

        Da = New SqlClient.SqlDataAdapter("select Bobin_Size_Name from  " & Trim(DbName) & " Bobin_Size_Head where Bobin_Size_IdNo = " & Str(Val(vBobinSize_ID)), Cn1)
        Da.Fill(Dt)

        vBobinSize_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vBobinSize_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        BobinSize_IdNoToName = Trim(vBobinSize_Nm)

    End Function

    Public Shared Function BobinSize_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vBobinSize_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vBobinSize_ID As Integer

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Bobin_Size_IdNo from " & Trim(DbName) & " Bobin_Size_Head where Bobin_Size_Name = '" & Trim(vBobinSize_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vBobinSize_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vBobinSize_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        BobinSize_NameToIdNo = Val(vBobinSize_ID)

    End Function

    Public Shared Function Check_Party_CreditLimit_Amount_Days(ByVal Cn1 As SqlClient.SqlConnection, ByVal Comp_IdNo As Integer, ByVal Led_IdNo As Integer, ByRef ErrMsg As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Boolean

        Dim RetSTS As Boolean = False

        Dim cmd As New SqlClient.SqlCommand
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim vLed_CrDys_Limit As Integer = 0
        Dim vLed_CrAmt_Limit As String = ""
        Dim vLed_CurrBal_Amt As String = ""
        Dim vCurBal As String = ""
        Dim vPendBil_DueDys As Integer = 0
        Dim vBil_Typ As String = ""
        Dim CompIDCondt As String = ""
        Dim vAmt As String = ""

        ErrMsg = ""

        cmd.Connection = Cn1
        If IsNothing(sqltr) = False Then
            cmd.Transaction = sqltr
        End If

        vLed_CrDys_Limit = 0
        vLed_CrAmt_Limit = 0
        Da = New SqlClient.SqlDataAdapter("Select Credit_Limit_Days , Credit_Limit_Amount from Ledger_Head  where Ledger_IdNo = " & Str(Val(Led_IdNo)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt1 = New DataTable
        Da.Fill(Dt1)
        If Dt1.Rows.Count > 0 Then
            If IsDBNull(Dt1.Rows(0).Item("Credit_Limit_Days").ToString) = False Then
                vLed_CrDys_Limit = Val(Dt1.Rows(0).Item("Credit_Limit_Days").ToString)
            End If
            If IsDBNull(Dt1.Rows(0).Item("Credit_Limit_Amount").ToString) = False Then
                vLed_CrAmt_Limit = Format(Val(Dt1.Rows(0).Item("Credit_Limit_Amount").ToString), "##########0.00")
            End If
        End If
        Dt1.Clear()

        If vLed_CrDys_Limit <= 0 And vLed_CrAmt_Limit <= 0 Then
            Return False
            Exit Function
        End If

        CompIDCondt = "(a.company_idno = " & Str(Val(Comp_IdNo)) & ")"
        If Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1 Then

            CompIDCondt = ""
            If Trim(UCase(Common_Procedures.User.Type)) = "ACCOUNT" Then
                CompIDCondt = "(tZ.Company_Type <> 'UNACCOUNT')"
            End If
        End If

        vLed_CurrBal_Amt = 0

        If vLed_CrAmt_Limit > 0 Then

            cmd.CommandText = "Select abs(sum(a.voucher_amount)) from voucher_details a INNER JOIN Company_Head tZ ON a.company_idno <> 0 and a.company_idno = tZ.company_idno Where " & CompIDCondt & IIf(CompIDCondt <> "", " and ", "") & " a.Ledger_IdNo = " & Str(Val(Led_IdNo)) & " having sum(a.voucher_amount) <> 0"
            Da = New SqlClient.SqlDataAdapter(cmd)
            If IsNothing(sqltr) = False Then
                Da.SelectCommand.Transaction = sqltr
            End If
            Dt1 = New DataTable
            Da.Fill(Dt1)
            If Dt1.Rows.Count > 0 Then
                If IsDBNull(Dt1.Rows(0)(0).ToString) = False Then
                    vLed_CurrBal_Amt = Format(Val(Dt1.Rows(0)(0).ToString), "##########0.00")
                End If
            End If
            Dt1.Clear()

            If vLed_CurrBal_Amt <> 0 Then

                If Val(vLed_CurrBal_Amt) > Val(vLed_CrAmt_Limit) Then
                    ErrMsg = "Party Outstanding amount (""" & Common_Procedures.Currency_Format(Val(vLed_CurrBal_Amt)) & """)  is greater than Credit Limit (""" & Common_Procedures.Currency_Format(Val(vLed_CrAmt_Limit)) & """) "
                    Return True
                    Exit Function
                End If

            End If

        End If


        If vLed_CurrBal_Amt <> 0 And vLed_CrDys_Limit > 0 Then

            vBil_Typ = Common_Procedures.get_FieldValue(Cn1, "Ledger_head", "Bill_Type", "(Ledger_idno = " & Str(Val(Led_IdNo)) & ")", , sqltr)

            vPendBil_DueDys = 0

            If Trim(UCase(vBil_Typ)) = "BILL TO BILL" Then

                cmd.CommandText = "truncate table " & Trim(Common_Procedures.ReportTempSubTable) & ""
                cmd.ExecuteNonQuery()

                cmd.CommandText = "insert into " & Trim(Common_Procedures.ReportTempSubTable) & " ( Name1, Date1, currency1 ) Select a.voucher_bill_code, a.Voucher_bill_Date, a.bill_amount from voucher_bill_head a INNER JOIN company_head tz ON a.company_idno <> 0 and a.company_idno = tZ.company_idno Where " & CompIDCondt & IIf(CompIDCondt <> "", " and ", "") & " a.ledger_idno = " & Str(Val(Led_IdNo)) & " and a.bill_amount <> 0 and crdr_type = 'DR'"
                cmd.ExecuteNonQuery()

                cmd.CommandText = "insert into " & Trim(Common_Procedures.ReportTempSubTable) & " ( Name1, Date1, currency1 ) Select a.voucher_bill_code, b.Voucher_bill_Date, -1*sum(a.Amount) from voucher_bill_details a INNER JOIN voucher_bill_head b ON a.Voucher_Bill_Code = b.Voucher_Bill_Code INNER JOIN company_head tZ ON b.company_idno <> 0 and b.company_idno = tZ.company_idno Where " & CompIDCondt & IIf(CompIDCondt <> "", " and ", "") & " a.ledger_idno = " & Str(Val(Led_IdNo)) & " and b.crdr_type = 'DR' group by a.voucher_bill_code, b.Voucher_bill_Date"
                cmd.ExecuteNonQuery()

                cmd.CommandText = "Truncate table " & Trim(Common_Procedures.EntryTempSubTable) & ""
                cmd.ExecuteNonQuery()

                cmd.CommandText = "Insert into " & Trim(Common_Procedures.EntryTempSubTable) & " (Name1, date1, currency1 ) Select Name1, date1, sum(currency1) from " & Trim(Common_Procedures.ReportTempSubTable) & " group by Name1, date1 Having sum(currency1) > 0"
                cmd.ExecuteNonQuery()

                cmd.CommandText = "Select a.date1 as VouDate, a.currency1 as VouAmt from " & Trim(Common_Procedures.EntryTempSubTable) & " a where a.currency1 <> 0 Order by a.date1, a.name1"
                Da = New SqlClient.SqlDataAdapter(cmd)
                If IsNothing(sqltr) = False Then
                    Da.SelectCommand.Transaction = sqltr
                End If
                Dt2 = New DataTable
                Da.Fill(Dt2)

                If Dt2.Rows.Count > 0 Then

                    vPendBil_DueDys = DateDiff(DateInterval.Day, CDate(Dt2.Rows(0).Item("VouDate")), Date.Today)

                End If
                Dt2.Clear()


            Else

                cmd.CommandText = "Truncate table " & Trim(Common_Procedures.EntryTempSubTable) & ""
                cmd.ExecuteNonQuery()

                cmd.CommandText = "Insert into " & Trim(Common_Procedures.EntryTempSubTable) & " (date1, currency1 ) Select a.voucher_date, abs(sum(a.voucher_amount)) as VouAmt from voucher_details a INNER JOIN company_head tz ON a.company_idno = tz.company_idno Where " & CompIDCondt & IIf(Trim(CompIDCondt) <> "", " and ", "") & " a.ledger_idno = " & Str(Val(Led_IdNo)) & " and a.voucher_amount < 0 group by a.voucher_date having sum(a.voucher_amount) <> 0"
                cmd.ExecuteNonQuery()

                cmd.CommandText = "Select a.date1 as VouDate, a.currency1 as VouAmt from " & Trim(Common_Procedures.EntryTempSubTable) & " a where a.currency1 <> 0 Order by a.date1, a.name1"
                Da = New SqlClient.SqlDataAdapter(cmd)
                If IsNothing(sqltr) = False Then
                    Da.SelectCommand.Transaction = sqltr
                End If
                Dt2 = New DataTable
                Da.Fill(Dt2)

                vCurBal = Math.Abs(Val(vLed_CurrBal_Amt))
                vPendBil_DueDys = 0

                If Dt2.Rows.Count > 0 Then

                    For i = 0 To Dt2.Rows.Count - 1

                        vPendBil_DueDys = DateDiff(DateInterval.Day, CDate(Dt2.Rows(0).Item("VouDate")), Date.Today)

                        If Val(vCurBal) <= 0 Then Exit For

                        vAmt = 0
                        If vCurBal >= Val(Dt2.Rows(0).Item("VouAmt").ToString) Then
                            vAmt = Format(Val(Dt2.Rows(0).Item("VouAmt").ToString), "##########.00")
                        Else
                            vAmt = vCurBal
                        End If
                        vCurBal = vCurBal - Val(vAmt)

                    Next i

                End If
                Dt2.Clear()

            End If

            If Val(vPendBil_DueDys) <> 0 Then
                If Val(vPendBil_DueDys) > Val(vLed_CrDys_Limit) Then
                    ErrMsg = "OutStanding Bill's Due Days (""" & Val(vPendBil_DueDys) & """)  is greater than Allowed Credit Days (""" & Val(vLed_CrDys_Limit) & """)  "
                    Return True
                    Exit Function
                End If
            End If

        End If

        Return RetSTS

    End Function

    Public Shared Function Check_SizedBeam_Doffing_Meters(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCloth_IdNo As Integer, ByVal vSet_No As String, ByVal vBeam_No As String, ByRef vBEAM_ProdMeters As String, ByRef ErrMsg As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Boolean
        Dim cmd As New SqlClient.SqlCommand
        Dim da As SqlClient.SqlDataAdapter
        Dim dt1 As New DataTable
        Dim vExc_DofMtrs_Perc As String = 0
        Dim vBeam_Mtrs As String = 0
        Dim RetSTS As Boolean = False
        Dim vCRIMPPERC As String

        vBEAM_ProdMeters = 0
        ErrMsg = ""

        If Trim(vSet_No) <> "" And Trim(vBeam_No) <> "" Then

            vExc_DofMtrs_Perc = Common_Procedures.get_FieldValue(Cn1, "Cloth_Head", "Excess_Doffing_Meters_Percentage_Allowed", "(Cloth_IdNo = " & Str(Val(vCloth_IdNo)) & ")", , sqltr)

            vBeam_Mtrs = 0
            vBEAM_ProdMeters = 0

            cmd.Connection = Cn1
            cmd.CommandTimeout = 1000
            cmd.CommandType = CommandType.StoredProcedure
            cmd.CommandText = "SP_get_Beam_Details_from_SizedPavu_Processing_Details"
            cmd.Parameters.Add("@setcode", SqlDbType.VarChar)
            cmd.Parameters("@setcode").Value = vSet_No
            cmd.Parameters.Add("@beamno", SqlDbType.VarChar)
            cmd.Parameters("@beamno").Value = vBeam_No
            'cmd.ExecuteNonQuery()

            da = New SqlClient.SqlDataAdapter(cmd)
            'da = New SqlClient.SqlDataAdapter("select meters, Production_Meters from Stock_SizedPavu_Processing_Details where Set_Code = '" & Trim(vSet_No) & "' and Beam_No = '" & Trim(vBeam_No) & "'", Cn1)
            If IsNothing(sqltr) = False Then
                da.SelectCommand.Transaction = sqltr
            End If
            dt1 = New DataTable
            da.Fill(dt1)
            If dt1.Rows.Count > 0 Then
                If IsDBNull(dt1.Rows(0)(0).ToString) = False Then
                    vBeam_Mtrs = Val(dt1.Rows(0)(0).ToString)
                End If
                'If IsDBNull(dt1.Rows(0)(1).ToString) = False Then
                '    vBEAM_ProdMeters = Val(dt1.Rows(0)(1).ToString)
                'End If
            End If
            dt1.Clear()

            vCRIMPPERC = Common_Procedures.Calculation_CrimpPercentage_On_BEAMRUNOUT(Cn1, vSet_No, vBeam_No, Val(vBeam_Mtrs), vBEAM_ProdMeters, sqltr)

            vBeam_Mtrs = Format(Val(vBeam_Mtrs) + (Val(vBeam_Mtrs) * Val(vExc_DofMtrs_Perc) / 100), "##########0.00")

            If Val(vBEAM_ProdMeters) > Val(vBeam_Mtrs) Then

                ErrMsg = "Invalid : Fabric Production Meters is greater than Balance Beam Meters"
                Return True
                Exit Function

            End If

        End If

        Return False

    End Function


    Public Shared Sub DGVGrid_Cursor_Focus(ByVal dgv_grid As DataGridView, ByVal keyData As System.Windows.Forms.Keys, ByVal PreviousCtrlName As Object, ByVal NextCtrlName As Object, Optional ByVal ComboBox_ColNumbers_Arr() As Integer = Nothing, Optional ByVal dgvtxt_CTRL As DataGridViewTextBoxEditingControl = Nothing, Optional ByVal Forms_1st_CtrlName As Object = Nothing, Optional ByVal First_ColNumber As Integer = 1, Optional ByVal PrevCtrlName_1st_ColNumber As Integer = 1, Optional ByVal NextCtrlName_1st_ColNumber As Integer = 1, Optional ByVal Dgv_Col_Lst_Indx As Integer = Nothing)
        Dim dgv_GrdCtrl As DataGridView
        Dim Indx As Integer = 0
        Dim vCol_No As Integer = -1
        Dim vCurrCell_dgvText As String = ""

        Try

            If ComboBox_ColNumbers_Arr Is Nothing Then ComboBox_ColNumbers_Arr = New Integer() {-1000}

            With dgv_grid

                If IsNothing(dgv_grid) = False Then

                    If Dgv_Col_Lst_Indx = 0 Or IsNothing(Dgv_Col_Lst_Indx) Then
                        Dgv_Col_Lst_Indx = .ColumnCount - 1
                    End If

                    If keyData = Keys.Enter Or keyData = Keys.Down Then

                        If .CurrentCell.ColumnIndex >= Dgv_Col_Lst_Indx Then 'ColumnCount - 1 Then

                            If .CurrentCell.RowIndex >= .RowCount - 1 Then


GOTOLOOP1:

                                If IsNothing(NextCtrlName) = False Then

                                    If NextCtrlName.visible = True And NextCtrlName.Enabled = True Then

                                        If TypeOf (NextCtrlName) Is DataGridView Then

                                            dgv_GrdCtrl = NextCtrlName

                                            If dgv_GrdCtrl.Rows.Count > 0 Then

                                                dgv_GrdCtrl.Focus()
                                                dgv_GrdCtrl.CurrentCell = dgv_GrdCtrl.Rows(1).Cells(NextCtrlName_1st_ColNumber)

                                            End If

                                        Else

                                            NextCtrlName.Focus()

                                        End If

                                    End If



                                Else

                                    If MessageBox.Show("Do you want to Save", "FOR SAVING...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question) = DialogResult.Yes Then

                                        If Not MDIParent1.ActiveMdiChild Is Nothing Then
                                            Dim f1 As Interface_MDIActions = MDIParent1.ActiveMdiChild
                                            f1.save_record()
                                        End If

                                    Else

                                        If IsNothing(Forms_1st_CtrlName) = False Then
                                            If Forms_1st_CtrlName.Enabled And Forms_1st_CtrlName.Visible Then Forms_1st_CtrlName.focus()
                                        End If

                                    End If

                                End If


                            Else
                                .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(First_ColNumber)

                            End If

                        Else



                            vCurrCell_dgvText = ""
                            If IsNothing(dgvtxt_CTRL) = False Then
                                vCurrCell_dgvText = dgvtxt_CTRL.Text
                            End If

                            If .CurrentCell.RowIndex = .RowCount - 1 And .CurrentCell.ColumnIndex = First_ColNumber And (Trim(.CurrentRow.Cells(First_ColNumber).Value) = "" And Trim(vCurrCell_dgvText) = "") Then

                                For I = 0 To .Columns.Count - 1
                                    .Rows(.CurrentCell.RowIndex).Cells(I).Value = ""
                                Next

                                GoTo GOTOLOOP1


                            Else

                                vCol_No = -1

                                For Indx = .CurrentCell.ColumnIndex + 1 To .ColumnCount - 1
                                    If ComboBox_ColNumbers_Arr.Contains(Indx) = True Then
                                        vCol_No = Indx
                                        Exit For
                                    ElseIf .Columns(Indx).Visible = True And .Columns(Indx).ReadOnly = False Then
                                        vCol_No = Indx
                                        Exit For
                                    End If
                                Next Indx

                                If vCol_No >= 0 Then
                                    .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(vCol_No)

                                Else
                                    If .CurrentCell.RowIndex >= .RowCount - 1 Then
                                        GoTo GOTOLOOP1
                                    Else

                                        vCol_No = -1

                                        For Indx = First_ColNumber To .ColumnCount - 1
                                            If ComboBox_ColNumbers_Arr.Contains(Indx) = True Then
                                                vCol_No = Indx
                                                Exit For
                                            ElseIf .Columns(Indx).Visible = True And .Columns(Indx).ReadOnly = False Then
                                                vCol_No = Indx
                                                Exit For
                                            End If
                                        Next Indx

                                        If vCol_No >= 0 Then
                                            .CurrentCell = .Rows(.CurrentCell.RowIndex + 1).Cells(vCol_No)

                                        Else
                                            GoTo GOTOLOOP1

                                        End If

                                    End If

                                End If

                            End If

                        End If



                    ElseIf keyData = Keys.Up Then


                        If .CurrentCell.ColumnIndex <= First_ColNumber Then

                            If .CurrentCell.RowIndex <= 0 Then

GOTOLOOP2:
                                If IsNothing(PreviousCtrlName) = False Then

                                    If PreviousCtrlName.visible = True And PreviousCtrlName.Enabled = True Then

                                        If TypeOf (PreviousCtrlName) Is DataGridView Then

                                            dgv_GrdCtrl = PreviousCtrlName

                                            If dgv_GrdCtrl.Rows.Count > 0 Then

                                                dgv_GrdCtrl.Focus()
                                                dgv_GrdCtrl.CurrentCell = dgv_GrdCtrl.Rows(1).Cells(PrevCtrlName_1st_ColNumber)

                                            End If

                                        Else

                                            PreviousCtrlName.Focus()

                                        End If

                                    End If

                                Else

                                    If IsNothing(Forms_1st_CtrlName) = False Then
                                        If Forms_1st_CtrlName.Enabled And Forms_1st_CtrlName.Visible Then Forms_1st_CtrlName.focus()
                                    End If


                                End If


                            Else

GOTOLOOP3:
                                vCol_No = -1

                                For Indx = .ColumnCount - 1 To First_ColNumber Step -1
                                    If ComboBox_ColNumbers_Arr.Contains(Indx) = True Then
                                        vCol_No = Indx
                                        Exit For
                                    ElseIf .Columns(Indx).Visible = True And .Columns(Indx).ReadOnly = False Then
                                        vCol_No = Indx
                                        Exit For
                                    End If
                                Next Indx

                                If vCol_No >= 0 Then
                                    .CurrentCell = .Rows(.CurrentCell.RowIndex - 1).Cells(vCol_No)

                                Else
                                    GoTo GOTOLOOP2

                                End If

                            End If


                        Else

                            vCol_No = -1

                            For Indx = .CurrentCell.ColumnIndex - 1 To First_ColNumber Step -1
                                If ComboBox_ColNumbers_Arr.Contains(Indx) = True Then
                                    vCol_No = Indx
                                    Exit For
                                ElseIf .Columns(Indx).Visible = True And .Columns(Indx).ReadOnly = False Then
                                    vCol_No = Indx
                                    Exit For
                                End If
                            Next Indx

                            If vCol_No >= 0 Then
                                .CurrentCell = .Rows(.CurrentCell.RowIndex).Cells(vCol_No)

                            Else
                                If .CurrentCell.RowIndex <= 0 Then
                                    GoTo GOTOLOOP2
                                Else
                                    GoTo GOTOLOOP3
                                End If


                            End If

                        End If

                    End If

                End If

            End With


        Catch ex As Exception
            '---

        End Try

    End Sub

    Public Shared Sub Printing_RollPacking_Format1(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal Con As SqlClient.SqlConnection, ByVal FormName As String, ByVal EntryCode As String, ByRef prn_HdDT As DataTable, ByRef prn_DetDT As DataTable, ByVal prn_DetSNo As Integer, ByRef prn_PageNo As Integer, ByRef prn_Count As Integer, ByRef prn_HdIndx As Integer, ByRef prn_DetIndx As Integer, ByVal InvNo As String, ByVal InvDate As String, ByVal PONo As String, ByVal PODate As String, ByVal FabLotNo As String, ByRef Range1_100_200_Perc As String, ByRef Range2_200_300_Perc As String, ByRef Range3_300_400_Perc As String, ByRef Range4_abv400_Perc As String)
        Dim pFont As Font
        Dim ps As Printing.PaperSize
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim I As Integer
        Dim NoofItems_PerPage As Integer, NoofDets As Integer
        Dim TxtHgt As Single
        Dim PpSzSTS As Boolean = False
        Dim LnAr(21) As Single, ClAr(21) As Single
        Dim CurY As Single
        Dim npCS As Integer = "1"
        Dim Detail1 As String = ""
        Dim Detail2 As String = ""


        For I = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(I).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(I)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                e.PageSettings.PaperSize = ps
                Exit For
            End If
        Next


        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 20
            .Right = 35
            .Top = 30
            .Bottom = 30
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        pFont = New Font("Calibri", 7, FontStyle.Regular)

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With
        If PrintDocument1.DefaultPageSettings.Landscape = True Then
            With PrintDocument1.DefaultPageSettings.PaperSize
                PrintWidth = .Height - TMargin - BMargin
                PrintHeight = .Width - RMargin - LMargin
                PageWidth = .Height - TMargin
                PageHeight = .Width - RMargin
            End With
        End If

        NoofItems_PerPage = 27

        Erase LnAr
        Erase ClAr

        LnAr = New Single(21) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        ClAr = New Single(21) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClAr(1) = 28 : ClAr(2) = 37 : ClAr(3) = 38 : ClAr(4) = 28 : ClAr(5) = 55 : ClAr(6) = 25 : ClAr(7) = 25 : ClAr(8) = 25 : ClAr(9) = 25 : ClAr(10) = 35 : ClAr(11) = 35 : ClAr(12) = 30 : ClAr(13) = 60 : ClAr(14) = 60 : ClAr(15) = 50 : ClAr(16) = 50
        ClAr(17) = PageWidth - (LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16))

        TxtHgt = 18.5

        Try
            If prn_HdDT.Rows.Count > 0 Then

                Printing_RollPacking_Format1_PageHeader(e, Con, FormName, EntryCode, prn_HdDT, prn_DetDT, TxtHgt, prn_DetSNo, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, prn_PageNo, prn_Count, NoofItems_PerPage, CurY, LnAr, ClAr, InvNo, InvDate, PONo, PODate, FabLotNo, Range1_100_200_Perc, Range2_200_300_Perc, Range3_300_400_Perc, Range4_abv400_Perc)

                NoofDets = 0

                CurY = CurY - 10

                If prn_DetDT.Rows.Count > 0 Then

                    Do While prn_DetIndx <= prn_DetDT.Rows.Count - 1

                        If NoofDets >= NoofItems_PerPage Then

                            CurY = CurY + TxtHgt

                            Common_Procedures.Print_To_PrintDocument(e, "Continued...", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + 10, CurY, 0, 0, pFont)

                            NoofDets = NoofDets + 1

                            Printing_RollPacking_Format1_PageFooter(e, Con, FormName, EntryCode, prn_HdDT, prn_DetDT, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClAr, NoofDets, False, Range4_abv400_Perc)

                            e.HasMorePages = True
                            Return

                        End If


                        Detail1 = ""
                        If Trim(prn_DetDT.Rows(prn_DetIndx).Item("Fabric_defect_penalty_point").ToString) <> "" Then
                            Detail1 = Trim(prn_DetDT.Rows(prn_DetIndx).Item("Fabric_defect_penalty_point").ToString)

                        End If

                        Detail2 = ""
                        If Len(Detail1) > 25 Then
                            For I = 25 To 1 Step -1
                                If Mid$(Trim(Detail1), I, 1) = " " Or Mid$(Trim(Detail1), I, 1) = "," Or Mid$(Trim(Detail1), I, 1) = "." Or Mid$(Trim(Detail1), I, 1) = "-" Or Mid$(Trim(Detail1), I, 1) = "/" Or Mid$(Trim(Detail1), I, 1) = "_" Or Mid$(Trim(Detail1), I, 1) = "(" Or Mid$(Trim(Detail1), I, 1) = ")" Or Mid$(Trim(Detail1), I, 1) = "\" Or Mid$(Trim(Detail1), I, 1) = "[" Or Mid$(Trim(Detail1), I, 1) = "]" Or Mid$(Trim(Detail1), I, 1) = "{" Or Mid$(Trim(Detail1), I, 1) = "}" Then Exit For
                            Next I
                            If I = 0 Then I = 25
                            Detail2 = Microsoft.VisualBasic.Right(Trim(Detail1), Len(Detail1) - I)
                            Detail1 = Microsoft.VisualBasic.Left(Trim(Detail1), I - 1)
                        End If

                        prn_DetSNo = prn_DetSNo + 1

                        CurY = CurY + TxtHgt
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_DetSNo)), LMargin + 10, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetDT.Rows(prn_DetIndx).Item("Roll_No").ToString), LMargin + ClAr(1) + ClAr(2) - 10, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_DetDT.Rows(prn_DetIndx).Item("Meters")).ToString), LMargin + ClAr(1) + ClAr(2) + ClAr(3) - 10, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, (prn_DetDT.Rows(prn_DetIndx).Item("Loom_No").ToString), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) - 10, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, (prn_DetDT.Rows(prn_DetIndx).Item("Lot_No").ToString) & "/" & (prn_DetDT.Rows(prn_DetIndx).Item("Pcs_No").ToString), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) - 10, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_DetDT.Rows(prn_DetIndx).Item("p4").ToString)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) - 10, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_DetDT.Rows(prn_DetIndx).Item("p3").ToString)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) - 10, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_DetDT.Rows(prn_DetIndx).Item("p2").ToString)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) - 10, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_DetDT.Rows(prn_DetIndx).Item("p1").ToString)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) - 10, CurY, 1, 0, pFont)

                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_DetDT.Rows(prn_DetIndx).Item("Points").ToString)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) - 10, CurY, 1, 0, pFont)

                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_DetDT.Rows(prn_DetIndx).Item("Point_Per_PassMeter").ToString)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) - 10, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetDT.Rows(prn_DetIndx).Item("Grade").ToString), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) - 10, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetDT.Rows(prn_DetIndx).Item("Warp_lot_no").ToString), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + 10, CurY, 0, 0, pFont, , True, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13))
                        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetDT.Rows(prn_DetIndx).Item("Weft_lot_no").ToString), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + 10, CurY, 0, 0, pFont, , True, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14))

                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_DetDT.Rows(prn_DetIndx).Item("Weight").ToString)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) - 5, CurY, 1, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_DetDT.Rows(prn_DetIndx).Item("Gross_Weight").ToString)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16) - 5, CurY, 1, 0, pFont)


                        Common_Procedures.Print_To_PrintDocument(e, Detail1, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16) + 10, CurY, 2, 0, pFont)

                        If Detail2 <> "" Then
                            CurY = CurY + TxtHgt - 5
                            Common_Procedures.Print_To_PrintDocument(e, Detail2, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16) + 10, CurY, 2, 0, pFont)
                            NoofDets = NoofDets + 1
                        End If

                        NoofDets = NoofDets + 1

                        prn_DetIndx = prn_DetIndx + 1
                        prn_DetSNo = prn_DetSNo

                    Loop

                End If

                Printing_RollPacking_Format1_PageFooter(e, Con, FormName, EntryCode, prn_HdDT, prn_DetDT, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClAr, NoofDets, True, Range4_abv400_Perc)

            End If

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

        e.HasMorePages = False

    End Sub

    Public Shared Sub Printing_RollPacking_Format1_PageHeader(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal Con As SqlClient.SqlConnection, ByVal FormName As String, ByVal EntryCode As String, ByRef prn_HdDt As DataTable, ByRef prn_DetDt As DataTable, ByVal TxtHgt As Single, ByVal prn_DetSNo As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByRef prn_Count As Integer, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal InvNo As String, ByVal InvDate As String, ByVal PONo As String, ByVal PODate As String, ByVal FabLotNo As String, ByRef Range1_100_200_Perc As String, ByRef Range2_200_300_Perc As String, ByRef Range3_300_400_Perc As String, ByRef Range4_abv400_Perc As String)
        Dim da2, da3 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim dt3 As New DataTable
        Dim dt4 As New DataTable
        Dim p1Font As Font
        Dim Y1 As Single = 0, Y2 As Single = 0
        Dim Cmp_Add As String = ""
        Dim C11, C22, c33, c44, c55 As Single, no_of_rolls As Single
        Dim Cmp_Name As String = ""
        Dim total_mtr As String, Cmp_EMail As String
        Dim Range1_100_200_Mtrs As String = "", Range2_200_300_Mtrs As String = "", Range3_300_400_Mtrs As String = "", Range4_abv400_Mtrs As String = ""
        Dim vDiffPerc As String = 0
        Dim vBrushColor1 As New SolidBrush(Color.FromArgb(230, 230, 230))
        Dim vBrushColor2 As New SolidBrush(Color.FromArgb(240, 240, 240))

        PageNo = PageNo + 1

        CurY = TMargin + 30


        C11 = 0 ' ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5)
        C22 = ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + 20
        c33 = ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12)
        c44 = ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15)
        c55 = ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16) + (ClAr(17) \ 3)

        p1Font = New Font("Calibri", 15, FontStyle.Bold)
        prn_Count = prn_Count + 1

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY

        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Ledger_Name").ToString, LMargin, CurY, 2, PrintWidth, p1Font)
        CurY = CurY + TxtHgt + 10
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(11) = CurY

        Cmp_Name = ""
        total_mtr = "" : Cmp_EMail = ""


        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString

        total_mtr = prn_HdDt.Rows(0).Item("Total_Meters").ToString


        If Trim(prn_HdDt.Rows(0).Item("Cloth_Name").ToString) <> "" Then
            Cmp_EMail = "MAIL ID : " & prn_HdDt.Rows(0).Item("Company_EMail").ToString
        End If

        Common_Procedures.Print_To_PrintDocument(e, "PACKING LIST CUM SELF INSPECTION ABSTRACT REPORT", LMargin, CurY, 2, PrintWidth, p1Font)
        CurY = CurY + TxtHgt + 10
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(13) = CurY
        ' CurY = CurY + TxtHgt
        p1Font = New Font("Calibri", 10, FontStyle.Bold)
        Y1 = CurY + 0.5
        Y2 = CurY + TxtHgt

        Common_Procedures.FillRegionRectangle(e, LMargin, Y1, LMargin + C22, Y2, vBrushColor1)

        Common_Procedures.Print_To_PrintDocument(e, "Company Name", LMargin + 10, CurY, 0, 0, p1Font)

        Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin + C22 + 10, CurY, 0, 0, p1Font)
        Y1 = CurY + 0.5
        Y2 = CurY + TxtHgt
        Common_Procedures.FillRegionRectangle(e, LMargin + c33, Y1, LMargin + c44, Y2, vBrushColor1)

        Common_Procedures.Print_To_PrintDocument(e, "Loom Type & Selvedge", LMargin + c33 + 10, CurY, 0, 0, p1Font)

        Common_Procedures.Print_To_PrintDocument(e, "Airjet", LMargin + c44 + 10, CurY, 2, (LMargin + c55) - (LMargin + c44), p1Font)
        Common_Procedures.Print_To_PrintDocument(e, "open", LMargin + c55 + 10, CurY, 2, PageWidth - (LMargin + c55), p1Font)

        CurY = CurY + TxtHgt
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(14) = CurY
        'CurY = CurY + TxtHgtLoom type & Selvedge
        Y1 = CurY + 0.5
        Y2 = CurY + TxtHgt
        Common_Procedures.FillRegionRectangle(e, LMargin, Y1, LMargin + C22, Y2, vBrushColor1)




        Common_Procedures.Print_To_PrintDocument(e, "PO No & Date", LMargin + 10, CurY, 0, 0, p1Font)

        Common_Procedures.Print_To_PrintDocument(e, PONo & IIf(Trim(PODate) <> "", " / ", "") & PODate, LMargin + C22 + 10, CurY, 0, 0, p1Font)

        Y1 = CurY + 0.5
        Y2 = CurY + TxtHgt
        Common_Procedures.FillRegionRectangle(e, LMargin + c33, Y1, LMargin + c44, Y2, vBrushColor1)

        Common_Procedures.Print_To_PrintDocument(e, "Break-up", LMargin + c33 + 10, CurY, 0, 0, p1Font)

        Common_Procedures.Print_To_PrintDocument(e, "Qty in Mtrs", LMargin + c44 + 10, CurY, 2, (LMargin + c55) - (LMargin + c44), p1Font)
        Common_Procedures.Print_To_PrintDocument(e, "% of Rolls", LMargin + c55 + 10, CurY, 2, PageWidth - (LMargin + c55), p1Font)


        CurY = CurY + TxtHgt


        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(15) = CurY
        ' CurY = CurY + TxtHgt
        Y1 = CurY + 0.5
        Y2 = CurY + TxtHgt
        Common_Procedures.FillRegionRectangle(e, LMargin, Y1, LMargin + C22, Y2, vBrushColor1)

        Common_Procedures.Print_To_PrintDocument(e, "TC|Construct|Weave", LMargin + 10, CurY, 0, 0, p1Font)

        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdDt.Rows(0).Item("Cloth_Name").ToString), LMargin + C22 + 10, CurY, 0, 0, p1Font, , True, LMargin + c33 - 10)

        Y1 = CurY + 0.5
        Y2 = CurY + TxtHgt
        Common_Procedures.FillRegionRectangle(e, LMargin + c33, Y1, LMargin + c44, Y2, vBrushColor1)

        Common_Procedures.Print_To_PrintDocument(e, "100-200 Mtrs", LMargin + c33 + 10, CurY, 0, 0, p1Font)

        Range1_100_200_Mtrs = 0
        If Trim(UCase(FormName)) = Trim(UCase("ClothSales_Cloth_Invoice_GST")) Then
            da2 = New SqlClient.SqlDataAdapter("SELECT SUM(a.meters) as range1 FROM  Packing_Slip_Head tA INNER JOIN Roll_Packing_Details a  ON tA.Roll_Packing_Code = a.Roll_Packing_Code and tA.Packing_Slip_Code = a.Roll_Code WHERE  tA.Delivery_Code = '" & Trim(EntryCode) & "' and a.meters between 100 AND 200", Con)

        Else
            da2 = New SqlClient.SqlDataAdapter("SELECT SUM(a.meters) as range1 FROM Roll_Packing_Details a WHERE a.meters between 100 AND 200 And Roll_packing_Code = '" & Trim(EntryCode) & "'", Con)

        End If

        dt2 = New DataTable
        da2.Fill(dt2)
        If dt2.Rows.Count > 0 Then
            If IsDBNull(dt2.Rows(0).Item("range1").ToString) = False Then
                Range1_100_200_Mtrs = Val(dt2.Rows(0).Item("range1").ToString)
            End If
        End If
        dt2.Clear()

        Common_Procedures.Print_To_PrintDocument(e, Range1_100_200_Mtrs, LMargin + c44 + 10, CurY, 2, (LMargin + c55) - (LMargin + c44), p1Font)

        Range1_100_200_Perc = Format(Val((Range1_100_200_Mtrs / total_mtr) * 100), "#######0.00")
        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Range1_100_200_Perc), "#######0.00"), LMargin + c55 + 10, CurY, 2, PageWidth - (LMargin + c55), p1Font)



        CurY = CurY + TxtHgt
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(16) = CurY

        Y1 = CurY + 0.5
        Y2 = CurY + TxtHgt
        Common_Procedures.FillRegionRectangle(e, LMargin, Y1, LMargin + C22, Y2, vBrushColor1)

        Common_Procedures.Print_To_PrintDocument(e, "Invoice no", LMargin + 10, CurY, 0, 0, p1Font)

        Common_Procedures.Print_To_PrintDocument(e, InvNo, LMargin + C22 + 10, CurY, 0, 0, p1Font)

        Y1 = CurY + 0.5
        Y2 = CurY + TxtHgt
        Common_Procedures.FillRegionRectangle(e, LMargin + c33, Y1, LMargin + c44, Y2, vBrushColor1)


        Common_Procedures.Print_To_PrintDocument(e, "201-300 Mtrs", LMargin + c33 + 10, CurY, 0, 0, p1Font)


        Range2_200_300_Mtrs = 0
        If Trim(UCase(FormName)) = Trim(UCase("ClothSales_Cloth_Invoice_GST")) Then
            da2 = New SqlClient.SqlDataAdapter("SELECT SUM(a.meters) as range2 FROM  Packing_Slip_Head tA INNER JOIN Roll_Packing_Details a  ON tA.Roll_Packing_Code = a.Roll_Packing_Code and tA.Packing_Slip_Code = a.Roll_Code WHERE  tA.Delivery_Code = '" & Trim(EntryCode) & "' and a.meters between 200.01 AND 300", Con)
        Else
            da2 = New SqlClient.SqlDataAdapter("SELECT SUM(a.meters) as range2 FROM Roll_Packing_Details a WHERE  a.meters between 201 AND 300 And Roll_packing_Code='" & Trim(EntryCode) & "'", Con)
        End If

        dt2 = New DataTable
        da2.Fill(dt2)
        If dt2.Rows.Count > 0 Then
            If IsDBNull(dt2.Rows(0).Item("range2").ToString) = False Then
                Range2_200_300_Mtrs = Val(dt2.Rows(0).Item("range2").ToString)
            End If
        End If
        dt2.Clear()

        Common_Procedures.Print_To_PrintDocument(e, Range2_200_300_Mtrs, LMargin + c44 + 10, CurY, 2, (LMargin + c55) - (LMargin + c44), p1Font)
        Range2_200_300_Perc = Format(Val((Range2_200_300_Mtrs / total_mtr) * 100), "#######0")
        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Range2_200_300_Perc), "#######0.00"), LMargin + c55 + 10, CurY, 2, PageWidth - (LMargin + c55), p1Font)

        CurY = CurY + TxtHgt
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(17) = CurY
        Y1 = CurY + 0.5
        Y2 = CurY + TxtHgt
        Common_Procedures.FillRegionRectangle(e, LMargin, Y1, LMargin + C22, Y2, vBrushColor1)

        Common_Procedures.Print_To_PrintDocument(e, "Invoice Date", LMargin + 10, CurY, 0, 0, p1Font)

        Common_Procedures.Print_To_PrintDocument(e, InvDate, LMargin + C22 + 10, CurY, 0, 0, p1Font)

        Y1 = CurY + 0.5
        Y2 = CurY + TxtHgt
        Common_Procedures.FillRegionRectangle(e, LMargin + c33, Y1, LMargin + c44, Y2, vBrushColor1)


        Common_Procedures.Print_To_PrintDocument(e, "301-400 Mtrs", LMargin + c33 + 10, CurY, 0, 0, p1Font)

        Range3_300_400_Mtrs = 0
        If Trim(UCase(FormName)) = Trim(UCase("ClothSales_Cloth_Invoice_GST")) Then
            da2 = New SqlClient.SqlDataAdapter("SELECT SUM(a.meters) as range3 FROM  Packing_Slip_Head tA INNER JOIN Roll_Packing_Details a  ON tA.Roll_Packing_Code = a.Roll_Packing_Code and tA.Packing_Slip_Code = a.Roll_Code WHERE  tA.Delivery_Code = '" & Trim(EntryCode) & "' and a.meters between 300.01 AND 400", Con)
        Else
            da2 = New SqlClient.SqlDataAdapter("SELECT SUM(a.meters) as range3 FROM Roll_Packing_Details a WHERE  a.meters between 300.01 AND 400 And Roll_packing_Code = '" & Trim(EntryCode) & "'", Con)
        End If

        dt2 = New DataTable
        da2.Fill(dt2)
        If dt2.Rows.Count > 0 Then
            If IsDBNull(dt2.Rows(0).Item("range3").ToString) = False Then
                Range3_300_400_Mtrs = Val(dt2.Rows(0).Item("range3").ToString)
            End If
        End If
        dt2.Clear()

        Common_Procedures.Print_To_PrintDocument(e, Range3_300_400_Mtrs, LMargin + c44 + 10, CurY, 2, (LMargin + c55) - (LMargin + c44), p1Font)

        Range3_300_400_Perc = Format(Val((Range3_300_400_Mtrs / total_mtr) * 100), "#######0.00")
        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Range3_300_400_Perc), "#######0.00"), LMargin + c55 + 10, CurY, 2, PageWidth - (LMargin + c55), p1Font)

        CurY = CurY + TxtHgt
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(18) = CurY
        Y1 = CurY + 0.5
        Y2 = CurY + TxtHgt
        Common_Procedures.FillRegionRectangle(e, LMargin, Y1, LMargin + C22, Y2, vBrushColor1)


        Common_Procedures.Print_To_PrintDocument(e, "Fabric Lot no", LMargin + 10, CurY, 0, 0, p1Font)

        Common_Procedures.Print_To_PrintDocument(e, FabLotNo, LMargin + C22 + 10, CurY, 0, 0, p1Font)

        Y1 = CurY + 0.5
        Y2 = CurY + TxtHgt
        Common_Procedures.FillRegionRectangle(e, LMargin + c33, Y1, LMargin + c44, Y2, vBrushColor1)

        Common_Procedures.Print_To_PrintDocument(e, "> 401 Mtrs", LMargin + c33 + 10, CurY, 0, 0, p1Font)

        Range4_abv400_Mtrs = 0
        If Trim(UCase(FormName)) = Trim(UCase("ClothSales_Cloth_Invoice_GST")) Then
            da2 = New SqlClient.SqlDataAdapter("SELECT SUM(a.meters) as range4 FROM  Packing_Slip_Head tA INNER JOIN Roll_Packing_Details a  ON tA.Roll_Packing_Code = a.Roll_Packing_Code and tA.Packing_Slip_Code = a.Roll_Code WHERE  tA.Delivery_Code = '" & Trim(EntryCode) & "' and a.meters >= 400.01 ", Con)
        Else
            da2 = New SqlClient.SqlDataAdapter("SELECT SUM(a.meters) as range4 FROM Roll_Packing_Details a WHERE  a.meters  >=400.01 And Roll_packing_Code='" & Trim(EntryCode) & "'", Con)
        End If
        dt2 = New DataTable
        da2.Fill(dt2)
        If dt2.Rows.Count > 0 Then
            If IsDBNull(dt2.Rows(0).Item("range4").ToString) = False Then
                Range4_abv400_Mtrs = Val(dt2.Rows(0).Item("range4").ToString)
            End If
        End If
        dt2.Clear()

        Common_Procedures.Print_To_PrintDocument(e, Range4_abv400_Mtrs, LMargin + c44 + 10, CurY, 2, (LMargin + c55) - (LMargin + c44), p1Font)

        Range4_abv400_Perc = Format(Val((Range4_abv400_Mtrs / total_mtr) * 100), "#######0")



        vDiffPerc = 100 - Val(Range4_abv400_Perc) - Val(Range3_300_400_Perc) - Val(Range2_200_300_Perc) - Val(Range1_100_200_Perc)
        If Range4_abv400_Perc <> 0 Then
            Range4_abv400_Perc = Format(Val(Range4_abv400_Perc) + Val(vDiffPerc), "##########0.00")
        ElseIf Range3_300_400_Perc <> 0 Then
            Range3_300_400_Perc = Format(Val(Range3_300_400_Perc) + Val(vDiffPerc), "##########0.00")
        ElseIf Range2_200_300_Perc <> 0 Then
            Range2_200_300_Perc = Format(Val(Range2_200_300_Perc) + Val(vDiffPerc), "##########0.00")
        ElseIf Range1_100_200_Perc <> 0 Then
            Range1_100_200_Perc = Format(Val(Range1_100_200_Perc) + Val(vDiffPerc), "##########0.00")
        End If

        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Range4_abv400_Perc), "#######0.00"), LMargin + c55 + 10, CurY, 2, PageWidth - (LMargin + c55), p1Font)

        dt2.Clear()
        CurY = CurY + TxtHgt
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(19) = CurY
        Y1 = CurY + 0.5
        Y2 = CurY + TxtHgt
        Common_Procedures.FillRegionRectangle(e, LMargin, Y1, LMargin + C22, Y2, vBrushColor1)


        Common_Procedures.Print_To_PrintDocument(e, "Total no of rolls : ", LMargin + 10, CurY, 0, 0, p1Font)

        no_of_rolls = 0
        If Trim(UCase(FormName)) = Trim(UCase("ClothSales_Cloth_Invoice_GST")) Then
            da3 = New SqlClient.SqlDataAdapter("SELECT COUNT(*) No_of_Rolls FROM  Packing_Slip_Head tA INNER JOIN Roll_Packing_Details a  ON tA.Roll_Packing_Code = a.Roll_Packing_Code and tA.Packing_Slip_Code = a.Roll_Code WHERE  tA.Delivery_Code = '" & Trim(EntryCode) & "'", Con)
        Else
            da3 = New SqlClient.SqlDataAdapter("SELECT COUNT(*) No_of_Rolls FROM Roll_Packing_Details  WHERE Roll_packing_Code = '" & Trim(EntryCode) & "'", Con)
        End If

        dt3 = New DataTable
        da3.Fill(dt3)
        If dt3.Rows.Count > 0 Then
            If IsDBNull(dt3.Rows(0).Item("No_of_Rolls").ToString) = False Then
                no_of_rolls = Val(dt3.Rows(0).Item("No_of_Rolls").ToString)
            End If
        End If
        dt3.Clear()


        Common_Procedures.Print_To_PrintDocument(e, no_of_rolls, LMargin + C22 + 10, CurY, 0, 0, p1Font)



        e.Graphics.DrawLine(Pens.Black, LMargin + c44, CurY, LMargin + c44, LnAr(13))

        e.Graphics.DrawLine(Pens.Black, LMargin + c55, CurY, LMargin + c55, LnAr(13))
        'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16) + 20, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16) + 20, LnAr(13))
        CurY = CurY + TxtHgt
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(2) = CurY

        e.Graphics.DrawLine(Pens.Black, LMargin + C22, CurY, LMargin + C22, LnAr(13))

        e.Graphics.DrawLine(Pens.Black, LMargin + c33, CurY, LMargin + c33, LnAr(13))





        Try
            CurY = CurY + TxtHgt
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

            Y1 = CurY + 0.5
            Y2 = CurY + TxtHgt - 10 + TxtHgt
            Common_Procedures.FillRegionRectangle(e, LMargin, Y1, PageWidth, Y2, vBrushColor2)

            LnAr(10) = CurY
            CurY = CurY + 10
            p1Font = New Font("Calibri", 7, FontStyle.Bold)
            Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + 10, CurY, 2, 0, p1Font)
            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("Total_Meters").ToString)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) - 10, CurY, 1, 0, p1Font)
            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("p4").ToString)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) - 10, CurY, 1, 0, p1Font)
            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("p3").ToString)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) - 10, CurY, 1, 0, p1Font)
            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("p2").ToString)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) - 10, CurY, 1, 0, p1Font)
            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("p1").ToString)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) - 10, CurY, 1, 0, p1Font)
            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("Total_Points").ToString)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + +ClAr(8) + ClAr(9) + ClAr(10) - 10, CurY, 1, 0, p1Font)

            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("Total_100L_mtrs").ToString)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + +ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) - 10, CurY, 1, 0, p1Font)
            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("Total_weight").ToString)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + +ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) - 5, CurY, 1, 0, p1Font)
            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("Total_gross_weight").ToString)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + +ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16) - 5, CurY, 1, 0, p1Font)

            CurY = CurY + TxtHgt
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(2) = CurY



            Y1 = CurY + 0.5
            Y2 = CurY + TxtHgt - 10 + TxtHgt + TxtHgt + 20
            Common_Procedures.FillRegionRectangle(e, LMargin, Y1, PageWidth, Y2, vBrushColor1)

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "Sl.", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "No", LMargin + ClAr(1), CurY + TxtHgt, 2, ClAr(2), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "Roll", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "No", LMargin + ClAr(1), CurY + TxtHgt, 2, ClAr(2), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "Tot", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Mtrs", LMargin + ClAr(1) + ClAr(2), CurY + TxtHgt, 2, ClAr(3), pFont)


            Common_Procedures.Print_To_PrintDocument(e, "Loom", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(4), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "No", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY + TxtHgt, 2, ClAr(4), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "Supplier", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(5), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "piece/Ref", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY + TxtHgt, 2, ClAr(5), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "no", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY + TxtHgt + TxtHgt, 2, ClAr(5), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "4", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "3", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "2", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "1", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 2, ClAr(9), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "Total", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 2, ClAr(10), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "points", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY + TxtHgt, 2, ClAr(10), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "P.Per", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(11), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "100L", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY + TxtHgt, 2, ClAr(11), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "mtrs", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY + TxtHgt + TxtHgt, 2, ClAr(11), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "Fabric", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Grade", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY + TxtHgt, 2, ClAr(12), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "Warp", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY, 2, ClAr(13), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "lot", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY + TxtHgt, 2, ClAr(13), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "no", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY + TxtHgt + TxtHgt, 2, ClAr(13), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "Weft", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY, 2, ClAr(14), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "lot", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY + TxtHgt, 2, ClAr(14), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "no", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY + TxtHgt + TxtHgt, 2, ClAr(14), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "Net", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14), CurY, 2, ClAr(15), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Weight", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14), CurY + TxtHgt, 2, ClAr(15), pFont)


            Common_Procedures.Print_To_PrintDocument(e, "Gross", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15), CurY, 2, ClAr(16), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "Weight", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15), CurY + TxtHgt, 2, ClAr(16), pFont)


            Common_Procedures.Print_To_PrintDocument(e, "Fabric Defects & Penalty", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16), CurY, 2, ClAr(17), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "point Details", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16), CurY + TxtHgt, 2, ClAr(17), pFont)

            CurY = CurY + TxtHgt + TxtHgt + 20
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(3) = CurY


            ' e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY, LMargin + ClAr(1), LnAr(10))


        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Shared Sub Printing_RollPacking_Format1_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal Con As SqlClient.SqlConnection, ByVal FormName As String, ByVal EntryCode As String, ByRef prn_HdDt As DataTable, ByRef prn_DetDt As DataTable, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal NoofDets As Integer, ByVal is_LastPage As Boolean, ByVal Range4_abv400_Perc As String)
        Dim i As Integer
        Dim p1Font As Font, p2Font As Font
        Dim W1, W2 As Single
        Dim C1 As Single
        Dim da2, da3 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim dt3 As New DataTable
        Dim dt4 As New DataTable
        Dim NewCode As String = ""
        Dim Cmp_Add As String = ""

        C1 = ClAr(1) + ClAr(2) + ClAr(3)
        For i = NoofDets + 1 To NoofItems_PerPage
            CurY = CurY + TxtHgt
        Next

        W1 = e.Graphics.MeasureString("Empty Gunnies  :", pFont).Width
        W2 = e.Graphics.MeasureString("Empty Cones  :", pFont).Width


        CurY = CurY + TxtHgt + 10
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(6) = CurY
        e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY, LMargin + ClAr(1), LnAr(2))

        e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY, LMargin + ClAr(1) + ClAr(2), LnAr(10))
        e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3), LnAr(10))
        e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), LnAr(10))
        e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), LnAr(10))
        e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(10))
        e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), LnAr(10))
        e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), LnAr(10))
        e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), LnAr(10))

        e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), LnAr(10))
        e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), LnAr(10))
        e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), LnAr(10))
        e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(10))
        e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14), LnAr(10))
        e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15), LnAr(10))
        e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16), LnAr(10))

        pFont = New Font("Calibri", 8, FontStyle.Bold Or FontStyle.Underline)
        p1Font = New Font("Calibri", 7, FontStyle.Bold)
        CurY = CurY + TxtHgt - 10
        Common_Procedures.Print_To_PrintDocument(e, "Suppliers Acknowledgement ", LMargin + 10, CurY, 0, 0, pFont)
        Common_Procedures.Print_To_PrintDocument(e, "*PL-Packing list ", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 0, 0, p1Font)
        Common_Procedures.Print_To_PrintDocument(e, "Commands ", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY, 0, 0, pFont)
        Common_Procedures.Print_To_PrintDocument(e, "*RI-Random Inspections ", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15), CurY, 0, 0, p1Font)

        CurY = CurY + TxtHgt

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY)
        LnAr(18) = CurY
        Common_Procedures.Print_To_PrintDocument(e, "This PL fabric rolls are 100% free from hanging & Uncut threads", LMargin + ClAr(1), CurY, 0, 0, p1Font)
        CurY = CurY + TxtHgt - 5

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY)
        Common_Procedures.Print_To_PrintDocument(e, "There Will not be any negative observation in EPI,PPI greay width & yarn count", LMargin + ClAr(1), CurY, 0, 0, p1Font)
        CurY = CurY + TxtHgt - 5

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY)
        LnAr(17) = CurY
        Common_Procedures.Print_To_PrintDocument(e, "1st Line inspection report attached in rolls", LMargin + ClAr(1), CurY, 0, 0, p1Font)
        Common_Procedures.Print_To_PrintDocument(e, "Yes", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + 5, CurY, 2, 0, p1Font)
        Common_Procedures.Print_To_PrintDocument(e, "Datas", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, 0, p1Font)
        CurY = CurY + TxtHgt - 5

        Dim vTotRolls As String = 0
        Dim vTot_GradeA_Rolls As String = 0
        Dim vTot_GradeA_Perc As String = 0

        vTotRolls = 0
        If Trim(UCase(FormName)) = Trim(UCase("ClothSales_Cloth_Invoice_GST")) Then
            da3 = New SqlClient.SqlDataAdapter("SELECT COUNT(*) No_of_Rolls FROM  Packing_Slip_Head tA INNER JOIN Roll_Packing_Details a  ON tA.Roll_Packing_Code = a.Roll_Packing_Code and tA.Packing_Slip_Code = a.Roll_Code WHERE  tA.Delivery_Code = '" & Trim(EntryCode) & "'", Con)
        Else
            da3 = New SqlClient.SqlDataAdapter("SELECT COUNT(*) No_of_Rolls FROM Roll_Packing_Details  WHERE Roll_packing_Code = '" & Trim(EntryCode) & "'", Con)
        End If
        dt3 = New DataTable
        da3.Fill(dt3)
        If dt3.Rows.Count > 0 Then
            If IsDBNull(dt3.Rows(0).Item("No_of_Rolls").ToString) = False Then
                vTotRolls = Val(dt3.Rows(0).Item("No_of_Rolls").ToString)
            End If
        End If
        dt3.Clear()


        vTot_GradeA_Rolls = 0
        If Trim(UCase(FormName)) = Trim(UCase("ClothSales_Cloth_Invoice_GST")) Then
            da3 = New SqlClient.SqlDataAdapter("SELECT COUNT(*) No_of_Rolls FROM  Packing_Slip_Head tA INNER JOIN Roll_Packing_Details a  ON  a.Grade = 'A' and tA.Roll_Packing_Code = a.Roll_Packing_Code and tA.Packing_Slip_Code = a.Roll_Code WHERE  tA.Delivery_Code = '" & Trim(EntryCode) & "' and  a.Grade = 'A' ", Con)
        Else
            da3 = New SqlClient.SqlDataAdapter("SELECT COUNT(*) No_of_Rolls FROM Roll_Packing_Details WHERE Roll_packing_Code = '" & Trim(EntryCode) & "' and Grade = 'A'", Con)
        End If
        dt3 = New DataTable
        da3.Fill(dt3)
        If dt3.Rows.Count > 0 Then
            If IsDBNull(dt3.Rows(0).Item("No_of_Rolls").ToString) = False Then
                vTot_GradeA_Rolls = Val(dt3.Rows(0).Item("No_of_Rolls").ToString)
            End If
        End If
        dt3.Clear()

        vTot_GradeA_Perc = 0
        If Val(vTotRolls) <> 0 Then
            vTot_GradeA_Perc = Format(Val(vTot_GradeA_Rolls) * 100 / Val(vTotRolls), "##########0.00")
        End If



        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY)
        Common_Procedures.Print_To_PrintDocument(e, "Is This PL contains 99% A Grade Fabric rolls", LMargin + ClAr(1), CurY, 0, 0, p1Font)
        If Val(vTot_GradeA_Perc) >= 99 Then
            Common_Procedures.Print_To_PrintDocument(e, "Yes", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + 5, CurY, 2, 0, p1Font)
        Else
            Common_Procedures.Print_To_PrintDocument(e, "No", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + 5, CurY, 2, 0, p1Font)
        End If

        p2Font = New Font("Calibri", 6, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, vTot_GradeA_Perc, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + 5, CurY, 2, 0, p2Font)

        CurY = CurY + TxtHgt - 5


        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY)
        Common_Procedures.Print_To_PrintDocument(e, "Is This  PL contains 95% -400 mtrsroll Length", LMargin + ClAr(1), CurY, 0, 0, p1Font)
        If (Range4_abv400_Perc > 95) Then
            Common_Procedures.Print_To_PrintDocument(e, "Yes", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + 5, CurY, 2, 0, p1Font)
        Else
            Common_Procedures.Print_To_PrintDocument(e, "No", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + 5, CurY, 2, 0, p1Font)

        End If

        p2Font = New Font("Calibri", 6, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, Format(Val(Range4_abv400_Perc), "########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + 5, CurY, 2, 0, p2Font)

        CurY = CurY + TxtHgt - 5


        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY)
        Common_Procedures.Print_To_PrintDocument(e, "Is This PL Falls Under Avg. 12 Points/100 M", LMargin + ClAr(1), CurY, 0, 0, p1Font)
        If (Trim(Val(prn_HdDt.Rows(0).Item("Total_100L_mtrs").ToString)) < 12) Then
            Common_Procedures.Print_To_PrintDocument(e, "Yes", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + 5, CurY, 2, 0, p1Font)

        Else
            Common_Procedures.Print_To_PrintDocument(e, "No", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + 5, CurY, 2, 0, p1Font)

        End If

        p2Font = New Font("Calibri", 6, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdDt.Rows(0).Item("Total_100L_mtrs").ToString)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + +ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + 5, CurY, 2, 0, p2Font)

        CurY = CurY + TxtHgt - 5
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY)
        e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), LnAr(17), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY)

        Common_Procedures.Print_To_PrintDocument(e, "Is This PL Fabric gone under Feld random inspection", LMargin + ClAr(1), CurY, 0, 0, p1Font)
        Common_Procedures.Print_To_PrintDocument(e, "Yes", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + 25, CurY, 0, 0, p1Font)
        CurY = CurY + TxtHgt - 5


        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY)
        e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), LnAr(17), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY)
        Common_Procedures.Print_To_PrintDocument(e, "*If yes thenattach the random inspection reports", LMargin + ClAr(1), CurY, 0, 0, p1Font)
        Common_Procedures.Print_To_PrintDocument(e, "Attached", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + 20, CurY, 0, 0, p1Font)

        CurY = CurY + TxtHgt - 5

        p1Font = New Font("Calibri", 7, FontStyle.Bold)

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY)
        LnAr(19) = CurY
        e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), LnAr(18), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), LnAr(19))

        Common_Procedures.Print_To_PrintDocument(e, "Declaration :", LMargin + 5, CurY, 0, 0, pFont)
        Common_Procedures.Print_To_PrintDocument(e, "If any inferior fabric quality found in grey or after processing as a fabrics supplier we whole", LMargin + ClAr(1) + ClAr(2) - 10, CurY, 0, 0, p1Font)
        CurY = CurY + 15
        Common_Procedures.Print_To_PrintDocument(e, " responsible for total value loss right from Grey/Transportion,dyeing/Colouring & Printing", LMargin + ClAr(1) + ClAr(2) - 10, CurY, 0, 0, p1Font)
        CurY = CurY + 15
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY)

        CurY = CurY + TxtHgt
        p1Font = New Font("Calibri", 9, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, "Supplier authorized signatory ", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, 0, p1Font)
        Common_Procedures.Print_To_PrintDocument(e, "Plant Random Inspection Team ", PageWidth - 50, CurY, 1, 0, p1Font)

        CurY = CurY + TxtHgt

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(6))

        e.Graphics.DrawLine(Pens.Black, LMargin, LnAr(1), LMargin, CurY)
        e.Graphics.DrawLine(Pens.Black, PageWidth, LnAr(1), PageWidth, CurY)

    End Sub




    ''''''25-03-2020
    Public Shared Sub Set_MdiMenu_Enable_Disable_by_UserRights()
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Ledger_Creation = "" Then
            MDIParent1.mnu_Master_Textile_LedgerCreation.Enabled = False

        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Agent_Creation = "" Then
            MDIParent1.mnu_Master_Textile_AgentCreation.Enabled = False
            MDIParent1.mnu_Master_OE_Agent_Creation.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Sizing_Creation = "" Then MDIParent1.mnu_Master_Textile_SizingCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Weaver_Creation = "" Then MDIParent1.mnu_Master_Textile_WeaverCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.JOBWORKER_Creation = "" Then MDIParent1.mnu_Master_Textile_JobworkerCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Rewinding_Creation = "" Then MDIParent1.mnu_Master_Textile_ReWindingCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Sewing_Creation = "" Then MDIParent1.mnu_Master_Textile_SewingCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Transport_Creation = "" Then
            MDIParent1.mnu_Master_Textile_TransportCreation.Enabled = False
            MDIParent1.mnu_OE_master_Transport_Creation.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Godown_Creation = "" Then
            MDIParent1.mnu_Master_GodownCreation.Enabled = False
        End If

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Account_Group_creation = "" Then MDIParent1.mnu_Master_Textile_AccountsGroup_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Area_Creation = "" Then MDIParent1.mnu_Master_Textile_AreaCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Tax_Creation = "" Then MDIParent1.mnu_Master_TaxCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ItemGroup_Creation = "" Then MDIParent1.mnu_Master_Textile_ItemGroup_HSNCode_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.GST_AC_SETTINGS = "" Then MDIParent1.mnu_Master_Textile_GST_Account_Settings_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Count_Creation = "" Then
            MDIParent1.mnu_Master_Textile_CountCreation.Enabled = False
            MDIParent1.mnu_Master_OE_Count_Creation.Enabled = False
        End If
        'If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.YarnCount_type_Creation = "" Then MdiParent1.mnu_Master_YarnCount_Type_Creation.Enabled = False
        'If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.YarnCount_Fiber_Creation = "" Then MdiParent1.mnu_Master_YarnCount_Fiber_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Mill_Creation = "" Then MDIParent1.mnu_Master_Textile_MillCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Fibre_Creation = "" Then MDIParent1.mnu_Master_Textile_Fibre_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Fibre_Lot_No_Creation = "" Then MDIParent1.mnu_Master_Textile_Fibre_Lot_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Endscount_Creation = "" Then MDIParent1.mnu_Master_Textile_EndsCountCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.cloth_Creation = "" Then MDIParent1.mnu_Master_Textile_CothCreation.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Cloth_Set_Creation = "" Then MDIParent1.mnu_Master_Cloth_Set_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Cloth_Sales_Rate_Master = "" Then MDIParent1.mnu_Master_Textile_Cloth_SalesRate_Master_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Fabric_Bits_Group_Creation = "" Then MDIParent1.mnu_Master_Textile_Cloth_BitsGroup_Master_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.VehicleNo_Creation = "" Then MDIParent1.mnu_master_Vehicleno_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Loading_UnLoading_Rate = "" Then MDIParent1.mnu_Master_Loading_Unloadin_Rate.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Checking_Tableno_Creation = "" Then MDIParent1.mnu_Master_Textile_Checking_TableNo_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Fabric_Lot_No_Creation = "" Then MDIParent1.mnu_Master_Fabric_LotNo_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Variety_Creation = "" Then
            MDIParent1.mnu_Master_Variety_Creation.Enabled = False
            MDIParent1.mnu_Master_OE_Variety_Creation.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PieceChecking_Defects = "" Then MDIParent1.mnu_Master_Textile_PieceChecking_Defects_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.App_User_Creation = "" Then MDIParent1.mnu_Master_Textile_App_UserCreation.Enabled = False
        'If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.clothset_creation = "" Then MdiParent1.mnu_Master_Cloth_Set_Creation.Enabled = False



        'If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Fabric_Category_Creation = "" Then MdiParent1.mnu_Master_Fabric_category_Creation.Enabled = False
        'If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Fabric_group_Creation = "" Then MdiParent1.mnu_Master_Fabric_Group_Creation.Enabled = False
        'If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Fabric_SUBCategory_Creation = "" Then MdiParent1.mnu_Master_Fabric_SubCategory_Creation.Enabled = False
        'If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Vari = "" Then MDIParent1.mnu_Master_Variety_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Loom_Creation = "" Then
            MDIParent1.mnu_Master_Textile_LoomCreation.Enabled = False
            'MdiParent1.mnu_Master_Textile_LoomTypeCreation.Enabled = False
        End If

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Loom_type_Creation = "" Then MDIParent1.mnu_Master_Textile_LoomTypeCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Masters_Beam_Width_Creation = "" Then MDIParent1.mnu_Master_BeamWidth_Creation.Enabled = False

        ' If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Colur_Creation = "" Then MDIParent1.mnu_Master_Textile_ColourCreation.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Vendor_Creation = "" Then MDIParent1.mnu_Master_Vendor_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Border_size_Creation = "" Then MDIParent1.mnu_Master_Textile_BorderSizeCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Bobin_size_Creation = "" Then MDIParent1.mnu_Master_Textile_ColourCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Employee_Creation = "" Then MDIParent1.mnu_Master_Textile_EmployeeCreation.Enabled = False
        'If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Weaver_loom_Details = "" Then MDIParent1.mnu_Master_Textile_Weaver_Loom_Details.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Cheque_Printing_Position = "" Then MDIParent1.mnu_Master_Cheque_Printing_Position.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Val(Common_Procedures.User.Show_UserCreation_Status) = 0 Then
            MDIParent1.mnu_FP_Master_UserCreation.Enabled = False
            MDIParent1.mnu_Master_Textile_UserCreation.Enabled = False
        End If


        ''*******************************************************************************************************************************************************************************
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Textile_OpeningStock = "" Then MDIParent1.mnu_Opening_Textile_OpeningStock.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Closing_Stock_value = "" Then
            MDIParent1.mnu_Opening_Textile_Closing_StockValue.Enabled = False
            MDIParent1.mnu_closing_stock_value_entry.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Cloth_Order_Indent_Opening = "" Then MDIParent1.mnu_Opening_ClothSales_Order.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Cloth_Delivery_opening = "" Then MDIParent1.mnu_Opening_Cloth_Delivery.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Piece_Opening = "" Then MDIParent1.mnu_Opening_Textile_PieceOpening.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Bale_Opening = "" Then MDIParent1.mnu_Opening_Textile_BaleOpening.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Loom_Opening = "" Then MDIParent1.mnu_Opening_Textile_LoomOpening.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Unchecked_cloth_Opening = "" Then MDIParent1.mnu_Opening_Textile_UnCheckedClothOpening.Enabled = False

        ''*******************************************************************************************************************************************************************************

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Yarn_Purchase_Order_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_YarnsPo.Enabled = False
            MDIParent1.Mnu_Ownsort_yarn_po.Enabled = False
            MDIParent1.mnu_yarn_Po.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Yarn_Purchase_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_YarnPurchasee_GST.Enabled = False
            MDIParent1.mnu_Entry_Textile_YarnPurchase_Vat.Enabled = False
            MDIParent1.Mnu_Ownsort_yarn_Purchase.Enabled = False
            MDIParent1.mnu_yarn_purchase.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Yarn_Purchase_Receipt_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_YarnPurchaseReceipt.Enabled = False
            MDIParent1.mnu_new_Trading_yarn_Inward_Entry.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Yarn_Purchase_Return_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_YarnPurchaseeReturn_Main.Enabled = False
            MDIParent1.Mnu_Ownsort_Yarn_Purchase_Return.Enabled = False
            MDIParent1.mnu_yarn_purchase_retun.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Yarn_Sales_Order_Entry = "" Then
            MDIParent1.Mnu_Entry_Yarn_Sales_Order.Enabled = False
            MDIParent1.mnu_Yarn_sales_order.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Yarn_Purchase_Receipt_Entry = "" Then MDIParent1.mnu_Entry_Textile_YarnPurchaseReceipt.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Yarn_Purchase_Return_Entry = "" Then MDIParent1.mnu_Entry_Textile_YarnPurchaseeReturn_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.yarn_Delivery_Entry = "" Then MDIParent1.mnu_YarnSales_Delivery.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Yarn_Sales_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_Yarnsales_GST.Enabled = False
            MDIParent1.mnu_yarn_sales_Invoice.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Yarn_Sales_Entry_vat = "" Then MDIParent1.mnu_Entry_Textile_YarnsALES_Vat.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Yarn_Proforma_Sales_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_YarnsALES_Proforma.Enabled = False

        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Yarn_Sales_Return_Entry = "" Then MDIParent1.mnu_Entry_Yarn_Sales_Return_GST.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Yarn_test_Entry = "" Then MDIParent1.mnu_Entry_Textile_YarnsTEST.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Yarn_Purchase_Bill_Making_Entry = "" Then MDIParent1.mnu_Entry_Textile_YarnPurchase_Bill_Making_GST.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Pavu_Purchase_Entry = "" Then MDIParent1.mnu_Entry_Textile_PavuPurchase_GST.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Pavu_Sales_Entry = "" Then MDIParent1.mnu_Entry_Textile_PavuSales_GST.Enabled = False


        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Cloth_Purchase_Receipt_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_ClothPurchase_Receipt.Enabled = False
            MDIParent1.mnu_new_Trading_Cloth_Inward_Entry.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Cloth_Purchase_Checking_Entry = "" Then MDIParent1.mnu_Entry_Textile_ClothPurchase_Checking.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Cloth_Purchase_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_ClothPurchase_PurchaseEntry_VAT.Enabled = False
            MDIParent1.mnu_Entry_Textile_ClothPurchase_PurchaseEntry.Enabled = False
            MDIParent1.mnu_fabric_purchase.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Cloth_Purchase_offer_Entry = "" Then MDIParent1.mnu_Entry_Textile_ClothPurchase_Offer.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Cloth_Purchase_order_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_ClothPurchase_Order.Enabled = False
            MDIParent1.Mnu_fabric_Po.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Cloth_Purchase_Return_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_ClothPurchase_Return.Enabled = False
            MDIParent1.Mnu_fabric_purchase_return.Enabled = False
        End If




        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ClothSales_Order_Indent_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_ClothSales_OrderIndent.Enabled = False
            MDIParent1.Mnu_Ownsort_Sales_Order.Enabled = False
            MDIParent1.mnu_fabric_sales_order.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ClothSales_Cloth_Invoice_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_ClothSales_ClothInvoice_GST.Enabled = False
            MDIParent1.Mnu_Ownsort_Sales_Invoice_GST.Enabled = False
            MDIParent1.mnu_fabric_sales_Invoice.Enabled = False
        End If

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ClothSales_Cloth_Invoice_Entry_vat = "" Then MDIParent1.mnu_Entry_Textile_ClothSales_ClothInvoice_VAT.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ClothSales_Sales_Return_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_ClothSales_ClothSalesReturn_Main.Enabled = False
            MDIParent1.Mnu_Ownsort_Fabric_Sales_Return.Enabled = False
            MDIParent1.Mnu_fabric_Sales_return.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ClothSales_Cloth_Delivery_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_ClothSales_ClothDelivery.Enabled = False
            MDIParent1.Mnu_Ownsort_DC.Enabled = False
            MDIParent1.mnu_fabric_Delivery.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ClothSales_Delivery_Return_Entry = "" Then MDIParent1.mnu_Entry_Textile_ClothSales_ClothDeliveryReturn.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ClothSales_Proforma_Invoice_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_ClothSales_ProformaInvoice.Enabled = False
            MDIParent1.mnu_Textile_ClothSales_ProformaInvoice_Entry.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ClothSales_Buyer_offer_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_ClothSales_BuyerOfferEntry.Enabled = False
            MDIParent1.mnu_Ownsort_ClothSales_BuyerOfferEntry.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ClothSales_Piece_checking_Entry = "" Then MDIParent1.mnu_Entry_Textile_ClothSales_PieceChecking_Entry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ClothSales_Bale_Delivery_Entry = "" Then MDIParent1.mnu_Entry_Textile_ClothSales_Bale_Delivery_Entry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ClothSales_Roll_Packing_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_ClothSales_Roll_Packing.Enabled = False
            MDIParent1.mnu_Ownsort_ClothSales_Roll_Packing.Enabled = False
        End If



        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.EmptyBeam_Purchase_Entry = "" Then MDIParent1.mnu_Entry_Textile_emptybmPurchaseS.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.EmptyBeam_sales_Entry = "" Then MDIParent1.mnu_Entry_Textile_emptybmSales.Enabled = False



        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.General_Other_purchase_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_Purchase_GST.Enabled = False
            MDIParent1.mnu_Entry_Textile_OtherPurchase.Enabled = False
        End If

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.General_Other_Sales_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_Sales_GST.Enabled = False
            MDIParent1.mnu_Entry_Textile_OtherSales.Enabled = False
            MDIParent1.mnu_Accounts_Others_OtherSales_GST_Entry.Enabled = False
        End If

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Credit_note_Entry = "" Then MDIParent1.mnu_Entry_Textile_CreditNote_GST.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Debit_note_Entry = "" Then MDIParent1.mnu_Entry_Textile_DebitNote_GST.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.General_Delivery_Entry = "" Then MDIParent1.mnu_Entry_Textile_General_Delivery.Enabled = False
        '  If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Advance_payment = "" Then MDIParent1.mnu_Entry_Textile_Advance_GST.Enabled = False


        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Sizing_Yarn_Delivery_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_Sizing_YarnDelivery.Enabled = False
            MDIParent1.Mnu_Ownsort_yarn_Delivery.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Sizing_Yarn_Receipt_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_Sizing_YarnReceipt.Enabled = False
            MDIParent1.Mnu_Ownsort_yarn_Inward.Enabled = False
            MDIParent1.Mnu_Ownsort_Yarn_Return_From_Sizing.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Sizing_Beam_Close_Entry = "" Then MDIParent1.mnu_Entry_Textile_Sizing_BeamClose.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Sizing_Yarn_Receipt_By_Sizing = "" Then
            MDIParent1.mnu_Entry_Textile_Sizing_YarnReceipt_by_Sizing.Enabled = False
            'MDIParent1.Mnu_Ownsort_Yarn_Return_From_Sizing.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Sizing_Specification_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_Sizing_SizingSpecification_Main.Enabled = False
            MDIParent1.Mnu_Ownsort_Sizing_Set_Report.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Sizing_pavu_Receipt_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_Sizing_PavuReceipt.Enabled = False
            MDIParent1.Mnu_Ownsort_Warp_Receipt.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Sizing_Pavu_Delivery_From_Sizing_Entry = "" Then MDIParent1.mnu_Entry_Textile_Sizing_PavuDelivery_From_Sizing.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Sizing_Yarn_Delivery_From_Sizing_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_Sizing_YarnDelivery_From_Sizing.Enabled = False
            MDIParent1.Mnu_Ownsort_yarn_Delivery.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Rewinding_Delivery_Entry = "" Then MDIParent1.mnu_Entry_Textile_Rewinding_Delivery.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Rewinding_Receipt_Entry = "" Then MDIParent1.mnu_Entry_Textile_Rewinding_receipt.Enabled = False



        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Weaver_Pavu_Delivery_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_Weaver_PavuDelivery.Enabled = False
            MDIParent1.mnu_Vendor_Entry_Vendor_Pavu_Delivery.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Weaver_Yarn_Delivery_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_Weaver_YarnDelivery.Enabled = False
            MDIParent1.mnu_Vendor_Entry_Vendor_Yarn_Delivery.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Weaver_Pavu_Rceipt_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_Weaver_PavuReceipt.Enabled = False
            MDIParent1.mnu_Vendor_Entry_Vendor_Pavu_Receipt.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Weaver_Yarn_Rceipt_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_Weaver_YarnReceipt.Enabled = False
            MDIParent1.mnu_Vendor_Entry_Vendor_Yarn_Receipt.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Weaver_KuraiPavu_Rceipt_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_Weaver_KuraiPavuReceipt.Enabled = False
            MDIParent1.mnu_Vendor_Entry_Vendor_KuraiPavu_Receipt.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Weaver_Piece_Checking_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_Weaver_PiecChecking.Enabled = False
            MDIParent1.mnu_Vendor_Entry_Vendor_Piece_Checking.Enabled = False
        End If

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Weaver_Cloth_Rceipt_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_Weaver_ClothReceipt.Enabled = False
            MDIParent1.mnu_Vendor_Entry_Vendor_Cloth_Receipt.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Weaver_ClothReceipt_and_PieceChecking_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_Weaver_ClothReceipt_Cum_PieceChecking.Enabled = False
            MDIParent1.mnu_Vendor_Entry_Vendor_Cloth_Receipt_and_Checking.Enabled = False
        End If

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Weaver_Debit_Entry = "" Then
            MDIParent1.mnu_Entry_Weaver_Debit_Credit_Note_Entry.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Weaver_Wages_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_Weaver_Wages_GST.Enabled = False
            MDIParent1.mnu_Vendor_Entry_Vendor_Weaver_Wages_GST.Enabled = False
            MDIParent1.mnu_Vendor_Entry_Vendor_Weaver_Wages_VAT.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Weaver_Weaving_Jobwork_Bill_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_Wages_For_InHouse.Enabled = False
            MDIParent1.mnu_Vendor_Entry_Vendor_Wages_for_Inhouse.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Weaver_Slevedge_Cone_Invoice_Entry = "" Then MDIParent1.mnu_entry_Weaver_Slevage_Cone_Invoice_Entry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Weaver_bobin_delivery_Entry = "" Then MDIParent1.mnu_Entry_Textile_Weaver_BobinDelivery.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Weaver_bobin_Return_Entry = "" Then MDIParent1.mnu_Entry_Textile_Weaver_BobinReturn.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Weaver_Advance_payment = "" Then MDIParent1.mnu_entry_Weaver_Advance_Payment_Entry.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Lot_Approval_Entry = "" Then MDIParent1.Mnu_Entry_Lot_Approval_Entry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Weaver_Lot_Checking_Planing_Entry = "" Then MDIParent1.Mnu_Entry_Lot_Checking_Plan_Entry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Lot_Allotment_Details = "" Then MDIParent1.Mnu_Entry_Lot_Allotmentl_Entry.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Weaver_Piece_Approval_Entry = "" Then MDIParent1.Mnu_Entry_App_Weaver_CheckedPiece_Approval_Entry.Enabled = False

        'If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Bobin_Purchase_Entry = "" Then MDIParent1.mnu_Entry_Textile_Bobin_Purchase.Enabled = False
        'If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Bobin_Return_Entry = "" Then MDIParent1.mnu_Entry_BobinReturn.Enabled = False
        'If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Empty_Bobin_Receipt_Entry = "" Then MDIParent1.mnu_Entry_Textile_Bobin_EmptyBobin_Receipt.Enabled = False
        'If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Empty_Bobin_Delivery_Entry = "" Then MDIParent1.mnu_Entry_Textile_Bobin_EmptyBobin_delivery.Enabled = False


        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PavuYarn_Delivery_Entry = "" Then MDIParent1.mnu_Entry_Textile_PavuYarn_delivery.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PavuYarn_Receipt_Entry = "" Then MDIParent1.mnu_Entry_Textile_PavuYarn_Receipt.Enabled = False



        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Empty_BeamBagCone_Delivery_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_EmptyBeamBagCone_delivery.Enabled = False
            MDIParent1.Mnu_Ownsort_EmptyBeam_Entry.Enabled = False

        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Empty_BeamBagCone_Receipt_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_EmptyBeamBagCone_Receipt.Enabled = False
            MDIParent1.Mnu_Ownsort_Warp_Beam_Return.Enabled = False
            MDIParent1.mnu_Vendor_Entry_Vendor_EmptyBeam_Receipt.Enabled = False
        End If


        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Packing_slip_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_PackingSlip_Common_Entry.Enabled = False
            MDIParent1.Mnu_Ownsort_fabric_Packing_Slip.Enabled = False
            MDIParent1.Mnu_New_Jobwork_Packing_Slip.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Party_Amount_Receipt_Entry = "" Then MDIParent1.mnu_Entry_Textile_Party_Amount_Receipt.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Cheque_return_Entry = "" Then MDIParent1.mnu_Entry_Textile_ChequeReturn.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Weaver_payment_Entry = "" Then MDIParent1.mnu_Entry_Textile_WeaverPayment.Enabled = False




        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Yarn_Excess_Short_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_Yarn_ExcessShort.Enabled = False
            MDIParent1.mnu_Yarn_excess_short.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Pavu_Excess_Short_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_Pavu_ExcessShort.Enabled = False
            MDIParent1.mnu_Pavu_excess_short.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Cloth_Excess_Short_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_Cloth_ExcessShort.Enabled = False
            MDIParent1.mnu_cloth_excess_short.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Piece_Excess_Short_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_Piece_ExcessShort.Enabled = False
            MDIParent1.mnu_Piece_excess_short.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.EmptyBeam_Excess_Short_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_EmptyBeam_ExcessShort.Enabled = False
            MDIParent1.mnu_Empty_Beam_excess_short.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Piece_joining_Entry = "" Then MDIParent1.mnu_Entry_Textile_Piece_Joining.Enabled = False



        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Yarn_Transfer_Entry = "" Then MDIParent1.mnu_Entry_Textile_Yarn_Transfer.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Pavu_Transfer_Entry = "" Then MDIParent1.mnu_Entry_Textile_Pavu_Transfer.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Cloth_Transfer_Entry = "" Then MDIParent1.mnu_Entry_Textile_Cloth_Transfer.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Piece_Transfer_Entry = "" Then MDIParent1.mnu_Entry_Textile_Piece_Transfer.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Pavu_Transfer_Beam_wise_Entry = "" Then MDIParent1.mnu_Entry_Textile_PavuTransfer_BeamWise.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Bale_Transfer_Entry = "" Then MDIParent1.mnu_Entry_Textile_Bale_Transfer.Enabled = False

        'If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Bank_Party = "" Then MDIParent1.mnu_Entry_Bank_Party_Entry.Enabled = False


        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Costing_Entry = "" Then MDIParent1.mnu_Entry_Textile_Costing.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Processing_Job_Order = "" Then MDIParent1.mnu_Entry_Textile_ProcessingJobOrder.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Fabric_Delivery_To_Processing = "" Then MDIParent1.mnu_Entry_Textile_ProcessingDelivery.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Processed_Fabric_Receipt_From_Processing = "" Then MDIParent1.mnu_Entry_Textile_ProcessingReceipt.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Processed_Fabric_Inspection = "" Then MDIParent1.mnu_Entry_Textile_Processing_Processed_Fabric_Inspection.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Processing_Bill_Making = "" Then MDIParent1.mnu_Entry_Textile_ProcessingBillMaking.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Fabric_Return_From_Processing = "" Then MDIParent1.mnu_Entry_Textile_ProcessingReturn.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Processed_Fabric_Invoice_Gst = "" Then MDIParent1.mnu_Entry_Textile_Processing_ProcessedFabric_Sales_Invoice_GST.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Processed_Fabric_Invoice_Vat = "" Then MDIParent1.mnu_Entry_Textile_Processing_ProcessedFabric_Sales_Invoice.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Processed_Waste_Delivery = "" Then MDIParent1.mnu_Entry_Textile_Processing_ProcessedFabric_Waste_Delivery.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_JobCard_For_Sewing = "" Then MDIParent1.mnu_Entry_Textile_Sewing_JobCard_For_Sewing.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Fabric_Delivery_To_Sewing = "" Then MDIParent1.mnu_Entry_Textile_Sewing_FabricDelivery_To_Sewing.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Finished_Product_Receipt_From_Sewing = "" Then MDIParent1.mnu_Entry_Textile_Sewing_FinishedProduct_From_Sewing.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Yarn_Delivery_To_Processing = "" Then MDIParent1.mnu_Entry_Textile_YarnProcessing_YarnDelivery.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Yarn_Receipt_From_Processing = "" Then MDIParent1.mnu_Entry_Textile_YarnProcessing_YarnReceipt.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Bill_Making = "" Then MDIParent1.mnu_Entry_Textile_YarnProcessing_YarnBillmaking.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Spinning_Yarn_Delivery = "" Then MDIParent1.mnu_Entry_Textile_Spinning_YarnDelivery.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Spinning_Yarn_Receipt = "" Then MDIParent1.mnu_Entry_Textile_Spinning_YarnReceipt.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Spinning_Yarn_Bill_Making = "" Then MDIParent1.mnu_Entry_Textile_Spinning_YarnBillmaking.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Doubling_Yarn_Delivery = "" Then MDIParent1.mnu_Entry_Textile_Doubling_YarnDelivery.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Doubling_Yarn_Receipt = "" Then MDIParent1.mnu_Entry_Textile_Doubling_YarnReceipt.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Doubling_Yarn_Bill_Making = "" Then MDIParent1.mnu_Entry_Textile_Doubling_YarnBillmaking.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Reeling_Yarn_Delivery = "" Then MDIParent1.mnu_Entry_Textile_Reeling_YarnDelivery.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Reeling_Yarn_Receipt = "" Then MDIParent1.mnu_Entry_Textile_Reeling_YarnReceipt.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Reeling_Yarn_Bill_Making = "" Then MDIParent1.mnu_Entry_Textile_Reeling_YarnBillmaking.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Cotton_Purchase_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_Cotton_Purchase_Entry.Enabled = False
            MDIParent1.mnu_Entry_Textile_YarnProcessing_CottonPurchase.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Cotton_Sales_Entry = "" Then MDIParent1.mnu_Entry_Textile_Cotton_Sales_Entry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Fibre_Sales_Order = "" Then MDIParent1.mnu_Entry_Textile_Fibre_Sales_Order_GST.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Entry_Fibre_Sales_Invoice = "" Then MDIParent1.mnu_Entry_Textile_Fibre_Sales_GST.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Crimp_entry = "" Then MDIParent1.mnu_entry_Weaver_Crimp_Consumption_Entry.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Bobin_purchase_entry = "" Then MDIParent1.mnu_Entry_Textile_Bobin_Purchase.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Bobin_Sales_order_Entry = "" Then MDIParent1.mnu_Entry_Textile_Bobin_Bobin_Sales_Order_Entry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Bobin_Production_Entry = "" Then MDIParent1.mnu_Entry_Textile_Bobin_Production.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Jari_production_Entry = "" Then MDIParent1.mnu_Entry_Textile_Jari_Production.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.VanTrip_Entry = "" Then MDIParent1.mnu_Entry_Van_Trip_Entry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Weaver_Cloth_Return_Delivery = "" Then MDIParent1.mnu_entry_Weaver_Cloth_Return_Delivery_Entry.Enabled = False

        '*******************************************************************************************************************************************************************************

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Bobin_Sales_delivery_Entry = "" Then MDIParent1.mnu_Entry_Textile_Bobin_Jari_Kuri_DelveryGST.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Bobin_Sales_delivery_Return_Entry = "" Then MDIParent1.mnu_Entry_Textile_Bobin_Jari_Kuri_DelveryReturn.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Jari_Sales_delivery_Entry = "" Then MDIParent1.mnu_Entry_Textile_JariSalesInvoice_GST.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Jari_Sales_Return_Entry = "" Then MDIParent1.mnu_Entry_Textile_JariSalesRetrurn.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Empty_Bobin_Delivery = "" Then MDIParent1.mnu_Entry_Textile_Bobin_EmptyBobin_delivery.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Empty_Bobin_Receipt = "" Then MDIParent1.mnu_Entry_Textile_Bobin_EmptyBobin_Receipt.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Proforma_bobin_sales = "" Then MDIParent1.mnu_Entry_Textile_Bobin_ProformaBobin_Sales.Enabled = False


        ''*******************************************************************************************************************************************************************************

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Store_purchase_Inward_entry = "" Then MDIParent1.mnu_Entry_Purchase_InWard_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Store_purchase_Order_entry = "" Then MDIParent1.mnu_Entry_PurchaseOrder.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Store_Item_Issue_To_machine = "" Then MDIParent1.mnu_Entry_ItemIssue.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Store_Item_Return_from_Machine = "" Then MDIParent1.mnu_Entry_ItemReturn.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Store_Item_Delivery_Entry = "" Then MDIParent1.mnu_Entry_ItemDelivery.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Store_Item_Receipt_Entry = "" Then MDIParent1.mnu_Entry_ItemReceipt.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Store_Service_Delivery_Entry = "" Then MDIParent1.mnu_Entry_ServiceDelivery.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Store_Service_Receipt_Entry = "" Then MDIParent1.mnu_Entry_ServiceReceipt.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Stores_gate_Pass_Entry = "" Then MDIParent1.mnu_Entry_GatePass.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Stores_Item_Excess_Short_Entry = "" Then MDIParent1.mnu_Entry_Item_ExcessShort.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Stores_Dispose_Entry = "" Then MDIParent1.mnu_Entry_DisposeEntry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Stores_Oil_Service_Entry = "" Then MDIParent1.mnu_Entry_MachineOilService.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Store_purchase_Return_entry = "" Then MDIParent1.mnu_Entry_PurchaseReturn.Enabled = False


        ''*******************************************************************************************************************************************************************************
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Voucher_Entry = "" Then MDIParent1.mnu_Voucher_Main.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_GroupLedger = "" Then
            MDIParent1.mnu_Accounts_GroupLedger.Enabled = False
            MDIParent1.mnu_Accounts_GroupLedger_AsOnDate.Enabled = False
            MDIParent1.mnu_Accounts_GroupLedger_Grid.Enabled = False
        End If

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_DayBook = "" Then MDIParent1.mnu_Accounts_DayBook.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_AllLedger = "" Then MDIParent1.mnu_Accounts_AllLedger.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Ledger = "" Then
            MDIParent1.mnu_Accounts_SingleLedger_DateWise.Enabled = False
            MDIParent1.mnu_Accounts_SingleLedger_ModuleWise.Enabled = False
            MDIParent1.mnu_Accounts_SingleLedger_MonthWise.Enabled = False
            MDIParent1.mnu_Accounts_SingleLedger_LedgerWise.Enabled = False
            MDIParent1.mnu_Accounts_SingleLedgerDateWise_Grid.Enabled = False
        End If

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_TB = "" Then
            MDIParent1.mnu_Accounts_OpeningTB.Enabled = False
            MDIParent1.mnu_Accounts_GeneralTB.Enabled = False
            MDIParent1.mnu_Accounts_GroupTB.Enabled = False
            MDIParent1.mnu_Accounts_FinalTB.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Profit_Loss = "" Then MDIParent1.mnu_Accounts_ProfitLossAc.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Ledger_with_DueDays = "" Then MDIParent1.mnu_Accounts_SingleLedger_With_DueDays.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_BalanceSheet = "" Then MDIParent1.mnu_Accounts_BalanceSheet.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_CustomerBills = "" Then MDIParent1.mnu_Accounts_CustomerBills_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_AgentBills = "" Then MDIParent1.mnu_Accounts_AgentBills_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Agentcommission = "" Then MDIParent1.mnu_Accounts_AgentCommission_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Accounts_Receivable_Report = "" Then MDIParent1.mnu_Accounts_PartyOutStanding_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Accounts_Payable_Report = "" Then MDIParent1.mnu_Accounts_PurchasePartyBalanceBillwise.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_VoucherRegister = "" Then
            MDIParent1.mnu_Accounts_VoucherRegisters_Main.Enabled = False
            MDIParent1.mnu_Accounts_VoucherRegisters_BankPaymentRegisters.Enabled = False
            MDIParent1.mnu_Accounts_VoucherRegisters_BankReceiptRegisters.Enabled = False
            MDIParent1.mnu_Accounts_VoucherRegisters_CashPaymentRegisters.Enabled = False
            MDIParent1.mnu_Accounts_VoucherRegisters_CashReceiptRegisters.Enabled = False
            MDIParent1.mnu_Accounts_VoucherRegisters_ContraRegisters.Enabled = False
            MDIParent1.mnu_Accounts_VoucherRegisters_CreditNoteRegisters.Enabled = False
            MDIParent1.mnu_Accounts_VoucherRegisters_DebitNoteRegisters.Enabled = False
            MDIParent1.mnu_Accounts_VoucherRegisters_JournalRegisters.Enabled = False
            MDIParent1.mnu_Accounts_VoucherRegisters_PettiCashRegisters.Enabled = False
            MDIParent1.mnu_Accounts_Voucher_Payment_Register.Enabled = False
            MDIParent1.mnu_Accounts_Voucher_Receipt_Register.Enabled = False

        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Party_Sales_Register_Invoice = "" Then MDIParent1.mnu_Accounts_Processed_Fabric_Invoice.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Sales_party_Ledger_Print = "" Then MDIParent1.mnu_Accounts_Single_Ledger_Print.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Purchase_Purchase_Entry_Gst = "" Then MDIParent1.PurchaseEntryToolStripMenuItem.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Purchase_Purchase_Return = "" Then MDIParent1.mnu_Billing_purchase_Return_entry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Purchase_Payment_Bank = "" Then MDIParent1.Mnu_Billing_payment_Bank.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Purchase_Payment_Cash = "" Then MDIParent1.Mnu_Billing_Payment_Cash.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Purchase_Debit_Note_Entry = "" Then MDIParent1.mnu_Biling_Debit_Note.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Purchase_Date_Wise_Ledger = "" Then MDIParent1.mnu_billing_Date_Wise_ledger.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Purchase_Outstanding_Pending_Dues_Date_Wise = "" Then MDIParent1.mnu_Billing_Outstanding_Pending_Dues_Date_Wise.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Purchase_Group_Ledger = "" Then MDIParent1.mnu_Billing_Group_Ledger.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Purchase_Item_Excess_Short_Entry = "" Then MDIParent1.mnu_Billing_Item_Excess_Short.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Sales_Sales_Entry_Gst = "" Then MDIParent1.mnu_billing_Entry_SalesEntry_GST.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Sales_Sales_Return = "" Then MDIParent1.mnu_Billing_Entry_SalesReturnEntry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Sales_Payment_Receipt_Bank = "" Then MDIParent1.mnu_billing_Receipt_Bank.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Sales_Payment_Receipt_Cash = "" Then MDIParent1.mnu_billing_Receipt_Cash.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Sales_Credit_Note_Entry = "" Then MDIParent1.mnu_billing_Credit_note.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Sales_Date_Wise_Ledger = "" Then MDIParent1.ToolStripMenuItem117.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Sales_Outstanding_Pending_Dues_Date_Wise = "" Then MDIParent1.ToolStripMenuItem128.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Sales_Outstanding_Pending_Party_Wise = "" Then MDIParent1.Mnu_Outstanding_Pending_Partywise.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Sales_Group_Ledger = "" Then MDIParent1.ToolStripMenuItem129.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Others_Journal_Entry = "" Then MDIParent1.mnu_billing_journal_Entry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Others_Contra_Entry = "" Then MDIParent1.mnu_billing_Contra_Entry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Accounts_Others_Petty_Cash = "" Then MDIParent1.mnu_billing_Petti_Cash.Enabled = False




        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Report_Master = "" Then
            MDIParent1.mnu_Report_Textile_Masters_Main.Enabled = False
            MDIParent1.mnu_New_master_Reports_Main.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Report_Register = "" Then MDIParent1.mnu_Report_Textile_Register_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Report_Sizing_Stock = "" Then MDIParent1.mnu_Report_Textile_Sizing_Stock_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Report_Rewinding_Stock = "" Then
            MDIParent1.mnu_Report_Textile_RewindingStock_Main.Enabled = False
            MDIParent1.ToolStripMenuItem116.Enabled = False '--------REWINDIG STOCK-----------'
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Report_Weaver_Stock = "" Then
            MDIParent1.mnu_Report_Textile_WeaverStock_Main.Enabled = False
            MDIParent1.Mnu_MIS_Reports_Vendor_Report_main.Enabled = False
        End If

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Report_Godown_Stock = "" Then MDIParent1.mnu_Report_Textile_GodownStock_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Report_Day_Transaction_Details = "" Then MDIParent1.mnu_Report_Textile_Day_Transaction_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Report_Cloth_Invoice_Pending = "" Then MDIParent1.mnu_Report_Textile_ClothDeliveryPending.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Report_Cloth_Sales_Order_Pending = "" Then MDIParent1.mnu_Report_Textile_ClothOrderIndent_Pending_Main.Enabled = False


        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Report_Annexure = "" Then MDIParent1.mnu_Report_Textile_AnnexureReport_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Report_TDS = "" Then
            MDIParent1.mnu_Report_Textile_TDSReport_Main.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Report_TCS = "" Then MDIParent1.mnu_Reports_Textile_TCS_Report_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Report_GST_return = "" Then MDIParent1.mnu_Report_GST_Return_Reports.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Report_All_Statements = "" Then MDIParent1.mnu_Report_Textile_All_StockStatement.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Report_Cotton_Reports = "" Then MDIParent1.mnu_Report_Textile_CottonReport_Main1.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Report_Van_Trip = "" Then MDIParent1.mnu_Reports_VanTrip_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Report_Stock_Value = "" Then MDIParent1.mnu_Report_Textile_StockValue.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Report_Processing_Stock = "" Then MDIParent1.mnu_Report_Textile_Processing_Stock_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Report_Sewing = "" Then MDIParent1.mnu_Report_Textile_Sewing_Stock_Main.Enabled = False

        ''*******************************************************************************************************************************************************************************
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OWNSORT_REPORTS_PURCHASE_ORDER = "" Then
            MDIParent1.Mnu_OwnSort_Reports_Purchase_Order.Enabled = False
            MDIParent1.mnu_trading_Report_Po.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OWNSORT_REPORTS_SALES_ORDER = "" Then
            MDIParent1.Mnu_OwnSort_Reports_SalesOrder.Enabled = False
            MDIParent1.mnu_trading_Reports_Sales_order.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OWNSORT_REPORTS_DELIVERY_CHALLAN = "" Then
            MDIParent1.Mnu_OwnSort_Reports_Delivery_Challan.Enabled = False
            MDIParent1.mnu_trading_reports_Dc.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OWNSORT_REPORTS_PACKING_LIST = "" Then MDIParent1.Mnu_OwnSort_Reports_Packing_list.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OWNSORT_REPORTS_SALES_INVOICE = "" Then MDIParent1.Mnu_OwnSort_Reports_Sales_Invoice.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OWNSORT_REPORTS_YARN_PURCHASE_REGISTER = "" Then MDIParent1.Mnu_OwnSort_Reports_Yarn_Purchase_Register.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OWNSORT_REPORTS_YARN_INWARD = "" Then MDIParent1.Mnu_OwnSort_Reports_Yarn_Inward.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OWNSORT_REPORTS_YARN_OUTWARD = "" Then MDIParent1.Mnu_OwnSort_Reports_Yarn_Outward.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OWNSORT_REPORTS_EMPTY_BEAM_DELIVERY = "" Then MDIParent1.Mnu_OwnSort_Reports_Empty_Beam_Delivery.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OWNSORT_REPORTS_WARP_RECEIPT = "" Then MDIParent1.Mnu_OwnSort_Reports_Pavu_receipt.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OWNSORT_REPORTS_SIZING_SET_REPORT = "" Then MDIParent1.Mnu_OwnSort_Reports_Sizing_report.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OWNSORT_REPORTS_WARP_BEAM_LOADING_REGISTER = "" Then MDIParent1.Mnu_OwnSort_Reports_Warp_Beam_Loading_Register.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OWNSORT_REPORTS_PIECE_DOFFING_REGISTER = "" Then MDIParent1.Mnu_OwnSort_Reports_Piece_Doffing_Register.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OWNSORT_REPORTS_WARP_BEAM_RUNOUT_REGISTER = "" Then MDIParent1.Mnu_OwnSort_Reports_Warp_Beam_RunOut_register.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OWNSORT_REPORTS_RETURN = "" Then MDIParent1.Mnu_OwnSort_Reports_Return.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OWNSORT_REPORTS_SIZED_BEAM_STOCK_ON_FLOOR = "" Then MDIParent1.mnu_new_Ownsort_Report_Textile_InHouse_SizedBeam_Stock_OnLoom.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OWNSORT_REPORTS_RUNNING_BEAM_DETAILS_ALL_LOOM = "" Then MDIParent1.mnu_new_Ownsort_Report_Textile_InHouse_RunningBeam_Details_AllLoom.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OWNSORT_REPORTS_WARP_LOADING_LOOM_WISE = "" Then MDIParent1.mnu_new_Ownsort_Report_Textile_InHouse_Production_Details.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OWNSORT_REPORTS_PIECE_CHECKING_REGISTER = "" Then MDIParent1.mnu_new_Ownsort_Report_Textile_InHouse_PieceChecking_Register.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OWNSORT_REPORTS_PRODUCTION_SUMMARY_LOOM_WISE = "" Then MDIParent1.mnu_new_Ownsort_Report_Textile_InHouse_Production_Summary_Loomwise.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OWNSORT_REPORTS_DAILY_FABRIC_STOCK = "" Then MDIParent1.mnu_new_Ownsort_Report_Textile_Daily_Fabric_Stock.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OWNSORT_REPORTS_DAILY_PRODUCTION_STOCK = "" Then MDIParent1.mnu_new_Ownsort_Report_Textile_Daily_Production_Stock.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TRADING_REPORTS_SALES_INVOICE = "" Then MDIParent1.mnu_trading_Reports_Sales_Invoice.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TRADING_REPORTS_PURCHASE_INVOICE = "" Then MDIParent1.mnu_trading_Reports_Purchase_Invoice.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TRADING_REPORTS_RECEIVED_REPORTS = "" Then MDIParent1.mnu_Trading_Reports_Received.Enabled = False

        ''*******************************************************************************************************************************************************************************
        'If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Report_stores = "" Then MDIParent1.mnu_Reports_Stores_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Fabric_Physical_Stock = "" Then MDIParent1.mnu_Master_Textile_Fabric_Physical_Stock_Entry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.master_Stores = "" Then MDIParent1.mnu_Master_Textile_Stores_Master_main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Packing_Slip2 = "" Then MDIParent1.mnu_Entry_Textile_PackingSlip_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Inhouse_Reports = "" Then MDIParent1.mnu_Report_Textile_InHouse_Main.Enabled = False

        ''*******************************************************************************************************************************************************************************
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_purchase_Entry = "" Then MDIParent1.mnu_Entry_PurchaseEntry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_purchase_Return_Entry = "" Then MDIParent1.mnu_Entry_PurchaseReturnEntry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Processing_Delivery_Entry = "" Then MDIParent1.mnu_Entry_ProcessingDelivery.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Processing_Receipt_Entry = "" Then MDIParent1.mnu_Entry_ProcessingReceipt.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Processing_Return_Entry = "" Then MDIParent1.mnu_Entry_ProcessingReturn.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Processing_Bill_Making_Entry = "" Then MDIParent1.mnu_Entry_ProcessingBillMaking.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_delivery_Entry = "" Then MDIParent1.mnu_Entry_DeliveryEntry_Floor_To_Rack.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Return_Entry = "" Then MDIParent1.mnu_Entry_ReturnEntry_Rack_To_Floor.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Set_Entry = "" Then MDIParent1.mnu_Entry_SetEntry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_UnSet_Entry = "" Then MDIParent1.mnu_Entry_UnSetEntry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Item_transfer_Entry = "" Then MDIParent1.mnu_Entry_ItemTransfer.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Packing_slip_Entry = "" Then
            MDIParent1.mnu_Entry_PackingSlip.Enabled = False
            'MDIParent1.Mnu_Ownsort_fabric_Packing_Slip.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Order_indent_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_Processing_Order_Entry.Enabled = False
            'MDIParent1.mnu_Ownsort_ClothSales_Roll_Packing.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Invoice_Entry = "" Then MDIParent1.mnu_Entry_Invoice_GST.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Cash_Sales_Entry = "" Then MDIParent1.mnu_Entry_CashSales.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Sales_return_Entry = "" Then MDIParent1.mnu_Entry_SalesReturn.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Proforma_Invoice_Entry = "" Then MDIParent1.mnu_Entry_Invoice_FP_Proforma_Invoice.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Shirt_bit_Entry = "" Then MDIParent1.mnu_Entry_ItemExcessShort.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Item_Excess_Short_Entry = "" Then MDIParent1.mnu_Shirting_Entry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Party_Amount_Receipt_Entry = "" Then MDIParent1.mnu_Entry_Party_AmountReceipt.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Cheque_return_Entry = "" Then MDIParent1.mnu_Entry_ChequeReturn.Enabled = False

        '================================================================================================================================================

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Ledger_Creation = "" Then MDIParent1.mnu_Master_LedgerCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Agent_Creation = "" Then MDIParent1.mnu_Master_AgentCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Transport_Creation = "" Then MDIParent1.mnu_Master_TransportCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Area_Creation = "" Then MDIParent1.mnu_Master_AreaCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Grey_Item_Creation = "" Then MDIParent1.mnu_Master_GreyItemCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Finished_Product_Creation = "" Then
            MDIParent1.mnu_Master_FinishedProductCreation.Enabled = False
            MDIParent1.mnu_Master_Textile_FinishedProduct_Creation.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Size_Creation = "" Then
            MDIParent1.mnu_Textile_Master_Size_Creation.Enabled = False
            MDIParent1.mnu_FP_Master_Garments_SizeCreation.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Item_Group_Creation = "" Then
            MDIParent1.mnu_Master_ItemGroupCreation.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Unit_Creation = "" Then MDIParent1.mnu_Master_UnitCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Product_Sales_Name_Creation = "" Then MDIParent1.mnu_Master_Textile_Processing_Product_SalesName.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Process_Creation = "" Then
            MDIParent1.mnu_Master_ProcessCreation.Enabled = False
            MDIParent1.mnu_Master_Textile_ProcessCreation.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Colour_Creation = "" Then MDIParent1.mnu_Master_ColourCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_LotNo_Creation = "" Then
            MDIParent1.mnu_Master_LotNo_Creation.Enabled = False
            MDIParent1.mnu_Master_Textile_LotCreation.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Article_Creation = "" Then MDIParent1.mnu_Master_Textile_ArticleCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Currency_Creation = "" Then MDIParent1.mnu_Master_Textile_Currency_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_RackNo_Creation = "" Then MDIParent1.mnu_Master_RackNo_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_Packing_Type_Creation = "" Then
            MDIParent1.mnu_Master_Packingtype_Creation.Enabled = False

        End If

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Packing_Type_Creation = "" Then

            MDIParent1.mnu_Master_OE_PackingType_Creation.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.FP_user_Creation = "" Then MDIParent1.mnu_FP_Master_UserCreation.Enabled = False



        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Inhouse_Beam_knotting_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_InHouse_BeamKnotting.Enabled = False
            MDIParent1.Mnu_Ownsort_Warp_Beam_Loading.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Inhouse_Doffing_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_InHouse_Doffing.Enabled = False
            MDIParent1.mnu_Entry_Textile_InHouse_Doffing.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Inhouse_Piece_Checking_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_InHouse_PieceChecking.Enabled = False
            MDIParent1.Mnu_Ownsort_fabric_Checking_Entry.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Inhouse_Doffing_and_PieceChecking_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_InHouse_Doffing_PieceChecking.Enabled = False
            MDIParent1.mnu_new_jobwork_Fabric_Doffing_Checking_Entry.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Inhouse_Beam_RunOut_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_InHouse_BeamRunOut.Enabled = False
            MDIParent1.Mnu_Ownsort_Warp_Beam_Run_out.Enabled = False
            MDIParent1.mnu_new_jobwork_Warp_Beam_Runout_Entry.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Inhouse_Beam_Close_Entry = "" Then MDIParent1.mnu_Entry_Textile_InHouse_BeamClose.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Inhouse_Weaving_Excess_Short_Entry = "" Then MDIParent1.mnu_Entry_Textile_Weaver_Weaving_ExcessShort_Yarn.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Inhouse_Sort_Change_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_InHouse_SortChange.Enabled = False
            MDIParent1.mnu_Ownsort_sort_change_entry.Enabled = False
            MDIParent1.Mnu_New_Jobwork_sort_change_entry.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Inhouse_Pavu_Delivery_Entry = "" Then MDIParent1.mnu_Entry_Textile_InHouse_Pavudelivery.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Inhouse_Yarn_Delivery_Entry = "" Then MDIParent1.mnu_Entry_Textile_InHouse_Yarndelivery.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Inhouse_Yarn_Receipt_Entry = "" Then MDIParent1.mnu_Entry_Textile_InHouse_PavuReceipt.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Inhouse_Pavu_Receipt_Entry = "" Then MDIParent1.mnu_Entry_Textile_InHouse_YarnReceipt.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Inhouse_Loom_Production_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_InHouse_lOOMpRODUCTION.Enabled = False
            MDIParent1.mnu_Ownsort_Daily_Production_entry_LoomWise.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Inhouse_Knotting_Bill_Entry = "" Then
            MDIParent1.mnu_Entry_Textile_InHouse_KnottingBill.Enabled = False
            MDIParent1.mnu_new_jobwork_Warp_Beam_Loading_Entry.Enabled = False
        End If


        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Jobwork_Production_Entry = "" Then MDIParent1.mnu_Entry_TexProc_Jobwork_Production.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Jobwork_Order_Entry = "" Then MDIParent1.mnu_Entry_TexProc_Order.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Jobwork_Pavu_Yarn_Receipt_Entry = "" Then
            MDIParent1.mnu_Entry_TexProc_PavuYarnReceipt.Enabled = False
            MDIParent1.mnu_new_jobwork_weft_Inward_Entry.Enabled = False
        End If

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Jobwork_Piece_Delivery_Entry = "" Then
            MDIParent1.mnu_Entry_TexProc_Jobwork_Delivery.Enabled = False
            MDIParent1.mnu_new_jobwork_Delivery_Challan_Entry.Enabled = False
        End If

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Jobwork_Piece_Inspection_Entry = "" Then
            MDIParent1.mnu_Entry_TexProc_Jobwork_Inspection.Enabled = False
            MDIParent1.mnu_new_jobwork_Inspection_Report_Entry.Enabled = False
        End If

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Jobwork_Conversion_Bill_Entry = "" Then
            MDIParent1.mnu_Entry_TexProc_Jobwork_ConversionBill.Enabled = False
            MDIParent1.mnu_new_jobwork_Jobwork_Invoice_Entry.Enabled = False
        End If

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Jobwork_Pavu_Yarn_Return_Delivery_Entry = "" Then
            MDIParent1.mnu_Entry_TexProc_PavuYarnReturn.Enabled = False
            MDIParent1.mnu_new_jobwork_Weft_Outward_Delivery_Entry.Enabled = False
        End If

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Jobwork_EmptyBeam_Return_Delivery_Entry = "" Then
            MDIParent1.mnu_Entry_TexProc_EmptyBeamReturn.Enabled = False
            MDIParent1.mnu_new_jobwork_Empty_Beam_Delivery.Enabled = False
        End If

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TEXTILE_JOBWORK_REGISTER_REPORT = "" Then
            MDIParent1.mnu_Report_Textile_JobWork_PavuYarnReceiptRegister.Enabled = False
            MDIParent1.mnu_Report_Textile_JobWork_PavuYarnReturnRegister.Enabled = False
            MDIParent1.mnu_Report_Textile_JobWork_ProductionRegister.Enabled = False
            MDIParent1.mnu_Report_Textile_JobWork_DeliveryRegister.Enabled = False
            MDIParent1.mnu_Report_Textile_JobWork_InspectionRegister.Enabled = False
            MDIParent1.mnu_Report_Textile_JobWork_ConversionBillRegister.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TEXTILE_JOBWORK_PENDING_REGISTER_REPORT = "" Then
            MDIParent1.mnu_Report_Textile_JobWork_JobOrder_Pending_Main.Enabled = False
            MDIParent1.mnu_Report_Textile_JobWork_PieceDelivery_Pending.Enabled = False
            MDIParent1.mnu_Report_Textile_JobWork_PieceInspection_Pending.Enabled = False
            MDIParent1.mnu_Report_Textile_JobWork_ConversionBill_Pending.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TEXTILE_JOBWORK_YARN_STOCK_REPORT = "" Then MDIParent1.mnu_Report_Textile_JobWork_YarnStock_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TEXTILE_JOBWORK_PAVU_STOCK_REPORT = "" Then MDIParent1.mnu_Report_Textile_JobWork_PavuStock_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TEXTILE_JOBWORK_EMPTYBEAM_STOCK_REPORT = "" Then MDIParent1.mnu_Report_Textile_JobWork_EmptyBeamStock_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TEXTILE_JOBWORK_EMPTYBAG_STOCK_REPORT = "" Then MDIParent1.mnu_Report_Textile_JobWork_EmptyBag_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TEXTILE_JOBWORK_EMPTYCONE_STOCK_REPORT = "" Then MDIParent1.mnu_Report_Textile_JobWork_EmptyCone_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TEXTILE_JOBWORK_ALL_STOCK_LEDGER_REPORT = "" Then MDIParent1.mnu_Report_Textile_JobWork_AllStockLedger.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TEXTILE_JOBWORK_ALL_STOCK_SUMMARY_REPORT = "" Then MDIParent1.mnu_Report_Textile_JobWork_AllStockSummary.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TEXTILE_JOBWORK_JOBWORKER_STOCK_STATEMENT_REPORT = "" Then MDIParent1.mnu_Report_Textile_JobWork_JobworkerStockStatement.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TEXTILE_JOBWORK_DAY_TRANSACTION_REPORT = "" Then MDIParent1.mnu_Report_JobWork_DayTransaction_Details.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TEXTILE_JOBWORK_RECONCILIATION_REPORT = "" Then
            MDIParent1.mnu_Report_JobWork_ReConcialization_Report.Enabled = False
            MDIParent1.mnu_new_Jobwork_Reports_Monthly_Reconcilation_Reports.Enabled = False
        End If

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TEXTILE_JOBWORK_DELIVERY_CHALLAN_REPORTS = "" Then MDIParent1.mnu_new_Jobwork_Reports_Delivery_Challan.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TEXTILE_JOBWORK_INVOICE_REPORT = "" Then MDIParent1.mnu_new_Jobwork_Reports_Invoice_Reports.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TEXTILE_JOBWORK_RECEIVED_REPORT = "" Then MDIParent1.mnu_new_Jobwork_Received_Reports.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TEXTILE_JOBWORK_SIZED_BEAM_STOCK_ON_FLOOR = "" Then MDIParent1.mnu_new_Jobwork_Report_Textile_InHouse_SizedBeam_Stock_OnLoom.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TEXTILE_JOBWORK_PRODUCTION_SUMMARY_LOOM_WISE = "" Then MDIParent1.mnu_new_Jobwork_Report_Textile_InHouse_ProductionSummary_Loomwise.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TEXTILE_JOBWORK_PIECE_CHECKING_REPORT = "" Then MDIParent1.mnu_new_jobwork_Report_Textile_InHouse_PieceChecking_Register.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TEXTILE_JOBWORK_BEAM_RUNOUT_REGISTER = "" Then MDIParent1.mnu_new_Jobwork_Report_Textile_InHouse_BeamRunOut_Register.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TEXTILE_JOBWORK_RUNNING_BEAM_DETAILS_ALL_LOOM = "" Then MDIParent1.mnu_new_Jobwork_Report_Textile_InHouse_RunningBeam_Details_AllLoom.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TEXTILE_JOBWORK_WARP_LOADING_LOOM_WISE = "" Then MDIParent1.mnu_new_Jobwork_Report_Textile_InHouse_Production_Details.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.TEXTILE_JOBWORK_VENDOR_GRADING_REPORT = "" Then MDIParent1.mnu_new_jobwork_Vendor_Grading_Report.Enabled = False

        '================================================================================================================================================

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Ledger_Creation = "" Then
            MDIParent1.mnu_Master_Sizing_Ledger_Creation.Enabled = False
            MDIParent1.mnu_master_OE_Ledger_Creation.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Spares_PurchaseParty_Creation = "" Then MDIParent1.mnu_master_Sizing_Spares_Purchase_Party_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Rewinding_Creation = "" Then MDIParent1.mnu_Master_Sizing_RewindingCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Godown_Creation = "" Then
            MDIParent1.mnu_Master_OE_Godown_Creation.Enabled = False
            MDIParent1.ToolStripMenuItem135.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Sizing_Delivery_Party_Creation = "" Then MDIParent1.mnu_Master_Sizing_Delivery_Party_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Vendor_Creation = "" Then MDIParent1.mnu_Master_Sizing_Vendor_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Firewood_PurchaseParty_Creation = "" Then MDIParent1.mnu_Master_Sizing_FirewoodCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Transport_Creation = "" Then MDIParent1.mnu_Master_Sizing_Transport_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Area_Creation = "" Then
            MDIParent1.mnu_Master_Sizing_Area_Creation.Enabled = False
            MDIParent1.mnu_master_OE_Area_Creation.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Account_Group_creation = "" Then
            MDIParent1.mnu_Master_Sizing_AccountsGroupCreation.Enabled = False
            MDIParent1.mnu_Master_OE_Group_Creation.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Count_Creation = "" Then MDIParent1.mnu_master_sizing_count_creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Mill_Creation = "" Then MDIParent1.mnu_Master_Sizing_MillCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Endscount_Creation = "" Then MDIParent1.mnu_Master_Sizing_Endscount_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Masters_Beam_Width_Creation = "" Then MDIParent1.mnu_master_sizing_Beamwidth_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Bag_Type_Creation = "" Then MDIParent1.mnu_Master_Sizing_BagTypeCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Cone_Type_Creation = "" Then
            MDIParent1.mnu_Master_OE_ConeType_Creation.Enabled = False
            MDIParent1.mnu_Master_Sizing_ConeTypeCreation.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Delivery_Address_Creation = "" Then MDIParent1.mnu_Master_OE_Delivery_Adress_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Sizing_Item_Creaion = "" Then MDIParent1.mnu_Master_Sizing_Item_Creaion.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ItemGroup_Creation = "" Then
            MDIParent1.mnu_Master_Sizing_ItemGroup_Creaion.Enabled = False
            MDIParent1.mnu_Master_OE_ItemGroup_Creation.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Unit_Creation = "" Then MDIParent1.mnu_Master_Sizing_Unit_Creaion.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Sizing_BeamNo_Creation = "" Then MDIParent1.mnu_master_Sizing_BeamNo_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Sizing_WasteCreation = "" Then MDIParent1.mnu_Master_Sizing_WasteCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Sizing_Spares_Creation = "" Then MDIParent1.mnu_Master_Sizing_Spares_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.SizingMachine_No_Creation = "" Then MDIParent1.mnu_Master_SizingMachine_No_Creation.Enabled = False
        'If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.GST_Account_Settings_Creation = "" Then MDIParent1.mnu_Master_Sizing_GST_Account_Settings_Creation.Enabled = False
        'If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Sizing_ZoneCreation = "" Then MDIParent1.mnu_Master_Sizing_ZoneCreation.Enabled = False
        'If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.sizing_Loading_unloading_rate_creation = "" Then MDIParent1.mnu_master_sizing_Loading_unloading_rate_creation.Enabled = False
        'If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Vehicle_Creation = "" Then MDIParent1.mnu_Master_Sizing_Vehicle_Creation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Loom_type_Creation = "" Then MDIParent1.mnu_Master_Sizing_LoomType_Creation.Enabled = False
        'If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.Shift_Creation = "" Then MDIParent1.mnu_master_Sizing_Shift_Creation.Enabled = False



        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_YARN_RECEIPT = "" Then MDIParent1.mnu_Entry_YarnReceipt_Entry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_EMPTYBEAM_RECEIPT = "" Then
            MDIParent1.mnu_Entry_EmptyBeamReceipt_Entry.Enabled = False
            'MDIParent1.Mnu_Ownsort_Warp_Beam_Return.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_SIZING_SPECIFICATION = "" Then MDIParent1.mnu_Entry_SizingModule_Sizing_Specification_MachineWise.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_STATEMENT = "" Then MDIParent1.mnu_Entry_Statement.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_INVOICE = "" Then MDIParent1.mnu_SizingSoft_Entry_Invoice_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CASHDISCOUNT = "" Then MDIParent1.mnu_Entry_CashDiscount.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_PAVU_DELIVERY = "" Then MDIParent1.mnu_Entry_Delivery_PavuDelivery.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_YARN_DELIVERY = "" Then MDIParent1.mnu_Entry_Delivery_YarnDelivery.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_EMPTY_BEAM_DELIVERY = "" Then
            MDIParent1.mnu_Entry_Delivery_Empty_Beam_Bag_Cone_Delivery.Enabled = False
            'MDIParent1.mnu_new_jobwork_Empty_Beam_Delivery.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ENTRY_SIZING_JOBWORK_KURAI_PAVU_RECEIPT = "" Then MDIParent1.mnu_Entry_Kuri_Pavu_Receipt.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_EMPTY_BEAM_BAG_EXCESS_SHORT = "" Then MDIParent1.mnu_Entry_Empty_Beam_Bag_Cone_ExcessShort.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_YARN_TRANSFER = "" Then MDIParent1.mnu_Entry_YarnTransfer.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_YARN_EXCESS_SHORT = "" Then MDIParent1.mnu_Entry_YarnExcessShort.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_PURCHASE_ORDER = "" Then MDIParent1.mnu_Entry_ChemicalPurchaseOrder.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_PURCHASE = "" Then MDIParent1.mnu_Entry_ChemicalPurchase_GST.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_PURCHASE_RETURN = "" Then MDIParent1.mnu_Entry_ChemicalPurchase_Return_GST.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_EXCESS_SHORT = "" Then MDIParent1.mnu_Entry_ChemicalExcessShort.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_WASTE_MATERIAL_SALES = "" Then MDIParent1.mnu_Entry_WasteSales.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_SPARES_PURCHASE = "" Then
            MDIParent1.mnu_Entry_Hardware_Purchase_GST.Enabled = False
            MDIParent1.mnu_Entry_Spares_Main.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_FIREWOOD_PURCHASE = "" Then MDIParent1.mnu_Entry_FireWood_Purchase.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_FIREWOOD_CONSUMPTION = "" Then MDIParent1.mnu_Entry_FireWood_COnsumption.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_GENERAL_DELIVERY = "" Then MDIParent1.mnu_SizingSoft_Entry_General_Delivery.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_EMPTY_BEAM_REGISTER = "" Then MDIParent1.mnu_Reports_EmptyBeam_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_EMPTY_BAGS_REGISTER = "" Then MDIParent1.mnu_Reports_EmptyBags_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_CONES_REGISTER = "" Then MDIParent1.mnu_Reports_Cones_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_YARN_REGISTER = "" Then MDIParent1.mnu_Reports_Yarn_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_PAVU_REGISTER = "" Then MDIParent1.mnu_Reports_Pavu_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_ALL_STOCK_LEDGER = "" Then MDIParent1.mnu_Reports_AllStock_Ledger.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_ALL_STOCK_SUMMARY = "" Then MDIParent1.mnu_Reports_AllStock_Summary.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_ALL_STOCK_STATEMENTS = "" Then MDIParent1.mnu_Reports_AllStock_Statement.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_PRODUCTION_REGISTER = "" Then MDIParent1.mnu_Reports_Production_Register_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_INVOICE_REGISTER = "" Then MDIParent1.mnu_Reports_Invoice_Register_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_CASH_DISCOUNT = "" Then MDIParent1.mnu_Reports_CashDiscount_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_CHEMICAL_REGISTER = "" Then MDIParent1.mnu_Reports_Chemical_Register_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_HARDWARE_PURCHASE = "" Then MDIParent1.mnu_Report_Hardware_Purchase_Register.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_FIREWOOD_PURCHASE = "" Then MDIParent1.mnu_Report_FireWood_Purchase_Register.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_FIREWOOD_CONSUMPTION_REGISTER = "" Then MDIParent1.mnu_Report_FireWood_Consumption_Register.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_WASTE_MATERIAL = "" Then MDIParent1.mnu_Reports_WasteMaterial_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_DAY_TRANSACTION = "" Then MDIParent1.mnu_Report_Day_Transaction_Register.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_GST_RETURN = "" Then MDIParent1.mnu_Reports_GSTR_Reports.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_TDS_REPORT = "" Then MDIParent1.mnu_Entry_Report_Tds_Report.Enabled = False



        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OEENTRY_COTTON_PURCHASE_ENTRY = "" Then MDIParent1.Mnu_Oe_Spinning_Cotton_purchase_Gst_Entry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OEENTRY_COTTON_PURCHASE_RETURN_ENTRY = "" Then MDIParent1.mnu_Oe_Spinning_Cotton_Purchase_Return_Entry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OEENTRY_MIXING_ENTRY = "" Then MDIParent1.Mnu_Oe_Spinning_Mixing_Entry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OEENTRY_PRODUCTION_ENTRY = "" Then MDIParent1.Mnu_Oe_Spinning_Production_Entry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OEENTRY_PACKING_ENTRY = "" Then MDIParent1.Mnu_Oe_Spinning_Packing_Entry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OEENTRY_ORDER_ENTRY = "" Then MDIParent1.mnu_Spinning_OE_Order_Entry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OEENTRY_DELIVERY_ENTRY = "" Then MDIParent1.mnu_Oe_Spinning_Cotton_Delivery_Entry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OEENTRY_INVOICE_ENTRY = "" Then MDIParent1.mnu_OE_SPinning_Entry_Invoice_GST.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OEENTRY_WASTE_SALES_ENTRY = "" Then MDIParent1.mnu_Oe_SPinning_Waste_Sales_GST.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OEENTRY_LOCAL_WASTE_SALES_ENTRY = "" Then MDIParent1.mnu_Oe_SPinning_Local_Waste_Sales.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OEENTRY_INVOICE_RETURN_ENTRY = "" Then MDIParent1.mnu_OE_Entry_Invoice_Return.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OEENTRY_DELIVERY_RETURN_ENTRY = "" Then MDIParent1.mnu_OE_SPinning_Entry_Delivery_Return.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OEENTRY_BORA_STRITCHING_ENTRY = "" Then MDIParent1.mnu_OE_SPinning_Entry_Bora_Stritching.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OEENTRY_REELING_DELIVERY_ENTRY = "" Then MDIParent1.mnu_OE_SPinning_Entry_Reeling_Delivery.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OEENTRY_REELING_RECEIPT_ENTRY = "" Then MDIParent1.mnu_OE_SPinning_Entry_Reeling_Receipt.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OEENTRY_STOCK_TRANSFER_ENTRY = "" Then MDIParent1.mnu_OE_SPinning_Entry_Stock_Transfer.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OESPINNING_REGISTER_REPORT = "" Then MDIParent1.mnu_OE_Reports_Register.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OESPINNING_COTTON_STOCK_REPORT = "" Then MDIParent1.mnu_OE_Reports_Cotton_Stock.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OESPINNING_MIXING_STOCK_REPORT = "" Then MDIParent1.mnu_Report_Mixing_Stock.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OESPINNING_BAG_YARN_STOCK_REPORT = "" Then MDIParent1.mnu_OE_Report_Bag_Yarn_Stock.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OESPINNING_LOOSE_YARN_STOCK_REPORT = "" Then MDIParent1.mnu_OE_Report_Loose_Yarn_Stock.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OESPINNING_REELING_STOCK_REPORT = "" Then MDIParent1.mnu_OE_Reports_Reeling_Stock.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OESPINNING_HANK_YARN_STOCK_REPORT = "" Then MDIParent1.mnu_OE_Reports_Hank_Yarn_Stock.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OESPINNING_WASTE_STOCK_REPORT = "" Then MDIParent1.mnu_OE_Report_Waste_Stock.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OESPINNING_YARN_STOCK_BAGNOWISE_STOCK_REPORT = "" Then MDIParent1.mnu_OE_Reports_Yarn_Stock_Bag_No_Wise.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OESPINNING_ALL_STOCK_SUMMARY_REPORT = "" Then MDIParent1.mnu_Report_All_Stock_Summary.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OESPINNING_COMMISSION_REGISTER_REPORT = "" Then MDIParent1.mnu_OE_Reports_Commission_Register.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OESPINNING_GSTR_1_REPORT = "" Then MDIParent1.mnu_OE_Reports_GSTR1.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OESPINNING_GSTR_2_REPORT = "" Then MDIParent1.mnu_OE_Reports_GSTR2.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OESPINNING_ORDER_PENDING_REPORT = "" Then MDIParent1.mnu_OE_Reports_Order_Pending.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OESPINNING_CARDING_STOCK_REPORT = "" Then MDIParent1.mnu_OE_Report_CardingStock.Enabled = False


        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OESPINNING_EMPTY_BOBIN_STOCK_DETAILS = "" Then MDIParent1.mnu_Report_OE_GodownStock_EmptyBobinStock_Details.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.OESPINNING_EMPTY_BOBIN_STOCK_SUMMARY = "" Then MDIParent1.mnu_Report_OE_GodownStock_EmptyBobinStock_Summary.Enabled = False


        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_ATTENDANCE = "" Then MDIParent1.mnu_Payroll_EmployeeAttendance.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PAYROLL_ENTRY_ATTENDANCE_LOG_FROM_MACHINE = "" Then MDIParent1.mnu_Entry_PayRoll_Employee_Attendance_Log_From_Machine.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_ATTENDANCE_FROM_MACHINE = "" Then MDIParent1.mnu_Entry_PayRoll_Employee_Attendance_From_Machine.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_TIMING_ADDITION = "" Then MDIParent1.mnu_Entry_Payroll_Employee_Timing_Addition.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_SALARY = "" Then MDIParent1.mnu_Payroll_EmployeeSalaryEntry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_SALARY_ADVANCE_PAYMENT = "" Then MDIParent1.mnu_Payroll_EmployeePaymentEntry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_ADVANCE_ADDITION = "" Then MDIParent1.mnu_Payroll_EmployeeDeductionEntry.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_CREATION = "" Then MDIParent1.mnu_PayRoll_EmployeeCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PAYROLL_ENTRY_CATEGORY_CREATION = "" Then MDIParent1.mnu_PayRoll_CategoryCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PAYROLL_ENTRY_SALARY_PAYMENT_TYPE = "" Then MDIParent1.mnu_PayRoll_SalaryPaymentCreation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_ADVANCE = "" Then MDIParent1.mnu_PayRoll_Employee_Advance_Opening_Entry.Enabled = False



        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PAYROLL_REPORT_SALARY_REGISTER = "" Then
            MDIParent1.mnu_New_Payroll_Reports_Sales_Register.Enabled = False
            MDIParent1.mnu_Reports_Payroll_Salary_Register.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PAYROLL_REPORT_NET_PAY_REGISTER = "" Then
            MDIParent1.mnu_New_Payroll_Reports_NetPay_Register.Enabled = False
            MDIParent1.mnu_Reports_Payroll_NetPay_Register.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PAYROLL_REPORT_ATTENDANCE_REGISTER = "" Then
            MDIParent1.mnu_New_Payroll_Reports_Attendance_Register.Enabled = False
            MDIParent1.mnu_Reports_Payroll_Attendance_Register.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PAYROLL_REPORT_ATTENDANCE_MONTHWISE_REGISTER = "" Then
            MDIParent1.mnu_New_Payroll_Reports_Attendance_monthwise_Register.Enabled = False
            MDIParent1.mnu_Reports_Payroll_Attendance_MothWise_Register.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PAYROLL_REPORT_EMPLOYEE_PAYMENT_REGISTER = "" Then
            MDIParent1.mnu_New_Payroll_Reports_Employee_Payment_Register.Enabled = False
            MDIParent1.mnu_Entry_Report_PayRoll_Employee_Payment_Register.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PAYROLL_REPORT_EMPLOYEE_DEDUCATION = "" Then
            MDIParent1.mnu_New_Payroll_Reports_Employee_deduction_Register.Enabled = False
            MDIParent1.mnu_Report_payRoll_Employee_deduction_Register.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PAYROLL_REPORT_EMPLOYEE_ACCOUNT_DETAILS = "" Then

            MDIParent1.mnu_New_Payroll_Reports_Employee_Account_Details.Enabled = False
            MDIParent1.mnu_Reports_Payroll_Accounts_Details.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PAYROLL_REPORT_EMPLOYEE_REGISTER = "" Then
            MDIParent1.mnu_New_Payroll_Reports_Employee_Register.Enabled = False
            MDIParent1.mnu_Reports_Payroll_Employee_Register.Enabled = False
        End If

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PAYROLL_REPORT_LEDGER_REPORT_ALL = "" Then
            MDIParent1.Mnu_Payroll_Report_All_Ledger.Enabled = False
            MDIParent1.mnu_Accounts_Other_Ledger_Statement.Enabled = False
        End If
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PAYROLL_REPORT_SALARY_LEDGER = "" Then MDIParent1.Mnu_Payroll_Report_Salary_Ledger.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PAYROLL_REPORT_ADVANCE_LEDGER = "" Then MDIParent1.Mnu_Payroll_Report_Advance_Ledger.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.PAYROLL_REPORT_DEPOSIT_LEDGER = "" Then MDIParent1.Mnu_Payroll_Report_Deposit_Ledger.Enabled = False

        '---------------------------------------------------------------------------------------------------------------------------------------------------------------------------'
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.GENERAL_REPORTS_EMPTY_BEAM_STOCK = "" Then MDIParent1.Mnu_General_Reports_Empty_Beam_Stock.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.GENERAL_REPORTS_YARN_STOCK_REPORTS = "" Then MDIParent1.Mnu_General_Reports_yarn_stock_main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.GENERAL_REPORTS_WARP_STOCK_REPORTS = "" Then MDIParent1.Mnu_General_Reports_Warp_Stock_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.GENERAL_REPORTS_FABRIC_STOCK_REPORTS = "" Then MDIParent1.Mnu_General_Reports_Fabric_Stock_main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.GENERAL_REPORTS_MONTHLY_PRODUCTION_REPORT = "" Then MDIParent1.Mnu_General_Reports_monthly_production_report.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.GENERAL_REPORTS_BEAM_TO_BEAM_RECONCILATION_REPORT = "" Then MDIParent1.Mnu_General_Reports_Beam_to_Beam_Reconcilation.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.GENERAL_REPORTS_BEAM_TO_BEAM_RECONCILATION_SETNO_WISE = "" Then MDIParent1.Mnu_General_Rep_Beam_To_Beam.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.GENERAL_REPORTS_INHOUSE = "" Then MDIParent1.Mnu_General_Reports_Inhouse.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.GENERAL_REPORTS_AGENT_REPORT = "" Then MDIParent1.Mnu_General_Report_Agent.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.GENERAL_REPORTS_GST_REPORT = "" Then MDIParent1.Mnu_General_Reports_GSTR.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.GENERAL_REPORTS_TCS_REPORT = "" Then MDIParent1.Mnu_General_Reports_TCS_main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.GENERAL_REPORTS_TDS_REPORT = "" Then MDIParent1.Mnu_General_Reports_TDS_MAin.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ACCOUNTS_PURCHASE_REGISTER = "" Then MDIParent1.LToolStripMenuItem.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.ACCOUNTS_SALES_REGISTER = "" Then MDIParent1.MAccountSalesRegisterToolStripMenuItem.Enabled = False
        '-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------'

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.REPORTS_STORES_MASTERS = "" Then MDIParent1.mnu_Reports_Masters_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.REPORTS_STORES_REGISTER = "" Then MDIParent1.mnu_Reports_Registers_Main.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.REPORTS_STORES_PURCHASE_ORDER_PENDING = "" Then MDIParent1.mnu_Reports_Purchase_Order_Pending.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.REPORTS_STORES_MONTHLY_ITEM_ISSUE_STATEMENT = "" Then MDIParent1.mnu_Reports_Monthly_Item_Issue_Statement.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.REPORTS_STORES_MONTHLY_ITEM_ISSUE_STATEMENT_ALL_LOOM = "" Then MDIParent1.mnu_Stores_Report_Monthly_Item_Issue_Statement_All_Loom.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.REPORTS_OIL_SERVICE_PENDING = "" Then MDIParent1.mnu_Reports_Oil_Service_Pending.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.REPORTS_STORES_NEW_ITEM_STOCK_DETAIL = "" Then MDIParent1.mnu_Reports_New_Item_Stock_Details.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.REPORTS_STORES_OLD_ITEM_STOCK_DETAILS_USABLE = "" Then MDIParent1.mnu_Reports_Old_Item_Stock_Details_Usable.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.REPORTS_STORES_OLD_ITEM_STOCK_DETAILS_SCRAP = "" Then MDIParent1.mnu_Reports_Old_Item_Stock_Details_Scrap.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.REPORTS_STORES_ITEM_STOCK_DETAILS_ALL = "" Then MDIParent1.mnu_Reports_Item_Stock_Details_All.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.REPORTS_STORES_NEW_ITEM_STOCK_SUMMARY = "" Then MDIParent1.mnu_Stores_Report_New_Item_Stock_Summary.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.REPORTS_STORES_OLD_ITEM_STOCK_SUMMARY_USABLE = "" Then MDIParent1.mnu_Stores_Report_Old_Item_Stock_Summary_Usable.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.REPORTS_STORES_OLD_ITEM_STOCK_SUMMARY_SCRAP = "" Then MDIParent1.mnu_Stores_Report__Old_Item_Stock_Summary_Scrap.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.REPORTS_STORES_ITEM_STOCK_SUMMARY_ALL = "" Then MDIParent1.mnu_Stores_Report_Item_Stock_Summary_All.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.REPORTS_STORES_ITEM_STOCK_VALUE = "" Then MDIParent1.mnu_Stores_Report_Item_Stock_Value.Enabled = False
        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.REPORTS_STORES_PURCHASE_PLANNING = "" Then MDIParent1.mnu_Stores_Report_Purchase_Planning_Report.Enabled = False


        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.REPORTS_STORES_SERVICE_RECEIPT_ITEM_PENDING = "" Then MDIParent1.mnu_Reports_Service_Item_Receipt_Pending.Enabled = False

        If Val(Common_Procedures.User.IdNo) <> 1 And User_Creation.chk_approved_sts.Checked = False Then Common_Procedures.settings.Approved_status = 0

        If Val(Common_Procedures.User.IdNo) <> 1 And Common_Procedures.UR.reports_user_modifications = "" Then
            MDIParent1.mnu_Reports_User_Modifications_Main.Enabled = False
            MDIParent1.Mnu_MIS_Reports_UserModification_Report.Enabled = False
        End If

    End Sub


    Public Shared Function UserRight_Check_Adding_TodayEntry_Status(ByVal User_Access_Type As String, ByVal vNewEntryDateValue As Date, ByRef vIS_ToDay_Entry As Boolean) As Boolean
        Dim vChk_AddEditDel_ToDay_STS As Boolean
        Dim vDys As Integer = 0

        UserRight_Check_Adding_TodayEntry_Status = True

        vIS_ToDay_Entry = False

        If IsNothing(vNewEntryDateValue) = False Then

            If IsDate(vNewEntryDateValue) = True Then

                vDys = DateDiff("d", vNewEntryDateValue, Common_Procedures.settings.Sdd)
                If vDys = 0 Then
                    vIS_ToDay_Entry = True
                End If

            End If

        End If


        If Val(Common_Procedures.User.IdNo) <> 1 Then

            If InStr(Trim(UCase(User_Access_Type)), "~L~") = 0 Then

                If InStr(Trim(UCase(User_Access_Type)), "~A~") = 0 Then

                    vChk_AddEditDel_ToDay_STS = False

                    If InStr(Trim(UCase(User_Access_Type)), "~ATD~") > 0 Or InStr(Trim(UCase(User_Access_Type)), "~ADDNDYS~") > 0 Then

                        If vDys = 0 Then
                            If InStr(Trim(UCase(User_Access_Type)), "~ATD~") > 0 Then
                                vChk_AddEditDel_ToDay_STS = True
                            End If

                        ElseIf vDys <= Val(Common_Procedures.User.ADD_LAST_n_DAYS) And vDys > 0 Then

                            If InStr(Trim(UCase(User_Access_Type)), "~ADDNDYS~") > 0 Then
                                vChk_AddEditDel_ToDay_STS = True

                            End If

                        End If

                        'If IsNothing(vNewEntryDateValue) = False Then

                        '    If IsDate(vNewEntryDateValue) = True Then

                        '        If DateDiff("d", vNewEntryDateValue, Common_Procedures.settings.Sdd) = 0 Then
                        '            vChk_AddEditDel_ToDay_STS = True
                        '        End If

                        '    End If

                        'End If

                    End If

                    UserRight_Check_Adding_TodayEntry_Status = vChk_AddEditDel_ToDay_STS

                End If

            End If

        End If



    End Function

    Public Shared Sub User_Modification_Updation(ByVal Cnn1 As SqlClient.SqlConnection, ByVal EntryType As String, ByVal EntryName As String, ByVal EntStatus As String, ByVal TableName As String, ByVal Pk_FldName As String, ByVal CompIdNo As Integer, ByVal Pk_Code As String, ByVal Pk_No As String, ByVal for_OrdBy As Single, ByVal Pk_Condition As String, ByVal Pk_SubCondition As String, ByVal Entry_OtherCondition As String, ByVal NewEntry_Status As Boolean, ByVal DelEntry_Status As Boolean, ByVal Detail_ColumnNames As String, ByVal Detail_PkColumn1Name As String, Optional ByVal UnUsed_Fld_Names As String = "", Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal Detail_PkColumn2Name As String = "")

        If Common_Procedures.settings.User_Modifications_Show_Status = 0 Then Exit Sub
        If Trim(UCase(Common_Procedures.ServerWindowsLogin)) = "ONLINE" Then
            Exit Sub
        End If

        Dim Cmd As New SqlClient.SqlCommand
        Dim Da As New SqlClient.SqlDataAdapter
        Dim DtNew As New DataTable
        Dim DtOld As New DataTable
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim I As Integer = 0, J As Integer = 0, K As Integer = 0
        Dim c As String = "", Ent_Cd As String = ""
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim MdfDet As String = ""
        Dim Add_Edit_Del As String = ""
        Dim Old_New As String = ""
        Dim New_Edit_Del_Status As String = ""
        Dim Old_FieldValue As String = "", New_FieldValue As String = ""
        Dim Old_FldNm As String = "", New_FldNm As String = ""
        Dim FldNm As String = ""
        Dim Field_OldNames As String = ""
        Dim Field_NewNames As String = ""
        Dim Old_PkFldNm As String = ""
        Dim New_PkFldNm As String = ""
        Dim Old_DetPkFld1Nm As String = ""
        Dim New_DetPkFld1Nm As String = ""
        Dim Det_PkFldValue As String = ""
        Dim F_Ar() As String
        Dim DetTbl_FieldNames As String = ""
        Dim FldNm_NotUse() As String
        Dim ShowOrHide As Integer = 0
        Dim Modify_Status As String = ""
        Dim vDateValue As Date
        Dim vUsrLog_DBName As String





        vUsrLog_DBName = Common_Procedures.get_UserModificationDetails_DataBaseName(Val(Common_Procedures.CompGroupIdNo))

        TableName = Trim(TableName)
        Pk_FldName = Trim(Pk_FldName)

        Cmd.Connection = Cnn1
        If IsNothing(sqltr) = False Then
            Cmd.Transaction = sqltr
        End If

        Cmd.Parameters.Clear()
        Cmd.Parameters.AddWithValue("@EntryDate", Now)

        If Trim(UCase(EntStatus)) = "OLD" Or NewEntry_Status = True Or DelEntry_Status = True Then
            Cmd.CommandText = "if exists (select * from tempdb..sysobjects where [name] = '" & Trim(TableName) & "_Old') drop table tempdb.." & Trim(TableName) & "_Old"
            Cmd.ExecuteNonQuery()
        End If

        If Trim(UCase(EntStatus)) = "NEW" Or Trim(UCase(EntStatus)) = "DELETE" Then
            Cmd.CommandText = "if exists (select * from tempdb..sysobjects where [name] = '" & Trim(TableName) & "_New') drop table tempdb.." & Trim(TableName) & "_New"
            Cmd.ExecuteNonQuery()
        End If

        If DelEntry_Status = True Then
            New_Edit_Del_Status = "DELETE"
            Modify_Status = ""
        ElseIf NewEntry_Status = True Then
            New_Edit_Del_Status = "ADD"
            Modify_Status = "ADD"
        Else
            New_Edit_Del_Status = "EDIT"
            Modify_Status = "EDIT"
        End If

        Select Case Trim(UCase(EntryType))

            Case "DETAILS"

                If Trim(UCase(EntStatus)) = "OLD" Then
                    Old_New = "Old"
                Else
                    Old_New = "New"
                End If

                Cmd.CommandText = "Select * into tempdb.." & Trim(TableName) & "_" & Old_New & " from " & Trim(TableName) & " Where " & Pk_FldName & " = '" & Pk_Code & "'"
                Cmd.ExecuteNonQuery()

                If Trim(UCase(EntStatus)) = "NEW" Or Trim(UCase(EntStatus)) = "DELETE" Then

                    If Trim(Detail_PkColumn1Name) = "" Then Exit Sub

                    If NewEntry_Status = True Or DelEntry_Status = True Then
                        Cmd.CommandText = "Select * into tempdb.." & Trim(TableName) & "_Old from " & Trim(TableName) & " Where " & Pk_FldName & " = '-999'"
                        Cmd.ExecuteNonQuery()
                    End If

                    Old_PkFldNm = "Old_" & Pk_FldName
                    New_PkFldNm = "New_" & Pk_FldName

                    Old_DetPkFld1Nm = "Old_" & Detail_PkColumn1Name
                    New_DetPkFld1Nm = "New_" & Detail_PkColumn1Name

                    Field_OldNames = "a." & Pk_FldName & " as " & Old_PkFldNm & ", " & "a." & Detail_PkColumn1Name & " as " & Old_DetPkFld1Nm
                    Field_NewNames = "b." & Pk_FldName & " as " & New_PkFldNm & ", " & "b." & Detail_PkColumn1Name & " as " & New_DetPkFld1Nm

                    DetTbl_FieldNames = ""
                    Da1 = New SqlClient.SqlDataAdapter("Select * from " & Trim(TableName) & " Where " & Pk_FldName & " = '-999'", Cnn1)
                    If IsNothing(sqltr) = False Then
                        Da1.SelectCommand.Transaction = sqltr
                    End If
                    Dt2 = New DataTable
                    Da1.Fill(Dt2)
                    For K = 0 To Dt2.Columns.Count - 1
                        DetTbl_FieldNames = Trim(DetTbl_FieldNames) & IIf(Trim(DetTbl_FieldNames) <> "", ", ", "") & Trim(Dt2.Columns(K).ColumnName.ToString)
                    Next K

                    Erase F_Ar
                    If Trim(Detail_ColumnNames) <> "" Then
                        F_Ar = Split(Trim(Detail_ColumnNames), ",")

                    Else
                        F_Ar = Split(Trim(DetTbl_FieldNames), ",")

                    End If

                    For K = 0 To UBound(F_Ar)
                        If Trim(F_Ar(K)) <> "" Then
                            Field_OldNames = Trim(Field_OldNames) & IIf(Trim(Field_OldNames) <> "", ", ", "") & "a." & Trim(F_Ar(K)) & " as Old_" & Trim(F_Ar(K))
                            Field_NewNames = Trim(Field_NewNames) & IIf(Trim(Field_NewNames) <> "", ", ", "") & "b." & Trim(F_Ar(K)) & " as New_" & Trim(F_Ar(K))
                        End If
                    Next

                    Da1 = New SqlClient.SqlDataAdapter("Select " & Field_OldNames & ", " & Field_NewNames & " from tempdb.." & Trim(TableName) & "_old a FULL JOIN tempdb.." & Trim(TableName) & "_new b ON a." & Pk_FldName & " = b." & Pk_FldName & " and a." & Detail_PkColumn1Name & " = b." & Detail_PkColumn1Name & " Order by a." & Detail_PkColumn1Name & ", b." & Detail_PkColumn1Name, Cnn1)
                    If IsNothing(sqltr) = False Then
                        Da1.SelectCommand.Transaction = sqltr
                    End If
                    Dt1 = New DataTable
                    Da1.Fill(Dt1)

                    If Dt1.Rows.Count > 0 Then

                        For I = 0 To Dt1.Rows.Count - 1

                            For J = 0 To UBound(F_Ar)

                                ShowOrHide = 1
                                FldNm = UCase(F_Ar(J))
                                FldNm_NotUse = Split(UnUsed_Fld_Names, ",")
                                For Each fN As String In FldNm_NotUse
                                    If Trim(FldNm) = UCase(Trim(fN)) Then
                                        ShowOrHide = 0
                                        Exit For
                                    End If
                                Next

                                FldNm = Replace(UCase(F_Ar(J)), "_IDNO", " NAME")
                                FldNm = UCase(Replace(FldNm, "_", " "))

                                Old_FldNm = "Old_" & Trim(F_Ar(J))
                                New_FldNm = "New_" & Trim(F_Ar(J))

                                Old_FieldValue = ""
                                If IsDBNull(Dt1.Rows(I).Item(Old_FldNm).ToString) = False Then Old_FieldValue = get_MasterField_IdNo_To_Value(Cnn1, Old_FldNm, Dt1.Rows(I).Item(Old_FldNm).ToString, sqltr, Trim(TableName))
                                New_FieldValue = ""
                                If IsDBNull(Dt1.Rows(I).Item(New_FldNm).ToString) = False Then New_FieldValue = get_MasterField_IdNo_To_Value(Cnn1, New_FldNm, Dt1.Rows(I).Item(New_FldNm).ToString, sqltr, Trim(TableName))

                                MdfDet = ""

                                If DelEntry_Status = True Then
                                    MdfDet = "Deleted : " & UCase(FldNm) & " : " & """" & New_FieldValue & """" & " for " & Pk_FldName & " = " & Pk_Code & " and " & Detail_PkColumn1Name & " = " & Dt1.Rows(I).Item(New_DetPkFld1Nm).ToString
                                    Det_PkFldValue = Dt1.Rows(I).Item(New_DetPkFld1Nm).ToString

                                ElseIf IsDBNull(Dt1.Rows(I).Item(Old_PkFldNm).ToString) = True Or Dt1.Rows(I).Item(Old_PkFldNm).ToString = "" Then
                                    MdfDet = "Added : " & UCase(FldNm) & " : " & """" & New_FieldValue & """" & " for " & Pk_FldName & " = " & Pk_Code & " and " & Detail_PkColumn1Name & " = " & Dt1.Rows(I).Item(New_DetPkFld1Nm).ToString
                                    Det_PkFldValue = Dt1.Rows(I).Item(New_DetPkFld1Nm).ToString

                                ElseIf IsDBNull(Dt1.Rows(I).Item(New_PkFldNm).ToString) = True Or Dt1.Rows(I).Item(New_PkFldNm).ToString = "" Then
                                    MdfDet = "Removed : " & UCase(FldNm) & " : " & """" & Old_FieldValue & """" & " for " & Pk_FldName & " = " & Pk_Code & " and " & Detail_PkColumn1Name & " = " & Dt1.Rows(I).Item(Old_DetPkFld1Nm).ToString
                                    Det_PkFldValue = Dt1.Rows(I).Item(Old_DetPkFld1Nm).ToString

                                ElseIf Dt1.Rows(I).Item(Old_FldNm).ToString <> Dt1.Rows(I).Item(New_FldNm).ToString Then
                                    MdfDet = "Edited : " & UCase(FldNm) & " : " & """" & Old_FieldValue & """" & " to """ & New_FieldValue & """ for " & Pk_FldName & " = " & Pk_Code & " and " & Detail_PkColumn1Name & " = " & Dt1.Rows(I).Item(New_DetPkFld1Nm).ToString
                                    Det_PkFldValue = Dt1.Rows(I).Item(New_DetPkFld1Nm).ToString

                                End If

                                If MdfDet <> "" Then

                                    If Trim(Pk_SubCondition) <> "" Then
                                        Ent_Cd = Trim(Pk_SubCondition)
                                    Else
                                        Ent_Cd = IIf(InStr(Pk_Code, Pk_Condition) = 0, Pk_Condition, "") & Pk_Code
                                    End If

                                    Cmd.CommandText = "Insert into " & Trim(vUsrLog_DBName) & "..User_Modification_Details (        User_IdNo          ,        Entry_Name        ,        Entry_Type        ,          Table_Name      ,         Company_IdNo      ,         Entry_Code     ,         Entry_No     ,                 for_OrderBy                     ,             Details_SlNo      , modification_datetime,       Field_Name     ,           Field_NewValue      ,           Field_OldValue      ,            Entry_Status            ,   modification_details ,    Modification_Status      ,Show_Status) " &
                                                        "          Values                    (" & Str(Val(User.IdNo)) & ", '" & Trim(EntryName) & "', '" & Trim(EntryType) & "', '" & Trim(TableName) & "', " & Str(Val(CompIdNo)) & ",  '" & Trim(Ent_Cd) & "', '" & Trim(Pk_No) & "', " & Str(Format(Val(Pk_No), "#########0.00")) & ", '" & Trim(Det_PkFldValue) & "',      @EntryDate      , '" & Trim(FldNm) & "', '" & Trim(New_FieldValue) & "', '" & Trim(Old_FieldValue) & "', '" & Trim(New_Edit_Del_Status) & "', '" & Trim(MdfDet) & "' ,'" & Trim(Modify_Status) & "', " & Val(ShowOrHide) & ") "
                                    Cmd.ExecuteNonQuery()

                                End If

                            Next J

                        Next I

                    End If

                End If

                '======================================================================================================================================================
                '======================================***END DETAILS PART***==========================================================================================
                '======================================================================================================================================================

            Case Else  '----Head Part

                If Trim(UCase(EntStatus)) = "OLD" Then
                    Cmd.CommandText = "select * into tempdb.." & Trim(TableName) & "_old from " & Trim(TableName) & " where " & Pk_FldName & " = '" & Pk_Code & "'"
                    Cmd.ExecuteNonQuery()

                ElseIf Trim(UCase(EntStatus)) = "NEW" Or Trim(UCase(EntStatus)) = "DELETE" Then

                    If NewEntry_Status = True Or DelEntry_Status = True Then
                        Cmd.CommandText = "select * into tempdb.." & Trim(TableName) & "_old from " & Trim(TableName) & " Where " & Pk_FldName & " = '-999'"
                        Cmd.ExecuteNonQuery()
                    End If

                    Da1 = New SqlClient.SqlDataAdapter("select * from tempdb.." & Trim(TableName) & "_old", Cnn1)
                    If IsNothing(sqltr) = False Then
                        Da1.SelectCommand.Transaction = sqltr
                    End If
                    DtOld = New DataTable
                    Da1.Fill(DtOld)

                    Da1 = New SqlClient.SqlDataAdapter("select * from " & Trim(TableName) & " where " & Pk_FldName & " = '" & Pk_Code & "'", Cnn1)
                    If IsNothing(sqltr) = False Then
                        Da1.SelectCommand.Transaction = sqltr
                    End If
                    DtNew = New DataTable
                    Da1.Fill(DtNew)

                    If DtNew.Rows.Count > 0 Then

                        For I = 0 To DtNew.Columns.Count - 1

                            If InStr(UCase(DtNew.Columns(I).ColumnName.ToString), "FOR_ORDERBY") > 0 Or InStr(UCase(DtNew.Columns(I).ColumnName.ToString), "FORORDERBY") > 0 Or InStr(UCase(DtNew.Columns(I).ColumnName.ToString), "USER_IDNO") > 0 Or InStr(UCase(DtNew.Columns(I).ColumnName.ToString), "USERIDNO") > 0 Then
                                Continue For
                            End If

                            MdfDet = ""

                            ShowOrHide = 1
                            FldNm = UCase(DtNew.Columns(I).ColumnName.ToString)
                            FldNm_NotUse = Split(UnUsed_Fld_Names, ",")
                            For Each fN As String In FldNm_NotUse
                                If Trim(FldNm) = UCase(Trim(fN)) Then
                                    ShowOrHide = 0
                                    Exit For
                                End If
                            Next

                            FldNm = Replace(UCase(DtNew.Columns(I).ColumnName.ToString), "_IDNO", " NAME")
                            FldNm = UCase(Replace(FldNm, "_", " "))


                            If NewEntry_Status = True Or DelEntry_Status = True Then

                                If DelEntry_Status = True Then
                                    Add_Edit_Del = " DELETED : "
                                Else
                                    Add_Edit_Del = " ADDED : "
                                End If

                                Old_FieldValue = ""
                                New_FieldValue = ""

                                If Trim(UCase(Pk_FldName)) = Trim(UCase(DtNew.Columns(I).ColumnName.ToString)) Then
                                    New_FieldValue = DtNew.Rows(0)(I).ToString

                                    MdfDet = Add_Edit_Del & UCase(FldNm) & " : " & """" & Trim(New_FieldValue) & """"

                                Else

                                    If IsDBNull(DtNew.Rows(0)(I).ToString) = False Then

                                        If Trim(DtNew.Rows(0)(I).ToString) <> "" Then

                                            If Trim(DtNew.Rows(0)(I).ToString) <> "0" And Trim(DtNew.Rows(0)(I).ToString) <> "0.0" And Trim(DtNew.Rows(0)(I).ToString) <> "0.00" And Trim(DtNew.Rows(0)(I).ToString) <> "0.000" And Trim(DtNew.Rows(0)(I).ToString) <> "0.0000" And Trim(DtNew.Rows(0)(I).ToString) <> "0.00000" And Trim(DtNew.Rows(0)(I).ToString) <> "0.000000" And Trim(DtNew.Rows(0)(I).ToString) <> "0.0000000" And Trim(DtNew.Rows(0)(I).ToString) <> "0.00000000" And Trim(DtNew.Rows(0)(I).ToString) <> "0.000000000" Then

                                                If InStr(UCase(DtNew.Columns(I).ColumnName.ToString), "_IDNO") > 0 Then

                                                    New_FieldValue = get_MasterField_IdNo_To_Value(Cnn1, DtNew.Columns(I).ColumnName.ToString, DtNew.Rows(0)(I).ToString, sqltr, Trim(TableName))

                                                ElseIf Trim(LCase(DtNew.Columns(I).DataType.Name)) = "datetime" And InStr(UCase(DtNew.Columns(I).ColumnName.ToString), "TIME") = 0 Then

                                                    If IsDBNull(DtNew.Rows(0)(I).ToString) = False Then
                                                        vDateValue = DtNew.Rows(0)(I)
                                                        New_FieldValue = vDateValue.ToShortDateString
                                                    End If

                                                Else

                                                    New_FieldValue = Trim(DtNew.Rows(0)(I).ToString)

                                                End If

                                                MdfDet = Add_Edit_Del & UCase(FldNm) & " : " & """" & Trim(New_FieldValue) & """" & " for " & Pk_FldName & " = " & Pk_Code

                                            End If

                                        End If

                                    End If

                                End If


                                If Trim(MdfDet) <> "" Then

                                    If Trim(Pk_SubCondition) <> "" Then
                                        Ent_Cd = Trim(Pk_SubCondition)
                                    Else
                                        Ent_Cd = IIf(InStr(1, UCase(Pk_Code), UCase(Pk_Condition)) = 0, Pk_Condition, "") & Pk_Code
                                    End If

                                    Cmd.CommandText = "Insert into " & Trim(vUsrLog_DBName) & "..User_Modification_Details (        User_IdNo          ,        Entry_Name        ,        Entry_Type        ,          Table_Name      ,         Company_IdNo      ,         Entry_Code     ,         Entry_No     ,                 for_OrderBy                     , Details_SlNo, modification_datetime,       Field_Name     ,           Field_NewValue      ,           Field_OldValue      ,            Entry_Status            ,   modification_details ,      Modification_Status    ,         Show_Status     ) " &
                                                        "          Values                    (" & Str(Val(User.IdNo)) & ", '" & Trim(EntryName) & "', '" & Trim(EntryType) & "', '" & Trim(TableName) & "', " & Str(Val(CompIdNo)) & ",  '" & Trim(Ent_Cd) & "', '" & Trim(Pk_No) & "', " & Str(Format(Val(Pk_No), "#########0.00")) & ",     0       ,      @EntryDate      , '" & Trim(FldNm) & "', '" & Trim(New_FieldValue) & "', '" & Trim(Old_FieldValue) & "', '" & Trim(New_Edit_Del_Status) & "', '" & Trim(MdfDet) & "' ,'" & Trim(Modify_Status) & "', " & Val(ShowOrHide) & " ) "
                                    Cmd.ExecuteNonQuery()

                                End If

                            Else

                                Add_Edit_Del = " EDITED : "

                                If DtOld.Rows.Count > 0 Then

                                    If Trim(UCase(DtNew.Rows(0)(I).ToString)) <> Trim(UCase(DtOld.Rows(0)(I).ToString)) Then

                                        Old_FieldValue = ""
                                        New_FieldValue = ""

                                        If InStr(UCase(DtNew.Columns(I).ColumnName.ToString), "_IDNO") > 0 Then

                                            Old_FieldValue = get_MasterField_IdNo_To_Value(Cnn1, DtNew.Columns(I).ColumnName.ToString, DtOld.Rows(0)(I).ToString, sqltr, Trim(TableName))
                                            New_FieldValue = get_MasterField_IdNo_To_Value(Cnn1, DtNew.Columns(I).ColumnName.ToString, DtNew.Rows(0)(I).ToString, sqltr, Trim(TableName))

                                        ElseIf Trim(LCase(DtNew.Columns(I).DataType.Name)) = "datetime" And InStr(UCase(DtNew.Columns(I).ColumnName.ToString), "TIME") = 0 Then


                                            If IsDBNull(DtOld.Rows(0)(I).ToString) = False Then
                                                If IsDate(DtOld.Rows(0)(I).ToString) = True Then
                                                    vDateValue = DtOld.Rows(0)(I)
                                                    Old_FieldValue = vDateValue.ToShortDateString
                                                End If

                                            End If
                                            If IsDBNull(DtNew.Rows(0)(I).ToString) = False Then
                                                If IsDate(DtNew.Rows(0)(I).ToString) = True Then
                                                    vDateValue = DtNew.Rows(0)(I)
                                                    New_FieldValue = vDateValue.ToShortDateString
                                                End If
                                            End If

                                        Else


                                            'If IsDBNull(DtOld.Rows(0)(I).ToString) = False Then
                                            Old_FieldValue = Trim(DtOld.Rows(0)(I).ToString)
                                            'End If
                                            'If IsDBNull(DtNew.Rows(0)(I).ToString) = False Then
                                            New_FieldValue = Trim(DtNew.Rows(0)(I).ToString)
                                            'End If

                                        End If

                                        MdfDet = Add_Edit_Del & UCase(FldNm) & " : " & """" & Trim(Old_FieldValue) & """ TO " & """" & Trim(New_FieldValue) & """"

                                        If Trim(Pk_SubCondition) <> "" Then
                                            Ent_Cd = Trim(Pk_SubCondition)
                                        Else
                                            Ent_Cd = IIf(InStr(1, Pk_Code, Pk_Condition) = 0, Pk_Condition, "") & Pk_Code
                                        End If

                                        Cmd.CommandText = "Insert into " & Trim(vUsrLog_DBName) & "..User_Modification_Details (        User_IdNo          ,        Entry_Name        ,        Entry_Type        ,          Table_Name      ,         Company_IdNo      ,         Entry_Code     ,         Entry_No     ,                 for_OrderBy                     , Details_SlNo, modification_datetime,       Field_Name     ,           Field_NewValue      ,           Field_OldValue      ,            Entry_Status            ,   modification_details ,Modification_Status          ,Show_Status) " &
                                                            "          Values                    (" & Str(Val(User.IdNo)) & ", '" & Trim(EntryName) & "', '" & Trim(EntryType) & "', '" & Trim(TableName) & "', " & Str(Val(CompIdNo)) & ",  '" & Trim(Ent_Cd) & "', '" & Trim(Pk_No) & "', " & Str(Format(Val(Pk_No), "#########0.00")) & ",     0       ,      @EntryDate      , '" & Trim(FldNm) & "', '" & Trim(New_FieldValue) & "', '" & Trim(Old_FieldValue) & "', '" & Trim(New_Edit_Del_Status) & "', '" & Trim(MdfDet) & "' ,'" & Trim(Modify_Status) & "'," & Val(ShowOrHide) & ") "

                                        Cmd.ExecuteNonQuery()


                                    End If

                                End If

                            End If

                        Next I

                    End If

                    DtOld.Clear()
                    DtNew.Clear()

                End If

        End Select

        DtOld.Dispose()
        DtNew.Dispose()
        Dt1.Dispose()
        Dt2.Dispose()
        Da1.Dispose()
        Cmd.Dispose()

    End Sub

    Public Shared Function get_MasterField_IdNo_To_Value(ByVal Cnn1 As SqlClient.SqlConnection, ByVal FieldName As String, ByVal FieldValue As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal TableName As String = "") As String
        Dim RetValue As String = ""

        If UCase(FieldName) = "LEDGER_IDNO" Or InStr(1, UCase(FieldName), "LEDGER_IDNO") > 0 Or InStr(1, UCase(FieldName), "LEDGERIDNO") > 0 Then
            RetValue = Ledger_IdNoToName(Cnn1, Val(FieldValue), sqltr)
        ElseIf UCase(FieldName) = "DELIVERYTO_IDNO" Or InStr(1, UCase(FieldName), "DELIVERYTO_IDNO") > 0 Or InStr(1, UCase(FieldName), "DELIVERYTOIDNO") > 0 Then
            RetValue = Ledger_IdNoToName(Cnn1, Val(FieldValue), sqltr)
        ElseIf UCase(FieldName) = "RECEIVEDFROM_IDNO" Or InStr(1, UCase(FieldName), "RECEIVEDFROM_IDNO") > 0 Or InStr(1, UCase(FieldName), "RECEIVEDFROMIDNO") > 0 Then
            RetValue = Ledger_IdNoToName(Cnn1, Val(FieldValue), sqltr)
        ElseIf UCase(FieldName) = "VENDOR_IDNO" Or InStr(1, UCase(FieldName), "VENDOR_IDNO") > 0 Or InStr(1, UCase(FieldName), "VENDORIDNO") > 0 Then
            RetValue = Vendor_IdNoToName(Cnn1, Val(FieldValue), sqltr)
        ElseIf UCase(FieldName) = "COMPANY_IDNO" Or InStr(1, UCase(FieldName), "COMPANY_IDNO") > 0 Or InStr(1, UCase(FieldName), "COMPANYIDNO") > 0 Then
            RetValue = Company_IdNoToShortName(Cnn1, Val(FieldValue), "", sqltr)
        ElseIf UCase(FieldName) = "AREA_IDNO" Or InStr(1, UCase(FieldName), "AREA_IDNO") > 0 Or InStr(1, UCase(FieldName), "AREAIDNO") > 0 Then
            RetValue = Area_IdNoToName(Cnn1, Val(FieldValue), sqltr)

        ElseIf UCase(FieldName) = "BRAND_IDNO" Or InStr(1, UCase(FieldName), "BRAND_IDNO") > 0 Or InStr(1, UCase(FieldName), "BRANDIDNO") > 0 Then
            RetValue = Brand_IdNoToName(Cnn1, Val(FieldValue), sqltr)
        ElseIf UCase(FieldName) = "MACHINE_IDNO" Or InStr(1, UCase(FieldName), "MACHINE_IDNO") > 0 Or InStr(1, UCase(FieldName), "MACHINE_IDNO") > 0 Or InStr(1, UCase(FieldName), "MACHINEIDNO") > 0 Then
            RetValue = Machine_IdNoToName(Cnn1, Val(FieldValue), sqltr)
            'ElseIf UCase(FieldName) = "BAG_TYPE_IDNO" Or InStr(1, UCase(FieldName), "BAG_TYPE_IDNO") > 0 Or InStr(1, UCase(FieldName), "BAGTYPE_IDNO") > 0 Or InStr(1, UCase(FieldName), "BAGTYPEIDNO") > 0 Then
            '    RetValue = Bag_Type_IdNoToName(Cnn1, Val(FieldValue), sqltr)
        ElseIf UCase(FieldName) = "COUNT_IDNO" Or InStr(1, UCase(FieldName), "COUNT_IDNO") > 0 Or InStr(1, UCase(FieldName), "COUNTIDNO") > 0 Then
            RetValue = Count_IdNoToName(Cnn1, Val(FieldValue), sqltr)
        ElseIf UCase(FieldName) = "MILL_IDNO" Or InStr(1, UCase(FieldName), "MILL_IDNO") > 0 Or InStr(1, UCase(FieldName), "MILLIDNO") > 0 Then
            RetValue = Mill_IdNoToName(Cnn1, Val(FieldValue), sqltr)
        ElseIf UCase(FieldName) = "WOOD_SIZE_IDNO" Or UCase(FieldName) = "WOODSIZE_IDNO" Or UCase(FieldName) = "WOOD_SIZEIDNO" Or InStr(1, UCase(FieldName), "WOOD_SIZE_IDNO") > 0 Or InStr(1, UCase(FieldName), "WOODSIZE_IDNO") > 0 Or InStr(1, UCase(FieldName), "WOOD_SIZEIDNO") > 0 Or InStr(1, UCase(FieldName), "WOODSIZEIDNO") > 0 Then
            'RetValue = Wood_Size_IdNoToName(Cnn1, Val(FieldValue), sqltr)
        ElseIf UCase(FieldName) = "ITEM_IDNO" Or InStr(1, UCase(FieldName), "ITEM_IDNO") > 0 Or InStr(1, UCase(FieldName), "ITEMIDNO") > 0 Then
            RetValue = Item_IdNoToName(Cnn1, Val(FieldValue), sqltr)
        ElseIf UCase(FieldName) = "CHEMICAL_IDNO" Or InStr(1, UCase(FieldName), "CHEMICAL_IDNO") > 0 Or InStr(1, UCase(FieldName), "CHEMICALIDNO") > 0 Then
            RetValue = Item_IdNoToName(Cnn1, Val(FieldValue), sqltr)
        ElseIf UCase(FieldName) = "LOOMTYPE_IDNO" Or InStr(1, UCase(FieldName), "LOOMTYPE_IDNO") > 0 Or InStr(1, UCase(FieldName), "LOOM_TYPEIDNO") > 0 Or InStr(1, UCase(FieldName), "LOOMTYPEIDNO") > 0 Then
            'RetValue = LoomType_IdNoToName(Cnn1, Val(FieldValue), sqltr)
        ElseIf UCase(FieldName) = "BEAM_WIDTH_IDNO" Or InStr(1, UCase(FieldName), "BEAM_WIDTH_IDNO") > 0 Or InStr(1, UCase(FieldName), "BEAMWIDTH_IDNO") > 0 Or InStr(1, UCase(FieldName), "BEAM_DIAIDNO") > 0 Or InStr(1, UCase(FieldName), "BEAMWIDTHIDNO") > 0 Then
            RetValue = BeamWidth_IdNoToName(Cnn1, Val(FieldValue), sqltr)
        ElseIf UCase(FieldName) = "USER_IDNO" Or InStr(1, UCase(FieldName), "USER_IDNO") > 0 Or InStr(1, UCase(FieldName), "USER_IDNO") > 0 Or InStr(1, UCase(FieldName), "USER_IDNO") > 0 Or InStr(1, UCase(FieldName), "USER_IDNO") > 0 Then
            RetValue = User_IdNoToName(Cnn1, Val(FieldValue), sqltr)

            'ElseIf UCase(FieldName) = "PACKING_IDNO" Or InStr(1, UCase(FieldName), "PACKING_IDNO") > 0 Or InStr(1, UCase(FieldName), "PACKING_IDNO") > 0 Then
            '    RetValue = Waste_IdNoToName(Cnn1, Val(FieldValue), sqltr)

            'ElseIf UCase(FieldName) = "HARDWARE_IDNO" Or InStr(1, UCase(FieldName), "HARDWARE_IDNO") > 0 Or InStr(1, UCase(FieldName), "HARDWARE_IDNO") > 0 Then
            '    RetValue = Hardware_IdNoToName(Cnn1, Val(FieldValue), sqltr)

        ElseIf UCase(FieldName) = "UNIT_IDNO" Or InStr(1, UCase(FieldName), "UNIT_IDNO") > 0 Or InStr(1, UCase(FieldName), "UNIT_IDNO") > 0 Then
            RetValue = Unit_IdNoToName(Cnn1, Val(FieldValue), sqltr)

        ElseIf UCase(FieldName) = "CLOTH_TYPE_IDNO" Or InStr(1, UCase(FieldName), "CLOTH_TYPE_IDNO") > 0 Or InStr(1, UCase(FieldName), "CLOTH_TYPE_IDNO") > 0 Then
            RetValue = ClothType_IdNoToName(Cnn1, Val(FieldValue), sqltr)


        Else
            RetValue = FieldValue
        End If

        get_MasterField_IdNo_To_Value = RetValue

    End Function



    Public Shared Sub get_UserName_Password(ByVal VBForm As Form)
        Dim Old_UsrID As String = ""
        Dim Old_UsrNm As String = ""

        Old_UsrID = Common_Procedures.User.IdNo
        Old_UsrNm = Common_Procedures.User.Name

        Common_Procedures.User.IdNo = 0
        Common_Procedures.User.Name = ""
        Common_Procedures.User.Type = ""

        Common_Procedures.User.Show_UserModification_Status = 0
        Common_Procedures.User.Show_VerifiedStatus = 0

        Login.DefLoginNm = Old_UsrNm
        Login.ShowDialog()

        If Val(Common_Procedures.User.IdNo) <> 0 Then
            Common_Procedures.get_User_AccessRights_From_DB()
            Common_Procedures.Set_MdiMenu_Enable_Disable_by_UserRights()

        Else
            MessageBox.Show("Invalid User/Pasword", "LOGIN FAILED...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            VBForm.Close()
            Application.Exit()

        End If

        MDIParent1.lbl_UserName.Text = "USER : " & Trim(UCase(Common_Procedures.User.Name))

        'End If

    End Sub

    Public Shared Sub get_User_AccessRights_From_DB()
        Dim Cn1 As New SqlClient.SqlConnection
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable

        Cn1 = New SqlClient.SqlConnection(Common_Procedures.ConnectionString_CompanyGroupdetails)
        Cn1.Open()


        Common_Procedures.User.Show_Approved_Status = 0

        Common_Procedures.UR.Ledger_Creation = ""
        Common_Procedures.UR.Agent_Creation = ""
        Common_Procedures.UR.Sizing_Creation = ""
        Common_Procedures.UR.Weaver_Creation = ""
        Common_Procedures.UR.JOBWORKER_Creation = ""
        Common_Procedures.UR.Rewinding_Creation = ""
        Common_Procedures.UR.Sewing_Creation = ""
        Common_Procedures.UR.Transport_Creation = ""

        Common_Procedures.UR.Account_Group_creation = ""
        Common_Procedures.UR.Tax_Creation = ""
        Common_Procedures.UR.Area_Creation = ""
        Common_Procedures.UR.ItemGroup_Creation = ""
        Common_Procedures.UR.GST_AC_SETTINGS = ""
        Common_Procedures.UR.Count_Creation = ""

        Common_Procedures.UR.Mill_Creation = ""
        Common_Procedures.UR.Fibre_Creation = ""
        Common_Procedures.UR.Fibre_Lot_No_Creation = ""
        Common_Procedures.UR.Endscount_Creation = ""
        Common_Procedures.UR.cloth_Creation = ""
        Common_Procedures.UR.Cloth_Set_Creation = ""
        Common_Procedures.UR.Cloth_Sales_Rate_Master = ""
        Common_Procedures.UR.Fabric_Bits_Group_Creation = ""

        Common_Procedures.UR.Formula_Weaver_Yarn_Consumption = ""
        Common_Procedures.UR.Formula_Weaver_Coolie = ""

        Common_Procedures.UR.Employee_Creation = ""
        Common_Procedures.UR.Border_size_Creation = ""
        Common_Procedures.UR.Bobin_size_Creation = ""
        Common_Procedures.UR.Loom_Creation = ""
        Common_Procedures.UR.Loom_type_Creation = ""
        Common_Procedures.UR.Masters_Beam_Width_Creation = ""
        Common_Procedures.UR.Vendor_Creation = ""

        Common_Procedures.UR.Cheque_Printing_Position = ""
        Common_Procedures.UR.Fabric_Lot_No_Creation = ""
        Common_Procedures.UR.Variety_Creation = ""
        Common_Procedures.UR.VehicleNo_Creation = ""
        Common_Procedures.UR.Loading_UnLoading_Rate = ""
        Common_Procedures.UR.Checking_Tableno_Creation = ""
        Common_Procedures.UR.PieceChecking_Defects = ""
        Common_Procedures.UR.App_User_Creation = ""
        Common_Procedures.UR.user_Creation = ""


        '************************************************************************************************************************



        Common_Procedures.UR.Textile_OpeningStock = ""
        Common_Procedures.UR.Closing_Stock_value = ""
        Common_Procedures.UR.Cloth_Order_Indent_Opening = ""
        Common_Procedures.UR.Cloth_Delivery_opening = ""
        Common_Procedures.UR.Bale_Opening = ""
        Common_Procedures.UR.Unchecked_cloth_Opening = ""
        Common_Procedures.UR.Loom_Opening = ""
        Common_Procedures.UR.Piece_Opening = ""
        '************************************************************************************************************************

        Common_Procedures.UR.Yarn_Purchase_Receipt_Entry = ""
        Common_Procedures.UR.Yarn_Purchase_Order_Entry = ""
        Common_Procedures.UR.Yarn_Purchase_Entry = ""
        Common_Procedures.UR.Yarn_Purchase_Return_Entry = ""
        Common_Procedures.UR.Yarn_Sales_Order_Entry = ""
        Common_Procedures.UR.yarn_Delivery_Entry = ""

        Common_Procedures.UR.Yarn_Sales_Entry = ""
        Common_Procedures.UR.Yarn_Sales_Entry_vat = ""

        Common_Procedures.UR.Yarn_Proforma_Sales_Entry = ""
        Common_Procedures.UR.Yarn_Sales_Return_Entry = ""
        Common_Procedures.UR.Yarn_test_Entry = ""
        Common_Procedures.UR.Yarn_Purchase_Bill_Making_Entry = ""


        Common_Procedures.UR.Pavu_Purchase_Entry = ""
        Common_Procedures.UR.Pavu_Sales_Entry = ""

        Common_Procedures.UR.Cloth_Purchase_Order_Entry = ""
        Common_Procedures.UR.Cloth_Purchase_Receipt_Entry = ""
        Common_Procedures.UR.Cloth_Purchase_Entry = ""
        Common_Procedures.UR.Cloth_Purchase_Return_Entry = ""
        Common_Procedures.UR.Cloth_Purchase_offer_Entry = ""
        Common_Procedures.UR.Cloth_Purchase_Checking_Entry = ""

        Common_Procedures.UR.ClothSales_Order_Indent_Entry = ""
        Common_Procedures.UR.ClothSales_OrderIndent_Entry_Close_Option = ""
        Common_Procedures.UR.ClothSales_Cloth_Invoice_Entry = ""

        Common_Procedures.UR.ClothSales_Cloth_Invoice_Entry_vat = ""

        Common_Procedures.UR.ClothSales_Sales_Return_Entry = ""
        Common_Procedures.UR.ClothSales_Cloth_Delivery_Entry = ""
        Common_Procedures.UR.ClothSales_Delivery_Return_Entry = ""
        Common_Procedures.UR.ClothSales_Proforma_Invoice_Entry = ""
        Common_Procedures.UR.ClothSales_Buyer_offer_Entry = ""
        Common_Procedures.UR.ClothSales_Roll_Packing_Entry = ""
        Common_Procedures.UR.ClothSales_Piece_checking_Entry = ""
        Common_Procedures.UR.ClothSales_Bale_Delivery_Entry = ""

        Common_Procedures.UR.EmptyBeam_Purchase_Entry = ""
        Common_Procedures.UR.EmptyBeam_Sales_Entry = ""



        Common_Procedures.UR.General_Other_purchase_Entry = ""
        Common_Procedures.UR.General_Other_Sales_Entry = ""
        Common_Procedures.UR.Credit_note_Entry = ""
        Common_Procedures.UR.Debit_note_Entry = ""
        Common_Procedures.UR.General_Delivery_Entry = ""
        'Common_Procedures.UR.Advance_payment = ""

        Common_Procedures.UR.Sizing_yarn_delivery_Entry = ""
        Common_Procedures.UR.Sizing_Pavu_Receipt_Entry = ""
        Common_Procedures.UR.Sizing_Specification_Entry = ""
        Common_Procedures.UR.Sizing_Yarn_Receipt_Entry = ""
        Common_Procedures.UR.Sizing_Beam_Close_Entry = ""
        Common_Procedures.UR.Sizing_Yarn_Receipt_By_Sizing = ""
        Common_Procedures.UR.Sizing_Pavu_Delivery_From_Sizing_Entry = ""
        Common_Procedures.UR.Sizing_Yarn_Delivery_From_Sizing_Entry = ""


        Common_Procedures.UR.Rewinding_Delivery_Entry = ""
        Common_Procedures.UR.Rewinding_Receipt_Entry = ""




        Common_Procedures.UR.Weaver_Yarn_Delivery_Entry = ""
        Common_Procedures.UR.Weaver_Pavu_Delivery_Entry = ""
        Common_Procedures.UR.Weaver_KuraiPavu_Rceipt_Entry = ""
        Common_Procedures.UR.Weaver_Pavu_Rceipt_Entry = ""
        Common_Procedures.UR.Weaver_Yarn_Rceipt_Entry = ""
        Common_Procedures.UR.Weaver_Cloth_Rceipt_Entry = ""
        Common_Procedures.UR.Weaver_ClothRceipt_Entry_Edit_FABRICNAME_AFTERLOCK = ""
        Common_Procedures.UR.Weaver_Piece_Checking_Entry = ""
        Common_Procedures.UR.Weaver_Piece_Checking_Entry_ApprovalStatus = ""
        Common_Procedures.UR.Weaver_Piece_Checking_Entry_BarCode_Print_Status = ""
        Common_Procedures.UR.Weaver_Piece_Checking_Entry_Warp_Weft_Stock_Updation = ""
        Common_Procedures.UR.Weaver_ClothReceipt_and_PieceChecking_Entry = ""
        Common_Procedures.UR.Weaver_Wages_Entry = ""
        Common_Procedures.UR.Weaver_Weaving_Jobwork_Bill_Entry = ""
        Common_Procedures.UR.Weaver_Slevedge_Cone_Invoice_Entry = ""
        Common_Procedures.UR.Weaver_Wages_Entry_ChangeDate = ""
        Common_Procedures.UR.Weaver_Debit_Entry = ""
        Common_Procedures.UR.Weaver_bobin_delivery_Entry = ""
        Common_Procedures.UR.Weaver_bobin_Return_Entry = ""
        Common_Procedures.UR.Weaver_Advance_payment = ""
        Common_Procedures.UR.Lot_Approval_Entry = ""
        Common_Procedures.UR.Lot_Allotment_Details = ""
        Common_Procedures.UR.PavuYarn_Delivery_Entry = ""
        Common_Procedures.UR.PavuYarn_Receipt_Entry = ""
        Common_Procedures.UR.Weaver_Piece_Approval_Entry = ""
        Common_Procedures.UR.Weaver_Piece_Approval_Entry_Edit_DateColumn = ""
        Common_Procedures.UR.Weaver_Piece_Approval_Entry_BarCode_Print_Status = ""
        Common_Procedures.UR.Weaver_Lot_Checking_Planing_Entry = ""

        Common_Procedures.UR.Empty_BeamBagCone_Delivery_Entry = ""
        Common_Procedures.UR.Empty_BeamBagCone_Receipt_Entry = ""

        Common_Procedures.UR.Packing_slip_Entry = ""
        Common_Procedures.UR.Party_Amount_Receipt_Entry = ""
        Common_Procedures.UR.Cheque_return_Entry = ""
        Common_Procedures.UR.Weaver_payment_Entry = ""


        Common_Procedures.UR.Yarn_Excess_Short_Entry = ""
        Common_Procedures.UR.Pavu_Excess_Short_Entry = ""
        Common_Procedures.UR.Cloth_Excess_Short_Entry = ""
        Common_Procedures.UR.Piece_Excess_Short_Entry = ""
        Common_Procedures.UR.EmptyBeam_Excess_Short_Entry = ""
        Common_Procedures.UR.Piece_joining_Entry = ""

        Common_Procedures.UR.Yarn_Transfer_Entry = ""
        Common_Procedures.UR.Pavu_Transfer_Entry = ""
        Common_Procedures.UR.Cloth_Transfer_Entry = ""
        Common_Procedures.UR.Piece_Transfer_Entry = ""
        Common_Procedures.UR.Pavu_Transfer_Beam_wise_Entry = ""
        Common_Procedures.UR.Bale_Transfer_Entry = ""

        Common_Procedures.UR.Costing_Entry = ""
        Common_Procedures.UR.Entry_Processing_Job_Order = ""
        Common_Procedures.UR.Entry_Processed_Fabric_Receipt_From_Processing = ""
        Common_Procedures.UR.Entry_Processed_Fabric_Inspection = ""
        Common_Procedures.UR.Entry_Processing_Bill_Making = ""
        Common_Procedures.UR.Entry_Fabric_Return_From_Processing = ""
        Common_Procedures.UR.Entry_Processed_Fabric_Invoice_Gst = ""
        Common_Procedures.UR.Entry_Processed_Fabric_Invoice_Vat = ""
        Common_Procedures.UR.Entry_Processed_Waste_Delivery = ""
        Common_Procedures.UR.Entry_JobCard_For_Sewing = ""
        Common_Procedures.UR.Entry_Fabric_Delivery_To_Sewing = ""
        Common_Procedures.UR.Entry_Finished_Product_Receipt_From_Sewing = ""
        Common_Procedures.UR.Entry_Yarn_Delivery_To_Processing = ""
        Common_Procedures.UR.Entry_Yarn_Receipt_From_Processing = ""
        Common_Procedures.UR.Entry_Bill_Making = ""
        Common_Procedures.UR.Entry_Spinning_Yarn_Delivery = ""
        Common_Procedures.UR.Entry_Spinning_Yarn_Receipt = ""
        Common_Procedures.UR.Entry_Spinning_Yarn_Bill_Making = ""
        Common_Procedures.UR.Entry_Doubling_Yarn_Delivery = ""
        Common_Procedures.UR.Entry_Doubling_Yarn_Receipt = ""
        Common_Procedures.UR.Entry_Doubling_Yarn_Bill_Making = ""
        Common_Procedures.UR.Entry_Reeling_Yarn_Delivery = ""
        Common_Procedures.UR.Entry_Reeling_Yarn_Receipt = ""
        Common_Procedures.UR.Entry_Reeling_Yarn_Bill_Making = ""
        Common_Procedures.UR.Entry_Fabric_Delivery_To_Processing = ""
        Common_Procedures.UR.Entry_Cotton_Purchase_Entry = ""
        Common_Procedures.UR.Entry_Cotton_Sales_Entry = ""
        Common_Procedures.UR.Entry_Fibre_Sales_Order = ""
        Common_Procedures.UR.Entry_Fibre_Sales_Invoice = ""
        'Common_Procedures.UR.Processing_Entry = ""
        'Common_Procedures.UR.Sewing_Entry = ""
        'Common_Procedures.UR.Yarn_Processing_Entry = ""
        Common_Procedures.UR.Crimp_entry = ""

        Common_Procedures.UR.VanTrip_Entry = ""
        Common_Procedures.UR.Weaver_Cloth_Return_Delivery = ""
        Common_Procedures.UR.Bobin_purchase_entry = ""
        Common_Procedures.UR.Bobin_Sales_order_Entry = ""
        Common_Procedures.UR.Bobin_Production_Entry = ""
        Common_Procedures.UR.Jari_production_Entry = ""
        Common_Procedures.UR.Bobin_Sales_delivery_Entry = ""
        Common_Procedures.UR.Bobin_Sales_delivery_Return_Entry = ""
        Common_Procedures.UR.Jari_Sales_delivery_Entry = ""
        Common_Procedures.UR.Jari_Sales_Return_Entry = ""
        Common_Procedures.UR.Empty_Bobin_Delivery = ""
        Common_Procedures.UR.Empty_Bobin_Receipt = ""
        Common_Procedures.UR.Proforma_bobin_sales = ""
        '************************************************************************************************************************


        'Common_Procedures.UR.Cotton_Purchase = ""
        'Common_Procedures.UR.Cotton_Purchase_Return = ""
        'Common_Procedures.UR.Cotton_Issue_Mixing = ""
        'Common_Procedures.UR.Cotton_Waste_Sale = ""
        'Common_Procedures.UR.Cotton_Waste_Production = ""
        'Common_Procedures.UR.Cotton_Yarn_Production = ""


        Common_Procedures.UR.Store_purchase_Order_entry = ""
        Common_Procedures.UR.Store_purchase_Inward_entry = ""
        Common_Procedures.UR.Store_purchase_Return_entry = ""
        Common_Procedures.UR.Store_Item_Issue_To_machine = ""
        Common_Procedures.UR.Store_Item_Return_from_Machine = ""
        Common_Procedures.UR.Store_Item_Delivery_Entry = ""
        Common_Procedures.UR.Store_Item_Receipt_Entry = ""

        Common_Procedures.UR.Store_Service_Delivery_Entry = ""
        Common_Procedures.UR.Store_Service_Receipt_Entry = ""
        Common_Procedures.UR.Stores_gate_Pass_Entry = ""
        Common_Procedures.UR.Stores_Item_Excess_Short_Entry = ""
        Common_Procedures.UR.Stores_Dispose_Entry = ""
        Common_Procedures.UR.Stores_Oil_Service_Entry = ""

        '************************************************************************************************************************
        Common_Procedures.UR.Voucher_Entry = ""
        Common_Procedures.UR.Accounts_Ledger = ""
        Common_Procedures.UR.Accounts_Ledger_with_DueDays = ""
        Common_Procedures.UR.Accounts_GroupLedger = ""
        Common_Procedures.UR.Accounts_DayBook = ""
        Common_Procedures.UR.Accounts_AllLedger = ""
        Common_Procedures.UR.Accounts_TB = ""
        Common_Procedures.UR.Accounts_BalanceSheet = ""
        Common_Procedures.UR.Accounts_Profit_Loss = ""
        Common_Procedures.UR.Accounts_CustomerBills = ""
        Common_Procedures.UR.Accounts_AgentBills = ""
        Common_Procedures.UR.Accounts_Agentcommission = ""
        Common_Procedures.UR.Accounts_Accounts_Receivable_Report = ""
        Common_Procedures.UR.Accounts_Accounts_Payable_Report = ""
        Common_Procedures.UR.Accounts_VoucherRegister = ""
        Common_Procedures.UR.Accounts_Party_Sales_Register_Invoice = ""
        Common_Procedures.UR.Accounts_Sales_party_Ledger_Print = ""
        '************************************************************************************************************************
        Common_Procedures.UR.Accounts_Purchase_Purchase_Entry_Gst = ""
        Common_Procedures.UR.Accounts_Purchase_Purchase_Return = ""
        Common_Procedures.UR.Accounts_Purchase_Payment_Bank = ""
        Common_Procedures.UR.Accounts_Purchase_Payment_Cash = ""
        Common_Procedures.UR.Accounts_Purchase_Debit_Note_Entry = ""
        Common_Procedures.UR.Accounts_Purchase_Date_Wise_Ledger = ""
        Common_Procedures.UR.Accounts_Purchase_Outstanding_Pending_Dues_Date_Wise = ""
        Common_Procedures.UR.Accounts_Purchase_Group_Ledger = ""
        Common_Procedures.UR.Accounts_Purchase_Item_Excess_Short_Entry = ""

        '************************************************************************************************************************
        Common_Procedures.UR.Accounts_Sales_Sales_Entry_Gst = ""
        Common_Procedures.UR.Accounts_Sales_Sales_Return = ""
        Common_Procedures.UR.Accounts_Sales_Payment_Receipt_Bank = ""
        Common_Procedures.UR.Accounts_Sales_Payment_Receipt_Cash = ""
        Common_Procedures.UR.Accounts_Sales_Credit_Note_Entry = ""
        Common_Procedures.UR.Accounts_Sales_Date_Wise_Ledger = ""
        Common_Procedures.UR.Accounts_Sales_Outstanding_Pending_Dues_Date_Wise = ""
        Common_Procedures.UR.Accounts_Sales_Outstanding_Pending_Party_Wise = ""
        Common_Procedures.UR.Accounts_Sales_Group_Ledger = ""

        '************************************************************************************************************************
        Common_Procedures.UR.Accounts_Others_Journal_Entry = ""
        Common_Procedures.UR.Accounts_Others_Contra_Entry = ""
        Common_Procedures.UR.Accounts_Others_Petty_Cash = ""

        '************************************************************************************************************************


        Common_Procedures.UR.reports_user_modifications = ""
        Common_Procedures.UR.Report_Master = ""
        Common_Procedures.UR.Report_Register = ""
        Common_Procedures.UR.Report_Sizing_Stock = ""
        Common_Procedures.UR.Report_Rewinding_Stock = ""
        Common_Procedures.UR.Report_Weaver_Stock = ""
        Common_Procedures.UR.Report_Godown_Stock = ""
        Common_Procedures.UR.Report_Day_Transaction_Details = ""
        Common_Procedures.UR.Report_Cloth_Sales_Order_Pending = ""
        Common_Procedures.UR.Report_Cloth_Invoice_Pending = ""
        Common_Procedures.UR.Report_GST_return = ""
        Common_Procedures.UR.Report_Annexure = ""
        Common_Procedures.UR.Report_TDS = ""
        Common_Procedures.UR.Report_TCS = ""
        Common_Procedures.UR.Report_Stock_Value = ""
        Common_Procedures.UR.Report_All_Statements = ""
        Common_Procedures.UR.Report_Cotton_Reports = ""
        Common_Procedures.UR.Report_Van_Trip = ""
        Common_Procedures.UR.Report_Processing_Stock = ""
        Common_Procedures.UR.Report_Sewing = ""



        '************************************************************************************************************************
        Common_Procedures.UR.OWNSORT_REPORTS_PURCHASE_ORDER = ""
        Common_Procedures.UR.OWNSORT_REPORTS_SALES_ORDER = ""
        Common_Procedures.UR.OWNSORT_REPORTS_DELIVERY_CHALLAN = ""
        Common_Procedures.UR.OWNSORT_REPORTS_PACKING_LIST = ""
        Common_Procedures.UR.OWNSORT_REPORTS_SALES_INVOICE = ""
        Common_Procedures.UR.OWNSORT_REPORTS_YARN_PURCHASE_REGISTER = ""
        Common_Procedures.UR.OWNSORT_REPORTS_YARN_INWARD = ""
        Common_Procedures.UR.OWNSORT_REPORTS_YARN_OUTWARD = ""
        Common_Procedures.UR.OWNSORT_REPORTS_EMPTY_BEAM_DELIVERY = ""
        Common_Procedures.UR.OWNSORT_REPORTS_WARP_RECEIPT = ""
        Common_Procedures.UR.OWNSORT_REPORTS_SIZING_SET_REPORT = ""
        Common_Procedures.UR.OWNSORT_REPORTS_WARP_BEAM_LOADING_REGISTER = ""
        Common_Procedures.UR.OWNSORT_REPORTS_PIECE_DOFFING_REGISTER = ""
        Common_Procedures.UR.OWNSORT_REPORTS_WARP_BEAM_RUNOUT_REGISTER = ""
        Common_Procedures.UR.OWNSORT_REPORTS_RETURN = ""
        Common_Procedures.UR.OWNSORT_REPORTS_SIZED_BEAM_STOCK_ON_FLOOR = ""
        Common_Procedures.UR.OWNSORT_REPORTS_RUNNING_BEAM_DETAILS_ALL_LOOM = ""
        Common_Procedures.UR.OWNSORT_REPORTS_WARP_LOADING_LOOM_WISE = ""
        Common_Procedures.UR.OWNSORT_REPORTS_PIECE_CHECKING_REGISTER = ""
        Common_Procedures.UR.OWNSORT_REPORTS_PRODUCTION_SUMMARY_LOOM_WISE = ""
        Common_Procedures.UR.OWNSORT_REPORTS_DAILY_FABRIC_STOCK = ""
        Common_Procedures.UR.OWNSORT_REPORTS_DAILY_PRODUCTION_STOCK = ""


        Common_Procedures.UR.TRADING_REPORTS_SALES_INVOICE = ""
        Common_Procedures.UR.TRADING_REPORTS_PURCHASE_INVOICE = ""
        Common_Procedures.UR.TRADING_REPORTS_RECEIVED_REPORTS = ""

        '************************************************************************************************************************


        Common_Procedures.UR.Report_stores = ""
        Common_Procedures.UR.master_Stores = ""

        Common_Procedures.UR.Packing_Slip2 = ""
        Common_Procedures.UR.Fabric_Physical_Stock = ""
        Common_Procedures.UR.Inhouse_Reports = ""


        '************************************************************************************************************************

        Common_Procedures.UR.FP_purchase_Entry = ""
        Common_Procedures.UR.FP_purchase_Return_Entry = ""
        Common_Procedures.UR.FP_Processing_Delivery_Entry = ""
        Common_Procedures.UR.FP_Processing_Receipt_Entry = ""
        Common_Procedures.UR.FP_Processing_Return_Entry = ""
        Common_Procedures.UR.FP_Processing_Bill_Making_Entry = ""
        Common_Procedures.UR.FP_delivery_Entry = ""
        Common_Procedures.UR.FP_Return_Entry = ""
        Common_Procedures.UR.FP_Set_Entry = ""
        Common_Procedures.UR.FP_UnSet_Entry = ""
        Common_Procedures.UR.FP_Item_transfer_Entry = ""
        Common_Procedures.UR.FP_Packing_slip_Entry = ""
        Common_Procedures.UR.FP_Order_indent_Entry = ""
        Common_Procedures.UR.FP_Invoice_Entry = ""
        Common_Procedures.UR.FP_Cash_Sales_Entry = ""
        Common_Procedures.UR.FP_Sales_return_Entry = ""
        Common_Procedures.UR.FP_Proforma_Invoice_Entry = ""
        Common_Procedures.UR.FP_Shirt_bit_Entry = ""
        Common_Procedures.UR.FP_Item_Excess_Short_Entry = ""
        Common_Procedures.UR.FP_Party_Amount_Receipt_Entry = ""
        Common_Procedures.UR.FP_Cheque_return_Entry = ""


        '************************************************************************************************************************
        Common_Procedures.UR.FP_Ledger_Creation = ""
        Common_Procedures.UR.FP_Agent_Creation = ""
        Common_Procedures.UR.FP_Transport_Creation = ""
        Common_Procedures.UR.FP_Area_Creation = ""
        Common_Procedures.UR.FP_Grey_Item_Creation = ""
        Common_Procedures.UR.FP_Finished_Product_Creation = ""
        Common_Procedures.UR.FP_Size_Creation = ""
        Common_Procedures.UR.FP_Item_Group_Creation = ""
        Common_Procedures.UR.FP_Unit_Creation = ""
        Common_Procedures.UR.FP_Product_Sales_Name_Creation = ""
        Common_Procedures.UR.FP_Process_Creation = ""
        Common_Procedures.UR.FP_LotNo_Creation = ""
        Common_Procedures.UR.FP_Article_Creation = ""
        Common_Procedures.UR.FP_Currency_Creation = ""
        Common_Procedures.UR.FP_Colour_Creation = ""
        Common_Procedures.UR.FP_RackNo_Creation = ""
        Common_Procedures.UR.FP_Packing_Type_Creation = ""
        Common_Procedures.UR.FP_user_Creation = ""
        Common_Procedures.UR.Packing_Type_Creation = ""
        '************************************************************************************************************************
        Common_Procedures.UR.Inhouse_Beam_knotting_Entry = ""
        Common_Procedures.UR.Inhouse_Doffing_Entry = ""
        Common_Procedures.UR.Inhouse_Piece_Checking_Entry = ""
        Common_Procedures.UR.Inhouse_Doffing_and_PieceChecking_Entry = ""
        Common_Procedures.UR.Inhouse_Beam_RunOut_Entry = ""
        Common_Procedures.UR.Inhouse_Beam_Close_Entry = ""
        Common_Procedures.UR.Inhouse_Weaving_Excess_Short_Entry = ""
        Common_Procedures.UR.Inhouse_Sort_Change_Entry = ""
        Common_Procedures.UR.Inhouse_Pavu_Delivery_Entry = ""
        Common_Procedures.UR.Inhouse_Yarn_Delivery_Entry = ""
        Common_Procedures.UR.Inhouse_Pavu_Receipt_Entry = ""
        Common_Procedures.UR.Inhouse_Yarn_Receipt_Entry = ""
        Common_Procedures.UR.Inhouse_Loom_Production_Entry = ""
        Common_Procedures.UR.Inhouse_Knotting_Bill_Entry = ""
        '************************************************************************************************************************
        Common_Procedures.UR.Jobwork_Order_Entry = ""
        Common_Procedures.UR.Jobwork_Pavu_Yarn_Receipt_Entry = ""
        Common_Procedures.UR.Jobwork_Production_Entry = ""
        Common_Procedures.UR.Jobwork_Piece_Delivery_Entry = ""
        Common_Procedures.UR.Jobwork_Piece_Inspection_Entry = ""
        Common_Procedures.UR.Jobwork_Conversion_Bill_Entry = ""
        Common_Procedures.UR.Jobwork_Pavu_Yarn_Return_Delivery_Entry = ""
        Common_Procedures.UR.Jobwork_EmptyBeam_Return_Delivery_Entry = ""

        Common_Procedures.UR.TEXTILE_JOBWORK_REGISTER_REPORT = ""
        Common_Procedures.UR.TEXTILE_JOBWORK_PENDING_REGISTER_REPORT = ""
        Common_Procedures.UR.TEXTILE_JOBWORK_YARN_STOCK_REPORT = ""
        Common_Procedures.UR.TEXTILE_JOBWORK_PAVU_STOCK_REPORT = ""
        Common_Procedures.UR.TEXTILE_JOBWORK_EMPTYBEAM_STOCK_REPORT = ""
        Common_Procedures.UR.TEXTILE_JOBWORK_EMPTYBAG_STOCK_REPORT = ""
        Common_Procedures.UR.TEXTILE_JOBWORK_EMPTYCONE_STOCK_REPORT = ""
        Common_Procedures.UR.TEXTILE_JOBWORK_ALL_STOCK_LEDGER_REPORT = ""
        Common_Procedures.UR.TEXTILE_JOBWORK_ALL_STOCK_SUMMARY_REPORT = ""
        Common_Procedures.UR.TEXTILE_JOBWORK_JOBWORKER_STOCK_STATEMENT_REPORT = ""
        Common_Procedures.UR.TEXTILE_JOBWORK_DAY_TRANSACTION_REPORT = ""
        Common_Procedures.UR.TEXTILE_JOBWORK_RECONCILIATION_REPORT = ""

        Common_Procedures.UR.TEXTILE_JOBWORK_DELIVERY_CHALLAN_REPORTS = ""
        Common_Procedures.UR.TEXTILE_JOBWORK_INVOICE_REPORT = ""
        Common_Procedures.UR.TEXTILE_JOBWORK_RECEIVED_REPORT = ""
        Common_Procedures.UR.TEXTILE_JOBWORK_SIZED_BEAM_STOCK_ON_FLOOR = ""
        Common_Procedures.UR.TEXTILE_JOBWORK_PRODUCTION_SUMMARY_LOOM_WISE = ""
        Common_Procedures.UR.TEXTILE_JOBWORK_PIECE_CHECKING_REPORT = ""
        Common_Procedures.UR.TEXTILE_JOBWORK_BEAM_RUNOUT_REGISTER = ""
        Common_Procedures.UR.TEXTILE_JOBWORK_RUNNING_BEAM_DETAILS_ALL_LOOM = ""
        Common_Procedures.UR.TEXTILE_JOBWORK_WARP_LOADING_LOOM_WISE = ""
        Common_Procedures.UR.TEXTILE_JOBWORK_VENDOR_GRADING_REPORT = ""
        Common_Procedures.UR.Spares_PurchaseParty_Creation = ""
        Common_Procedures.UR.Sizing_Delivery_Party_Creation = ""
        Common_Procedures.UR.Firewood_PurchaseParty_Creation = ""
        Common_Procedures.UR.Bag_Type_Creation = ""
        Common_Procedures.UR.Cone_Type_Creation = ""
        Common_Procedures.UR.Delivery_Address_Creation = ""
        Common_Procedures.UR.Sizing_Item_Creaion = ""
        Common_Procedures.UR.Unit_Creation = ""
        Common_Procedures.UR.Sizing_BeamNo_Creation = ""
        Common_Procedures.UR.Sizing_WasteCreation = ""
        Common_Procedures.UR.Sizing_Spares_Creation = ""
        Common_Procedures.UR.SizingMachine_No_Creation = ""

        Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_YARN_RECEIPT = ""
        Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_EMPTYBEAM_RECEIPT = ""
        Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_SIZING_SPECIFICATION = ""
        Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_STATEMENT = ""
        Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_INVOICE = ""
        Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CASHDISCOUNT = ""
        Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_PAVU_DELIVERY = ""
        Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_YARN_DELIVERY = ""
        Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_EMPTY_BEAM_DELIVERY = ""
        Common_Procedures.UR.ENTRY_SIZING_JOBWORK_KURAI_PAVU_RECEIPT = ""
        Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_EMPTY_BEAM_BAG_EXCESS_SHORT = ""
        Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_YARN_TRANSFER = ""
        Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_YARN_EXCESS_SHORT = ""
        Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_PURCHASE_ORDER = ""
        Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_PURCHASE = ""
        Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_PURCHASE_RETURN = ""
        Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_EXCESS_SHORT = ""
        Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_WASTE_MATERIAL_SALES = ""
        Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_SPARES_PURCHASE = ""
        Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_FIREWOOD_PURCHASE = ""
        Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_FIREWOOD_CONSUMPTION = ""

        Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_GENERAL_DELIVERY = ""

        Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_EMPTY_BEAM_REGISTER = ""
        Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_EMPTY_BAGS_REGISTER = ""
        Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_CONES_REGISTER = ""
        Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_YARN_REGISTER = ""
        Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_PAVU_REGISTER = ""
        Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_ALL_STOCK_LEDGER = ""
        Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_ALL_STOCK_SUMMARY = ""
        Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_ALL_STOCK_STATEMENTS = ""
        Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_PRODUCTION_REGISTER = ""
        Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_INVOICE_REGISTER = ""
        Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_CASH_DISCOUNT = ""
        Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_CHEMICAL_REGISTER = ""
        Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_HARDWARE_PURCHASE = ""
        Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_FIREWOOD_PURCHASE = ""
        Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_FIREWOOD_CONSUMPTION_REGISTER = ""
        Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_WASTE_MATERIAL = ""
        Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_DAY_TRANSACTION = ""
        Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_GST_RETURN = ""
        Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_TDS_REPORT = ""

        Common_Procedures.UR.OEENTRY_COTTON_PURCHASE_ENTRY = ""
        Common_Procedures.UR.OEENTRY_COTTON_PURCHASE_RETURN_ENTRY = ""
        Common_Procedures.UR.OEENTRY_MIXING_ENTRY = ""
        Common_Procedures.UR.OEENTRY_PRODUCTION_ENTRY = ""
        Common_Procedures.UR.OEENTRY_PACKING_ENTRY = ""
        Common_Procedures.UR.OEENTRY_ORDER_ENTRY = ""
        Common_Procedures.UR.OEENTRY_DELIVERY_ENTRY = ""
        Common_Procedures.UR.OEENTRY_INVOICE_ENTRY = ""
        Common_Procedures.UR.OEENTRY_WASTE_SALES_ENTRY = ""
        Common_Procedures.UR.OEENTRY_LOCAL_WASTE_SALES_ENTRY = ""
        Common_Procedures.UR.OEENTRY_INVOICE_RETURN_ENTRY = ""
        Common_Procedures.UR.OEENTRY_DELIVERY_RETURN_ENTRY = ""
        Common_Procedures.UR.OEENTRY_BORA_STRITCHING_ENTRY = ""
        Common_Procedures.UR.OEENTRY_REELING_DELIVERY_ENTRY = ""
        Common_Procedures.UR.OEENTRY_REELING_RECEIPT_ENTRY = ""
        Common_Procedures.UR.OEENTRY_STOCK_TRANSFER_ENTRY = ""

        Common_Procedures.UR.OESPINNING_REGISTER_REPORT = ""
        Common_Procedures.UR.OESPINNING_COTTON_STOCK_REPORT = ""
        Common_Procedures.UR.OESPINNING_MIXING_STOCK_REPORT = ""
        Common_Procedures.UR.OESPINNING_BAG_YARN_STOCK_REPORT = ""
        Common_Procedures.UR.OESPINNING_LOOSE_YARN_STOCK_REPORT = ""
        Common_Procedures.UR.OESPINNING_REELING_STOCK_REPORT = ""
        Common_Procedures.UR.OESPINNING_HANK_YARN_STOCK_REPORT = ""
        Common_Procedures.UR.OESPINNING_WASTE_STOCK_REPORT = ""
        Common_Procedures.UR.OESPINNING_YARN_STOCK_BAGNOWISE_STOCK_REPORT = ""
        Common_Procedures.UR.OESPINNING_ALL_STOCK_SUMMARY_REPORT = ""
        Common_Procedures.UR.OESPINNING_COMMISSION_REGISTER_REPORT = ""
        Common_Procedures.UR.OESPINNING_GSTR_1_REPORT = ""
        Common_Procedures.UR.OESPINNING_GSTR_2_REPORT = ""
        Common_Procedures.UR.OESPINNING_ORDER_PENDING_REPORT = ""
        Common_Procedures.UR.OESPINNING_CARDING_STOCK_REPORT = ""

        Common_Procedures.UR.OESPINNING_EMPTY_BOBIN_STOCK_DETAILS = ""
        Common_Procedures.UR.OESPINNING_EMPTY_BOBIN_STOCK_SUMMARY = ""

        Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_ATTENDANCE = ""
        Common_Procedures.UR.PAYROLL_ENTRY_ATTENDANCE_LOG_FROM_MACHINE = ""
        Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_ATTENDANCE_FROM_MACHINE = ""
        Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_TIMING_ADDITION = ""
        Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_SALARY = ""
        Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_SALARY_ADVANCE_PAYMENT = ""
        Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_ADVANCE_ADDITION = ""
        Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_CREATION = ""
        Common_Procedures.UR.PAYROLL_ENTRY_CATEGORY_CREATION = ""
        Common_Procedures.UR.PAYROLL_ENTRY_SALARY_PAYMENT_TYPE = ""
        Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_ADVANCE = ""


        Common_Procedures.UR.PAYROLL_REPORT_SALARY_REGISTER = ""
        Common_Procedures.UR.PAYROLL_REPORT_NET_PAY_REGISTER = ""
        Common_Procedures.UR.PAYROLL_REPORT_ATTENDANCE_REGISTER = ""
        Common_Procedures.UR.PAYROLL_REPORT_ATTENDANCE_MONTHWISE_REGISTER = ""
        Common_Procedures.UR.PAYROLL_REPORT_EMPLOYEE_PAYMENT_REGISTER = ""
        Common_Procedures.UR.PAYROLL_REPORT_EMPLOYEE_DEDUCATION = ""
        Common_Procedures.UR.PAYROLL_REPORT_EMPLOYEE_ACCOUNT_DETAILS = ""
        Common_Procedures.UR.PAYROLL_REPORT_EMPLOYEE_REGISTER = ""
        Common_Procedures.UR.PAYROLL_REPORT_LEDGER_REPORT_ALL = ""
        Common_Procedures.UR.PAYROLL_REPORT_SALARY_LEDGER = ""
        Common_Procedures.UR.PAYROLL_REPORT_ADVANCE_LEDGER = ""
        Common_Procedures.UR.PAYROLL_REPORT_DEPOSIT_LEDGER = ""


        Common_Procedures.UR.GENERAL_REPORTS_EMPTY_BEAM_STOCK = ""
        Common_Procedures.UR.GENERAL_REPORTS_YARN_STOCK_REPORTS = ""
        Common_Procedures.UR.GENERAL_REPORTS_WARP_STOCK_REPORTS = ""
        Common_Procedures.UR.GENERAL_REPORTS_FABRIC_STOCK_REPORTS = ""
        Common_Procedures.UR.GENERAL_REPORTS_MONTHLY_PRODUCTION_REPORT = ""
        Common_Procedures.UR.GENERAL_REPORTS_BEAM_TO_BEAM_RECONCILATION_REPORT = ""
        Common_Procedures.UR.GENERAL_REPORTS_BEAM_TO_BEAM_RECONCILATION_SETNO_WISE = ""
        Common_Procedures.UR.GENERAL_REPORTS_INHOUSE = ""
        Common_Procedures.UR.GENERAL_REPORTS_AGENT_REPORT = ""
        Common_Procedures.UR.GENERAL_REPORTS_GST_REPORT = ""
        Common_Procedures.UR.GENERAL_REPORTS_TCS_REPORT = ""
        Common_Procedures.UR.GENERAL_REPORTS_TDS_REPORT = ""
        Common_Procedures.UR.ACCOUNTS_PURCHASE_REGISTER = ""
        Common_Procedures.UR.ACCOUNTS_SALES_REGISTER = ""

        Common_Procedures.UR.REPORTS_STORES_MASTERS = ""
        Common_Procedures.UR.REPORTS_STORES_REGISTER = ""
        Common_Procedures.UR.REPORTS_STORES_PURCHASE_ORDER_PENDING = ""

        Common_Procedures.UR.REPORTS_STORES_MONTHLY_ITEM_ISSUE_STATEMENT = ""
        Common_Procedures.UR.REPORTS_STORES_MONTHLY_ITEM_ISSUE_STATEMENT_ALL_LOOM = ""
        Common_Procedures.UR.REPORTS_STORES_SERVICE_RECEIPT_ITEM_PENDING = ""
        Common_Procedures.UR.REPORTS_OIL_SERVICE_PENDING = ""
        Common_Procedures.UR.REPORTS_STORES_NEW_ITEM_STOCK_DETAIL = ""
        Common_Procedures.UR.REPORTS_STORES_OLD_ITEM_STOCK_DETAILS_USABLE = ""
        Common_Procedures.UR.REPORTS_STORES_OLD_ITEM_STOCK_DETAILS_SCRAP = ""
        Common_Procedures.UR.REPORTS_STORES_ITEM_STOCK_DETAILS_ALL = ""
        Common_Procedures.UR.REPORTS_STORES_NEW_ITEM_STOCK_SUMMARY = ""
        Common_Procedures.UR.REPORTS_STORES_OLD_ITEM_STOCK_SUMMARY_USABLE = ""
        Common_Procedures.UR.REPORTS_STORES_OLD_ITEM_STOCK_SUMMARY_SCRAP = ""
        Common_Procedures.UR.REPORTS_STORES_ITEM_STOCK_SUMMARY_ALL = ""
        Common_Procedures.UR.REPORTS_STORES_ITEM_STOCK_VALUE = ""
        Common_Procedures.UR.REPORTS_STORES_PURCHASE_PLANNING = ""




        If Val(Common_Procedures.User.IdNo) = 1 Then

            Common_Procedures.UR.Ledger_Creation = "~L~"
            Common_Procedures.UR.Agent_Creation = "~L~"
            Common_Procedures.UR.Sizing_Creation = "~L~"
            Common_Procedures.UR.Weaver_Creation = "~L~"
            Common_Procedures.UR.JOBWORKER_Creation = "~L~"
            Common_Procedures.UR.Rewinding_Creation = "~L~"
            Common_Procedures.UR.Sewing_Creation = "~L~"
            Common_Procedures.UR.Transport_Creation = "~L~"

            Common_Procedures.UR.Account_Group_creation = "~L~"
            Common_Procedures.UR.Tax_Creation = "~L~"
            Common_Procedures.UR.Area_Creation = "~L~"
            Common_Procedures.UR.ItemGroup_Creation = "~L~"
            Common_Procedures.UR.GST_AC_SETTINGS = "~L~"
            Common_Procedures.UR.Count_Creation = "~L~"

            Common_Procedures.UR.Mill_Creation = "~L~"
            Common_Procedures.UR.Fibre_Creation = "~L~"
            Common_Procedures.UR.Fibre_Lot_No_Creation = "~L~"
            Common_Procedures.UR.Endscount_Creation = "~L~"
            Common_Procedures.UR.cloth_Creation = "~L~"
            Common_Procedures.UR.Cloth_Set_Creation = "~L~"
            Common_Procedures.UR.Cloth_Sales_Rate_Master = "~L~"
            Common_Procedures.UR.Fabric_Bits_Group_Creation = "~L~"

            Common_Procedures.UR.Formula_Weaver_Yarn_Consumption = "~L~"
            Common_Procedures.UR.Formula_Weaver_Coolie = "~L~"

            Common_Procedures.UR.Employee_Creation = "~L~"
            Common_Procedures.UR.Border_size_Creation = "~L~"
            Common_Procedures.UR.Bobin_size_Creation = "~L~"

            Common_Procedures.UR.Loom_Creation = "~L~"
            Common_Procedures.UR.Loom_type_Creation = "~L~"
            Common_Procedures.UR.Masters_Beam_Width_Creation = "~L~"
            Common_Procedures.UR.Vendor_Creation = "~L~"

            Common_Procedures.UR.Cheque_Printing_Position = "~L~"
            Common_Procedures.UR.Fabric_Lot_No_Creation = "~L~"
            Common_Procedures.UR.Variety_Creation = "~L~"
            Common_Procedures.UR.VehicleNo_Creation = "~L~"
            Common_Procedures.UR.Loading_UnLoading_Rate = "~L~"
            Common_Procedures.UR.Checking_Tableno_Creation = "~L~"
            Common_Procedures.UR.PieceChecking_Defects = "~L~"
            Common_Procedures.UR.App_User_Creation = "~L~"
            Common_Procedures.UR.user_Creation = "~L~"


            '************************************************************************************************************************



            Common_Procedures.UR.Textile_OpeningStock = "~L~"
            Common_Procedures.UR.Closing_Stock_value = "~L~"
            Common_Procedures.UR.Cloth_Order_Indent_Opening = "~L~"
            Common_Procedures.UR.Cloth_Delivery_opening = "~L~"
            Common_Procedures.UR.Bale_Opening = "~L~"
            Common_Procedures.UR.Unchecked_cloth_Opening = "~L~"
            Common_Procedures.UR.Loom_Opening = "~L~"
            Common_Procedures.UR.Piece_Opening = "~L~"
            '************************************************************************************************************************


            Common_Procedures.UR.Yarn_Purchase_Order_Entry = "~L~"
            Common_Procedures.UR.Yarn_Purchase_Entry = "~L~"
            Common_Procedures.UR.Yarn_Purchase_Return_Entry = "~L~"
            Common_Procedures.UR.Yarn_Sales_Order_Entry = "~L~"
            Common_Procedures.UR.yarn_Delivery_Entry = "~L~"

            Common_Procedures.UR.Yarn_Purchase_Receipt_Entry = "~L~"

            Common_Procedures.UR.Yarn_Sales_Entry = "~L~"
            Common_Procedures.UR.Yarn_Sales_Entry_vat = "~L~"

            Common_Procedures.UR.Yarn_Proforma_Sales_Entry = "~L~"
            Common_Procedures.UR.Yarn_Sales_Return_Entry = "~L~"
            Common_Procedures.UR.Yarn_test_Entry = "~L~"
            Common_Procedures.UR.Yarn_Purchase_Bill_Making_Entry = "~L~"


            Common_Procedures.UR.Pavu_Purchase_Entry = "~L~"
            Common_Procedures.UR.Pavu_Sales_Entry = "~L~"

            Common_Procedures.UR.Cloth_Purchase_order_Entry = "~L~"
            Common_Procedures.UR.Cloth_Purchase_Receipt_Entry = "~L~"
            Common_Procedures.UR.Cloth_Purchase_Entry = "~L~"
            Common_Procedures.UR.Cloth_Purchase_Return_Entry = "~L~"
            Common_Procedures.UR.Cloth_Purchase_offer_Entry = "~L~"
            Common_Procedures.UR.Cloth_Purchase_Checking_Entry = "~L~"

            Common_Procedures.UR.ClothSales_Order_Indent_Entry = "~L~"
            Common_Procedures.UR.ClothSales_OrderIndent_Entry_Close_Option = "~L~"
            Common_Procedures.UR.ClothSales_Cloth_Invoice_Entry = "~L~"
            Common_Procedures.UR.ClothSales_Cloth_Invoice_Entry_vat = "~L~"

            Common_Procedures.UR.ClothSales_Sales_Return_Entry = "~L~"
            Common_Procedures.UR.ClothSales_Cloth_Delivery_Entry = "~L~"
            Common_Procedures.UR.ClothSales_Delivery_Return_Entry = "~L~"
            Common_Procedures.UR.ClothSales_Proforma_Invoice_Entry = "~L~"
            Common_Procedures.UR.ClothSales_Buyer_offer_Entry = "~L~"
            Common_Procedures.UR.ClothSales_Roll_Packing_Entry = "~L~"
            Common_Procedures.UR.ClothSales_Piece_checking_Entry = "~L~"
            Common_Procedures.UR.ClothSales_Bale_Delivery_Entry = "~L~"

            Common_Procedures.UR.EmptyBeam_Purchase_Entry = "~L~"
            Common_Procedures.UR.EmptyBeam_sales_Entry = "~L~"



            Common_Procedures.UR.General_Other_purchase_Entry = "~L~"
            Common_Procedures.UR.General_Other_Sales_Entry = "~L~"
            Common_Procedures.UR.Credit_note_Entry = "~L~"
            Common_Procedures.UR.Debit_note_Entry = "~L~"
            Common_Procedures.UR.General_Delivery_Entry = "~L~"
            'Common_Procedures.UR.Advance_payment = ""

            Common_Procedures.UR.Sizing_Yarn_Delivery_Entry = "~L~"
            Common_Procedures.UR.Sizing_pavu_Receipt_Entry = "~L~"
            Common_Procedures.UR.Sizing_Specification_Entry = "~L~"
            Common_Procedures.UR.Sizing_Yarn_Receipt_Entry = "~L~"
            Common_Procedures.UR.Sizing_Beam_Close_Entry = "~L~"
            Common_Procedures.UR.Sizing_Yarn_Receipt_By_Sizing = "~L~"
            Common_Procedures.UR.Sizing_Pavu_Delivery_From_Sizing_Entry = "~L~"

            Common_Procedures.UR.Sizing_Yarn_Delivery_From_Sizing_Entry = "~L~"

            Common_Procedures.UR.Rewinding_Delivery_Entry = "~L~"
            Common_Procedures.UR.Rewinding_Receipt_Entry = "~L~"




            Common_Procedures.UR.Weaver_Yarn_Delivery_Entry = "~L~"
            Common_Procedures.UR.Weaver_Pavu_Delivery_Entry = "~L~"
            Common_Procedures.UR.Weaver_KuraiPavu_Rceipt_Entry = "~L~"
            Common_Procedures.UR.Weaver_Pavu_Rceipt_Entry = "~L~"
            Common_Procedures.UR.Weaver_Yarn_Rceipt_Entry = "~L~"
            Common_Procedures.UR.Weaver_Cloth_Rceipt_Entry = "~L~"
            Common_Procedures.UR.Weaver_ClothRceipt_Entry_Edit_FABRICNAME_AFTERLOCK = "~L~"
            Common_Procedures.UR.Weaver_ClothReceipt_and_PieceChecking_Entry = "~L~"
            Common_Procedures.UR.Weaver_Piece_Checking_Entry = "~L~"
            Common_Procedures.UR.Weaver_Piece_Checking_Entry_ApprovalStatus = "~L~"
            Common_Procedures.UR.Weaver_Piece_Checking_Entry_BarCode_Print_Status = "~L~"
            Common_Procedures.UR.Weaver_Piece_Checking_Entry_Warp_Weft_Stock_Updation = "~L~"
            Common_Procedures.UR.Weaver_Wages_Entry = "~L~"
            Common_Procedures.UR.Weaver_Weaving_Jobwork_Bill_Entry = "~L~"
            Common_Procedures.UR.Weaver_Slevedge_Cone_Invoice_Entry = "~L~"
            Common_Procedures.UR.Weaver_Wages_Entry_ChangeDate = "~L~"
            Common_Procedures.UR.Weaver_Debit_Entry = "~L~"
            Common_Procedures.UR.Weaver_bobin_delivery_Entry = "~L~"
            Common_Procedures.UR.Weaver_bobin_Return_Entry = "~L~"
            Common_Procedures.UR.Weaver_Advance_payment = "~L~"
            Common_Procedures.UR.Lot_Approval_Entry = "~L~"
            Common_Procedures.UR.Lot_Allotment_Details = "~L~"
            Common_Procedures.UR.Weaver_Piece_Approval_Entry = "~L~"
            Common_Procedures.UR.Weaver_Piece_Approval_Entry_Edit_DateColumn = "~L~"
            Common_Procedures.UR.Weaver_Piece_Approval_Entry_BarCode_Print_Status = "~L~"
            Common_Procedures.UR.Weaver_Lot_Checking_Planing_Entry = "~L~"

            Common_Procedures.UR.PavuYarn_Delivery_Entry = "~L~"
            Common_Procedures.UR.PavuYarn_Receipt_Entry = "~L~"

            Common_Procedures.UR.Empty_BeamBagCone_Delivery_Entry = "~L~"
            Common_Procedures.UR.Empty_BeamBagCone_Receipt_Entry = "~L~"

            Common_Procedures.UR.Packing_slip_Entry = "~L~"
            Common_Procedures.UR.Party_Amount_Receipt_Entry = "~L~"
            Common_Procedures.UR.Cheque_return_Entry = "~L~"
            Common_Procedures.UR.Weaver_payment_Entry = "~L~"


            Common_Procedures.UR.Yarn_Excess_Short_Entry = "~L~"
            Common_Procedures.UR.Pavu_Excess_Short_Entry = ""
            Common_Procedures.UR.Cloth_Excess_Short_Entry = "~L~"
            Common_Procedures.UR.Piece_Excess_Short_Entry = "~L~"
            Common_Procedures.UR.EmptyBeam_Excess_Short_Entry = "~L~"
            Common_Procedures.UR.Piece_joining_Entry = "~L~"


            Common_Procedures.UR.Yarn_Transfer_Entry = "~L~"
            Common_Procedures.UR.Pavu_Transfer_Entry = "~L~"
            Common_Procedures.UR.Cloth_Transfer_Entry = "~L~"
            Common_Procedures.UR.Piece_Transfer_Entry = "~L~"
            Common_Procedures.UR.Pavu_Transfer_Beam_wise_Entry = "~L~"
            Common_Procedures.UR.Bale_Transfer_Entry = "~L~"


            Common_Procedures.UR.Costing_Entry = "~L~"

            Common_Procedures.UR.Entry_Processing_Job_Order = "~L~"
            Common_Procedures.UR.Entry_Fabric_Delivery_To_Processing = "~L~"
            Common_Procedures.UR.Entry_Processed_Fabric_Receipt_From_Processing = "~L~"
            Common_Procedures.UR.Entry_Processed_Fabric_Inspection = "~L~"
            Common_Procedures.UR.Entry_Processing_Bill_Making = "~L~"
            Common_Procedures.UR.Entry_Fabric_Return_From_Processing = "~L~"
            Common_Procedures.UR.Entry_Processed_Fabric_Invoice_Gst = "~L~"
            Common_Procedures.UR.Entry_Processed_Fabric_Invoice_Vat = "~L~"
            Common_Procedures.UR.Entry_Processed_Waste_Delivery = "~L~"
            Common_Procedures.UR.Entry_JobCard_For_Sewing = "~L~"
            Common_Procedures.UR.Entry_Fabric_Delivery_To_Sewing = "~L~"
            Common_Procedures.UR.Entry_Finished_Product_Receipt_From_Sewing = "~L~"
            Common_Procedures.UR.Entry_Yarn_Delivery_To_Processing = "~L~"
            Common_Procedures.UR.Entry_Yarn_Receipt_From_Processing = "~L~"
            Common_Procedures.UR.Entry_Bill_Making = "~L~"
            Common_Procedures.UR.Entry_Spinning_Yarn_Delivery = "~L~"
            Common_Procedures.UR.Entry_Spinning_Yarn_Receipt = "~L~"
            Common_Procedures.UR.Entry_Spinning_Yarn_Bill_Making = "~L~"
            Common_Procedures.UR.Entry_Doubling_Yarn_Delivery = "~L~"
            Common_Procedures.UR.Entry_Doubling_Yarn_Receipt = "~L~"
            Common_Procedures.UR.Entry_Doubling_Yarn_Bill_Making = "~L~"
            Common_Procedures.UR.Entry_Reeling_Yarn_Delivery = "~L~"
            Common_Procedures.UR.Entry_Reeling_Yarn_Receipt = "~L~"
            Common_Procedures.UR.Entry_Reeling_Yarn_Bill_Making = "~L~"
            Common_Procedures.UR.Entry_Cotton_Purchase_Entry = "~L~"
            Common_Procedures.UR.Entry_Cotton_Sales_Entry = "~L~"
            Common_Procedures.UR.Entry_Fibre_Sales_Order = "~L~"
            Common_Procedures.UR.Entry_Fibre_Sales_Invoice = "~L~"
            'Common_Procedures.UR.Processing_Entry = "~L~"
            'Common_Procedures.UR.Sewing_Entry = "~L~"
            'Common_Procedures.UR.Yarn_Processing_Entry = "~L~"
            Common_Procedures.UR.Crimp_entry = "~L~"

            Common_Procedures.UR.VanTrip_Entry = "~L~"
            Common_Procedures.UR.Weaver_Cloth_Return_Delivery = "~L~"
            Common_Procedures.UR.Bobin_purchase_entry = "~L~"
            Common_Procedures.UR.Bobin_Sales_order_Entry = "~L~"
            Common_Procedures.UR.Bobin_Production_Entry = "~L~"
            Common_Procedures.UR.Jari_production_Entry = "~L~"
            Common_Procedures.UR.Bobin_Sales_delivery_Entry = "~L~"
            Common_Procedures.UR.Bobin_Sales_delivery_Return_Entry = "~L~"
            Common_Procedures.UR.Jari_Sales_delivery_Entry = "~L~"
            Common_Procedures.UR.Jari_Sales_Return_Entry = "~L~"
            Common_Procedures.UR.Empty_Bobin_Delivery = "~L~"
            Common_Procedures.UR.Empty_Bobin_Receipt = "~L~"
            Common_Procedures.UR.Proforma_bobin_sales = "~L~"

            '************************************************************************************************************************

            Common_Procedures.UR.Store_purchase_Inward_entry = "~L~"


            Common_Procedures.UR.Store_purchase_Order_entry = "~L~"

            Common_Procedures.UR.Store_purchase_Return_entry = "~L~"
            Common_Procedures.UR.Store_Item_Issue_To_machine = "~L~"
            Common_Procedures.UR.Store_Item_Return_from_Machine = "~L~"
            Common_Procedures.UR.Store_Item_Delivery_Entry = "~L~"
            Common_Procedures.UR.Store_Item_Receipt_Entry = "~L~"

            Common_Procedures.UR.Store_Service_Delivery_Entry = "~L~"
            Common_Procedures.UR.Store_Service_Receipt_Entry = "~L~"
            Common_Procedures.UR.Stores_gate_Pass_Entry = "~L~"
            Common_Procedures.UR.Stores_Item_Excess_Short_Entry = "~L~"
            Common_Procedures.UR.Stores_Dispose_Entry = "~L~"
            Common_Procedures.UR.Stores_Oil_Service_Entry = "~L~"

            '************************************************************************************************************************
            Common_Procedures.UR.Voucher_Entry = "~L~"
            Common_Procedures.UR.Accounts_Ledger = "~L~"
            Common_Procedures.UR.Accounts_Ledger_with_DueDays = "~L~"
            Common_Procedures.UR.Accounts_GroupLedger = "~L~"
            Common_Procedures.UR.Accounts_DayBook = "~L~"
            Common_Procedures.UR.Accounts_AllLedger = "~L~"
            Common_Procedures.UR.Accounts_TB = "~L~"
            Common_Procedures.UR.Accounts_BalanceSheet = "~L~"
            Common_Procedures.UR.Accounts_Profit_Loss = "~L~"
            Common_Procedures.UR.Accounts_CustomerBills = "~L~"
            Common_Procedures.UR.Accounts_AgentBills = "~L~"
            Common_Procedures.UR.Accounts_Agentcommission = "~L~"
            Common_Procedures.UR.Accounts_Accounts_Receivable_Report = "~L~"
            Common_Procedures.UR.Accounts_Accounts_Payable_Report = "~L~"
            Common_Procedures.UR.Accounts_VoucherRegister = "~L~"
            Common_Procedures.UR.Accounts_Party_Sales_Register_Invoice = "~L~"
            Common_Procedures.UR.Accounts_Sales_party_Ledger_Print = "~L~"
            '************************************************************************************************************************
            Common_Procedures.UR.Accounts_Purchase_Purchase_Entry_Gst = "~L~"
            Common_Procedures.UR.Accounts_Purchase_Purchase_Return = "~L~"
            Common_Procedures.UR.Accounts_Purchase_Payment_Bank = "~L~"
            Common_Procedures.UR.Accounts_Purchase_Payment_Cash = "~L~"
            Common_Procedures.UR.Accounts_Purchase_Debit_Note_Entry = "~L~"
            Common_Procedures.UR.Accounts_Purchase_Date_Wise_Ledger = "~L~"
            Common_Procedures.UR.Accounts_Purchase_Outstanding_Pending_Dues_Date_Wise = "~L~"
            Common_Procedures.UR.Accounts_Purchase_Group_Ledger = "~L~"
            Common_Procedures.UR.Accounts_Purchase_Item_Excess_Short_Entry = "~L~"

            '************************************************************************************************************************

            Common_Procedures.UR.Accounts_Sales_Sales_Entry_Gst = "~L~"
            Common_Procedures.UR.Accounts_Sales_Sales_Return = "~L~"
            Common_Procedures.UR.Accounts_Sales_Payment_Receipt_Bank = "~L~"
            Common_Procedures.UR.Accounts_Sales_Payment_Receipt_Cash = "~L~"
            Common_Procedures.UR.Accounts_Sales_Credit_Note_Entry = "~L~"
            Common_Procedures.UR.Accounts_Sales_Date_Wise_Ledger = "~L~"
            Common_Procedures.UR.Accounts_Sales_Outstanding_Pending_Dues_Date_Wise = "~L~"
            Common_Procedures.UR.Accounts_Sales_Outstanding_Pending_Party_Wise = "~L~"
            Common_Procedures.UR.Accounts_Sales_Group_Ledger = "~L~"

            '************************************************************************************************************************

            Common_Procedures.UR.Accounts_Others_Journal_Entry = "~L~"
            Common_Procedures.UR.Accounts_Others_Contra_Entry = "~L~"
            Common_Procedures.UR.Accounts_Others_Petty_Cash = "~L~"

            '************************************************************************************************************************

            Common_Procedures.UR.reports_user_modifications = "~L~"

            Common_Procedures.UR.Report_Master = "~L~"
            Common_Procedures.UR.Report_Register = "~L~"
            Common_Procedures.UR.Report_Sizing_Stock = "~L~"
            Common_Procedures.UR.Report_Rewinding_Stock = "~L~"
            Common_Procedures.UR.Report_Weaver_Stock = "~L~"
            Common_Procedures.UR.Report_Godown_Stock = "~L~"
            Common_Procedures.UR.Report_Day_Transaction_Details = "~L~"
            Common_Procedures.UR.Report_Cloth_Sales_Order_Pending = "~L~"
            Common_Procedures.UR.Report_Cloth_Invoice_Pending = "~L~"
            Common_Procedures.UR.Report_GST_return = "~L~"
            Common_Procedures.UR.Report_Annexure = "~L~"
            Common_Procedures.UR.Report_TDS = "~L~"
            Common_Procedures.UR.Report_TCS = "~L~"
            Common_Procedures.UR.Report_Stock_Value = "~L~"
            Common_Procedures.UR.Report_All_Statements = "~L~"
            Common_Procedures.UR.Report_Cotton_Reports = "~L~"
            Common_Procedures.UR.Report_Van_Trip = "~L~"
            Common_Procedures.UR.Report_Processing_Stock = "~L~"
            Common_Procedures.UR.Report_Sewing = "~L~"
            '************************************************************************************************************************
            Common_Procedures.UR.OWNSORT_REPORTS_PURCHASE_ORDER = "~L~"
            Common_Procedures.UR.OWNSORT_REPORTS_SALES_ORDER = "~L~"
            Common_Procedures.UR.OWNSORT_REPORTS_DELIVERY_CHALLAN = "~L~"
            Common_Procedures.UR.OWNSORT_REPORTS_PACKING_LIST = "~L~"
            Common_Procedures.UR.OWNSORT_REPORTS_SALES_INVOICE = "~L~"
            Common_Procedures.UR.OWNSORT_REPORTS_YARN_PURCHASE_REGISTER = "~L~"
            Common_Procedures.UR.OWNSORT_REPORTS_YARN_INWARD = "~L~"
            Common_Procedures.UR.OWNSORT_REPORTS_YARN_OUTWARD = "~L~"
            Common_Procedures.UR.OWNSORT_REPORTS_EMPTY_BEAM_DELIVERY = "~L~"
            Common_Procedures.UR.OWNSORT_REPORTS_WARP_RECEIPT = "~L~"
            Common_Procedures.UR.OWNSORT_REPORTS_SIZING_SET_REPORT = "~L~"
            Common_Procedures.UR.OWNSORT_REPORTS_WARP_BEAM_LOADING_REGISTER = "~L~"
            Common_Procedures.UR.OWNSORT_REPORTS_PIECE_DOFFING_REGISTER = "~L~"
            Common_Procedures.UR.OWNSORT_REPORTS_WARP_BEAM_RUNOUT_REGISTER = "~L~"
            Common_Procedures.UR.OWNSORT_REPORTS_RETURN = "~L~"
            Common_Procedures.UR.OWNSORT_REPORTS_SIZED_BEAM_STOCK_ON_FLOOR = "~L~"
            Common_Procedures.UR.OWNSORT_REPORTS_RUNNING_BEAM_DETAILS_ALL_LOOM = "~L~"
            Common_Procedures.UR.OWNSORT_REPORTS_WARP_LOADING_LOOM_WISE = "~L~"
            Common_Procedures.UR.OWNSORT_REPORTS_PIECE_CHECKING_REGISTER = "~L~"
            Common_Procedures.UR.OWNSORT_REPORTS_PRODUCTION_SUMMARY_LOOM_WISE = "~L~"
            Common_Procedures.UR.OWNSORT_REPORTS_DAILY_FABRIC_STOCK = "~L~"
            Common_Procedures.UR.OWNSORT_REPORTS_DAILY_PRODUCTION_STOCK = "~L~"


            Common_Procedures.UR.TRADING_REPORTS_SALES_INVOICE = "~L~"
            Common_Procedures.UR.TRADING_REPORTS_PURCHASE_INVOICE = "~L~"
            Common_Procedures.UR.TRADING_REPORTS_RECEIVED_REPORTS = "~L~"


            '************************************************************************************************************************
            Common_Procedures.UR.Inhouse_Reports = "~L~"
            Common_Procedures.UR.Report_stores = "~L~"
            Common_Procedures.UR.master_Stores = "~L~"

            Common_Procedures.UR.Packing_Slip2 = "~L~"
            Common_Procedures.UR.Fabric_Physical_Stock = "~L~"


            '************************************************************************************************************************

            Common_Procedures.UR.FP_purchase_Entry = "~L~"
            Common_Procedures.UR.FP_purchase_Return_Entry = "~L~"
            Common_Procedures.UR.FP_Processing_Delivery_Entry = "~L~"
            Common_Procedures.UR.FP_Processing_Receipt_Entry = "~L~"
            Common_Procedures.UR.FP_Processing_Return_Entry = "~L~"
            Common_Procedures.UR.FP_Processing_Bill_Making_Entry = "~L~"
            Common_Procedures.UR.FP_delivery_Entry = "~L~"
            Common_Procedures.UR.FP_Return_Entry = "~L~"
            Common_Procedures.UR.FP_Set_Entry = "~L~"
            Common_Procedures.UR.FP_UnSet_Entry = "~L~"
            Common_Procedures.UR.FP_Item_transfer_Entry = "~L~"
            Common_Procedures.UR.FP_Packing_slip_Entry = "~L~"
            Common_Procedures.UR.FP_Order_indent_Entry = "~L~"
            Common_Procedures.UR.FP_Invoice_Entry = "~L~"
            Common_Procedures.UR.FP_Cash_Sales_Entry = "~L~"
            Common_Procedures.UR.FP_Sales_return_Entry = "~L~"
            Common_Procedures.UR.FP_Proforma_Invoice_Entry = "~L~"
            Common_Procedures.UR.FP_Shirt_bit_Entry = "~L~"
            Common_Procedures.UR.FP_Item_Excess_Short_Entry = "~L~"
            Common_Procedures.UR.FP_Party_Amount_Receipt_Entry = "~L~"
            Common_Procedures.UR.FP_Cheque_return_Entry = "~L~"


            '************************************************************************************************************************
            Common_Procedures.UR.FP_Ledger_Creation = "~L~"
            Common_Procedures.UR.FP_Agent_Creation = "~L~"
            Common_Procedures.UR.FP_Transport_Creation = "~L~"
            Common_Procedures.UR.FP_Area_Creation = "~L~"
            Common_Procedures.UR.FP_Grey_Item_Creation = "~L~"
            Common_Procedures.UR.FP_Finished_Product_Creation = "~L~"
            Common_Procedures.UR.FP_Size_Creation = "~L~"
            Common_Procedures.UR.FP_Item_Group_Creation = "~L~"
            Common_Procedures.UR.FP_Unit_Creation = "~L~"
            Common_Procedures.UR.FP_Product_Sales_Name_Creation = "~L~"
            Common_Procedures.UR.FP_Process_Creation = "~L~"
            Common_Procedures.UR.FP_LotNo_Creation = "~L~"
            Common_Procedures.UR.FP_Article_Creation = "~L~"
            Common_Procedures.UR.FP_Currency_Creation = "~L~"
            Common_Procedures.UR.FP_Colour_Creation = "~L~"
            Common_Procedures.UR.FP_RackNo_Creation = "~L~"
            Common_Procedures.UR.FP_Packing_Type_Creation = "~L~"
            Common_Procedures.UR.FP_user_Creation = "~L~"
            Common_Procedures.UR.Packing_Type_Creation = "~L~"
            '************************************************************************************************************************
            Common_Procedures.UR.Inhouse_Beam_knotting_Entry = "~L~"
            Common_Procedures.UR.Inhouse_Doffing_Entry = "~L~"
            Common_Procedures.UR.Inhouse_Piece_Checking_Entry = "~L~"
            Common_Procedures.UR.Inhouse_Doffing_and_PieceChecking_Entry = "~L~"
            Common_Procedures.UR.Inhouse_Beam_RunOut_Entry = "~L~"
            Common_Procedures.UR.Inhouse_Beam_Close_Entry = "~L~"
            Common_Procedures.UR.Inhouse_Weaving_Excess_Short_Entry = "~L~"
            Common_Procedures.UR.Inhouse_Sort_Change_Entry = "~L~"
            Common_Procedures.UR.Inhouse_Pavu_Delivery_Entry = "~L~"
            Common_Procedures.UR.Inhouse_Yarn_Delivery_Entry = "~L~"
            Common_Procedures.UR.Inhouse_Pavu_Receipt_Entry = "~L~"
            Common_Procedures.UR.Inhouse_Yarn_Receipt_Entry = "~L~"
            Common_Procedures.UR.Inhouse_Loom_Production_Entry = "~L~"
            Common_Procedures.UR.Inhouse_Knotting_Bill_Entry = "~L~"
            '************************************************************************************************************************
            Common_Procedures.UR.Jobwork_Order_Entry = "~L~"
            Common_Procedures.UR.Jobwork_Pavu_Yarn_Receipt_Entry = "~L~"
            Common_Procedures.UR.Jobwork_Production_Entry = "~L~"
            Common_Procedures.UR.Jobwork_Piece_Delivery_Entry = "~L~"
            Common_Procedures.UR.Jobwork_Piece_Inspection_Entry = "~L~"
            Common_Procedures.UR.Jobwork_Conversion_Bill_Entry = "~L~"
            Common_Procedures.UR.Jobwork_Pavu_Yarn_Return_Delivery_Entry = "~L~"
            Common_Procedures.UR.Jobwork_EmptyBeam_Return_Delivery_Entry = "~L~"

            Common_Procedures.UR.TEXTILE_JOBWORK_REGISTER_REPORT = "~L~"
            Common_Procedures.UR.TEXTILE_JOBWORK_PENDING_REGISTER_REPORT = "~L~"
            Common_Procedures.UR.TEXTILE_JOBWORK_YARN_STOCK_REPORT = "~L~"
            Common_Procedures.UR.TEXTILE_JOBWORK_PAVU_STOCK_REPORT = "~L~"
            Common_Procedures.UR.TEXTILE_JOBWORK_EMPTYBEAM_STOCK_REPORT = "~L~"
            Common_Procedures.UR.TEXTILE_JOBWORK_EMPTYBAG_STOCK_REPORT = "~L~"
            Common_Procedures.UR.TEXTILE_JOBWORK_EMPTYCONE_STOCK_REPORT = "~L~"
            Common_Procedures.UR.TEXTILE_JOBWORK_ALL_STOCK_LEDGER_REPORT = "~L~"
            Common_Procedures.UR.TEXTILE_JOBWORK_ALL_STOCK_SUMMARY_REPORT = "~L~"
            Common_Procedures.UR.TEXTILE_JOBWORK_JOBWORKER_STOCK_STATEMENT_REPORT = "~L~"
            Common_Procedures.UR.TEXTILE_JOBWORK_DAY_TRANSACTION_REPORT = "~L~"
            Common_Procedures.UR.TEXTILE_JOBWORK_RECONCILIATION_REPORT = "~L~"

            Common_Procedures.UR.TEXTILE_JOBWORK_DELIVERY_CHALLAN_REPORTS = "~L~"
            Common_Procedures.UR.TEXTILE_JOBWORK_INVOICE_REPORT = "~L~"
            Common_Procedures.UR.TEXTILE_JOBWORK_RECEIVED_REPORT = "~L~"
            Common_Procedures.UR.TEXTILE_JOBWORK_SIZED_BEAM_STOCK_ON_FLOOR = "~L~"
            Common_Procedures.UR.TEXTILE_JOBWORK_PRODUCTION_SUMMARY_LOOM_WISE = "~L~"
            Common_Procedures.UR.TEXTILE_JOBWORK_PIECE_CHECKING_REPORT = "~L~"
            Common_Procedures.UR.TEXTILE_JOBWORK_BEAM_RUNOUT_REGISTER = "~L~"
            Common_Procedures.UR.TEXTILE_JOBWORK_RUNNING_BEAM_DETAILS_ALL_LOOM = "~L~"
            Common_Procedures.UR.TEXTILE_JOBWORK_WARP_LOADING_LOOM_WISE = "~L~"
            Common_Procedures.UR.TEXTILE_JOBWORK_VENDOR_GRADING_REPORT = "~L~"
            Common_Procedures.UR.Spares_PurchaseParty_Creation = "~L~"
            Common_Procedures.UR.Sizing_Delivery_Party_Creation = "~L~"
            Common_Procedures.UR.Firewood_PurchaseParty_Creation = "~L~"
            Common_Procedures.UR.Bag_Type_Creation = "~L~"
            Common_Procedures.UR.Cone_Type_Creation = "~L~"
            Common_Procedures.UR.Delivery_Address_Creation = "~L~"
            Common_Procedures.UR.Sizing_Item_Creaion = "~L~"
            Common_Procedures.UR.Unit_Creation = "~L~"
            Common_Procedures.UR.Sizing_BeamNo_Creation = "~L~"
            Common_Procedures.UR.Sizing_WasteCreation = "~L~"
            Common_Procedures.UR.Sizing_Spares_Creation = "~L~"
            Common_Procedures.UR.SizingMachine_No_Creation = "~L~"

            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_YARN_RECEIPT = "~L~"
            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_EMPTYBEAM_RECEIPT = "~L~"
            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_SIZING_SPECIFICATION = "~L~"
            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_STATEMENT = "~L~"
            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_INVOICE = "~L~"
            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CASHDISCOUNT = "~L~"
            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_PAVU_DELIVERY = "~L~"
            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_YARN_DELIVERY = "~L~"
            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_EMPTY_BEAM_DELIVERY = "~L~"
            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_KURAI_PAVU_RECEIPT = "~L~"
            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_EMPTY_BEAM_BAG_EXCESS_SHORT = "~L~"
            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_YARN_TRANSFER = "~L~"
            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_YARN_EXCESS_SHORT = "~L~"
            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_PURCHASE_ORDER = "~L~"
            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_PURCHASE = "~L~"
            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_PURCHASE_RETURN = "~L~"
            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_EXCESS_SHORT = "~L~"
            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_WASTE_MATERIAL_SALES = "~L~"
            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_SPARES_PURCHASE = "~L~"
            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_FIREWOOD_PURCHASE = "~L~"
            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_FIREWOOD_CONSUMPTION = "~L~"
            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_GENERAL_DELIVERY = "~L~"


            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_EMPTY_BEAM_REGISTER = "~L~"
            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_EMPTY_BAGS_REGISTER = "~L~"
            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_CONES_REGISTER = "~L~"
            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_YARN_REGISTER = "~L~"
            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_PAVU_REGISTER = "~L~"
            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_ALL_STOCK_LEDGER = "~L~"
            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_ALL_STOCK_SUMMARY = "~L~"
            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_ALL_STOCK_STATEMENTS = "~L~"
            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_PRODUCTION_REGISTER = "~L~"
            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_INVOICE_REGISTER = "~L~"
            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_CASH_DISCOUNT = "~L~"
            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_CHEMICAL_REGISTER = "~L~"
            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_HARDWARE_PURCHASE = "~L~"
            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_FIREWOOD_PURCHASE = "~L~"
            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_FIREWOOD_CONSUMPTION_REGISTER = "~L~"
            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_WASTE_MATERIAL = "~L~"
            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_DAY_TRANSACTION = "~L~"
            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_GST_RETURN = "~L~"
            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_TDS_REPORT = "~L~"

            Common_Procedures.UR.OEENTRY_COTTON_PURCHASE_ENTRY = "~L~"
            Common_Procedures.UR.OEENTRY_COTTON_PURCHASE_RETURN_ENTRY = "~L~"
            Common_Procedures.UR.OEENTRY_MIXING_ENTRY = "~L~"
            Common_Procedures.UR.OEENTRY_PRODUCTION_ENTRY = "~L~"
            Common_Procedures.UR.OEENTRY_PACKING_ENTRY = "~L~"
            Common_Procedures.UR.OEENTRY_ORDER_ENTRY = "~L~"
            Common_Procedures.UR.OEENTRY_DELIVERY_ENTRY = "~L~"
            Common_Procedures.UR.OEENTRY_INVOICE_ENTRY = "~L~"
            Common_Procedures.UR.OEENTRY_WASTE_SALES_ENTRY = "~L~"
            Common_Procedures.UR.OEENTRY_LOCAL_WASTE_SALES_ENTRY = "~L~"
            Common_Procedures.UR.OEENTRY_INVOICE_RETURN_ENTRY = "~L~"
            Common_Procedures.UR.OEENTRY_DELIVERY_RETURN_ENTRY = "~L~"
            Common_Procedures.UR.OEENTRY_BORA_STRITCHING_ENTRY = "~L~"
            Common_Procedures.UR.OEENTRY_REELING_DELIVERY_ENTRY = "~L~"
            Common_Procedures.UR.OEENTRY_REELING_RECEIPT_ENTRY = "~L~"
            Common_Procedures.UR.OEENTRY_STOCK_TRANSFER_ENTRY = "~L~"

            Common_Procedures.UR.OESPINNING_REGISTER_REPORT = "~L~"
            Common_Procedures.UR.OESPINNING_COTTON_STOCK_REPORT = "~L~"
            Common_Procedures.UR.OESPINNING_MIXING_STOCK_REPORT = "~L~"
            Common_Procedures.UR.OESPINNING_BAG_YARN_STOCK_REPORT = "~L~"
            Common_Procedures.UR.OESPINNING_LOOSE_YARN_STOCK_REPORT = "~L~"
            Common_Procedures.UR.OESPINNING_REELING_STOCK_REPORT = "~L~"
            Common_Procedures.UR.OESPINNING_HANK_YARN_STOCK_REPORT = "~L~"
            Common_Procedures.UR.OESPINNING_WASTE_STOCK_REPORT = "~L~"
            Common_Procedures.UR.OESPINNING_YARN_STOCK_BAGNOWISE_STOCK_REPORT = "~L~"
            Common_Procedures.UR.OESPINNING_ALL_STOCK_SUMMARY_REPORT = "~L~"
            Common_Procedures.UR.OESPINNING_COMMISSION_REGISTER_REPORT = "~L~"
            Common_Procedures.UR.OESPINNING_GSTR_1_REPORT = "~L~"
            Common_Procedures.UR.OESPINNING_GSTR_2_REPORT = "~L~"
            Common_Procedures.UR.OESPINNING_ORDER_PENDING_REPORT = "~L~"
            Common_Procedures.UR.OESPINNING_CARDING_STOCK_REPORT = "~L~"
            Common_Procedures.UR.OESPINNING_EMPTY_BOBIN_STOCK_DETAILS = "~L~"
            Common_Procedures.UR.OESPINNING_EMPTY_BOBIN_STOCK_SUMMARY = "~L~"

            Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_ATTENDANCE = "~L~"
            Common_Procedures.UR.PAYROLL_ENTRY_ATTENDANCE_LOG_FROM_MACHINE = "~L~"
            Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_ATTENDANCE_FROM_MACHINE = "~L~"
            Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_TIMING_ADDITION = "~L~"
            Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_SALARY = "~L~"
            Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_SALARY_ADVANCE_PAYMENT = "~L~"
            Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_ADVANCE_ADDITION = "~L~"
            Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_CREATION = "~L~"
            Common_Procedures.UR.PAYROLL_ENTRY_CATEGORY_CREATION = "~L~"
            Common_Procedures.UR.PAYROLL_ENTRY_SALARY_PAYMENT_TYPE = "~L~"
            Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_ADVANCE = "~L~"


            Common_Procedures.UR.PAYROLL_REPORT_SALARY_REGISTER = "~L~"
            Common_Procedures.UR.PAYROLL_REPORT_NET_PAY_REGISTER = "~L~"
            Common_Procedures.UR.PAYROLL_REPORT_ATTENDANCE_REGISTER = "~L~"
            Common_Procedures.UR.PAYROLL_REPORT_ATTENDANCE_MONTHWISE_REGISTER = "~L~"
            Common_Procedures.UR.PAYROLL_REPORT_EMPLOYEE_PAYMENT_REGISTER = "~L~"
            Common_Procedures.UR.PAYROLL_REPORT_EMPLOYEE_DEDUCATION = "~L~"
            Common_Procedures.UR.PAYROLL_REPORT_EMPLOYEE_ACCOUNT_DETAILS = "~L~"
            Common_Procedures.UR.PAYROLL_REPORT_EMPLOYEE_REGISTER = "~L~"
            Common_Procedures.UR.PAYROLL_REPORT_LEDGER_REPORT_ALL = "~L~"
            Common_Procedures.UR.PAYROLL_REPORT_SALARY_LEDGER = "~L~"
            Common_Procedures.UR.PAYROLL_REPORT_ADVANCE_LEDGER = "~L~"
            Common_Procedures.UR.PAYROLL_REPORT_DEPOSIT_LEDGER = "~L~"

            Common_Procedures.UR.GENERAL_REPORTS_EMPTY_BEAM_STOCK = "~L~"
            Common_Procedures.UR.GENERAL_REPORTS_YARN_STOCK_REPORTS = "~L~"
            Common_Procedures.UR.GENERAL_REPORTS_WARP_STOCK_REPORTS = "~L~"
            Common_Procedures.UR.GENERAL_REPORTS_FABRIC_STOCK_REPORTS = "~L~"
            Common_Procedures.UR.GENERAL_REPORTS_MONTHLY_PRODUCTION_REPORT = "~L~"
            Common_Procedures.UR.GENERAL_REPORTS_BEAM_TO_BEAM_RECONCILATION_REPORT = "~L~"
            Common_Procedures.UR.GENERAL_REPORTS_BEAM_TO_BEAM_RECONCILATION_SETNO_WISE = "~L~"
            Common_Procedures.UR.GENERAL_REPORTS_INHOUSE = "~L~"
            Common_Procedures.UR.GENERAL_REPORTS_AGENT_REPORT = "~L~"
            Common_Procedures.UR.GENERAL_REPORTS_GST_REPORT = "~L~"
            Common_Procedures.UR.GENERAL_REPORTS_TCS_REPORT = "~L~"
            Common_Procedures.UR.GENERAL_REPORTS_TDS_REPORT = "~L~"
            Common_Procedures.UR.ACCOUNTS_PURCHASE_REGISTER = "~L~"
            Common_Procedures.UR.ACCOUNTS_SALES_REGISTER = "~L~"



            Common_Procedures.UR.REPORTS_STORES_MASTERS = "~L~"
            Common_Procedures.UR.REPORTS_STORES_REGISTER = "~L~"
            Common_Procedures.UR.REPORTS_STORES_PURCHASE_ORDER_PENDING = "~L~"

            Common_Procedures.UR.REPORTS_STORES_MONTHLY_ITEM_ISSUE_STATEMENT = "~L~"
            Common_Procedures.UR.REPORTS_STORES_MONTHLY_ITEM_ISSUE_STATEMENT_ALL_LOOM = "~L~"
            Common_Procedures.UR.REPORTS_STORES_SERVICE_RECEIPT_ITEM_PENDING = "~L~"
            Common_Procedures.UR.REPORTS_OIL_SERVICE_PENDING = "~L~"
            Common_Procedures.UR.REPORTS_STORES_NEW_ITEM_STOCK_DETAIL = "~L~"
            Common_Procedures.UR.REPORTS_STORES_OLD_ITEM_STOCK_DETAILS_USABLE = "~L~"
            Common_Procedures.UR.REPORTS_STORES_OLD_ITEM_STOCK_DETAILS_SCRAP = "~L~"
            Common_Procedures.UR.REPORTS_STORES_ITEM_STOCK_DETAILS_ALL = "~L~"
            Common_Procedures.UR.REPORTS_STORES_NEW_ITEM_STOCK_SUMMARY = "~L~"
            Common_Procedures.UR.REPORTS_STORES_OLD_ITEM_STOCK_SUMMARY_USABLE = "~L~"
            Common_Procedures.UR.REPORTS_STORES_OLD_ITEM_STOCK_SUMMARY_SCRAP = "~L~"
            Common_Procedures.UR.REPORTS_STORES_ITEM_STOCK_SUMMARY_ALL = "~L~"
            Common_Procedures.UR.REPORTS_STORES_ITEM_STOCK_VALUE = "~L~"
            Common_Procedures.UR.REPORTS_STORES_PURCHASE_PLANNING = "~L~"


        Else

            Da = New SqlClient.SqlDataAdapter("select * from User_Access_Rights where user_idno = " & Str(Val(Common_Procedures.User.IdNo)) & " and (Software_Module_IdNo = " & Str(Val(Common_Procedures.SoftwareTypes.Textile_Software)) & " or Software_Module_IdNo = 0)", Cn1)
            Dt1 = New DataTable
            Da.Fill(Dt1)

            If Dt1.Rows.Count > 0 Then

                For i = 0 To Dt1.Rows.Count - 1

                    Select Case Trim(UCase(Dt1.Rows(i).Item("Entry_Code").ToString))

                        Case "MASTER_LEDGER_CREATION"
                            Common_Procedures.UR.Ledger_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_AGENT_CREATION"
                            Common_Procedures.UR.Agent_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_SIZING_CREATION"
                            Common_Procedures.UR.Sizing_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_WEAVER_CREATION"
                            Common_Procedures.UR.Weaver_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_JOBWORKER_CREATION"
                            Common_Procedures.UR.JOBWORKER_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_REWINDING_CREATION"
                            Common_Procedures.UR.Rewinding_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_SEWING_CREATION"
                            Common_Procedures.UR.Sewing_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "MASTER_TRANSPORT_CREATION"
                            Common_Procedures.UR.Transport_Creation = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "MASTER_GODOWN_CREATION"
                            Common_Procedures.UR.Godown_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_ACCOUNTGROUP_CREATION"
                            Common_Procedures.UR.Account_Group_creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_TAX_CREATION"
                            Common_Procedures.UR.Tax_Creation = Dt1.Rows(i).Item("Access_Type").ToString



                        Case "MASTER_AREA_CREATION"
                            Common_Procedures.UR.Area_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_ITEMGROUP_CREATION"
                            Common_Procedures.UR.ItemGroup_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_GST_AC_SETTINGS"
                            Common_Procedures.UR.GST_AC_SETTINGS = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_COUNT_CREATION"
                            Common_Procedures.UR.Count_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                            'Case "MASTER_YARNCOUNT_TYPE_CREATION"
                            '    Common_Procedures.UR.YarnCount_type_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                            'Case "MASTER_YARNCOUNT_FIBER_CREATION"
                            '    Common_Procedures.UR.YarnCount_Fiber_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_MILL_CREATION"
                            Common_Procedures.UR.Mill_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_FIBRE_CREATION"
                            Common_Procedures.UR.Fibre_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_FIBRE_LOT_NO_CREATION"
                            Common_Procedures.UR.Fibre_Lot_No_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "MASTER_ENDSCOUNT_CREATION"
                            Common_Procedures.UR.Endscount_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_CLOTH_CREATION"
                            Common_Procedures.UR.cloth_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_CLOTH_SET_CREATION"
                            Common_Procedures.UR.Cloth_Set_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_CLOTH_SALES_RATE_MASTER"
                            Common_Procedures.UR.Cloth_Sales_Rate_Master = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_FABRIC_BITS_GROUP_CREATION"
                            Common_Procedures.UR.Fabric_Bits_Group_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "FORMULA_WEAVER_YARN_CONSUMPTION"
                            Common_Procedures.UR.Formula_Weaver_Yarn_Consumption = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "FORMULA_WEAVER_COOLIE"
                            Common_Procedures.UR.Formula_Weaver_Coolie = Dt1.Rows(i).Item("Access_Type").ToString

                            'Case "MASTER_CLOTHSET_CREATION"
                            '    Common_Procedures.UR.clothset_Creation = Dt1.Rows(i).Item("Access_Type").ToString



                            'Case "MASTER_FABRIC_GROUP_CREATION"
                            '    Common_Procedures.UR.Fabric_group_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                            'Case "MASTER_FABRIC_CATEGORY_CREATION"
                            '    Common_Procedures.UR.Fabric_Category_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                            'Case "MASTER_FABRIC_SUBCATEGORY_CREATION"
                            '    Common_Procedures.UR.Fabric_SUBCategory_Creation = Dt1.Rows(i).Item("Access_Type").ToString


                            'Case "MASTER_VARIETY_CREATION"
                            '    Common_Procedures.UR.variety_Creation = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "MASTER_LOOM_CREATION"
                            Common_Procedures.UR.Loom_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_LOOMTYPE_CREATION"
                            Common_Procedures.UR.Loom_type_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_BEAM_WIDTH_CREATION"
                            Common_Procedures.UR.Masters_Beam_Width_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_VENDOR_CREATION"
                            Common_Procedures.UR.Vendor_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_BORDER_SIZE_CREATION"
                            Common_Procedures.UR.Border_size_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_BOBIN_SIZE_CREATION"
                            Common_Procedures.UR.Bobin_size_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_EMPLOYEE_CREATION"
                            Common_Procedures.UR.Employee_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                            'Case "MASTER_COLOUR_CREATION"
                            '    Common_Procedures.UR.Colur_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                            '    'Case "MASTER_WEAVER_LOOM_DETAILS"
                            '    Common_Procedures.UR.Weaver_loom_Details = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "MASTER_CHEQUE_PRINTING_POSITION"
                            Common_Procedures.UR.Cheque_Printing_Position = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_FABRIC_LOT_NO_CREATION"
                            Common_Procedures.UR.Fabric_Lot_No_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_VARIETY_CREATION"
                            Common_Procedures.UR.Variety_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "MASTER_VEHICLENO_CREATION"
                            Common_Procedures.UR.VehicleNo_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_LOADING_UNLOADING_RATE_CREATION"
                            Common_Procedures.UR.Loading_UnLoading_Rate = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "MASTER_CHECKING_TABLENO_CREATION"
                            Common_Procedures.UR.Checking_Tableno_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_PIECECHECKING_DEFECTS"
                            Common_Procedures.UR.PieceChecking_Defects = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_APP_USER_CREATION"
                            Common_Procedures.UR.App_User_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "MASTER_USER_CREATION"
                            Common_Procedures.UR.user_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                            ''**************************************************************************************************************************


                        Case "MASTER_LEDGER_OPENING_STOCK"
                            Common_Procedures.UR.Textile_OpeningStock = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "MASTER_LEDGER_CLOSING_VALUE_STOCK"
                            Common_Procedures.UR.Closing_Stock_value = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "MASTER_LEDGER_CLOTH_ORDER_INDENT_OPENING"
                            Common_Procedures.UR.Cloth_Order_Indent_Opening = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "MASTER_LEDGER_CLOTH_DELIVERY_OPENING"
                            Common_Procedures.UR.Cloth_Delivery_opening = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "MASTER_LEDGER_UNCHECKED_CLOTH_OPENING"
                            Common_Procedures.UR.Unchecked_cloth_Opening = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "MASTER_LEDGER_PIECE_OPENING"
                            Common_Procedures.UR.Piece_Opening = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "MASTER_LEDGER_LOOM_OPENING"
                            Common_Procedures.UR.Loom_Opening = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "MASTER_LEDGER_BALE_OPENING"
                            Common_Procedures.UR.Bale_Opening = Dt1.Rows(i).Item("Access_Type").ToString
                            '=================================================================================================================


                        Case "ENTRY_YARN_PURCHASE_ORDER"
                            Common_Procedures.UR.Yarn_Purchase_Order_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_YARN_PURCHASE"
                            Common_Procedures.UR.Yarn_Purchase_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_YARN_PURCHASE_RECEIPT"
                            Common_Procedures.UR.Yarn_Purchase_Receipt_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_YARN_PURCHASE_RETURN"
                            Common_Procedures.UR.Yarn_Purchase_Return_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_YARN_SALES_ORDER"
                            Common_Procedures.UR.Yarn_Sales_Order_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_YARN_SALES_DELIVERY"
                            Common_Procedures.UR.yarn_Delivery_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                            'Case "ENTRY_YARN_RECEIPT"
                            '    Common_Procedures.UR.yarn_receipt_Entry = Dt1.Rows(i).Item("Access_Type").ToString



                        Case "ENTRY_YARN_SALES"
                            Common_Procedures.UR.Yarn_Sales_Entry = Dt1.Rows(i).Item("Access_Type").ToString
                            Common_Procedures.UR.Yarn_Sales_Entry_vat = Dt1.Rows(i).Item("Access_Type").ToString

                        'Case "ENTRY_YARN_SALES_VAT"
                        '    Common_Procedures.UR.Yarn_Sales_Entry_vat = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_YARN_PROFORMA_SALES"
                            Common_Procedures.UR.Yarn_Proforma_Sales_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_YARN_SALES_RETURN"
                            Common_Procedures.UR.Yarn_Sales_Return_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_YARN_TEST"
                            Common_Procedures.UR.Yarn_test_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_YARN_PURCHASE_BILL_MAKING_ENTRY"
                            Common_Procedures.UR.Yarn_Purchase_Bill_Making_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_PAVU_PURCHASE"
                            Common_Procedures.UR.Pavu_Purchase_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_PAVU_SALES"
                            Common_Procedures.UR.Pavu_Sales_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_CLOTH_PURCHASE_ORDER"
                            Common_Procedures.UR.Cloth_Purchase_order_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_CLOTH_PURCHASE_OFFER"
                            Common_Procedures.UR.Cloth_Purchase_offer_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_CLOTH_PURCHASE_RECEIPT"
                            Common_Procedures.UR.Cloth_Purchase_Receipt_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_CLOTH_PURCHASE"
                            Common_Procedures.UR.Cloth_Purchase_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_CLOTH_PURCHASE_RETURN"
                            Common_Procedures.UR.Cloth_Purchase_Return_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_CLOTH_PURCHASE_RECEIPT_CHECKING"
                            Common_Procedures.UR.Cloth_Purchase_Checking_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_CLOTH_SALES_ORDER_INDENT"
                            Common_Procedures.UR.ClothSales_Order_Indent_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_CLOTH_SALES_ORDER_ENTRY_CLOSE_OPTION"
                            Common_Procedures.UR.ClothSales_OrderIndent_Entry_Close_Option = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_CLOTH_SALES_INVOICE"
                            Common_Procedures.UR.ClothSales_Cloth_Invoice_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_CLOTH_SALES_INVOICE_VAT"
                            Common_Procedures.UR.ClothSales_Cloth_Invoice_Entry_vat = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_CLOTH_SALES_RETURN"
                            Common_Procedures.UR.ClothSales_Sales_Return_Entry = Dt1.Rows(i).Item("Access_Type").ToString



                        Case "ENTRY_CLOTH_DELIVERY"
                            Common_Procedures.UR.ClothSales_Cloth_Delivery_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_CLOTH_DELIVERY_RETURN"
                            Common_Procedures.UR.ClothSales_Delivery_Return_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_CLOTH_PROFORMA_INVOICE"
                            Common_Procedures.UR.ClothSales_Proforma_Invoice_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_CLOTH_BUYER_OFFER"
                            Common_Procedures.UR.ClothSales_Buyer_offer_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_CLOTH_ROLL_PACKING"
                            Common_Procedures.UR.ClothSales_Roll_Packing_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_CLOTH_PIECE_CHECKING"
                            Common_Procedures.UR.ClothSales_Piece_checking_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_CLOTH_BALE_DELIVERY_ENTRY"
                            Common_Procedures.UR.ClothSales_Bale_Delivery_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_EMPTYBEAM_PURCHASE"
                            Common_Procedures.UR.EmptyBeam_Purchase_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_EMPTYBEAM_SALES"
                            Common_Procedures.UR.EmptyBeam_sales_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_GENERAL_OTHER_PURCHASE"
                            Common_Procedures.UR.General_Other_purchase_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_GENERAL_OTHER_SALES"
                            Common_Procedures.UR.General_Other_Sales_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_GST_CREDIT_NOTE"
                            Common_Procedures.UR.Credit_note_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_GST_DEBIT_NOTE"
                            Common_Procedures.UR.Debit_note_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_GENERAL_DELIVERY"
                            Common_Procedures.UR.General_Delivery_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                            'Case "ENTRY_ADVANCE_PAYMENT"
                            '    Common_Procedures.UR.Advance_payment = Dt1.Rows(i).Item("Access_Type").ToString








                        Case "ENTRY_SIZING_YARN_DELIVERY"
                            Common_Procedures.UR.Sizing_Yarn_Delivery_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_SIZING_PAVU_RECEIPT"
                            Common_Procedures.UR.Sizing_pavu_Receipt_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_SIZING_SPECIFICATION"
                            Common_Procedures.UR.Sizing_Specification_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_SIZING_YARN_RECEIPT"
                            Common_Procedures.UR.Sizing_Yarn_Receipt_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_SIZING_BEAM_CLOSE"
                            Common_Procedures.UR.Sizing_Beam_Close_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_SIZING_YARN RECEIPT_BY_SIZING_UNIT"
                            Common_Procedures.UR.Sizing_Yarn_Receipt_By_Sizing = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_SIZING_PAVU_DELIVERY_FROM_SIZING"
                            Common_Procedures.UR.Sizing_Pavu_Delivery_From_Sizing_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_SIZING_YARN_DELIVERY_FROM_SIZING"
                            Common_Procedures.UR.Sizing_Yarn_Delivery_From_Sizing_Entry = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_REWINDING_DELIVERY"
                            Common_Procedures.UR.Rewinding_Delivery_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_REWINDING_RECEIPT"
                            Common_Procedures.UR.Rewinding_Receipt_Entry = Dt1.Rows(i).Item("Access_Type").ToString




                            'Case "ENTRY_WEAVER_PAVU_AND_BOBIN_REQUIREMENT"
                            '    Common_Procedures.UR.Weaver_pavu_and_Bobin_requirement_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_WEAVER_PAVU_DELIVERY"
                            Common_Procedures.UR.Weaver_Pavu_Delivery_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_WEAVER_YARN_DELIVERY"
                            Common_Procedures.UR.Weaver_Yarn_Delivery_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_WEAVER_PAVU_RECEIPT"
                            Common_Procedures.UR.Weaver_Pavu_Rceipt_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_WEAVER_YARN_RECEIPT"
                            Common_Procedures.UR.Weaver_Yarn_Rceipt_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_WEAVER_KURAI_PAVU_RECEIPT"
                            Common_Procedures.UR.Weaver_KuraiPavu_Rceipt_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_WEAVER_PIECE_CHECKING"
                            Common_Procedures.UR.Weaver_Piece_Checking_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_WEAVER_PIECE_CHECKING_APPROVAL"
                            Common_Procedures.UR.Weaver_Piece_Checking_Entry_ApprovalStatus = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_WEAVER_PIECE_CHECKING_BARCODE_PRINT"
                            Common_Procedures.UR.Weaver_Piece_Checking_Entry_BarCode_Print_Status = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_WEAVER_PIECE_CHECKING_WARP_WEFT_STOCK_UPDATION"
                            Common_Procedures.UR.Weaver_Piece_Checking_Entry_Warp_Weft_Stock_Updation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_WEAVER_WAGES"
                            Common_Procedures.UR.Weaver_Wages_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_WEAVER_JOBWORK_BILL"
                            Common_Procedures.UR.Weaver_Weaving_Jobwork_Bill_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_SLEVAGE_CONE_INVOICE_ENTRY"
                            Common_Procedures.UR.Weaver_Slevedge_Cone_Invoice_Entry = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_WEAVERWAGES_CHANGEDATE"
                            Common_Procedures.UR.Weaver_Wages_Entry_ChangeDate = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_WEAVER_CLOTH_RECEIPT"
                            Common_Procedures.UR.Weaver_Cloth_Rceipt_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_WEAVERCLOTHRECEIPT_EDIT_FABRICNAME_AFTERLOCK"
                            Common_Procedures.UR.Weaver_ClothRceipt_Entry_Edit_FABRICNAME_AFTERLOCK = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_WEAVER_CLOTH_RECEIPT_AND_CHECKING"
                            Common_Procedures.UR.Weaver_ClothReceipt_and_PieceChecking_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_WEAVER_DEBIT"
                            Common_Procedures.UR.Weaver_Debit_Entry = Dt1.Rows(i).Item("Access_Type").ToString




                        Case "ENTRY_WEAVER_BOBIN_RETURN"
                            Common_Procedures.UR.Weaver_bobin_Return_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_WEAVER_ADVANCE_PAYMENT"
                            Common_Procedures.UR.Weaver_Advance_payment = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_LOT_APPROVAL"
                            Common_Procedures.UR.Lot_Approval_Entry = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_WEAVER_LOT_CHECKING_PLANING_ENTRY"
                            Common_Procedures.UR.Weaver_Lot_Checking_Planing_Entry = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_LOT_ALLOTMENT"
                            Common_Procedures.UR.Lot_Allotment_Details = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_WEAVER_PIECE_APPROVAL"
                            Common_Procedures.UR.Weaver_Piece_Approval_Entry = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_WEAVER_PIECE_APPROVAL_ENTRY_EDIT_DATE"
                            Common_Procedures.UR.Weaver_Piece_Approval_Entry_Edit_DateColumn = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_WEAVER_PIECE_APPROVAL_ENTRY_BARCODE_PRINT"
                            Common_Procedures.UR.Weaver_Piece_Approval_Entry_BarCode_Print_Status = Dt1.Rows(i).Item("Access_Type").ToString



                        Case "ENTRY_WEAVER_BOBIN_DELIVERY"
                            Common_Procedures.UR.Weaver_bobin_delivery_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                            'Case "ENTRY_EMPTY_BOBIN_RECEIPT"
                            '    Common_Procedures.UR.Empty_Bobin_Receipt_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_PAVUYARN_DELIVERY"
                            Common_Procedures.UR.PavuYarn_Delivery_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_PAVUYARN_RECEIPT"
                            Common_Procedures.UR.PavuYarn_Receipt_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_EMBTY_BEAMBAGCONE_DELIVERY"
                            Common_Procedures.UR.Empty_BeamBagCone_Delivery_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_EMBTY_BEAMBAGCONE_RECEIPT"
                            Common_Procedures.UR.Empty_BeamBagCone_Receipt_Entry = Dt1.Rows(i).Item("Access_Type").ToString



                        Case "ENTRY_WEAVER_PAYMENT"
                            Common_Procedures.UR.Weaver_payment_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_PARTY_AMOUNT_RECEIPT"
                            Common_Procedures.UR.Party_Amount_Receipt_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_CHEQUE_RETURN"
                            Common_Procedures.UR.Cheque_return_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_PACKING_SLIP"
                            Common_Procedures.UR.Packing_slip_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_YARN_EXCESS_SHORT"
                            Common_Procedures.UR.Yarn_Excess_Short_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_PAVU_EXCESS_SHORT"
                            Common_Procedures.UR.Pavu_Excess_Short_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_CLOTH_EXCESS_SHORT"
                            Common_Procedures.UR.Cloth_Excess_Short_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_PIECE_EXCESS_SHORT"
                            Common_Procedures.UR.Piece_Excess_Short_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_EMPTYBEAM_EXCESS_SHORT"
                            Common_Procedures.UR.EmptyBeam_Excess_Short_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_PIECE_JOINING_EXCESS_SHORT"
                            Common_Procedures.UR.Piece_joining_Entry = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_YARN_TRANSFER"
                            Common_Procedures.UR.Yarn_Transfer_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_PAVU_TRANSFER"
                            Common_Procedures.UR.Pavu_Transfer_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_CLOTH_TRANSFER"
                            Common_Procedures.UR.Cloth_Transfer_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_PIECE_TRANSFER"
                            Common_Procedures.UR.Piece_Transfer_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_PAVU_TRANSFER_BEAMWISE"
                            Common_Procedures.UR.Pavu_Transfer_Beam_wise_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_BALE_TRANSFER"
                            Common_Procedures.UR.Bale_Transfer_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_COSTING"
                            Common_Procedures.UR.Costing_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_PROCESSING_JOB_ORDER"
                            Common_Procedures.UR.Entry_Processing_Job_Order = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_PROCESSED_FABRIC_RECEIPT_FROM_PROCESSING"
                            Common_Procedures.UR.Entry_Processed_Fabric_Receipt_From_Processing = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_PROCESSED_FABRIC_INSPECTION"
                            Common_Procedures.UR.Entry_Processed_Fabric_Inspection = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_PROCESSING_BILL_MAKING"
                            Common_Procedures.UR.Entry_Processing_Bill_Making = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_FABRIC_RETURN_FROM_PROCESSING"
                            Common_Procedures.UR.Entry_Fabric_Return_From_Processing = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_PROCESSED_FABRIC_INVOICE_GST"
                            Common_Procedures.UR.Entry_Processed_Fabric_Invoice_Gst = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_PROCESSED_FABRIC_INVOICE_VAT"
                            Common_Procedures.UR.Entry_Processed_Fabric_Invoice_Vat = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_PROCESSED_WASTE_DELIVERY"
                            Common_Procedures.UR.Entry_Processed_Waste_Delivery = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_JOBWORK_FOR_SEWING"
                            Common_Procedures.UR.Entry_JobCard_For_Sewing = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_FABRIC_DELIVERY_TO_SEWING"
                            Common_Procedures.UR.Entry_Fabric_Delivery_To_Sewing = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_FABRIC_DELIVERY_TO_PROCESSING"
                            Common_Procedures.UR.Entry_Fabric_Delivery_To_Processing = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_FINISHED_PRODUCT_RECEIPT_FROM_SEWING"
                            Common_Procedures.UR.Entry_Finished_Product_Receipt_From_Sewing = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_YARN_DELIVERY_TO_PROCESSING"
                            Common_Procedures.UR.Entry_Yarn_Delivery_To_Processing = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_YARN_RECEIPT_FROM_PROCESSING"
                            Common_Procedures.UR.Entry_Yarn_Receipt_From_Processing = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_BILL_MAKING"
                            Common_Procedures.UR.Entry_Bill_Making = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_SPINNING_YARN_DELIVERY"
                            Common_Procedures.UR.Entry_Spinning_Yarn_Delivery = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_SPINNING_YARN_RECEIPT"
                            Common_Procedures.UR.Entry_Spinning_Yarn_Receipt = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_SPINNING_YARN_BILL_MAKING"
                            Common_Procedures.UR.Entry_Spinning_Yarn_Bill_Making = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_DOUBLING_YARN_DELIVERY"
                            Common_Procedures.UR.Entry_Doubling_Yarn_Delivery = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_DOUBLING_YARN_RECEIPT"
                            Common_Procedures.UR.Entry_Doubling_Yarn_Receipt = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_DOUBLING_YARN_BILL_MAKING"
                            Common_Procedures.UR.Entry_Doubling_Yarn_Bill_Making = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_REELING_YARN_DELIVERY"
                            Common_Procedures.UR.Entry_Reeling_Yarn_Delivery = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_REELING_YARN_RECEIPT"
                            Common_Procedures.UR.Entry_Reeling_Yarn_Receipt = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_REELING_YARN_BILL_MAKING"
                            Common_Procedures.UR.Entry_Reeling_Yarn_Bill_Making = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_COTTON_PURCHASE_ENTRY"
                            Common_Procedures.UR.Entry_Cotton_Purchase_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_COTTON_SALES_ENTRY"
                            Common_Procedures.UR.Entry_Cotton_Sales_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_FIBRE_SALES_ORDER"
                            Common_Procedures.UR.Entry_Fibre_Sales_Order = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_FIBRE_SALES_INVOICE"
                            Common_Procedures.UR.Entry_Fibre_Sales_Invoice = Dt1.Rows(i).Item("Access_Type").ToString

                        'Case "ENTRY_PROCESSING"
                        '    Common_Procedures.UR.Processing_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        'Case "ENTRY_SEWING"
                        '    Common_Procedures.UR.Sewing_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        'Case "ENTRY_YARN_PROCESSING"
                        '    Common_Procedures.UR.Yarn_Processing_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_COSTING"
                            Common_Procedures.UR.Costing_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_WEAVER_CRIMP_CONSUMPTION_ENTRY"
                            Common_Procedures.UR.Crimp_entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_VAN_TRIP"
                            Common_Procedures.UR.VanTrip_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_CLOTH_RETURN_DELIVERY_ENTRY"
                            Common_Procedures.UR.Weaver_Cloth_Return_Delivery = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_BOBIN_PURCHASE"
                            Common_Procedures.UR.Bobin_purchase_entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_BOBIN_SALES_ORDER"
                            Common_Procedures.UR.Bobin_Sales_order_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_BOBIN_PRODUCTION"
                            Common_Procedures.UR.Bobin_Production_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_JARI_PRODUCTION"
                            Common_Procedures.UR.Jari_production_Entry = Dt1.Rows(i).Item("Access_Type").ToString



                        Case "ENTRY_BOBIN_SALES_DELIVERY"
                            Common_Procedures.UR.Bobin_Sales_delivery_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_BOBIN_SALES_DELIVERY_RETURN"
                            Common_Procedures.UR.Bobin_Sales_delivery_Return_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_JARI_SALES_DELIVERY"
                            Common_Procedures.UR.Jari_Sales_delivery_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_JARI_SALES_RETURN"
                            Common_Procedures.UR.Jari_Sales_Return_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_EMPTY_BOBIN_DELIVERY"
                            Common_Procedures.UR.Empty_Bobin_Delivery = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_EMPTY_BOBIN_RECEIPT"
                            Common_Procedures.UR.Empty_Bobin_Receipt = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_PROFORMA_BOBIN_SALES"
                            Common_Procedures.UR.Proforma_bobin_sales = Dt1.Rows(i).Item("Access_Type").ToString

                            '=================================================================================================================


                        Case "ENTRY_STORES_PURCHASE_INWARD"
                            Common_Procedures.UR.Store_purchase_Inward_entry = Dt1.Rows(i).Item("Access_Type").ToString




                        Case "ENTRY_STORES_PURCHASE_ORDER"
                            Common_Procedures.UR.Store_purchase_Order_entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_STORES_PURCHASE_RETURN"
                            Common_Procedures.UR.Store_purchase_Return_entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_STORES_ITEM_ISSUE_TO_MACHINE"
                            Common_Procedures.UR.Store_Item_Issue_To_machine = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_STORES_ITEM_RETURN_FROM_MACHINE"
                            Common_Procedures.UR.Store_Item_Return_from_Machine = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_STORES_ITEM_DELIVERY"
                            Common_Procedures.UR.Store_Item_Delivery_Entry = Dt1.Rows(i).Item("Access_Type").ToString



                        Case "ENTRY_STORES_ITEM_RECEIPT"
                            Common_Procedures.UR.Store_Item_Receipt_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_STORES_SERVICE_DELIVERY"
                            Common_Procedures.UR.Store_Service_Delivery_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_STORES_SERVICE_RECEIPT"
                            Common_Procedures.UR.Store_Service_Receipt_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_STORES_GATE_PASS"
                            Common_Procedures.UR.Stores_gate_Pass_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_STORES_ITEM_EXCESS"
                            Common_Procedures.UR.Stores_Item_Excess_Short_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_STORES_DISPOSE"
                            Common_Procedures.UR.Stores_Dispose_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_STORES_OIL_SERVICE"
                            Common_Procedures.UR.Stores_Oil_Service_Entry = Dt1.Rows(i).Item("Access_Type").ToString










                            '=================================================================================================================


                        Case "ENTRY_VOUCHER"
                            Common_Procedures.UR.Voucher_Entry = Dt1.Rows(i).Item("Access_Type").ToString



                        Case "ACCOUNTS_LEDGER_REPORT"
                            Common_Procedures.UR.Accounts_Ledger = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_LEDGER_WITH_DUEDAYS_REPORT"
                            Common_Procedures.UR.Accounts_Ledger_with_DueDays = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ACCOUNTS_GROUPLEDGER_REPORT"
                            Common_Procedures.UR.Accounts_GroupLedger = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_DAYBOOK"
                            Common_Procedures.UR.Accounts_DayBook = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ACCOUNTS_ALL_LEDGER"
                            Common_Procedures.UR.Accounts_AllLedger = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_TB"
                            Common_Procedures.UR.Accounts_TB = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_PROFIT_LOSS"
                            Common_Procedures.UR.Accounts_Profit_Loss = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_BALANCESHEET"
                            Common_Procedures.UR.Accounts_BalanceSheet = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_CUSTOMERBILLS"
                            Common_Procedures.UR.Accounts_CustomerBills = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_AGENTBILLS"
                            Common_Procedures.UR.Accounts_AgentBills = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_AGENT_COMMISSION"
                            Common_Procedures.UR.Accounts_Agentcommission = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_ACCOUNTS_RECEIVABLE_REPORT"
                            Common_Procedures.UR.Accounts_Accounts_Receivable_Report = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_ACCOUNTS_PAYABLE_REPORT"
                            Common_Procedures.UR.Accounts_Accounts_Payable_Report = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_VOUCHERREGISTER"
                            Common_Procedures.UR.Accounts_VoucherRegister = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_PARTY_SALES_LIST_INVOICE"
                            Common_Procedures.UR.Accounts_Party_Sales_Register_Invoice = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_SALES_PARTY_LEDGER_PRINT"
                            Common_Procedures.UR.Accounts_Sales_party_Ledger_Print = Dt1.Rows(i).Item("Access_Type").ToString
                            '=================================================================================================================

                        Case "ACCOUNTS_PURCHASE_PURCHASE_ENTRY_GST"
                            Common_Procedures.UR.Accounts_Purchase_Purchase_Entry_Gst = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_PURCHASE_PURCHASE_RETURN"
                            Common_Procedures.UR.Accounts_Purchase_Purchase_Return = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_PURCHASE_PAYMENT_BANK"
                            Common_Procedures.UR.Accounts_Purchase_Payment_Bank = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_PURCHASE_PAYMENT_CASH"
                            Common_Procedures.UR.Accounts_Purchase_Payment_Cash = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_PURCHASE_DEBIT_NOTE_ENTRY"
                            Common_Procedures.UR.Accounts_Purchase_Debit_Note_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_PURCHASE_DATE_WISE_LEDGER"
                            Common_Procedures.UR.Accounts_Purchase_Date_Wise_Ledger = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_PURCHASE_OUTSTANDING_PENDING_DUES_DATA_WISE"
                            Common_Procedures.UR.Accounts_Purchase_Outstanding_Pending_Dues_Date_Wise = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_PURCHASE_GROUP_LEDGER"
                            Common_Procedures.UR.Accounts_Purchase_Group_Ledger = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_PURCHASE_ITEM_EXCESS_SHORT_ENTRY"
                            Common_Procedures.UR.Accounts_Purchase_Item_Excess_Short_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                            '==================================================================================================================
                        Case "ACCOUNTS_SALES_SALES_ENTRY_GST"
                            Common_Procedures.UR.Accounts_Sales_Sales_Entry_Gst = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_SALES_SALES_RETURN"
                            Common_Procedures.UR.Accounts_Sales_Sales_Return = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_SALES_PAYMENT_RECEIPT_BANK"
                            Common_Procedures.UR.Accounts_Sales_Payment_Receipt_Bank = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_SALES_PAYMENT_RECEIPT_CASH"
                            Common_Procedures.UR.Accounts_Sales_Payment_Receipt_Cash = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_SALES_CREDIT_NOTE_ENTRY"
                            Common_Procedures.UR.Accounts_Sales_Credit_Note_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_SALES_DATE_WISE_LEDGER"
                            Common_Procedures.UR.Accounts_Sales_Date_Wise_Ledger = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_SALES_OUTSTANDING_PENDING_DUES_DATE_WISE"
                            Common_Procedures.UR.Accounts_Sales_Outstanding_Pending_Dues_Date_Wise = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_SALES_OUTSTANDING_PENDING_PARTY_WISE"
                            Common_Procedures.UR.Accounts_Sales_Outstanding_Pending_Party_Wise = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_SALES_GROUP_LEDGER"
                            Common_Procedures.UR.Accounts_Sales_Group_Ledger = Dt1.Rows(i).Item("Access_Type").ToString

                            '=================================================================================================================
                        Case "ACCOUNTS_OTHERS_JOURNAL_ENTRY"
                            Common_Procedures.UR.Accounts_Others_Journal_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_OTHERS_CONTRA_ENTRY"
                            Common_Procedures.UR.Accounts_Others_Contra_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ACCOUNTS_OTHERS_PETTY_CASH"
                            Common_Procedures.UR.Accounts_Others_Petty_Cash = Dt1.Rows(i).Item("Access_Type").ToString

                            '=================================================================================================================
                        Case "REPORT_USER_MODIFICATION"
                            Common_Procedures.UR.reports_user_modifications = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_MASTER"
                            Common_Procedures.UR.Report_Master = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_REGISTER"
                            Common_Procedures.UR.Report_Register = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_SIZING_STOCK"
                            Common_Procedures.UR.Report_Sizing_Stock = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_REWINDING_STOCK"
                            Common_Procedures.UR.Report_Rewinding_Stock = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_WEAVER_STOCK"
                            Common_Procedures.UR.Report_Weaver_Stock = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_GODOWN_STOCK"
                            Common_Procedures.UR.Report_Godown_Stock = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "REPORT_DAY_TRANSACTION_DETAILS"
                            Common_Procedures.UR.Report_Day_Transaction_Details = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "REPORT_CLOTH_INVOICE_DELIVERY_PENDING"
                            Common_Procedures.UR.Report_Cloth_Invoice_Pending = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_CLOTH_SALES_ORDER_PENDING"
                            Common_Procedures.UR.Report_Cloth_Sales_Order_Pending = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "REPORT_GST_RETURN_REPORT"
                            Common_Procedures.UR.Report_GST_return = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_ANNEXURE_REPORT"
                            Common_Procedures.UR.Report_Annexure = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_TDS_REPORT"
                            Common_Procedures.UR.Report_TDS = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_TCS_REPORT"
                            Common_Procedures.UR.Report_TCS = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_STOCK_VALUE_REPORT"
                            Common_Procedures.UR.Report_Stock_Value = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "REPORT_ALL_STOCK_STATEMENT_REPORT"
                            Common_Procedures.UR.Report_All_Statements = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_COTTON_REPORTS"
                            Common_Procedures.UR.Report_Cotton_Reports = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_VAN_TRIP"
                            Common_Procedures.UR.Report_Van_Trip = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_PROCESSING_STOCK_REPORT"
                            Common_Procedures.UR.Report_Processing_Stock = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_SEWING"
                            Common_Procedures.UR.Report_Sewing = Dt1.Rows(i).Item("Access_Type").ToString

                            '=================================================================================================================
                        Case "OWNSORT_REPORTS_PURCHASE_ORDER"
                            Common_Procedures.UR.OWNSORT_REPORTS_PURCHASE_ORDER = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "OWNSORT_REPORTS_SALES_ORDER"
                            Common_Procedures.UR.OWNSORT_REPORTS_SALES_ORDER = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "OWNSORT_REPORTS_DELIVERY_CHALLAN"
                            Common_Procedures.UR.OWNSORT_REPORTS_DELIVERY_CHALLAN = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "OWNSORT_REPORTS_PACKING_LIST"
                            Common_Procedures.UR.OWNSORT_REPORTS_PACKING_LIST = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "OWNSORT_REPORTS_SALES_INVOICE"
                            Common_Procedures.UR.OWNSORT_REPORTS_SALES_INVOICE = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "OWNSORT_REPORTS_YARN_PURCHASE_REGISTER"
                            Common_Procedures.UR.OWNSORT_REPORTS_YARN_PURCHASE_REGISTER = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "OWNSORT_REPORTS_YARN_INWARD"
                            Common_Procedures.UR.OWNSORT_REPORTS_YARN_INWARD = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "OWNSORT_REPORTS_YARN_OUTWARD"
                            Common_Procedures.UR.OWNSORT_REPORTS_YARN_OUTWARD = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "OWNSORT_REPORTS_EMPTY_BEAM_DELIVERY"
                            Common_Procedures.UR.OWNSORT_REPORTS_EMPTY_BEAM_DELIVERY = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "OWNSORT_REPORTS_WARP_RECEIPT"
                            Common_Procedures.UR.OWNSORT_REPORTS_WARP_RECEIPT = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "OWNSORT_REPORTS_SIZING_SET_REPORT"
                            Common_Procedures.UR.OWNSORT_REPORTS_SIZING_SET_REPORT = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "OWNSORT_REPORTS_WARP_BEAM_LOADING_REGISTER"
                            Common_Procedures.UR.OWNSORT_REPORTS_WARP_BEAM_LOADING_REGISTER = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "OWNSORT_REPORTS_PIECE_DOFFING_REGISTER"
                            Common_Procedures.UR.OWNSORT_REPORTS_PIECE_DOFFING_REGISTER = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "OWNSORT_REPORTS_WARP_BEAM_RUNOUT_REGISTER"
                            Common_Procedures.UR.OWNSORT_REPORTS_WARP_BEAM_RUNOUT_REGISTER = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "OWNSORT_REPORTS_RETURN"
                            Common_Procedures.UR.OWNSORT_REPORTS_RETURN = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "OWNSORT_REPORTS_SIZED_BEAM_STOCK_ON_FLOOR"
                            Common_Procedures.UR.OWNSORT_REPORTS_SIZED_BEAM_STOCK_ON_FLOOR = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "OWNSORT_REPORTS_RUNNING_BEAM_DETAILS_ALL_LOOM"
                            Common_Procedures.UR.OWNSORT_REPORTS_RUNNING_BEAM_DETAILS_ALL_LOOM = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "OWNSORT_REPORTS_WARP_LOADING_LOOM_WISE"
                            Common_Procedures.UR.OWNSORT_REPORTS_WARP_LOADING_LOOM_WISE = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "OWNSORT_REPORTS_PIECE_CHECKING_REGISTER"
                            Common_Procedures.UR.OWNSORT_REPORTS_PIECE_CHECKING_REGISTER = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "OWNSORT_REPORTS_PRODUCTION_SUMMARY_LOOM_WISE"
                            Common_Procedures.UR.OWNSORT_REPORTS_PRODUCTION_SUMMARY_LOOM_WISE = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "OWNSORT_REPORTS_DAILY_FABRIC_STOCK"
                            Common_Procedures.UR.OWNSORT_REPORTS_DAILY_FABRIC_STOCK = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "OWNSORT_REPORTS_DAILY_PRODUCTION_STOCK"
                            Common_Procedures.UR.OWNSORT_REPORTS_DAILY_PRODUCTION_STOCK = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "TRADING_REPORTS_SALES_INVOICE"
                            Common_Procedures.UR.TRADING_REPORTS_SALES_INVOICE = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "TRADING_REPORTS_PURCHASE_INVOICE"
                            Common_Procedures.UR.TRADING_REPORTS_PURCHASE_INVOICE = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "TRADING_REPORTS_RECEIVED_REPORTS"
                            Common_Procedures.UR.TRADING_REPORTS_RECEIVED_REPORTS = Dt1.Rows(i).Item("Access_Type").ToString

                            '=================================================================================================================

                        Case "REPORT_STORES"
                            Common_Procedures.UR.Report_stores = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_STORES"
                            Common_Procedures.UR.master_Stores = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_FABRIC_PHYSICAL_STOCK"
                            Common_Procedures.UR.Fabric_Physical_Stock = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_PACKING_SLIP_MAIN"
                            Common_Procedures.UR.Packing_Slip2 = Dt1.Rows(i).Item("Access_Type").ToString



                        Case "REPORT_INHOUSE"
                            Common_Procedures.UR.Inhouse_Reports = Dt1.Rows(i).Item("Access_Type").ToString



                            '=================================================================================================================

                        Case "FPENTRY_PURCHASE"
                            Common_Procedures.UR.FP_purchase_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "FPENTRY_PURCHASE_RETURN"
                            Common_Procedures.UR.FP_purchase_Return_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "FPENTRY_PROCESSING_DELIVERY"
                            Common_Procedures.UR.FP_Processing_Delivery_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "FPENTRY_PROCESSING_RECEIPT"
                            Common_Procedures.UR.FP_Processing_Receipt_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "FPENTRY_PROCESSING_RETURN"
                            Common_Procedures.UR.FP_Processing_Return_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "FPENTRY_PROCESSING_BILLMAKING"
                            Common_Procedures.UR.FP_Processing_Bill_Making_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "FPENTRY_FLOOR_TO_RACK"
                            Common_Procedures.UR.FP_delivery_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "FPENTRY_RACK_TO_FLOOR"
                            Common_Procedures.UR.FP_Return_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "FPENTRY_SET"
                            Common_Procedures.UR.FP_Set_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "FPENTRY_UNSET"
                            Common_Procedures.UR.FP_UnSet_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "FPENTRY_ITEM_TRANSFER"
                            Common_Procedures.UR.FP_Item_transfer_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "FPENTRY_PACKINGSLIP"
                            Common_Procedures.UR.FP_Packing_slip_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "FPENTRY_ORDER_INDENT"
                            Common_Procedures.UR.FP_Order_indent_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "FPENTRY_INVOICE"
                            Common_Procedures.UR.FP_Invoice_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "FPENTRY_CLOTH_SALES"
                            Common_Procedures.UR.FP_Cash_Sales_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "FPENTRY_SALES_RETURN"
                            Common_Procedures.UR.FP_Sales_return_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "FPENTRY_PROFORMA_SALES"
                            Common_Procedures.UR.FP_Proforma_Invoice_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "FPENTRY_ITEM_EXCESS_SHORT"
                            Common_Procedures.UR.FP_Item_Excess_Short_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "FPENTRY_SHIRTING_BIT"
                            Common_Procedures.UR.FP_Shirt_bit_Entry = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "FPENTRY_PARTY_AMOUNT_RECEIPT"
                            Common_Procedures.UR.FP_Party_Amount_Receipt_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "FPENTRY_CHEQUE_RETURN"
                            Common_Procedures.UR.FP_Cheque_return_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                            '=================================================================================================================
                        Case "FPMASTER_LEDGER_CREATION"
                            Common_Procedures.UR.FP_Ledger_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "FPMASTER_AGENT_CREATION"
                            Common_Procedures.UR.FP_Agent_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "FPMASTER_TRANSPORT_CREATION"
                            Common_Procedures.UR.FP_Transport_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "FPMASTER_AREA_CREATION"
                            Common_Procedures.UR.FP_Area_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "FPMASTER_GREY_ITEM_CREATION"
                            Common_Procedures.UR.FP_Grey_Item_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "FPMASTER_FINISHED_PRODUCT_CREATION"
                            Common_Procedures.UR.FP_Finished_Product_Creation = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "FPMASTER_SIZE_CREATION"
                            Common_Procedures.UR.FP_Size_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "FPMASTER_ITEM_GROUP_CREATION"
                            Common_Procedures.UR.FP_Item_Group_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "FPMASTER_UNIT_CREATION"
                            Common_Procedures.UR.FP_Unit_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "FPMASTER_PRODUCT_SALES_NAME"
                            Common_Procedures.UR.FP_Product_Sales_Name_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "FPMASTER_PROCESS_CREATION"
                            Common_Procedures.UR.FP_Process_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "FPMASTER_COLOUR_CREATION"
                            Common_Procedures.UR.FP_Colour_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "FPMASTER_LOTNO_CREATION"
                            Common_Procedures.UR.FP_LotNo_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "MASTER_ARTICLE_CREATION"
                            Common_Procedures.UR.FP_Article_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "FPMASTER_CURRENCY_CREATION"
                            Common_Procedures.UR.FP_Currency_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "FPMASTER_RACKNO_CREATION"
                            Common_Procedures.UR.FP_RackNo_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "FPMASTER_PACKING_TYPE_CREATION"
                            Common_Procedures.UR.FP_Packing_Type_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "MASTERS_PACKING_TYPE_CREATION"
                            Common_Procedures.UR.Packing_Type_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "FPMASTER_USER_CREATION"
                            Common_Procedures.UR.FP_user_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                            '==========================================================================================================================
                        Case "INHOUSE_ENTRY_BEAM_KNOTTING"
                            Common_Procedures.UR.Inhouse_Beam_knotting_Entry = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "INHOUSE_ENTRY_DOFFING"
                            Common_Procedures.UR.Inhouse_Doffing_Entry = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "INHOUSE_ENTRY_PIECE_CHECKING"
                            Common_Procedures.UR.Inhouse_Piece_Checking_Entry = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "INHOUSE_ENTRY_DOFFING_AND_PIECE_CHECKING"
                            Common_Procedures.UR.Inhouse_Doffing_and_PieceChecking_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "INHOUSE_ENTRY_BEAM_RUNOUT"
                            Common_Procedures.UR.Inhouse_Beam_RunOut_Entry = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "INHOUSE_ENTRY_BEAM_CLOSE"
                            Common_Procedures.UR.Inhouse_Beam_Close_Entry = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "INHOUSE_ENTRY_WEAVING_EXCESS_SHORT"
                            Common_Procedures.UR.Inhouse_Weaving_Excess_Short_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "INHOUSE_ENTRY_SORT_CHANGE"
                            Common_Procedures.UR.Inhouse_Sort_Change_Entry = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "INHOUSE_ENTRY_PAVU_DELIVERY"
                            Common_Procedures.UR.Inhouse_Pavu_Delivery_Entry = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "INHOUSE_ENTRY_YARN_DELIVERY"
                            Common_Procedures.UR.Inhouse_Yarn_Delivery_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "INHOUSE_ENTRY_PAVU_RECEIPT"
                            Common_Procedures.UR.Inhouse_Pavu_Receipt_Entry = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "INHOUSE_ENTRY_YARN_RECEIPT"
                            Common_Procedures.UR.Inhouse_Yarn_Receipt_Entry = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "INHOUSE_ENTRY_LOOM_PRODUCTION"
                            Common_Procedures.UR.Inhouse_Loom_Production_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "INHOUSE_ENTRY_KNOTTING_BILL"
                            Common_Procedures.UR.Inhouse_Knotting_Bill_Entry = Dt1.Rows(i).Item("Access_Type").ToString
                            '===========================================================================================================================

                        Case "ENTRY_JOBWORK_ORDER"
                            Common_Procedures.UR.Jobwork_Order_Entry = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_PAVU_YARN_RECEIPT_JOBWORK"
                            Common_Procedures.UR.Jobwork_Pavu_Yarn_Receipt_Entry = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_JOBWORK_PRODUCTION"
                            Common_Procedures.UR.Jobwork_Production_Entry = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_JOBWORK_PIECE_DELIVERY"
                            Common_Procedures.UR.Jobwork_Piece_Delivery_Entry = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_JOBWORK_INSPECTION"
                            Common_Procedures.UR.Jobwork_Piece_Inspection_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_JOBWORK_CONVERSION_BILL"
                            Common_Procedures.UR.Jobwork_Conversion_Bill_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_PAVU_YARN_RETURN_TO_JOBWORKER"
                            Common_Procedures.UR.Jobwork_Pavu_Yarn_Return_Delivery_Entry = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_EMPTY_BEAM_RETURN_TO_JOBWORKER"
                            Common_Procedures.UR.Jobwork_EmptyBeam_Return_Delivery_Entry = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "TEXTILE_JOBWORK_REGISTER_REPORT"
                            Common_Procedures.UR.TEXTILE_JOBWORK_REGISTER_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "TEXTILE_JOBWORK_PENDING_REGISTER_REPORT"
                            Common_Procedures.UR.TEXTILE_JOBWORK_PENDING_REGISTER_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "TEXTILE_JOBWORK_YARN_STOCK_REPORT"
                            Common_Procedures.UR.TEXTILE_JOBWORK_YARN_STOCK_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "TEXTILE_JOBWORK_PAVU_STOCK_REPORT"
                            Common_Procedures.UR.TEXTILE_JOBWORK_PAVU_STOCK_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "TEXTILE_JOBWORK_EMPTYBEAM_STOCK_REPORT"
                            Common_Procedures.UR.TEXTILE_JOBWORK_EMPTYBEAM_STOCK_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "TEXTILE_JOBWORK_EMPTYBAG_STOCK_REPORT"
                            Common_Procedures.UR.TEXTILE_JOBWORK_EMPTYBAG_STOCK_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "TEXTILE_JOBWORK_EMPTYCONE_STOCK_REPORT"
                            Common_Procedures.UR.TEXTILE_JOBWORK_EMPTYCONE_STOCK_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "TEXTILE_JOBWORK_ALL_STOCK_LEDGER_REPORT"
                            Common_Procedures.UR.TEXTILE_JOBWORK_ALL_STOCK_LEDGER_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "TEXTILE_JOBWORK_ALL_STOCK_SUMMARY_REPORT"
                            Common_Procedures.UR.TEXTILE_JOBWORK_ALL_STOCK_SUMMARY_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "TEXTILE_JOBWORK_JOBWORKER_STOCK_STATEMENT_REPORT"
                            Common_Procedures.UR.TEXTILE_JOBWORK_JOBWORKER_STOCK_STATEMENT_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "TEXTILE_JOBWORK_DAY_TRANSACTION_REPORT"
                            Common_Procedures.UR.TEXTILE_JOBWORK_DAY_TRANSACTION_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "TEXTILE_JOBWORK_RECONCILIATION_REPORT"
                            Common_Procedures.UR.TEXTILE_JOBWORK_RECONCILIATION_REPORT = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "TEXTILE_JOBWORK_DELIVERY_CHALLAN_REPORTS"
                            Common_Procedures.UR.TEXTILE_JOBWORK_DELIVERY_CHALLAN_REPORTS = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "TEXTILE_JOBWORK_INVOICE_REPORT"
                            Common_Procedures.UR.TEXTILE_JOBWORK_INVOICE_REPORT = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "TEXTILE_JOBWORK_RECEIVED_REPORT"
                            Common_Procedures.UR.TEXTILE_JOBWORK_RECEIVED_REPORT = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "TEXTILE_JOBWORK_SIZED_BEAM_STOCK_ON_FLOOR"
                            Common_Procedures.UR.TEXTILE_JOBWORK_SIZED_BEAM_STOCK_ON_FLOOR = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "TEXTILE_JOBWORK_PRODUCTION_SUMMARY_LOOM_WISE"
                            Common_Procedures.UR.TEXTILE_JOBWORK_PRODUCTION_SUMMARY_LOOM_WISE = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "TEXTILE_JOBWORK_PIECE_CHECKING_REPORT"
                            Common_Procedures.UR.TEXTILE_JOBWORK_PIECE_CHECKING_REPORT = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "TEXTILE_JOBWORK_BEAM_RUNOUT_REGISTER"
                            Common_Procedures.UR.TEXTILE_JOBWORK_BEAM_RUNOUT_REGISTER = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "TEXTILE_JOBWORK_RUNNING_BEAM_DETAILS_ALL_LOOM"
                            Common_Procedures.UR.TEXTILE_JOBWORK_RUNNING_BEAM_DETAILS_ALL_LOOM = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "TEXTILE_JOBWORK_WARP_LOADING_LOOM_WISE"
                            Common_Procedures.UR.TEXTILE_JOBWORK_WARP_LOADING_LOOM_WISE = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "TEXTILE_JOBWORK_VENDOR_GRADING_REPORT"
                            Common_Procedures.UR.TEXTILE_JOBWORK_VENDOR_GRADING_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "MASTERS_SPARES_PURCHASE_PARTY_CREATION"
                            Common_Procedures.UR.Spares_PurchaseParty_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "MASTERS_DELIVERY_PARTY_CREATION"
                            Common_Procedures.UR.Sizing_Delivery_Party_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "MASTERS_FIREWOOD_PURCHASE_PARTY_CREATION"
                            Common_Procedures.UR.Firewood_PurchaseParty_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "MASTERS_BAG_TYPE_CREATION"
                            Common_Procedures.UR.Bag_Type_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "MASTER_CONETYPE_CREATION"
                            Common_Procedures.UR.Cone_Type_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "MASTER_DELIVERY_ADDRESS_CREATION"
                            Common_Procedures.UR.Delivery_Address_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "MASTERS_SIZINGITEM_CREATION"
                            Common_Procedures.UR.Sizing_Item_Creaion = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "MASTERS_UNIT_CREATION"
                            Common_Procedures.UR.Unit_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "MASTERS_BEAMNO_CREATION"
                            Common_Procedures.UR.Sizing_BeamNo_Creation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "MASTER_SIZING_WASTE_MATERIAL_CREATION"
                            Common_Procedures.UR.Sizing_WasteCreation = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "MASTERS_SIZINGSPARES_CREATION"
                            Common_Procedures.UR.Sizing_Spares_Creation = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_SIZING_JOBWORK_MODULE_YARN_RECEIPT"
                            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_YARN_RECEIPT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_SIZING_JOBWORK_MODULE_EMPTYBEAM_RECEIPT"
                            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_EMPTYBEAM_RECEIPT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_SIZING_JOBWORK_MODULE_SIZING_SPECIFICATION"
                            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_SIZING_SPECIFICATION = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_SIZING_JOBWORK_MODULE_STATEMENT"
                            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_STATEMENT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_SIZING_JOBWORK_MODULE_INVOICE"
                            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_INVOICE = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_SIZING_JOBWORK_MODULE_CASHDISCOUNT"
                            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CASHDISCOUNT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_SIZING_JOBWORK_MODULE_PAVU_DELIVERY"
                            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_PAVU_DELIVERY = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_SIZING_JOBWORK_MODULE_YARN_DELIVERY"
                            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_YARN_DELIVERY = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_SIZING_JOBWORK_MODULE_EMPTY_BEAM_DELIVERY"
                            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_EMPTY_BEAM_DELIVERY = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_SIZING_JOBWORK_KURAI_PAVU_RECEIPT"
                            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_KURAI_PAVU_RECEIPT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_SIZING_JOBWORK_MODULE_EMPTY_BEAM_BAG_EXCESS_SHORT"
                            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_EMPTY_BEAM_BAG_EXCESS_SHORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_SIZING_JOBWORK_MODULE_YARN_TRANSFER"
                            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_YARN_TRANSFER = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_SIZING_JOBWORK_MODULE_YARN_EXCESS_SHORT"
                            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_YARN_EXCESS_SHORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_PURCHASE_ORDER"
                            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_PURCHASE_ORDER = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_PURCHASE"
                            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_PURCHASE = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_PURCHASE_RETURN"
                            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_PURCHASE_RETURN = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_EXCESS_SHORT"
                            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_EXCESS_SHORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_SIZING_JOBWORK_MODULE_WASTE_MATERIAL_SALES"
                            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_WASTE_MATERIAL_SALES = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_SIZING_JOBWORK_MODULE_SPARES_PURCHASE"
                            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_SPARES_PURCHASE = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_SIZING_JOBWORK_MODULE_FIREWOOD_PURCHASE"
                            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_FIREWOOD_PURCHASE = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_SIZING_JOBWORK_MODULE_FIREWOOD_CONSUMPTION"
                            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_FIREWOOD_CONSUMPTION = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_SIZING_JOBWORK_MODULE_GENERAL_DELIVERY"
                            Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_GENERAL_DELIVERY = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "SIZING_JOBWORK_MODULE_REPORT_EMPTY_BEAM_REGISTER"
                            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_EMPTY_BEAM_REGISTER = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "SIZING_JOBWORK_MODULE_REPORT_EMPTY_BAGS_REGISTER"
                            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_EMPTY_BAGS_REGISTER = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "SIZING_JOBWORK_MODULE_REPORT_CONES_REGISTER"
                            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_CONES_REGISTER = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "SIZING_JOBWORK_MODULE_REPORT_YARN_REGISTER"
                            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_YARN_REGISTER = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "SIZING_JOBWORK_MODULE_REPORT_PAVU_REGISTER"
                            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_PAVU_REGISTER = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "SIZING_JOBWORK_MODULE_REPORT_ALL_STOCK_LEDGER"
                            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_ALL_STOCK_LEDGER = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "SIZING_JOBWORK_MODULE_REPORT_ALL_STOCK_SUMMARY"
                            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_ALL_STOCK_SUMMARY = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "SIZING_JOBWORK_MODULE_REPORTS_ALL_STOCK_STATEMENTS"
                            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_ALL_STOCK_STATEMENTS = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "SIZING_JOBWORK_MODULE_REPORT_PRODUCTION_REGISTER"
                            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_PRODUCTION_REGISTER = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "SIZING_JOBWORK_MODULE_REPORT_INVOICE_REGISTER"
                            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_INVOICE_REGISTER = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "SIZING_JOBWORK_MODULE_REPORTS_CASH_DISCOUNT"
                            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_CASH_DISCOUNT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "SIZING_JOBWORK_MODULE_REPORT_CHEMICAL_REGISTER"
                            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_CHEMICAL_REGISTER = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "SIZING_JOBWORK_MODULE_REPORTS_HARDWARE_PURCHASE"
                            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_HARDWARE_PURCHASE = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "SIZING_JOBWORK_MODULE_REPORTS_FIREWOOD_PURCHASE"
                            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_FIREWOOD_PURCHASE = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "SIZING_JOBWORK_MODULE_REPORT_FIREWOOD_CONSUMPTION_REGISTER"
                            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_FIREWOOD_CONSUMPTION_REGISTER = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "SIZING_JOBWORK_MODULE_REPORTS_WASTE_MATERIAL"
                            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_WASTE_MATERIAL = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "SIZING_JOBWORK_MODULE_REPORTS_DAY_TRANSACTION"
                            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_DAY_TRANSACTION = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "SIZING_JOBWORK_MODULE_REPORTS_GST_RETURN"
                            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_GST_RETURN = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "SIZING_JOBWORK_MODULE_REPORTS_TDS_REPORT"
                            Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_TDS_REPORT = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "OEENTRY_COTTON_PURCHASE_ENTRY"
                            Common_Procedures.UR.OEENTRY_COTTON_PURCHASE_ENTRY = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OEENTRY_COTTON_PURCHASE_RETURN_ENTRY"
                            Common_Procedures.UR.OEENTRY_COTTON_PURCHASE_RETURN_ENTRY = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OEENTRY_MIXING_ENTRY"
                            Common_Procedures.UR.OEENTRY_MIXING_ENTRY = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OEENTRY_PRODUCTION_ENTRY"
                            Common_Procedures.UR.OEENTRY_PRODUCTION_ENTRY = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OEENTRY_PACKING_ENTRY"
                            Common_Procedures.UR.OEENTRY_PACKING_ENTRY = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OEENTRY_ORDER_ENTRY"
                            Common_Procedures.UR.OEENTRY_ORDER_ENTRY = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OEENTRY_DELIVERY_ENTRY"
                            Common_Procedures.UR.OEENTRY_DELIVERY_ENTRY = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OEENTRY_INVOICE_ENTRY"
                            Common_Procedures.UR.OEENTRY_INVOICE_ENTRY = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OEENTRY_WASTE_SALES_ENTRY"
                            Common_Procedures.UR.OEENTRY_WASTE_SALES_ENTRY = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OEENTRY_LOCAL_WASTE_SALES_ENTRY"
                            Common_Procedures.UR.OEENTRY_LOCAL_WASTE_SALES_ENTRY = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OEENTRY_INVOICE_RETURN_ENTRY"
                            Common_Procedures.UR.OEENTRY_INVOICE_RETURN_ENTRY = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OEENTRY_DELIVERY_RETURN_ENTRY"
                            Common_Procedures.UR.OEENTRY_DELIVERY_RETURN_ENTRY = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OEENTRY_BORA_STRITCHING_ENTRY"
                            Common_Procedures.UR.OEENTRY_BORA_STRITCHING_ENTRY = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OEENTRY_REELING_DELIVERY_ENTRY"
                            Common_Procedures.UR.OEENTRY_REELING_DELIVERY_ENTRY = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OEENTRY_REELING_RECEIPT_ENTRY"
                            Common_Procedures.UR.OEENTRY_REELING_RECEIPT_ENTRY = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OEENTRY_STOCK_TRANSFER_ENTRY"
                            Common_Procedures.UR.OEENTRY_STOCK_TRANSFER_ENTRY = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "OESPINNING_REGISTER_REPORT"
                            Common_Procedures.UR.OESPINNING_REGISTER_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OESPINNING_COTTON_STOCK_REPORT"
                            Common_Procedures.UR.OESPINNING_COTTON_STOCK_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OESPINNING_MIXING_STOCK_REPORT"
                            Common_Procedures.UR.OESPINNING_MIXING_STOCK_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OESPINNING_BAG_YARN_STOCK_REPORT"
                            Common_Procedures.UR.OESPINNING_BAG_YARN_STOCK_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OESPINNING_LOOSE_YARN_STOCK_REPORT"
                            Common_Procedures.UR.OESPINNING_LOOSE_YARN_STOCK_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OESPINNING_REELING_STOCK_REPORT"
                            Common_Procedures.UR.OESPINNING_REELING_STOCK_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OESPINNING_HANK_YARN_STOCK_REPORT"
                            Common_Procedures.UR.OESPINNING_HANK_YARN_STOCK_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OESPINNING_WASTE_STOCK_REPORT"
                            Common_Procedures.UR.OESPINNING_WASTE_STOCK_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OESPINNING_YARN_STOCK_BAGNOWISE_STOCK_REPORT"
                            Common_Procedures.UR.OESPINNING_YARN_STOCK_BAGNOWISE_STOCK_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OESPINNING_ALL_STOCK_SUMMARY_REPORT"
                            Common_Procedures.UR.OESPINNING_ALL_STOCK_SUMMARY_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OESPINNING_COMMISSION_REGISTER_REPORT"
                            Common_Procedures.UR.OESPINNING_COMMISSION_REGISTER_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OESPINNING_GSTR_1_REPORT"
                            Common_Procedures.UR.OESPINNING_GSTR_1_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OESPINNING_GSTR_2_REPORT"
                            Common_Procedures.UR.OESPINNING_GSTR_2_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OESPINNING_ORDER_PENDING_REPORT"
                            Common_Procedures.UR.OESPINNING_ORDER_PENDING_REPORT = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OESPINNING_CARDING_STOCK_REPORT"
                            Common_Procedures.UR.OESPINNING_CARDING_STOCK_REPORT = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "OESPINNING_ENTRY_BOBIN_STOCK_DETAILS"
                            Common_Procedures.UR.OESPINNING_EMPTY_BOBIN_STOCK_DETAILS = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "OESPINNING_ENTRY_BOBIN_STOCK_SUMMARY"
                            Common_Procedures.UR.OESPINNING_EMPTY_BOBIN_STOCK_SUMMARY = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_EMPLOYEE_ATTENDANCE"
                            Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_ATTENDANCE = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "ENTRY_ATTENDANCE_LOG_FROM_MACHINE"
                            Common_Procedures.UR.PAYROLL_ENTRY_ATTENDANCE_LOG_FROM_MACHINE = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_EMPLOYEE_ATTENDANCE_FROM_MACHINE"
                            Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_ATTENDANCE_FROM_MACHINE = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_EMPLOYEE_TIMING_ADDITION"
                            Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_TIMING_ADDITION = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_EMPLOYEE_SALARY"
                            Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_SALARY = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_EMPLOYEE_SALARY_ADVANCE_PAYMENT"
                            Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_SALARY_ADVANCE_PAYMENT = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_EMPLOYEE_ADVANCE_ADDITION"
                            Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_ADVANCE_ADDITION = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_EMPLOYEE_CREATION"
                            Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_CREATION = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_CATEGORY_CREATION"
                            Common_Procedures.UR.PAYROLL_ENTRY_CATEGORY_CREATION = Dt1.Rows(i).Item("Access_Type").ToString
                        Case "ENTRY_SALARY_PAYMENT_TYPE"
                            Common_Procedures.UR.PAYROLL_ENTRY_SALARY_PAYMENT_TYPE = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "ENTRY_EMPLOYEE_ADVANCE"
                            Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_ADVANCE = Dt1.Rows(i).Item("Access_Type").ToString



                        Case "REPORT_SALARY_REGISTER"
                            Common_Procedures.UR.PAYROLL_REPORT_SALARY_REGISTER = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_NET_PAY_REGISTER"
                            Common_Procedures.UR.PAYROLL_REPORT_NET_PAY_REGISTER = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_ATTENDANCE_REGISTER"
                            Common_Procedures.UR.PAYROLL_REPORT_ATTENDANCE_REGISTER = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_ATTENDANCE_MONTHWISE_REGISTER"
                            Common_Procedures.UR.PAYROLL_REPORT_ATTENDANCE_MONTHWISE_REGISTER = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_EMPLOYEE_PAYMENT_REGISTER"
                            Common_Procedures.UR.PAYROLL_REPORT_EMPLOYEE_PAYMENT_REGISTER = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_EMPLOYEE_DEDUCATION"
                            Common_Procedures.UR.PAYROLL_REPORT_EMPLOYEE_DEDUCATION = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_EMPLOYEE_ACCOUNT_DETAILS"
                            Common_Procedures.UR.PAYROLL_REPORT_EMPLOYEE_ACCOUNT_DETAILS = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_EMPLOYEE_REGISTER"
                            Common_Procedures.UR.PAYROLL_REPORT_EMPLOYEE_REGISTER = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_LEDGER_REPORT_ALL"
                            Common_Procedures.UR.PAYROLL_REPORT_LEDGER_REPORT_ALL = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_SALARY_LEDGER"
                            Common_Procedures.UR.PAYROLL_REPORT_SALARY_LEDGER = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORT_ADVANCE_LEDGER"
                            Common_Procedures.UR.PAYROLL_REPORT_ADVANCE_LEDGER = Dt1.Rows(i).Item("Access_Type").ToString


                        Case "REPORT_DEPOSIT_LEDGER"
                            Common_Procedures.UR.PAYROLL_REPORT_DEPOSIT_LEDGER = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORTS_STORES_MASTERS"
                            Common_Procedures.UR.REPORTS_STORES_MASTERS = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORTS_STORES_REGISTER"
                            Common_Procedures.UR.REPORTS_STORES_REGISTER = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORTS_STORES_PURCHASE_ORDER_PENDING"
                            Common_Procedures.UR.REPORTS_STORES_PURCHASE_ORDER_PENDING = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORTS_STORES_MONTHLY_ITEM_ISSUE_STATEMENT"
                            Common_Procedures.UR.REPORTS_STORES_MONTHLY_ITEM_ISSUE_STATEMENT = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORTS_STORES_MONTHLY_ITEM_ISSUE_STATEMENT_ALL_LOOM"
                            Common_Procedures.UR.REPORTS_STORES_MONTHLY_ITEM_ISSUE_STATEMENT_ALL_LOOM = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORTS_STORES_SERVICE_RECEIPT_ITEM_PENDING"
                            Common_Procedures.UR.REPORTS_STORES_SERVICE_RECEIPT_ITEM_PENDING = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORTS_OIL_SERVICE_PENDING"
                            Common_Procedures.UR.REPORTS_OIL_SERVICE_PENDING = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORTS_STORES_NEW_ITEM_STOCK_DETAILS"
                            Common_Procedures.UR.REPORTS_STORES_NEW_ITEM_STOCK_DETAIL = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORTS_STORES_OLD_ITEM_STOCK_DETAILS_USABLE"
                            Common_Procedures.UR.REPORTS_STORES_OLD_ITEM_STOCK_DETAILS_USABLE = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORTS_STORES_OLD_ITEM_STOCK_DETAILS_SCRAP"
                            Common_Procedures.UR.REPORTS_STORES_OLD_ITEM_STOCK_DETAILS_SCRAP = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORTS_STORES_ITEM_STOCK_DETAILS_ALL"
                            Common_Procedures.UR.REPORTS_STORES_ITEM_STOCK_DETAILS_ALL = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORTS_STORES_NEW_ITEM_STOCK_SUMMARY"
                            Common_Procedures.UR.REPORTS_STORES_NEW_ITEM_STOCK_SUMMARY = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORTS_STORES_OLD_ITEM_STOCK_SUMMARY_USABLE"
                            Common_Procedures.UR.REPORTS_STORES_OLD_ITEM_STOCK_SUMMARY_USABLE = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORTS_STORES_OLD_ITEM_STOCK_SUMMARY_SCRAP"
                            Common_Procedures.UR.REPORTS_STORES_OLD_ITEM_STOCK_SUMMARY_SCRAP = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORTS_STORES_ITEM_STOCK_SUMMARY_ALL"
                            Common_Procedures.UR.REPORTS_STORES_ITEM_STOCK_SUMMARY_ALL = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORTS_STORES_ITEM_STOCK_VALUE"
                            Common_Procedures.UR.REPORTS_STORES_ITEM_STOCK_VALUE = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "REPORTS_STORES_PURCHASE_PLANNING"
                            Common_Procedures.UR.REPORTS_STORES_PURCHASE_PLANNING = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "GENERAL_REPORTS_EMPTY_BEAM_STOCK"
                            Common_Procedures.UR.GENERAL_REPORTS_EMPTY_BEAM_STOCK = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "GENERAL_REPORTS_YARN_STOCK_REPORTS"
                            Common_Procedures.UR.GENERAL_REPORTS_YARN_STOCK_REPORTS = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "GENERAL_REPORTS_WARP_STOCK_REPORTS"
                            Common_Procedures.UR.GENERAL_REPORTS_WARP_STOCK_REPORTS = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "GENERAL_REPORTS_FABRIC_STOCK_REPORTS"
                            Common_Procedures.UR.GENERAL_REPORTS_FABRIC_STOCK_REPORTS = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "GENERAL_REPORTS_MONTHLY_PRODUCTION_REPORT"
                            Common_Procedures.UR.GENERAL_REPORTS_MONTHLY_PRODUCTION_REPORT = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "GENERAL_REPORTS_BEAM_TO_BEAM_RECONCILATION_REPORT"
                            Common_Procedures.UR.GENERAL_REPORTS_BEAM_TO_BEAM_RECONCILATION_REPORT = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "GENERAL_REPORTS_BEAM_TO_BEAM_RECONCILATION_SETNO_WISE"
                            Common_Procedures.UR.GENERAL_REPORTS_BEAM_TO_BEAM_RECONCILATION_SETNO_WISE = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "GENERAL_REPORTS_INHOUSE"
                            Common_Procedures.UR.GENERAL_REPORTS_INHOUSE = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "GENERAL_REPORTS_AGENT_REPORT"
                            Common_Procedures.UR.GENERAL_REPORTS_AGENT_REPORT = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "GENERAL_REPORTS_GST_REPORT"
                            Common_Procedures.UR.GENERAL_REPORTS_GST_REPORT = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "GENERAL_REPORTS_TCS_REPORT"
                            Common_Procedures.UR.GENERAL_REPORTS_TCS_REPORT = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "GENERAL_REPORTS_TDS_REPORT"
                            Common_Procedures.UR.GENERAL_REPORTS_TDS_REPORT = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "GENERAL_REPORTS_ACCOUNTS_PURCHASE_REGISTER"
                            Common_Procedures.UR.ACCOUNTS_PURCHASE_REGISTER = Dt1.Rows(i).Item("Access_Type").ToString

                        Case "GENERAL_REPORTS_ACCOUNTS_SALES_REGISTER"
                            Common_Procedures.UR.ACCOUNTS_SALES_REGISTER = Dt1.Rows(i).Item("Access_Type").ToString
                    End Select

                Next

            End If

        End If

        Dt1.Dispose()
        Da.Dispose()

        Cn1.Close()
        Cn1.Dispose()

    End Sub

    Public Shared Function get_User_AccessRights_Of_Entry(ByVal vVBFrmName As Form) As String
        Dim vUsrRghts As String = ""

        If Val(Common_Procedures.User.IdNo) = 1 Then

            vUsrRghts = "~L~"

        Else


            Select Case Trim(UCase(vVBFrmName.Name))

                Case "MASTER_LEDGER_CREATION", Trim(UCase("Ledger_Creation"))
                    If Trim(UCase(Common_Procedures.MDI_LedType)) = Trim(UCase("SIZING")) Then
                        vUsrRghts = Common_Procedures.UR.Sizing_Creation
                    ElseIf Trim(UCase(Common_Procedures.MDI_LedType)) = Trim(UCase("WEAVER")) Then
                        vUsrRghts = Common_Procedures.UR.Weaver_Creation
                    ElseIf Trim(UCase(Common_Procedures.MDI_LedType)) = Trim(UCase("REWINDING")) Then
                        vUsrRghts = Common_Procedures.UR.Rewinding_Creation
                    ElseIf Trim(UCase(Common_Procedures.MDI_LedType)) = Trim(UCase("JOBWORKER")) Then
                        vUsrRghts = Common_Procedures.UR.JOBWORKER_Creation
                    ElseIf Trim(UCase(Common_Procedures.MDI_LedType)) = Trim(UCase("TRANSPORT")) Then
                        vUsrRghts = Common_Procedures.UR.Transport_Creation
                    ElseIf Trim(UCase(Common_Procedures.MDI_LedType)) = Trim(UCase("GODOWN")) Then
                        vUsrRghts = Common_Procedures.UR.Godown_Creation
                    ElseIf Trim(UCase(Common_Procedures.MDI_LedType)) = Trim(UCase("SEWING")) Then
                        vUsrRghts = Common_Procedures.UR.Sewing_Creation
                    ElseIf Trim(UCase(Common_Procedures.MDI_LedType)) = Trim(UCase("SPARES")) Then
                        vUsrRghts = Common_Procedures.UR.Spares_PurchaseParty_Creation
                    ElseIf Trim(UCase(Common_Procedures.MDI_LedType)) = Trim(UCase("FIREWOOD")) Then
                        vUsrRghts = Common_Procedures.UR.Firewood_PurchaseParty_Creation
                    Else
                        vUsrRghts = Common_Procedures.UR.Ledger_Creation
                    End If

                Case "MASTER_AGENT_CREATION", Trim(UCase("Agent_Creation"))
                    vUsrRghts = Common_Procedures.UR.Agent_Creation

                Case "MASTER_SIZNIG_CREATION", Trim(UCase("Sizing_Creation"))
                    vUsrRghts = Common_Procedures.UR.Sizing_Creation

                Case "MASTER_WEAVER_CREATION", Trim(UCase("Weaver_Creation"))
                    vUsrRghts = Common_Procedures.UR.Weaver_Creation

                Case "MASTER_JOBWORKER_CREATION", Trim(UCase("Jobworker_Creation"))
                    vUsrRghts = Common_Procedures.UR.JOBWORKER_Creation

                Case "MASTER_REWINDING_CREATION", Trim(UCase("Rewinding_Creation"))
                    vUsrRghts = Common_Procedures.UR.Rewinding_Creation

                Case "MASTER_TRANSPORT_CREATION", Trim(UCase("Transport_Creation"))
                    vUsrRghts = Common_Procedures.UR.Transport_Creation

                Case "MASTER_GODOWN_CREATION", Trim(UCase("Godown_Creation"))
                    vUsrRghts = Common_Procedures.UR.Godown_Creation

                Case "MASTER_ACCOUNTGROUP_CREATION", Trim(UCase("Account_Group_creation"))
                    vUsrRghts = Common_Procedures.UR.Account_Group_creation

                Case "MASTER_TAX_CREATION", Trim(UCase("Tax_Creation"))
                    vUsrRghts = Common_Procedures.UR.Tax_Creation

                Case "MASTER_AREA_CREATION", Trim(UCase("Area_Creation"))
                    vUsrRghts = Common_Procedures.UR.Area_Creation

                Case "MASTER_ITEMGROUP_CREATION", Trim(UCase("ItemGroup_Creation"))
                    vUsrRghts = Common_Procedures.UR.ItemGroup_Creation

                Case "MASTER_COUNT_CREATION", Trim(UCase("Count_Creation"))
                    vUsrRghts = Common_Procedures.UR.Count_Creation



                Case "MASTER_MILL_CREATION", Trim(UCase("Mill_Creation"))
                    vUsrRghts = Common_Procedures.UR.Mill_Creation

                Case "MASTER_ENDSCOUNT_TYPE_CREATION", Trim(UCase("Endscount_Creation"))
                    vUsrRghts = Common_Procedures.UR.Endscount_Creation

                Case "MASTER_CLOTH_CREATION", Trim(UCase("cloth_Creation"))
                    vUsrRghts = Common_Procedures.UR.cloth_Creation

                    'Case "MASTER_CLOTHSET_CREATION", Trim(UCase("cloth_Creation"))
                    '    vUsrRghts = Common_Procedures.UR.clothset_Creation

                    'Case "MASTER_FABRIC_GROUP_CREATION", Trim(UCase("Fabric_group_Creation"))
                    '    vUsrRghts = Common_Procedures.UR.Fabric_group_Creation

                    'Case "MASTER_FABRIC_CATEGORY_CREATION", Trim(UCase("Fabric_Category_Creation"))
                    '    vUsrRghts = Common_Procedures.UR.Fabric_Category_Creation

                    'Case "MASTER_FABRIC_SUBCATEGORY_CREATION", Trim(UCase("Fabric_subCategory_Creation"))
                    '    vUsrRghts = Common_Procedures.UR.Fabric_SUBCategory_Creation
                    'Case "MASTER_VARIETY_CREATION", Trim(UCase("Variety_Creation"))
                    '    vUsrRghts = Common_Procedures.UR.variety_Creation
                Case "MASTER_LOOM_CREATION", Trim(UCase("LoomNo_Creation"))
                    vUsrRghts = Common_Procedures.UR.Loom_Creation
                Case "MASTER_LOOM_TYPE_CREATION", Trim(UCase("Loom_type_Creation"))
                    vUsrRghts = Common_Procedures.UR.Loom_type_Creation
                Case "MASTER_BEAM_WIDTH_CREATION", Trim(UCase("Beam_Width_Creation"))
                    vUsrRghts = Common_Procedures.UR.Masters_Beam_Width_Creation
                Case "MASTER_VENDOR_CREATION", Trim(UCase("Vendor_Creation"))
                    vUsrRghts = Common_Procedures.UR.Vendor_Creation

                    'Case "MASTER_BORDER_SIZE_CREATION", Trim(UCase("BorderSize_Creation"))
                    '    vUsrRghts = Common_Procedures.UR.Border_Size_Creation
                    'Case "MASTER_COLOUR_CREATION", Trim(UCase("Color_Creation"))
                    '    vUsrRghts = Common_Procedures.UR.Colur_Creation
                    'Case "MASTER_EMPLOYEE_CREATION", Trim(UCase("EmployeeCreation_Simple_Creation"))
                    '    vUsrRghts = Common_Procedures.UR.Employee_Creation
                    'Case "MASTER_WEAVER_LOOM_DETAILS", Trim(UCase("Weaver_LoomNo_Wise_Entry"))
                    '    vUsrRghts = Common_Procedures.UR.Weaver_loom_Details
                Case "MASTER_CHEQUE_PRINTING_POSITION", Trim(UCase("Cheque_Print_Positioning"))
                    vUsrRghts = Common_Procedures.UR.Cheque_Printing_Position
                Case "MASTER_VEHICLENO_CREATION", Trim(UCase("VehicleNo_Creation"))
                    vUsrRghts = Common_Procedures.UR.VehicleNo_Creation


                Case "MASTER_LOADING_UNLOADING_RATE_CREATION", Trim(UCase("Loading_unloading_rate_Creation"))
                    vUsrRghts = Common_Procedures.UR.Loading_UnLoading_Rate
                Case "MASTER_USER_CREATION", Trim(UCase("User_creation"))
                    vUsrRghts = Common_Procedures.UR.user_Creation

                    ''**********************************************************************************************************************************************************************


                Case "MASTER_LEDGER_OPENING_STOCK", Trim(UCase("Opening_Stock_Textile"))
                    vUsrRghts = Common_Procedures.UR.Textile_OpeningStock
                Case "MASTER_LEDGER_CLOSING_VALUE_STOCK", Trim(UCase("Closing_Stock_value"))
                    vUsrRghts = Common_Procedures.UR.Closing_Stock_value
                Case "MASTER_LEDGER_CLOTH_ORDER_INDENT_OPENING", Trim(UCase("ClothSales_Order_Indent_Entry"))
                    vUsrRghts = Common_Procedures.UR.ClothSales_Order_Indent_Entry  ' Common_Procedures.UR.Cloth_Order_Indent_Opening
                Case "MASTER_LEDGER_CLOTH_DELIVERY_OPENING", Trim(UCase("ClothSales_Cloth_Delivery"))
                    vUsrRghts = Common_Procedures.UR.ClothSales_Cloth_Delivery_Entry  ' Common_Procedures.UR.Cloth_Delivery_opening
                Case "MASTER_LEDGER_LOOM_OPENING", Trim(UCase("Loom_Opening"))
                    vUsrRghts = Common_Procedures.UR.Loom_Opening
                Case "MASTER_LEDGER_PIECE_OPENING", Trim(UCase("Piece_Opening"))
                    vUsrRghts = Common_Procedures.UR.Piece_Opening
                Case "MASTER_LEDGER_BALE_OPENING", Trim(UCase("Bale_Opening"))
                    vUsrRghts = Common_Procedures.UR.Bale_Opening
                Case "MASTER_LEDGER_UNCHECKED_CLOTH_OPENING", Trim(UCase("Weaver_Cloth_Receipt"))
                    vUsrRghts = Common_Procedures.UR.Weaver_Cloth_Rceipt_Entry

                    ''**********************************************************************************************************************************************************************



                Case "ENTRY_YARN_PURCHASE_ORDER", Trim(UCase("Yarn_Purchase_Order_GST"))
                    vUsrRghts = Common_Procedures.UR.Yarn_Purchase_Order_Entry

                Case "ENTRY_YARN_PURCHASE", Trim(UCase("Yarn_Purchase_GST"))
                    vUsrRghts = Common_Procedures.UR.Yarn_Purchase_Entry

                Case "ENTRY_YARN_PURCHASE_RECEIPT", Trim(UCase("Yarn_Purchase_Receipt"))
                    vUsrRghts = Common_Procedures.UR.Yarn_Purchase_Receipt_Entry

                Case "ENTRY_YARN_PURCHASE_RETURN", Trim(UCase("Yarn_Purchase_Return_GST"))
                    vUsrRghts = Common_Procedures.UR.Yarn_Purchase_Return_Entry

                Case "ENTRY_YARN_DELIVERY", Trim(UCase("Yarn_Sales_Delivery"))
                    vUsrRghts = Common_Procedures.UR.yarn_Delivery_Entry


                    'Case "ENTRY_YARN_RECEIPT", Trim(UCase("Yarn_Sales_Delivery"))
                    '    vUsrRghts = Common_Procedures.UR.yarn_receipt_Entry

                Case "ENTRY_YARN_SALES", Trim(UCase("Yarn_Sales_GST")), Trim(UCase("Yarn_Sales_VAT"))
                    vUsrRghts = Common_Procedures.UR.Yarn_Sales_Entry

                'Case "ENTRY_YARN_SALES_VAT", Trim(UCase("Yarn_Sales_VAT"))
                '    vUsrRghts = Common_Procedures.UR.Yarn_Sales_Entry_vat

                Case "ENTRY_YARN_PROFORMA_SALES", Trim(UCase("Yarn_Sales_Proforma"))
                    vUsrRghts = Common_Procedures.UR.Yarn_Proforma_Sales_Entry

                Case "ENTRY_YARN_SALES_RETURN", Trim(UCase("Yarn_Sales_Return_GST"))
                    vUsrRghts = Common_Procedures.UR.Yarn_Sales_Return_Entry
                Case "ENTRY_YARN_TEST", Trim(UCase("Yarn_Test"))
                    vUsrRghts = Common_Procedures.UR.Yarn_test_Entry

                Case "ENTRY_PAVU_PURCHASE", Trim(UCase("Pavu_Purchase_GST"))
                    vUsrRghts = Common_Procedures.UR.Pavu_Purchase_Entry

                Case "ENTRY_PAVU_SALES", Trim(UCase("Pavu_Sales_GST"))
                    vUsrRghts = Common_Procedures.UR.Pavu_Sales_Entry


                Case "ENTRY_CLOTH_PURCHASE_OFFER", Trim(UCase("ClothPurchase_Offer"))
                    vUsrRghts = Common_Procedures.UR.Cloth_Purchase_offer_Entry

                Case "ENTRY_CLOTH_PURCHASE_ORDER", Trim(UCase("Cloth_Purchase_Order_Indent"))
                    vUsrRghts = Common_Procedures.UR.Cloth_Purchase_order_Entry

                Case "ENTRY_CLOTH_PURCHASE_RECEIPT_CHECKING", Trim(UCase("Weaver_Piece_Checking"))
                    vUsrRghts = Common_Procedures.UR.Weaver_Piece_Checking_Entry

                Case "ENTRY_CLOTH_RECEIPT", Trim(UCase("Cloth_Purchase_Receipt"))
                    vUsrRghts = Common_Procedures.UR.Cloth_Purchase_Receipt_Entry

                Case "ENTRY_CLOTH_PURCHASE", Trim(UCase("Cloth_Purchase_GST"))
                    vUsrRghts = Common_Procedures.UR.Cloth_Purchase_Entry

                Case "ENTRY_CLOTH_PURCHASE_RETURN", Trim(UCase("Cloth_Purchase_Return_GST"))
                    vUsrRghts = Common_Procedures.UR.Cloth_Purchase_Return_Entry







                Case "ENTRY_CLOTH_SALES_ORDER_INDENT", Trim(UCase("ClothSales_Order_Indent_Entry"))
                    vUsrRghts = Common_Procedures.UR.ClothSales_Order_Indent_Entry

                Case "ENTRY_CLOTH_SALES_INVOICE", Trim(UCase("ClothSales_Cloth_Invoice_GST"))
                    vUsrRghts = Common_Procedures.UR.ClothSales_Cloth_Invoice_Entry


                Case "ENTRY_CLOTH_SALES_INVOICE_VAT", Trim(UCase("ClothSales_Cloth_Invoice_VAT"))
                    vUsrRghts = Common_Procedures.UR.ClothSales_Cloth_Invoice_Entry_vat

                Case "ENTRY_CLOTH_SALES_RETURN", Trim(UCase("ClothSales_Return_GST"))
                    vUsrRghts = Common_Procedures.UR.ClothSales_Sales_Return_Entry

                Case "ENTRY_CLOTH_DELIVERY", Trim(UCase("ClothSales_Cloth_Delivery"))
                    vUsrRghts = Common_Procedures.UR.ClothSales_Cloth_Delivery_Entry

                Case "ENTRY_CLOTH_DELIVERY_RETURN", Trim(UCase("ClothSales_Delivery_Return"))
                    vUsrRghts = Common_Procedures.UR.ClothSales_Delivery_Return_Entry

                Case "ENTRY_CLOTH_PROFORMA_INVOICE", Trim(UCase("ClothSales_Proforma_Invoice_GST"))
                    vUsrRghts = Common_Procedures.UR.ClothSales_Proforma_Invoice_Entry

                Case "ENTRY_CLOTH_BUYER_OFFER", Trim(UCase("Buyer_Offer_Entry"))
                    vUsrRghts = Common_Procedures.UR.ClothSales_Buyer_offer_Entry

                Case "ENTRY_CLOTH_ROLL_PACKING", Trim(UCase("Roll_Packing"))
                    vUsrRghts = Common_Procedures.UR.ClothSales_Roll_Packing_Entry

                Case "ENTRY_CLOTH_PIECE_CHECKING", Trim(UCase("Weaver_Piece_Checking"))
                    vUsrRghts = Common_Procedures.UR.ClothSales_Piece_checking_Entry



                Case "ENTRY_EMPTYBEAM_PURCHASE", Trim(UCase("Empty_Beam_Purchase_Entry"))
                    vUsrRghts = Common_Procedures.UR.EmptyBeam_Purchase_Entry

                Case "ENTRY_EMPTYBEAM_SALES", Trim(UCase("Empty_Beam_Sales"))
                    vUsrRghts = Common_Procedures.UR.EmptyBeam_Sales_Entry


                Case "ENTRY_GENERAL_OTHER_PURCHASE", Trim(UCase("Other_GST_Entry"))
                    vUsrRghts = Common_Procedures.UR.General_Other_purchase_Entry

                Case "ENTRY_GENERAL_OTHER_SALES", Trim(UCase("Other_GST_Entry"))
                    vUsrRghts = Common_Procedures.UR.General_Other_Sales_Entry

                Case "ENTRY_CREDIT_NOTE", Trim(UCase("Other_GST_Entry"))
                    vUsrRghts = Common_Procedures.UR.Credit_note_Entry

                Case "ENTRY_DEBIT_NOTE", Trim(UCase("Other_GST_Entry"))
                    vUsrRghts = Common_Procedures.UR.Debit_note_Entry



                Case "ENTRY_SIZING_YARN_DELIVERY", Trim(UCase("Sizing_Yarn_Delivery"))
                    vUsrRghts = Common_Procedures.UR.Sizing_yarn_delivery_Entry

                Case "ENTRY_SIZING_PAVU_RECEIPT", Trim(UCase("Sizing_Pavu_Receipt"))
                    vUsrRghts = Common_Procedures.UR.Sizing_Pavu_Receipt_Entry

                Case "ENTRY_SIZING_SPECIFICATION", Trim(UCase("Sizing_Specification_GST"))
                    vUsrRghts = Common_Procedures.UR.Sizing_Specification_Entry

                Case "ENTRY_SIZING_YARN_RECEIPT", Trim(UCase("Sizing_Yarn_Receipt"))
                    vUsrRghts = Common_Procedures.UR.Sizing_Yarn_Receipt_Entry

                Case "ENTRY_SIZING_PAVU_DELIVERY_FROM_SIZING", Trim(UCase("SizSoft_PavuDelivery_Entry"))
                    vUsrRghts = Common_Procedures.UR.Sizing_Pavu_Delivery_From_Sizing_Entry


                Case "ENTRY_REWINDING_DELIVERY", Trim(UCase("Rewinding_Delivery"))
                    vUsrRghts = Common_Procedures.UR.Rewinding_Delivery_Entry

                Case "ENTRY_REWINDING_RECEIPT", Trim(UCase("Rewinding_Receipt"))
                    vUsrRghts = Common_Procedures.UR.Rewinding_Receipt_Entry




                Case "ENTRY_WEAVER_PAVU_DELIVERY", Trim(UCase("Weaver_Pavu_Delivery"))
                    vUsrRghts = Common_Procedures.UR.Weaver_Pavu_Delivery_Entry

                Case "ENTRY_WEAVER_YARN_DELIVERY", Trim(UCase("Weaver_Yarn_Delivery"))
                    vUsrRghts = Common_Procedures.UR.Weaver_Yarn_Delivery_Entry

                Case "ENTRY_WEAVER_PAVU_RECEIPT", Trim(UCase("Weaver_Pavu_Receipt"))
                    vUsrRghts = Common_Procedures.UR.Weaver_Pavu_Rceipt_Entry

                Case "ENTRY_WEAVER_KURAI_PAVU_RECEIPT", Trim(UCase("Weaver_KuraiPavu_Receipt"))
                    vUsrRghts = Common_Procedures.UR.Weaver_KuraiPavu_Rceipt_Entry

                Case "ENTRY_WEAVER_YARN_RECEIPT", Trim(UCase("Weaver_Yarn_Receipt"))
                    vUsrRghts = Common_Procedures.UR.Weaver_Yarn_Rceipt_Entry

                Case "ENTRY_WEAVER_PIECE_CHECKING", Trim(UCase("Weaver_Piece_Checking_Simple"))
                    vUsrRghts = Common_Procedures.UR.Weaver_Piece_Checking_Entry

                Case "ENTRY_WEAVER_WAGES", Trim(UCase("Weaver_Wages_Format2_GST")), Trim(UCase("Weaver_Wages_GST"))
                    vUsrRghts = Common_Procedures.UR.Weaver_Wages_Entry

                Case "ENTRY_WEAVER_CLOTH_RECEIPT", Trim(UCase("Weaver_Cloth_Receipt"))
                    vUsrRghts = Common_Procedures.UR.Weaver_Cloth_Rceipt_Entry

                Case "ENTRY_WEAVER_CLOTH_RECEIPT_AND_CHECKING", Trim(UCase("Weaver_ClothReceipt_cum_PieceChecking_Entry"))
                    vUsrRghts = Common_Procedures.UR.Weaver_ClothReceipt_and_PieceChecking_Entry

                Case "ENTRY_WEAVER_DEBIT", Trim(UCase("Weaver_Debit_Credit_Note_Entry"))
                    vUsrRghts = Common_Procedures.UR.Weaver_Debit_Entry


                Case "ENTRY_WEAVER_BOBIN_DELIVERY", Trim(UCase("Weaver_bobin_delivery_Entry"))
                    vUsrRghts = Common_Procedures.UR.Weaver_bobin_delivery_Entry

                Case "ENTRY_WEAVER_BOBNI_RETURN", Trim(UCase("Weaver_bobin_Return_Entry"))
                    vUsrRghts = Common_Procedures.UR.Weaver_bobin_Return_Entry

                Case "ENTRY_WEAVER_ADVANCE_PAYMENT", Trim(UCase("Weaver_Advance_payment"))
                    vUsrRghts = Common_Procedures.UR.Weaver_Advance_payment

                Case "ENTRY_LOT_APPROVAL", Trim(UCase("Lot_Approval_entry"))
                    vUsrRghts = Common_Procedures.UR.Lot_Approval_Entry
                Case "ENTRY_WEAVER_LOT_CHECKING_PLANING_ENTRY", Trim(UCase("Lot_Checking_Plan_ENtry"))
                    vUsrRghts = Common_Procedures.UR.Weaver_Lot_Checking_Planing_Entry
                Case "ENTRY_LOT_ALLOTMENT", Trim(UCase("Lot_Allotment_details"))
                    vUsrRghts = Common_Procedures.UR.Lot_Allotment_Details
                Case "ENTRY_WEAVER_PIECE_APPROVAL", Trim(LCase("Weaver_Piece_Approval_Entry"))
                    vUsrRghts = Common_Procedures.UR.Weaver_Piece_Approval_Entry

                    'Case "ENTRY_BOBIN_PURCHASE", Trim(UCase("Bobin_Purchase_GST"))
                    '    vUsrRghts = Common_Procedures.UR.Bobin_Purchase_Entry

                    'Case "ENTRY_BOBIN_RETURN", Trim(UCase("Bobin_Purchase_Return"))
                    '    vUsrRghts = Common_Procedures.UR.Bobin_Return_Entry

                    'Case "ENTRY_EMPTY_BOBIN_DELIVERY", Trim(UCase("Empty_Bobin_Delivery_Entry"))
                    '    vUsrRghts = Common_Procedures.UR.Empty_Bobin_Delivery_Entry

                    'Case "ENTRY_EMPTY_BOBIN_RECEIPT", Trim(UCase("Empty_Bobin_Receipt_Entry"))
                    '    vUsrRghts = Common_Procedures.UR.Empty_Bobin_Receipt_Entry



                Case "ENTRY_PAVUYARN_DELIVERY", Trim(UCase("Pavu_yarn_Delivery"))
                    vUsrRghts = Common_Procedures.UR.PavuYarn_Delivery_Entry

                Case "ENTRY_PAVUYARN_RECEIPT", Trim(UCase("Pavu_yarn_Receipt"))
                    vUsrRghts = Common_Procedures.UR.PavuYarn_Receipt_Entry



                Case "ENTRY_EMBTY_BEAMBAGCONE_DELIVERY", Trim(UCase("Empty_BeamBagCone_Delivery_Entry"))
                    vUsrRghts = Common_Procedures.UR.Empty_BeamBagCone_Delivery_Entry

                Case "ENTRY_EMBTY_BEAMBAGCONE_RECEIPT", Trim(UCase("Empty_BeamBagCone_Receipt_Entry"))
                    vUsrRghts = Common_Procedures.UR.Empty_BeamBagCone_Receipt_Entry

                    'Case "ENTRY_EMBTY_BAG_RECEIPT", Trim(UCase("Empty_Bag_Receipt_Entry"))
                    '    vUsrRghts = Common_Procedures.UR.Empty_Bag_Receipt_Entry

                Case "ENTRY_WEAVER_PAYMENT", Trim(UCase("Weaver_Payment_Entry"))
                    vUsrRghts = Common_Procedures.UR.Weaver_payment_Entry

                Case "ENTRY_PACKING_SLIP", Trim(UCase("Packing_Slip")), Trim(UCase("PackingSlip_Direct"))
                    vUsrRghts = Common_Procedures.UR.Packing_slip_Entry

                Case "ENTRY_PARTY_AMOUNT_RECEIPT", Trim(UCase("Party_Amount_Receipt_Entry"))
                    vUsrRghts = Common_Procedures.UR.Party_Amount_Receipt_Entry

                Case "ENTRY_CHEQUE_RETURN", Trim(UCase("Cheque_Return_Entry"))
                    vUsrRghts = Common_Procedures.UR.Cheque_return_Entry




                Case "ENTRY_YARN_EXCESS_SHORT", Trim(UCase("Yarn_Excess_Short"))
                    vUsrRghts = Common_Procedures.UR.Yarn_Excess_Short_Entry

                Case "ENTRY_PAVU_EXCESS_SHORT", Trim(UCase("Pavu_Excess_Short"))
                    vUsrRghts = Common_Procedures.UR.Pavu_Excess_Short_Entry
                Case "ENTRY_CLOTH_EXCESS_SHORT", Trim(UCase("Cloth_Excess_Short"))
                    vUsrRghts = Common_Procedures.UR.Cloth_Excess_Short_Entry
                Case "ENTRY_PIECE_EXCESS_SHORT", Trim(UCase("Piece_Excess_Short"))
                    vUsrRghts = Common_Procedures.UR.Piece_Excess_Short_Entry

                Case "ENTRY_EMPTYBEAM_EXCESS_SHORT", Trim(UCase("EmptyBeam_Excess_Short"))
                    vUsrRghts = Common_Procedures.UR.EmptyBeam_Excess_Short_Entry

                Case "ENTRY_YARN_TRANSFER", Trim(UCase("Yarn_Transfer"))
                    vUsrRghts = Common_Procedures.UR.Yarn_Transfer_Entry

                Case "ENTRY_PAVU_TRANSFER", Trim(UCase("Pavu_Transfer"))
                    vUsrRghts = Common_Procedures.UR.Pavu_Transfer_Entry

                Case "ENTRY_CLOTH_TRANSFER", Trim(UCase("Cloth_Transfer"))
                    vUsrRghts = Common_Procedures.UR.Cloth_Transfer_Entry

                Case "ENTRY_PIECE_TRANSFER", Trim(UCase("Piece_Transfer"))
                    vUsrRghts = Common_Procedures.UR.Piece_Transfer_Entry

                Case "ENTRY_PAVU_TRANSFER_BEAMWISE", Trim(UCase("Pavu_Transfer_BeamWise"))
                    vUsrRghts = Common_Procedures.UR.Pavu_Transfer_Beam_wise_Entry

                Case "ENTRY_BALE_TRANSFER", Trim(UCase("Bale_Transfer"))
                    vUsrRghts = Common_Procedures.UR.Bale_Transfer_Entry

                    'Case "ENTRY_BANK_PARTY", Trim(UCase("Bank_PartyName_Entry"))
                    '    vUsrRghts = Common_Procedures.UR.Bank_Party




                Case "ENTRY_COSTING", Trim(UCase("Costing_Entry"))
                    vUsrRghts = Common_Procedures.UR.Costing_Entry


                Case "ENTRY_WEAVER_CRIMP_CONSUMPTION_ENTRY", Trim(UCase("Crimp_Entry"))
                    vUsrRghts = Common_Procedures.UR.Crimp_entry

                Case "ENTRY_BOBIN_PURCHASE", Trim(UCase("Bobin_Purchase_GST"))
                    vUsrRghts = Common_Procedures.UR.Bobin_purchase_entry

                Case "ENTRY_BOBIN_SALES_ORDER", Trim(UCase("Bobin_Sales_Order_Entry"))
                    vUsrRghts = Common_Procedures.UR.Bobin_Sales_order_Entry


                Case "ENTRY_BOBIN_PRODUCTION", Trim(UCase("Bobin_Production"))
                    vUsrRghts = Common_Procedures.UR.Bobin_Production_Entry


                Case "ENTRY_JARI_PRODUCTION", Trim(UCase("Jari_Production"))
                    vUsrRghts = Common_Procedures.UR.Jari_production_Entry



                Case "ENTRY_VAN_TRIP", Trim(UCase("Van_Trip_Entry"))
                    vUsrRghts = Common_Procedures.UR.VanTrip_Entry


                Case "ENTRY_WEAVER_CLOTH_RETURN_DELIVERY", Trim(UCase("Weaver_Cloth_Return_Delivery"))
                    vUsrRghts = Common_Procedures.UR.Weaver_Cloth_Return_Delivery


                Case "ENTRY_BOBIN_SALES_DELIVERY", Trim(UCase("Bobin_Sales_Delivery_Entry_GST"))
                    vUsrRghts = Common_Procedures.UR.Bobin_Sales_delivery_Entry

                Case "ENTRY_BOBIN_SALES_DELIVERY_RETURN", Trim(UCase("Bobin_Sales_Delivery_Return"))
                    vUsrRghts = Common_Procedures.UR.Bobin_Sales_delivery_Return_Entry

                Case "ENTRY_JARI_SALES_DELIVERY", Trim(UCase("Jari_Sales_Delivery_Entry_GST"))
                    vUsrRghts = Common_Procedures.UR.Jari_Sales_delivery_Entry

                Case "ENTRY_JARI_SALES_RETURN", Trim(UCase("Jari_Sales_Return_Entry"))
                    vUsrRghts = Common_Procedures.UR.Jari_Sales_Return_Entry

                Case "ENTRY_EMPTY_BOBIN_DELIVERY", Trim(UCase("Empty_Bobin_Delivery_Entry"))
                    vUsrRghts = Common_Procedures.UR.Empty_Bobin_Delivery


                Case "ENTRY_EMPTY_BOBIN_RECEIPT", Trim(UCase("Empty_Bobin_REceipt_Entry"))
                    vUsrRghts = Common_Procedures.UR.Empty_Bobin_Receipt


                Case "ENTRY_PROFORMA_BOBIN_SALES", Trim(UCase("Proforma_Bobin_Sales_GST"))
                    vUsrRghts = Common_Procedures.UR.Proforma_bobin_sales

                    ''**********************************************************************************************************************************************************************


                Case "ENTRY_STORES_PURCHASE_INWARD", Trim(UCase("purchase_Inward_entry"))
                    vUsrRghts = Common_Procedures.UR.Store_purchase_Inward_entry





                Case "ENTRY_STORES_PURCHASE_ORDER", Trim(UCase("Stores_Item_PO_Entry"))
                    vUsrRghts = Common_Procedures.UR.Store_purchase_Order_entry



                Case "ENTRY_STORES_PURCHASE_RETURN", Trim(UCase("Stores_Item_PurchaseReturn_Entry"))
                    vUsrRghts = Common_Procedures.UR.Store_purchase_Return_entry

                Case "ENTRY_STORES_ITEM_ISSUE_TO_MACHINE", Trim(UCase("Stores_Item_Issue_Entry"))
                    vUsrRghts = Common_Procedures.UR.Store_Item_Issue_To_machine


                Case "ENTRY_STORES_ITEM_RETURN_FROM_MACHINE", Trim(UCase("Stores_Item_Return_Entry"))
                    vUsrRghts = Common_Procedures.UR.Store_Item_Return_from_Machine


                Case "ENTRY_STORES_ITEM_DELIVERY", Trim(UCase("Stores_Item_Delivery_Entry"))
                    vUsrRghts = Common_Procedures.UR.Store_Item_Delivery_Entry







                Case "ENTRY_STORES_ITEM_RECEIPT", Trim(UCase("Stores_Item_Receipt_Entry"))
                    vUsrRghts = Common_Procedures.UR.Store_Item_Receipt_Entry

                Case "ENTRY_STORES_SERVICE_DELIVERY", Trim(UCase("Stores_Service_Item_Delivery_Entry"))
                    vUsrRghts = Common_Procedures.UR.Store_Service_Delivery_Entry

                Case "ENTRY_STORES_SERVICE_RECEIPT", Trim(UCase("Stores_Service_Item_Receipt_Entry"))
                    vUsrRghts = Common_Procedures.UR.Store_Service_Receipt_Entry

                Case "ENTRY_STORES_GATE_PASS", Trim(UCase("Stores_Gate_Pass_Entry"))
                    vUsrRghts = Common_Procedures.UR.Stores_gate_Pass_Entry

                Case "ENTRY_STORES_ITEM_EXCESS", Trim(UCase("Stores_Item_Excess_Short_Entry"))
                    vUsrRghts = Common_Procedures.UR.Stores_Item_Excess_Short_Entry


                Case "ENTRY_STORES_DISPOSE", Trim(UCase("Stores_Item_Dispose_Entry"))
                    vUsrRghts = Common_Procedures.UR.Stores_Dispose_Entry


                Case "ENTRY_STORES_OIL_SERVICE", Trim(UCase("Stores_Oil_Service_Entry"))
                    vUsrRghts = Common_Procedures.UR.Stores_Oil_Service_Entry


                    ''**********************************************************************************************************************************************************************

                Case "ENTRY_VOUCHER", Trim(UCase("Voucher_Entry"))
                    vUsrRghts = Common_Procedures.UR.Voucher_Entry


                Case "ACCOUNTS_LEDGER_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.Accounts_Ledger

                Case "ACCOUNTS_GROUPLEDGER_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.Accounts_GroupLedger

                Case "ACCOUNTS_DAYBOOK", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.Accounts_DayBook
                Case "ACCOUNTS_ALL_LEDGER", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.Accounts_AllLedger

                Case "ACCOUNTS_TB", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.Accounts_TB

                Case "ACCOUNTS_PROFIT_LOSS", Trim(UCase("Cotton_Waste_Purchase_Entry"))
                    vUsrRghts = Common_Procedures.UR.Accounts_Profit_Loss


                Case "ACCOUNTS_BALANCESHEET", Trim(UCase("Yarn_Production_Entry"))
                    vUsrRghts = Common_Procedures.UR.Accounts_BalanceSheet


                Case "ACCOUNTS_CUSTOMERBILLS", Trim(UCase("Cotton_Sales_Entry_GST"))
                    vUsrRghts = Common_Procedures.UR.Accounts_CustomerBills



                Case "ACCOUNTS_AGENTBILLS", Trim(UCase("Cotton_Waste_Purchase_Entry"))
                    vUsrRghts = Common_Procedures.UR.Accounts_AgentBills


                Case "ACCOUNTS_AGENTCOMMISSION", Trim(UCase("Yarn_Production_Entry"))
                    vUsrRghts = Common_Procedures.UR.Accounts_Agentcommission


                Case "ACCOUNTS_VOUCHERREGISTER", Trim(UCase("Cotton_Sales_Entry_GST"))
                    vUsrRghts = Common_Procedures.UR.Accounts_VoucherRegister


                Case "ACCOUNTS_SALES_PARTY_LEDGER_PRINT", Trim(UCase("Single_Ledger_Entry"))
                    vUsrRghts = Common_Procedures.UR.Accounts_Sales_party_Ledger_Print


                    ''**********************************************************************************************************************************************************************

                Case "REPORT_USER_MODIFICATION", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.reports_user_modifications

                Case "REPORT_MASTER", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.Report_Master

                Case "REPORT_REGISTER", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.Report_Register

                Case "REPORT_SIZING_STOCK", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.Report_Sizing_Stock

                Case "REPORT_REWINDING_STOCK", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.Report_Rewinding_Stock

                Case "REPORT_WEAVER_STOCK", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.Report_Weaver_Stock

                Case "REPORT_GODOWN_STOCK", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.Report_Godown_Stock

                Case "REPORT_DAY_TRANSACTION_DETAILS", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.Report_Day_Transaction_Details

                Case "REPORT_CLOTH_SALES_ORDER_PENDING", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.Report_Cloth_Sales_Order_Pending

                Case "REPORT_CLOTH_INVOICE_DELIVERY_PENDING", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.Report_Cloth_Invoice_Pending

                Case "REPORT_GST_RETURN_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.Report_GST_return

                Case "REPORT_ANNEXURE_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.Report_Annexure

                Case "REPORT_TDS_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.Report_TDS
                Case "REPORT_TCS_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.Report_TCS

                Case "REPORT_STOCK_VALUE_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.Report_Stock_Value

                Case "REPORT_ALL_STOCK_STATEMENT_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.Report_All_Statements


                    ''**********************************************************************************************************************************************************************

                Case "REPORT_STORES", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.Report_stores


                Case "MASTER_STORES", Trim(UCase("Stores_Master"))
                    vUsrRghts = Common_Procedures.UR.master_Stores

                Case "ENTRY_PACKING_SLIP_MAIN", Trim(UCase("Packing_Slip2"))
                    vUsrRghts = Common_Procedures.UR.Packing_Slip2

                Case "MASTER_FABRIC_PHYSICAL_STOCK", Trim(UCase("Fabric_Physical_Stock"))
                    vUsrRghts = Common_Procedures.UR.Fabric_Physical_Stock

                Case "REPORT_INHOUSE", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.Inhouse_Reports




                    ''**********************************************************************************************************************************************************************

                Case "FPENTRY_PURCHASE", Trim(UCase("Processed_Item_Purchase"))
                    vUsrRghts = Common_Procedures.UR.FP_purchase_Entry


                Case "FPENTRY_PURCHASE_RETURN", Trim(UCase("Processed_Item_Purchase_Return"))
                    vUsrRghts = Common_Procedures.UR.FP_purchase_Return_Entry

                Case "FPENTRY_PROCESSING_DELIVERY", Trim(UCase("Processing_Delivery"))
                    vUsrRghts = Common_Procedures.UR.FP_Processing_Delivery_Entry

                Case "FPENTRY_PROCESSING_RECEIPT", Trim(UCase("Processing_Receipt"))
                    vUsrRghts = Common_Procedures.UR.FP_Processing_Receipt_Entry

                Case "FPENTRY_PROCESSING_RETURN", Trim(UCase("Processing_Return"))
                    vUsrRghts = Common_Procedures.UR.FP_Processing_Return_Entry

                Case "FPENTRY_PROCESSING_BILLMAKING", Trim(UCase("Processing_Bill_Making"))
                    vUsrRghts = Common_Procedures.UR.FP_Processing_Bill_Making_Entry

                Case "FPENTRY_FLOOR_TO_RACK", Trim(UCase("DeliveryTo_Rack"))
                    vUsrRghts = Common_Procedures.UR.FP_delivery_Entry


                Case "FPENTRY_RACK_TO_FLOOR", Trim(UCase("ReturnToFloor"))
                    vUsrRghts = Common_Procedures.UR.FP_Return_Entry


                Case "FPENTRY_SET", Trim(UCase("Processed_Item_Set_Entry"))
                    vUsrRghts = Common_Procedures.UR.FP_Set_Entry

                Case "FPENTRY_UNSET", Trim(UCase("Processed_Item_UnSet_Entry"))
                    vUsrRghts = Common_Procedures.UR.FP_UnSet_Entry

                Case "FPENTRY_ITEM_TRANSFER", Trim(UCase("Processed_Item_Transfer"))
                    vUsrRghts = Common_Procedures.UR.FP_Item_transfer_Entry

                Case "FPENTRY_PACKINGSLIP", Trim(UCase("FinishedProduct_PackingSlip_Entry"))
                    vUsrRghts = Common_Procedures.UR.FP_Packing_slip_Entry

                Case "FPENTRY_ORDER_INDENT", Trim(UCase("Finished_Product_Order_Entry"))
                    vUsrRghts = Common_Procedures.UR.FP_Order_indent_Entry

                Case "FPENTRY_INVOICE", Trim(UCase("FinishedProduct_Invoice_Entry_GST"))
                    vUsrRghts = Common_Procedures.UR.FP_Invoice_Entry

                Case "FPENTRY_CLOTH_SALES", Trim(UCase("FP_Cash_Sales_Entry"))
                    vUsrRghts = Common_Procedures.UR.FP_Cash_Sales_Entry

                Case "FPENTRY_SALES_RETURN", Trim(UCase("FinishedProduct_Sales_Return_Entry"))
                    vUsrRghts = Common_Procedures.UR.FP_Sales_return_Entry

                Case "FPENTRY_PROFORMA_SALES", Trim(UCase("FinishedProduct_Proforma_Invoice"))
                    vUsrRghts = Common_Procedures.UR.FP_Proforma_Invoice_Entry

                Case "FPENTRY_ITEM_EXCESS_SHORT", Trim(UCase("ProcessedItem_Excess_Short"))
                    vUsrRghts = Common_Procedures.UR.FP_Item_Excess_Short_Entry

                Case "FPENTRY_SHIRTING_BIT", Trim(UCase("Processed_Shirting_Entry"))
                    vUsrRghts = Common_Procedures.UR.FP_Shirt_bit_Entry

                Case "FPENTRY_PARTY_AMOUNT_RECEIPT", Trim(UCase("Party_Amount_Receipt_Entry"))
                    vUsrRghts = Common_Procedures.UR.FP_Party_Amount_Receipt_Entry

                Case "FPENTRY_CHEQUE_RETURN", Trim(UCase("Cheque_return_Entry"))
                    vUsrRghts = Common_Procedures.UR.FP_Cheque_return_Entry

                    ''**********************************************************************************************************************************************************************
                Case "FPMASTER_LEDGER_CREATION", Trim(UCase("LedgerCreation_Processing"))
                    vUsrRghts = Common_Procedures.UR.FP_Ledger_Creation

                Case "FPMASTER_AGENT_CREATION", Trim(UCase("Agent_Creation"))
                    vUsrRghts = Common_Procedures.UR.FP_Agent_Creation

                Case "FPMASTER_TRANSPORT_CREATION", Trim(UCase("Transport_Creation"))
                    vUsrRghts = Common_Procedures.UR.FP_Transport_Creation

                Case "FPMASTER_AREA_CREATION", Trim(UCase("Area_Creation"))
                    vUsrRghts = Common_Procedures.UR.FP_Area_Creation



                Case "FPMASTER_GREY_ITEM_CREATION", Trim(UCase("Grey_Item_Creation"))
                    vUsrRghts = Common_Procedures.UR.FP_Grey_Item_Creation

                Case "FPMASTER_FINISHED_PRODUCT_CREATION", Trim(UCase("Processed_Item_UnSet_Entry"))
                    vUsrRghts = Common_Procedures.UR.FP_Finished_Product_Creation

                Case "FPMASTER_ITEM_GROUP_CREATION", Trim(UCase("Item_Group_Creation"))
                    vUsrRghts = Common_Procedures.UR.FP_Item_Group_Creation

                Case "FPMASTER_UNIT_CREATION", Trim(UCase("Unit_Creation"))
                    vUsrRghts = Common_Procedures.UR.FP_Unit_Creation

                Case "FPMASTER_PRODUCT_SALES_NAME", Trim(UCase("Product_Sales_Name_Creation"))
                    vUsrRghts = Common_Procedures.UR.FP_Product_Sales_Name_Creation

                Case "FPMASTER_PROCESS_CREATION", Trim(UCase("Process_Creation"))
                    vUsrRghts = Common_Procedures.UR.FP_Process_Creation

                Case "FPMASTER_COLOUR_CREATION", Trim(UCase("Colour_Creation"))
                    vUsrRghts = Common_Procedures.UR.FP_Colour_Creation

                Case "FPMASTER_LOTNO_CREATION", Trim(UCase("LotNo_Creation"))
                    vUsrRghts = Common_Procedures.UR.FP_LotNo_Creation

                Case "FPMASTER_RACKNO_CREATION", Trim(UCase("RackNo_Creation"))
                    vUsrRghts = Common_Procedures.UR.FP_RackNo_Creation

                Case "FPMASTER_PACKING_TYPE_CREATION", Trim(UCase("Packing_Type_Creation"))
                    vUsrRghts = Common_Procedures.UR.FP_Packing_Type_Creation

                Case "MASTER_PACKING_TYPE_CREATION", Trim(UCase("Packing_Type_Creation"))
                    vUsrRghts = Common_Procedures.UR.Packing_Type_Creation


                Case "FPMASTER_USER_CREATION", Trim(UCase("user_Creation"))
                    vUsrRghts = Common_Procedures.UR.FP_user_Creation
                    ''========================================================================================================================================
                Case "INHOUSE_ENTRY_BEAM_KNOTTING", Trim(UCase("Beam_knotting_Entry"))
                    vUsrRghts = Common_Procedures.UR.Inhouse_Beam_knotting_Entry

                Case "INHOUSE_ENTRY_DOFFING", Trim(UCase("Doffing_Entry"))
                    vUsrRghts = Common_Procedures.UR.Inhouse_Doffing_Entry



                Case "INHOUSE_ENTRY_PIECE_CHECKING", Trim(UCase("Piece_Checking_InHouse_Format1"))
                    vUsrRghts = Common_Procedures.UR.Inhouse_Piece_Checking_Entry
                Case "INHOUSE_ENTRY_DOFFING_AND_PIECE_CHECKING", Trim(UCase("Doffing_Piece_Checking_Entry"))
                    vUsrRghts = Common_Procedures.UR.Inhouse_Doffing_and_PieceChecking_Entry


                Case "INHOUSE_ENTRY_BEAM_RUNOUT", Trim(UCase("Beam_Run_Out_Entry"))
                    vUsrRghts = Common_Procedures.UR.Inhouse_Beam_RunOut_Entry

                Case "INHOUSE_ENTRY_BEAM_CLOSE", Trim(UCase("Beam_Close"))
                    vUsrRghts = Common_Procedures.UR.Inhouse_Beam_Close_Entry

                Case "INHOUSE_ENTRY_WEAVING_EXCESS_SHORT", Trim(UCase("Weaving_Yarn_Excess_Short"))
                    vUsrRghts = Common_Procedures.UR.Inhouse_Weaving_Excess_Short_Entry

                Case "INHOUSE_ENTRY_SORT_CHANGE", Trim(UCase("Sort_Change_Entry"))
                    vUsrRghts = Common_Procedures.UR.Inhouse_Sort_Change_Entry


                Case "INHOUSE_ENTRY_PAVU_DELIVERY", Trim(UCase("Inhouse_Pavu_Delivery"))
                    vUsrRghts = Common_Procedures.UR.Inhouse_Pavu_Delivery_Entry

                Case "INHOUSE_ENTRY_YARN_DELIVERY", Trim(UCase("InHouse_Yarn_Delivery"))
                    vUsrRghts = Common_Procedures.UR.Inhouse_Yarn_Delivery_Entry

                Case "INHOUSE_ENTRY_PAVU_RECEIPT", Trim(UCase("Inhouse_Pavu_Receipt"))
                    vUsrRghts = Common_Procedures.UR.Inhouse_Pavu_Receipt_Entry

                Case "INHOUSE_ENTRY_YARN_RECEIPT", Trim(UCase("InHouse_Yarn_Receipt"))
                    vUsrRghts = Common_Procedures.UR.Inhouse_Yarn_Receipt_Entry

                Case "INHOUSE_ENTRY_LOOM_PRODUCTION", Trim(UCase("LoomNo_Production_Entry"))
                    vUsrRghts = Common_Procedures.UR.Inhouse_Loom_Production_Entry

                Case "INHOUSE_ENTRY_KNOTTING_BILL", Trim(UCase("Knotting_Bill_Entry"))
                    vUsrRghts = Common_Procedures.UR.Inhouse_Knotting_Bill_Entry
                    ''===============================================================================================================
                Case "ENTRY_JOBWORK_ORDER", Trim(UCase("JobWork_Order_Entry"))
                    vUsrRghts = Common_Procedures.UR.Jobwork_Order_Entry

                Case "ENTRY_PAVU_YARN_RECEIPT_JOBWORK", Trim(UCase("JobWork_PavuYarn_Receipt"))
                    vUsrRghts = Common_Procedures.UR.Jobwork_Pavu_Yarn_Receipt_Entry

                Case "ENTRY_JOBWORK_PRODUCTION", Trim(UCase("JobWork_Production_Entry"))
                    vUsrRghts = Common_Procedures.UR.Jobwork_Production_Entry

                Case "ENTRY_JOBWORK_PIECE_DELIVERY", Trim(UCase("JobWork_PieceDelivery_Entry"))
                    vUsrRghts = Common_Procedures.UR.Jobwork_Piece_Delivery_Entry

                Case "ENTRY_JOBWORK_INSPECTION", Trim(UCase("JobWork_PieceInspection_Entry"))
                    vUsrRghts = Common_Procedures.UR.Jobwork_Piece_Inspection_Entry


                Case "ENTRY_JOBWORK_CONVERSION_BILL", Trim(UCase("JobWork_ConversionBill_Entry"))
                    vUsrRghts = Common_Procedures.UR.Jobwork_Conversion_Bill_Entry

                Case "ENTRY_PAVU_YARN_RETURN_TO_JOBWORKER", Trim(UCase("Jobwork_Pavu_Yarn_Return_Entry"))
                    vUsrRghts = Common_Procedures.UR.Jobwork_Pavu_Yarn_Return_Delivery_Entry

                Case "ENTRY_EMPTY_BEAM_RETURN_TO_JOBWORKER", Trim(UCase("JobWork_Empty_BeamBagCone_Delivery_Entry"))
                    vUsrRghts = Common_Procedures.UR.Jobwork_EmptyBeam_Return_Delivery_Entry

                Case "TEXTILE_JOBWORK_REGISTER_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.TEXTILE_JOBWORK_REGISTER_REPORT

                Case "TEXTILE_JOBWORK_PENDING_REGISTER_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.TEXTILE_JOBWORK_PENDING_REGISTER_REPORT

                Case "TEXTILE_JOBWORK_YARN_STOCK_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.TEXTILE_JOBWORK_YARN_STOCK_REPORT

                Case "TEXTILE_JOBWORK_PAVU_STOCK_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.TEXTILE_JOBWORK_PAVU_STOCK_REPORT

                Case "TEXTILE_JOBWORK_EMPTYBEAM_STOCK_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.TEXTILE_JOBWORK_EMPTYBEAM_STOCK_REPORT
                Case "TEXTILE_JOBWORK_EMPTYBAG_STOCK_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.TEXTILE_JOBWORK_EMPTYBAG_STOCK_REPORT

                Case "TEXTILE_JOBWORK_EMPTYCONE_STOCK_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.TEXTILE_JOBWORK_EMPTYCONE_STOCK_REPORT

                Case "TEXTILE_JOBWORK_ALL_STOCK_LEDGER_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.TEXTILE_JOBWORK_ALL_STOCK_LEDGER_REPORT

                Case "TEXTILE_JOBWORK_ALL_STOCK_SUMMARY_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.TEXTILE_JOBWORK_ALL_STOCK_SUMMARY_REPORT

                Case "TEXTILE_JOBWORK_JOBWORKER_STOCK_STATEMENT_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.TEXTILE_JOBWORK_JOBWORKER_STOCK_STATEMENT_REPORT

                Case "TEXTILE_JOBWORK_DAY_TRANSACTION_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.TEXTILE_JOBWORK_DAY_TRANSACTION_REPORT

                Case "TEXTILE_JOBWORK_RECONCILIATION_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.TEXTILE_JOBWORK_RECONCILIATION_REPORT

                    '====================================================================================


                Case "MASTERS_DELIVERY_PARTY_CREATION", Trim(UCase("Delivery_Party_Creation"))
                    vUsrRghts = Common_Procedures.UR.Sizing_Delivery_Party_Creation


                Case "MASTERS_BAG_TYPE_CREATION", Trim(UCase("Bag_Type_Creation"))
                    vUsrRghts = Common_Procedures.UR.Bag_Type_Creation

                Case "MASTER_CONETYPE_CREATION", Trim(UCase("Cone_Type_Creation"))
                    vUsrRghts = Common_Procedures.UR.Cone_Type_Creation

                Case "MASTERS_SIZINGITEM_CREATION", Trim(UCase("Sizing_Item_Creation"))
                    vUsrRghts = Common_Procedures.UR.Sizing_Item_Creaion

                Case "MASTERS_UNIT_CREATION", Trim(UCase("Unit_Creation"))
                    vUsrRghts = Common_Procedures.UR.Unit_Creation

                Case "MASTERS_BEAMNO_CREATION", Trim(UCase("BeamNo_Creation"))
                    vUsrRghts = Common_Procedures.UR.Sizing_BeamNo_Creation

                Case "MASTER_SIZING_WASTE_MATERIAL_CREATION", Trim(UCase("Waste_Creation"))
                    vUsrRghts = Common_Procedures.UR.Sizing_WasteCreation

                Case "MASTERS_SIZINGSPARES_CREATION", Trim(UCase("Hardware_Creation"))
                    vUsrRghts = Common_Procedures.UR.Sizing_Spares_Creation



                Case "ENTRY_SIZING_JOBWORK_MODULE_YARN_RECEIPT", Trim(UCase("Sizing_YarnReceipt_Entry"))
                    vUsrRghts = Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_YARN_RECEIPT

                Case "ENTRY_SIZING_JOBWORK_MODULE_EMPTYBEAM_RECEIPT", Trim(UCase("Sizing_Empty_BeamBagCone_Receipt_Entry"))
                    vUsrRghts = Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_EMPTYBEAM_RECEIPT

                Case "ENTRY_SIZING_JOBWORK_MODULE_STATEMENT", Trim(UCase("Sizing_Statement"))
                    vUsrRghts = Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_STATEMENT

                Case "ENTRY_SIZING_JOBWORK_MODULE_INVOICE", Trim(UCase("Sizing_Invoice_GST"))
                    vUsrRghts = Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_INVOICE

                Case "ENTRY_SIZING_JOBWORK_MODULE_CASHDISCOUNT", Trim(UCase("Sizing_CashDiscount"))
                    vUsrRghts = Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CASHDISCOUNT

                Case "ENTRY_SIZING_JOBWORK_MODULE_PAVU_DELIVERY", Trim(UCase("Sizing_PavuDelivery_Entry"))
                    vUsrRghts = Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_PAVU_DELIVERY

                Case "ENTRY_SIZING_JOBWORK_MODULE_YARN_DELIVERY", Trim(UCase("Sizing_YarnDelivery_Entry"))
                    vUsrRghts = Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_YARN_DELIVERY

                Case "ENTRY_SIZING_JOBWORK_MODULE_EMPTY_BEAM_DELIVERY", Trim(UCase("Sizing_Empty_BeamBagCone_Delivery_Entry"))
                    vUsrRghts = Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_EMPTY_BEAM_DELIVERY

                Case "ENTRY_SIZING_JOBWORK_KURAI_PAVU_RECEIPT", Trim(UCase("Sizing_KurAi_Pavu_Receipt"))
                    vUsrRghts = Common_Procedures.UR.ENTRY_SIZING_JOBWORK_KURAI_PAVU_RECEIPT

                Case "ENTRY_SIZING_JOBWORK_MODULE_EMPTY_BEAM_BAG_EXCESS_SHORT", Trim(UCase("Sizing_Empty_BeamBagCone_Excess_Short"))
                    vUsrRghts = Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_EMPTY_BEAM_BAG_EXCESS_SHORT

                Case "ENTRY_SIZING_JOBWORK_MODULE_YARN_TRANSFER", Trim(UCase("Sizing_Yarn_Transfer"))
                    vUsrRghts = Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_YARN_TRANSFER
                Case "ENTRY_SIZING_JOBWORK_MODULE_YARN_EXCESS_SHORT", Trim(UCase("Sizing_Yarn_Excess_Short"))
                    vUsrRghts = Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_YARN_EXCESS_SHORT

                Case "ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_PURCHASE_ORDER", Trim(UCase("Sizing_Chemical_PO_Entry"))
                    vUsrRghts = Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_PURCHASE_ORDER

                Case "ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_PURCHASE", Trim(UCase("Sizing_Chemical_Purchase_Gst"))
                    vUsrRghts = Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_PURCHASE

                Case "ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_PURCHASE_RETURN", Trim(UCase("Sizing_Chemical_Purchase_Return_Gst"))
                    vUsrRghts = Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_PURCHASE_RETURN

                Case "ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_EXCESS_SHORT", Trim(UCase("Sizing_Chemical_ExcessShort"))
                    vUsrRghts = Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_CHEMICAL_EXCESS_SHORT

                Case "ENTRY_SIZING_JOBWORK_MODULE_WASTE_MATERIAL_SALES", Trim(UCase("-----"))
                    vUsrRghts = Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_WASTE_MATERIAL_SALES

                Case "ENTRY_SIZING_JOBWORK_MODULE_SPARES_PURCHASE", Trim(UCase("Sizing_Hardware_Purchase_GST"))
                    vUsrRghts = Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_SPARES_PURCHASE

                Case "ENTRY_SIZING_JOBWORK_MODULE_FIREWOOD_PURCHASE", Trim(UCase("Sizing_FireWood_Purchase"))
                    vUsrRghts = Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_FIREWOOD_PURCHASE

                Case "ENTRY_SIZING_JOBWORK_MODULE_FIREWOOD_CONSUMPTION", Trim(UCase("Sizing_FireWood_Consumption"))
                    vUsrRghts = Common_Procedures.UR.ENTRY_SIZING_JOBWORK_MODULE_FIREWOOD_CONSUMPTION




                Case "SIZING_JOBWORK_MODULE_REPORT_EMPTY_BEAM_REGISTER", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_EMPTY_BEAM_REGISTER

                Case "SIZING_JOBWORK_MODULE_REPORT_EMPTY_BAGS_REGISTER", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_EMPTY_BAGS_REGISTER

                Case "SIZING_JOBWORK_MODULE_REPORT_CONES_REGISTER", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_CONES_REGISTER

                Case "SIZING_JOBWORK_MODULE_REPORT_YARN_REGISTER", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_YARN_REGISTER

                Case "SIZING_JOBWORK_MODULE_REPORT_PAVU_REGISTER", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_PAVU_REGISTER

                Case "SIZING_JOBWORK_MODULE_REPORT_ALL_STOCK_LEDGER", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_ALL_STOCK_LEDGER

                Case "SIZING_JOBWORK_MODULE_REPORT_ALL_STOCK_SUMMARY", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_ALL_STOCK_SUMMARY

                Case "SIZING_JOBWORK_MODULE_REPORTS_ALL_STOCK_STATEMENTS", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_ALL_STOCK_STATEMENTS

                Case "SIZING_JOBWORK_MODULE_REPORT_PRODUCTION_REGISTER", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_PRODUCTION_REGISTER

                Case "SIZING_JOBWORK_MODULE_REPORT_INVOICE_REGISTER", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_INVOICE_REGISTER

                Case "SIZING_JOBWORK_MODULE_REPORTS_CASH_DISCOUNT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_CASH_DISCOUNT

                Case "SIZING_JOBWORK_MODULE_REPORT_CHEMICAL_REGISTER", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_CHEMICAL_REGISTER

                Case "SIZING_JOBWORK_MODULE_REPORTS_HARDWARE_PURCHASE", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_HARDWARE_PURCHASE


                Case "SIZING_JOBWORK_MODULE_REPORTS_FIREWOOD_PURCHASE", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_FIREWOOD_PURCHASE

                Case "SIZING_JOBWORK_MODULE_REPORT_FIREWOOD_CONSUMPTION_REGISTER", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORT_FIREWOOD_CONSUMPTION_REGISTER

                Case "SIZING_JOBWORK_MODULE_REPORTS_WASTE_MATERIAL", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_WASTE_MATERIAL

                Case "SIZING_JOBWORK_MODULE_REPORTS_DAY_TRANSACTION", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_DAY_TRANSACTION

                Case "SIZING_JOBWORK_MODULE_REPORTS_GST_RETURN", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.SIZING_JOBWORK_MODULE_REPORTS_GST_RETURN


                Case "OEENTRY_COTTON_PURCHASE_ENTRY", Trim(UCase("OE_Purchase_Entry_GST"))
                    vUsrRghts = Common_Procedures.UR.OEENTRY_COTTON_PURCHASE_ENTRY
                Case "OEENTRY_COTTON_PURCHASE_RETURN_ENTRY", Trim(UCase("OE_Cotton_Purchase_Return"))
                    vUsrRghts = Common_Procedures.UR.OEENTRY_COTTON_PURCHASE_RETURN_ENTRY
                Case "OEENTRY_MIXING_ENTRY", Trim(UCase("OE_Mixing_Entry"))
                    vUsrRghts = Common_Procedures.UR.OEENTRY_MIXING_ENTRY
                Case "OEENTRY_PRODUCTION_ENTRY", Trim(UCase("OE_Production_Entry"))
                    vUsrRghts = Common_Procedures.UR.OEENTRY_PRODUCTION_ENTRY
                Case "OEENTRY_PACKING_ENTRY", Trim(UCase("OE_Packing_Entry"))
                    vUsrRghts = Common_Procedures.UR.OEENTRY_PACKING_ENTRY
                Case "OEENTRY_ORDER_ENTRY", Trim(UCase("OE_Yarn_Sales_Order"))
                    vUsrRghts = Common_Procedures.UR.OEENTRY_ORDER_ENTRY
                Case "OEENTRY_DELIVERY_ENTRY", Trim(UCase("OE_Yarn_Sales_Delivery"))
                    vUsrRghts = Common_Procedures.UR.OEENTRY_DELIVERY_ENTRY
                Case "OEENTRY_INVOICE_ENTRY", Trim(UCase("OE_Yarn_Sales_Invoice_GST"))
                    vUsrRghts = Common_Procedures.UR.OEENTRY_INVOICE_ENTRY
                Case "OEENTRY_WASTE_SALES_ENTRY", Trim(UCase("OE_Cotton_Waste_Sales_GST"))
                    vUsrRghts = Common_Procedures.UR.OEENTRY_WASTE_SALES_ENTRY
                Case "OEENTRY_INVOICE_RETURN_ENTRY", Trim(UCase("OE_Yarn_Sales_Invoice_Return"))
                    vUsrRghts = Common_Procedures.UR.OEENTRY_INVOICE_RETURN_ENTRY
                Case "OEENTRY_DELIVERY_RETURN_ENTRY", Trim(UCase("OE_Yarn_Sales_Delivery_Return"))
                    vUsrRghts = Common_Procedures.UR.OEENTRY_DELIVERY_RETURN_ENTRY
                Case "OEENTRY_BORA_STRITCHING_ENTRY", Trim(UCase("OE_Cotton_Bora_Stitching"))
                    vUsrRghts = Common_Procedures.UR.OEENTRY_BORA_STRITCHING_ENTRY
                Case "OEENTRY_REELING_DELIVERY_ENTRY", Trim(UCase("OE_Reeling_Delivery"))
                    vUsrRghts = Common_Procedures.UR.OEENTRY_REELING_DELIVERY_ENTRY
                Case "OEENTRY_REELING_RECEIPT_ENTRY", Trim(UCase("OE_Reeling_Receipt"))
                    vUsrRghts = Common_Procedures.UR.OEENTRY_REELING_RECEIPT_ENTRY
                Case "OEENTRY_STOCK_TRANSFER_ENTRY", Trim(UCase("OE_Stock_Transfer_Entry"))
                    vUsrRghts = Common_Procedures.UR.OEENTRY_STOCK_TRANSFER_ENTRY



                Case "OESPINNING_REGISTER_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.OESPINNING_REGISTER_REPORT
                Case "OESPINNING_COTTON_STOCK_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.OESPINNING_COTTON_STOCK_REPORT
                Case "OESPINNING_MIXING_STOCK_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.OESPINNING_MIXING_STOCK_REPORT
                Case "OESPINNING_BAG_YARN_STOCK_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.OESPINNING_BAG_YARN_STOCK_REPORT
                Case "OESPINNING_LOOSE_YARN_STOCK_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.OESPINNING_LOOSE_YARN_STOCK_REPORT
                Case "OESPINNING_REELING_STOCK_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.OESPINNING_REELING_STOCK_REPORT
                Case "OESPINNING_HANK_YARN_STOCK_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.OESPINNING_HANK_YARN_STOCK_REPORT
                Case "OESPINNING_WASTE_STOCK_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.OESPINNING_WASTE_STOCK_REPORT
                Case "OESPINNING_YARN_STOCK_BAGNOWISE_STOCK_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.OESPINNING_YARN_STOCK_BAGNOWISE_STOCK_REPORT
                Case "OESPINNING_ALL_STOCK_SUMMARY_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.OESPINNING_ALL_STOCK_SUMMARY_REPORT
                Case "OESPINNING_COMMISSION_REGISTER_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.OESPINNING_COMMISSION_REGISTER_REPORT
                Case "OESPINNING_GSTR_1_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.OESPINNING_GSTR_1_REPORT
                Case "OESPINNING_GSTR_2_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.OESPINNING_GSTR_2_REPORT
                Case "OESPINNING_ORDER_PENDING_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.OESPINNING_ORDER_PENDING_REPORT
                Case "OESPINNING_CARDING_STOCK_REPORT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.OESPINNING_CARDING_STOCK_REPORT





                Case "ENTRY_EMPLOYEE_ATTENDANCE", Trim(UCase("Payroll_Employee_Creation"))
                    vUsrRghts = Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_ATTENDANCE
                Case "ENTRY_ATTENDANCE_LOG_FROM_MACHINE", Trim(UCase("Payroll_AttendanceLog_FromMachine"))
                    vUsrRghts = Common_Procedures.UR.PAYROLL_ENTRY_ATTENDANCE_LOG_FROM_MACHINE
                Case "ENTRY_EMPLOYEE_ATTENDANCE_FROM_MACHINE", Trim(UCase("PayRoll_Employee_Attendance_From_Machine"))
                    vUsrRghts = Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_ATTENDANCE_FROM_MACHINE
                Case "ENTRY_EMPLOYEE_TIMING_ADDITION", Trim(UCase("PayRoll_Employee_Timing_Addition"))
                    vUsrRghts = Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_TIMING_ADDITION

                Case "ENTRY_EMPLOYEE_SALARY", Trim(UCase("Payroll_Deduction_On_Salary_CategoryWise"))
                    vUsrRghts = Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_SALARY
                Case "ENTRY_EMPLOYEE_SALARY_ADVANCE_PAYMENT", Trim(UCase("Employee_payment_Entry"))
                    vUsrRghts = Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_SALARY_ADVANCE_PAYMENT
                Case "ENTRY_EMPLOYEE_ADVANCE_ADDITION", Trim(UCase("PayRoll_Employee_Advance_Deduction"))
                    vUsrRghts = Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_ADVANCE_ADDITION
                Case "ENTRY_EMPLOYEE_CREATION", Trim(UCase("Payroll_Employee_Creation"))
                    vUsrRghts = Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_CREATION
                Case "ENTRY_CATEGORY_CREATION", Trim(UCase("PayRoll_Category_Creation"))
                    vUsrRghts = Common_Procedures.UR.PAYROLL_ENTRY_CATEGORY_CREATION
                Case "ENTRY_SALARY_PAYMENT_TYPE", Trim(UCase("PayRoll_Salary_PaymentType_Creation"))
                    vUsrRghts = Common_Procedures.UR.PAYROLL_ENTRY_SALARY_PAYMENT_TYPE
                Case "ENTRY_EMPLOYEE_ADVANCE", Trim(UCase("PayRoll_Employee_Salary_Advance_Payment"))
                    vUsrRghts = Common_Procedures.UR.PAYROLL_ENTRY_EMPLOYEE_ADVANCE


                Case "REPORT_SALARY_REGISTER", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.PAYROLL_REPORT_SALARY_REGISTER
                Case "REPORT_NET_PAY_REGISTER", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.PAYROLL_REPORT_NET_PAY_REGISTER
                Case "REPORT_ATTENDANCE_REGISTER", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.PAYROLL_REPORT_ATTENDANCE_REGISTER
                Case "REPORT_ATTENDANCE_MONTHWISE_REGISTER", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.PAYROLL_REPORT_ATTENDANCE_MONTHWISE_REGISTER
                Case "REPORT_EMPLOYEE_PAYMENT_REGISTER", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.PAYROLL_REPORT_EMPLOYEE_PAYMENT_REGISTER
                Case "REPORT_EMPLOYEE_DEDUCATION", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.PAYROLL_REPORT_EMPLOYEE_DEDUCATION
                Case "REPORT_EMPLOYEE_ACCOUNT_DETAILS", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.PAYROLL_REPORT_EMPLOYEE_ACCOUNT_DETAILS
                Case "REPORT_EMPLOYEE_REGISTER", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.PAYROLL_REPORT_EMPLOYEE_REGISTER






                Case "REPORTS_STORES_MASTERS", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.REPORTS_STORES_MASTERS
                Case "REPORTS_STORES_REGISTER", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.REPORTS_STORES_REGISTER
                Case "REPORTS_STORES_PURCHASE_ORDER_PENDING", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.REPORTS_STORES_PURCHASE_ORDER_PENDING
                Case "REPORTS_STORES_MONTHLY_ITEM_ISSUE_STATEMENT", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.REPORTS_STORES_MONTHLY_ITEM_ISSUE_STATEMENT
                Case "REPORTS_STORES_MONTHLY_ITEM_ISSUE_STATEMENT_ALL_LOOM", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.REPORTS_STORES_MONTHLY_ITEM_ISSUE_STATEMENT_ALL_LOOM
                Case "REPORTS_STORES_SERVICE_RECEIPT_ITEM_PENDING", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.REPORTS_STORES_SERVICE_RECEIPT_ITEM_PENDING
                Case "REPORTS_OIL_SERVICE_PENDING", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.REPORTS_OIL_SERVICE_PENDING


                Case "REPORTS_STORES_NEW_ITEM_STOCK_DETAILS", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.REPORTS_STORES_NEW_ITEM_STOCK_DETAIL
                Case "REPORTS_STORES_OLD_ITEM_STOCK_DETAILS_USABLE", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.REPORTS_STORES_OLD_ITEM_STOCK_DETAILS_USABLE
                Case "REPORTS_STORES_OLD_ITEM_STOCK_DETAILS_SCRAP", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.REPORTS_STORES_OLD_ITEM_STOCK_DETAILS_SCRAP
                Case "REPORTS_STORES_ITEM_STOCK_DETAILS_ALL", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.REPORTS_STORES_ITEM_STOCK_DETAILS_ALL
                Case "REPORTS_STORES_NEW_ITEM_STOCK_SUMMARY", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.REPORTS_STORES_NEW_ITEM_STOCK_SUMMARY
                Case "REPORTS_STORES_OLD_ITEM_STOCK_SUMMARY_USABLE", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.REPORTS_STORES_OLD_ITEM_STOCK_SUMMARY_USABLE

                Case "REPORTS_STORES_OLD_ITEM_STOCK_SUMMARY_SCRAP", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.REPORTS_STORES_OLD_ITEM_STOCK_SUMMARY_SCRAP
                Case "REPORTS_STORES_ITEM_STOCK_SUMMARY_ALL", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.REPORTS_STORES_ITEM_STOCK_SUMMARY_ALL
                Case "REPORTS_STORES_ITEM_STOCK_VALUE", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.REPORTS_STORES_ITEM_STOCK_VALUE
                Case "REPORTS_STORES_PURCHASE_PLANNING", Trim(UCase("Report_Details"))
                    vUsrRghts = Common_Procedures.UR.REPORTS_STORES_PURCHASE_PLANNING


            End Select

        End If

        get_User_AccessRights_Of_Entry = Trim(vUsrRghts)

    End Function

    Public Shared Function UserRight_NEWCheck(ByVal vChkFor As Common_Procedures.UserRightsCheckFor, ByVal User_Access_Type As String, ByVal NewEntry_Status As Boolean, Optional ByVal VBForm As Form = Nothing, Optional ByVal Cn1 As SqlClient.SqlConnection = Nothing, Optional ByVal Entry_TableName As String = "", Optional ByVal Entry_PkFieldName As String = "", Optional ByVal Entry_PkFieldValue As String = "", Optional ByVal DateCheck_FieldName As String = "", Optional ByVal Entry_PkField_Condition As String = "", Optional ByVal Entry_Comp_Year_Condition As String = "", Optional ByVal vOrderBy_Fields As String = "", Optional ByVal vNewEntryDateValue As Date = #1/1/1979#) As Boolean
        Dim Cn2 As New SqlClient.SqlConnection
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim vChk_Add_ToDay_STS As Boolean
        Dim vChk_Edit_ToDay_STS As Boolean
        Dim vChk_Del_ToDay_STS As Boolean
        Dim vSQLCondt As String = ""
        Dim vEntDate As Date
        Dim vEntCode As String = ""
        Dim vAskPwdSTS As String = ""
        Dim vUsr_AcsType As String = ""
        Dim vErrWarningMsg As String = ""
        Dim vIS_ToDay_Entry As Boolean = False
        Dim vDys As Integer = 0


        UserRight_NEWCheck = True

        If Val(Common_Procedures.User.IdNo) <> 1 Then

            If InStr(Trim(UCase(User_Access_Type)), "~L~") = 0 Then

                If vChkFor = 1 Then

                    If NewEntry_Status = True Then

                        If InStr(Trim(UCase(User_Access_Type)), "~A~") = 0 Then

                            vChk_Add_ToDay_STS = UserRight_Check_Adding_TodayEntry_Status(User_Access_Type, vNewEntryDateValue, vIS_ToDay_Entry)

                            If vChk_Add_ToDay_STS = False Then
                                vErrWarningMsg = ""
                                If InStr(Trim(UCase(User_Access_Type)), "~ATD~") > 0 And vIS_ToDay_Entry = False Then
                                    vErrWarningMsg = "previous date Entries"
                                Else
                                    vErrWarningMsg = "New Entries"
                                End If
                                MessageBox.Show("You have No Rights to Add " & vErrWarningMsg, "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                                UserRight_NEWCheck = False
                                Exit Function
                            End If


                        End If


                    Else

                        If InStr(Trim(UCase(User_Access_Type)), "~E~") = 0 Then

                            vChk_Edit_ToDay_STS = False

                            If InStr(Trim(UCase(User_Access_Type)), "~EBP~") > 0 Then '---EDITING BEFORE PRINTING----

                                If Trim(Entry_TableName) <> "" And Trim(Entry_PkField_Condition) <> "" Then

                                    vSQLCondt = ""
                                    If Trim(Entry_PkField_Condition) <> "" Then
                                        vSQLCondt = " Where " & Trim(Entry_PkField_Condition)
                                    End If

                                    Da = New SqlClient.SqlDataAdapter("Select PrintOut_Status from " & Trim(Entry_TableName) & " " & Trim(vSQLCondt), Cn1)
                                    Dt1 = New DataTable
                                    Da.Fill(Dt1)
                                    If Dt1.Rows.Count > 0 Then

                                        If IsDBNull(Dt1.Rows(0)(0).ToString) = False Then

                                            If Val(Dt1.Rows(0)(0).ToString) = 0 Then
                                                vChk_Edit_ToDay_STS = True
                                                vChk_Add_ToDay_STS = UserRight_Check_Adding_TodayEntry_Status(User_Access_Type, vNewEntryDateValue, vIS_ToDay_Entry)
                                                If vIS_ToDay_Entry = False And vChk_Add_ToDay_STS = False Then
                                                    vChk_Edit_ToDay_STS = False
                                                End If

                                            End If

                                        End If

                                    End If
                                    Dt1.Clear()

                                    If vChk_Edit_ToDay_STS = False Then
                                        GoTo LOOP1
                                    End If

                                End If

                            End If

                            If InStr(Trim(UCase(User_Access_Type)), "~ETD~") > 0 Or InStr(Trim(UCase(User_Access_Type)), "~EDITNDYS~") > 0 Then '---EDITING TODAY'S ENTRY----

                                vChk_Edit_ToDay_STS = False
                                If Trim(Entry_TableName) <> "" And Trim(DateCheck_FieldName) <> "" Then

                                    vSQLCondt = ""
                                    If Trim(Entry_PkField_Condition) <> "" Then
                                        vSQLCondt = " Where " & Trim(Entry_PkField_Condition)
                                    End If

                                    vEntDate = #1/1/1979#
                                    Da = New SqlClient.SqlDataAdapter("Select " & Trim(DateCheck_FieldName) & " from " & Trim(Entry_TableName) & " " & Trim(vSQLCondt), Cn1)
                                    Dt1 = New DataTable
                                    Da.Fill(Dt1)
                                    If Dt1.Rows.Count > 0 Then

                                        If IsDBNull(Dt1.Rows(0)(0).ToString) = False Then

                                            vEntDate = Dt1.Rows(0)(0)

                                            vDys = DateDiff("d", vEntDate, Common_Procedures.settings.Sdd)
                                            If vDys = 0 Then
                                                If InStr(Trim(UCase(User_Access_Type)), "~ETD~") > 0 Then
                                                    vChk_Edit_ToDay_STS = True
                                                    vChk_Add_ToDay_STS = UserRight_Check_Adding_TodayEntry_Status(User_Access_Type, vNewEntryDateValue, vIS_ToDay_Entry)
                                                    If vIS_ToDay_Entry = False And vChk_Add_ToDay_STS = False Then
                                                        vChk_Edit_ToDay_STS = False
                                                    End If
                                                End If

                                            ElseIf vDys <= Val(Common_Procedures.User.EDIT_LAST_n_DAYS) And vDys > 0 Then

                                                If InStr(Trim(UCase(User_Access_Type)), "~EDITNDYS~") > 0 Then
                                                    vChk_Edit_ToDay_STS = True
                                                    vChk_Add_ToDay_STS = UserRight_Check_Adding_TodayEntry_Status(User_Access_Type, vNewEntryDateValue, vIS_ToDay_Entry)
                                                    If vIS_ToDay_Entry = False And vChk_Add_ToDay_STS = False Then
                                                        vChk_Edit_ToDay_STS = False
                                                    End If
                                                End If

                                            End If

                                            'If DateDiff("d", vEntDate, Common_Procedures.settings.Sdd) = 0 Then
                                            '    vChk_Edit_ToDay_STS = True
                                            '    vChk_Add_ToDay_STS = UserRight_Check_Adding_TodayEntry_Status(User_Access_Type, vNewEntryDateValue, vIS_ToDay_Entry)
                                            '    If vIS_ToDay_Entry = False And vChk_Add_ToDay_STS = False Then
                                            '        vChk_Edit_ToDay_STS = False
                                            '    End If
                                            'End If

                                        End If

                                    End If
                                    Dt1.Clear()

                                    If vChk_Edit_ToDay_STS = False Then
                                        GoTo LOOP1
                                    End If

                                End If

                            End If

                            If InStr(Trim(UCase(User_Access_Type)), "~ELE~") > 0 Then '---EDITING LAST ENTRY----

                                vChk_Edit_ToDay_STS = False
                                If Trim(Entry_TableName) <> "" And Trim(Entry_PkFieldName) <> "" And Trim(Entry_PkFieldValue) <> "" And Trim(vOrderBy_Fields) <> "" Then

                                    vSQLCondt = ""
                                    If Trim(Entry_Comp_Year_Condition) <> "" Then
                                        vSQLCondt = " Where " & Trim(Entry_Comp_Year_Condition)
                                    End If
                                    If Trim(vOrderBy_Fields) <> "" Then
                                        vSQLCondt = " Order by " & Trim(vOrderBy_Fields)
                                    End If

                                    Da = New SqlClient.SqlDataAdapter("Select top 1 " & Trim(Entry_PkFieldName) & " from " & Trim(Entry_TableName) & " " & Trim(vSQLCondt), Cn1)
                                    Dt1 = New DataTable
                                    Da.Fill(Dt1)
                                    If Dt1.Rows.Count > 0 Then
                                        If IsDBNull(Dt1.Rows(0)(0).ToString) = False Then
                                            If Trim(UCase(Dt1.Rows(0)(0).ToString)) = Trim(UCase(Entry_PkFieldValue)) Then

                                                vChk_Edit_ToDay_STS = True
                                                vChk_Edit_ToDay_STS = UserRight_Check_Adding_TodayEntry_Status(User_Access_Type, vNewEntryDateValue, vIS_ToDay_Entry)
                                                If vIS_ToDay_Entry = False And vChk_Add_ToDay_STS = False Then
                                                    vChk_Edit_ToDay_STS = False
                                                End If

                                            End If
                                        End If
                                    End If
                                    Dt1.Clear()

                                    If vChk_Edit_ToDay_STS = False Then
                                        GoTo LOOP1
                                    End If

                                End If

                            End If

LOOP1:
                            If vChk_Edit_ToDay_STS = False Then
                                vErrWarningMsg = ""
                                If InStr(Trim(UCase(User_Access_Type)), "~ETD~") > 0 Or InStr(Trim(UCase(User_Access_Type)), "~EDITNDYS~") > 0 Then
                                    vErrWarningMsg = ", cannot edit Previous date Entries"
                                End If
                                If InStr(Trim(UCase(User_Access_Type)), "~ELE~") > 0 Then
                                    vErrWarningMsg = vErrWarningMsg & ", can edit only Last Entry"
                                End If
                                If InStr(Trim(UCase(User_Access_Type)), "~ELE~") > 0 Then
                                    vErrWarningMsg = vErrWarningMsg & ", cannot edit entry after taking printout."
                                End If
                                MessageBox.Show("You have no Editing Rights  " & vErrWarningMsg, "DOES NOT SAVE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                                UserRight_NEWCheck = False
                                Exit Function
                            End If


                        End If


                    End If



                ElseIf vChkFor = 2 Then   '---DELETING----

                    If InStr(Trim(UCase(User_Access_Type)), "~D~") = 0 Then

                        vChk_Del_ToDay_STS = False

                        If InStr(Trim(UCase(User_Access_Type)), "~DBP~") > 0 Then '---DELETE BEFORE PRINTING----

                            If Trim(Entry_TableName) <> "" And Trim(Entry_PkField_Condition) <> "" Then

                                vSQLCondt = ""
                                If Trim(Entry_PkField_Condition) <> "" Then
                                    vSQLCondt = " Where " & Trim(Entry_PkField_Condition)
                                End If

                                Da = New SqlClient.SqlDataAdapter("Select PrintOut_Status from " & Trim(Entry_TableName) & " " & Trim(vSQLCondt), Cn1)
                                Dt1 = New DataTable
                                Da.Fill(Dt1)
                                If Dt1.Rows.Count > 0 Then

                                    If IsDBNull(Dt1.Rows(0)(0).ToString) = False Then

                                        If Val(Dt1.Rows(0)(0).ToString) = 0 Then
                                            vChk_Del_ToDay_STS = True
                                        End If

                                    End If

                                End If
                                Dt1.Clear()

                                If vChk_Del_ToDay_STS = False Then
                                    GoTo LOOP2
                                End If

                            End If

                        End If



                        If InStr(Trim(UCase(User_Access_Type)), "~DTD~") > 0 Or InStr(Trim(UCase(User_Access_Type)), "~DELNDYS~") > 0 Then  '---DELETE TODAYS'S ENTRY ----

                            vChk_Del_ToDay_STS = False
                            If Trim(Entry_TableName) <> "" And Trim(DateCheck_FieldName) <> "" Then

                                vSQLCondt = ""
                                If Trim(Entry_PkField_Condition) <> "" Then
                                    vSQLCondt = " Where " & Trim(Entry_PkField_Condition)
                                End If

                                vEntDate = #1/1/1979#
                                Da = New SqlClient.SqlDataAdapter("Select " & Trim(DateCheck_FieldName) & " from " & Trim(Entry_TableName) & " " & Trim(vSQLCondt), Cn1)
                                Dt1 = New DataTable
                                Da.Fill(Dt1)
                                If Dt1.Rows.Count > 0 Then
                                    If IsDBNull(Dt1.Rows(0)(0).ToString) = False Then
                                        vEntDate = Dt1.Rows(0)(0)

                                        vDys = DateDiff("d", vEntDate, Common_Procedures.settings.Sdd)
                                        If vDys = 0 Then
                                            If InStr(Trim(UCase(User_Access_Type)), "~DTD~") > 0 Then
                                                vChk_Del_ToDay_STS = True
                                            End If

                                        ElseIf vDys <= Val(Common_Procedures.User.DELETE_LAST_n_DAYS) And vDys > 0 Then

                                            If InStr(Trim(UCase(User_Access_Type)), "~DELNDYS~") > 0 Then
                                                vChk_Del_ToDay_STS = True
                                            End If

                                        End If

                                        'If DateDiff("d", vEntDate, Common_Procedures.settings.Sdd) = 0 Then
                                        '    vChk_Del_ToDay_STS = True
                                        'End If


                                    End If
                                End If
                                Dt1.Clear()

                            End If

                        End If

LOOP2:
                        If vChk_Del_ToDay_STS = False Then
                            vErrWarningMsg = ""
                            If InStr(Trim(UCase(User_Access_Type)), "~DBP~") > 0 Or InStr(Trim(UCase(User_Access_Type)), "~DELNDYS~") > 0 Then
                                vErrWarningMsg = ", cannot delete entry after taking printout"
                            End If
                            If InStr(Trim(UCase(User_Access_Type)), "~DTD~") > 0 Then
                                vErrWarningMsg = vErrWarningMsg & ", cannot delete Previous date Entries"
                            End If
                            MessageBox.Show("You have no Deleting Rights " & vErrWarningMsg, "DOES NOT DELETE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                            UserRight_NEWCheck = False
                            Exit Function
                        End If

                    End If



                ElseIf vChkFor = 3 Then   '---   INSERT  ----
                    If InStr(Trim(UCase(User_Access_Type)), "~I~") = 0 Then
                        MessageBox.Show("You have no INSERT Rights ", "DOES NOT INSERT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                        UserRight_NEWCheck = False
                        Exit Function
                    End If

                ElseIf vChkFor = 4 Then   '---   PRINT  ----
                    If InStr(Trim(UCase(User_Access_Type)), "~P~") = 0 Then
                        MessageBox.Show("You have no PRINT Rights ", "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                        UserRight_NEWCheck = False
                        Exit Function
                    End If

                End If


            End If

        End If

        If UserRight_NEWCheck = True And Val(Common_Procedures.User.IdNo) <> 1 Then

            If IsNothing(VBForm) = False Then

                Cn2 = New SqlClient.SqlConnection(Common_Procedures.ConnectionString_CompanyGroupdetails)
                Cn2.Open()

                vAskPwdSTS = Common_Procedures.get_FieldValue(Cn2, "User_Head", "AskPassword_On_Save_Edit_Delete", "(User_IdNo = " & Str(Val(Common_Procedures.User.IdNo)) & ")")

                If Val(vAskPwdSTS) = 1 Then
                    Common_Procedures.get_UserName_Password(VBForm)
                    vUsr_AcsType = get_User_AccessRights_Of_Entry(VBForm)
                    If Common_Procedures.UserRight_NEWCheck(vChkFor, vUsr_AcsType, NewEntry_Status, , Cn1, Entry_TableName, Entry_PkFieldName, Entry_PkFieldValue, DateCheck_FieldName, Entry_PkField_Condition, Entry_Comp_Year_Condition, vOrderBy_Fields, vNewEntryDateValue) = False Then
                        UserRight_NEWCheck = False
                        Exit Function
                    End If

                End If

                Cn2.Close()
                Cn2.Dispose()

            End If

        End If


    End Function

    Public Shared Sub Printing_PackingSlip_Format_1266(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByVal prn_HdMxIndx As Integer, ByVal prn_DetMxIndx As Integer, ByRef prn_HdAr(,) As String, ByRef prn_DetAr(,,) As String, ByRef prn_PageNo As Integer, ByRef prn_Count As Integer, ByRef prn_HdIndx As Integer, ByRef prn_DetIndx As Integer)
        Dim I As Integer, NoofDets As Integer, NoofItems_PerPage As Integer
        Dim pFont As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim ps As Printing.PaperSize
        Dim strHeight As Single = 0
        Dim PpSzSTS As Boolean = False
        Dim LM As Single = 0, TM As Single = 0
        Dim PgWt As Single = 0, PrWt As Single = 0
        Dim PgHt As Single = 0, PrHt As Single = 0

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1019" Then '---- SUBHAM Textiles (Somanur)
            For I = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
                If PrintDocument1.PrinterSettings.PaperSizes(I).Kind = Printing.PaperKind.A4 Then
                    ps = PrintDocument1.PrinterSettings.PaperSizes(I)
                    PrintDocument1.DefaultPageSettings.PaperSize = ps
                    e.PageSettings.PaperSize = ps
                    Exit For
                End If
            Next

        Else

            For I = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
                If PrintDocument1.PrinterSettings.PaperSizes(I).Kind = Printing.PaperKind.GermanStandardFanfold Then
                    ps = PrintDocument1.PrinterSettings.PaperSizes(I)
                    PrintDocument1.DefaultPageSettings.PaperSize = ps
                    e.PageSettings.PaperSize = ps
                    PpSzSTS = True
                    Exit For
                End If
            Next

            If PpSzSTS = False Then
                For I = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
                    If PrintDocument1.PrinterSettings.PaperSizes(I).Kind = Printing.PaperKind.A4 Then
                        ps = PrintDocument1.PrinterSettings.PaperSizes(I)
                        PrintDocument1.DefaultPageSettings.PaperSize = ps
                        e.PageSettings.PaperSize = ps
                        Exit For
                    End If
                Next
            End If

        End If

        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 20 ' 40
            .Right = 40
            .Top = 20 ' 30  '60
            .Bottom = 40
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = (.Width / 2) - RMargin - LMargin
            PrintHeight = (.Height / 2) - TMargin - BMargin
            PageWidth = (.Width / 2) - RMargin
            PageHeight = (.Height / 2) - BMargin
        End With

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        pFont = New Font("Calibri", 10, FontStyle.Regular)

        NoofItems_PerPage = 13 ' 17 ' 20 

        Erase ClArr
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = 110 : ClArr(2) = 110 : ClArr(3) = 120

        TxtHgt = 18.75 ' 19 ' e.Graphics.MeasureString("A", pFont).Height  ' 20

        Try

            If prn_HdDt.Rows.Count > 0 Then

                If prn_HdMxIndx > 0 Then

                    Do While prn_HdIndx <= prn_HdMxIndx

                        Erase LnAr
                        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

                        Printing_PackingSlip_Format_1266_PageHeader(PrintDocument1, e, prn_HdDt, prn_HdAr, TxtHgt, pFont, LM, RMargin, TM, BMargin, PgWt, PrWt, prn_PageNo, NoofItems_PerPage, CurY, LnAr, ClArr, prn_HdIndx)
                        CurY = CurY - 10

                        NoofDets = 0
                        Do While prn_DetIndx < Val(prn_HdAr(prn_HdIndx, 3))

                            If NoofDets >= NoofItems_PerPage Then

                                CurY = CurY + TxtHgt
                                Common_Procedures.Print_To_PrintDocument(e, "Continued....", LM + ClArr(1) + ClArr(2) + ClArr(3) - 10, CurY, 1, 0, pFont)
                                NoofDets = NoofDets + 1

                                Printing_PackingSlip_Format_1266_PageFooter(e, prn_HdAr, TxtHgt, pFont, LM, RMargin, TM, BMargin, PgWt, PrWt, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_HdIndx, False)

                                'prn_DetIndx = prn_DetIndx + NoofItems_PerPage

                                e.HasMorePages = True

                                prn_Count = prn_Count + 1

                                Return

                            End If

                            prn_DetIndx = prn_DetIndx + 1

                            If Val(prn_DetAr(prn_HdIndx, prn_DetIndx, 3)) <> 0 Then

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, prn_DetIndx, 1)), LM + 15, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, prn_DetIndx, 2)), LM + ClArr(1) + 15, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr(prn_HdIndx, prn_DetIndx, 3)), "#########0.00"), LM + ClArr(1) + ClArr(2) + ClArr(3) - 15, CurY, 1, 0, pFont)

                                NoofDets = NoofDets + 1

                            End If

                        Loop

                        Printing_PackingSlip_Format_1266_PageFooter(e, prn_HdAr, TxtHgt, pFont, LM, RMargin, TM, BMargin, PgWt, PrWt, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_HdIndx, True)

                        prn_HdIndx = prn_HdIndx + 1
                        prn_Count = prn_Count + 1
                        prn_DetIndx = 0

                        If prn_HdIndx <= prn_HdMxIndx Then

                            If (prn_Count - 1) Mod 4 = 0 Then

                                e.HasMorePages = True
                                Return

                            End If

                        End If

                    Loop

                End If

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

        e.HasMorePages = False

    End Sub

    Public Shared Sub Printing_PackingSlip_Format_1266_PageHeader(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal prn_HdIndx As Integer)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim dt3 As New DataTable
        Dim dt4 As New DataTable
        Dim p1Font As Font
        Dim strHeight As Single
        Dim W1 As Single
        Dim PrntWt As Single = 0
        Dim Cmp_Name As String = ""
        Dim Cmp_Add As String = ""

        PageNo = PageNo + 1

        CurY = TMargin

        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString

        Cmp_Add = ""
        If Trim(prn_HdDt.Rows(0).Item("Company_Address4").ToString) <> "" Then
            Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address4").ToString)
        ElseIf Trim(prn_HdDt.Rows(0).Item("Company_Address3").ToString) <> "" Then
            Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address3").ToString)
        ElseIf Trim(prn_HdDt.Rows(0).Item("Company_Address2").ToString) <> "" Then
            Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address2").ToString)
        ElseIf Trim(prn_HdDt.Rows(0).Item("Company_Address1").ToString) <> "" Then
            Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address1").ToString)
        End If

        PrntWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) - PrintDocument1.DefaultPageSettings.Margins.Right - PrintDocument1.DefaultPageSettings.Margins.Left

        If Trim(Common_Procedures.settings.CustomerCode) <> "1234" Then

            CurY = TMargin
            p1Font = New Font("Calibri", 16, FontStyle.Bold)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrntWt, p1Font)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            CurY = CurY + strHeight - 5
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Add, LMargin, CurY, 2, PrntWt, pFont)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            CurY = CurY + TxtHgt + 5
        End If

        p1Font = New Font("Calibri", 13, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, "PACKING SLIP", LMargin, CurY, 2, PrntWt, p1Font)
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

        Try

            W1 = e.Graphics.MeasureString("QUALITY   :  ", pFont).Width

            CurY = CurY + strHeight + 5
            Common_Procedures.Print_To_PrintDocument(e, "BALE NO", LMargin, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, prn_HdAr(prn_HdIndx, 1), LMargin + W1 + 25, CurY, 0, 0, pFont)

            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, "QUALITY", LMargin, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, prn_HdAr(prn_HdIndx, 2), LMargin + W1 + 25, CurY, 0, 0, pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(1) = CurY

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "LOT NO", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PCS NO", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "METERS", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(2) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Shared Sub Printing_PackingSlip_Format_1266_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal NoofDets As Integer, ByVal prn_HdIndx As Integer, ByVal is_LastPage As Boolean)
        Dim I As Integer

        Try

            For I = NoofDets + 1 To NoofItems_PerPage
                CurY = CurY + TxtHgt
            Next

            CurY = CurY + TxtHgt
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(3) = CurY

            CurY = CurY + TxtHgt - 10

            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdAr(prn_HdIndx, 3))), LMargin + ClAr(1) + 15, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdAr(prn_HdIndx, 4)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) - 15, CurY, 1, 0, pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(4) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(1))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY, LMargin + ClAr(1), LnAr(1))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY, LMargin + ClAr(1) + ClAr(2), LnAr(1))
            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(1))

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub


    Public Shared Sub Printing_PackingSlip_Format4(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByVal prn_HdMxIndx As Integer, ByVal prn_DetMxIndx As Integer, ByRef prn_HdAr(,) As String, ByRef prn_DetAr(,,) As String, ByRef prn_PageNo As Integer, ByRef prn_Count As Integer, ByRef prn_HdIndx As Integer, ByRef prn_DetIndx As Integer)
        Dim I As Integer, NoofDets As Integer, NoofItems_PerPage As Integer
        Dim pFont As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim ps As Printing.PaperSize
        Dim strHeight As Single = 0
        Dim PpSzSTS As Boolean = False
        Dim LM As Single = 0, TM As Single = 0
        Dim PgWt As Single = 0, PrWt As Single = 0
        Dim PgHt As Single = 0, PrHt As Single = 0
        Dim vPgWdth_4 As String = 0



        For I = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(I).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(I)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                e.PageSettings.PaperSize = ps
                Exit For
            End If
        Next

        PrintDocument1.DefaultPageSettings.Landscape = True

        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 20 ' 40
            .Right = 60
            .Top = 60
            .Bottom = 20
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        'With PrintDocument1.DefaultPageSettings.PaperSize
        '    PrintWidth = (.Width / 2) - RMargin - LMargin
        '    PrintHeight = (.Height / 2) - TMargin - BMargin
        '    PageWidth = (.Width / 2) - RMargin
        '    PageHeight = (.Height / 2) - BMargin
        'End With
        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = (.Width / 4) - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = (.Width / 4) - RMargin
            PageHeight = .Height - BMargin
        End With
        If PrintDocument1.DefaultPageSettings.Landscape = True Then
            With PrintDocument1.DefaultPageSettings.PaperSize
                PrintWidth = (.Height / 4) - TMargin - BMargin
                PrintHeight = .Width - RMargin - LMargin
                PageWidth = (.Height / 4) - TMargin
                PageHeight = .Width - RMargin
            End With
        End If

        vPgWdth_4 = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 4)

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        pFont = New Font("Calibri", 10, FontStyle.Regular)

        NoofItems_PerPage = 20 ' 13 ' 17 ' 20 

        Erase ClArr
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = 70 : ClArr(2) = 85 : ClArr(3) = 70
        'ClArr(1) = 100 : ClArr(2) = 120 : ClArr(3) = 100

        TxtHgt = 18.5 ' 18.75 ' 19 ' e.Graphics.MeasureString("A", pFont).Height  ' 20

        Try

            If prn_HdDt.Rows.Count > 0 Then

                If prn_HdMxIndx > 0 Then

                    Do While prn_HdIndx <= prn_HdMxIndx


                        If prn_Count Mod 4 = 1 Then
                            LM = LMargin
                            TM = TMargin
                            PgWt = PageWidth
                            PgHt = PageHeight
                            PrWt = PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 4 = 2 Then
                            LM = Val(vPgWdth_4) + LMargin
                            TM = TMargin
                            PgWt = Val(vPgWdth_4) + PageWidth
                            PgHt = PageHeight
                            PrWt = PrintWidth
                            'PrWt = Val(vPgWdth_4) + PrintWidth
                            PrHt = PrintHeight

                            e.Graphics.DrawLine(Pens.Black, LM - LMargin, 1, LM - LMargin, PrHt)

                        ElseIf prn_Count Mod 4 = 3 Then
                            LM = Val(vPgWdth_4) + Val(vPgWdth_4) + LMargin
                            TM = TMargin
                            PgWt = Val(vPgWdth_4) + Val(vPgWdth_4) + PageWidth
                            PgHt = PageHeight
                            PrWt = PrintWidth
                            'PrWt = Val(vPgWdth_4) + Val(vPgWdth_4) + PrintWidth
                            PrHt = PrintHeight

                            e.Graphics.DrawLine(Pens.Black, LM - LMargin, 1, LM - LMargin, PrHt)

                            'LM = LMargin
                            'TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 2) + TMargin
                            'PgWt = PageWidth
                            'PgHt = PageHeight
                            'PrWt = PrintWidth
                            'PrHt = PrintHeight

                        ElseIf prn_Count Mod 4 = 0 Then

                            LM = Val(vPgWdth_4) + Val(vPgWdth_4) + Val(vPgWdth_4) + LMargin
                            TM = TMargin
                            PgWt = Val(vPgWdth_4) + Val(vPgWdth_4) + Val(vPgWdth_4) + PageWidth
                            PgHt = PageHeight
                            PrWt = PrintWidth
                            'PrWt = Val(vPgWdth_4) + Val(vPgWdth_4) + Val(vPgWdth_4) + PrintWidth
                            PrHt = PrintHeight

                            e.Graphics.DrawLine(Pens.Black, LM - LMargin, 1, LM - LMargin, PrHt)

                            'LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + LMargin
                            'TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 2) + TMargin
                            'PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PageWidth
                            'PgHt = PageHeight
                            'PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PrintWidth
                            'PrHt = PrintHeight

                        End If

                        Erase LnAr
                        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

                        Printing_PackingSlip_Format4_PageHeader(PrintDocument1, e, prn_HdDt, prn_HdAr, TxtHgt, pFont, LM, RMargin, TM, BMargin, PgWt, PrWt, prn_PageNo, NoofItems_PerPage, CurY, LnAr, ClArr, prn_HdIndx)
                        CurY = CurY - 10

                        NoofDets = 0
                        Do While prn_DetIndx < Val(prn_HdAr(prn_HdIndx, 3))

                            If NoofDets >= NoofItems_PerPage Then

                                CurY = CurY + TxtHgt
                                Common_Procedures.Print_To_PrintDocument(e, "Continued....", LM + ClArr(1) + ClArr(2) + ClArr(3) - 10, CurY, 1, 0, pFont)
                                NoofDets = NoofDets + 1

                                Printing_PackingSlip_Format4_PageFooter(e, prn_HdAr, TxtHgt, pFont, LM, RMargin, TM, BMargin, PgWt, PrWt, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_HdIndx, False)

                                e.HasMorePages = True

                                prn_Count = prn_Count + 1

                                Return

                            End If

                            prn_DetIndx = prn_DetIndx + 1

                            If Val(prn_DetAr(prn_HdIndx, prn_DetIndx, 3)) <> 0 Then

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, prn_DetIndx, 2)), LM + 15, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr(prn_HdIndx, prn_DetIndx, 3)), "#########0.00"), LM + ClArr(1) + ClArr(2) - 15, CurY, 1, 0, pFont)
                                If Val(prn_DetAr(prn_HdIndx, prn_DetIndx, 5)) <> 0 Then
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr(prn_HdIndx, prn_DetIndx, 5)), "#########0.000"), LM + ClArr(1) + ClArr(2) + ClArr(3) - 15, CurY, 1, 0, pFont)
                                End If

                                NoofDets = NoofDets + 1

                            End If

                        Loop

                        Printing_PackingSlip_Format4_PageFooter(e, prn_HdAr, TxtHgt, pFont, LM, RMargin, TM, BMargin, PgWt, PrWt, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_HdIndx, True)

                        prn_HdIndx = prn_HdIndx + 1
                        prn_Count = prn_Count + 1
                        prn_DetIndx = 0

                        If prn_HdIndx <= prn_HdMxIndx Then

                            If (prn_Count - 1) Mod 4 = 0 Then

                                e.HasMorePages = True
                                Return

                            End If

                        End If

                    Loop

                End If

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

        e.HasMorePages = False

    End Sub

    Public Shared Sub Printing_PackingSlip_Format4_PageHeader(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal prn_HdIndx As Integer)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim dt3 As New DataTable
        Dim dt4 As New DataTable
        Dim p1Font As Font
        Dim strHeight As Single
        Dim W1 As Single
        Dim PrntWt As Single = 0
        Dim Cmp_Name As String = ""
        Dim Cmp_Add As String = ""
        Dim Cmp_PhNo As String = ""
        Dim I As Integer = 0
        Dim ItmNm1 As String = ""
        Dim ItmNm2 As String = ""


        PageNo = PageNo + 1

        CurY = TMargin

        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString

        Cmp_Add = ""
        If Trim(prn_HdDt.Rows(0).Item("Company_Address4").ToString) <> "" Then
            Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address4").ToString)
        ElseIf Trim(prn_HdDt.Rows(0).Item("Company_Address3").ToString) <> "" Then
            Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address3").ToString)
        ElseIf Trim(prn_HdDt.Rows(0).Item("Company_Address2").ToString) <> "" Then
            Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address2").ToString)
        ElseIf Trim(prn_HdDt.Rows(0).Item("Company_Address1").ToString) <> "" Then
            Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address1").ToString)
        End If

        Cmp_PhNo = ""
        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString)
        End If


        PrntWt = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 4) - PrintDocument1.DefaultPageSettings.Margins.Bottom - PrintDocument1.DefaultPageSettings.Margins.Top

        If Trim(Common_Procedures.settings.CustomerCode) <> "1234" Then

            CurY = TMargin
            p1Font = New Font("Calibri", 16, FontStyle.Bold)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrntWt, p1Font, , True)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            CurY = CurY + strHeight - 5
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Add, LMargin, CurY, 2, PrntWt, pFont)

            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrntWt, pFont)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height


            CurY = CurY + TxtHgt + 5
        End If

        p1Font = New Font("Calibri", 13, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, "PACKING SLIP", LMargin, CurY, 2, PrntWt, p1Font)
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

        Try

            W1 = e.Graphics.MeasureString("QUALITY :", pFont).Width


            CurY = CurY + strHeight + 5
            Common_Procedures.Print_To_PrintDocument(e, "BALE NO", LMargin, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, prn_HdAr(prn_HdIndx, 1), LMargin + W1 + 20, CurY, 0, 0, pFont)



            ItmNm1 = Trim(prn_HdAr(prn_HdIndx, 2))
            ItmNm2 = ""

            If Len(ItmNm1) > 22 Then
                For I = 22 To 1 Step -1
                    If Mid$(Trim(ItmNm1), I, 1) = "*" Or Trim(UCase(Mid$(Trim(ItmNm1), I, 1))) = "X" Or Mid$(Trim(ItmNm1), I, 1) = "," Or Mid$(Trim(ItmNm1), I, 1) = "." Or Mid$(Trim(ItmNm1), I, 1) = "-" Or Mid$(Trim(ItmNm1), I, 1) = "/" Or Mid$(Trim(ItmNm1), I, 1) = "_" Or Mid$(Trim(ItmNm1), I, 1) = "(" Or Mid$(Trim(ItmNm1), I, 1) = ")" Or Mid$(Trim(ItmNm1), I, 1) = "\" Or Mid$(Trim(ItmNm1), I, 1) = "[" Or Mid$(Trim(ItmNm1), I, 1) = "]" Or Mid$(Trim(ItmNm1), I, 1) = "{" Or Mid$(Trim(ItmNm1), I, 1) = "}" Or Mid$(Trim(ItmNm1), I, 1) = """" Then Exit For
                Next I
                If I = 0 Then I = 22
                ItmNm2 = Microsoft.VisualBasic.Right(Trim(ItmNm1), Len(ItmNm1) - I)
                ItmNm1 = Microsoft.VisualBasic.Left(Trim(ItmNm1), I)
            End If

            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, "QUALITY", LMargin, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Trim(ItmNm1), LMargin + W1 + 20, CurY, 0, 0, pFont)

            If Trim(ItmNm2) <> "" Then
                CurY = CurY + TxtHgt - 3
                Common_Procedures.Print_To_PrintDocument(e, Trim(ItmNm2), LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 1, ClAr(1) + ClAr(2) + ClAr(3), pFont, , True)
            End If

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY)
            LnAr(1) = CurY

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "PCS NO", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "METERS", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "GRAMS", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY)
            LnAr(2) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Shared Sub Printing_PackingSlip_Format4_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal NoofDets As Integer, ByVal prn_HdIndx As Integer, ByVal is_LastPage As Boolean)
        Dim I As Integer

        Try

            For I = NoofDets + 1 To NoofItems_PerPage
                CurY = CurY + TxtHgt
            Next

            CurY = CurY + TxtHgt
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY)
            LnAr(3) = CurY

            CurY = CurY + TxtHgt - 10

            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdAr(prn_HdIndx, 3))), LMargin + 15, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdAr(prn_HdIndx, 4)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) - 15, CurY, 1, 0, pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY)
            LnAr(4) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(1))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY, LMargin + ClAr(1), LnAr(1))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY, LMargin + ClAr(1) + ClAr(2), LnAr(1))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3), LnAr(1))
            'e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(1))

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Shared Function get_UserModificationDetails_DataBaseName(ByVal CompIdNo As Integer) As String
        Dim DbNm As String = ""
        Dim S As String = ""

        DbNm = ""

        If Trim(Common_Procedures.ConnectionString_CompanyGroupdetails) <> "" Then

            S = Replace(Trim(LCase(CompanyDetailsDataBaseName)), Trim(LCase("_companygroup_details")), "_userlog")

            DbNm = Trim(S) & "_" & Trim(Val(CompIdNo))

        End If

        get_UserModificationDetails_DataBaseName = Trim(DbNm)

    End Function

    Public Shared Sub VehicleNo_Updation(ByVal Cn1 As SqlClient.SqlConnection)
        Dim cmd As New SqlClient.SqlCommand
        Dim Nr As Long = 0

        On Error Resume Next

        cmd.Connection = Cn1


        cmd.CommandText = "delete from Vehicle_Temp"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into Vehicle_Temp(Name1, Name2) Values ( '' , '' )"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into Vehicle_Temp(Name1, Name2) Select 'WPVDC-' + a.Weaver_Pavu_Delivery_Code , a.Vehicle_No  from Weaver_Pavu_Delivery_Head a Where a.Vehicle_No <> ''"
        Nr = cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into Vehicle_Temp(Name1, Name2) Select 'YNDLV-' + a.Weaver_Yarn_Delivery_Code , a.Vechile_No  from Weaver_Yarn_Delivery_Head a  Where a.Vechile_No <> ''"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into Vehicle_Temp(Name1, Name2) Select 'PVREC-' + a.Weaver_Pavu_Receipt_Code , a.Vechile_No  from Weaver_Pavu_Receipt_Head a Where a.Vechile_No <> ''"
        Nr = cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into Vehicle_Temp(Name1, Name2) Select 'SYNDC-' + a.Sizing_Yarn_Delivery_Code , a.Vechile_No  from Sizing_Yarn_Delivery_Head a Where a.Vechile_No <> ''"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into Vehicle_Temp(Name1, Name2) Select 'SYNRC-' + a.Sizing_Yarn_Receipt_Code , a.Vechile_No  from Sizing_Yarn_Receipt_Head a Where a.Vechile_No <> ''"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into Vehicle_Temp(Name1, Name2) Select 'WYNRC-' + a.Weaver_Yarn_Receipt_Code , a.Vechile_No  from Weaver_Yarn_Receipt_Head a Where a.Vechile_No <> ''"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into Vehicle_Temp(Name1, Name2) Select 'EBDLV-' + a.Empty_BeamBagCone_Delivery_Code , a.Vehicle_No  from Empty_BeamBagCone_Delivery_Head a Where a.Vehicle_No <> ''"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into Vehicle_Temp(Name1, Name2) Select 'EBREC-' + a.Empty_BeamBagCone_Receipt_Code , a.Vehicle_No  from Empty_BeamBagCone_Receipt_Head a Where a.Vehicle_No <> ''"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Vehicle_Temp(Name1, Name2) Select 'YNDLV-' + a.Yarn_Delivery_Code , a.Vehicle_No  from SizSoft_Yarn_Delivery_Head a Where a.Vehicle_No <> ''"
        cmd.ExecuteNonQuery()
    End Sub

    Public Shared Function Vehicle_Number_Remove_Unwanted_Spaces(ByVal vVECH_No As String) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vRESULT As String = ""
        Dim S As String = ""
        Dim vPrevDigit_IsNumber_STS As Boolean = False
        Dim vPrevDigit_Space_STS As Boolean = False


        If Trim(vVECH_No) <> "" Then

            Do
                vVECH_No = Replace(Trim(vVECH_No), "  ", " ")
            Loop While InStr(1, Trim(vVECH_No), "  ") > 0

            vRESULT = ""
            vPrevDigit_IsNumber_STS = False
            vPrevDigit_Space_STS = False

            For i = 1 To Len(vVECH_No)

                S = Mid(vVECH_No, i, 1)

                If Trim(S) <> "" Then

                    If Val(S) = 0 And Trim(S) <> "0" Then

                        If vPrevDigit_IsNumber_STS = True Or vPrevDigit_Space_STS = True Then
                            vRESULT = vRESULT & " " & S

                        Else
                            vRESULT = vRESULT & S

                        End If

                        vPrevDigit_IsNumber_STS = False

                    Else

                        If vPrevDigit_IsNumber_STS = True And vPrevDigit_Space_STS = False Then
                            vRESULT = vRESULT & S

                        Else
                            vRESULT = vRESULT & " " & S

                        End If

                        vPrevDigit_IsNumber_STS = True

                    End If

                    vPrevDigit_Space_STS = False

                Else

                    vPrevDigit_Space_STS = True

                End If

            Next

        End If

        Vehicle_Number_Remove_Unwanted_Spaces = Trim(vRESULT)

    End Function

    Public Shared Function Style_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vStyle_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vStyle_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Style_IdNo from Style_Head where Style_Name = '" & Trim(vStyle_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vStyle_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vStyle_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Style_NameToIdNo = Val(vStyle_ID)

    End Function

    Public Shared Function Style_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vStyle_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vStyle_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Style_Name from Style_Head where Style_IdNo = " & Str(Val(vStyle_ID)), Cn1)
        Da.Fill(Dt)

        vStyle_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vStyle_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Style_IdNoToName = Trim(vStyle_Nm)

    End Function
    Public Shared Function Vehicle_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vVehicle_Name As String) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vVech_IdNo As Integer

        Da = New SqlClient.SqlDataAdapter("select vehicle_Idno from vehicle_head where vehicle_no = '" & Trim(vVehicle_Name) & "'", Cn1)
        Da.Fill(Dt)

        vVech_IdNo = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vVech_IdNo = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Vehicle_NameToIdNo = Val(vVech_IdNo)

    End Function

    Public Shared Function Vehicle_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vVech_IdNo As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vVechicle_Name As String

        Da = New SqlClient.SqlDataAdapter("select vehicle_no from vehicle_head where vehicle_Idno = " & Str(Val(vVech_IdNo)), Cn1)
        Da.Fill(Dt)

        vVechicle_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vVechicle_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Vehicle_IdNoToName = Trim(vVechicle_Name)

    End Function

    Public Shared Function Cetegory_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCetegory_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vCetegory_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Cetegory_IdNo from Cetegory_Head where Cetegory_Name = '" & Trim(vCetegory_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vCetegory_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vCetegory_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Cetegory_NameToIdNo = Val(vCetegory_ID)

    End Function

    Public Shared Function Cetegory_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCetegory_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vCetegory_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Cetegory_Name from Cetegory_Head where Cetegory_IdNo = " & Str(Val(vCetegory_ID)), Cn1)
        Da.Fill(Dt)

        vCetegory_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vCetegory_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Cetegory_IdNoToName = Trim(vCetegory_Nm)

    End Function

    Public Shared Function Item_NameToIdNo1(ByVal Cn1 As SqlClient.SqlConnection, ByVal vItem_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vItem_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Item_IdNo from Item_Head where Item_Name = '" & Trim(vItem_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vItem_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vItem_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Item_NameToIdNo1 = Val(vItem_ID)

    End Function


    Public Shared Function Item_IdNoToName1(ByVal Cn1 As SqlClient.SqlConnection, ByVal vItem_ID As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vItem_Name As String

        Da = New SqlClient.SqlDataAdapter("select Item_Name from Item_Head where Item_IdNo = " & Str(Val(vItem_ID)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        vItem_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vItem_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Item_IdNoToName1 = Trim(vItem_Name)

    End Function

    Public Shared Function get_Server_Date(ByVal Cn1 As SqlClient.SqlConnection) As Date
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vSrvrDate As Date

        Da = New SqlClient.SqlDataAdapter("select getdate()", Cn1)
        Dt = New DataTable
        Da.Fill(Dt)

        vSrvrDate = #1/1/2000#
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vSrvrDate = Dt.Rows(0)(0)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        get_Server_Date = vSrvrDate

    End Function
    Public Shared Function Despatch_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vDesp_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vDesp_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Party_IdNo from Sales_DeliveryAddress_Head where Party_Name = '" & Trim(vDesp_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vDesp_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vDesp_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Despatch_NameToIdNo = Val(vDesp_ID)

    End Function

    Public Shared Function Despatch_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vDesp_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vDesp_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Party_Name from Sales_DeliveryAddress_Head where Party_IdNo = " & Str(Val(vDesp_ID)), Cn1)
        Da.Fill(Dt)

        vDesp_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vDesp_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Despatch_IdNoToName = Trim(vDesp_Nm)

    End Function
    Public Shared Function Basket_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vBasket_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vBasket_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Basket_Name from Basket_Head where Basket_IdNo = " & Str(Val(vBasket_ID)), Cn1)
        Da.Fill(Dt)

        vBasket_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vBasket_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Basket_IdNoToName = Trim(vBasket_Nm)

    End Function

    Public Shared Function Basket_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vBasket_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vBasket_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Basket_IdNo from Basket_Head where Basket_Name = '" & Trim(vBasket_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vBasket_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vBasket_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Basket_NameToIdNo = Val(vBasket_ID)

    End Function

    'Public Shared Function get_CotConv_MaxCode(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCompany_ID As Integer, ByVal vFinYr As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
    '    Dim MxId1 As String = ""
    '    Dim MxId2 As String = ""
    '    Dim MxId3 As String = ""
    '    Dim MxCode As String = ""

    '    Try

    '        MxId1 = Common_Procedures.get_MaxCode(Cn1, "Cotton_Invoice_Head", "Cotton_Invoice_Code", "For_OrderBy", "(Cotton_Invoice_Code LIKE 'GCNIN-%')", vCompany_ID, vFinYr, sqltr)
    '        'lbl_InvNo.Text = Common_Procedures.get_MaxCode(Con, "ClothSales_Invoice_Head", "ClothSales_Invoice_Code", "For_OrderBy", "(ClothSales_Invoice_Code LIKE '" & Trim(Pk_Condition) & "%')", Val(lbl_Company.Tag), Common_Procedures.FnYearCode)

    '        MxId2 = Common_Procedures.get_MaxCode(Cn1, "Jobwork_Conversion_Bill_Head", "Jobwork_Conversion_Bill_Code", "For_OrderBy", "(Entry_VAT_GST_Type = 'GST')", vCompany_ID, vFinYr, sqltr)
    '        'lbl_InvoiceNo.Text = Common_Procedures.get_MaxCode(con, "Yarn_Sales_Head", "Yarn_Sales_Code", "For_OrderBy", "(Entry_VAT_GST_Type = 'GST')", Val(lbl_Company.Tag), Common_Procedures.FnYearCode, tr)

    '        MxId3 = Common_Procedures.get_MaxCode(Cn1, "Cotton_Waste_Sales_Head", "Cotton_Waste_Sales_Code", "For_OrderBy", "(Cotton_Waste_Sales_Code LIKE 'GSCWS-%')", vCompany_ID, vFinYr, sqltr)

    '        ' MxCode = IIf(Val(MxId1) > Val(MxId2), MxId1, MxId2)

    '        If Val((MxId1) > Val(MxId2)) And Val((MxId1) > Val(MxId3)) Then
    '            MxCode = MxId1
    '        ElseIf Val((MxId2) > Val(MxId3)) And Val((MxId2) > Val(MxId1)) Then
    '            MxCode = MxId2
    '        Else
    '            MxCode = MxId3
    '        End If


    '        Return Trim(MxCode)

    '    Catch ex As Exception
    '        Return ""

    '    End Try

    'End Function

    Public Shared Function Transport_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vTransport_Nm As String) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vTransport_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Transport_IdNo from Transport_Head where Transport_Name = '" & Trim(vTransport_Nm) & "'", Cn1)
        Da.Fill(Dt)

        vTransport_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vTransport_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Transport_NameToIdNo = Val(vTransport_ID)

    End Function

    Public Shared Function Transport_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vTransport_ID As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vTransport_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Transport_Name from Transport_Head where Transport_IdNo = " & Str(Val(vTransport_ID)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vTransport_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vTransport_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Transport_IdNoToName = Trim(vTransport_Nm)

    End Function

    Public Shared Function Waste_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vWaste_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vWaste_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Packing_Idno from Waste_Head where Packing_Name = '" & Trim(vWaste_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vWaste_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vWaste_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Waste_NameToIdNo = Val(vWaste_ID)

    End Function

    Public Shared Function Waste_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vWaste_ID As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vWaste_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Packing_Name from Waste_Head where Packing_IdNo = " & Str(Val(vWaste_ID)), Cn1)
        Dt = New DataTable
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vWaste_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vWaste_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Waste_IdNoToName = Trim(vWaste_Nm)

    End Function

    Public Shared Function Hardware_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vHard_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vHard_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Hardware_IdNo from Hardware_Head where Hardware_Name = '" & Trim(vHard_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vHard_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vHard_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Hardware_NameToIdNo = Val(vHard_ID)

    End Function

    Public Shared Function Hardware_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vHard_ID As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vHard_Name As String

        Da = New SqlClient.SqlDataAdapter("select Hardware_Name from Hardware_Head where Hardware_IdNo = " & Str(Val(vHard_ID)), Cn1)
        Dt = New DataTable
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vHard_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vHard_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Hardware_IdNoToName = Trim(vHard_Name)

    End Function



    Public Shared Function BagType_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vBagType_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vBagType_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Bag_Type_IdNo from Bag_Type_Head where Bag_Type_Name = '" & Trim(vBagType_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vBagType_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vBagType_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        BagType_NameToIdNo = Val(vBagType_ID)

    End Function

    Public Shared Function Bag_Type_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vBagType_ID As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vBagType_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Bag_Type_Name from Bag_Type_Head where Bag_Type_IdNo = " & Str(Val(vBagType_ID)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vBagType_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vBagType_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Bag_Type_IdNoToName = Trim(vBagType_Nm)

    End Function

    Public Shared Function BeamNo_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vBeam_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vBeam_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select BeamNo_IdNo from BeamNo_Head where BeamNo_Name = '" & Trim(vBeam_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vBeam_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vBeam_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        BeamNo_NameToIdNo = Val(vBeam_ID)

    End Function

    Public Shared Function BeamNo_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vBeam_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vBeam_Nm As String

        Da = New SqlClient.SqlDataAdapter("select BeamNo_Name from BeamNo_Head where BeamNo_IdNo = " & Str(Val(vBeam_ID)), Cn1)
        Da.Fill(Dt)

        vBeam_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vBeam_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        BeamNo_IdNoToName = Trim(vBeam_Nm)

    End Function

    Public Shared Function Delivery_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vDel_IdNo As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vDel_Name As String

        Da = New SqlClient.SqlDataAdapter("select Ledger_Name from Delivery_Party_Head where Ledger_IdNo = " & Str(Val(vDel_IdNo)), Cn1)
        Dt = New DataTable
        Da.Fill(Dt)

        vDel_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vDel_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Delivery_IdNoToName = Trim(vDel_Name)

    End Function

    Public Shared Function Delivery_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vDel_Name As String) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vDel_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Ledger_IdNo from Delivery_Party_Head where Ledger_Name = '" & Trim(vDel_Name) & "'", Cn1)
        Da.Fill(Dt)

        vDel_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vDel_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Delivery_NameToIdNo = Val(vDel_ID)

    End Function

    Public Shared Function Delivery_AlaisNameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vDel_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vDel_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Ledger_IdNo from Delivery_Party_AlaisHead where Ledger_DisplayName = '" & Trim(vDel_Name) & "' Order by Ledger_IdNo", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vDel_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vDel_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Delivery_AlaisNameToIdNo = Val(vDel_ID)

    End Function

    Public Shared Function SizingMachineNO_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vSizing_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vSizing_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Sizing_Machine_No_IdNo from Sizing_Machine_No_Head where Sizing_Machine_No_Name = '" & Trim(vSizing_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vSizing_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vSizing_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        SizingMachineNO_NameToIdNo = Val(vSizing_ID)

    End Function

    Public Shared Function SizingMachineNo_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vSizing_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vSizing_Name As String

        Da = New SqlClient.SqlDataAdapter("select Sizing_Machine_No_Name from Sizing_Machine_No_Head where Sizing_Machine_No_IdNo = " & Str(Val(vSizing_ID)), Cn1)
        Da.Fill(Dt)

        vSizing_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vSizing_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        SizingMachineNo_IdNoToName = Trim(vSizing_Name)

    End Function
    Public Shared Function WarpingMachineNO_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vWarping_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vWarping_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Warping_Machine_No_IdNo from Warping_Machine_No_Head where Warping_Machine_No_Name = '" & Trim(vWarping_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vWarping_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vWarping_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        WarpingMachineNO_NameToIdNo = Val(vWarping_ID)

    End Function

    Public Shared Function WarpingMachineNo_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vWarping_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vWarping_Name As String

        Da = New SqlClient.SqlDataAdapter("select Warping_Machine_No_Name from Warping_Machine_No_Head where Warping_Machine_No_IdNo = " & Str(Val(vWarping_ID)), Cn1)
        Da.Fill(Dt)

        vWarping_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vWarping_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        WarpingMachineNo_IdNoToName = Trim(vWarping_Name)

    End Function


    Public Shared Function get_Company_TextileDataBaseName(ByVal CompIdNo As Integer) As String
        Dim DbNm As String = ""
        Dim S As String = ""

        DbNm = ""

        If Trim(Common_Procedures.ConnectionString_CompanyGroupdetails) <> "" Then

            S = Replace(Trim(LCase(CompanyDetailsDataBaseName)), "_companygroup_details", "")

            DbNm = Trim(S) & "_" & Trim(Val(CompIdNo))

        End If

        get_Company_TextileDataBaseName = Trim(DbNm)

    End Function



    Public Shared Function get_CotConv_MaxCode(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCompany_ID As Integer, ByVal vFinYr As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim MxId1 As String = ""
        Dim MxId2 As String = ""
        Dim MxId3 As String = ""
        Dim MxCode As String = ""

        Try

            MxId1 = Common_Procedures.get_MaxCode(Cn1, "Cotton_Invoice_Head", "Cotton_Invoice_Code", "For_OrderBy", "(Cotton_Invoice_Code LIKE 'GCNIN-%')", vCompany_ID, vFinYr, sqltr)
            'lbl_InvNo.Text = Common_Procedures.get_MaxCode(Con, "ClothSales_Invoice_Head", "ClothSales_Invoice_Code", "For_OrderBy", "(ClothSales_Invoice_Code LIKE '" & Trim(Pk_Condition) & "%')", Val(lbl_Company.Tag), Common_Procedures.FnYearCode)

            MxId2 = Common_Procedures.get_MaxCode(Cn1, "Jobwork_Conversion_Bill_Head", "Jobwork_Conversion_Bill_Code", "For_OrderBy", "(Entry_VAT_GST_Type = 'GST')", vCompany_ID, vFinYr, sqltr)
            'lbl_InvoiceNo.Text = Common_Procedures.get_MaxCode(con, "Yarn_Sales_Head", "Yarn_Sales_Code", "For_OrderBy", "(Entry_VAT_GST_Type = 'GST')", Val(lbl_Company.Tag), Common_Procedures.FnYearCode, tr)

            MxId3 = Common_Procedures.get_MaxCode(Cn1, "Cotton_Waste_Sales_Head", "Cotton_Waste_Sales_Code", "For_OrderBy", "(Cotton_Waste_Sales_Code LIKE 'GSCWS-%')", vCompany_ID, vFinYr, sqltr)

            ' MxCode = IIf(Val(MxId1) > Val(MxId2), MxId1, MxId2)

            If Val((MxId1) > Val(MxId2)) And Val((MxId1) > Val(MxId3)) Then
                MxCode = MxId1
            ElseIf Val((MxId2) > Val(MxId3)) And Val((MxId2) > Val(MxId1)) Then
                MxCode = MxId2
            Else
                MxCode = MxId3
            End If


            Return Trim(MxCode)

        Catch ex As Exception
            Return ""

        End Try

    End Function

    Public Shared Sub Print_To_PrintDocument_GK(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal PrintText As String, ByVal Xaxis As Decimal, ByVal Yaxis As Decimal, ByVal AlignMent As Integer, ByVal DataWidth As Decimal, ByVal DataFont As Font, Optional ByVal BrushColor As Brush = Nothing)
        Dim X As Decimal, Y As Decimal
        Dim strWidth As Decimal, strHeight As Decimal = 0
        Dim vbrushcolor As Brush

        strWidth = e.Graphics.MeasureString(PrintText, DataFont).Width

        If AlignMent = 1 Then
            X = Xaxis - strWidth

        ElseIf AlignMent = 2 Then
            If DataWidth > strWidth Then
                X = Xaxis + (DataWidth - strWidth) / 2
            Else
                X = Xaxis
            End If

        Else
            X = Xaxis

        End If
        Y = Yaxis


        If IsNothing(BrushColor) = False Then
            vbrushcolor = BrushColor
        Else
            vbrushcolor = Brushes.White
        End If

        e.Graphics.DrawString(PrintText, DataFont, vbrushcolor, X, Y)

    End Sub


    Public Shared Function get_Yarn_CurrentStock(ByVal Cn1 As SqlClient.SqlConnection,
                                                 ByVal vComp_IdNo As Integer,
                                                 ByVal vLed_IdNo As Integer,
                                                 ByVal vCnt_IdNo As Integer,
                                                 Optional ByVal vMill_IdNo As Integer = 0,
                                                 Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing
                                                                                                    ) As Decimal

        Dim Cmd As New SqlClient.SqlCommand
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim CurStk As Decimal = 0
        Dim YrnStk_Condt As String = ""
        Dim RptCondt As String = ""
        Dim CompCondt As String = ""


        If Val(vMill_IdNo) <> 0 Then
            YrnStk_Condt = "(a.Posting_For <> 'CONSUMEDYARN')"
        ElseIf Val(Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn) = 2 Or Val(vMill_IdNo) = 0 Then
            YrnStk_Condt = "(a.Posting_For <> 'YARNTAKEN')"
        Else
            YrnStk_Condt = "(a.Posting_For <> 'CONSUMEDYARN')"
        End If


        Cmd.Connection = Cn1

        If IsNothing(sqltr) = False Then
            Cmd.Transaction = sqltr
        End If

        Cmd.CommandText = "truncate table " & Trim(Common_Procedures.ReportTempSubTable) & ""
        Cmd.ExecuteNonQuery()

        RptCondt = ""
        If vMill_IdNo <> 0 Then
            RptCondt = Trim(RptCondt) & IIf(Trim(RptCondt) <> "", " and ", "") & " a.Mill_IdNo = " & Str(Val(vMill_IdNo))
        End If

        Cmd.CommandText = "Insert into " & Trim(Common_Procedures.ReportTempSubTable) & "(Int1,          name1,          Int2,       name2,          weight1) " &
            " Select                    a.ReceivedFrom_Idno, tP.Ledger_Name, a.count_idno, tC.count_name, sum(a.Weight)  " &
            " from Stock_Yarn_Processing_Details a  " &
            " INNER JOIN Company_Head tZ ON a.Company_IdNo <> 0 and a.Company_IdNo = tZ.Company_IdNo  " &
            " INNER JOIN Ledger_Head tP ON a.ReceivedFrom_Idno <> 0 and a.ReceivedFrom_Idno = tP.Ledger_IdNo  " &
            " INNER JOIN Count_Head tC ON a.Count_IdNo = tC.Count_IdNo  " &
            " Where " & YrnStk_Condt & IIf(Trim(YrnStk_Condt) <> "", " and ", "") &
            " a.company_idno = " & Str(Val(vComp_IdNo)) &
            " and a.ReceivedFrom_Idno = " & Str(Val(vLed_IdNo)) &
            " and a.Count_IdNo = " & Str(Val(vCnt_IdNo)) & " and a.Weight <> 0  " &
            " " & IIf(RptCondt = "", "", " and  " & RptCondt) & "  " &
            " group by a.ReceivedFrom_Idno, tP.Ledger_Name, a.count_idno, tC.count_name having sum(a.Weight) <> 0"

        Cmd.ExecuteNonQuery()

        Cmd.CommandText = "Insert into " & Trim(Common_Procedures.ReportTempSubTable) & "(Int1,      name1,      Int2,           name2,          weight1)  " &
            " Select                a.DeliveryTo_Idno, tP.Ledger_Name, a.count_idno, tC.count_name, -1*sum(a.Weight)  " &
            " from Stock_Yarn_Processing_Details a  " &
            " INNER JOIN Company_Head tZ ON a.Company_IdNo <> 0 and a.Company_IdNo = tZ.Company_IdNo  " &
            " INNER JOIN Ledger_Head tP ON a.DeliveryTo_Idno <> 0 and a.DeliveryTo_Idno = tP.Ledger_IdNo  " &
            " INNER JOIN Count_Head tC ON a.Count_IdNo = tC.Count_IdNo  " &
            " Where " & YrnStk_Condt & IIf(Trim(YrnStk_Condt) <> "", " and ", "") &
            " a.company_idno = " & Str(Val(vComp_IdNo)) &
            " and a.DeliveryTo_Idno = " & Str(Val(vLed_IdNo)) &
            " and a.Count_IdNo = " & Str(Val(vCnt_IdNo)) & "  and a.Weight <> 0  " &
            " " & IIf(RptCondt = "", "", " and  " & RptCondt) & "  " &
            " group by a.DeliveryTo_Idno, tP.Ledger_Name, a.count_idno, tC.count_name having sum(a.Weight) <> 0"

        Cmd.ExecuteNonQuery()

        Da = New SqlClient.SqlDataAdapter("Select sum(a.weight1) from " & Trim(Common_Procedures.ReportTempSubTable) & " a having sum(a.Weight1) <> 0", Cn1)
        Da.SelectCommand.Transaction = sqltr
        Dt = New DataTable
        Da.Fill(Dt)

        CurStk = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                CurStk = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        get_Yarn_CurrentStock = Val(CurStk)

    End Function
    Public Shared Function Zone_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vZone_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vEmpe_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Zone_IdNo from Zone_Head where Zone_Name = '" & Trim(vZone_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vEmpe_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vEmpe_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Zone_NameToIdNo = Val(vEmpe_ID)

    End Function

    Public Shared Function Zone_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vZone_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vZone_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Zone_Name from Zone_Head where Zone_IdNo = " & Str(Val(vZone_ID)), Cn1)
        Da.Fill(Dt)

        vZone_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vZone_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Zone_IdNoToName = Trim(vZone_Nm)

    End Function

    Public Shared Function Sizing_Item_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vItem_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vItem_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Item_IdNo from Sizing_Item_Head where Item_Name = '" & Trim(vItem_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vItem_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vItem_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Sizing_Item_NameToIdNo = Val(vItem_ID)

    End Function

    Public Shared Function Sizing_Item_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vItem_ID As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vItem_Name As String

        Da = New SqlClient.SqlDataAdapter("select Item_Name from Sizing_Item_Head where Item_IdNo = " & Str(Val(vItem_ID)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        vItem_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vItem_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Sizing_Item_IdNoToName = Trim(vItem_Name)

    End Function

    Public Shared Sub get_Customer_Settings()

        Common_Procedures.settings.SoftWareName = "TEXTILE"
        Common_Procedures.settings.Jurisdiction = "TIRUPUR"

        Common_Procedures.settings.Show_DashBoard_Status = 0

        Common_Procedures.settings.Show_Modulewise_Entrance = 0
        Common_Procedures.settings.Show_CompanyGroupWise_Entrance = 0
        Common_Procedures.settings.OESofwtare_ENTRY_Status = 0
        Common_Procedures.settings.SizingSoftware_ENTRY_Status = 0

        Common_Procedures.settings.RoundOff_GST_Values = 0
        Common_Procedures.settings.PreviousEntryDate_ByDefault = 0
        Common_Procedures.settings.AutoLoomStatus = 0
        Common_Procedures.settings.FIBRE_ENTRY_STATUS = 0
        Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 0
        Common_Procedures.settings.Show_Sizing_JobCard_Entry_Status = 0

        Common_Procedures.settings.Show_Yarn_LotNo_Status = 0
        Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 0
        Common_Procedures.settings.JobWorker_PavuWidthWiseConsumption_IN_Delivery = 0
        Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_SeparateEntry = 0
        Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_Delivery_Receipt_Entry = 0
        Common_Procedures.settings.JOBWORKENTRY_Status = 0
        Common_Procedures.settings.Jobwork_ConversionBill_Only = 0
        Common_Procedures.settings.JobWorker_Yarn_to_Fabric_Conversion_Status = 0
        Common_Procedures.settings.STORESENTRY_Status = 0
        Common_Procedures.settings.PAYROLLENTRY_Status = 0
        Common_Procedures.settings.OE_ENTRY_Status = 0
        Common_Procedures.settings.OESofwtare_ENTRY_Status = 0
        Common_Procedures.settings.SizingSoftware_ENTRY_Status = 0
        Common_Procedures.settings.AUTOPOSTING_OF_SIZINGSOFTWARE_SPECIFICATION_AS_TEXTILESOFWTARE_SPECIFICATION = 0
        Common_Procedures.settings.AUTOPOSTING_OF_SIZINGSOFTWARE_PAVUDELIVERY_AS_TEXTILESOFWTARE_PAVURECEIPT = 0

        Common_Procedures.settings.PAYROLLENTRY_Attendance_In_Hours_Status = 0

        Common_Procedures.settings.InvoicePrint_Format = "FORMAT-1"
        Common_Procedures.settings.WeaverWages_Printing_Format = "FORMAT-2"

        Common_Procedures.settings.ClothInvoice_Packing_Charge_Per_Bale = 0  ' 50
        Common_Procedures.settings.ClothInvoice_Bale_Selection_Compulsary = 0

        Common_Procedures.settings.WeaverWages_At_ReceiptDate = 0
        Common_Procedures.settings.WeaverWages_Print_NoNeed_2nd_Page = 0
        Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 0
        Common_Procedures.settings.Weaver_YarnStock_InMeter_Status = 0
        Common_Procedures.settings.WeaverWages_Print_Dont_Show_Company_Heading = 0
        Common_Procedures.settings.WeaverWages_Print_Weavers_Name_IN_Heading = 0
        Common_Procedures.settings.WeaverWages_Print_Dont_Show_To_PartyName = 0
        Common_Procedures.settings.WeaverWages_Print_Weavers_BillNo_SeparateSlNo = 0

        Common_Procedures.settings.WeaverWages_Print_2Copy_In_SinglePage = 0

        Common_Procedures.settings.WeaverWagesPavuDelivery_Print_2Copy_In_SinglePage = 0

        Common_Procedures.settings.WeaverWagesPavuReceipt_print_2Copy_In_SinglePage = 0

        Common_Procedures.settings.WeaverWagesKuraiPavuReceipt_print_2Copy_In_SinglePage = 0
        Common_Procedures.settings.WeaverWagesYarnDelivery_Print_2Copy_In_SinglePage = 0
        Common_Procedures.settings.WeaverWagesYarnReceipt_Print_2Copy_In_SinglePage = 0

        Common_Procedures.settings.EmptyBeamPurchase_Print_2Copy_In_SinglePage = 0
        Common_Procedures.settings.EmptyBeamBagConeDelivery_Print_2Copy_In_SinglePage = 0
        Common_Procedures.settings.EmptyBeamBagConeReceipt_Print_2Copy_In_SinglePage = 0
        Common_Procedures.settings.PavuYarnReceipt_Print_2Copy_In_SinglePage = 0
        Common_Procedures.settings.ClothsalesDelivery_Print_2Copy_In_SinglePage = 0
        Common_Procedures.settings.YarnPurchase_Print_2Copy_In_SinglePage = 0
        Common_Procedures.settings.bobin_delivery_Print_2Copy_In_SinglePage = 0
        Common_Procedures.settings.Weaver_Zari_Kuri_Entries_Status = 0

        Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

        Common_Procedures.settings.Jurisdiction = "TIRUPUR"

        Common_Procedures.settings.Report_Show_CurrentDate_IN_ToDate = 1
        Common_Procedures.settings.Report_Show_CurrentDate_IN_CurrentYear_ToDate_and_Lastdate_IN_Previous_Year_ToDate = 0

        Common_Procedures.settings.NegativeStock_Restriction = 0

        Common_Procedures.settings.Negative_Stock_Restriction_for_Pavu_Stock = 0
        Common_Procedures.settings.Negative_Stock_Restriction_for_Yarn_Stock = 0
        Common_Procedures.settings.Negative_Stock_Restriction_for_Cloth_Stock = 0
        Common_Procedures.settings.Yarn_Negative_Stock_Restriction_in_MillWise_for_Godown = 0
        Common_Procedures.settings.Yarn_Negative_Stock_Restriction_in_MillWise_for_Sizing = 0

        Common_Procedures.settings.Printing_Show_PrintDialogue = 1
        Common_Procedures.settings.Printing_For_FullSheet_Set_A4_As_Default_PaperSize = 1
        Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 1
        Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 0

        Common_Procedures.settings.Cloth_Stock_IN_Pcs_Status = 0
        Common_Procedures.settings.Pavu_Stock_IN_Pcs_Status = 0
        Common_Procedures.settings.YarnProcessing_Entries_Status = 0
        Common_Procedures.settings.FabricProcessing_Entries_Status = 0
        Common_Procedures.settings.Bobin_Zari_Kuri_Entries_Status = 0
        Common_Procedures.settings.Bobin_Production_Entries_Status = 0
        Common_Procedures.settings.Sewing_Entries_Status = 0

        Common_Procedures.settings.EmptyBeam_StockMaintenance_WidthWise_VendorWise = 0

        Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
        Common_Procedures.settings.ClothReceipt_PieceNo_OR_RollNo_Text = "PCS NO"
        Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
        Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1

        Common_Procedures.settings.SizingSpecification_AutoTransfer_PavuStock_To_Godown = 0

        Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 0


        Common_Procedures.settings.Report_Show_CurrentDate_IN_ToDate = 0
        Common_Procedures.settings.Report_Show_CurrentDate_IN_CurrentYear_ToDate_and_Lastdate_IN_Previous_Year_ToDate = 1

        Common_Procedures.settings.Weaver_Cloth_Inward_Entry_Status = 0
        Common_Procedures.settings.WeaverLedger_Printing_Tamil = 0

        Common_Procedures.settings.Internal_Order_Entry_Status = 0
        Common_Procedures.settings.Multi_Godown_Status = 0
        Common_Procedures.settings.Textile_Trading_Yarn_Cloth_Entries_Status = 0
        Common_Procedures.settings.Textile_Trading_Yarn_Entries_Status = 0
        Common_Procedures.settings.Textile_Trading_Cloth_Entries_Status = 0
        Common_Procedures.settings.Textile_Trading_Yarn_Cloth_Pavu_Entries_Status = 0
        Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 0
        Common_Procedures.settings.Delivery_ContinousNo_Status = 0

        Common_Procedures.settings.Loom_Crimp_Percentage_Calculation_for_Production_Meters = 0

        Common_Procedures.settings.Invoice_for_TCS_Calculation_Dont_Consider_Previous_Year_Sales = 0
        Common_Procedures.settings.AutoBackUp_IN_Pendrive_Compulsary_Status = 0
        Common_Procedures.settings.Vefified_Status = 0
        Common_Procedures.settings.User_Modifications_Show_Status = 0
        Common_Procedures.settings.Approved_status = 0

        Common_Procedures.settings.Show_Weaver_JobCard_Entry_STATUS = 0
        Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
        Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 0

        Common_Procedures.settings.SMS_Provider_SenderID = "TSOFTS"
        Common_Procedures.settings.SMS_Provider_Key = "355C7A0B5595B2"
        Common_Procedures.settings.SMS_Provider_RouteID = "134"
        Common_Procedures.settings.SMS_Provider_Type = "text"

        'Common_Procedures.settings.Email_Address = "tsoftsolutions.mail@gmail.com"
        'Common_Procedures.settings.Email_Password = "paktvggtqgdtrtxh"     '--App Password
        'Common_Procedures.settings.Email_Password = "8508403222"
        'Common_Procedures.settings.Email_Host = "smtp.gmail.com"
        'Common_Procedures.settings.Email_Port = 587

        'Common_Procedures.settings.Email_Address = "tsoft.tirupur@gmail.com"
        'Common_Procedures.settings.Email_Password = "cgjjkjmslrsepkxy"     '--App Password
        'Common_Procedures.settings.Email_Password = "GOLD@tn39av7417"
        'Common_Procedures.settings.Email_Host = "smtp.gmail.com"
        'Common_Procedures.settings.Email_Port = 587

        'Common_Procedures.settings.Email_Address = "tsoftsolutions@yahoo.com"
        'Common_Procedures.settings.Email_Password = "8508403221"
        'Common_Procedures.settings.Email_Host = "smtp.mail.yahoo.com"
        'Common_Procedures.settings.Email_Port = 587
        Common_Procedures.settings.Combine_Textile_SizingSOftware = 0
        Common_Procedures.settings.Textile_Sizing_Delivery_receipt_Selection = 0

        Common_Procedures.settings.NO_INTERNET_CONNECTION = 0
        Common_Procedures.settings.PENDRIVE_BACKUP_OPTION_NONEED = 0
        Common_Procedures.settings.CompanyWise_User_Rights = False

        Common_Procedures.settings.Show_Weaver_JobCard_Entry_STATUS = 0

        Common_Procedures.settings.Hide_COLOUR_DELIVERY_In_Processing_Transactions = True
        Common_Procedures.settings.Hide_Qty_QtyMtr_In_Processing_Transactions = True
        Common_Procedures.settings.Hide_Weight_Processing_Transactions = False
        Common_Procedures.settings.Show_Folding_In_Weight_Processing_Transactions = False

        Common_Procedures.settings.Beam_WidthWise_Delivery_Status = 0

        Common_Procedures.settings.Cloth_WarpConsumption_Multiple_EndsCount_Status = 0
        Common_Procedures.settings.Cloth_WeftConsumption_Multiple_WeftCount_Status = 0
        Common_Procedures.settings.Pavu_Stock_Maintenance_in_Weight_Status = 0

        Common_Procedures.settings.Show_Sales_OrderNumber_in_ALLEntry_Status = 0
        Common_Procedures.settings.Sales_OrderNumber_compulsory_in_ALLEntry_Status = 0

        Common_Procedures.settings.All_Delivery_Print_Ori_Dup_Trip_Sts = 0
        Common_Procedures.settings.Dont_Open_Software_if_Software_Updates_Available = 0

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "0001" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "9001" Then '---- DEMO Textile 
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "0002" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "9002" Then '---- DEMO autoLoom
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "0003" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "9003" Then '---- DEMO JobWork
            Common_Procedures.settings.SoftWareName = "JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "0004" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "9004" Then '---- DEMO Textile & JobWork
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "0005" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "9005" Then '---- DEMO Textile & Stores
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.STORESENTRY_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "0006" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "9006" Then '---- DEMO autoLoom & Stores
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.STORESENTRY_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "0007" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "9007" Then '---- DEMO JobWork & Stores
            Common_Procedures.settings.SoftWareName = "JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "0008" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "9008" Then '---- DEMO Textile & JobWork & Stores
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "0009" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "9009" Then '---- DEMO Textile & Stores & PayRoll
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "0010" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "9010" Then '---- DEMO autoLoom & Stores & PayRoll
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "0011" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "9011" Then '---- DEMO JobWork & Stores & PayRoll
            Common_Procedures.settings.SoftWareName = "JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "0012" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "9012" Then '---- DEMO Textile & JobWork & Stores & PayRoll
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1005" Then '---- Jeno Textiles (Somanur)

            Common_Procedures.settings.SoftWareName = "TEXTILE & FP"
            'Common_Procedures.settings.SoftWareName = "FP"
            Common_Procedures.settings.Jurisdiction = "Coimbatore"
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.Report_Show_CurrentDate_IN_ToDate = 1

            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 0
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 1

            Common_Procedures.settings.PAYROLLENTRY_Status = 1

            Common_Procedures.settings.SMS_Provider_SenderID = "ANNAII"
            Common_Procedures.settings.SMS_Provider_Key = "2568F52ACA00E3"
            Common_Procedures.settings.SMS_Provider_RouteID = "134"
            Common_Procedures.settings.SMS_Provider_Type = "text"

            'Common_Procedures.settings.SMS_Provider_SenderID = "JENOTX"
            'Common_Procedures.settings.SMS_Provider_Key = "2568F503C9EB09"
            'Common_Procedures.settings.SMS_Provider_RouteID = "134"
            'Common_Procedures.settings.SMS_Provider_Type = "text"


            Common_Procedures.settings.Bobin_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.Bobin_Production_Entries_Status = 1
            Common_Procedures.settings.Weaver_Zari_Kuri_Entries_Status = 1

            'Common_Procedures.settings.WeaverWages_Printing_Format = "FORMAT-5"

            Common_Procedures.settings.Show_DashBoard_Status = 0 ' 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 2150 '2000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 2150 '2000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1007" Then '----SRI RAJA TEXTILES (PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            'Common_Procedures.settings.SoftWareName = "STORES"
            Common_Procedures.settings.Jurisdiction = "PALLADAM"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"

            Common_Procedures.settings.Printing_Show_PrintDialogue = 1

            Common_Procedures.settings.NegativeStock_Restriction = 1
            Common_Procedures.settings.Negative_Stock_Restriction_for_Yarn_Stock = 1
            Common_Procedures.settings.Negative_Stock_Restriction_for_Pavu_Stock = 1
            Common_Procedures.settings.Negative_Stock_Restriction_for_Cloth_Stock = 1
            Common_Procedures.settings.Yarn_Negative_Stock_Restriction_in_MillWise_for_Godown = 1
            Common_Procedures.settings.Yarn_Negative_Stock_Restriction_in_MillWise_for_Sizing = 0



            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 2000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 2000


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1009" Then '---- Nithya Textiles (Sedapalayam)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1016" Then '---- Rajendra Textiles (Somanur)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.Printing_For_FullSheet_Set_A4_As_Default_PaperSize = 0
            Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 0
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1018" Then '---- M.K Textiles (Palladam)

            Common_Procedures.settings.SoftWareName = "TEXTILE  & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 2000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 2000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1019" Then '---- SUBHAM Textiles (Somanur)

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "A,B,C"

            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1
            'Common_Procedures.settings.PAYROLLENTRY_Attendance_In_Hours_Status = 1

            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1020" Then '---- Madeswaran Textiles (Avinashi)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.WeaverWages_Printing_Format = "FORMAT-2.2"
            Common_Procedures.settings.WeaverWages_Print_Weavers_Name_IN_Heading = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 300
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 300

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1021" Then '---- Asia Textiles Weaving Unit (Palladam)

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "ROLL NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "A,B,C"

            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1

            Common_Procedures.settings.Printing_Show_PrintDialogue = 0

            Common_Procedures.settings.SMS_Provider_LoginID = "ASIAWU"
            Common_Procedures.settings.SMS_Provider_LoginPassword = "tsoft123"
            Common_Procedures.settings.SMS_Provider_SenderID = "ASIAWU"
            Common_Procedures.settings.SMS_Provider_Key = ""
            'Common_Procedures.settings.SMS_Provider_Key = "456BAE175AD5CC"
            'Common_Procedures.settings.SMS_Provider_RouteID = "134"
            'Common_Procedures.settings.SMS_Provider_Type = "text"

            'Common_Procedures.settings.Email_Address = "asiatextilestirupur@yahoo.in"
            'Common_Procedures.settings.Email_Password = "daspanOFF*9191"
            'Common_Procedures.settings.Email_Host = "smtp.mail.yahoo.in"
            'Common_Procedures.settings.Email_Port = 587

            Common_Procedures.settings.STORESENTRY_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1023" Then '---- Manoj Kumar Spining (Perumanallur)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1026" Then '---- VijayaLakshmi Textiles (Sedapalayam)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1027" Then '---- Prem Textile (Somanur)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.Bobin_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.Bobin_Production_Entries_Status = 1
            Common_Procedures.settings.Weaver_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.AutoLoomStatus = 0
            Common_Procedures.settings.STORESENTRY_Status = 0
            Common_Procedures.settings.JOBWORKENTRY_Status = 1

            Common_Procedures.settings.SMS_Provider_SenderID = "PREMTX"
            Common_Procedures.settings.SMS_Provider_Key = "456D6BAD28EFB5"
            Common_Procedures.settings.SMS_Provider_RouteID = "134"
            Common_Procedures.settings.SMS_Provider_Type = "text"

            Common_Procedures.settings.Printing_For_FullSheet_Set_A4_As_Default_PaperSize = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 0

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

            Common_Procedures.settings.Show_Modulewise_Entrance = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1029" Then '---- Arul Kumaran Textiles (Somanur)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-2"
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1
            Common_Procedures.settings.WeaverWages_Print_Dont_Show_Company_Heading = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.Jobwork_ConversionBill_Only = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000 'Arul Kumaran Textiles (Somanur) ' SHANMUGABALA TEX


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1030" Then '---- Magasree Textile (Annur)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1032" Then '---- Asia Textiles (Tirupur)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-4"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"

            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.Printing_For_FullSheet_Set_A4_As_Default_PaperSize = 0
            Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 0
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 1

            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1

            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.WeaverWages_Print_Weavers_Name_IN_Heading = 1


            Common_Procedures.settings.ClothInvoice_Packing_Charge_Per_Bale = 50

            Common_Procedures.settings.SMS_Provider_SenderID = "ASIATX"
            Common_Procedures.settings.SMS_Provider_Key = "456BAE175AD5CC"
            Common_Procedures.settings.SMS_Provider_RouteID = "134"
            Common_Procedures.settings.SMS_Provider_Type = "text"

            'Common_Procedures.settings.Email_Address = "asiatextilestirupur@yahoo.in"
            'Common_Procedures.settings.Email_Password = "daspanOFF*9191"
            'Common_Procedures.settings.Email_Host = "smtp.mail.yahoo.com"
            'Common_Procedures.settings.Email_Port = 587

            Common_Procedures.settings.Report_Show_CurrentDate_IN_ToDate = 0

            Common_Procedures.settings.Report_Show_CurrentDate_IN_CurrentYear_ToDate_and_Lastdate_IN_Previous_Year_ToDate = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1033" Then '---- Rajeswari Weaving (Karumanthapatti) - Somanur Sizing
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "ROLL NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"

            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1

            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.STORESENTRY_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 3000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 3000

            Common_Procedures.settings.Show_Modulewise_Entrance = 1
            Common_Procedures.settings.OESofwtare_ENTRY_Status = 0
            Common_Procedures.settings.SizingSoftware_ENTRY_Status = 1
            Common_Procedures.settings.Show_CompanyGroupWise_Entrance = 1

            '-----Sizing
            Common_Procedures.settings.StatementPrint_Format = "FORMAT-7"
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-2"
            Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn = 2
            Common_Procedures.settings.StatementPrint_BabyConeDetails = 1
            Common_Procedures.settings.StatementPrint_AmountDetails = 0
            Common_Procedures.settings.StatementPrint_YarnTakenDetails = 1
            Common_Procedures.settings.StatementPrint_YarnStockSummary = 0
            Common_Procedures.settings.StatementPrint_Yarn_Other_Count_Particulars = 0
            Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails = 1
            Common_Procedures.settings.StatementPrint_EmptyBagStockDetails = 0
            Common_Procedures.settings.StatementPrint_EmptyBagStockSimple = 0


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1035" Then '---- Kalaimagal Textiles (Avinashi)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-6"
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.WeaverWages_Print_Weavers_Name_IN_Heading = 1
            Common_Procedures.settings.PreviousEntryDate_ByDefault = 1
            Common_Procedures.settings.Printing_For_FullSheet_Set_A4_As_Default_PaperSize = 0
            Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 0
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 1
            Common_Procedures.settings.EmptyBeam_StockMaintenance_WidthWise_VendorWise = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.Jobwork_ConversionBill_Only = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 3500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 3500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1037" Then '---- Prakash Textiles (Somanur)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-1"

            Common_Procedures.settings.SMS_Provider_LoginID = "PRAKSH"
            Common_Procedures.settings.SMS_Provider_LoginPassword = "tsoft123"
            Common_Procedures.settings.SMS_Provider_SenderID = "PRAKSH"
            Common_Procedures.settings.SMS_Provider_Key = ""

            'Common_Procedures.settings.SMS_Provider_SenderID = "PRAKSH"
            'Common_Procedures.settings.SMS_Provider_Key = "25708F701ACFE7"
            'Common_Procedures.settings.SMS_Provider_RouteID = "134"
            'Common_Procedures.settings.SMS_Provider_Type = "text"

            'Common_Procedures.settings.Email_Address = "prakashsomanur@gmail.com"
            'Common_Procedures.settings.Email_Password = "sp9842229699"
            'Common_Procedures.settings.Email_Host = "smtp.gmail.com"
            'Common_Procedures.settings.Email_Port = 587

            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"

            Common_Procedures.settings.Printing_For_FullSheet_Set_A4_As_Default_PaperSize = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 1 '0
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 0

            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.WeaverWages_Print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.WeaverWagesPavuDelivery_Print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.WeaverWagesPavuReceipt_print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.WeaverWagesKuraiPavuReceipt_print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.WeaverWagesYarnDelivery_Print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.WeaverWagesYarnReceipt_Print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.EmptyBeamPurchase_Print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.EmptyBeamBagConeDelivery_Print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.EmptyBeamBagConeReceipt_Print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.PavuYarnReceipt_Print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.ClothsalesDelivery_Print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.YarnPurchase_Print_2Copy_In_SinglePage = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 3000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 3000

            Common_Procedures.settings.Show_DashBoard_Status = 1
            Common_Procedures.settings.Show_Modulewise_Entrance = 1
            Common_Procedures.settings.OESofwtare_ENTRY_Status = 0
            Common_Procedures.settings.SizingSoftware_ENTRY_Status = 1
            Common_Procedures.settings.Show_CompanyGroupWise_Entrance = 1

            '-----Sizing

            Common_Procedures.settings.StatementPrint_Format = "FORMAT-5"
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-2"

            Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn = 2
            Common_Procedures.settings.StatementPrint_BabyConeDetails = 0
            Common_Procedures.settings.StatementPrint_AmountDetails = 1
            Common_Procedures.settings.StatementPrint_YarnTakenDetails = 0
            Common_Procedures.settings.StatementPrint_YarnStockSummary = 1
            Common_Procedures.settings.StatementPrint_Yarn_Other_Count_Particulars = 1
            Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails = 1
            Common_Procedures.settings.StatementPrint_EmptyBagStockSimple = 1
            Common_Procedures.settings.StatementPrint_PickUp_Percentage = 1
            Common_Procedures.settings.StatementPrint_Elongation_Percentage = 1
            Common_Procedures.settings.InvoiceEntry_Set_SetDate_To_InvoiceDate = 1
            Common_Procedures.settings.YarnReceipt_Print_2Copy_In_SinglePage = 1


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1040" Then '---- M.S Textiles (Tirupur)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.WeaverWages_Print_NoNeed_2nd_Page = 1
            Common_Procedures.settings.WeaverWages_Print_Weavers_Name_IN_Heading = 1
            Common_Procedures.settings.WeaverWages_Print_Weavers_BillNo_SeparateSlNo = 1
            Common_Procedures.settings.PreviousEntryDate_ByDefault = 0
            Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 0
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 2000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 2000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1041" Then '---- Varun Exports (Somanur)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-1"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1044" Then '---- Ganesh karthick Textiles (p) Ltd (Somanur)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-8"
            Common_Procedures.settings.WeaverWages_Print_2Copy_In_SinglePage = 1

            'Common_Procedures.settings.SMS_Provider_SenderID = "GKTSMR"
            'Common_Procedures.settings.SMS_Provider_Key = "mdT6EZABREWYuvEzfINBnA"
            'Common_Procedures.settings.SMS_Provider_RouteID = "1"
            'Common_Procedures.settings.SMS_Provider_Type = "text"
            Common_Procedures.settings.SMS_Provider_SenderID = "GKTSMR"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 2000 '1500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 4000 '3500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1045" Then '---- KesavanLogu Textiles (Somanur)
            Common_Procedures.settings.SMS_Provider_SenderID = "KLTFAB"
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1250 '1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 2250 '2000 '1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1046" Then '---- Mahalakshmi Textiles (Karumanthapatti)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-16"
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1 '0 ' 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1049" Then '----SREE DHANALAXSHMI TEXTILES (AVINASHI)    (OR)   Dhanam Textiles (Avinashi)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.WeaverWages_Print_Weavers_Name_IN_Heading = 0
            Common_Procedures.settings.WeaverWages_Print_Weavers_BillNo_SeparateSlNo = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 2600 '2500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 2630 '2500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1050" Then '---- Kumaravel Textiles (Palladam)

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.Printing_For_FullSheet_Set_A4_As_Default_PaperSize = 0
            Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 0
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 1
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-7"
            Common_Procedures.settings.ClothInvoice_Packing_Charge_Per_Bale = 0
            Common_Procedures.settings.PAYROLLENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Attendance_In_Hours_Status = 1

            Common_Procedures.settings.AutoBackUp_IN_Pendrive_Compulsary_Status = True

            Common_Procedures.settings.Invoice_for_TCS_Calculation_Dont_Consider_Previous_Year_Sales = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 2500   '---- 3GSTIN`s
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 2500


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1052" Then '---- Shri Vedha Tex (Karumanthapatti) - Nithya Sizing

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "ROLL NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "A,B,C"
            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1055" Then '---- Srinivasa Cotton Fabrics (Avinashi)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.WeaverWages_Print_NoNeed_2nd_Page = 1
            Common_Procedures.settings.WeaverWages_Print_Weavers_Name_IN_Heading = 0
            Common_Procedures.settings.WeaverWages_Print_Weavers_BillNo_SeparateSlNo = 0
            Common_Procedures.settings.PreviousEntryDate_ByDefault = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 0


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1057" Then '---- Karthikeyan Textiles (mangalam)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.WeaverWages_Print_Weavers_Name_IN_Heading = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1059" Then '---- Lakshmi Saraswathi Textiles (Thiruchengodu)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-4"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"

            Common_Procedures.settings.Printing_Show_PrintDialogue = 0

            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1
            Common_Procedures.settings.STORESENTRY_Status = 1

            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1060" Then '---- Selvanayaki Textiles (Karumanthapatti)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1
            Common_Procedures.settings.WeaverWages_Print_2Copy_In_SinglePage = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 2000   '-- 2 GSTINS
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 2000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1061" Then '---- Prakash Cottex (Sulur)

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-1"
            Common_Procedures.settings.FabricProcessing_Entries_Status = 1
            Common_Procedures.settings.Sewing_Entries_Status = 1
            Common_Procedures.settings.YarnProcessing_Entries_Status = 1

            Common_Procedures.settings.SMS_Provider_SenderID = "PCOTEX"
            Common_Procedures.settings.SMS_Provider_Key = "5576E0B1F61B6A"
            Common_Procedures.settings.SMS_Provider_RouteID = "134"
            Common_Procedures.settings.SMS_Provider_Type = "text"

            Common_Procedures.settings.PreviousEntryDate_ByDefault = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 3000

            Common_Procedures.settings.Hide_COLOUR_DELIVERY_In_Processing_Transactions = True
            Common_Procedures.settings.Hide_Qty_QtyMtr_In_Processing_Transactions = False
            Common_Procedures.settings.Hide_Weight_Processing_Transactions = False
            Common_Procedures.settings.Show_Folding_In_Weight_Processing_Transactions = False

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1064" Then '---- Cheran PowerLoom (Somanur)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0

            Common_Procedures.settings.Cloth_Stock_IN_Pcs_Status = 1
            Common_Procedures.settings.Pavu_Stock_IN_Pcs_Status = 1
            Common_Procedures.settings.YarnProcessing_Entries_Status = 1
            Common_Procedures.settings.FabricProcessing_Entries_Status = 1
            Common_Procedures.settings.Bobin_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.Weaver_Zari_Kuri_Entries_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1065" Then '---- Logu Tex (Palladam)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.WeaverWages_Print_2Copy_In_SinglePage = 1

            Common_Procedures.settings.Printing_For_FullSheet_Set_A4_As_Default_PaperSize = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 0
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 0

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 2000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 2000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1066" Then '---- SOUTHERN COT SPINNERS (NAICKENPALAYAM-SULUR)  or    COTTEX SPINNERS COIMBATORE (P) LTD (COIMBATORE)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Textile_Trading_Yarn_Entries_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1069" Then '---- Navakar Textiles (Avinashi)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-1"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "------" Then '---- Nithin Fabrics (Annur)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1075" Then '---- JR TEX ( STANLEY ) ( MS FABRICS ) (SULUR)   (or)   J.R TEX ( STANLEY ) ( M.S FABRICS ) (SULUR)

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 0 ' 1
            Common_Procedures.settings.JobWorker_Yarn_to_Fabric_Conversion_Status = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "A,B,C"

            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Attendance_In_Hours_Status = 1

            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"

            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1
            Common_Procedures.settings.Multi_Godown_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1081" Then '---- S.Ravichandran Textiles (Erode)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "ERODE"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-2"
            Common_Procedures.settings.Weaver_YarnStock_InMeter_Status = 1
            Common_Procedures.settings.Weaver_Zari_Kuri_Entries_Status = 0 ' 1
            Common_Procedures.settings.WeaverWages_Print_Dont_Show_Company_Heading = 1
            Common_Procedures.settings.FabricProcessing_Entries_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1084" Then '---- K.T COTTON MILLS (TIRUPUR)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.OE_ENTRY_Status = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Attendance_In_Hours_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1078" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1087" Then '---- Kalaimagal Textiles (Palladam)

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1 ' --- MAKE ZERO FOR ( BHAGAVAN TEX PALLADAM ) ' Common_Procedures.settings.PAYROLLENTRY_Status = 1
            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.EmptyBeam_StockMaintenance_WidthWise_VendorWise = 1

            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 1

            Common_Procedures.settings.WeaverWages_Printing_Format = "FORMAT-5"

            Common_Procedures.settings.Show_DashBoard_Status = 1
            Common_Procedures.settings.Show_Modulewise_Entrance = 0
            Common_Procedures.settings.OESofwtare_ENTRY_Status = 0
            Common_Procedures.settings.SizingSoftware_ENTRY_Status = 0
            Common_Procedures.settings.AUTOPOSTING_OF_SIZINGSOFTWARE_SPECIFICATION_AS_TEXTILESOFWTARE_SPECIFICATION = 0
            Common_Procedures.settings.AUTOPOSTING_OF_SIZINGSOFTWARE_PAVUDELIVERY_AS_TEXTILESOFWTARE_PAVURECEIPT = 0

            If Common_Procedures.is_OfficeSystem = True Or InStr(1, Trim(UCase(Common_Procedures.CompanyDetailsDataBaseName)), "TSOFT") > 0 And InStr(1, Trim(UCase(Common_Procedures.CompanyDetailsDataBaseName)), "COMPANYGROUP") > 0 And InStr(1, Trim(UCase(Common_Procedures.CompanyDetailsDataBaseName)), "_ERP_") > 0 Then
                Common_Procedures.settings.Show_Modulewise_Entrance = 1
                Common_Procedures.settings.OESofwtare_ENTRY_Status = 1 ' --- MAKE ZERO FOR ( BHAGAVAN TEX PALLADAM )'Common_Procedures.settings.OESofwtare_ENTRY_Status = 1
                Common_Procedures.settings.SizingSoftware_ENTRY_Status = 1
                Common_Procedures.settings.Show_CompanyGroupWise_Entrance = 1

                Common_Procedures.settings.AUTOPOSTING_OF_SIZINGSOFTWARE_SPECIFICATION_AS_TEXTILESOFWTARE_SPECIFICATION = 1
                Common_Procedures.settings.AUTOPOSTING_OF_SIZINGSOFTWARE_PAVUDELIVERY_AS_TEXTILESOFWTARE_PAVURECEIPT = 1

            End If


            '---Sizing Software Settings

            Common_Procedures.settings.StatementPrint_Format = "FORMAT-2"   ' "FORMAT-5"
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-4"

            Common_Procedures.settings.StatementPrint_InStock_Combine_AllCompany = 1

            Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn = 2

            Common_Procedures.settings.InvoiceEntry_Set_SetDate_To_InvoiceDate = 0

            Common_Procedures.settings.StatementPrint_BabyConeDetails = 1
            Common_Procedures.settings.StatementPrint_AmountDetails = 1
            Common_Procedures.settings.StatementPrint_YarnTakenDetails = 1
            Common_Procedures.settings.StatementPrint_YarnStockSummary = 1
            Common_Procedures.settings.StatementPrint_Yarn_Other_Count_Particulars = 0
            Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails = 1
            Common_Procedures.settings.StatementPrint_EmptyBagStockSimple = 1
            Common_Procedures.settings.StatementPrint_PickUp_Percentage = 0
            Common_Procedures.settings.StatementPrint_Elongation_Percentage = 0

            Common_Procedures.settings.SMS_Provider_SenderID = "KMTSIZ"
            Common_Procedures.settings.SMS_Provider_Key = "username=kalaimagalweaving&password=Newlife"
            Common_Procedures.settings.SMS_Provider_RouteID = "134"
            Common_Procedures.settings.SMS_Provider_Type = "text"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 5000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 5000


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1089" Then '---- ABC Textiles (Somanur)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0

            Common_Procedures.settings.Cloth_Stock_IN_Pcs_Status = 1
            Common_Procedures.settings.Bobin_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1
            Common_Procedures.settings.Weaver_Zari_Kuri_Entries_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1090" Then '---- Anuman Weaving Mills (Madurai)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "MADURAI"
            Common_Procedures.settings.PAYROLLENTRY_Status = 1
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-11"
            Common_Procedures.settings.ClothInvoice_Packing_Charge_Per_Bale = 30

            Common_Procedures.settings.YarnProcessing_Entries_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1094" Then '---- SivaPrakash Cotton Mills (Somanur)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-1"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1097" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1132" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1397" Then '---- GANAPATHY MURUGAN TEXTILE (SOMANUR)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 2000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 2000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1098" Then '---- Sri BannariAmman Tex(Thekkalur)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-13"
            Common_Procedures.settings.WeaverWages_Print_Weavers_Name_IN_Heading = 0
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 4000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 4000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1100" Then '---- Selvanayaki Textiles (Somanur)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-1"
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 0
            Common_Procedures.settings.EmptyBeam_StockMaintenance_WidthWise_VendorWise = 1
            Common_Procedures.settings.WeaverLedger_Printing_Tamil = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1101" Then '---- AVR MILLS PRIVATE LMITED (GOBI)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-1"

            Common_Procedures.settings.SMS_Provider_LoginID = "AVRMIL"
            Common_Procedures.settings.SMS_Provider_LoginPassword = "tsoft123"
            Common_Procedures.settings.SMS_Provider_SenderID = "AVRMIL"
            Common_Procedures.settings.SMS_Provider_Key = ""

            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1105" Then '---- Ganga Weaving (Dindugal)

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "DINDIGUL"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "A,B,C"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1
            'Common_Procedures.settings.PAYROLLENTRY_Attendance_In_Hours_Status = 1
            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 3000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 3000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1109" Then '---- Revathy Textiles (Somanur)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0

            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-15"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1111" Then '---- VELAN SPINNING MILLS (KARUVALUR- AVINASHI)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-17"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1113" Then '---- NIRUBAA FABRIC MILLS (COIMBATORE)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            'Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.JOBWORKENTRY_Status = 0 '1
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.STORESENTRY_Status = 0 ' 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 0 ' 1
            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.EmptyBeam_StockMaintenance_WidthWise_VendorWise = 1

            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 1

            Common_Procedures.settings.WeaverWages_Printing_Format = "FORMAT-5"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1114" Then '---- SUNDARA MILLS (ERODE)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "ERODE"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-2"
            Common_Procedures.settings.Weaver_YarnStock_InMeter_Status = 1
            Common_Procedures.settings.WeaverWages_Print_Dont_Show_Company_Heading = 1
            Common_Procedures.settings.FabricProcessing_Entries_Status = 1
            Common_Procedures.settings.Weaver_Cloth_Inward_Entry_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1115" Then '---- Mayooram textiles (Somanur)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-15"
            Common_Procedures.settings.FabricProcessing_Entries_Status = 1
            Common_Procedures.settings.Sewing_Entries_Status = 1
            Common_Procedures.settings.YarnProcessing_Entries_Status = 1

            Common_Procedures.settings.PreviousEntryDate_ByDefault = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1116" Then '---- St.LOURDU MATHA TEX (Somanur)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-18"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.Bobin_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.Bobin_Production_Entries_Status = 1
            Common_Procedures.settings.Weaver_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 0
            Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 0

            Common_Procedures.settings.Printing_For_FullSheet_Set_A4_As_Default_PaperSize = 1

            Common_Procedures.settings.WeaverWagesPavuDelivery_Print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.WeaverWagesPavuReceipt_print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.WeaverWagesKuraiPavuReceipt_print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.WeaverWagesYarnDelivery_Print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.WeaverWagesYarnReceipt_Print_2Copy_In_SinglePage = 1

            Common_Procedures.settings.bobin_delivery_Print_2Copy_In_SinglePage = 1

            '  Common_Procedures.settings.WeaverLedger_Printing_Tamil = 1
            Common_Procedures.settings.Vefified_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500
        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1118" Then '---- Kasthuri Textiles (COIMBATORE)  -  KASTUR LAXMI MILLS (COIMBATORE)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-1"
            Common_Procedures.settings.YarnProcessing_Entries_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000 '4000          ' -- 2 GST CLOSED SO THEY WANT ONLY 1000 CR
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000 '4000 '4 gstin ' -- 2 GST CLOSED SO THEY WANT ONLY 1000 CR          

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1120" Then '---- ALLWIN TEX (Somanur) (MARIA INTERNATIONAL)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-18"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.Bobin_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.Bobin_Production_Entries_Status = 1
            Common_Procedures.settings.Weaver_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 0
            Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 0

            Common_Procedures.settings.Printing_For_FullSheet_Set_A4_As_Default_PaperSize = 1

            Common_Procedures.settings.WeaverWagesPavuDelivery_Print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.WeaverWagesPavuReceipt_print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.WeaverWagesKuraiPavuReceipt_print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.WeaverWagesYarnDelivery_Print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.WeaverWagesYarnReceipt_Print_2Copy_In_SinglePage = 1

            Common_Procedures.settings.bobin_delivery_Print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.WeaverLedger_Printing_Tamil = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000 '500 '1000 ' ---2 GST
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000 '500 '1000 ' ---2 GST

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1123" Then '---- SRI NIKITHA SIZING MILLS (SOMANUR)  or   SANTHI SIZING (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Bobin_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.Bobin_Production_Entries_Status = 1
            Common_Procedures.settings.Weaver_Zari_Kuri_Entries_Status = 1

            'Common_Procedures.settings.Textile_Trading_Yarn_Cloth_Pavu_Entries_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1124" Then '---- Aravind Textiles (Somanur)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.SMS_Provider_SenderID = "SATFAB"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1126" Then '---- Sun Suriyan Textiles (Somanur)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1127" Then '---- SIVA JOTHI TEXTILES (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.OE_ENTRY_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1128" Then '---- Sri Angalamman Tex (Thekkalur)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1129" Then '---- Balaji textile (avinasi)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1131" Then '---- KIRUTHIKA TEXTILES (PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1132" Then '---- GANAPATHYMURUGAN  Textiles (Somanur)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.WeaverWages_Print_2Copy_In_SinglePage = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1135" Then '---- Maria Fab (Karumathampatti)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.PAYROLLENTRY_Status = 0
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1136" Then '---- PS Textiles (Somanur)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1
            Common_Procedures.settings.WeaverLedger_Printing_Tamil = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1138" Then '---- Vinayaga Fabrics (Tirupur)      Vinayaka Fabrics (Tirupur)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1139" Then '---- SIVAKUMAR Textiles (THEKKALUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "ROLL NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "A,B,C"

            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1
            Common_Procedures.settings.Beam_WidthWise_Delivery_Status = 1

            Common_Procedures.settings.Printing_Show_PrintDialogue = 0

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1140" Then '---- ANANDHARAJA MILLS (AVINASHI)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500 '1000 'cmd by lalith 2025_06_09
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500 '1000 'cmd by lalith 2025_06_09
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1146" Then '---- ASHMITHA TEXTILE (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1250 ' 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1250 '1000
        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1147" Then '---- PS TEXTILE (TIRUPUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.RoundOff_GST_Values = 1
            Common_Procedures.settings.Textile_Trading_Yarn_Entries_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1148" Then '---- VISHNU JOTHI TEXTILES ( ANAND JOTHI SPINNING ) (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1149" Then '---- SRI MAYAVA TEX (TIRUPUR)    
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.PENDRIVE_BACKUP_OPTION_NONEED = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1151" Then '---- BHARATHI TEXTILE (TIRUPUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.OE_ENTRY_Status = 1
            Common_Procedures.settings.STORESENTRY_Status = 1

            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1152" Then '----J.P.R Textile (PALLADAM) or JPR Textile (PALLADAM)

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "PALLADAM"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1155" Then '----KRG TEXTILE MILLS (PALLADAM)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1 '0
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 0
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.Negative_Stock_Restriction_for_Yarn_Stock = 1
            Common_Procedures.settings.Negative_Stock_Restriction_for_Pavu_Stock = 1
            Common_Procedures.settings.Negative_Stock_Restriction_for_Cloth_Stock = 0 ' 1
            Common_Procedures.settings.Yarn_Negative_Stock_Restriction_in_MillWise_for_Godown = 0
            Common_Procedures.settings.Yarn_Negative_Stock_Restriction_in_MillWise_for_Sizing = 0
            Common_Procedures.settings.Show_Modulewise_Entrance = 1
            Common_Procedures.settings.OESofwtare_ENTRY_Status = 1
            Common_Procedures.settings.SizingSoftware_ENTRY_Status = 1

            Common_Procedures.settings.ClothInvoice_Bale_Selection_Compulsary = 1

            Common_Procedures.settings.AUTOPOSTING_OF_SIZINGSOFTWARE_SPECIFICATION_AS_TEXTILESOFWTARE_SPECIFICATION = 1
            Common_Procedures.settings.AUTOPOSTING_OF_SIZINGSOFTWARE_PAVUDELIVERY_AS_TEXTILESOFWTARE_PAVURECEIPT = 1

            '---Sizing Software Settings

            Common_Procedures.settings.StatementPrint_Format = "FORMAT-2"   ' "FORMAT-5"
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-4"

            Common_Procedures.settings.StatementPrint_InStock_Combine_AllCompany = 1

            Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn = 2

            Common_Procedures.settings.InvoiceEntry_Set_SetDate_To_InvoiceDate = 0

            Common_Procedures.settings.Multi_Sizing_Warping_Machine_Status = 1
            Common_Procedures.settings.StatementPrint_BabyConeDetails = 1
            Common_Procedures.settings.StatementPrint_AmountDetails = 0
            Common_Procedures.settings.StatementPrint_YarnTakenDetails = 1
            Common_Procedures.settings.StatementPrint_YarnStockSummary = 1
            Common_Procedures.settings.StatementPrint_Yarn_Other_Count_Particulars = 0
            Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails = 1
            Common_Procedures.settings.StatementPrint_EmptyBagStockSimple = 1
            Common_Procedures.settings.StatementPrint_PickUp_Percentage = 0
            Common_Procedures.settings.StatementPrint_Elongation_Percentage = 0

            Common_Procedures.settings.Loom_Crimp_Percentage_Calculation_for_Production_Meters = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 8000 '7000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 8000 '7000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1158" Then '---- NIDHIE WEAVING (PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.Cloth_sales_yarn_purchase_Return_ContinousNo_Status = 1
            Common_Procedures.settings.FIBRE_ENTRY_STATUS = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 3200 '2200 '1200 '1200
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 3200 '2200 '1200

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1159" Then '---- Caravan Tex (Avinashi)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.WeaverWages_Print_NoNeed_2nd_Page = 1
            Common_Procedures.settings.WeaverWages_Print_Weavers_Name_IN_Heading = 1
            Common_Procedures.settings.WeaverWages_Print_Weavers_BillNo_SeparateSlNo = 0
            Common_Procedures.settings.PreviousEntryDate_ByDefault = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 0

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1160" Then '---- SHRE GURU TEXTILES (KARUMATHAMPATTI)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.OE_ENTRY_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1161" Then '---- SHREE HARIRAM COTTON MILLS (KARUMATHAMPATTI)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.OE_ENTRY_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 200
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 200

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1162" Then '---- Vijay Textiles (Palladam)

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 600 '500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 600 '500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1164" Then '---- SAROJINI TEXTILES - 63 VELAMPALAYAM

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 250

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1168" Then '---- Mega Textiles (TIRUPUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Textile_Trading_Cloth_Entries_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1169" Then '---- Sri Ganesha Textiles (Somanur)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1172" Then '---- SRI RAM WEAVING MILL (PALLADAM)   -- OR --  SRI RAM SIZING (PALLADAAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.WeaverWages_Print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 2000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 2000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1173" Then '---- S.P TEXTILES (THEKKALUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1176" Then '---- SOMANUR KALPANA COTTON (INDIA) PVT LTD (KANIYUR)  --SPINNING MILL
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.RoundOff_GST_Values = 0
            Common_Procedures.settings.Textile_Trading_Yarn_Entries_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1184" Then '---- SENTHIL TEXTILES (THEKKALUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.Jobwork_ConversionBill_Only = 1
            Common_Procedures.settings.WeaverWages_Print_2Copy_In_SinglePage = 1


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1185" Then '---- T.S TEXTILE (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500  '1000 COMMAND BY GOPI 2024-*07-22
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1500 '500  ''1000 COMMAND BY GOPI 2024-*07-22

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1186" Then '---- UNITED WEAVES (PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1
            Common_Procedures.settings.FIBRE_ENTRY_STATUS = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-1"

            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "ROLL NO"

            Common_Procedures.settings.Printing_For_FullSheet_Set_A4_As_Default_PaperSize = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 0

            Common_Procedures.settings.Show_Modulewise_Entrance = 1
            Common_Procedures.settings.Delivery_ContinousNo_Status = 1

            Common_Procedures.settings.Loom_Crimp_Percentage_Calculation_for_Production_Meters = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1187" Then '---- SRI SAKTHIVINAYAGA TEXTILES (AYYANKOIL)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1
            Common_Procedures.settings.WeaverWages_Print_2Copy_In_SinglePage = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000
        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1188" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1189" Then '---- KALISAMY TEX (AYYANKOIL)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1191" Then '---- A.P TEXTILES (63-VELAMPALAYAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1192" Then '---- SURABHI TEXTILES (PALLADAM)

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 0
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "A,B,C"

            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1

            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_SeparateEntry = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1195" Then '---- KASTHURI MILL (TAMIL NADU SIZING) (KARUMATHAPATTI)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.WeaverWages_Printing_Format = "FORMAT-7"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1197" Then '---- SATHIS TEXTILES (VAGARAYAMPALAYAM)

            Common_Procedures.settings.SoftWareName = "TEXTILE & FP"
            'Common_Procedures.settings.SoftWareName = "FP"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.Report_Show_CurrentDate_IN_ToDate = 1

            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 0
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 1

            Common_Procedures.settings.PAYROLLENTRY_Status = 0

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1198" Then '-----BALASUBRAMANIAN TEXTILES (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1199" Then '---- NITHIN FABRICS (ANNUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1202" Then '-----VINAYAKA TEXTILES (KARUVALUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1203" Then '-----MAHADEVI TEXTILES (THEKKALUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

            Common_Procedures.settings.Printing_Show_PrintDialogue = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1204" Then '-----KOHINOOR TEXTILE MILLS(PALLADAM)    or   RAJAMURUGAN MILLS (PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 0 ' 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1

            Common_Procedures.settings.JobWorker_PavuWidthWiseConsumption_IN_Delivery = 0 '1  '-- Settings added on 03-04-2025
            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 0 '1  '-- Settings added on 03-04-2025
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_Delivery_Receipt_Entry = 0 ' 1   '-- Settings added on 03-04-2025

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

            Common_Procedures.settings.PENDRIVE_BACKUP_OPTION_NONEED = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1207" Then '-----BALAKUMAR TEXTILES (KARUMATHAPATTI)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1
            Common_Procedures.settings.WeaverLedger_Printing_Tamil = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500 ' only need 500 Crdts  1100  '1000 '750
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500 ' only need 500 Crdts  1100  '1000 '750

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1209" Then '-----Sri Ram Textile (Somanur)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1210" Then '-----SREE ABIRAMI TEXTILES (THEKKALUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1211" Then '-----SREE SAMY TEXTILES (PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1213" Then '-----SRI KARUNAMBIGAI TEXTILES (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1
            Common_Procedures.settings.SMS_Provider_SenderID = "SKTSMR"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1214" Then '-----CHOLA TEXTILE MILLS (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 2000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 2000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1215" Then '-----MAHENDRAN TEXTILES (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1216" Then 'JAGATHGURU TEXTILES
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 1
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_Delivery_Receipt_Entry = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1221" Then '---- SRI VEERAKUMAR TEX (MANGALAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1223" Then '---- SUNLAAND AUTO WEAVE (SOMANUR) or SUNLAND AUTO WEAVE (SOMANUR) or  SUN LAND AUTO WEAVE (SOMANUR) 

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "ROLL NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "A,B,C"
            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1224" Then '---- KAVITHAA FABRICS (PALLADAM)

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "ROLL NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "A,B,C"

            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1

            Common_Procedures.settings.Printing_Show_PrintDialogue = 0

            Common_Procedures.settings.STORESENTRY_Status = 1


            ' ---CODE BY GOPI 2025-03-22

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 3100   ' 3 GST
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 3100   ' 3 GST

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1229" Then '----Star Fabric Mills (Thekkalur)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1233" Then '----VIPIN TETILES (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.AutoLoomStatus = 1

            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1

            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 1
            Common_Procedures.settings.JobWorker_PavuWidthWiseConsumption_IN_Delivery = 1
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_SeparateEntry = 0
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_Delivery_Receipt_Entry = 0

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "2001" Then '----DHILL TEX (TIRUPUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Textile_Trading_Cloth_Entries_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1237" Then '----SRE SASWIGHA MILLS (KITTAMPALAYAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1234" Then '---- ARULJOTHI EXPORTS PVT LTD (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.FIBRE_ENTRY_STATUS = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 4000 '3500 '2500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 5700 '5200 '4200 '3500 ' ARULJOTHI ' ARUNOTHAYA ' AKSHADHA 

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1235" Then '---- SOMANUR KALPANA COTTON (INDIA) PVT LTD (SOMANUR)  --TETILES
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-18"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.Bobin_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.Bobin_Production_Entries_Status = 1
            Common_Procedures.settings.Weaver_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 1

            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "ROLL NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "A,B,C"
            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.STORESENTRY_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 3000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 3000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1238" Then '---- Amman Tex (Mangalam-VelayuthamPalayam)

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1

            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "ROLL NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "A,B,C"

            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1

            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.Printing_For_FullSheet_Set_A4_As_Default_PaperSize = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 0

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1239" Then '---- Sri Sathis Textile (Mangalam-VelayuthamPalayam)

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1

            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "ROLL NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "A,B,C"

            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1

            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1

            Common_Procedures.settings.Printing_For_FullSheet_Set_A4_As_Default_PaperSize = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 0

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 750
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 750

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1242" Then '---- SOUTHERN SAREESS (ERODE)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "ERODE"
            Common_Procedures.settings.FabricProcessing_Entries_Status = 0
            Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 1
            Common_Procedures.settings.Printing_For_FullSheet_Set_A4_As_Default_PaperSize = 1
            Common_Procedures.settings.WeaverLedger_Printing_Tamil = 1
            Common_Procedures.settings.PENDRIVE_BACKUP_OPTION_NONEED = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000
        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1243" Then '---- P.V.S Textiles (Somanur)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1

            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-1"

            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1

            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"

            Common_Procedures.settings.Printing_For_FullSheet_Set_A4_As_Default_PaperSize = 0
            Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 0
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1246" Then '---- NATIONAL INNOVATIONS (TIRUPUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.FabricProcessing_Entries_Status = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.Internal_Order_Entry_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1249" Then '---- VAIPAV TEXTILES PVT LTD (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.SMS_Provider_SenderID = "VAIPAV"
            Common_Procedures.settings.Vefified_Status = 1
            Common_Procedures.settings.User_Modifications_Show_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1251" Then '---- SRI SARANYA TEXTILES (THEKKALUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1253" Then '---- VM MILLS (KARUMATHAMPATTI)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1254" Then '---- SMT FABRICS (POOMALUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1256" Then '---- CLS TEXTILES - 33AAKFC2406J1ZQ
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "METTUPALAYAM"
            Common_Procedures.settings.Textile_Trading_Yarn_Entries_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1257" Then '---- SENTHIL MURUGAN TEXTILES (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 250
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500
        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1258" Then '---- JEEVITHA TEXTILES (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1050 '1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1050 '1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1261" Then '---- KPG SOMANUR (KARUMATHAMPATTI)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1264" Then '---- SRI SUBBULAKSHMI & C0 (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1266" Then '---- coral weaves (PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.FabricProcessing_Entries_Status = 1

            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1
            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.EmptyBeam_StockMaintenance_WidthWise_VendorWise = 1

            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 1

            Common_Procedures.settings.WeaverWages_Printing_Format = "FORMAT-5"

            Common_Procedures.settings.FabricProcessing_Entries_Status = 1
            Common_Procedures.settings.Show_Sizing_JobCard_Entry_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

            Common_Procedures.settings.Show_Sales_OrderNumber_in_ALLEntry_Status = 1
            Common_Procedures.settings.Sales_OrderNumber_compulsory_in_ALLEntry_Status = 0

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1267" Then '---- BRT TEXTTILES (SOMANUR)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.Combine_Textile_SizingSOftware = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"

            Common_Procedures.settings.Printing_Show_PrintDialogue = 1

            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1
            Common_Procedures.settings.STORESENTRY_Status = 1

            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 1
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_Delivery_Receipt_Entry = 1

            Common_Procedures.settings.ClothInvoice_Bale_Selection_Compulsary = 1

            Common_Procedures.settings.SMS_Provider_LoginID = "BRTSPG"
            Common_Procedures.settings.SMS_Provider_LoginPassword = "tsoft123"
            Common_Procedures.settings.SMS_Provider_SenderID = "BRTFAB"
            Common_Procedures.settings.SMS_Provider_Key = ""

            Common_Procedures.settings.Approved_status = 1
            'Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 1
            Common_Procedures.settings.WeaverWages_Printing_Format = "FORMAT-1"

            Common_Procedures.settings.Multi_Godown_Status = 1

            Common_Procedures.settings.User_Modifications_Show_Status = 1

            Common_Procedures.settings.Negative_Stock_Restriction_for_Yarn_Stock = 1
            Common_Procedures.settings.Negative_Stock_Restriction_for_Pavu_Stock = 0
            Common_Procedures.settings.Negative_Stock_Restriction_for_Cloth_Stock = 0
            Common_Procedures.settings.Yarn_Negative_Stock_Restriction_in_MillWise_for_Godown = 0
            Common_Procedures.settings.Yarn_Negative_Stock_Restriction_in_MillWise_for_Sizing = 0

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 3000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 3000

            Common_Procedures.settings.Show_Sales_OrderNumber_in_ALLEntry_Status = 1
            Common_Procedures.settings.Sales_OrderNumber_compulsory_in_ALLEntry_Status = 1
            Common_Procedures.settings.Dont_Open_Software_if_Software_Updates_Available = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1269" Then '---- SRI SHANMUGA TEXTILES
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1268" Then '---- GAYATHRI TEXTILES (KOVILPALAYAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 300
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 300

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1270" Then '---- SV WEAVES (KARUMATHAMPATTI)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1273" Then '---- SRI DEVI TEXTILES (KARUVALUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.User_Modifications_Show_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1274" Then '----ADHIYAMAN WEAVING MILLS (P) LIMITED (SOMANUR)     
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1

            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-1"

            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "ROLL NO"

            Common_Procedures.settings.Printing_For_FullSheet_Set_A4_As_Default_PaperSize = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 1

            Common_Procedures.settings.STORESENTRY_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 2000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 2500 '2000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1276" Then '---- DHANVI IMPEX (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500 ' 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500 '1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1277" Then '----SRINATH WEAVING MILLS LLP  (PALLADAM)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 0 ' 1
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 2000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 2000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1278" Then   '----SRI VALLIMURUGAN SIZING MILLS
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1283" Then '---- ARUL  MURUGAN TEXTILES (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1
            Common_Procedures.settings.WeaverWages_Print_2Copy_In_SinglePage = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1286" Then '---- NILA TEXTILES (THEKKALUR)  --OE MILL
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.RoundOff_GST_Values = 0
            Common_Procedures.settings.Textile_Trading_Yarn_Entries_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1290" Then '---- ARJUNA TEXTILES (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Textile_Trading_Yarn_Cloth_Entries_Status = 1
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1333" Then  ' -----NT Textile
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.FabricProcessing_Entries_Status = 1
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1291" Then  '---- Tirupur Gada Center (TIRUPUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.FabricProcessing_Entries_Status = 1
            Common_Procedures.settings.Textile_Trading_Cloth_Entries_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000      '----- CREDITS FOR (UMMED TEXTILE )



        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1312" Then '---------- SREE VENGATESWARA FABRICS (ERODE)  - SREE VENKATESWARA FABRICS (ERODE)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "ERODE"
            Common_Procedures.settings.Textile_Trading_Cloth_Entries_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1292" Then '---- SARVESWARA SPINNING (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Textile_Trading_Yarn_Cloth_Entries_Status = 1
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1294" Then '----chitra tex
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1295" Then '---- GOWRI TEX (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1

            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-16"
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1

            Common_Procedures.settings.STORESENTRY_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1296" Then '---- SHREE GOMATHI MILL (VANJIPALAYAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 2500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 2500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1297" Then '---- KAMACHIAMMAN TEX (ERODE)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "ERODE"
            Common_Procedures.settings.Weaver_YarnStock_InMeter_Status = 1
            Common_Procedures.settings.WeaverWages_Print_Dont_Show_Company_Heading = 1
            Common_Procedures.settings.FabricProcessing_Entries_Status = 1


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1298" Then '---- GOWRI TRADER (PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Textile_Trading_Yarn_Cloth_Entries_Status = 1
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1301" Then '---- IEL FINEX PRIVATE LTD (OR) NST (TIRUPUR)(ERODE) (CHIDHAMBARAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "CHIDHAMBARAM"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1

            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.Multi_Godown_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1303" Then '---- SKSS TEXTILES (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 400
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 600 '400

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1305" Then '---- VAKUL EXPORTS (SOMANUR)   OR    JEYAM WEAVING    or   GANAPATHY TEX (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1306" Then '---- Sri Vigneswara Mills (Palladam)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.FabricProcessing_Entries_Status = 0
            'Common_Procedures.settings.Textile_Trading_Yarn_Entries_Status = 1
            Common_Procedures.settings.Textile_Trading_Yarn_Cloth_Entries_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1307" Then '---- Sri Sugam Textile (Karumanthampatti)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.Jobwork_ConversionBill_Only = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1309" Then '------------ venkatalakshmi
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.WeaverWages_Print_2Copy_In_SinglePage = 1

            Common_Procedures.settings.SMS_Provider_LoginID = "SVLMTX"
            Common_Procedures.settings.SMS_Provider_LoginPassword = "tsoft123"
            Common_Procedures.settings.SMS_Provider_SenderID = "SVLMtx"
            Common_Procedures.settings.SMS_Provider_Key = ""

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500 '1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500 '1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1311" Then '---- Sri Saai Texttiles (Palladam) or  Sri Sai Textiles (Palladam)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1313" Then '---- Sri Guru Fabrics(SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.PreviousEntryDate_ByDefault = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1315" Then '----K.R TEXTILE (SOMANUR) -  KR TEXTILE (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.PreviousEntryDate_ByDefault = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1316" Then '---- NITHYABHARATH TEXTILE (P) LTD (PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "ROLL NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "A,B,C"

            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1

            Common_Procedures.settings.Printing_Show_PrintDialogue = 1

            Common_Procedures.settings.STORESENTRY_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1200 '1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1200 '1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1319" Then '---- AMMAN TRADERS (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Textile_Trading_Yarn_Cloth_Entries_Status = 1
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1322" Then '---- SRI JAYANTHI TEXTILES (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Textile_Trading_Yarn_Cloth_Entries_Status = 1
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1323" Then '---------- MERLIN ROSE TEXTILES (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Textile_Trading_Cloth_Entries_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1324" Then '---------- KG & THANGAM EXPORT
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1325" Then '---------- G S ELECTRONICS (KARUVALUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1328" Then '---------- K.V.P TEXTILES (THEKKALUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1329" Then '---------- VASANTHAMANI TEX PALLADAM
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 100
        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1331" Then '---------- SUBASRI TEXTILES (AVINASHI)  SUBA SRI TEXTILES (AVINASHI)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "AVINASHI"

            'Common_Procedures.settings.Email_Address = "subasritextile@gmail.com"
            'Common_Procedures.settings.Email_Password = "19011974"
            'Common_Procedures.settings.Email_Host = "smtp.gmail.com"
            'Common_Procedures.settings.Email_Port = 587

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1333" Then '---------- N T TEXTILE SOLUTION (COIMBATORE)   (OR)  NT TEXTILE SOLUTION (COIMBATORE)     (OR)  N.T TEXTILE SOLUTION (COIMBATORE)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1334" Then '---------- SIVASELVI TEXTILES (VANJIPALAYAM)  (OR)  SIVA SELVI TEXTILES (VANJIPALAYAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.FIBRE_ENTRY_STATUS = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 3000  '2800  '2700 '2500  '2000
            '-- CODE BY GOPI 2025-02-20 - FOR ADDING EXTRA CR
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 3000 '2800 '2500  '2000

            '-- COMMAND BY GOPI 2025-02-20 - FOR ADDING EXTRA CR
            'Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 2500  '2000 

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1335" Then '---------- MUKUNTH FABRICS (PALLADAM)  
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "ROLL NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "A,B,C"

            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1

            Common_Procedures.settings.Printing_Show_PrintDialogue = 0

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1336" Then '---------- VEDHA TEX(STORES) (KARUMANTHAMPATTI)
            Common_Procedures.settings.SoftWareName = "STORES"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.STORESENTRY_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1342" Then '---- SRI RAM TEXTILES (PALLADAM) - ANUPSHARMA CLOTH COMMISSION AGENT
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Textile_Trading_Cloth_Entries_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1343" Then '---- SUNLAAND AUTOLOOMS (SOMANUR)  or  SUNLAND AUTOLOOMS (SOMANUR)  or  SUN LAND AUTOLOOMS (SOMANUR)

            '--- using "1224" settings

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "ROLL NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"

            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1

            Common_Procedures.settings.Printing_Show_PrintDialogue = 0

            Common_Procedures.settings.STORESENTRY_Status = 1


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1350" Then '---- MALAR COTTON (VALAYAPALAYAM, 63.VELAMPALAYAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            'Common_Procedures.settings.Textile_Trading_Yarn_Entries_Status = 1
            'Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1

            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1

            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 0 ' 500

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1352" Then '----Eminent Textile (Rajapalayam)

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "RAJAPALAYAM"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1357" Then '----Desikanathar Textile (Dindugal)

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "DINDIGUL"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"
            ' Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1
            Common_Procedures.settings.ClothsalesDelivery_Print_2Copy_In_SinglePage = 1

            Common_Procedures.settings.Cloth_WeftConsumption_Multiple_WeftCount_Status = 1
            Common_Procedures.settings.Cloth_WarpConsumption_Multiple_EndsCount_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 3000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 3000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1358" Then '---- Parameshwari Textile (Avinashi)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "AVINASHI"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1360" Then '---- Ashoka Textile (63.Velampalayam - Palladam)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1363" Then '-----Balaji Textile (karadivavi)

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1

            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "ROLL NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "A,B,C"

            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1

            Common_Procedures.settings.Printing_Show_PrintDialogue = 0

            Common_Procedures.settings.STORESENTRY_Status = 1

            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 1
            Common_Procedures.settings.JobWorker_PavuWidthWiseConsumption_IN_Delivery = 1
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_SeparateEntry = 0
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_Delivery_Receipt_Entry = 1


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1367" Then '---- Hari Ram Tex - Kombakadu (Somanur)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1369" Then '---- ANCHANEYA TEXTILE INDUSTRIES(KARUMATHAMPATTI)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1370" Then '---- AKIL IMPEX (ANNUR)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1371" Then '---- RAAY SAN TEXTILES (ANNUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "PALLADAM"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 600 ' 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 600 '500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1377" Then '---- KURINJHI WEAVING MILLS (PALLADAM) 
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "PALLADAM"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1

            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "ROLL NO"

            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"

            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1

            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 1
            Common_Procedures.settings.JobWorker_PavuWidthWiseConsumption_IN_Delivery = 1
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_SeparateEntry = 0
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_Delivery_Receipt_Entry = 1

            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 0

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "--1379--" Then '---- MASTER TEXTILE (PALLADAM)(demo not confirm)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "PALLADAM"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1

            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"

            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1

            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 0
            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 1
            Common_Procedures.settings.JobWorker_PavuWidthWiseConsumption_IN_Delivery = 1
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_SeparateEntry = 0
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_Delivery_Receipt_Entry = 1

            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 0

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1380" Then '---- R.M TEX & FABRICS (VIJAYAMANGALAM)   OR  RM TEX & FABRICS (VIJAYAMANGALAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "ERODE"
            Common_Procedures.settings.Bobin_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.Bobin_Production_Entries_Status = 1
            Common_Procedures.settings.Weaver_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1381" Then '---- KRS TEX (PALLADAM) 
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            'Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 250

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1382" Then '---- SRI BAGAVATHI WEAVING MILLS (PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 400  '350 '250

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1383" Then '---- SASTTIKA TEX (PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 250 '200

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1384" Then '---- VISWAK WEAVING MILLS (PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 250

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1385" Then
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1387" Then '---- SRI BAGAVATHI WEAVING MILLS (PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1390" Then '---DURGA TEXTILE (THEKKALUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.FabricProcessing_Entries_Status = 0
            'Common_Procedures.settings.Textile_Trading_Yarn_Entries_Status = 1
            Common_Procedures.settings.Textile_Trading_Yarn_Cloth_Entries_Status = 1
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1391" Then '---- SAKTHI DHARAN TEXTILES (THIRUCENGODU)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.JOBWORKENTRY_Status = 1

            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 0
            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.EmptyBeam_StockMaintenance_WidthWise_VendorWise = 1

            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 1

            Common_Procedures.settings.WeaverWages_Printing_Format = "FORMAT-5"


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1393" Then '---- ESSAN MILLS (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Textile_Trading_Yarn_Cloth_Entries_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 580 '550 '500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 580 '550 '500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1394" Then '---- SRI RAMKUMAR TEX (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Textile_Trading_Yarn_Cloth_Entries_Status = 1
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1395" Then '---- SANTHA EXPORTS (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "Coimbatore"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 5000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 5000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1397" Then '---- Ganapathy murugan spinnig mills (annur)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Textile_Trading_Yarn_Cloth_Entries_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1398" Then '---- A R TRADERS (BHAVANI)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "ERODE"
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 1


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1399" Then '---- TN Sampath Kumar Textiles (Karuvalur)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1401" Then '---- GUNASUNDARI FIREWOODS (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1404" Then '---- MJK TEXTILES (PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.JOBWORKENTRY_Status = 1

            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1
            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.EmptyBeam_StockMaintenance_WidthWise_VendorWise = 1

            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 1
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.WeaverWages_Printing_Format = "FORMAT-5"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1405" Then 'SHANMUGA PRIYA TEX (PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1408" Then '---- Amirtham Textiles (Tirupur)

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.Printing_For_FullSheet_Set_A4_As_Default_PaperSize = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 0


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1409" Then '---VIJAYAKALA TEXTILES (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.FabricProcessing_Entries_Status = 0
            'Common_Procedures.settings.Textile_Trading_Yarn_Entries_Status = 1
            Common_Procedures.settings.Textile_Trading_Yarn_Cloth_Entries_Status = 1
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1


            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1500 '1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1500 '1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1410" Then '---SAKTHI TEXTILES (ERODE)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "ERODE"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-1"


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1413" Then '---- KAVINGANGA WEAVING MILLS PVT LTD (NOIDA)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "DINDIGUL"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1414" Then '---- SRI PERIYANAYAKI AMMAN TEXTILES (SOMANUR - THOTTIPALAYAM)   and  SRI MAHALAKSHMI TEXTILES (SOMANUR - THOTTIPALAYAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-18"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.Bobin_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.Bobin_Production_Entries_Status = 1
            Common_Procedures.settings.Weaver_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 0
            Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 1
            Common_Procedures.settings.Show_Yarn_LotNo_Status = 1

            Common_Procedures.settings.WeaverLedger_Printing_Tamil = 1
            Common_Procedures.settings.Vefified_Status = 1

            'Common_Procedures.settings.Show_Sales_OrderNumber_in_ALLEntry_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

            '  '---- '---- '---- for mahalakshmi stores (demo)
            'Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            'Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500
            'Common_Procedures.settings.FabricProcessing_Entries_Status = 1
            '  '---- '---- '---- for mahalakshmi stores

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1416" Then '---- VISWAS COTTON (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "ROLL NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"

            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1

            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1417" Then '---- SAKTHIVEL IMPEX (SOMANUR)

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1
            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.EmptyBeam_StockMaintenance_WidthWise_VendorWise = 0

            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 1

            Common_Procedures.settings.WeaverWages_Printing_Format = "FORMAT-5"

            Common_Procedures.settings.Combine_Textile_Sizing_Software_Status = 0

            Common_Procedures.settings.Multi_Godown_Status = 1

            Common_Procedures.settings.Show_Modulewise_Entrance = 1
            Common_Procedures.settings.Show_CompanyGroupWise_Entrance = 1
            Common_Procedures.settings.SizingSoftware_ENTRY_Status = 1

            Common_Procedures.settings.AUTOPOSTING_OF_SIZINGSOFTWARE_SPECIFICATION_AS_TEXTILESOFWTARE_SPECIFICATION = 1
            Common_Procedures.settings.AUTOPOSTING_OF_SIZINGSOFTWARE_PAVUDELIVERY_AS_TEXTILESOFWTARE_PAVURECEIPT = 1

            '---Sizing Software Settings

            Common_Procedures.settings.StatementPrint_Format = "FORMAT-2"   ' "FORMAT-5"
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-4"

            Common_Procedures.settings.StatementPrint_InStock_Combine_AllCompany = 1

            Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn = 2

            Common_Procedures.settings.InvoiceEntry_Set_SetDate_To_InvoiceDate = 0

            Common_Procedures.settings.StatementPrint_BabyConeDetails = 1
            Common_Procedures.settings.StatementPrint_AmountDetails = 1
            Common_Procedures.settings.StatementPrint_YarnTakenDetails = 1
            Common_Procedures.settings.StatementPrint_YarnStockSummary = 1
            Common_Procedures.settings.StatementPrint_Yarn_Other_Count_Particulars = 0
            Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails = 1
            Common_Procedures.settings.StatementPrint_EmptyBagStockSimple = 1
            Common_Procedures.settings.StatementPrint_PickUp_Percentage = 0
            Common_Procedures.settings.StatementPrint_Elongation_Percentage = 0
            Common_Procedures.settings.Textile_Sizing_Delivery_receipt_Selection = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1420" Then '---- CYBER TEX (PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Yarn_to_Fabric_Conversion_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 0
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.Delivery_ContinousNo_Status = 1
            Common_Procedures.settings.FabricProcessing_Entries_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1421" Then '---- G.K TEXTILES (SULUR)    or GK TEXTILES (SULUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 0 ' 1
            Common_Procedures.settings.Delivery_ContinousNo_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1423" Then '---- GOWTHAM TEX (PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Yarn_to_Fabric_Conversion_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 0
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.Delivery_ContinousNo_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1428" Then '---- SAKTHI VINAYAGA TEXTILES  (ERODE-PALLIPALAYAM)

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "NAMAKKAL"
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 0
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "ROLL NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.STORESENTRY_Status = 0
            Common_Procedures.settings.PAYROLLENTRY_Status = 0
            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.EmptyBeam_StockMaintenance_WidthWise_VendorWise = 0

            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 1

            Common_Procedures.settings.WeaverWages_Printing_Format = "FORMAT-5"

            Common_Procedures.settings.Combine_Textile_Sizing_Software_Status = 0

            Common_Procedures.settings.Multi_Godown_Status = 1

            Common_Procedures.settings.Show_Modulewise_Entrance = 1
            Common_Procedures.settings.SizingSoftware_ENTRY_Status = 1

            Common_Procedures.settings.AUTOPOSTING_OF_SIZINGSOFTWARE_SPECIFICATION_AS_TEXTILESOFWTARE_SPECIFICATION = 1
            Common_Procedures.settings.AUTOPOSTING_OF_SIZINGSOFTWARE_PAVUDELIVERY_AS_TEXTILESOFWTARE_PAVURECEIPT = 1

            '---Sizing Software Settings

            Common_Procedures.settings.StatementPrint_Format = "FORMAT-2"   ' "FORMAT-5"
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-4"

            Common_Procedures.settings.StatementPrint_InStock_Combine_AllCompany = 1

            Common_Procedures.settings.StatementPrint_YarnStock_Concept_YarnTaken_OR_ConsumedYarn = 2

            Common_Procedures.settings.InvoiceEntry_Set_SetDate_To_InvoiceDate = 0

            Common_Procedures.settings.StatementPrint_BabyConeDetails = 1
            Common_Procedures.settings.StatementPrint_AmountDetails = 1
            Common_Procedures.settings.StatementPrint_YarnTakenDetails = 1
            Common_Procedures.settings.StatementPrint_YarnStockSummary = 1
            Common_Procedures.settings.StatementPrint_Yarn_Other_Count_Particulars = 0
            Common_Procedures.settings.StatementPrint_EmptyBeamStockDetails = 1
            Common_Procedures.settings.StatementPrint_EmptyBagStockSimple = 1
            Common_Procedures.settings.StatementPrint_PickUp_Percentage = 0
            Common_Procedures.settings.StatementPrint_Elongation_Percentage = 0

            Common_Procedures.settings.Textile_Sizing_Delivery_receipt_Selection = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1429" Then '---- VELMURUGAN TEXTILES (MANGALAM-POOMALUR)
            '----but using cc = "1383" of '---- SASTTIKA TEX (PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 200

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1438" Then '-----SATHY TEXTILES (SATHYAMANGALAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "ERODE"
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.AutoLoomStatus = 1

            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 0
            Common_Procedures.settings.JobWorker_PavuWidthWiseConsumption_IN_Delivery = 0
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_SeparateEntry = 0
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_Delivery_Receipt_Entry = 0
            Common_Procedures.settings.JOBWORKENTRY_Status = 0
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 0

            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"

            Common_Procedures.settings.Show_Sizing_JobCard_Entry_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000  '500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000  '500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1439" Then '---- GLORIA FABRICS(Somanur)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-18"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.Bobin_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.Bobin_Production_Entries_Status = 1
            Common_Procedures.settings.Weaver_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 0
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 0
            Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 0

            Common_Procedures.settings.Printing_For_FullSheet_Set_A4_As_Default_PaperSize = 1

            Common_Procedures.settings.WeaverWagesPavuDelivery_Print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.WeaverWagesPavuReceipt_print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.WeaverWagesKuraiPavuReceipt_print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.WeaverWagesYarnDelivery_Print_2Copy_In_SinglePage = 1
            Common_Procedures.settings.WeaverWagesYarnReceipt_Print_2Copy_In_SinglePage = 1

            Common_Procedures.settings.bobin_delivery_Print_2Copy_In_SinglePage = 1


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1440" Then '-----SUBIKSHA TEXTILES (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1


            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 300
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 300


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1441" Then '-----GRANDMAX WEAVES PRIVATE LIMITED (AVINASHI)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

            Common_Procedures.settings.AutoLoomStatus = 1

            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 0

            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1444" Then '-----GOMATHI TEX(MANGALAM-IDUVAI)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1445" Then '-----SR TRUMALA MLLS (AVINASHI)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

            Common_Procedures.settings.AutoLoomStatus = 1

            Common_Procedures.settings.JOBWORKENTRY_Status = 0
            Common_Procedures.settings.STORESENTRY_Status = 0
            Common_Procedures.settings.PAYROLLENTRY_Status = 0

            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1446" Then '---- KALIYA DEVI TEXTILES (KARUVALUR)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Bobin_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.Bobin_Production_Entries_Status = 0
            Common_Procedures.settings.Weaver_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 0
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1448" Then '-----SHANVI FABRICS  ( SENTHIL ANDAVAR SIZING ) (somanur)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.AutoLoomStatus = 1

            Common_Procedures.settings.JOBWORKENTRY_Status = 0
            Common_Procedures.settings.STORESENTRY_Status = 0
            Common_Procedures.settings.PAYROLLENTRY_Status = 0

            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"

            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1499" Then '---VELAN GINNING(PERUNDURAI)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "ERODE"
            Common_Procedures.settings.FabricProcessing_Entries_Status = 0
            Common_Procedures.settings.Textile_Trading_Yarn_Cloth_Entries_Status = 1


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1339" Then '-----SREE MARAKATHAM YARN
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1451" Then '---- CHINNU SIZING MILLS(TEXTILES) (PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1452" Then '---- SRI THANGAM C TEX (KARUMANTHAPATTI)

            Common_Procedures.settings.SoftWareName = "JOBWORK"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 0

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1453" Then '---- VELAN MILLS

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "ROLL NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "A,B,C"

            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1

            Common_Procedures.settings.Printing_Show_PrintDialogue = 0

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1455" Then '---- VEERA TEX (PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Textile_Trading_Cloth_Entries_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1461" Then '---- AMBAL TEXTILES (VIJAYAMANGALAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "ERODE"
            Common_Procedures.settings.Bobin_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.Bobin_Production_Entries_Status = 1
            Common_Procedures.settings.Weaver_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1100 '1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1100 '1000


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1464" Then '---- MANI OMEGA FABRICS (THIRUCHENKODU)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "NAMAKKAL"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 0
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 0
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.Show_Sizing_JobCard_Entry_Status = 1

            Common_Procedures.settings.Loom_Crimp_Percentage_Calculation_for_Production_Meters = 1
            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 1
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "DOFF NO"

            Common_Procedures.settings.Printing_For_FullSheet_Set_A4_As_Default_PaperSize = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_A4_As_Default_PaperSize = 1
            Common_Procedures.settings.Printing_For_HalfSheet_Set_Custom8X6_As_Default_PaperSize = 0

            Common_Procedures.settings.Show_Modulewise_Entrance = 1

            Common_Procedures.settings.PENDRIVE_BACKUP_OPTION_NONEED = 1
            Common_Procedures.settings.Beam_WidthWise_Delivery_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0 ' 3000  
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000 ' 3000


            Common_Procedures.settings.Show_Yarn_LotNo_Status = 1

            Common_Procedures.settings.FabricProcessing_Entries_Status = 1
            Common_Procedures.settings.YarnProcessing_Entries_Status = 1

            Common_Procedures.settings.Show_Sales_OrderNumber_in_ALLEntry_Status = 1
            Common_Procedures.settings.Sales_OrderNumber_compulsory_in_ALLEntry_Status = 1

            Common_Procedures.settings.All_Delivery_Print_Ori_Dup_Trip_Sts = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1465" Then '---- SARASATHII TEXTIES (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1469" Then '---- R.S.S TEX(PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            'Common_Procedures.settings.Textile_Trading_Cloth_Entries_Status = 1
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 800 '500 '1000  --- ARAV (2 GSTIN - 800 CR)
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1474" Then '-----R.K WEAVES (KODVERI)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "ERODE"

            Common_Procedures.settings.AutoLoomStatus = 1

            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 0
            Common_Procedures.settings.JobWorker_PavuWidthWiseConsumption_IN_Delivery = 0
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_SeparateEntry = 0
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_Delivery_Receipt_Entry = 0
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 0

            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"

            Common_Procedures.settings.Cloth_WeftConsumption_Multiple_WeftCount_Status = 1
            Common_Procedures.settings.Cloth_WarpConsumption_Multiple_EndsCount_Status = 0
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1475" Then
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1476" Then  ' ---------- Naveen Tex

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1479" Then  ' ---------- Ramya Tex

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1482" Then '---- SENTHUR FAB(PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-1"
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1484" Then '---- SR TEXTILE KANIYUR
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1486" Then  '---- HARI HARA
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.FabricProcessing_Entries_Status = 1
            Common_Procedures.settings.Textile_Trading_Cloth_Entries_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1487" Then ' SV TEXTILE MILLS 

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

            Common_Procedures.settings.AutoLoomStatus = 1

            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 0
            Common_Procedures.settings.JobWorker_PavuWidthWiseConsumption_IN_Delivery = 0
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_SeparateEntry = 0
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_Delivery_Receipt_Entry = 0
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 0

            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1489" Then '-----K V P WEAVES (ANNUR)  OR  K.V.P WEAVES (ANNUR)    OR  KVP WEAVES (ANNUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.AutoLoomStatus = 1

            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 0
            Common_Procedures.settings.JobWorker_PavuWidthWiseConsumption_IN_Delivery = 0
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_SeparateEntry = 0
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_Delivery_Receipt_Entry = 0
            Common_Procedures.settings.JOBWORKENTRY_Status = 0
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 0

            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500 '0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1490" Then '---- LAKSHMI SARASWATHI EXPORTS (THIRUCHENCODE)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "NAMAKKAL"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 0
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.Negative_Stock_Restriction_for_Yarn_Stock = 1
            Common_Procedures.settings.Negative_Stock_Restriction_for_Pavu_Stock = 0 '1
            Common_Procedures.settings.Negative_Stock_Restriction_for_Cloth_Stock = 1
            Common_Procedures.settings.Yarn_Negative_Stock_Restriction_in_MillWise_for_Godown = 1
            Common_Procedures.settings.Yarn_Negative_Stock_Restriction_in_MillWise_for_Sizing = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

            Common_Procedures.settings.FabricProcessing_Entries_Status = 1

            Common_Procedures.settings.Hide_COLOUR_DELIVERY_In_Processing_Transactions = False
            Common_Procedures.settings.Hide_Qty_QtyMtr_In_Processing_Transactions = True
            Common_Procedures.settings.Hide_Weight_Processing_Transactions = True
            Common_Procedures.settings.Show_Folding_In_Weight_Processing_Transactions = False ' True


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1491" Then '---- JAYAMAHESH TEX (KARUMATHAMPATTI - SEGUDANTAKLI)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1494" Then '---- DHARA TEX (TIRUPUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.Bobin_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.Bobin_Production_Entries_Status = 1
            Common_Procedures.settings.Weaver_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1495" Then '---- RAJALAKSHMI SPINNING MILLSS (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Textile_Trading_Yarn_Entries_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 300
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 300

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1497" Then '---- SRI S.N TEXTILE(MANGALAM-VELAYUTHAMPALAYAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1498" Then '---- SRI VISHNU TEX (somanur)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.Textile_Trading_Yarn_Cloth_Entries_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1522" Then '---- BAVANA TEXTILES (somanur)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1526" Then '---- VADIVEL TEXTILES (KARUVALUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1530" Then '---- RAJA MOHAN COTTON MILLS (ERODE)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "ERODE"
            Common_Procedures.settings.Textile_Trading_Yarn_Cloth_Entries_Status = 1
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.FabricProcessing_Entries_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 3500 '2500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 3500 '2500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1512" Then '---- SRI SUBRAMANIA TEX(PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Textile_Trading_Yarn_Cloth_Entries_Status = 1
            'Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1513" Then '---- NIKHIL TEXTILES   -  (  SRI GRISHMA ENTERPRISES ) (COIMBATORE - NEELAMBUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Textile_Trading_Yarn_Cloth_Entries_Status = 1
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1514" Then '---- SRI BAGYALAKSHMI TEX(SAMALAPURAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Textile_Trading_Yarn_Cloth_Entries_Status = 1
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1516" Then '---- P S ENTERPRISES (KANPUR)

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "KANPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 0
            Common_Procedures.settings.STORESENTRY_Status = 0
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-1"
            Common_Procedures.settings.FabricProcessing_Entries_Status = 1
            Common_Procedures.settings.Sewing_Entries_Status = 1
            Common_Procedures.settings.YarnProcessing_Entries_Status = 0

            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1

            Common_Procedures.settings.FabricProcessing_Entries_Status = 1
            Common_Procedures.settings.Multi_Godown_Status = 1

            Common_Procedures.settings.Continuous_Fabric_Lot_No_for_Purchase_Weaver = 1
            Common_Procedures.settings.CompanyWise_User_Rights = True

            Common_Procedures.settings.Hide_COLOUR_DELIVERY_In_Processing_Transactions = False
            Common_Procedures.settings.Hide_Qty_QtyMtr_In_Processing_Transactions = True
            Common_Procedures.settings.Hide_Weight_Processing_Transactions = True
            Common_Procedures.settings.Show_Folding_In_Weight_Processing_Transactions = True

            Common_Procedures.settings.Show_Sizing_JobCard_Entry_Status = 0


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1517" Then '-----GURU KARUNA TEXTILES (GOBI)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "ERODE"
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.AutoLoomStatus = 1

            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 0
            Common_Procedures.settings.JobWorker_PavuWidthWiseConsumption_IN_Delivery = 0
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_SeparateEntry = 0
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_Delivery_Receipt_Entry = 0
            Common_Procedures.settings.JOBWORKENTRY_Status = 0
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 0

            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1520" Then '----- SRI RAINBOW COTTON FABRIC (KARUR)

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "KARUR"
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.AutoLoomStatus = 1

            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 0
            Common_Procedures.settings.JobWorker_PavuWidthWiseConsumption_IN_Delivery = 0
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_SeparateEntry = 0
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_Delivery_Receipt_Entry = 0
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 0

            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"

            Common_Procedures.settings.Show_Sizing_JobCard_Entry_Status = 1
            Common_Procedures.settings.Show_Weaver_JobCard_Entry_STATUS = 1
            Common_Procedures.settings.Multi_Godown_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1530" Then '---- RAJA MOHAN COTTON MILLS (ERODE)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "ERODE"
            Common_Procedures.settings.Textile_Trading_Yarn_Cloth_Entries_Status = 1
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.FabricProcessing_Entries_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 2500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 2500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1539" Then '---- ASIAN ASSOCIATES (COIMBATORE)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Textile_Trading_Cloth_Entries_Status = 1
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500 '1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500 '1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1542" Then '---- G M TEX (THEKKALUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Textile_Trading_Yarn_Cloth_Entries_Status = 1
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1544" Then '---- SRI SRINIVASA TEXTILES (PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "PALLADAM"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 0
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 0
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "DOFF NO"
            Common_Procedures.settings.Show_Modulewise_Entrance = 1
            Common_Procedures.settings.Beam_WidthWise_Delivery_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1000
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

            ' '------------- MYTHRA TEXTILE -  changed the settings for demo purpose only with SRINIVAS SETTINGS
            ' Common_Procedures.settings.Cloth_WarpConsumption_Multiple_EndsCount_Status = 1
            ' Common_Procedures.settings.Cloth_WeftConsumption_Multiple_WeftCount_Status = 1
            ' '------------- END

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1546" Then '---- PREETHI TEX (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.Bobin_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.Bobin_Production_Entries_Status = 1
            Common_Procedures.settings.Weaver_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1547" Then '---- SHREE SVS FABRICS(KARUMATHAMPATTI)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1000

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1549" Then '---- GIRI  FABRICS (VAGARAYAMPALAYAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.Bobin_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.Bobin_Production_Entries_Status = 1
            Common_Procedures.settings.Weaver_Zari_Kuri_Entries_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 0

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1554" Then '----SHREE VEL SIZING (PALLADAM) (WEAVING DIVISION)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.Doffing_EntryFormat_Simple_OR_Detailed = 1


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1558" Then '---- SOTEXPA QUALIDIS TEXTILE (SULUR)

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.InvoicePrint_Format = "FORMAT-1"

            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = ""
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1

            Common_Procedures.settings.FabricProcessing_Entries_Status = 1
            Common_Procedures.settings.Sewing_Entries_Status = 1
            Common_Procedures.settings.YarnProcessing_Entries_Status = 1

            Common_Procedures.settings.PreviousEntryDate_ByDefault = 1

            Common_Procedures.settings.Cloth_WarpConsumption_Multiple_EndsCount_Status = 1
            Common_Procedures.settings.Cloth_WeftConsumption_Multiple_WeftCount_Status = 1
            Common_Procedures.settings.Pavu_Stock_Maintenance_in_Weight_Status = 1

            Common_Procedures.settings.Hide_COLOUR_DELIVERY_In_Processing_Transactions = True
            Common_Procedures.settings.Hide_Qty_QtyMtr_In_Processing_Transactions = True
            Common_Procedures.settings.Hide_Weight_Processing_Transactions = False
            Common_Procedures.settings.Show_Folding_In_Weight_Processing_Transactions = False

            Common_Procedures.settings.Show_Sales_OrderNumber_in_ALLEntry_Status = 1
            Common_Procedures.settings.Sales_OrderNumber_compulsory_in_ALLEntry_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1559" Then '---- ( VINOTH TEXTILE & GOWRI MILLS )

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            'Common_Procedures.settings.InvoicePrint_Format = "FORMAT-1"
            'Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1569" Then '---- SARATHY EXPORT FABRICS (PALLADAM)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1574" Then '---- VASSA TEXTILE MILLS PRIVATE LIMITED (PERUNDURAI)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "ROLL NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 0 ' 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1578" Then '---- AMARNATH MILLS (ERODE)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "ERODE"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1582" Then '----  SREEMATHI TEX
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 600 '500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1583" Then '--------------  FINECRAFT LENINS ( GK TEX  ) 

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.Textile_Trading_Yarn_Cloth_Entries_Status = 1
            'Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1587" Then '--------------- SARVESWARA TEXTILES
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "ROLL NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1589" Then '--------------- SRI VELAVA TEX

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500  ' --- ( 2 GSTIN  )

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1592" Then '----- LAKSHANA SHREE TEX (POOMALAR)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "1,2,3"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 0
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 0 '1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500 '200


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1594" Then '---- ANGATHAL TEXTILES(ARASUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "Coimbatore"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"
            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1608" Then '---- SAMANTH TEXTILES (SOMANUR)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1
            Common_Procedures.settings.JobWorker_Yarn_to_Fabric_Conversion_Status = 1
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "PIECE NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_OR_RollNo_Text = "Pcs Sub.No"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "A,B,C"
            Common_Procedures.settings.Printing_Show_PrintDialogue = 0
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.PAYROLLENTRY_Status = 1
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.Cloth_sales_yarn_purchase_Return_ContinousNo_Status = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.Cloth_WeftConsumption_Multiple_WeftCount_Status = 1
            Common_Procedures.settings.Cloth_WarpConsumption_Multiple_EndsCount_Status = 0

            Common_Procedures.settings.EmptyBeam_StockMaintenance_WidthWise_VendorWise = 1
            Common_Procedures.settings.Beam_WidthWise_Delivery_Status = 1

            Common_Procedures.settings.NegativeStock_Restriction = 1
            Common_Procedures.settings.Negative_Stock_Restriction_for_Yarn_Stock = 1
            Common_Procedures.settings.Negative_Stock_Restriction_for_Pavu_Stock = 1
            Common_Procedures.settings.Negative_Stock_Restriction_for_Cloth_Stock = 0 '1
            Common_Procedures.settings.Yarn_Negative_Stock_Restriction_in_MillWise_for_Godown = 1
            Common_Procedures.settings.Yarn_Negative_Stock_Restriction_in_MillWise_for_Sizing = 0

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 1500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 1500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1612" Then '---- ISHANVI TEX (ERODE)
            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "ERODE"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 1

            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "LOT NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1

            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 1
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_Delivery_Receipt_Entry = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1613" Then '---- A.P.A TEXTILE 
            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "Coimbatore"
            'Common_Procedures.settings.AutoLoomStatus = 1

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1614" Then '---- SUPREME TEXTILES

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.STORESENTRY_Status = 1
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.ClothReceipt_LotNo_OR_RollNo_Text = "ROLL NO"
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"
            Common_Procedures.settings.Cloth_Yarn_General_Sales_Invoice_ContinousNo_Status = 1
            Common_Procedures.settings.AutoLoom_PavuWidthWiseConsumption_IN_Delivery = 1
            Common_Procedures.settings.AutoLoom_Pavu_CrimpMeters_Consumption_Stock_Posting_In_Delivery_Receipt_Entry = 1


            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 500
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500


        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1619" Then '---- SOUTHERN HANDLOOM - ( ANDHRA PRADESH )

            Common_Procedures.settings.SoftWareName = "TEXTILE & JOBWORK"
            Common_Procedures.settings.Jurisdiction = "CHITTOOR"
            Common_Procedures.settings.AutoLoomStatus = 1
            Common_Procedures.settings.JOBWORKENTRY_Status = 1
            Common_Procedures.settings.JobWorker_Pavu_Yarn_Stock_Posting_IN_Production = 0
            Common_Procedures.settings.Printing_Show_PrintDialogue = 1
            Common_Procedures.settings.OnSave_MoveTo_NewEntry_Status = 1
            Common_Procedures.settings.ClothReceipt_PieceNo_Concept = "CONTINUOUS NO"
            Common_Procedures.settings.STORESENTRY_Status = 0
            Common_Procedures.settings.EntrySelection_Combine_AllCompany = 1
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1
            Common_Procedures.settings.FabricProcessing_Entries_Status = 1

            Common_Procedures.settings.Hide_COLOUR_DELIVERY_In_Processing_Transactions = False
            Common_Procedures.settings.Hide_Qty_QtyMtr_In_Processing_Transactions = True
            Common_Procedures.settings.Hide_Weight_Processing_Transactions = True
            Common_Procedures.settings.Show_Folding_In_Weight_Processing_Transactions = False ' True

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1625" Then '---- TMD AUTOMATION

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "Coimbatore"
            Common_Procedures.settings.Weaver_YarnStock_InThiri_Status = 1

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 100

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1628" Then '---- SG GROUPS 

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "COIMBATORE"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1630" Then '---- TIRUPATHI TEXTILE MILLS  

            Common_Procedures.settings.SoftWareName = "TEXTILE"
            Common_Procedures.settings.Jurisdiction = "TIRUPUR"

            Common_Procedures.settings.EInvoice_API_TotalCredits_Per_Year = 0
            Common_Procedures.settings.EWayBill_API_TotalCredits_Per_Year = 500

        End If

    End Sub

    Public Shared Sub get_TotalSales_Value_of_Party(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCompany_ID As Integer, ByVal vFinYr As String, vPk_Condition As String, vNewCode As String, ByVal vLedger_ID As Integer, ByVal vOrdbyNo As String, ByRef dtp_InvoiceDate As DateTimePicker, ByRef lbl_TotalSales_Amount_Current_Year As Label, ByRef lbl_TotalSales_Amount_Previous_Year As Label, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing)
        Dim cmd As New SqlClient.SqlCommand
        Dim da As New SqlClient.SqlDataAdapter
        Dim dt1 As New DataTable
        Dim TtSalAmt_CurrYr As String = 0
        Dim TtSalAmt_PrevYr As String = 0
        Dim GpCd As String = ""
        Dim Datcondt As String = ""
        Dim n As Integer = 0
        Dim I As Integer = 0
        Dim vPrevYrCode As String = ""
        Dim OpYrCode As String = ""
        Dim YrCode As String = ""
        Dim vFIRST_YrCode As String = ""


        Try

            lbl_TotalSales_Amount_Current_Year.Text = "0.00"
            lbl_TotalSales_Amount_Previous_Year.Text = "0.00"

            '-----------TOTAL SALES

            cmd.Connection = Cn1
            If IsNothing(sqltr) = False Then
                cmd.Transaction = sqltr
            End If

            cmd.Parameters.Clear()
            cmd.Parameters.AddWithValue("@entrydate", dtp_InvoiceDate.Value.Date)


            OpYrCode = Microsoft.VisualBasic.Left(Trim(Common_Procedures.FnRange), 4)
            OpYrCode = Trim(Mid(Val(OpYrCode) - 1, 3, 2)) & "-" & Trim(Microsoft.VisualBasic.Right(OpYrCode, 2))

            YrCode = Microsoft.VisualBasic.Left(Trim(Common_Procedures.FnRange), 4)
            vFIRST_YrCode = Trim(Microsoft.VisualBasic.Right(YrCode, 2)) & "-" & Trim(Mid(Val(YrCode) + 1, 3, 2))

            TtSalAmt_CurrYr = 0

            If vLedger_ID <> 0 Then

                cmd.CommandText = "select sum(abs(a.Voucher_amount)) as BalAmount from voucher_details a WHERE a.Voucher_amount < 0 and a.Company_IdNo = " & Str(Val(vCompany_ID)) & " and a.ledger_idno = " & Str(Val(vLedger_ID)) & " and a.Voucher_date <= @entrydate and a.Voucher_Code LIKE '%/" & Trim(Common_Procedures.FnYearCode) & "' and a.Voucher_Code NOT LIKE '%" & Trim(vNewCode) & "' and (a.Voucher_Code LIKE 'GCINV-%' OR a.Voucher_Code LIKE 'GSSINS-%' OR a.Voucher_Code LIKE 'GYNSL-%'  OR a.Voucher_Code LIKE 'GPVSA-%'  OR a.Voucher_Code LIKE 'GSSAL-%' OR a.Voucher_Code LIKE 'GSPTS-%' or a.Voucher_Code LIKE 'GYPSL-%' or a.Voucher_Code LIKE 'GSICI-%' or a.Voucher_Code LIKE 'GSALE-%' or a.Voucher_Code LIKE 'JBILL-%' ) and a.Voucher_Code NOT LIKE '" & Trim(vPk_Condition) & "%'"
                da = New SqlClient.SqlDataAdapter(cmd)
                dt1 = New DataTable
                da.Fill(dt1)
                TtSalAmt_CurrYr = 0
                If dt1.Rows.Count > 0 Then
                    If IsDBNull(dt1.Rows(0)(0).ToString) = False Then
                        TtSalAmt_CurrYr = Val(dt1.Rows(0).Item("BalAmount").ToString)
                    End If
                End If
                dt1.Clear()

                cmd.CommandText = "select sum(abs(a.Voucher_amount)) as BalAmount from voucher_details a WHERE a.Voucher_amount < 0 and a.Company_IdNo = " & Str(Val(vCompany_ID)) & " and a.ledger_idno = " & Str(Val(vLedger_ID)) & " and a.Voucher_Code LIKE '%/" & Trim(Common_Procedures.FnYearCode) & "' and a.Voucher_Code NOT LIKE '%" & Trim(vNewCode) & "' and a.Voucher_Code LIKE '" & Trim(vPk_Condition) & "%' and (a.voucher_date < @entrydate or ( a.voucher_date = @entrydate and a.for_orderby < " & Str(Format(Val(vOrdbyNo), "########0.00")) & ")  ) "
                da = New SqlClient.SqlDataAdapter(cmd)
                dt1 = New DataTable
                da.Fill(dt1)
                If dt1.Rows.Count > 0 Then
                    If IsDBNull(dt1.Rows(0)(0).ToString) = False Then
                        TtSalAmt_CurrYr = Val(TtSalAmt_CurrYr) + Val(dt1.Rows(0).Item("BalAmount").ToString)
                    End If
                End If
                dt1.Clear()

                cmd.CommandText = "select Sales_Value1 from Opening_Ledger_SalesValue_head a Where a.Company_IdNo = " & Str(Val(vCompany_ID)) & " and a.Ledger_IdNo = " & Str(Val(vLedger_ID)) & " and a.YearCode1 = '" & Trim(Common_Procedures.FnYearCode) & "'"
                da = New SqlClient.SqlDataAdapter(cmd)
                dt1 = New DataTable
                da.Fill(dt1)
                If dt1.Rows.Count > 0 Then
                    If IsDBNull(dt1.Rows(0)(0).ToString) = False Then
                        TtSalAmt_CurrYr = Val(TtSalAmt_CurrYr) + Val(dt1.Rows(0)(0).ToString)
                    End If
                End If
                dt1.Clear()

                cmd.CommandText = "select Sales_Value2 from Opening_Ledger_SalesValue_head a Where a.Company_IdNo = " & Str(Val(vCompany_ID)) & " and a.Ledger_IdNo = " & Str(Val(vLedger_ID)) & " and a.YearCode2 = '" & Trim(Common_Procedures.FnYearCode) & "'"
                da = New SqlClient.SqlDataAdapter(cmd)
                dt1 = New DataTable
                da.Fill(dt1)
                If dt1.Rows.Count > 0 Then
                    If IsDBNull(dt1.Rows(0)(0).ToString) = False Then
                        TtSalAmt_CurrYr = Val(TtSalAmt_CurrYr) + Val(dt1.Rows(0)(0).ToString)
                    End If
                End If
                dt1.Clear()


                lbl_TotalSales_Amount_Current_Year.Text = Trim(Common_Procedures.Currency_Format(Math.Abs(Val(TtSalAmt_CurrYr))))

                If Common_Procedures.settings.Invoice_for_TCS_Calculation_Dont_Consider_Previous_Year_Sales = 1 Then

                    lbl_TotalSales_Amount_Previous_Year.Text = "0.00"
                    lbl_TotalSales_Amount_Previous_Year.Visible = False

                Else

                    vPrevYrCode = Microsoft.VisualBasic.Left(Trim(Common_Procedures.FnYearCode), 2)
                    vPrevYrCode = Trim(Format(Val(vPrevYrCode) - 1, "00")) & "-" & Trim(Format(Val(vPrevYrCode), "00"))

                    TtSalAmt_PrevYr = 0

                    cmd.CommandText = "select sum(abs(a.Voucher_amount)) as BalAmount from voucher_details a WHERE a.Voucher_amount < 0 and a.Company_IdNo = " & Str(Val(vCompany_ID)) & " and a.ledger_idno = " & Str(Val(vLedger_ID)) & " and a.Voucher_date <= @entrydate and a.Voucher_Code LIKE '%/" & Trim(vPrevYrCode) & "' and (a.Voucher_Code LIKE 'GCINV-%' OR a.Voucher_Code LIKE 'GSSINS-%' OR a.Voucher_Code LIKE 'GYNSL-%'  OR a.Voucher_Code LIKE 'GPVSA-%'  OR a.Voucher_Code LIKE 'GSSAL-%' OR a.Voucher_Code LIKE 'GSPTS-%' OR a.Voucher_Code LIKE 'GYPSL-%' or a.Voucher_Code LIKE 'GSICI-%' or a.Voucher_Code LIKE 'GSALE-%' or a.Voucher_Code LIKE 'JBILL-%') "
                    da = New SqlClient.SqlDataAdapter(cmd)
                    dt1 = New DataTable
                    da.Fill(dt1)
                    If dt1.Rows.Count > 0 Then
                        If IsDBNull(dt1.Rows(0)(0).ToString) = False Then
                            TtSalAmt_PrevYr = Val(dt1.Rows(0).Item("BalAmount").ToString)
                        End If
                    End If
                    dt1.Clear()

                    cmd.CommandText = "select Sales_Value1 from Opening_Ledger_SalesValue_head a Where a.Company_IdNo = " & Str(Val(vCompany_ID)) & " and a.Ledger_IdNo = " & Str(Val(vLedger_ID)) & " and a.YearCode1 = '" & Trim(vPrevYrCode) & "'"
                    da = New SqlClient.SqlDataAdapter(cmd)
                    dt1 = New DataTable
                    da.Fill(dt1)
                    If dt1.Rows.Count > 0 Then
                        If IsDBNull(dt1.Rows(0)(0).ToString) = False Then
                            TtSalAmt_PrevYr = Val(TtSalAmt_PrevYr) + Val(dt1.Rows(0)(0).ToString)
                        End If
                    End If
                    dt1.Clear()

                    cmd.CommandText = "select Sales_Value2 from Opening_Ledger_SalesValue_head a Where a.Company_IdNo = " & Str(Val(vCompany_ID)) & " and a.Ledger_IdNo = " & Str(Val(vLedger_ID)) & " and a.YearCode2 = '" & Trim(vPrevYrCode) & "'"
                    da = New SqlClient.SqlDataAdapter(cmd)
                    dt1 = New DataTable
                    da.Fill(dt1)
                    If dt1.Rows.Count > 0 Then
                        If IsDBNull(dt1.Rows(0)(0).ToString) = False Then
                            TtSalAmt_PrevYr = Val(TtSalAmt_PrevYr) + Val(dt1.Rows(0)(0).ToString)
                        End If
                    End If
                    dt1.Clear()

                    lbl_TotalSales_Amount_Previous_Year.Text = Trim(Common_Procedures.Currency_Format(Math.Abs(Val(TtSalAmt_PrevYr))))
                    lbl_TotalSales_Amount_Previous_Year.Visible = True

                End If

                dt1.Dispose()
                da.Dispose()
                cmd.Dispose()

                lbl_TotalSales_Amount_Current_Year.Text = Trim(Common_Procedures.Currency_Format(Math.Abs(Val(TtSalAmt_CurrYr))))
                lbl_TotalSales_Amount_Previous_Year.Text = Trim(Common_Procedures.Currency_Format(Math.Abs(Val(TtSalAmt_PrevYr))))

            End If


        Catch ex As NullReferenceException
            '---MessageBox.Show(ex.Message, "ERROR WHILE DETAILS CELL CHANGE....", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        Catch ex As ObjectDisposedException
            '---MessageBox.Show(ex.Message, "ERROR WHILE DETAILS CELL CHANGE....", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        Catch ex As Exception
            MessageBox.Show(ex.Message, "ERROR WHILE GETTIG TOTAL SALES....", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try


    End Sub
    Public Shared Sub Default_LoomType_Updation(ByVal Cn1 As SqlClient.SqlConnection)
        Dim cmd As New SqlClient.SqlCommand

        cmd.Connection = Cn1

        cmd.CommandText = "delete from LoomType_Head where LoomType_IdNo <= 102 "
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into LoomType_Head(LoomType_IdNo , LoomType_Name , Sur_Name) Values (101 , 'POWERLOOM' , 'POWERLOOM')"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into LoomType_Head(LoomType_IdNo , LoomType_Name , Sur_Name) Values (102 , 'AUTOLOOM' , 'AUTOLOOM')"
        cmd.ExecuteNonQuery()

    End Sub

    Public Shared Sub Default_SoftwareModules_Updation(ByVal Cn1 As SqlClient.SqlConnection)
        Dim cmd As New SqlClient.SqlCommand

        cmd.Connection = Cn1

        cmd.CommandText = "delete from Software_Modules_Head where Software_Modules_IdNo < 100 "
        cmd.ExecuteNonQuery()


        'Public Enum SoftwareTypes As Integer
        '    Textile_Software = 1
        '    Sizing_Software = 2
        '    OE_Software = 3
        '    PayRoll_Software = 4
        '    Stores_Software = 5
        '    Billing_Software = 6
        'End Enum

        cmd.CommandText = "Insert into Software_Modules_Head(Software_Modules_IdNo , Software_Modules_Name ) Values ( 0 , '' )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Software_Modules_Head(Software_Modules_IdNo , Software_Modules_Name ) Values ( " & Str(Val(Common_Procedures.SoftwareTypes.Textile_Software)) & " , 'TEXTILE' )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Software_Modules_Head(Software_Modules_IdNo , Software_Modules_Name ) Values ( " & Str(Val(Common_Procedures.SoftwareTypes.Sizing_Software)) & " ,  'SIZING' )"
        cmd.ExecuteNonQuery()
        If Trim(LCase(Common_Procedures.settings.CustomerCode)) = "1087" Then
            cmd.CommandText = "Insert into Software_Modules_Head(Software_Modules_IdNo , Software_Modules_Name ) Values ( " & Str(Val(Common_Procedures.SoftwareTypes.OE_Software)) & " ,       'OE' )"
            cmd.ExecuteNonQuery()
        End If
        cmd.CommandText = "Insert into Software_Modules_Head(Software_Modules_IdNo , Software_Modules_Name ) Values ( " & Str(Val(Common_Procedures.SoftwareTypes.PayRoll_Software)) & " , 'PAYROLL' )"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into Software_Modules_Head(Software_Modules_IdNo , Software_Modules_Name ) Values ( " & Str(Val(Common_Procedures.SoftwareTypes.Stores_Software)) & " , 'STORES' )"
        cmd.ExecuteNonQuery()
        If Trim(LCase(Common_Procedures.settings.CustomerCode)) = "1186" Then
            cmd.CommandText = "Insert into Software_Modules_Head(Software_Modules_IdNo , Software_Modules_Name ) Values ( " & Str(Val(Common_Procedures.SoftwareTypes.Billing_Software)) & " , 'BILLING' )"
            cmd.ExecuteNonQuery()
        End If
        cmd.CommandText = "Insert into Software_Modules_Head(Software_Modules_IdNo , Software_Modules_Name ) Values ( " & Str(Val(Common_Procedures.SoftwareTypes.Accounts_Software)) & " , 'ACCOUNTS' )"
        cmd.ExecuteNonQuery()

    End Sub

    Public Shared Sub Printing_PackingSlip_Format_1391(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByRef prn_DetDt As DataTable, ByVal prn_DetMxIndx As Integer, ByRef prn_DetAr1(,) As String, ByRef prn_PageNo As Integer, ByRef prn_Count As Integer, ByRef prn_HdIndx As Integer, ByRef prn_DetIndx As Integer, prn_NoofBmDets As Integer, ByVal vWeight_Column_Status As Integer, Packing_SlipNo As String, ClothSales_Inv_No As String, ClothSales_Inv_Date As String, PartyName As String, PartyCityName As String, DeliveryTo_Name As String, Cloth_name As String, Pack_Type_Name As String, Tot_Pcs As String, Tot_Mtrs As String, Tot_Wgt As String, Vehicle_No As String, Fold As String, Optional vPACKINGSLIPDATE As String = "")
        Dim pFont As Font
        Dim ps As Printing.PaperSize
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim I As Integer
        Dim NoofItems_PerPage As Integer, NoofDets As Integer
        Dim TxtHgt As Single
        Dim PpSzSTS As Boolean = False
        Dim LnAr(15) As Single, ClAr(15) As Single
        Dim CurY As Single

        'Dim prn_NoofBmDets As Integer
        Dim prn_Totalweight_1 As String = ""
        Dim prn_Totalweight_2 As String = ""
        Dim prn_Totalmeter_1 As String = ""
        Dim prn_Totalmeter_2 As String = ""



        prn_NoofBmDets = 0
        prn_Totalmeter_1 = 0
        prn_Totalmeter_2 = 0
        prn_Totalweight_1 = 0
        prn_Totalweight_2 = 0



        For I = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(I).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(I)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                e.PageSettings.PaperSize = ps
                Exit For
            End If
        Next


        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 30
            .Right = 30
            .Top = 30
            .Bottom = 30
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        pFont = New Font("Calibri", 11, FontStyle.Regular)

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With

        If PrintDocument1.DefaultPageSettings.Landscape = True Then
            With PrintDocument1.DefaultPageSettings.PaperSize
                PrintWidth = .Height - TMargin - BMargin
                PrintHeight = .Width - RMargin - LMargin
                PageWidth = .Height - TMargin
                PageHeight = .Width - RMargin
            End With
        End If

        NoofItems_PerPage = 32

        Erase LnAr
        Erase ClAr

        'prn_DetIndx = 0

        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        ClAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        If Val(vWeight_Column_Status) = 1 Then
            ClAr(1) = Val(50) : ClAr(2) = 85 : ClAr(3) = 0 : ClAr(4) = 85 : ClAr(5) = 85 : ClAr(6) = 85 : ClAr(7) = 50 : ClAr(8) = 85 : ClAr(9) = 0 : ClAr(10) = 85 : ClAr(11) = 85
            ClAr(12) = PageWidth - (LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11))

        Else
            ClAr(1) = Val(65) : ClAr(2) = 150 : ClAr(3) = 0 : ClAr(4) = 150 : ClAr(5) = 0 : ClAr(6) = 0 : ClAr(7) = 65 : ClAr(8) = 150 : ClAr(9) = 0 : ClAr(10) = 150 : ClAr(11) = 0
            ClAr(12) = 0

        End If



        TxtHgt = 17.5

        'EntryCode = Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_InvNo.Text) & "/" & Trim(Common_Procedures.FnYearCode)

        Try

            If prn_HdDt.Rows.Count > 0 Then

                Printing_PackingSlip_Format_1391_PageHeader(PrintDocument1, e, prn_HdDt, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, prn_PageNo, NoofItems_PerPage, CurY, LnAr, ClAr, Packing_SlipNo, ClothSales_Inv_No, ClothSales_Inv_Date, PartyName, PartyCityName, DeliveryTo_Name, Cloth_name, Pack_Type_Name, Fold, vPACKINGSLIPDATE)

                NoofDets = 0

                CurY = CurY - 10

                If prn_DetMxIndx > 0 Then

                    Do While prn_DetIndx <= prn_DetMxIndx

                        If NoofDets >= NoofItems_PerPage Then

                            prn_DetIndx = prn_DetIndx + NoofItems_PerPage

                            If prn_DetIndx < prn_DetMxIndx Then
                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, "Continued....", PageWidth - 10, CurY, 1, 0, pFont)

                                NoofDets = NoofDets + 1

                                Printing_PackingSlip_Format_1391_PageFooter(PrintDocument1, e, prn_HdDt, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClAr, NoofDets, False, prn_Totalmeter_1, prn_Totalmeter_2, prn_Totalweight_1, prn_Totalweight_2, Pack_Type_Name, Tot_Pcs, Tot_Mtrs, Tot_Wgt, Vehicle_No, Fold)

                                e.HasMorePages = True
                            Else


                                Printing_PackingSlip_Format_1391_PageFooter(PrintDocument1, e, prn_HdDt, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClAr, NoofDets, True, prn_Totalmeter_1, prn_Totalmeter_2, prn_Totalweight_1, prn_Totalweight_2, Pack_Type_Name, Tot_Pcs, Tot_Mtrs, Tot_Wgt, Vehicle_No, Fold)

                                e.HasMorePages = False
                            End If

                            Return

                        End If

                        CurY = CurY + TxtHgt

                        If Val(ClAr(5)) <> 0 Then

                            If Val(prn_DetAr1(prn_DetIndx, 4)) <> 0 Then

                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx, 1)), LMargin + 10, CurY, 0, 0, pFont) 'pcs_no

                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx, 3)), LMargin + ClAr(1) + 10, CurY, 0, 0, pFont)
                                'If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1438" Then
                                '    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx, 3)), LMargin + ClAr(1) + 10, CurY, 0, 0, pFont)
                                'Else
                                '    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx, 2)), LMargin + ClAr(1) + 10, CurY, 0, 0, pFont)
                                'End If

                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx, 4)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + 10, CurY, 0, 0, pFont)


                                If Val(ClAr(5)) <> 0 Then
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx, 5)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + 10, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx, 6)), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + 10, CurY, 0, 0, pFont)

                                End If

                                prn_NoofBmDets = prn_NoofBmDets + 1
                                prn_Totalmeter_1 = Val(prn_Totalmeter_1) + Val(prn_DetAr1(prn_DetIndx, 4))

                            End If

                            If Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 4)) <> 0 Then


                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 1)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + 10, CurY, 0, 0, pFont) 'pcs_no

                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 3)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + 10, CurY, 0, 0, pFont)
                                'If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1438" Then
                                '    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 3)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + 10, CurY, 0, 0, pFont)
                                'Else
                                '    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 2)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + 10, CurY, 0, 0, pFont)
                                'End If

                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 4)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + 10, CurY, 0, 0, pFont)


                                If Val(ClAr(11)) <> 0 Then
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 5)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + 10, CurY, 0, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 6)), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + 10, CurY, 0, 0, pFont)
                                End If

                                prn_NoofBmDets = prn_NoofBmDets + 1
                                prn_Totalmeter_2 = Val(prn_Totalmeter_2) + Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 4))

                            End If

                        Else

                            If Val(prn_DetAr1(prn_DetIndx, 4)) <> 0 Then


                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx, 1)), LMargin + 10, CurY, 0, 0, pFont) 'pcs_no

                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx, 3)), LMargin + ClAr(1) + 50, CurY, 2, 0, pFont)
                                'If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1438" Then
                                '    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx, 3)), LMargin + ClAr(1) + 50, CurY, 2, 0, pFont)
                                'Else
                                '    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx, 2)), LMargin + ClAr(1) + 50, CurY, 2, 0, pFont)
                                'End If


                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx, 4)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + 50, CurY, 2, 0, pFont)


                                If Val(ClAr(5)) <> 0 Then
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx, 5)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + 50, CurY, 2, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx, 6)), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + 50, CurY, 2, 0, pFont)

                                End If

                                prn_NoofBmDets = prn_NoofBmDets + 1
                                prn_Totalmeter_1 = Val(prn_Totalmeter_1) + Val(prn_DetAr1(prn_DetIndx, 4))


                            End If

                            If Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 4)) <> 0 Then


                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 1)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + 10, CurY, 0, 0, pFont) 'pcs_no

                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 3)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + 50, CurY, 2, 0, pFont)
                                'If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1438" Then
                                '    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 3)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + 50, CurY, 2, 0, pFont)
                                'Else
                                '    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 2)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + 50, CurY, 2, 0, pFont)
                                'End If


                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 4)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + 50, CurY, 50, 0, pFont)


                                If Val(ClAr(11)) <> 0 Then
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 5)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + 50, CurY, 2, 0, pFont)
                                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 6)), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + 50, CurY, 2, 0, pFont)
                                End If

                                prn_NoofBmDets = prn_NoofBmDets + 1
                                prn_Totalmeter_2 = Val(prn_Totalmeter_2) + Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 4))

                            End If
                        End If

                        NoofDets = NoofDets + 1

                        prn_NoofBmDets = prn_NoofBmDets + 1
                        prn_DetIndx = prn_DetIndx + 1
                    Loop

                End If

                Printing_PackingSlip_Format_1391_PageFooter(PrintDocument1, e, prn_HdDt, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClAr, NoofDets, True, prn_Totalmeter_1, prn_Totalmeter_2, prn_Totalweight_1, prn_Totalweight_2, Pack_Type_Name, Tot_Pcs, Tot_Mtrs, Tot_Wgt, Vehicle_No, Fold)

            End If

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

        e.HasMorePages = False

    End Sub

    Private Shared Sub Printing_PackingSlip_Format_1391_PageHeader(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, Packing_SlipNo As String, ClothSales_Inv_No As String, ClothSales_Inv_Date As String, PartyName As String, PartyCityName As String, DeliveryTo_Name As String, Cloth_name As String, Pack_Type_Name As String, Fold As String, Optional vPACKINGSLIPDATE As String = "")
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim dt3 As New DataTable
        Dim dt4 As New DataTable
        Dim p1Font As Font
        Dim strHeight As Single
        Dim Cmp_Add As String = ""
        Dim C1 As Single, W1, W2 As Single, S1, S2 As Single
        Dim Cmp_Name, Desc As String, Cmp_Add1 As String, Cmp_Add2 As String
        Dim Cmp_PhNo As String, Cmp_TinNo As String, Cmp_CstNo As String, Cmp_EMail As String
        Dim vCityName As String = ""



        PageNo = PageNo + 1

        CurY = TMargin + 30

        p1Font = New Font("Calibri", 15, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, "PACKING DETAILS", LMargin, CurY - TxtHgt - 5, 2, PrintWidth, p1Font)

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY
        Desc = ""
        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
        Cmp_PhNo = "" : Cmp_TinNo = "" : Cmp_CstNo = "" : Cmp_EMail = ""

        Desc = prn_HdDt.Rows(0).Item("Company_Description").ToString
        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
        Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString
        Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = "PHONE : " & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString) <> "" Then
            Cmp_TinNo = "GST NO.: " & prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
            Cmp_CstNo = "CST NO.: " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_EMail").ToString) <> "" Then
            Cmp_EMail = "MAIL ID : " & prn_HdDt.Rows(0).Item("Company_EMail").ToString
        End If

        CurY = CurY + TxtHgt
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height



        p1Font = New Font("Calibri", 18, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font)
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

        If Trim(Desc) <> "" Then
            CurY = CurY + strHeight - 1
            Common_Procedures.Print_To_PrintDocument(e, Desc, LMargin, CurY, 2, PrintWidth, pFont)
            CurY = CurY + TxtHgt - 1

        Else
            CurY = CurY + strHeight - 1

        End If



        Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1, LMargin, CurY, 2, PrintWidth, pFont)

        CurY = CurY + TxtHgt - 1
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont)
        CurY = CurY + TxtHgt - 1
        Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, pFont)
        CurY = CurY + TxtHgt - 1
        Common_Procedures.Print_To_PrintDocument(e, Cmp_TinNo, LMargin + 10, CurY, 0, 0, pFont)
        Common_Procedures.Print_To_PrintDocument(e, Cmp_EMail, LMargin, CurY, 2, PrintWidth, pFont)
        Common_Procedures.Print_To_PrintDocument(e, Cmp_CstNo, PageWidth - 10, CurY, 1, 0, pFont)

        CurY = CurY + TxtHgt + 10
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(2) = CurY

        C1 = ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6)
        W1 = e.Graphics.MeasureString("INVOICE     DATE  : ", pFont).Width
        S1 = e.Graphics.MeasureString("TO     :    ", pFont).Width
        W2 = e.Graphics.MeasureString("Despatch To   : ", pFont).Width
        S2 = e.Graphics.MeasureString("Sent Through  : ", pFont).Width





        CurY = CurY + 10
        p1Font = New Font("Calibri", 12, FontStyle.Bold)
        If Trim(PartyName) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, "TO  :  " & "M/s." & Trim(PartyName), LMargin + 10, CurY, 0, 0, p1Font)

        Else
            Common_Procedures.Print_To_PrintDocument(e, "PACKING TYPE :", LMargin + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Trim(Pack_Type_Name), LMargin + 140, CurY, 0, 0, p1Font)

        End If

        'CurY = CurY + TxtHgt
        'p1Font = New Font("Calibri", 12, FontStyle.Regular)
        'Common_Procedures.Print_To_PrintDocument(e, "PARTY NAME :", LMargin + 10, CurY, 0, 0, p1Font)
        'Common_Procedures.Print_To_PrintDocument(e, "M/s. " & PartyName, LMargin + 140, CurY, 0, 0, p1Font)

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1274" Then '---- SHRI ADHIYAMAN WEAVING MILLS (P) LIMITED (SOMANUR)
            If Trim(Packing_SlipNo) <> "" Then
                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1391" Then '---- SAKTHI DHARAN TEXTILES (THIRUCENGODU)
                    Common_Procedures.Print_To_PrintDocument(e, "DC NO", LMargin + C1 + 10, CurY, 0, 0, pFont)
                Else
                    Common_Procedures.Print_To_PrintDocument(e, "PACKING LIST No.", LMargin + C1 + 10, CurY, 0, 0, pFont)
                End If

                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(Packing_SlipNo), LMargin + C1 + W1 + 30, CurY, 0, 0, p1Font)
            End If
        End If



        CurY = CurY + TxtHgt
        If Trim(PartyCityName) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, " " & PartyCityName, LMargin + S1 + 20, CurY, 0, 0, pFont)
        End If


        p1Font = New Font("Calibri", 12, FontStyle.Bold)
        If Trim(ClothSales_Inv_No) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, "INVOICE NO", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Trim(ClothSales_Inv_No), LMargin + C1 + W1 + 30, CurY, 0, 0, p1Font)
        End If


        CurY = CurY + TxtHgt

        p1Font = New Font("Calibri", 14, FontStyle.Bold)
        If Trim(ClothSales_Inv_Date) <> "" Then
            If Trim(ClothSales_Inv_No) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, "INVOICE DATE", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Else
                Common_Procedures.Print_To_PrintDocument(e, "DC DATE", LMargin + C1 + 10, CurY, 0, 0, pFont)
            End If

            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Trim(ClothSales_Inv_Date), LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)
        ElseIf Trim(vPACKINGSLIPDATE) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, "PACKINGSLIP DATE", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Trim(vPACKINGSLIPDATE), LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)
        End If


        CurY = CurY + TxtHgt + 5
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        e.Graphics.DrawLine(Pens.Black, LMargin + C1, CurY, LMargin + C1, LnAr(2))

        Try

            CurY = CurY + TxtHgt
            If Trim(Cloth_name) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, "QUALITY", LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(Cloth_name), LMargin + W1 + 25, CurY, 0, 0, pFont)
            End If

            If Trim(DeliveryTo_Name) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, "DELIVERY TO", LMargin + C1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(DeliveryTo_Name), LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)
            End If

            If Val(Fold) <> 0 Then
                Common_Procedures.Print_To_PrintDocument(e, "FOLDING : " & Trim(Fold), PageWidth - 20, CurY, 1, 0, pFont)
                '      Common_Procedures.Print_To_PrintDocument(e, "FOLDING", LMargin + C1 + 10, CurY, 0, 0, pFont)
                '      Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                '      Common_Procedures.Print_To_PrintDocument(e, Trim(Fold), LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)
            End If

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(2) = CurY


            CurY = CurY + TxtHgt - 15
            LnAr(4) = CurY
            Common_Procedures.Print_To_PrintDocument(e, "S.NO", LMargin, CurY, 2, ClAr(1), pFont)
            If Trim(UCase(Pack_Type_Name)) = "ROLL" Then
                Common_Procedures.Print_To_PrintDocument(e, "ROLL NO", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            ElseIf Trim(UCase(Pack_Type_Name)) = "BUNDLE" Then
                Common_Procedures.Print_To_PrintDocument(e, "BUNDLE NO", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            Else
                Common_Procedures.Print_To_PrintDocument(e, "BALE NO", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            End If

            Common_Procedures.Print_To_PrintDocument(e, "METERS", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(4), pFont)

            If Val(ClAr(5)) <> 0 Then
                Common_Procedures.Print_To_PrintDocument(e, "NET WGT", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(5), pFont)
                Common_Procedures.Print_To_PrintDocument(e, "GRAMS /", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)
            End If

            Common_Procedures.Print_To_PrintDocument(e, "S.NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)



            If Trim(UCase(Pack_Type_Name)) = "ROLL" Then
                Common_Procedures.Print_To_PrintDocument(e, "ROLL NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            ElseIf Trim(UCase(Pack_Type_Name)) = "BUNDLE" Then
                Common_Procedures.Print_To_PrintDocument(e, "BUNDLE NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            Else
                Common_Procedures.Print_To_PrintDocument(e, "BALE NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            End If

            Common_Procedures.Print_To_PrintDocument(e, "METERS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 2, ClAr(10), pFont)

            If Val(ClAr(11)) <> 0 Then
                Common_Procedures.Print_To_PrintDocument(e, "NET WGT", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(11), pFont)
                Common_Procedures.Print_To_PrintDocument(e, "GRAMS /", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)

            End If

            CurY = CurY + 15
            If Val(ClAr(5)) <> 0 Then
                Common_Procedures.Print_To_PrintDocument(e, "MTR", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)
            End If

            If Val(ClAr(11)) <> 0 Then
                Common_Procedures.Print_To_PrintDocument(e, "MTR", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)
            End If

            CurY = CurY + TxtHgt + 5

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(3) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Shared Sub Printing_PackingSlip_Format_1391_PageFooter(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal NoofDets As Integer, ByVal is_LastPage As Boolean, prn_Totalmeter_1 As String, prn_Totalmeter_2 As String, prn_Totalweight_1 As String, prn_Totalweight_2 As String, Pack_Type_Name As String, Tot_Pcs As String, Tot_Mtrs As String, Tot_Wgt As String, Vehicle_No As String, Fold As String)
        Dim I As Integer
        Dim p1Font As Font
        Dim Bale_Roll_Nm As String




        Try

            For I = NoofDets + 1 To NoofItems_PerPage
                CurY = CurY + TxtHgt
            Next
            CurY = CurY + TxtHgt + 5

            If Val(ClAr(5)) <> 0 Then

                If Val(prn_Totalmeter_1) <> 0 Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Totalmeter_1), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) - 2, CurY, 1, 0, pFont)
                End If
                If Val(prn_Totalmeter_2) <> 0 Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Totalmeter_2), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) - 2, CurY, 1, 0, pFont)
                End If


                If Val(prn_Totalweight_1) <> 0 Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Totalweight_1), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) - 2, CurY, 1, 0, pFont)
                End If

                If Val(prn_Totalweight_2) <> 0 Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Totalweight_2), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) - 2, CurY, 1, 0, pFont)
                End If


            Else
                If Val(prn_Totalmeter_1) <> 0 Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Totalmeter_1), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + 50, CurY, 2, 0, pFont)
                End If

                If Val(prn_Totalmeter_2) <> 0 Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Totalmeter_2), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) - 50, CurY, 1, 0, pFont)
                End If


            End If
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            CurY = CurY + TxtHgt + 5



            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(5) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY, LMargin + ClAr(1), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY, LMargin + ClAr(1) + ClAr(2), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), LnAr(2))
            If Val(ClAr(5)) <> 0 Then
                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), LnAr(2))
            End If

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), LnAr(2))

            If Val(ClAr(5)) <> 0 Then
                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), LnAr(2))

                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), LnAr(2))

            End If

            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(2))


            If is_LastPage = True Then

                CurY = CurY + TxtHgt - 10


                If Trim(UCase(Pack_Type_Name)) = "BALE" Then
                    Bale_Roll_Nm = "TOTAL BALES"

                ElseIf Trim(UCase(Pack_Type_Name)) = "ROLL" Then
                    Bale_Roll_Nm = "TOTAL ROLLS"

                Else
                    Bale_Roll_Nm = "TOTAL BUNDLES"

                End If


                Common_Procedures.Print_To_PrintDocument(e, Trim(Bale_Roll_Nm) & "  :  " & Val(Tot_Pcs), LMargin + ClAr(1) + 5, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "TOTAL METERS  : " & Format(Val(Tot_Mtrs), "########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + 20, CurY, 0, 0, pFont)

                If Val(ClAr(5)) <> 0 Then
                    If Val(Tot_Wgt) <> 0 Then
                        Common_Procedures.Print_To_PrintDocument(e, "TOTAL WEIGHT  : " & Format(Val(Tot_Wgt), "########0.000"), PageWidth - 20, CurY, 1, 0, pFont)
                    End If
                End If


                If prn_HdDt.Rows(0).Item("Note").ToString <> "" Then

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
                    Common_Procedures.Print_To_PrintDocument(e, "NOTE  ", LMargin + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "  : " & Trim(prn_HdDt.Rows(0).Item("Note").ToString), LMargin + ClAr(1) + 5, CurY, 0, 0, pFont)
                End If
                CurY = CurY + TxtHgt + 5
                e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
                LnAr(6) = CurY

            End If

            CurY = CurY + TxtHgt - 10
            If Trim(Vehicle_No) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, "VEHICLE NO  : ", LMargin + ClAr(1) + 5, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(Vehicle_No), LMargin + ClAr(1) + ClAr(2) + 20, CurY, 0, 0, pFont)
            End If




            p1Font = New Font("Calibri", 12, FontStyle.Bold)

            Common_Procedures.Print_To_PrintDocument(e, "For " & Trim(prn_HdDt.Rows(0).Item("Company_Name").ToString), PageWidth - 15, CurY, 1, 0, p1Font)
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt



            Common_Procedures.Print_To_PrintDocument(e, "AUTHORISED SIGNATORY ", PageWidth - 5, CurY, 1, 0, pFont)
            CurY = CurY + TxtHgt + 10

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            e.Graphics.DrawLine(Pens.Black, LMargin, LnAr(1), LMargin, CurY)
            e.Graphics.DrawLine(Pens.Black, PageWidth, LnAr(1), PageWidth, CurY)


        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub


    Public Shared Function get_Cloth_JobWork_Delivery_MaxCode(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCompany_ID As Integer, ByVal vFinYr As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim MxId1 As String = ""
        Dim MxId2 As String = ""
        Dim MxId3 As String = ""
        Dim MxCode As String = ""

        Try

            MxId1 = Common_Procedures.get_MaxCode(Cn1, "ClothSales_Delivery_Head", "ClothSales_Delivery_Code", "For_OrderBy", "", vCompany_ID, vFinYr, sqltr)
            MxId2 = Common_Procedures.get_MaxCode(Cn1, "JobWork_Piece_Delivery_Head", "JobWork_Piece_Delivery_Code", "For_OrderBy", "", vCompany_ID, vFinYr, sqltr)
            MxId3 = Common_Procedures.get_MaxCode(Cn1, "InHouse_Piece_Delivery_Head", "InHouse_Piece_Delivery_Code", "For_OrderBy", "", vCompany_ID, vFinYr, sqltr)

            MxCode = IIf(Val(MxId1) > Val(MxId2), MxId1, MxId2)
            MxCode = IIf(Val(MxCode) > Val(MxId3), MxCode, MxId3)

            Return Trim(MxCode)

        Catch ex As Exception
            Return ""

        End Try

    End Function

    Public Shared Function Cross_Checking_PieceChecking_PackingSlip_Meters(ByVal Cn1 As SqlClient.SqlConnection, ByVal vLOTCD As String, ByRef vERRMSG As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal vpackingslipmtrs_fieldname As String = "") As Boolean
        Dim cmd1 As New SqlClient.SqlCommand
        Dim cmd2 As New SqlClient.SqlCommand
        Dim cmd3 As New SqlClient.SqlCommand
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim Dt3 As New DataTable

        vERRMSG = ""

        If Trim(vpackingslipmtrs_fieldname) = "" Then
            vpackingslipmtrs_fieldname = "Meters"
        End If

        '----retrieving details of piece checking and packingslip of given lotcode

        cmd1.Connection = Cn1
        cmd1.CommandTimeout = 1000
        If IsNothing(sqltr) = False Then
            cmd1.Transaction = sqltr
        End If

        cmd1.CommandType = CommandType.StoredProcedure
        cmd1.CommandText = "SP_CrossCheck_PcsChecking_and_PackingSlip_by_LotNo2"
        cmd1.Parameters.Clear()
        cmd1.Parameters.Add("@temptablename", SqlDbType.VarChar)
        cmd1.Parameters("@temptablename").Value = Trim(Common_Procedures.TempTable_for_CrossChecking_PcsBale1)
        cmd1.Parameters.Add("@lotcode", SqlDbType.VarChar)
        cmd1.Parameters("@lotcode").Value = Trim(vLOTCD)
        cmd1.Parameters.Add("@packingslipmtrs_fieldname", SqlDbType.VarChar)
        cmd1.Parameters("@packingslipmtrs_fieldname").Value = Trim(vpackingslipmtrs_fieldname)
        cmd1.ExecuteNonQuery()


        '----Checking for Meters difference  (by lotno, pcsno, piecetype_idno )

        cmd2.Connection = Cn1
        cmd2.CommandTimeout = 1000
        If IsNothing(sqltr) = False Then
            cmd2.Transaction = sqltr
        End If

        cmd2.CommandType = CommandType.StoredProcedure
        cmd2.CommandText = "SP_get_DiffMeters_of_CrossCheck_PcsChecking_and_PackingSlip_by_LotNo_and_PcsNo"
        cmd2.Parameters.Clear()
        cmd2.Parameters.Add("@temptablename", SqlDbType.VarChar)
        cmd2.Parameters("@temptablename").Value = Trim(Common_Procedures.TempTable_for_CrossChecking_PcsBale1)
        Da = New SqlClient.SqlDataAdapter(cmd2)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt2 = New DataTable
        Da.Fill(Dt2)
        If Dt2.Rows.Count > 0 Then
            If IsDBNull(Dt2.Rows(0)(3).ToString) = False Then
                If Val(Dt2.Rows(0)(3).ToString) <> 0 Then
                    vERRMSG = "Invalid Piece Details : Mismatch of Piece && Packing Meters for  Lot No : " & Trim(Dt2.Rows(0)(0).ToString) & "            Piece No : " & Trim(Dt2.Rows(0)(1).ToString) & Chr(13) & "PieceType : " & ClothType_IdNoToName(Cn1, Val(Dt2.Rows(0)(2).ToString), sqltr) & Chr(13) & "Meters(Diff) in PackingSlip : " & Trim(Dt2.Rows(0)(3).ToString)
                    Return False
                End If
            End If
        End If
        Dt2.Clear()


        '----Checking for Meters difference  (by lotno, pcsno, cloth_idno )

        cmd3.Connection = Cn1
        cmd3.CommandTimeout = 1000
        If IsNothing(sqltr) = False Then
            cmd3.Transaction = sqltr
        End If
        cmd3.CommandType = CommandType.StoredProcedure
        cmd3.CommandText = "SP_get_DiffMeters_of_CrossCheck_PcsChecking_and_PackingSlip_by_LotNo_and_PcsNo_and_ClothIdNo"
        cmd3.Parameters.Clear()
        cmd3.Parameters.Add("@temptablename", SqlDbType.VarChar)
        cmd3.Parameters("@temptablename").Value = Trim(Common_Procedures.TempTable_for_CrossChecking_PcsBale1)
        Da = New SqlClient.SqlDataAdapter(cmd3)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt3 = New DataTable
        Da.Fill(Dt3)
        If Dt3.Rows.Count > 0 Then
            If IsDBNull(Dt3.Rows(0)(4).ToString) = False Then
                If Val(Dt3.Rows(0)(4).ToString) <> 0 Then
                    vERRMSG = "Invalid Piece Details : Mismatch of Piece && Packing Meters for  Lot No : " & Trim(Dt3.Rows(0)(0).ToString) & "            Piece No : " & Trim(Dt3.Rows(0)(1).ToString) & Chr(13) & "Cloth Name : " & Cloth_IdNoToName(Cn1, Val(Dt3.Rows(0)(2).ToString), "", sqltr) & Chr(13) & "PieceType : " & ClothType_IdNoToName(Cn1, Val(Dt3.Rows(0)(3).ToString), sqltr) & Chr(13) & "Meters(Diff) in PackingSlip : " & Trim(Dt3.Rows(0)(4).ToString)
                    Return False
                End If
            End If
        End If
        Dt2.Clear()

        Return True

    End Function

    Public Shared Function Cross_Checking_PieceChecking_PackingSlip_Meters_1111(ByVal Cn1 As SqlClient.SqlConnection, ByVal vLOTCD As String, ByRef vERRMSG As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Boolean
        Dim cmd As New SqlClient.SqlCommand
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable

        vERRMSG = ""

        cmd.Connection = Cn1
        If IsNothing(sqltr) = False Then
            cmd.Transaction = sqltr
        End If

        cmd.CommandText = "Truncate Table " & Trim(Common_Procedures.EntryTempTable) & ""
        cmd.ExecuteNonQuery()

        '---Piece Checking
        cmd.CommandText = "Insert Into " & Trim(Common_Procedures.EntryTempTable) & "(Name1, Name2, Int1, Meters1) select Lot_Code, Piece_No, 1, Type1_Meters from Weaver_ClothReceipt_Piece_Details Where Lot_Code = '" & Trim(vLOTCD) & "' and PackingSlip_Code_Type1 <> '' and Type1_Meters <> 0"
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert Into " & Trim(Common_Procedures.EntryTempTable) & "(Name1, Name2, Int1, Meters1) select Lot_Code, Piece_No, 2, Type2_Meters from Weaver_ClothReceipt_Piece_Details Where Lot_Code = '" & Trim(vLOTCD) & "' and PackingSlip_Code_Type2 <> '' and Type2_Meters <> 0 "
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert Into " & Trim(Common_Procedures.EntryTempTable) & "(Name1, Name2, Int1, Meters1) select Lot_Code, Piece_No, 3, Type3_Meters from Weaver_ClothReceipt_Piece_Details Where Lot_Code = '" & Trim(vLOTCD) & "' and PackingSlip_Code_Type3 <> '' and Type3_Meters <> 0 "
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert Into " & Trim(Common_Procedures.EntryTempTable) & "(Name1, Name2, Int1, Meters1) select Lot_Code, Piece_No, 4, Type4_Meters from Weaver_ClothReceipt_Piece_Details Where Lot_Code = '" & Trim(vLOTCD) & "' and PackingSlip_Code_Type4 <> '' and Type4_Meters <> 0 "
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert Into " & Trim(Common_Procedures.EntryTempTable) & "(Name1, Name2, Int1, Meters1) select Lot_Code, Piece_No, 5, Type5_Meters from Weaver_ClothReceipt_Piece_Details Where Lot_Code = '" & Trim(vLOTCD) & "' and PackingSlip_Code_Type5 <> '' and Type5_Meters <> 0 "
        cmd.ExecuteNonQuery()

        '---Packing Slip
        cmd.CommandText = "Insert Into " & Trim(Common_Procedures.EntryTempTable) & "(Name1, Name2, Int1, Meters1) select Lot_Code, Pcs_No, ClothType_IdNo, -1*Meters from Packing_Slip_Details Where Lot_Code = '" & Trim(vLOTCD) & "'"
        cmd.ExecuteNonQuery()
        '---Piece Transfer
        cmd.CommandText = "Insert Into " & Trim(Common_Procedures.EntryTempTable) & "(Name1, Name2, Int1, Meters1) select Lot_Code, Pcs_No, ClothType_IdNo, -1*Meters from Piece_Transfer_Details Where Lot_Code = '" & Trim(vLOTCD) & "'"
        cmd.ExecuteNonQuery()
        '---Jobwork Piece Delivery
        cmd.CommandText = "Insert Into " & Trim(Common_Procedures.EntryTempTable) & "(Name1, Name2, Int1, Meters1) select Lot_Code, Pcs_No, ClothType_IdNo, -1*Meters from JobWork_Piece_Delivery_Details Where Lot_Code = '" & Trim(vLOTCD) & "'"
        cmd.ExecuteNonQuery()
        '---Cloth Sales Piece Delivery
        cmd.CommandText = "Insert Into " & Trim(Common_Procedures.EntryTempTable) & "(Name1, Name2, Int1, Meters1) select Lot_Code, Piece_No, PieceType_IdNo, -1*Meters from ClothSales_Delivery_Piece_Details Where Lot_Code = '" & Trim(vLOTCD) & "'"
        cmd.ExecuteNonQuery()
        '---Piece Excess/Short
        cmd.CommandText = "Insert Into " & Trim(Common_Procedures.EntryTempTable) & "(Name1, Name2, Int1, Meters1) select Lot_Code, Pcs_No, ClothType_IdNo, -1*Meters from Piece_Excess_Short_Details Where Lot_Code = '" & Trim(vLOTCD) & "'"
        cmd.ExecuteNonQuery()

        Da = New SqlClient.SqlDataAdapter("Select Name1, Name2, Int1, sum(Meters1) as ProdMtrs from " & Trim(Common_Procedures.EntryTempTable) & " Group by Name1, Name2, Int1 having sum(Meters1) <> 0", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt2 = New DataTable
        Da.Fill(Dt2)
        If Dt2.Rows.Count > 0 Then
            If IsDBNull(Dt2.Rows(0)(3).ToString) = False Then
                If Val(Dt2.Rows(0)(3).ToString) <> 0 Then
                    vERRMSG = "Invalid Piece Details : Mismatch of Piece && Bale Meters for Piece No : " & Trim(Dt2.Rows(0)(1).ToString) & Chr(13) & "Piece Meters in PackingSlip : " & Trim(Dt2.Rows(0)(3).ToString)
                    Return False
                End If
            End If
        End If
        Dt2.Clear()

        Return True

    End Function

    Public Shared Function Cross_Checking_PackingSlip_With_PieceChecking_by_PackingSlipCode(ByVal Cn1 As SqlClient.SqlConnection, ByVal vPackingSlipCode As String, ByVal vpackingslipmtrs_fieldname As String, ByVal vPCMTR_FLDNAME As String, ByRef vERRMSG As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Boolean
        Dim cmd1 As New SqlClient.SqlCommand
        Dim cmd2 As New SqlClient.SqlCommand
        Dim cmd3 As New SqlClient.SqlCommand
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Dt2 As New DataTable
        Dim Dt3 As New DataTable

        vERRMSG = ""

        '----Checking for Meters difference  (by PackingSlipCode - with packingslip head and piece checking details)

        cmd2.Connection = Cn1
        cmd2.CommandTimeout = 1000
        If IsNothing(sqltr) = False Then
            cmd2.Transaction = sqltr
        End If

        cmd2.CommandType = CommandType.StoredProcedure
        cmd2.CommandText = "SP_get_DiffMeters_of_Cross_Checking_PackingSlipHead_With_PieceCheckingDetails_by_PackingSlipCode"
        cmd2.Parameters.Clear()
        cmd2.Parameters.Add("@temptablename", SqlDbType.VarChar)
        cmd2.Parameters("@temptablename").Value = Trim(Common_Procedures.EntryTempTable)
        cmd2.Parameters.Add("@packingslipcode", SqlDbType.VarChar)
        cmd2.Parameters("@packingslipcode").Value = Trim(vPackingSlipCode)
        cmd2.Parameters.Add("@packingslipmtrs_fieldname", SqlDbType.VarChar)
        cmd2.Parameters("@packingslipmtrs_fieldname").Value = Trim(vpackingslipmtrs_fieldname)
        Da = New SqlClient.SqlDataAdapter(cmd2)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt2 = New DataTable
        Da.Fill(Dt2)
        If Dt2.Rows.Count > 0 Then
            If IsDBNull(Dt2.Rows(0)(0).ToString) = False Then
                If Val(Dt2.Rows(0)(0).ToString) <> 0 Then
                    vERRMSG = "Invalid Piece Selection : Mismatch of PackingSlip && PieceChecking Details"
                    Return False
                End If
            End If
        End If
        Dt2.Clear()


        '----Checking for Meters difference  ( - with packingslip detaiks and piece checking details  -  by PackingSlipCode , lotno, pcsno, cloth_idno )

        cmd3.Connection = Cn1
        cmd3.CommandTimeout = 1000
        If IsNothing(sqltr) = False Then
            cmd3.Transaction = sqltr
        End If

        cmd3.CommandType = CommandType.StoredProcedure
        cmd3.CommandText = "SP_get_DiffMeters_of_Cross_Checking_PackingSlipDetails_With_PieceCheckingDetails_by_PackingSlipCode_and_LotNo_PcsNo"
        cmd3.Parameters.Clear()
        cmd3.Parameters.Add("@temptablename", SqlDbType.VarChar)
        cmd3.Parameters("@temptablename").Value = Trim(Common_Procedures.EntryTempTable)
        cmd3.Parameters.Add("@packingslipcode", SqlDbType.VarChar)
        cmd3.Parameters("@packingslipcode").Value = Trim(vPackingSlipCode)
        cmd3.Parameters.Add("@packingslipmtrs_fieldname", SqlDbType.VarChar)
        cmd3.Parameters("@packingslipmtrs_fieldname").Value = Trim(vPCMTR_FLDNAME)
        Da = New SqlClient.SqlDataAdapter(cmd3)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt2 = New DataTable
        Da.Fill(Dt2)
        If Dt2.Rows.Count > 0 Then
            If IsDBNull(Dt2.Rows(0)(4).ToString) = False Then
                If Val(Dt2.Rows(0)(4).ToString) <> 0 Then
                    vERRMSG = "Invalid Piece Selection : Mismatch of Bale Details && PieceChecking Details " & Chr(13) & "Lot No : " & Trim(Dt2.Rows(0)(0).ToString) & "            Piece No : " & Trim(Dt2.Rows(0)(1).ToString)
                    Return False
                End If
            End If
        End If
        Dt2.Clear()

        Return True

    End Function

    Public Shared Function get_Beam_Delivery_MaxCode(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCompany_ID As Integer, ByVal vFinYr As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim MxId1 As String = ""
        Dim MxId2 As String = ""
        Dim MxCode As String = ""

        Try

            MxId1 = Common_Procedures.get_MaxCode(Cn1, "Empty_BeamBagCone_Delivery_Head", "Empty_BeamBagCone_Delivery_Code", "For_OrderBy", "", vCompany_ID, vFinYr, sqltr)
            'lbl_InvNo.Text = Common_Procedures.get_MaxCode(cn1, "ClothSales_Invoice_Head", "ClothSales_Invoice_Code", "For_OrderBy", "(ClothSales_Invoice_Code LIKE '" & Trim(Pk_Condition) & "%')", Val(lbl_Company.Tag), Common_Procedures.FnYearCode)

            MxId2 = Common_Procedures.get_MaxCode(Cn1, "JobWork_Empty_BeamBagCone_Delivery_Head", "JobWork_Empty_BeamBagCone_Delivery_Code", "For_OrderBy", "", vCompany_ID, vFinYr, sqltr)
            'lbl_InvoiceNo.Text = Common_Procedures.get_MaxCode(cn1, "Yarn_Sales_Head", "Yarn_Sales_Code", "For_OrderBy", "(Entry_VAT_GST_Type = 'GST')", Val(lbl_Company.Tag), Common_Procedures.FnYearCode, tr)

            MxCode = IIf(Val(MxId1) > Val(MxId2), MxId1, MxId2)

            Return Trim(MxCode)

        Catch ex As Exception
            Return ""

        End Try

    End Function


    Public Shared Sub Printing_PackingSlip_Format_1155(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByVal prn_HdMxIndx As Integer, ByVal prn_DetMxIndx As Integer, ByRef prn_HdAr(,) As String, ByRef prn_DetAr(,,) As String, ByRef prn_PageNo As Integer, ByRef prn_Count As Integer, ByRef prn_HdIndx As Integer, ByRef prn_DetIndx As Integer, ByRef vtot_wgt As Integer, ByRef vtot_pcs As Integer, ByVal lst_print As Boolean)
        Dim I As Integer, NoofDets As Integer, NoofItems_PerPage As Integer
        Dim pFont As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim ps As Printing.PaperSize
        Dim strHeight As Single = 0
        Dim PpSzSTS As Boolean = False
        Dim LM As Single = 0, TM As Single = 0
        Dim PgWt As Single = 0, PrWt As Single = 0
        Dim PgHt As Single = 0, PrHt As Single = 0





        For I = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(I).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(I)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                PrintDocument1.DefaultPageSettings.Landscape = False
                e.PageSettings.PaperSize = ps
                Exit For
            End If
        Next



        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 20 ' 40
            .Right = 50
            .Top = 1 ' 20 ' 30  '60
            .Bottom = 40
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = (.Width / 4) - RMargin - LMargin
            PrintHeight = (.Height / 4) - TMargin - BMargin
            PageWidth = (.Width / 4) - RMargin
            PageHeight = (.Height / 4) - BMargin
        End With

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        pFont = New Font("Calibri", 10, FontStyle.Regular)

        NoofItems_PerPage = 8 ' 17 ' 20 

        Erase ClArr
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = 0 : ClArr(2) = 50 : ClArr(3) = 100
        'ClArr(1) = 110 : ClArr(2) = 110 : ClArr(3) = 120

        TxtHgt = 17.75 '18.75 ' 19 ' e.Graphics.MeasureString("A", pFont).Height  ' 20

        Try

            If prn_HdDt.Rows.Count > 0 Then

                If prn_HdMxIndx > 0 Then

                    Do While prn_HdIndx <= prn_HdMxIndx



                        If prn_Count Mod 12 = 1 Then
                            LM = LMargin
                            TM = TMargin
                            PgWt = PageWidth
                            PgHt = PageHeight
                            PrWt = PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 12 = 2 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + LMargin
                            TM = TMargin
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 12 = 3 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + LMargin
                            TM = TMargin
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 12 = 4 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + LMargin
                            TM = TMargin
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 12 = 5 Then
                            LM = LMargin
                            TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 3) + (TMargin / 2) - 15
                            PgWt = PageWidth
                            PgHt = PageHeight
                            PrWt = PrintWidth
                            PrHt = PrintHeight
                        ElseIf prn_Count Mod 12 = 6 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + LMargin
                            TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 3) + +(TMargin / 2) - 15
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 12 = 7 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + LMargin
                            TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 3) + +(TMargin / 2) - 15
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PrintWidth
                            PrHt = PrintHeight
                        ElseIf prn_Count Mod 12 = 8 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + LMargin
                            TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 3) + (TMargin / 2) - 15
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + PrintWidth
                            PrHt = PrintHeight




                        ElseIf prn_Count Mod 12 = 9 Then
                            LM = LMargin
                            TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 1.5) + (TMargin / 2) - 20
                            PgWt = PageWidth
                            PgHt = PageHeight
                            PrWt = PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 12 = 10 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + LMargin
                            TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 1.5) + (TMargin / 2) - 20
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 12 = 11 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + LMargin
                            TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 1.5) + (TMargin / 2) - 20
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PrintWidth
                            PrHt = PrintHeight
                        ElseIf prn_Count Mod 12 = 0 Then
                            lst_print = True
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + LMargin
                            TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 1.5) + (TMargin / 2) - 20
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + PrintWidth
                            PrHt = PrintHeight


                        End If

                        Erase LnAr
                        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

                        Printing_PackingSlip_Format_1155_PageHeader(PrintDocument1, e, prn_HdDt, prn_HdAr, TxtHgt, pFont, LM, RMargin, TM, BMargin, PgWt, PrWt, prn_PageNo, NoofItems_PerPage, CurY, LnAr, ClArr, prn_HdIndx)
                        CurY = CurY - 10

                        NoofDets = 0
                        Do While prn_DetIndx < Val(prn_HdAr(prn_HdIndx, 3))

                            If NoofDets >= NoofItems_PerPage Then


                                CurY = CurY + TxtHgt
                                Common_Procedures.Print_To_PrintDocument(e, "Continued....", LM + ClArr(1) + ClArr(2) + ClArr(3) - 10, CurY, 1, 0, pFont)
                                NoofDets = NoofDets + 1

                                Printing_PackingSlip_Format_1155_PageFooter(PrintDocument1, e, prn_HdAr, TxtHgt, pFont, LM, RMargin, TM, BMargin, PgWt, PrWt, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_HdIndx, vtot_wgt, vtot_pcs, False, prn_Count, lst_print)



                                'prn_DetIndx = prn_DetIndx + NoofItems_PerPage

                                e.HasMorePages = True

                                prn_Count = prn_Count + 1

                                vtot_pcs = 0
                                vtot_wgt = 0
                                Return

                            End If

                            prn_DetIndx = prn_DetIndx + 1

                            If Val(prn_DetAr(prn_HdIndx, prn_DetIndx, 3)) <> 0 Then

                                CurY = CurY + TxtHgt

                                '  Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, prn_DetIndx, 1)), LM + 15, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, prn_DetIndx, 2)), LM + ClArr(1) + 15, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr(prn_HdIndx, prn_DetIndx, 3)), "#########0.00"), LM + ClArr(1) + ClArr(2) + ClArr(3) - 15, CurY, 1, 0, pFont)

                                NoofDets = NoofDets + 1

                            End If

                        Loop

                        Printing_PackingSlip_Format_1155_PageFooter(PrintDocument1, e, prn_HdAr, TxtHgt, pFont, LM, RMargin, TM, BMargin, PgWt, PrWt, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_HdIndx, vtot_wgt, vtot_pcs, True, prn_Count, lst_print)




                        prn_HdIndx = prn_HdIndx + 1
                        prn_Count = prn_Count + 1
                        prn_DetIndx = 0

                        If prn_HdIndx <= prn_HdMxIndx Then

                            If (prn_Count - 1) Mod 12 = 0 Then

                                Common_Procedures.Print_To_PrintDocument(e, "Tot.Pcs : " & Val(vtot_pcs), LMargin + ClArr(1) + 15, PrintDocument1.DefaultPageSettings.PaperSize.Height - BMargin - TxtHgt - 5, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, "Tot.Mtrs : " & Format(Val(vtot_wgt), "#########0.00"), (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + LMargin + ClArr(1) + 15, PrintDocument1.DefaultPageSettings.PaperSize.Height - BMargin - TxtHgt - 5, 1, 0, pFont)

                                e.HasMorePages = True
                                Return

                            End If

                        End If

                    Loop

                    Common_Procedures.Print_To_PrintDocument(e, "Tot.Pcs : " & Val(vtot_pcs), LMargin + ClArr(1) + 15, PrintDocument1.DefaultPageSettings.PaperSize.Height - BMargin - TxtHgt - 5, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "Tot.Mtrs : " & Format(Val(vtot_wgt), "#########0.00"), (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + LMargin + ClArr(1) + 15, PrintDocument1.DefaultPageSettings.PaperSize.Height - BMargin - TxtHgt - 5, 1, 0, pFont)

                End If

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

        e.HasMorePages = False

    End Sub

    Public Shared Sub Printing_PackingSlip_Format_1155_PageHeader(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal prn_HdIndx As Integer)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim dt3 As New DataTable
        Dim dt4 As New DataTable
        Dim p1Font As Font
        Dim strHeight As Single
        Dim W1 As Single
        Dim PrntWt As Single = 0
        Dim Cmp_Name As String = ""
        Dim Cmp_Add As String = ""
        Dim Cmp_Phone As String = ""

        PageNo = PageNo + 1

        CurY = TMargin



        Cmp_Add = ""
        If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1155" Then 'KRG WEAVES
            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString




            If Trim(prn_HdDt.Rows(0).Item("Company_Address4").ToString) <> "" Then
                Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address4").ToString)
            ElseIf Trim(prn_HdDt.Rows(0).Item("Company_Address3").ToString) <> "" Then
                Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address3").ToString)
            ElseIf Trim(prn_HdDt.Rows(0).Item("Company_Address2").ToString) <> "" Then
                Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address2").ToString)
            ElseIf Trim(prn_HdDt.Rows(0).Item("Company_Address1").ToString) <> "" Then
                Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address1").ToString)
            End If
        End If
        PrntWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) - PrintDocument1.DefaultPageSettings.Margins.Right - PrintDocument1.DefaultPageSettings.Margins.Left
        ' PrntWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) '- PrintDocument1.DefaultPageSettings.Margins.Right - PrintDocument1.DefaultPageSettings.Margins.Left


        CurY = TMargin
        p1Font = New Font("Calibri", 11, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrntWt, p1Font)
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

        CurY = CurY + strHeight - 5
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Add, LMargin, CurY, 2, PrntWt, pFont)
        strHeight = e.Graphics.MeasureString(Cmp_Add, p1Font).Height

        CurY = CurY + strHeight - 5
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Phone, LMargin, CurY, 2, PrntWt, pFont)
        strHeight = e.Graphics.MeasureString(Cmp_Phone, p1Font).Height

        CurY = CurY + 10
        p1Font = New Font("Calibri", 9, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, "PACKING SLIP", LMargin, CurY, 2, PrntWt, p1Font)
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height


        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1155" Then 'KRG WEAVES

            CurY = CurY + TxtHgt
        End If

        Try

            W1 = e.Graphics.MeasureString("QUALITY   :  ", pFont).Width

            p1Font = New Font("Calibri", 8, FontStyle.Regular)

            CurY = CurY + strHeight + 5
            Common_Procedures.Print_To_PrintDocument(e, "BALE NO", LMargin + 10, CurY, 0, 0, p1Font)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1, CurY, 0, 0, p1Font)
            Common_Procedures.Print_To_PrintDocument(e, prn_HdAr(prn_HdIndx, 1), LMargin + W1 + 25, CurY, 0, 0, p1Font)

            CurY = CurY + TxtHgt
            p1Font = New Font("Calibri", 8, FontStyle.Regular Or FontStyle.Underline)
            Common_Procedures.Print_To_PrintDocument(e, "QUALITY", LMargin + 10, CurY, 0, 0, p1Font)
            'Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1, CurY, 0, 0, p1Font)
            'Common_Procedures.Print_To_PrintDocument(e, prn_HdAr(prn_HdIndx, 2), LMargin + W1 + 25, CurY, 0, 0, p1Font)

            CurY = CurY + TxtHgt
            p1Font = New Font("Calibri", 8, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, prn_HdAr(prn_HdIndx, 2), LMargin + 10, CurY, 0, 0, p1Font)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(1) = CurY

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "", LMargin, CurY, 2, ClAr(1), pFont)
            'Common_Procedures.Print_To_PrintDocument(e, "LOT NO", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PCS NO", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "METERS", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(2) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Shared Sub Printing_PackingSlip_Format_1155_PageFooter(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal NoofDets As Integer, ByVal prn_HdIndx As Integer, ByRef vtot_wgt As Integer, ByRef vtot_pcs As Integer, ByVal is_LastPage As Boolean, ByRef prn_Count As Integer, ByVal lst_print As Boolean)
        Dim I As Integer
        Dim PrntWt As Single = 0

        Try

            PrntWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) - PrintDocument1.DefaultPageSettings.Margins.Right - PrintDocument1.DefaultPageSettings.Margins.Left
            'PrntWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)

            For I = NoofDets + 1 To NoofItems_PerPage
                CurY = CurY + TxtHgt
            Next

            CurY = CurY + TxtHgt
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(3) = CurY

            CurY = CurY + TxtHgt - 10

            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdAr(prn_HdIndx, 3))), LMargin + ClAr(1) + 15, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdAr(prn_HdIndx, 4)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) - 15, CurY, 1, 0, pFont)

            vtot_pcs = vtot_pcs + Val(prn_HdAr(prn_HdIndx, 3))
            vtot_wgt = vtot_wgt + Val(prn_HdAr(prn_HdIndx, 4))
            lst_print = True
            'CurY = CurY + TxtHgt + 10
            'Common_Procedures.Print_To_PrintDocument(e, Val(vtot_pcs), LMargin + ClAr(1) + 15, CurY, 0, 0, pFont)
            'Common_Procedures.Print_To_PrintDocument(e, Format(Val(vtot_wgt), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) - 15, CurY, 1, 0, pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(4) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(1))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY, LMargin + ClAr(1), LnAr(1))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY, LMargin + ClAr(1) + ClAr(2), LnAr(1))
            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(1))

            CurY = CurY + TxtHgt + 10
            If lst_print = True Then
                'Common_Procedures.Print_To_PrintDocument(e, "Tot.Pcs : " & Val(vtot_pcs), LMargin + ClAr(1) + 15, CurY, 0, 0, pFont)
                'CurY = CurY + TxtHgt + 10
                'Common_Procedures.Print_To_PrintDocument(e, "Tot.Mtrs : " & Format(Val(vtot_wgt), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) - 15, CurY, 1, 0, pFont)
            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)


        End Try

    End Sub

    Public Shared Function get_ClothsalesRT_YarnPurcRT_MaxCode(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCompany_ID As Integer, ByVal vFinYr As String, formtype As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim MxId1 As String = ""
        Dim MxId2 As String = ""
        Dim MxId3 As String = ""
        Dim MxId4 As String = ""


        Dim MxCode As String = ""
        Dim MxCode1 As String = ""

        Try

            If Trim(UCase(formtype)) = "CRNT" Then

                MxId1 = Common_Procedures.get_MaxCode(Cn1, "Other_GST_Entry_Head", "Other_GST_Entry_Reference_Code", "For_OrderBy", "(Other_GST_Entry_Type='CRNT')", vCompany_ID, vFinYr, sqltr)

                MxId2 = Common_Procedures.get_MaxCode(Cn1, "ClothSales_Return_Head", "ClothSales_Return_Code", "For_OrderBy", "(ClothSales_Return_Code LIKE 'GCLSR-%')", vCompany_ID, vFinYr, sqltr)

                MxCode = IIf(Val(MxId1) > Val(MxId2), MxId1, MxId2)
                Return MxCode
                Exit Function

            End If

            If Trim(UCase(formtype)) = "DRNT" Then

                MxId1 = Common_Procedures.get_MaxCode(Cn1, "Other_GST_Entry_Head", "Other_GST_Entry_Reference_Code", "For_OrderBy", "(Other_GST_Entry_Type='DRNT')", vCompany_ID, vFinYr, sqltr)


                MxId2 = Common_Procedures.get_MaxCode(Cn1, "Yarn_Purchase_Return_Head", "Yarn_Purchase_Return_Code", "For_OrderBy", "(Yarn_Purchase_Return_Code LIKE 'GYPRT-%')", vCompany_ID, vFinYr, sqltr)

                MxCode = IIf(Val(MxId1) > Val(MxId2), MxId1, MxId2)
                Return MxCode
                Exit Function

            End If







        Catch ex As Exception
            Return ""

        End Try


        '---

    End Function
    Public Shared Sub Printing_PackingSlip_Format_1381(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByVal prn_HdMxIndx As Integer, ByVal prn_DetMxIndx As Integer, ByRef prn_HdAr(,) As String, ByRef prn_DetAr(,,) As String, ByRef prn_PageNo As Integer, ByRef prn_Count As Integer, ByRef prn_HdIndx As Integer, ByRef prn_DetIndx As Integer, ByRef vtot_wgt As String, ByRef vtot_pcs As Integer, ByVal lst_print As Boolean)
        Dim I As Integer, NoofDets As Integer, NoofItems_PerPage As Integer
        Dim pFont As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim ps As Printing.PaperSize
        Dim strHeight As Single = 0
        Dim PpSzSTS As Boolean = False
        Dim LM As Single = 0, TM As Single = 0
        Dim PgWt As Single = 0, PrWt As Single = 0
        Dim PgHt As Single = 0, PrHt As Single = 0





        For I = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(I).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(I)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                e.PageSettings.PaperSize = ps
                Exit For
            End If
        Next



        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 20 ' 40
            .Right = 50
            .Top = 1 ' 20 ' 30  '60
            .Bottom = 40
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = (.Width / 4) - RMargin - LMargin
            PrintHeight = (.Height / 4) - TMargin - BMargin
            PageWidth = (.Width / 4) - RMargin
            PageHeight = (.Height / 4) - BMargin
        End With

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        pFont = New Font("Calibri", 10, FontStyle.Regular)

        NoofItems_PerPage = 9 ' 17 ' 20 

        Erase ClArr
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = 0 : ClArr(2) = 50 : ClArr(3) = 100
        'ClArr(1) = 110 : ClArr(2) = 110 : ClArr(3) = 120

        TxtHgt = 19 ' e.Graphics.MeasureString("A", pFont).Height  ' 20

        Try

            If prn_HdDt.Rows.Count > 0 Then

                If prn_HdMxIndx > 0 Then

                    Do While prn_HdIndx <= prn_HdMxIndx

                        'If prn_Count Mod 4 = 1 Then
                        '    LM = LMargin
                        '    TM = TMargin
                        '    PgWt = PageWidth
                        '    PgHt = PageHeight
                        '    PrWt = PrintWidth
                        '    PrHt = PrintHeight

                        'ElseIf prn_Count Mod 4 = 2 Then
                        '    LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + LMargin
                        '    TM = TMargin
                        '    PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PageWidth
                        '    PgHt = PageHeight
                        '    PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PrintWidth
                        '    PrHt = PrintHeight

                        'ElseIf prn_Count Mod 4 = 3 Then
                        '    LM = LMargin
                        '    TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 2) + TMargin
                        '    PgWt = PageWidth
                        '    PgHt = PageHeight
                        '    PrWt = PrintWidth
                        '    PrHt = PrintHeight

                        'ElseIf prn_Count Mod 4 = 0 Then
                        '    LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + LMargin
                        '    TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 2) + TMargin
                        '    PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PageWidth
                        '    PgHt = PageHeight
                        '    PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PrintWidth
                        '    PrHt = PrintHeight
                        'End If

                        'If prn_Count Mod 12 = 1 Then
                        '    LM = LMargin
                        '    TM = TMargin
                        '    PgWt = PageWidth
                        '    PgHt = PageHeight
                        '    PrWt = PrintWidth
                        '    PrHt = PrintHeight

                        'ElseIf prn_Count Mod 12 = 2 Then
                        '    LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + LMargin
                        '    TM = TMargin
                        '    PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + PageWidth
                        '    PgHt = PageHeight
                        '    PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + PrintWidth
                        '    PrHt = PrintHeight

                        'ElseIf prn_Count Mod 12 = 3 Then
                        '    LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + LMargin
                        '    TM = TMargin
                        '    PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PageWidth
                        '    PgHt = PageHeight
                        '    PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PrintWidth
                        '    PrHt = PrintHeight

                        'ElseIf prn_Count Mod 12 = 4 Then
                        '    LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + LMargin
                        '    TM = TMargin
                        '    PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + PageWidth
                        '    PgHt = PageHeight
                        '    PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + PrintWidth
                        '    PrHt = PrintHeight

                        'ElseIf prn_Count Mod 12 = 5 Then
                        '    LM = LMargin
                        '    TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 3) + (TMargin / 2) - 20
                        '    PgWt = PageWidth
                        '    PgHt = PageHeight
                        '    PrWt = PrintWidth
                        '    PrHt = PrintHeight
                        'ElseIf prn_Count Mod 12 = 6 Then
                        '    LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + LMargin
                        '    TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 3) + +(TMargin / 2) - 20
                        '    PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + PageWidth
                        '    PgHt = PageHeight
                        '    PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + PrintWidth
                        '    PrHt = PrintHeight

                        'ElseIf prn_Count Mod 12 = 7 Then
                        '    LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + LMargin
                        '    TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 3) + +(TMargin / 2) - 20
                        '    PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PageWidth
                        '    PgHt = PageHeight
                        '    PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PrintWidth
                        '    PrHt = PrintHeight
                        'ElseIf prn_Count Mod 12 = 8 Then
                        '    LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + LMargin
                        '    TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 3) + (TMargin / 2) - 20
                        '    PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + PageWidth
                        '    PgHt = PageHeight
                        '    PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + PrintWidth
                        '    PrHt = PrintHeight




                        'ElseIf prn_Count Mod 12 = 9 Then
                        '    LM = LMargin
                        '    TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 1.5) + (TMargin / 2) - 20
                        '    PgWt = PageWidth
                        '    PgHt = PageHeight
                        '    PrWt = PrintWidth
                        '    PrHt = PrintHeight

                        'ElseIf prn_Count Mod 12 = 10 Then
                        '    LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + LMargin
                        '    TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 1.5) + (TMargin / 2) - 30
                        '    PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + PageWidth
                        '    PgHt = PageHeight
                        '    PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + PrintWidth
                        '    PrHt = PrintHeight

                        'ElseIf prn_Count Mod 12 = 11 Then
                        '    LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + LMargin
                        '    TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 1.5) + (TMargin / 2) - 30
                        '    PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PageWidth
                        '    PgHt = PageHeight
                        '    PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PrintWidth
                        '    PrHt = PrintHeight
                        'ElseIf prn_Count Mod 12 = 0 Then
                        '    lst_print = True
                        '    LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + LMargin
                        '    TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 1.5) + (TMargin / 2) - 30
                        '    PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + PageWidth
                        '    PgHt = PageHeight
                        '    PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + PrintWidth
                        '    PrHt = PrintHeight
                        'End if
                        If prn_Count Mod 8 = 1 Then
                            LM = LMargin
                            TM = TMargin
                            PgWt = PageWidth
                            PgHt = PageHeight
                            PrWt = PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 8 = 2 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + LMargin
                            TM = TMargin
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 8 = 3 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + LMargin
                            TM = TMargin
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 8 = 4 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + LMargin
                            TM = TMargin
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 8 = 5 Then
                            LM = LMargin
                            TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 2) + TMargin
                            PgWt = PageWidth
                            PgHt = PageHeight
                            PrWt = PrintWidth
                            PrHt = PrintHeight
                        ElseIf prn_Count Mod 8 = 6 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + LMargin
                            TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 2) + TMargin
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 8 = 7 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + LMargin
                            TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 2) + TMargin
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PrintWidth
                            PrHt = PrintHeight
                        ElseIf prn_Count Mod 8 = 0 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + LMargin
                            TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 2) + TMargin
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width - (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)) + PrintWidth
                            PrHt = PrintHeight
                        End If



                        Erase LnAr
                        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

                        Printing_PackingSlip_Format_1381_PageHeader(PrintDocument1, e, prn_HdDt, prn_HdAr, TxtHgt, pFont, LM, RMargin, TM, BMargin, PgWt, PrWt, prn_PageNo, NoofItems_PerPage, CurY, LnAr, ClArr, prn_HdIndx)
                        CurY = CurY - 10

                        NoofDets = 0
                        Do While prn_DetIndx < Val(prn_HdAr(prn_HdIndx, 3))

                            If NoofDets >= NoofItems_PerPage Then


                                CurY = CurY + TxtHgt
                                Common_Procedures.Print_To_PrintDocument(e, "Continued....", LM + ClArr(1) + ClArr(2) + ClArr(3) - 10, CurY, 1, 0, pFont)
                                NoofDets = NoofDets + 1

                                Printing_PackingSlip_Format_1381_PageFooter(PrintDocument1, e, prn_HdAr, TxtHgt, pFont, LM, RMargin, TM, BMargin, PgWt, PrWt, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_HdIndx, vtot_wgt, vtot_pcs, False, prn_Count, lst_print)



                                'prn_DetIndx = prn_DetIndx + NoofItems_PerPage

                                e.HasMorePages = True

                                prn_Count = prn_Count + 1

                                vtot_pcs = 0
                                vtot_wgt = 0
                                Return

                            End If

                            prn_DetIndx = prn_DetIndx + 1

                            If Val(prn_DetAr(prn_HdIndx, prn_DetIndx, 3)) <> 0 Then

                                CurY = CurY + TxtHgt

                                '  Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, prn_DetIndx, 1)), LM + 15, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, prn_DetIndx, 2)), LM + ClArr(1) + 15, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr(prn_HdIndx, prn_DetIndx, 3)), "#########0.00"), LM + ClArr(1) + ClArr(2) + ClArr(3) - 20, CurY, 1, 0, pFont)

                                NoofDets = NoofDets + 1

                            End If

                        Loop

                        Printing_PackingSlip_Format_1381_PageFooter(PrintDocument1, e, prn_HdAr, TxtHgt, pFont, LM, RMargin, TM, BMargin, PgWt, PrWt, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_HdIndx, vtot_wgt, vtot_pcs, True, prn_Count, lst_print)




                        prn_HdIndx = prn_HdIndx + 1
                        prn_Count = prn_Count + 1
                        prn_DetIndx = 0

                        If prn_HdIndx <= prn_HdMxIndx Then

                            If (prn_Count - 1) Mod 8 = 0 Then

                                Common_Procedures.Print_To_PrintDocument(e, "Tot.Pcs : " & Val(vtot_pcs), LMargin + ClArr(1) + 15, PrintDocument1.DefaultPageSettings.PaperSize.Height - BMargin - 5, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, "Tot.Mtrs : " & Format(Val(vtot_wgt), "#########0.00"), (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + LMargin + ClArr(1) + 15, PrintDocument1.DefaultPageSettings.PaperSize.Height - BMargin - 10, 1, 0, pFont)
                                vtot_pcs = 0
                                vtot_wgt = 0
                                e.HasMorePages = True
                                Return

                            End If

                        End If

                    Loop

                    Common_Procedures.Print_To_PrintDocument(e, "Tot.Pcs : " & Val(vtot_pcs), LMargin + ClArr(1) + 15, PrintDocument1.DefaultPageSettings.PaperSize.Height - BMargin - 5, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "Tot.Mtrs : " & Format(Val(vtot_wgt), "#########0.00"), (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) + LMargin + ClArr(1) + 15, PrintDocument1.DefaultPageSettings.PaperSize.Height - BMargin - 5, 1, 0, pFont)
                    vtot_wgt = 0
                End If

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

        e.HasMorePages = False

    End Sub

    Public Shared Sub Printing_PackingSlip_Format_1381_PageHeader(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal prn_HdIndx As Integer)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim dt3 As New DataTable
        Dim dt4 As New DataTable
        Dim p1Font As Font
        Dim strHeight As Single
        Dim W1 As Single
        Dim PrntWt As Single = 0
        Dim Cmp_Name As String = ""
        Dim Cmp_Add As String = ""
        Dim Cmp_Phone As String = ""

        PageNo = PageNo + 1

        CurY = TMargin



        Cmp_Add = ""
        If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1155" Then 'KRG WEAVES
            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString

            If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
                Cmp_Phone = "Phone : " & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
            End If


            If Trim(prn_HdDt.Rows(0).Item("Company_Address4").ToString) <> "" Then
                Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address4").ToString)
            ElseIf Trim(prn_HdDt.Rows(0).Item("Company_Address3").ToString) <> "" Then
                Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address3").ToString)
            ElseIf Trim(prn_HdDt.Rows(0).Item("Company_Address2").ToString) <> "" Then
                Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address2").ToString)
            ElseIf Trim(prn_HdDt.Rows(0).Item("Company_Address1").ToString) <> "" Then
                Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address1").ToString)
            End If
        End If
        PrntWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) - PrintDocument1.DefaultPageSettings.Margins.Right - PrintDocument1.DefaultPageSettings.Margins.Left
        ' PrntWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) '- PrintDocument1.DefaultPageSettings.Margins.Right - PrintDocument1.DefaultPageSettings.Margins.Left


        CurY = TMargin + 10
        p1Font = New Font("Calibri", 11, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrntWt, p1Font)
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

        CurY = CurY + strHeight - 5
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Add, LMargin, CurY, 2, PrntWt, pFont)
        strHeight = e.Graphics.MeasureString(Cmp_Add, p1Font).Height

        CurY = CurY + strHeight - 5
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Phone, LMargin, CurY, 2, PrntWt, pFont)
        strHeight = e.Graphics.MeasureString(Cmp_Phone, p1Font).Height

        CurY = CurY + TxtHgt + 5
        p1Font = New Font("Calibri", 9, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, "PACKING SLIP", LMargin, CurY, 2, PrntWt, p1Font)
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height


        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1155" Then 'KRG WEAVES

            CurY = CurY + TxtHgt
        End If

        Try

            W1 = e.Graphics.MeasureString("QUALITY   :  ", pFont).Width

            p1Font = New Font("Calibri", 8, FontStyle.Regular)

            CurY = CurY + strHeight + 5
            Common_Procedures.Print_To_PrintDocument(e, "BALE NO", LMargin + 10, CurY, 0, 0, p1Font)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1, CurY, 0, 0, p1Font)
            Common_Procedures.Print_To_PrintDocument(e, prn_HdAr(prn_HdIndx, 1), LMargin + W1 + 25, CurY, 0, 0, p1Font)

            CurY = CurY + TxtHgt
            p1Font = New Font("Calibri", 8, FontStyle.Regular Or FontStyle.Underline)
            Common_Procedures.Print_To_PrintDocument(e, "QUALITY", LMargin + 10, CurY, 0, 0, p1Font)
            'Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1, CurY, 0, 0, p1Font)
            'Common_Procedures.Print_To_PrintDocument(e, prn_HdAr(prn_HdIndx, 2), LMargin + W1 + 25, CurY, 0, 0, p1Font)

            CurY = CurY + TxtHgt
            p1Font = New Font("Calibri", 8, FontStyle.Regular)
            Common_Procedures.Print_To_PrintDocument(e, prn_HdAr(prn_HdIndx, 2), LMargin + 10, CurY, 0, 0, p1Font)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(1) = CurY

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "", LMargin, CurY, 2, ClAr(1), pFont)
            'Common_Procedures.Print_To_PrintDocument(e, "LOT NO", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PCS NO", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "METERS", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(2) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Shared Sub Printing_PackingSlip_Format_1381_PageFooter(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal NoofDets As Integer, ByVal prn_HdIndx As Integer, ByRef vtot_wgt As String, ByRef vtot_pcs As Integer, ByVal is_LastPage As Boolean, ByRef prn_Count As Integer, ByVal lst_print As Boolean)
        Dim I As Integer
        Dim PrntWt As Single = 0



        Try


            PrntWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4) - PrintDocument1.DefaultPageSettings.Margins.Right - PrintDocument1.DefaultPageSettings.Margins.Left
            'PrntWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 4)

            For I = NoofDets + 1 To NoofItems_PerPage
                CurY = CurY + TxtHgt
            Next

            CurY = CurY + TxtHgt
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(3) = CurY

            CurY = CurY + TxtHgt - 10

            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdAr(prn_HdIndx, 3))), LMargin + ClAr(1) + 15, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdAr(prn_HdIndx, 4)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) - 15, CurY, 1, 0, pFont)

            vtot_pcs = vtot_pcs + Val(prn_HdAr(prn_HdIndx, 3))
            vtot_wgt = vtot_wgt + Val(prn_HdAr(prn_HdIndx, 4))
            lst_print = True
            'CurY = CurY + TxtHgt + 10
            'Common_Procedures.Print_To_PrintDocument(e, Val(vtot_pcs), LMargin + ClAr(1) + 15, CurY, 0, 0, pFont)
            'Common_Procedures.Print_To_PrintDocument(e, Format(Val(vtot_wgt), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) - 15, CurY, 1, 0, pFont)



            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(4) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(1))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY, LMargin + ClAr(1), LnAr(1))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY, LMargin + ClAr(1) + ClAr(2), LnAr(1))
            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(1))

            CurY = CurY + TxtHgt + 10
            If lst_print = True Then
                'Common_Procedures.Print_To_PrintDocument(e, "Tot.Pcs : " & Val(vtot_pcs), LMargin + ClAr(1) + 15, CurY, 0, 0, pFont)
                'CurY = CurY + TxtHgt + 10
                'Common_Procedures.Print_To_PrintDocument(e, "Tot.Mtrs : " & Format(Val(vtot_wgt), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) - 15, CurY, 1, 0, pFont)

            End If


        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub
    Public Shared Sub YearHead_Updation(ByVal Cn1 As SqlClient.SqlConnection)
        Dim cmd As New SqlClient.SqlCommand
        Dim a() As String
        Dim i As Integer
        Dim YrCode As String
        Dim YrRange As String

        cmd.Connection = Cn1

        cmd.CommandText = "delete from Year_Head"
        cmd.ExecuteNonQuery()

        a = Split(Common_Procedures.FnRange, "-")

        For i = Val(a(0)) To Val(a(1))

            YrCode = Trim(Mid(Val(i) - 1, 3, 2)) & "-" & Trim(Microsoft.VisualBasic.Right(i, 2))
            YrRange = Trim(i - 1) & "-" & Trim(i)

            cmd.CommandText = "Insert into Year_Head(Year_IdNo, Year_Code, Year_Range) Values (" & Str(i - 1) & ", '" & Trim(YrCode) & "' , '" & Trim(YrRange) & "')"
            cmd.ExecuteNonQuery()

        Next

    End Sub

    Public Shared Sub get_GST_AC_IDNOS_for_AC_POSTING(ByVal Cn1 As SqlClient.SqlConnection, ByVal DR_CR_TYPE As String, ByRef vVOUPOS_GSTAC_IDNOS As String, ByRef vVOUPOS_GST_AMTS As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing)
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim vGSTPerc As String = ""
        Dim vCGST_AcIdNo As String = ""
        Dim vSGST_AcIdNo As String = ""
        Dim vIGST_AcIdNo As String = ""
        Dim vCR_DR_SIGN As Integer = 0


        If Trim(UCase(DR_CR_TYPE)) = "DR" Then
            vCR_DR_SIGN = -1
        Else
            vCR_DR_SIGN = 1
        End If

        vVOUPOS_GSTAC_IDNOS = ""
        vVOUPOS_GST_AMTS = ""

        Da = New SqlClient.SqlDataAdapter("select GST_Percentage, sum(CGST_Amount) as CGST_Amt, sum(SGST_Amount) as SGST_Amt, sum(IGST_Amount) as IGST_Amt from Entry_GST_Tax_Details_Temp Where GST_Percentage <> 0 Group by GST_Percentage Having sum(CGST_Amount) <> 0 or sum(SGST_Amount) <> 0 or sum(IGST_Amount) <> 0 Order by GST_Percentage", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If

        Dt1 = New DataTable
        Da.Fill(Dt1)
        If Dt1.Rows.Count > 0 Then

            For i = 0 To Dt1.Rows.Count - 1

                vGSTPerc = Val(Dt1.Rows(i).Item("GST_Percentage").ToString)

                If Val(Dt1.Rows(i).Item("IGST_Amt").ToString) <> 0 Then
                    If vCR_DR_SIGN = -1 Then
                        vIGST_AcIdNo = Common_Procedures.get_FieldValue(Cn1, "GST_AccountSettings_Head", "IP_IGST_Ac_IdNo", "(GST_Percentage = " & Str(Val(vGSTPerc)) & ")", , sqltr)
                    Else
                        vIGST_AcIdNo = Common_Procedures.get_FieldValue(Cn1, "GST_AccountSettings_Head", "OP_IGST_Ac_IdNo", "(GST_Percentage = " & Str(Val(vGSTPerc)) & ")", , sqltr)
                    End If
                    If Val(vIGST_AcIdNo) = 0 Then vIGST_AcIdNo = 26

                    vVOUPOS_GSTAC_IDNOS = Trim(vVOUPOS_GSTAC_IDNOS) & IIf(Trim(vVOUPOS_GSTAC_IDNOS) <> "", "|", "") & Trim(Val(vIGST_AcIdNo))
                    vVOUPOS_GST_AMTS = Trim(vVOUPOS_GST_AMTS) & IIf(Trim(vVOUPOS_GST_AMTS) <> "", "|", "") & Trim(Format(Val(vCR_DR_SIGN) * Val(Dt1.Rows(i).Item("IGST_Amt").ToString), "##########0.00"))

                Else

                    If vCR_DR_SIGN = -1 Then
                        vCGST_AcIdNo = Common_Procedures.get_FieldValue(Cn1, "GST_AccountSettings_Head", "IP_CGST_Ac_IdNo", "(GST_Percentage = " & Str(Val(vGSTPerc)) & ")", , sqltr)
                        vSGST_AcIdNo = Common_Procedures.get_FieldValue(Cn1, "GST_AccountSettings_Head", "IP_SGST_Ac_IdNo", "(GST_Percentage = " & Str(Val(vGSTPerc)) & ")", , sqltr)
                    Else
                        vCGST_AcIdNo = Common_Procedures.get_FieldValue(Cn1, "GST_AccountSettings_Head", "OP_CGST_Ac_IdNo", "(GST_Percentage = " & Str(Val(vGSTPerc)) & ")", , sqltr)
                        vSGST_AcIdNo = Common_Procedures.get_FieldValue(Cn1, "GST_AccountSettings_Head", "OP_SGST_Ac_IdNo", "(GST_Percentage = " & Str(Val(vGSTPerc)) & ")", , sqltr)
                    End If
                    If Val(vCGST_AcIdNo) = 0 Then vCGST_AcIdNo = 24
                    If Val(vSGST_AcIdNo) = 0 Then vSGST_AcIdNo = 25

                    vVOUPOS_GSTAC_IDNOS = Trim(vVOUPOS_GSTAC_IDNOS) & IIf(Trim(vVOUPOS_GSTAC_IDNOS) <> "", "|", "") & Trim(Val(vCGST_AcIdNo)) & "|" & Trim(Val(vSGST_AcIdNo))
                    vVOUPOS_GST_AMTS = Trim(vVOUPOS_GST_AMTS) & IIf(Trim(vVOUPOS_GST_AMTS) <> "", "|", "") & Trim(Format(Val(vCR_DR_SIGN) * Val(Dt1.Rows(i).Item("CGST_Amt").ToString), "##########0.00")) & "|" & Trim(Format(Val(vCR_DR_SIGN) * Val(Dt1.Rows(i).Item("SGST_Amt").ToString), "##########0.00"))

                End If
            Next


        End If
        Dt1.Clear()

    End Sub


    Public Shared Function Defect_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vDefect_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vDefect_Name As String

        Da = New SqlClient.SqlDataAdapter("select Piece_Checking_Defect_Name from Piece_Checking_Defect_head where Piece_Checking_Defect_IdNo = " & Str(Val(vDefect_ID)), Cn1)
        Da.Fill(Dt)

        vDefect_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vDefect_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Defect_IdNoToName = Trim(vDefect_Name)

    End Function


    Public Shared Function Defect_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vDefect_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vDefect_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Piece_Checking_Defect_IdNo from Piece_Checking_Defect_head where Piece_Checking_Defect_Name = '" & Trim(vDefect_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vDefect_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vDefect_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Defect_NameToIdNo = Val(vDefect_ID)

    End Function
    Public Shared Function Checking_TableNo_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vChecking_TableNo_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vChecking_TableNo_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Checking_Table_IdNo from Checking_TableNo_Head where Checking_Table_No = '" & Trim(vChecking_TableNo_Nm) & "'", Cn1)
        'Da.Fill(Dt)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)
        vChecking_TableNo_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vChecking_TableNo_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Checking_TableNo_NameToIdNo = Val(vChecking_TableNo_ID)

    End Function

    Public Shared Function Checking_TableNo_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vChecking_TableNo_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vChecking_TableNo_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Checking_Table_No from Checking_TableNo_Head where Checking_Table_IdNo = " & Str(Val(vChecking_TableNo_ID)), Cn1)
        Da.Fill(Dt)

        vChecking_TableNo_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vChecking_TableNo_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Checking_TableNo_IdNoToName = Trim(vChecking_TableNo_Nm)

    End Function

    Public Shared Sub Checking_for_AutoBackup_Preparation()
        Dim cn1 As SqlClient.SqlConnection
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Mins As Long = 0
        Dim vDB_LASTBACKUP_DtTm As Date
        Dim vDB_Creation_DtTm As Date
        Dim vBACKUPDays As Long = 0 '2
        Dim vDys As Long = 0
        Dim vIS_PenDrv_Exists_StS As Boolean = False
        Dim BckUP_STS As Boolean = False
        Dim vINC As Integer = 0

        If Common_Procedures.Office_System_Status = True Then
            Exit Sub
        End If

        If (Trim(UCase(Common_Procedures.ServerWindowsLogin)) = "ONLINE" Or Trim(UCase(Common_Procedures.ServerWindowsLogin)) = "IP" Or Trim(UCase(Common_Procedures.ServerWindowsLogin)) = "SIP" Or Trim(UCase(Common_Procedures.ServerWindowsLogin)) = "DIP") Then
            Exit Sub
        End If

LOOP1:

        vINC = vINC + 1

        vDB_LASTBACKUP_DtTm = #1/1/2000#
        vDB_Creation_DtTm = #1/1/2000#

        cn1 = New SqlClient.SqlConnection(Common_Procedures.ConnectionString_Master)
        cn1.Open()

        vDB_Creation_DtTm = Now
        Da = New SqlClient.SqlDataAdapter("SELECT max(bus.backup_finish_date) , min(sdb.crdate)  FROM sys.sysdatabases sdb LEFT OUTER JOIN msdb.dbo.backupset bus ON bus.database_name = sdb.name where sdb.Name = '" & Trim(Common_Procedures.DataBaseName) & "'", cn1)
        'Da = New SqlClient.SqlDataAdapter("SELECT max(bus.backup_finish_date) , min(bus.database_creation_date)  FROM sys.sysdatabases sdb LEFT OUTER JOIN msdb.dbo.backupset bus ON bus.database_name = sdb.name where sdb.Name = '" & Trim(Common_Procedures.DataBaseName) & "'", cn1)
        Dt1 = New DataTable
        Da.Fill(Dt1)
        If Dt1.Rows.Count > 0 Then
            If IsDBNull(Dt1.Rows(0)(0)) = False Then
                vDB_LASTBACKUP_DtTm = Dt1.Rows(0)(0)
            End If
            If IsDBNull(Dt1.Rows(0)(1)) = False Then
                vDB_Creation_DtTm = Dt1.Rows(0)(1)
            End If
        End If
        Dt1.Clear()

        Dt1.Dispose()
        Da.Dispose()

        cn1.Close()
        cn1.Dispose()

        'If IsDate(Common_Procedures.settings.AutoBackUp_Date) = True Then
        '    vDB_LASTBACKUP_DtTm = Common_Procedures.settings.AutoBackUp_Date
        'End If

        BckUP_STS = True

        'If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1155" Then  ' --- KRG TEXTILE MILLS PVT LTD
        vBACKUPDays = 1
        'Else
        '    vBACKUPDays = 2
        'End If
        vDys = DateDiff(DateInterval.Day, vDB_Creation_DtTm, Now)
        If vDys > vBACKUPDays Then

            vDys = DateDiff(DateInterval.Day, vDB_LASTBACKUP_DtTm, Now)
            If vDys > vBACKUPDays Then
                BckUP_STS = False
                If SP_SQLBACKUP_STATUS = True Then
                    If vINC <= 5 Then
                        System.Threading.Thread.Sleep(500)
                        GoTo LOOP1
                    End If
                End If
            End If

        End If


        If BckUP_STS = False Then
            Dim mymsgbox As New Tsoft_MessageBox("The backup for the last " & vDys & " days is not prepared......" & Chr(13) & "Software will Close now", "PREPARE BACKUP,CLOSE", "AUTOBACKUP NOT PREPARED...", "After taking a backup, the software will open....", MesssageBoxIcons.Errors, 1)
            mymsgbox.ShowDialog()

            If mymsgbox.MessageBoxResult = 1 Then
                Common_Procedures.AutoBackup(False)
            End If

            'Application.Exit()
            End

            Exit Sub

        End If

    End Sub


    Public Shared Function Company_IdnoToTextileLedgerIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal Company_ID As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vCOMP_LEDIDNO As Integer

        vCOMP_LEDIDNO = 0

        Da = New SqlClient.SqlDataAdapter("select Textile_Unit_LedgerIdNo from Company_Head where Company_IdNo = " & Str(Val(Company_ID)) & "", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vCOMP_LEDIDNO = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Return vCOMP_LEDIDNO

    End Function

    Public Shared Function Company_IdnoToSizingLedgerIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal Company_ID As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vCOMP_LEDIDNO As Integer

        vCOMP_LEDIDNO = 0

        Da = New SqlClient.SqlDataAdapter("select Sizing_Unit_LedgerIdNo from Company_Head where Company_IdNo = " & Str(Val(Company_ID)) & "", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vCOMP_LEDIDNO = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Return vCOMP_LEDIDNO

    End Function

    Public Shared Function Company_IdnoToOELedgerIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal Company_ID As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vCOMP_LEDIDNO As Integer

        vCOMP_LEDIDNO = 0

        Da = New SqlClient.SqlDataAdapter("select OE_Unit_LedgerIdNo from Company_Head where Company_IdNo = " & Str(Val(Company_ID)) & "", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vCOMP_LEDIDNO = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Return vCOMP_LEDIDNO

    End Function

    Public Shared Function Ledger_IdNoToCompanyIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal Ledger_ID As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vLED_COMPIDNO As Integer

        vLED_COMPIDNO = 0

        If vLED_COMPIDNO = 0 Then
            Da = New SqlClient.SqlDataAdapter("select Company_Idno from Company_Head where (Textile_Unit_LedgerIdNo = " & Str(Val(Ledger_ID)) & " or Sizing_Unit_LedgerIdNo = " & Str(Val(Ledger_ID)) & " or OE_Unit_LedgerIdNo = " & Str(Val(Ledger_ID)) & " or Company_WareHouse_idno_1 = " & Str(Val(Ledger_ID)) & " or Company_WareHouse_idno_2 = " & Str(Val(Ledger_ID)) & " or Company_WareHouse_idno_3 = " & Str(Val(Ledger_ID)) & ")", Cn1)
            If IsNothing(sqltr) = False Then
                Da.SelectCommand.Transaction = sqltr
            End If
            Dt = New DataTable
            Da.Fill(Dt)
            If Dt.Rows.Count > 0 Then
                If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                    vLED_COMPIDNO = Val(Dt.Rows(0)(0).ToString)
                End If
            End If
            Dt.Clear()
        End If

        Dt.Dispose()
        Da.Dispose()

        Return vLED_COMPIDNO

    End Function

    Public Shared Function Company_IdNoToAllLedgerIdNos(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCOMPANY_ID As String, ByRef vTEXLED_Idno As Integer, ByRef vSIZLED_Idno As Integer, ByRef vOELED_Idno As Integer, ByRef vGODLED_Idno1 As Integer, ByRef vGODLED_Idno2 As Integer, ByRef vGODLED_Idno3 As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vLED_COMPIDNO As Integer

        vLED_COMPIDNO = 0

        If vLED_COMPIDNO = 0 Then
            Da = New SqlClient.SqlDataAdapter("select Textile_Unit_LedgerIdNo, Sizing_Unit_LedgerIdNo, OE_Unit_LedgerIdNo, Company_WareHouse_idno_1, Company_WareHouse_idno_2, Company_WareHouse_idno_3 from Company_Head where Company_IdNo = " & Str(Val(vCOMPANY_ID)), Cn1)
            If IsNothing(sqltr) = False Then
                Da.SelectCommand.Transaction = sqltr
            End If
            Dt = New DataTable
            Da.Fill(Dt)
            If Dt.Rows.Count > 0 Then
                If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                    vLED_COMPIDNO = Val(Dt.Rows(0)(0).ToString)
                End If
            End If
            Dt.Clear()
        End If

        Dt.Dispose()
        Da.Dispose()

        Return vLED_COMPIDNO

    End Function

    Public Shared Sub initiate_sql_autobackup()
        Dim cn1 As SqlClient.SqlConnection
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim Mins As Long = 0
        Dim DtTm1 As Date
        Dim BckUP_STS As Boolean = False
        Dim ServrAutBckupPath As String = ""
        Dim vDys As Integer
        Dim vDBBACKUPSZ_in_KB As Long = 0
        Dim vFreeBytes_IN_kb As Long = 0
        Dim vBACKUPDRIVENAME As String = ""

        Try

            If Common_Procedures.is_OfficeSystem = True Then
                Exit Sub
            End If

            If (Trim(UCase(Common_Procedures.ServerWindowsLogin)) = "ONLINE" Or Trim(UCase(Common_Procedures.ServerWindowsLogin)) = "IP" Or Trim(UCase(Common_Procedures.ServerWindowsLogin)) = "SIP" Or Trim(UCase(Common_Procedures.ServerWindowsLogin)) = "DIP") Then
                Exit Sub
            End If

            DtTm1 = #1/1/2000#

            cn1 = New SqlClient.SqlConnection(Common_Procedures.ConnectionString_Master)
            cn1.Open()

            Da = New SqlClient.SqlDataAdapter("SELECT max(bus.backup_finish_date) FROM sys.sysdatabases sdb LEFT OUTER JOIN msdb.dbo.backupset bus ON bus.database_name = sdb.name where sdb.Name = '" & Trim(Common_Procedures.DataBaseName) & "'", cn1)
            Dt1 = New DataTable
            Da.Fill(Dt1)
            If Dt1.Rows.Count > 0 Then
                If IsDBNull(Dt1.Rows(0)(0)) = False Then
                    DtTm1 = Dt1.Rows(0)(0)
                End If
            End If
            Dt1.Clear()

            Dt1.Dispose()
            Da.Dispose()

            cn1.Close()
            cn1.Dispose()

            'If IsDate(Common_Procedures.settings.AutoBackUp_Date) = True Then
            '    DtTm1 = Common_Procedures.settings.AutoBackUp_Date
            'End If

            BckUP_STS = False
            BckUP_STS = False
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1040" Then

                vDys = DateDiff(DateInterval.Day, DtTm1, Now)
                If vDys > 1 Then
                    BckUP_STS = True
                End If

            ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1155" Then '----KRG TEXTILE MILLS (PALLADAM)

                If is_ServerSystem() = True Or Trim(UCase(SystemInformation.ComputerName)) = "SYSTEM1" Or Trim(UCase(SystemInformation.ComputerName)) = "SYSTEM2" Or Trim(UCase(SystemInformation.ComputerName)) = "SYSTEM5" Then
                    Mins = DateDiff(DateInterval.Minute, DtTm1, Now)
                    If Mins > 120 Then
                        BckUP_STS = True
                    End If
                End If

            Else

                Mins = DateDiff(DateInterval.Minute, DtTm1, Now)
                If Mins > 60 Then
                    BckUP_STS = True
                End If

            End If

            BckUP_STS = True

            If BckUP_STS = True Then

                ServrAutBckupPath = get_AutoBackUP_Path()
                If Trim(ServrAutBckupPath) = "" Then
                    Exit Sub
                End If
                ServrAutBckupPath = Trim(ServrAutBckupPath) & "\Auto_BackUP\"

                If Common_Procedures.is_ServerSystem = True Then
                    vDBBACKUPSZ_in_KB = get_Database_Backup_Size(Common_Procedures.DataBaseName)
                    vBACKUPDRIVENAME = Path.GetPathRoot(ServrAutBckupPath)
                    vFreeBytes_IN_kb = GetDriveFreespace_in_KB(vBACKUPDRIVENAME)
                End If

                If vDBBACKUPSZ_in_KB > vFreeBytes_IN_kb Then
                    MessageBox.Show("There is insufficient free disk space on drive " & vBACKUPDRIVENAME & Chr(13) & ", Free up some space", "DOES NOT PREPARE AN AUTOBACKUP...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                    Exit Sub
                End If

                Dim pp As New ProcessStartInfo

                ' Specify the location of the binary
                pp.FileName = "cmd.exe"
                'pp.FileName = "D:\TSOFT\Textile_96\Textile\sp_Tsoft_DB_Backup.bat"

                ' Use these arguments for the process
                pp.Arguments = "/c sqlcmd -U " & Trim(Common_Procedures.ServerLoginID) & " -P " & Trim(Common_Procedures.ServerPassword) & " -S " & Trim(Common_Procedures.ServerName) & " -Q ""EXEC sp_BackupDatabases @databaseName='" & Trim(Common_Procedures.DataBaseName) & "', @backupLocation='" & Trim(ServrAutBckupPath) & "'"""
                'pp.Arguments = "/c sqlcmd -U sa -P tsoftsql -S thanges-le\tsoft2014 -Q ""EXEC sp_BackupAll_TSOFT_Databases @backupDBName = '" & Trim(Common_Procedures.DataBaseName) & "', @backupLocation ='D:\TSOFT_AUTOBACKUP\'"""

                ' Use a hidden window
                pp.WindowStyle = ProcessWindowStyle.Hidden ' ProcessWindowStyle.Maximized ' ProcessWindowStyle.Hidden

                ' Start the process
                Process.Start(pp)

                'Process.Start("D:\TSOFT\Textile_96\Textile\sp_Tsoft_DB_Backup.bat")

                'Process.Start("cmd", "/c sqlcmd -U sa -P tsoftsql -S thanges-le\tsoft2014 -Q ""EXEC sp_BackupAll_TSOFT_Databases @backupLocation ='E:\TSOFT_AUTOBACKUP\'""")
                'Process.Start("cmd sqlcmd -U sa -P tsoftsql -S thanges-le\tsoft2014 -Q ""EXEC sp_BackupAll_TSOFT_Databases @backupLocation ='E:\TSOFT_AUTOBACKUP\'""")

                SP_SQLBACKUP_STATUS = True

                System.Threading.Thread.Sleep(500)

            End If

        Catch ex As Exception
            '-----

        End Try

    End Sub

    Public Shared Function get_AutoBackUP_Path()
        Dim cn1 As SqlClient.SqlConnection
        Dim cn2 As SqlClient.SqlConnection
        Dim cmd As New SqlClient.SqlCommand
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim ServrNm As String = ""
        Dim Fl_Name As String = ""
        Dim ServrAutBckupPath As String = ""
        Dim NR As Long = 0


        ServrNm = Common_Procedures.get_Server_SystemName()
        ServrAutBckupPath = ""
        If Trim(UCase(ServrNm)) = Trim(UCase(SystemInformation.ComputerName)) Then

            ServrAutBckupPath = Trim(Common_Procedures.AppPath)
            Fl_Name = Common_Procedures.AppPath & "\Auto_BackUP"

            If System.IO.Directory.Exists(Fl_Name) = False Then
                System.IO.Directory.CreateDirectory(Fl_Name)
            End If

            cn1 = New SqlClient.SqlConnection(Common_Procedures.ConnectionString_Master)
            cn1.Open()

            cmd.Connection = cn1

            NR = 0
            cmd.CommandText = "Update " & Trim(Common_Procedures.CompanyDetailsDataBaseName) & "..Settings_Head set Autobackup_Path_Server = '" & Trim(Common_Procedures.AppPath) & "'"
            NR = cmd.ExecuteNonQuery()
            If NR = 0 Then
                cmd.CommandText = "Insert into " & Trim(Common_Procedures.CompanyDetailsDataBaseName) & "..Settings_Head ( Autobackup_Path_Server ) values ('" & Trim(Common_Procedures.AppPath) & "')"
                cmd.ExecuteNonQuery()
            End If

            cn1.Close()
            cn1.Dispose()

        Else

            cn2 = New SqlClient.SqlConnection(Common_Procedures.ConnectionString_CompanyGroupdetails)
            cn2.Open()

            ServrAutBckupPath = Trim(Common_Procedures.get_FieldValue(cn2, "Settings_Head", "Autobackup_Path_Server", ""))

            cn2.Close()
            cn2.Dispose()


        End If

        Return Trim(ServrAutBckupPath)

    End Function

    Public Shared Function Calculation_CrimpPercentage_On_BEAMRUNOUT(ByVal Cn1 As SqlClient.SqlConnection, ByVal SetCd As String, ByVal BmNo As String, ByVal TotalBeamMeters As String, ByRef ProdMtrs As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Double
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim cmd As New SqlClient.SqlCommand
        Dim WidTyp As Single = 0
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim PavuConsMtrs As Double = 0
        Dim NoofBeams As Integer = 0
        Dim vClo_Mtrs As Double = 0
        Dim vLm_IdNo As Integer = 0
        Dim vWidth_Type As String = ""
        Dim vFOLD_PERC As String = ""
        Dim CrmpPerc As Double = 0
        Dim Nr As Long = 0
        Dim SQL1 As String = ""


        cmd.Connection = Cn1
        cmd.CommandTimeout = 1000
        If IsNothing(sqltr) = False Then
            cmd.Transaction = sqltr
        End If


        cmd.CommandText = "Truncate table " & Trim(Common_Procedures.EntryTempTable) & ""
        cmd.ExecuteNonQuery()

        cmd.CommandTimeout = 1000
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "SP_get_ProductionMeters_of_Beam"
        cmd.Parameters.Add("@temptablename", SqlDbType.VarChar)
        cmd.Parameters("@temptablename").Value = Trim(Common_Procedures.EntryTempTable)
        cmd.Parameters.Add("@setcode", SqlDbType.VarChar)
        cmd.Parameters("@setcode").Value = SetCd
        cmd.Parameters.Add("@beamno", SqlDbType.VarChar)
        cmd.Parameters("@beamno").Value = BmNo


        Da1 = New SqlClient.SqlDataAdapter(cmd)
        'Da1 = New SqlClient.SqlDataAdapter("Select Meters2, Name1, sum(Meters1) as ProdMeters from " & Trim(Common_Procedures.EntryTempTable) & " group by Name1 Having sum(Meters1) <> 0", Cn1)
        If IsNothing(sqltr) = False Then
            Da1.SelectCommand.Transaction = sqltr
        End If
        Dt1 = New DataTable
        Da1.Fill(Dt1)
        PavuConsMtrs = 0
        If Dt1.Rows.Count > 0 Then
            For i = 0 To Dt1.Rows.Count - 1

                vWidth_Type = Dt1.Rows(i).Item("Name1").ToString
                vClo_Mtrs = Val(Dt1.Rows(i).Item("ProdMeters").ToString)

                vFOLD_PERC = Val(Dt1.Rows(i).Item("Meters2").ToString)
                If Val(vFOLD_PERC) = 0 Then vFOLD_PERC = 100

                vClo_Mtrs = Format(Val(vClo_Mtrs) * Val(vFOLD_PERC) / 100, "##########0.00")

                WidTyp = 0
                If Trim(UCase(vWidth_Type)) = "SIX" Then
                    WidTyp = 6
                ElseIf Trim(UCase(vWidth_Type)) = "FIVE" Then
                    WidTyp = 5
                ElseIf Trim(UCase(vWidth_Type)) = "FOURTH" Then
                    WidTyp = 4
                ElseIf Trim(UCase(vWidth_Type)) = "TRIPLE" Then
                    WidTyp = 3
                ElseIf Trim(UCase(vWidth_Type)) = "DOUBLE" Then
                    WidTyp = 2
                Else
                    WidTyp = 1
                End If

                PavuConsMtrs = PavuConsMtrs + (Val(vClo_Mtrs) / Val(WidTyp))
                '--PavuConsMtrs = PavuConsMtrs + ((Val(vClo_Mtrs) / Val(WidTyp)) * Val(NoofBeams))

            Next

        End If
        Dt1.Clear()

        CrmpPerc = 0
        If Common_Procedures.settings.Loom_Crimp_Percentage_Calculation_for_Production_Meters = 1 Then
            If Val(PavuConsMtrs) <> 0 Then
                CrmpPerc = Format((Val(TotalBeamMeters) - Val(PavuConsMtrs)) / Val(PavuConsMtrs) * 100, "#########0.00")
            End If

        Else

            If Val(TotalBeamMeters) <> 0 Then
                CrmpPerc = Format((Val(TotalBeamMeters) - Val(PavuConsMtrs)) / Val(TotalBeamMeters) * 100, "#########0.00")
            End If

        End If

        ProdMtrs = Format(Val(PavuConsMtrs), "#########0.00")
        Calculation_CrimpPercentage_On_BEAMRUNOUT = Format(Val(CrmpPerc), "#########0.00")

    End Function

    Public Shared Sub Printing_PackingSlip_Format1155_Excel(ByVal Cn1 As SqlClient.SqlConnection, ByVal BaleNewCode As String, ByVal Bale_CompIdNo As Integer, ByVal BaleOther_Condition As String, ByVal Delivery_NewCode As String, ByVal Delivery_PkCondition As String, ByVal BaleFromNo As String, ByVal BaleToNo As String, ByRef prn_HdDt As DataTable, ByRef prn_DetDt As DataTable, ByVal prn_HdMxIndx As Integer, ByVal prn_DetMxIndx As Integer, ByRef prn_HdAr(,) As String, ByRef prn_DetAr(,,) As String, ByRef prn_PageNo As Integer, ByRef prn_Count As Integer, ByRef prn_HdIndx As Integer, ByRef prn_DetIndx As Integer)
        Dim da1 As New SqlClient.SqlDataAdapter
        Dim dt1 As New DataTable
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim Indx As Integer = 0
        Dim RndOffAmt As String = ""
        Dim NtAmt As String = ""
        Dim Cmp_Name As String, Cmp_Add1 As String, Cmp_Add2 As String
        Dim Cmp_PhNo As String, Cmp_TinNo As String, Cmp_CstNo As String
        Dim AmtInWrds As String = ""
        Dim FlName1 As String = "", FlName2 As String = ""
        Dim NewCode As String = ""
        Dim n As Integer = 0
        Dim DetRwsCnt As Integer = 0
        Dim xlCurRow As Integer = 0
        Dim xlApp As Excel.Application = New Microsoft.Office.Interop.Excel.Application()

        Dim prtFrm As Single = 0
        Dim prtTo As Single = 0
        Dim Condt As String = ""
        Dim Clthname As String = ""

        Dim prn_NoofBmDets As Integer = 0
        Dim prn_TotalBales As Integer = 0
        Dim prn_TotalPcs As String = ""
        Dim prn_TotalMtrs As String = ""
        Dim prn_TotalWgt As String = ""
        Dim prn_meters As String = ""
        Dim prn_Pcs As String = ""

        prn_HdDt.Clear()
        prn_DetDt.Clear()
        prn_meters = 0
        prn_Pcs = 0
        prn_PageNo = 0
        prn_HdIndx = 1
        prn_DetIndx = 0
        prn_HdMxIndx = 0
        prn_DetMxIndx = 0
        prn_Count = 1

        prn_TotalBales = 0
        prn_TotalPcs = 0
        prn_TotalMtrs = 0
        prn_TotalWgt = 0

        Erase prn_DetAr

        Erase prn_HdAr

        prn_HdAr = New String(500, 500) {}

        prn_DetAr = New String(500, 500, 10) {}

        NewCode = BaleNewCode  ' Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_BaleNo.Text) & "/" & Trim(Common_Procedures.FnYearCode)

        Condt = ""

        If Trim(BaleNewCode) <> "" Then

            If Val(BaleFromNo) = 0 Then Exit Sub
            If Val(BaleToNo) = 0 Then Exit Sub

            prtFrm = Val(Common_Procedures.OrderBy_CodeToValue(BaleFromNo))
            prtTo = Val(Common_Procedures.OrderBy_CodeToValue(BaleToNo))

            Condt = ""
            If Val(BaleFromNo) <> 0 And Val(BaleToNo) <> 0 Then
                Condt = " a.for_OrderBy between " & Str(Val(prtFrm)) & " and " & Trim(prtTo)

            ElseIf Val(BaleFromNo) <> 0 Then
                Condt = " a.for_OrderBy = " & Str(Val(prtFrm))

            Else
                Exit Sub

            End If

            da1 = New SqlClient.SqlDataAdapter("select a.*,a.Packing_Slip_No, a.cloth_idno, a.Total_Pcs as Pak_Pcs, a.Packing_Slip_Code, a.Total_Weight, a.Total_Meters as Pak_Mtrs, tZ.*, c.Cloth_Name,c.Cloth_Description from Packing_Slip_Head a INNER JOIN Company_head tZ ON a.company_idno = tZ.Company_Idno INNER JOIN Cloth_Head c ON a.Cloth_IdNo = c.Cloth_IdNo Where a.company_IdNo = " & Str(Val(Bale_CompIdNo)) & " and a.Packing_Slip_Code LIKE '%/" & Trim(Common_Procedures.FnYearCode) & "' and " & Trim(BaleOther_Condition) & IIf(Trim(Condt) <> "", " and ", "") & Condt & " order by a.for_orderby, a.Packing_Slip_Code", Cn1)
            prn_HdDt = New DataTable
            da1.Fill(prn_HdDt)

        Else

            da1 = New SqlClient.SqlDataAdapter("select a.Packing_Slip_No, a.cloth_idno, a.Total_Pcs as Pak_Pcs, a.Packing_Slip_Code, a.Bale_Transfer_Code, a.Total_Weight, a.Total_Meters as Pak_Mtrs, tZ.*, tC.*, tL.*, tCDH.*, tE.* from Packing_Slip_Head a INNER JOIN Company_head tZ ON a.company_idno = tZ.Company_Idno INNER JOIN ClothSales_Delivery_Head tCDH ON tCDH.ClothSales_Delivery_Code = '" & Trim(Delivery_NewCode) & "'  and '" & Trim(Delivery_PkCondition) & "' + tCDH.ClothSales_Delivery_Code = a.Delivery_Code INNER JOIN ClothSales_Delivery_Details tE ON tE.ClothSales_Delivery_Code = '" & Trim(Delivery_NewCode) & "'  and '" & Trim(Delivery_PkCondition) & "' + tE.ClothSales_Delivery_Code = a.Delivery_Code and tE.ClothSales_Delivery_SlNo = a.Delivery_DetailsSlNo  INNER JOIN Ledger_Head tL ON tE.Ledger_IdNo = tL.Ledger_IdNo INNER JOIN Cloth_Head tC ON tC.Cloth_IdNo = tE.ClothIdNo_ToPrint Where a.Delivery_Code = '" & Trim(Delivery_PkCondition) & Trim(Delivery_NewCode) & "' Order by a.Packing_Slip_Date, a.for_OrderBy, a.Packing_Slip_No, a.Packing_Slip_Code", Cn1)
            prn_HdDt = New DataTable
            da1.Fill(prn_HdDt)

        End If



        Try



            If prn_HdDt.Rows.Count > 0 Then
                For i = 0 To prn_HdDt.Rows.Count - 1

                    prn_HdMxIndx = prn_HdMxIndx + 1

                    prn_HdAr(prn_HdMxIndx, 1) = Trim(prn_HdDt.Rows(i).Item("Packing_Slip_No").ToString)
                    prn_HdAr(prn_HdMxIndx, 2) = Trim(prn_HdDt.Rows(i).Item("Cloth_Name").ToString)
                    prn_HdAr(prn_HdMxIndx, 3) = Val(prn_HdDt.Rows(i).Item("Pak_Pcs").ToString)
                    prn_HdAr(prn_HdMxIndx, 4) = Format(Val(prn_HdDt.Rows(i).Item("Pak_Mtrs").ToString), "#########0.00")

                    prn_TotalBales = prn_TotalBales + 1

                    prn_meters = prn_meters + Val(prn_HdDt.Rows(i).Item("Pak_Mtrs").ToString)

                    prn_Pcs = prn_Pcs + Val(prn_HdDt.Rows(i).Item("Pak_Pcs").ToString)

                    prn_DetMxIndx = 0

                    da2 = New SqlClient.SqlDataAdapter("select a.* from Packing_Slip_Details a where a.Packing_Slip_Code = '" & Trim(prn_HdDt.Rows(i).Item("Packing_Slip_Code").ToString) & "' order by a.Sl_No", Cn1)
                    prn_DetDt = New DataTable
                    da2.Fill(prn_DetDt)

                    If prn_DetDt.Rows.Count > 0 Then
                        For j = 0 To prn_DetDt.Rows.Count - 1
                            If Val(prn_DetDt.Rows(j).Item("Meters").ToString) <> 0 Then
                                prn_DetMxIndx = prn_DetMxIndx + 1
                                prn_DetAr(prn_HdMxIndx, prn_DetMxIndx, 5) = Trim(prn_HdDt.Rows(i).Item("Packing_Slip_No").ToString)
                                prn_DetAr(prn_HdMxIndx, prn_DetMxIndx, 0) = Trim(prn_DetDt.Rows(j).Item("Sl_No").ToString)
                                prn_DetAr(prn_HdMxIndx, prn_DetMxIndx, 1) = Trim(prn_DetDt.Rows(j).Item("Lot_No").ToString)
                                prn_DetAr(prn_HdMxIndx, prn_DetMxIndx, 2) = Trim(prn_DetDt.Rows(j).Item("Pcs_No").ToString)
                                prn_DetAr(prn_HdMxIndx, prn_DetMxIndx, 3) = Format(Val(prn_DetDt.Rows(j).Item("Meters").ToString), "#########0.00")
                                prn_DetAr(prn_HdMxIndx, prn_DetMxIndx, 4) = Format(Val(prn_DetDt.Rows(j).Item("Weight").ToString), "#########0.00")

                                prn_TotalPcs = Val(prn_TotalPcs) + 1
                                prn_TotalMtrs = Format(Val(prn_TotalMtrs) + Format(Val(prn_DetDt.Rows(j).Item("Meters").ToString), "#########0.00"), "##########0.00")
                                prn_TotalWgt = Format(Val(prn_TotalWgt) + Format(Val(prn_DetDt.Rows(j).Item("Weight").ToString), "#########0.000"), "##########0.000")

                            End If
                        Next j
                    End If

                Next i

            Else
                MessageBox.Show("This is New Entry", "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

            End If

            da1.Dispose()

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

        If prn_HdDt.Rows.Count > 0 Then

            Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
            Cmp_PhNo = "" : Cmp_TinNo = "" : Cmp_CstNo = ""

            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString
            If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
                Cmp_PhNo = "PHONE NO.:" & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
            End If
            If Trim(prn_HdDt.Rows(0).Item("Company_TinNo").ToString) <> "" Then
                Cmp_TinNo = "TIN NO.: " & prn_HdDt.Rows(0).Item("Company_TinNo").ToString
            End If
            If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
                Cmp_CstNo = "CST NO.: " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
            End If

            'FlName1 = Microsoft.VisualBasic.Left(Trim(Common_Procedures.AppPath), 2) & "\Packing_excel.xlsx"


            FlName1 = Trim(Common_Procedures.AppPath) & "\Reports\Packing_List_excel_Copy.xlsx"
            'FlName1 = Trim(Common_Procedures.AppPath) & "\Packing_List_excel_Copy.xlsx"


            Dim xlWorkBook As Excel.Workbook
            Dim xlWorkSheet As Excel.Worksheet

            Dim misValue As Object = System.Reflection.Missing.Value


            FlName2 = Trim(FlName2)

            If File.Exists(FlName1) = False Then
                MessageBox.Show("Invalid  " & Chr(13) & FlName1, "DOES NOT SHOW REPORT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
                Exit Sub
            End If

            Dim SaveFileDialog1 As New SaveFileDialog


            SaveFileDialog1.ShowDialog()
            FlName2 = SaveFileDialog1.FileName


            FlName2 = Trim(FlName2) & ".xlsx"

            For Each workbook In xlApp.Workbooks
                If workbook.Name.ToString.ToLower = FlName2.ToString.ToLower Then
                    MsgBox("Close the Excell Workbook Named " & FlName2 & ". It needs to be closed to proceed further")
                    Exit Sub
                End If
            Next

            If File.Exists(FlName2) = True Then
                File.Delete(FlName2)
            End If

            File.Copy(FlName1, FlName2, True)



            xlWorkBook = xlApp.Workbooks.Open(FlName2)
            'xlWorkBook = xlApp.Workbooks.Add(misValue)
            xlWorkSheet = xlWorkBook.Sheets(1)

            Try


                xlCurRow = 2
                xlWorkSheet.Cells(xlCurRow, 1) = Trim(prn_HdDt.Rows(0).Item("Company_Name").ToString)
                xlWorkSheet.Cells((xlCurRow + 1), 1) = "PACKING LIST"
                'xlWorkSheet.Cells(xlCurRow + 3, 1) = "PARTY NAME : " & Trim(prn_HdDt.Rows(0).Item("Ledger_name").ToString)

                ' xlWorkSheet.Cells(xlCurRow + 3, 7) = "INVOICE No. : " & Trim(prn_HdDt.Rows(0).Item("ClothSales_Invoice_RefNo").ToString)
                'xlWorkSheet.Cells(xlCurRow + 4, 7) = "INVOICE DATE. : " & Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("ClothSales_Invoice_Date").ToString), "dd-MM-yyyy").ToString
                'xlWorkSheet.Cells(xlCurRow + 5, 7) = "FOLDING : " & Trim(prn_HdDt.Rows(0).Item("Folding").ToString)
                xlWorkSheet.Cells(xlCurRow + 3, 1) = "CLOTHNAME : " & Trim(prn_HdDt.Rows(0).Item("Cloth_name").ToString)


                xlWorkSheet.Cells(xlCurRow + 4, 1) = "TOTAL BALES : " & prn_TotalBales
                xlWorkSheet.Cells(xlCurRow + 5, 1) = "TOTAL METERS : " & prn_meters

                xlWorkSheet.Cells(xlCurRow + 6, 1) = "TOTAL PIECES : " & prn_Pcs




                xlCurRow = 11

                'da1 = New SqlClient.SqlDataAdapter("select a.* from Packing_Slip_Details a where a.company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and a.Packing_Slip_Code = '" & Trim(prn_HdDt.Rows(0).Item("Packing_Slip_Code").ToString) & "' order by a.Sl_No", Con)
                'prn_DetDt = New DataTable
                'da1.Fill(prn_DetDt)

                'If prn_DetDt.Rows.Count > 0 Then






                Do While prn_HdIndx <= prn_HdMxIndx

                    prn_DetIndx = prn_DetIndx + 1

                    xlCurRow = xlCurRow + 1
                    xlWorkSheet.Cells(xlCurRow, 1) = Val(prn_HdIndx).ToString


                    xlWorkSheet.Cells(xlCurRow, 2) = Trim(prn_HdAr(prn_HdIndx, 1))
                    xlWorkSheet.Cells(xlCurRow, 3) = Trim(prn_HdAr(prn_HdIndx, 3))
                    xlWorkSheet.Cells(xlCurRow, 4) = Trim(prn_HdAr(prn_HdIndx, 4))

                    xlWorkSheet.Cells(xlCurRow, 5) = Val(prn_DetAr(prn_HdIndx, 1, 3))

                    xlWorkSheet.Cells(xlCurRow, 6) = Val(prn_DetAr(prn_HdIndx, 2, 3))

                    xlWorkSheet.Cells(xlCurRow, 7) = Val(prn_DetAr(prn_HdIndx, 3, 3))

                    xlWorkSheet.Cells(xlCurRow, 8) = Val(prn_DetAr(prn_HdIndx, 4, 3))

                    xlWorkSheet.Cells(xlCurRow, 9) = Val(prn_DetAr(prn_HdIndx, 5, 3))

                    xlWorkSheet.Cells(xlCurRow, 10) = Val(prn_DetAr(prn_HdIndx, 6, 3))

                    xlWorkSheet.Cells(xlCurRow, 11) = Val(prn_DetAr(prn_HdIndx, 7, 3))

                    '--------------------

                    xlWorkSheet.Cells(xlCurRow, 12) = Val(prn_DetAr(prn_HdIndx, 8, 3))
                    xlWorkSheet.Cells(xlCurRow, 13) = Val(prn_DetAr(prn_HdIndx, 9, 3))
                    xlWorkSheet.Cells(xlCurRow, 14) = Val(prn_DetAr(prn_HdIndx, 10, 3))

                    prn_HdIndx = prn_HdIndx + 1
                    prn_Count = prn_Count + 1
                    prn_DetIndx = 0
                Loop

                'End If

                DetRwsCnt = 0



                xlWorkBook.Save()



            Catch ex As Exception
                MessageBox.Show(ex.Message, "DOES NOT PRINT INVOICE...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

            Finally

            End Try

        End If


        da1.Dispose()

    End Sub

    Public Shared Sub get_YarnDelivery_Selection_Processing_Details(ByVal Cn1 As SqlClient.SqlConnection, ByVal vDELIVERYCode As String)
        Dim CMD As New SqlClient.SqlCommand

        CMD.Connection = Cn1

        CMD.CommandText = "truncate table " & Trim(Common_Procedures.EntryTempTable) & ""
        CMD.ExecuteNonQuery()

        '----Weaver_Yarn_Delivery_Entry
        CMD.CommandText = "insert into " & Trim(Common_Procedures.EntryTempTable) & " (int1 ,   Name1     ,   name2    ,   name3    ,   meters1,   int2 ,   weight3,   weight4 ) " &
                            "Select             a.sl_no, b.count_name, a.Yarn_type, c.mill_name, a.Bags   , a.Cones, a.Weight , a.Thiri  from Weaver_Yarn_Delivery_Details a INNER JOIN Count_Head b ON a.count_idno = b.count_idno LEFT OUTER JOIN Mill_Head c ON a.mill_idno = c.mill_idno Where 'YNDLV-' + a.Weaver_Yarn_Delivery_code = '" & Trim(vDELIVERYCode) & "'"
        CMD.ExecuteNonQuery()

        '----Sizing_Yarn_Delivery_Entry
        CMD.CommandText = "insert into " & Trim(Common_Procedures.EntryTempTable) & " (int1 ,   Name1     ,   name2    ,   name3    ,   meters1,   int2 ,   weight3, weight4 ) " &
                            "Select             a.sl_no, b.count_name, a.Yarn_type, c.mill_name, a.Bags   , a.Cones, a.Weight ,    0      from Sizing_Yarn_Delivery_Details a INNER JOIN Count_Head b ON a.count_idno = b.count_idno LEFT OUTER JOIN Mill_Head c ON a.mill_idno = c.mill_idno Where 'SYNDC-' + a.Sizing_Yarn_Delivery_Code = '" & Trim(vDELIVERYCode) & "'"
        CMD.ExecuteNonQuery()

        '----SizingSoft_Yarn_Delivery_Details
        CMD.CommandText = "insert into " & Trim(Common_Procedures.EntryTempTable) & " (int1 ,   Name1     ,   name2    ,   name3    ,   meters1,   int2 ,   weight3, weight4 ) " &
                            "Select             a.sl_no, b.count_name, a.Yarn_type, c.mill_name, a.Bags   , a.Cones, a.Weight ,    0      from SizingSoft_Yarn_Delivery_Details a INNER JOIN Count_Head b ON a.count_idno = b.count_idno LEFT OUTER JOIN Mill_Head c ON a.mill_idno = c.mill_idno Where 'SYDEL-' + a.Yarn_Delivery_code = '" & Trim(vDELIVERYCode) & "'"
        CMD.ExecuteNonQuery()

        CMD.Dispose()

    End Sub

    Public Shared Sub get_YarnDelivery_Selection_Processing_Pending(ByVal Cn1 As SqlClient.SqlConnection)
        Dim CMD As New SqlClient.SqlCommand

        CMD.Connection = Cn1

        CMD.CommandText = "truncate table " & Trim(Common_Procedures.EntryTempTable) & ""
        CMD.ExecuteNonQuery()

        CMD.CommandText = "insert into " & Trim(Common_Procedures.EntryTempTable) & " ( Name1       ,       meters1            ,       int2                 ,       weight3              ) " &
                            "           Select  a.Delivery_Code, SUM(a.Total_Bags) as Bags, SUM(a.Total_Cones) as Cones, SUM(a.Total_Weight) as Weight from Yarn_Delivery_Selections_Processing_Details a where a.Delivery_Code <> '' and a.Total_Weight <> 0 Group by a.Delivery_Code Having sum(a.Total_Weight) > 0"
        CMD.ExecuteNonQuery()

        CMD.Dispose()

    End Sub

    Public Shared Sub get_PavuDelivery_Selection_Processing_Pending(ByVal Cn1 As SqlClient.SqlConnection)
        Dim CMD As New SqlClient.SqlCommand

        CMD.Connection = Cn1

        CMD.CommandText = "truncate table " & Trim(Common_Procedures.EntryTempTable) & ""
        CMD.ExecuteNonQuery()

        CMD.CommandText = "insert into " & Trim(Common_Procedures.EntryTempTable) & " ( Name1       ,       int1,      meters2,       weight3              ) " &
                            "           Select  a.Delivery_Code, SUM(a.Total_Beams) as Beams, SUM(a.Total_Pcs) as Pcs, SUM(a.Total_Meters) as pavumeters from Pavu_Delivery_Selections_Processing_Details a where a.Delivery_Code <> '' and a.Total_Meters <> 0 Group by a.Delivery_Code Having sum(a.Total_Meters) > 0"
        CMD.ExecuteNonQuery()

        CMD.Dispose()

    End Sub

    Public Shared Function get_PAVU_CurrentStock(ByVal Cn1 As SqlClient.SqlConnection, ByVal vComp_IdNo As Integer, ByVal vParty_IdNo As Integer, ByVal vREFDATE As Date, ByVal vEndsCount_IdNo As Integer, ByRef vPAVU_UPTO_Date_Stk As String, ByRef vPAVU_Current_Stk As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Boolean
        Dim Cmd As New SqlClient.SqlCommand
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vLEDTyp As String = ""
        Dim vLEDstkmaintenance_STS As String = 0
        Dim vCondt As String = ""
        Dim vRptCondt As String = ""
        Dim vDELVSTK_MULTIPLIER As String = ""
        Dim vRCVDSTK_MULTIPLIER As String = ""
        Dim i As Integer = 0
        Dim vPAVUStk As String = 0


        Try

            vPAVU_UPTO_Date_Stk = 0
            vPAVU_Current_Stk = 0

            vLEDTyp = ""
            vLEDstkmaintenance_STS = 0

            Da = New SqlClient.SqlDataAdapter("select Ledger_Type, Stock_Maintenance_Status from Ledger_Head Where ledger_IdNo = " & Str(Val(vParty_IdNo)), Cn1)
            If IsNothing(sqltr) = False Then
                Da.SelectCommand.Transaction = sqltr
            End If
            Da.Fill(Dt)
            If Dt.Rows.Count > 0 Then
                If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                    vLEDTyp = Dt.Rows(0)(0).ToString
                End If
                If IsDBNull(Dt.Rows(0)(1).ToString) = False Then
                    vLEDstkmaintenance_STS = Val(Dt.Rows(0)(1).ToString)
                End If
            End If
            Dt.Clear()

            If Trim(vLEDTyp) = "" And Val(vLEDstkmaintenance_STS) = 0 Then
                Return True
                Exit Function
            End If

            Cmd.Connection = Cn1

            If IsNothing(sqltr) = False Then
                Cmd.Transaction = sqltr
            End If

            vCondt = ""
            If vComp_IdNo <> 0 Then
                If Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0 Then
                    vCondt = Trim(vCondt) & IIf(Trim(vCondt) <> "", " and ", "") & " tZ.Company_IdNo = " & Str(Val(vComp_IdNo))
                End If
            End If
            If vParty_IdNo <> 0 Then
                vCondt = Trim(vCondt) & IIf(Trim(vCondt) <> "", " and ", "") & " tP.Ledger_IdNo = " & Str(Val(vParty_IdNo))
            End If
            If vEndsCount_IdNo <> 0 Then
                vCondt = Trim(vCondt) & IIf(Trim(vCondt) <> "", " and ", "") & " a.EndsCount_IdNo IN (select sq1.EndsCount_IdNo from EndsCount_Head sq1 where sq1.EndsCount_Stockunder_IdNo = " & Str(Val(vEndsCount_IdNo)) & ") "
                'vCondt = Trim(vCondt) & IIf(Trim(vCondt) <> "", " and ", "") & " a.EndsCount_IdNo = " & Str(Val(vEndsCount_IdNo))
            End If


            If Trim(UCase(vLEDTyp)) = "JOBWORKER" Then
                vDELVSTK_MULTIPLIER = -1
                vRCVDSTK_MULTIPLIER = 1
            Else
                vDELVSTK_MULTIPLIER = 1
                vRCVDSTK_MULTIPLIER = -1
            End If


            For i = 1 To 2

                vRptCondt = Trim(vCondt)

                Cmd.Parameters.Clear()
                If i = 2 Then
                    If Trim(vREFDATE) <> "" Then
                        If IsNothing(vREFDATE) = False Then
                            If IsDate(vREFDATE) = True Then
                                If Year(vREFDATE) <> 1900 Then
                                    vRptCondt = Trim(vRptCondt) & IIf(Trim(vRptCondt) <> "", " and ", "") & " a.Reference_Date <=  '" & Trim(Format(vREFDATE, "MM/dd/yyyy")) & "' "
                                    'Cmd.Parameters.AddWithValue("@uptodate", vREFDATE)
                                    'vRptCondt = Trim(vRptCondt) & IIf(Trim(vRptCondt) <> "", " and ", "") & " a.Reference_Date <= @uptodate "
                                End If
                            End If
                        End If
                    End If
                End If



                Cmd.CommandText = "Truncate table " & Trim(Common_Procedures.EntryTempSubTable)
                Cmd.ExecuteNonQuery()

                'vRptCondt = vCondt   '---by thanges

                Cmd.CommandText = "Insert into " & Trim(Common_Procedures.EntryTempSubTable) & "(currency1) Select " & Trim(vDELVSTK_MULTIPLIER) & "*sum(a.Meters) from Stock_Pavu_Processing_Details a INNER JOIN Company_Head tZ ON a.Company_IdNo <> 0 and a.Company_IdNo = tZ.Company_IdNo INNER JOIN Ledger_Head tP ON a.DeliveryTo_Idno <> 0 and a.DeliveryTo_Idno = tP.Ledger_IdNo INNER JOIN EndsCount_Head c ON a.EndsCount_IdNo = c.endsCount_IdNo Where " & vRptCondt & IIf(Trim(vRptCondt) <> "", " and ", "") & " a.Meters <> 0 having sum(a.Meters) <> 0"
                Cmd.ExecuteNonQuery()

                Cmd.CommandText = "Insert into " & Trim(Common_Procedures.EntryTempSubTable) & "(currency1) Select " & Trim(vRCVDSTK_MULTIPLIER) & "*sum(a.Meters) from Stock_Pavu_Processing_Details a INNER JOIN Company_Head tZ ON a.Company_IdNo <> 0 and a.Company_IdNo = tZ.Company_IdNo INNER JOIN Ledger_Head tP ON a.ReceivedFrom_Idno <> 0 and a.ReceivedFrom_Idno = tP.Ledger_IdNo INNER JOIN EndsCount_Head c ON a.endsCount_IdNo = c.endsCount_IdNo Where " & vRptCondt & IIf(Trim(vRptCondt) <> "", " and ", "") & " a.Meters <> 0 having sum(a.Meters) <> 0"
                Cmd.ExecuteNonQuery()

                vPAVUStk = 0
                Da = New SqlClient.SqlDataAdapter("select sum(currency1) as PavuCurrentStock from " & Trim(Common_Procedures.EntryTempSubTable) & "", Cn1)
                If IsNothing(sqltr) = False Then
                    Da.SelectCommand.Transaction = sqltr
                End If
                Dt = New DataTable
                Da.Fill(Dt)
                If Dt.Rows.Count > 0 Then
                    If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                        vPAVUStk = Format(Val(Dt.Rows(0)(0).ToString), "##########0.000")
                    End If
                End If
                Dt.Clear()

                If i = 2 Then
                    vPAVU_UPTO_Date_Stk = vPAVUStk

                    If Val(vPAVUStk) < 0 Then
                        Return False
                        Exit Function
                    End If

                Else
                    vPAVU_Current_Stk = vPAVUStk
                    If Val(vPAVUStk) < 0 Then
                        Return False
                        Exit Function
                    End If

                End If

            Next i


            Return True

        Catch ex As Exception
            MessageBox.Show(ex.Message, "ERROR WHILE GENERATING PAVU STOCK...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        Finally
            Dt.Dispose()
            Da.Dispose()
            Cmd.Dispose()

        End Try

    End Function

    Public Shared Function get_YARN_CurrentStock(ByVal Cn1 As SqlClient.SqlConnection, ByVal vComp_IdNo As Integer, ByVal vParty_IdNo As Integer, ByVal vREFDATE As Date, ByVal vCount_IdNo As Integer, ByVal vYarnTYpe As String, ByVal vMill_IdNo As Integer, ByRef vYRN_UPTO_Date_Stk As String, ByRef vYRN_Current_Stk As String, ByRef vRETURNSTOCK_MillIdNo As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Boolean
        Dim Cmd As New SqlClient.SqlCommand
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vLEDTyp As String = ""
        Dim vLEDstkmaintenance_STS As String = 0
        Dim vCondt As String = ""
        Dim vRptCondt As String = ""
        Dim vDELVSTK_MULTIPLIER As String = ""
        Dim vRCVDSTK_MULTIPLIER As String = ""
        Dim i As Integer = 0
        Dim SQL1 As String = ""
        Dim vYRNStk As String = 0

        Try

            Cmd.Connection = Cn1
            Cmd.CommandTimeout = 1000

            If IsNothing(sqltr) = False Then
                Cmd.Transaction = sqltr
            End If

            vYRN_UPTO_Date_Stk = 0
            vYRN_Current_Stk = 0

            vLEDTyp = ""
            vLEDstkmaintenance_STS = 0

            SQL1 = "select Ledger_Type, Stock_Maintenance_Status from Ledger_Head Where ledger_IdNo = " & Str(Val(vParty_IdNo))
            Cmd.CommandText = "EXEC [SP_ExecuteQuery] '" & Replace(Trim(SQL1), "'", "''") & "'"
            Da = New SqlClient.SqlDataAdapter(Cmd)
            'Da = New SqlClient.SqlDataAdapter("select Ledger_Type, Stock_Maintenance_Status from Ledger_Head Where ledger_IdNo = " & Str(Val(vParty_IdNo)), Cn1)
            If IsNothing(sqltr) = False Then
                Da.SelectCommand.Transaction = sqltr
            End If
            Da.Fill(Dt)
            If Dt.Rows.Count > 0 Then
                If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                    vLEDTyp = Dt.Rows(0)(0).ToString
                End If
                If IsDBNull(Dt.Rows(0)(1).ToString) = False Then
                    vLEDstkmaintenance_STS = Val(Dt.Rows(0)(1).ToString)
                End If
            End If
            Dt.Clear()

            If Trim(vLEDTyp) = "" And Val(vLEDstkmaintenance_STS) = 0 Then
                Return True
                Exit Function
            End If


            vCondt = ""
            If vComp_IdNo <> 0 Then
                If Common_Procedures.settings.EntrySelection_Combine_AllCompany = 0 Then
                    vCondt = Trim(vCondt) & IIf(Trim(vCondt) <> "", " and ", "") & " tZ.Company_IdNo = " & Str(Val(vComp_IdNo))
                End If
            End If
            If vParty_IdNo <> 0 Then
                vCondt = Trim(vCondt) & IIf(Trim(vCondt) <> "", " and ", "") & " tP.Ledger_IdNo = " & Str(Val(vParty_IdNo))
            End If
            If vCount_IdNo <> 0 Then
                vCondt = Trim(vCondt) & IIf(Trim(vCondt) <> "", " and ", "") & " a.Count_IdNo IN (select sq1.count_idno from count_head sq1 where sq1.Count_Stockunder_IdNo = " & Str(Val(vCount_IdNo)) & ") "
                'vCondt = Trim(vCondt) & IIf(Trim(vCondt) <> "", " and ", "") & " a.Count_IdNo = " & Str(Val(vCount_IdNo))
            End If

            vRETURNSTOCK_MillIdNo = 0
            If Val(vMill_IdNo) <> 0 Then
                If (Common_Procedures.settings.Yarn_Negative_Stock_Restriction_in_MillWise_for_Godown = 1 And Trim(UCase(vLEDTyp)) = "GODOWN") Or (Common_Procedures.settings.Yarn_Negative_Stock_Restriction_in_MillWise_for_Sizing = 1 And Trim(UCase(vLEDTyp)) = "SIZING") Then
                    vCondt = Trim(vCondt) & IIf(Trim(vCondt) <> "", " and ", "") & " a.Mill_IdNo = " & Str(Val(vMill_IdNo))
                    vRETURNSTOCK_MillIdNo = vMill_IdNo
                End If
            End If

            If Trim(UCase(vLEDTyp)) = "JOBWORKER" Then
                vDELVSTK_MULTIPLIER = -1
                vRCVDSTK_MULTIPLIER = 1
            Else
                vDELVSTK_MULTIPLIER = 1
                vRCVDSTK_MULTIPLIER = -1
            End If


            For i = 1 To 2

                vRptCondt = Trim(vCondt)

                Cmd.Parameters.Clear()
                If i = 2 Then

                    If IsNothing(vREFDATE) = False Then
                        If IsDate(vREFDATE) = True Then
                            If Year(vREFDATE) <> 1900 Then
                                vRptCondt = Trim(vRptCondt) & IIf(Trim(vRptCondt) <> "", " and ", "") & " a.Reference_Date <=  '" & Trim(Format(vREFDATE, "MM/dd/yyyy")) & "'  "
                                'Cmd.Parameters.AddWithValue("@uptodate", vREFDATE)
                                'vRptCondt = Trim(vRptCondt) & IIf(Trim(vRptCondt) <> "", " and ", "") & " a.Reference_Date <= @uptodate "
                            End If
                        End If
                    End If

                End If


                Cmd.CommandText = "Truncate table " & Trim(Common_Procedures.EntryTempSubTable)
                Cmd.ExecuteNonQuery()

                'vRptCondt = vCondt   '---by thanges

                SQL1 = "Insert into " & Trim(Common_Procedures.EntryTempSubTable) & "(weight1) Select " & Trim(vDELVSTK_MULTIPLIER) & "*sum(a.Weight) from Stock_Yarn_Processing_Details a INNER JOIN Company_Head tZ ON a.Company_IdNo <> 0 and a.Company_IdNo = tZ.Company_IdNo INNER JOIN Ledger_Head tP ON a.DeliveryTo_Idno <> 0 and a.DeliveryTo_Idno = tP.Ledger_IdNo INNER JOIN Count_Head c ON a.Count_IdNo = c.Count_IdNo Where " & vRptCondt & IIf(Trim(vRptCondt) <> "", " and ", "") & " a.Weight <> 0 having sum(a.Weight) <> 0"
                Cmd.CommandText = "EXEC [SP_ExecuteQuery] '" & Replace(Trim(SQL1), "'", "''") & "'"
                'Cmd.CommandText = "Insert into " & Trim(Common_Procedures.EntryTempSubTable) & "(weight1) Select " & Trim(vDELVSTK_MULTIPLIER) & "*sum(a.Weight) from Stock_Yarn_Processing_Details a INNER JOIN Company_Head tZ ON a.Company_IdNo <> 0 and a.Company_IdNo = tZ.Company_IdNo INNER JOIN Ledger_Head tP ON a.DeliveryTo_Idno <> 0 and a.DeliveryTo_Idno = tP.Ledger_IdNo INNER JOIN Count_Head c ON a.Count_IdNo = c.Count_IdNo Where " & vRptCondt & IIf(Trim(vRptCondt) <> "", " and ", "") & " a.Weight <> 0 having sum(a.Weight) <> 0"
                Cmd.ExecuteNonQuery()

                SQL1 = "Insert into " & Trim(Common_Procedures.EntryTempSubTable) & "(weight1) Select " & Trim(vRCVDSTK_MULTIPLIER) & "*sum(a.Weight) from Stock_Yarn_Processing_Details a INNER JOIN Company_Head tZ ON a.Company_IdNo <> 0 and a.Company_IdNo = tZ.Company_IdNo INNER JOIN Ledger_Head tP ON a.ReceivedFrom_Idno <> 0 and a.ReceivedFrom_Idno = tP.Ledger_IdNo INNER JOIN Count_Head c ON a.Count_IdNo = c.Count_IdNo Where " & vRptCondt & IIf(Trim(vRptCondt) <> "", " and ", "") & " a.Weight <> 0 having sum(a.Weight) <> 0"
                Cmd.CommandText = "EXEC [SP_ExecuteQuery] '" & Replace(Trim(SQL1), "'", "''") & "'"
                'Cmd.CommandText = "Insert into " & Trim(Common_Procedures.EntryTempSubTable) & "(weight1) Select " & Trim(vRCVDSTK_MULTIPLIER) & "*sum(a.Weight) from Stock_Yarn_Processing_Details a INNER JOIN Company_Head tZ ON a.Company_IdNo <> 0 and a.Company_IdNo = tZ.Company_IdNo INNER JOIN Ledger_Head tP ON a.ReceivedFrom_Idno <> 0 and a.ReceivedFrom_Idno = tP.Ledger_IdNo INNER JOIN Count_Head c ON a.Count_IdNo = c.Count_IdNo Where " & vRptCondt & IIf(Trim(vRptCondt) <> "", " and ", "") & " a.Weight <> 0 having sum(a.Weight) <> 0"
                Cmd.ExecuteNonQuery()

                vYRNStk = 0
                SQL1 = "select sum(Weight1) as YarnCurrentStock from " & Trim(Common_Procedures.EntryTempSubTable)
                Cmd.CommandText = "EXEC [SP_ExecuteQuery] '" & Replace(Trim(SQL1), "'", "''") & "'"
                Da = New SqlClient.SqlDataAdapter(Cmd)
                'Da = New SqlClient.SqlDataAdapter("select sum(Weight1) as YarnCurrentStock from " & Trim(Common_Procedures.EntryTempSubTable) & "", Cn1)
                If IsNothing(sqltr) = False Then
                    Da.SelectCommand.Transaction = sqltr
                End If
                Dt = New DataTable
                Da.Fill(Dt)
                If Dt.Rows.Count > 0 Then
                    If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                        vYRNStk = Format(Val(Dt.Rows(0)(0).ToString), "##########0.000")
                    End If
                End If
                Dt.Clear()

                If i = 2 Then
                    vYRN_UPTO_Date_Stk = vYRNStk

                    If Val(vYRNStk) < 0 Then
                        Return False
                        Exit Function
                    End If

                Else
                    vYRN_Current_Stk = vYRNStk
                    If Val(vYRNStk) < 0 Then
                        Return False
                        Exit Function
                    End If

                End If

            Next i

            Return True

        Catch ex As Exception
            MessageBox.Show(ex.Message, "ERROR WHILE GENERATING YARN STOCK...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        Finally
            Dt.Dispose()
            Da.Dispose()
            Cmd.Dispose()

        End Try

    End Function


    Public Shared Sub Default_ClothSet_Updation(ByVal Cn1 As SqlClient.SqlConnection)
        Dim cmd As New SqlClient.SqlCommand

        cmd.Connection = Cn1

        'cmd.CommandText = "delete from ClothSet_Head "
        'cmd.ExecuteNonQuery()
        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1428" Then
            cmd.CommandText = "Insert into ClothSet_Head(ClothSet_IdNo , ClothSet_Name , Sur_Name) Values (1 , 'INHOUSE' , 'INHOUSE')"
            cmd.ExecuteNonQuery()

            cmd.CommandText = "Insert into ClothSet_Head(ClothSet_IdNo , ClothSet_Name , Sur_Name) Values (2 , 'VENDOR' , 'VENDOR')"
            cmd.ExecuteNonQuery()
        End If

    End Sub


    Public Shared Function MarketingExecutive_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vLed_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vLed_ID As Integer

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Marketting_Executive_IdNo from  " & Trim(DbName) & " Marketting_Executive_Head where Marketting_Executive_Name = '" & Trim(vLed_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        vLed_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vLed_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        MarketingExecutive_NameToIdNo = Val(vLed_ID)

    End Function

    Public Shared Function MarketingExecutive_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vLed_IdNo As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vLed_Name As String

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Marketting_Executive_Name from " & Trim(DbName) & " Marketting_Executive_Head where Marketting_Executive_IdNo = " & Str(Val(vLed_IdNo)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vLed_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vLed_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        MarketingExecutive_IdNoToName = Trim(vLed_Name)

    End Function

    Public Shared Function is_Separate_New_CompanyGroup_Created_for_NextYear(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCOMPGROUP_IdNo As Integer, ByVal vCOMPGROUP_Name As String) As Boolean
        Dim da1 As SqlClient.SqlDataAdapter
        Dim dt1 As DataTable
        Dim vCompGrpSurNm_Selc As String = ""
        Dim vChngYrSTSSTS As Boolean = True
        Dim vCompGrpSurNm_DB As String = ""

        vCompGrpSurNm_Selc = Common_Procedures.Remove_NonCharacters(vCOMPGROUP_Name)

        vChngYrSTSSTS = True

        da1 = New SqlClient.SqlDataAdapter("select * from CompanyGroup_Head Where CompanyGroup_IdNo <> " & Str(Val(vCOMPGROUP_IdNo)), Cn1)
        dt1 = New DataTable
        da1.Fill(dt1)
        If dt1.Rows.Count > 0 Then

            For i = 0 To dt1.Rows.Count - 1

                vCompGrpSurNm_DB = ""
                If IsDBNull(dt1.Rows(i).Item("CompanyGroup_Name").ToString) = False Then
                    vCompGrpSurNm_DB = Common_Procedures.Remove_NonCharacters(dt1.Rows(i).Item("CompanyGroup_Name").ToString)
                End If

                If Trim(UCase(vCompGrpSurNm_DB)) = Trim(UCase(vCompGrpSurNm_Selc)) Then

                    If IsDBNull(dt1.Rows(i).Item("Financial_Range").ToString) = False Then
                        If Val(Year(Now) + 1) = Val(Microsoft.VisualBasic.Right(Trim(dt1.Rows(i).Item("Financial_Range").ToString), 4)) Then
                            vChngYrSTSSTS = False
                            Exit For
                        End If
                    End If
                End If

            Next i

        End If
        dt1.Clear()
        dt1.Dispose()
        da1.Dispose()

        Return vChngYrSTSSTS

    End Function

    Public Shared Function Validate_Email_ID(ByVal Txt As String) As Boolean
        Dim S As Boolean = True
        Dim I As Integer
        Dim k As Integer
        Dim vAT_COUNT As Integer
        Dim vDOT_COUNT As Integer

        Txt = Trim(Txt)

        S = True
        For I = 1 To Len(Txt)
            k = Asc(Mid(Txt, I, 1))
            If Not (k = 45 Or k = 46 Or (k >= 48 And k <= 57) Or k = 64 Or (k >= 65 And k <= 90) Or k = 95 Or (k >= 97 And k <= 122)) Then
                S = False
                GoTo LOOP_OUT
            End If
        Next

        vAT_COUNT = 0
        vDOT_COUNT = 0
        For I = 1 To Len(Txt)
            k = Asc(Mid(Txt, I, 1))
            If k = 64 Then
                vAT_COUNT = vAT_COUNT + 1
                If vAT_COUNT > 1 Then
                    S = False
                    GoTo LOOP_OUT
                End If
            End If
            If vAT_COUNT > 0 Then
                If k = 46 Then
                    vDOT_COUNT = vDOT_COUNT + 1
                    If vDOT_COUNT > 2 Then
                        S = False
                        GoTo LOOP_OUT
                    End If
                End If
            End If
        Next

LOOP_OUT:
        Validate_Email_ID = S

    End Function

    Public Shared Function get_PDF_PrinterName(ByVal EMAIL_Status As Boolean, ByVal WHATSAPP_Status As Boolean, ByRef vPDF_FLPATH As String) As String
        Dim vFILNm As String = ""
        Dim vPDFFLPATH_and_NAME As String = ""
        Dim pkInstalledPrinters As String
        Dim vPRNTRNAME As String

        vPDF_FLPATH = Common_Procedures.AppPath & "\PDF"
        If System.IO.Directory.Exists(vPDF_FLPATH) = False Then
            System.IO.Directory.CreateDirectory(vPDF_FLPATH)
        End If

        '----Find all printers installed
        vPRNTRNAME = ""
        If EMAIL_Status = True Or WHATSAPP_Status = True Then
            For Each pkInstalledPrinters In PrinterSettings.InstalledPrinters
                If InStr(1, Trim(UCase(pkInstalledPrinters)), Trim(UCase("Microsoft"))) > 0 And InStr(1, Trim(UCase(pkInstalledPrinters)), Trim(UCase("Print"))) > 0 And InStr(1, Trim(UCase(pkInstalledPrinters)), Trim(UCase("PDF"))) > 0 Then
                    vPRNTRNAME = Trim(pkInstalledPrinters)
                    Exit For
                End If
                'Debug.Print(pkInstalledPrinters)
            Next pkInstalledPrinters
        End If

        If Trim(vPRNTRNAME) = "" Then
            For Each pkInstalledPrinters In PrinterSettings.InstalledPrinters
                If InStr(1, Trim(UCase(pkInstalledPrinters)), Trim(UCase("doPDF"))) > 0 Then
                    vPRNTRNAME = Trim(pkInstalledPrinters)
                    Exit For
                End If
                'Debug.Print(pkInstalledPrinters)
            Next pkInstalledPrinters
        End If

        If Trim(vPRNTRNAME) = "" Then
            MessageBox.Show("PDF printing driver not installed", "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            Return Trim(vPRNTRNAME)
            Exit Function
        Else
            Return Trim(vPRNTRNAME)
        End If

    End Function

    Public Shared Function Price_List_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vPrice_List_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vPrice_List_Name As String

        Da = New SqlClient.SqlDataAdapter("select Price_List_Name from Garments_Price_List_Head where Price_List_IdNo = " & Str(Val(vPrice_List_ID)), Cn1)
        Da.Fill(Dt)

        vPrice_List_Name = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vPrice_List_Name = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Price_List_IdNoToName = Trim(vPrice_List_Name)

    End Function
    Public Shared Function Price_List_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vPrice_List_Name As String) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vPrice_List_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Price_List_IdNo from Garments_Price_List_Head where Price_List_Name = '" & Trim(vPrice_List_Name) & "'", Cn1)
        Da.Fill(Dt)

        vPrice_List_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vPrice_List_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Price_List_NameToIdNo = Val(vPrice_List_ID)

    End Function


    Public Shared Function get_CottonWaste_Sales_MaxCode(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCompany_ID As Integer, ByVal vFinYr As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim MxId1 As String = ""
        Dim MxId2 As String = ""
        Dim MxCode As String = ""

        Try

            MxId1 = Common_Procedures.get_MaxCode(Cn1, "Cotton_Waste_Sales_Head", "Cotton_Waste_Sales_Code", "For_OrderBy", "(Cotton_Waste_Sales_Code LIKE 'GSCWS-%')", vCompany_ID, vFinYr, sqltr)
            'lbl_InvNo.Text = Common_Procedures.get_MaxCode(cn1, "ClothSales_Invoice_Head", "ClothSales_Invoice_Code", "For_OrderBy", "(ClothSales_Invoice_Code LIKE '" & Trim(Pk_Condition) & "%')", Val(lbl_Company.Tag), Common_Procedures.FnYearCode)

            MxId2 = Common_Procedures.get_MaxCode(Cn1, "Cotton_Waste_Sales_Head", "Cotton_Waste_Sales_Code", "For_OrderBy", "(Cotton_Waste_Sales_Code LIKE 'SIZWS-%')", vCompany_ID, vFinYr, sqltr)
            'lbl_InvoiceNo.Text = Common_Procedures.get_MaxCode(cn1, "Yarn_Sales_Head", "Yarn_Sales_Code", "For_OrderBy", "(Entry_VAT_GST_Type = 'GST')", Val(lbl_Company.Tag), Common_Procedures.FnYearCode, tr)

            MxCode = IIf(Val(MxId1) > Val(MxId2), MxId1, MxId2)

            Return Trim(MxCode)

        Catch ex As Exception
            Return ""

        End Try

    End Function


    Public Shared Function get_Database_Backup_Size(ByVal vDBNAME As String) As Long
        Dim cn1 As SqlClient.SqlConnection
        Dim cmd As New SqlClient.SqlCommand
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim vDBBACKUPSZ_in_KB As Long = 0

        vDBBACKUPSZ_in_KB = 0

        If Trim(vDBNAME) <> "" Then

            cn1 = New SqlClient.SqlConnection(Common_Procedures.ConnectionString_Master)
            cn1.Open()

            Da = New SqlClient.SqlDataAdapter("select top 1 CAST(bs.backup_size/1024.0 AS bigint) AS BackupSizeKB, CAST(bs.backup_size/1024.0/1024/1024 AS DECIMAL(10, 2)) AS BackupSizeGB, CAST(bs.backup_size/1024.0/1024 AS DECIMAL(10, 2)) AS BackupSizeMB, bs.backup_start_date, bs.backup_finish_date from msdb.dbo.backupset bs where bs.database_name = '" & Trim(vDBNAME) & "' order by bs.backup_finish_date desc, bs.backup_start_date desc", cn1)
            Dt1 = New DataTable
            Da.Fill(Dt1)
            If Dt1.Rows.Count > 0 Then
                If IsDBNull(Dt1.Rows(0)(0)) = False Then
                    vDBBACKUPSZ_in_KB = Val(Dt1.Rows(0)(0).ToString)
                End If
            End If
            Dt1.Clear()

            Dt1.Dispose()
            Da.Dispose()

            cn1.Close()
            cn1.Dispose()

        End If

        Return vDBBACKUPSZ_in_KB

    End Function


    Public Shared Function GetDriveFreespace_in_KB(ByVal Drive As String) As Long
        Dim lBytesTotal, lFreeBytes, lFreeBytesAvailable As Long
        Dim iAns As Long
        Dim vFreeBytes_IN_kb As Long = 0

        iAns = GetDiskFreeSpaceEx(Drive, lFreeBytesAvailable, lBytesTotal, lFreeBytes)
        If iAns > 0 Then
            vFreeBytes_IN_kb = (lBytesTotal / 1024)
        End If
        Return vFreeBytes_IN_kb

    End Function

    Public Shared Function get_DoffMeters_from_Daily_Production(ByVal Cn1 As SqlClient.SqlConnection, vEntryDate As Date, vEntryRolNo As String, vLOOMID As Integer, vDoffShiftName As String, vDoff_Shift_Meters As String, Other_Condition As String, vReportName As String, vKnotCode As String, ByRef vPRODMTRS_FABWISE As String) As String
        Dim cmd As New SqlClient.SqlCommand
        Dim da1 As New SqlClient.SqlDataAdapter
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt1 As New DataTable
        Dim dt2 As New DataTable
        Dim vROLLMTRS As String = 0
        Dim vORDBYNO As String
        Dim vPREVDOFFCODE As String = ""
        Dim vPREVDOFFDATE As Date = #1/1/2000#
        Dim vPREVDOFSHFTIDNO As Integer = 0
        Dim vPREVDOFSHFTMTRS As String = 0
        Dim vENTDOFFDATE As Date = #1/1/2000#
        Dim vENTDOFSHFTIDNO As Integer = 0
        Dim vENTDOFSHFTMTRS As String = 0
        Dim vDAT1 As Date = #1/1/2000#
        Dim vDAT2 As Date = #1/1/2000#
        Dim vSHFTPRODMTRS As String = 0
        Dim vWidthType As String
        Dim vCLOIDNO1 As Integer
        Dim vCLOIDNO2 As Integer
        Dim vCLOIDNO3 As Integer
        Dim vCLOIDNO4 As Integer

        vSHFTPRODMTRS = 0
        vPRODMTRS_FABWISE = ""

        If vLOOMID <> 0 Then

            If Trim(vDoffShiftName) <> "" Then

                vORDBYNO = Common_Procedures.OrderBy_CodeToValue(vEntryRolNo)

                cmd.Parameters.Clear()
                cmd.Parameters.AddWithValue("@EntryDate", vEntryDate)

                cmd.Connection = Cn1

                vENTDOFFDATE = vEntryDate

                'If vLOOMID = 27 Then
                '    Debug.Print(vLOOMID)
                'End If

                If Trim(vDoffShiftName) = "REPORT" Then
                    vENTDOFSHFTIDNO = -100
                Else
                    vENTDOFSHFTIDNO = Common_Procedures.Shift_NameToIdNo(Cn1, vDoffShiftName)
                End If

                vENTDOFSHFTMTRS = Val(vDoff_Shift_Meters)

                vPREVDOFFCODE = ""
                vPREVDOFFDATE = #1/1/2000#
                vPREVDOFSHFTIDNO = 0
                vPREVDOFSHFTMTRS = 0

                vWidthType = ""
                vCLOIDNO1 = 0
                vCLOIDNO2 = 0
                vCLOIDNO3 = 0
                vCLOIDNO4 = 0

                If Trim(LCase(vReportName)) = Trim(LCase("Running_Beam_Details_Register_AllLoom_Cummulative_Production")) Then

                    cmd.CommandText = "Select top 1 a.* from Beam_Knotting_Head a Where a.Loom_IdNo = " & Str(Val(vLOOMID)) & " and ( a.Beam_Knotting_Date < @entrydate or (a.Beam_Knotting_Date = @entrydate and a.for_orderby < " & Str(Val(vORDBYNO)) & " ) ) Order by a.Beam_Knotting_Date desc, a.for_orderby desc, a.Beam_Knotting_Code desc"
                    da1 = New SqlClient.SqlDataAdapter(cmd)
                    dt1 = New DataTable
                    da1.Fill(dt1)
                    If dt1.Rows.Count > 0 Then
                        vPREVDOFFCODE = dt1.Rows(0).Item("Beam_Knotting_Code").ToString
                        vPREVDOFFDATE = dt1.Rows(0).Item("Beam_Knotting_Date")
                        vPREVDOFSHFTIDNO = Val(dt1.Rows(0).Item("Shift_IdNo").ToString)
                        vPREVDOFSHFTMTRS = Val(dt1.Rows(0).Item("Shift_Meters").ToString)
                        vWidthType = dt1.Rows(0).Item("Width_Type").ToString
                        vCLOIDNO1 = Val(dt1.Rows(0).Item("Cloth_Idno1").ToString)
                        vCLOIDNO2 = Val(dt1.Rows(0).Item("Cloth_Idno2").ToString)
                        vCLOIDNO3 = Val(dt1.Rows(0).Item("Cloth_Idno3").ToString)
                        vCLOIDNO4 = Val(dt1.Rows(0).Item("Cloth_Idno4").ToString)
                    End If
                    dt1.Clear()

                Else

                    Dim vCONDT1 As String = ""

                    vCONDT1 = " NOT (a.Loom_IdNo = " & Str(Val(vLOOMID)) & " and Beam_Knotting_Code = '" & Trim(vKnotCode) & "' and a.Doff_Shift_IdNo = " & Str(Val(vENTDOFSHFTIDNO)) & " and a.Doff_Shift_Meters = " & Str(Val(vDoff_Shift_Meters)) & ") "

                    cmd.CommandText = "Select top 1 a.* from Weaver_Cloth_Receipt_Head a Where a.Receipt_Type = 'L' and a.Loom_IdNo = " & Str(Val(vLOOMID)) & " and " & vCONDT1 & " and ( a.Weaver_ClothReceipt_Date < @entrydate or (a.Weaver_ClothReceipt_Date = @entrydate and a.for_orderby < " & Str(Val(vORDBYNO)) & " ) ) and " & Other_Condition & " Order by a.Weaver_ClothReceipt_Date desc, a.for_orderby desc, a.Weaver_ClothReceipt_Code desc"
                    da1 = New SqlClient.SqlDataAdapter(cmd)
                    dt1 = New DataTable
                    da1.Fill(dt1)
                    If dt1.Rows.Count > 0 Then
                        vPREVDOFFCODE = dt1.Rows(0).Item("Weaver_ClothReceipt_Code").ToString
                        vPREVDOFFDATE = dt1.Rows(0).Item("Weaver_ClothReceipt_Date")
                        vPREVDOFSHFTIDNO = Val(dt1.Rows(0).Item("Doff_Shift_IdNo").ToString)
                        vPREVDOFSHFTMTRS = Val(dt1.Rows(0).Item("Doff_Shift_Meters").ToString)
                    End If
                    dt1.Clear()

                    cmd.CommandText = "Select top 1 a.* from Beam_Knotting_Head a Where a.Loom_IdNo = " & Str(Val(vLOOMID)) & " and  Beam_Knotting_Code = '" & Trim(vKnotCode) & "' "
                    da1 = New SqlClient.SqlDataAdapter(cmd)
                    dt1 = New DataTable
                    da1.Fill(dt1)
                    If dt1.Rows.Count > 0 Then
                        vWidthType = dt1.Rows(0).Item("Width_Type").ToString
                        vCLOIDNO1 = Val(dt1.Rows(0).Item("Cloth_Idno1").ToString)
                        vCLOIDNO2 = Val(dt1.Rows(0).Item("Cloth_Idno2").ToString)
                        vCLOIDNO3 = Val(dt1.Rows(0).Item("Cloth_Idno3").ToString)
                        vCLOIDNO4 = Val(dt1.Rows(0).Item("Cloth_Idno4").ToString)
                    End If
                    dt1.Clear()

                End If

                cmd.Parameters.AddWithValue("@previousdoffdate", vPREVDOFFDATE)

                vSHFTPRODMTRS = 0
                cmd.CommandText = "Select a.* from LoomNo_Production_Details a Where a.Loom_IdNo = " & Str(Val(vLOOMID)) & " and a.LoomNo_Production_Date between @previousdoffdate and @EntryDate Order by a.LoomNo_Production_Date, a.for_OrderBy, a.LoomNo_Production_Code"
                da1 = New SqlClient.SqlDataAdapter(cmd)
                dt1 = New DataTable
                da1.Fill(dt1)
                If dt1.Rows.Count > 0 Then

                    For i = 0 To dt1.Rows.Count - 1

                        If DateDiff(DateInterval.Day, vPREVDOFFDATE, dt1.Rows(i).Item("LoomNo_Production_Date")) = 0 Then

                            If DateDiff(DateInterval.Day, vENTDOFFDATE, dt1.Rows(i).Item("LoomNo_Production_Date")) = 0 Then

                                If vPREVDOFSHFTIDNO = vENTDOFSHFTIDNO Then

                                    vSHFTPRODMTRS = Format(Val(vSHFTPRODMTRS) + (Val(vENTDOFSHFTMTRS) - Val(vPREVDOFSHFTMTRS)), "##########0.00")

                                Else

                                    If vENTDOFSHFTIDNO = -100 Then
                                        GoTo GOTOLABEL1
                                    ElseIf vPREVDOFSHFTIDNO = 2 Or vPREVDOFSHFTIDNO = 5 Or vPREVDOFSHFTIDNO = 7 Then
                                        vSHFTPRODMTRS = Format(Val(vSHFTPRODMTRS) + (Val(dt1.Rows(i).Item("Shift2_Mtrs").ToString) - Val(vPREVDOFSHFTMTRS)) + Val(vENTDOFSHFTMTRS), "##########0.00")
                                    Else
                                        vSHFTPRODMTRS = Format(Val(vSHFTPRODMTRS) + (Val(dt1.Rows(i).Item("Shift1_Mtrs").ToString) - Val(vPREVDOFSHFTMTRS)) + Val(vENTDOFSHFTMTRS), "##########0.00")
                                    End If

                                End If


                            Else

GOTOLABEL1:
                                If vPREVDOFSHFTIDNO = 2 Or vPREVDOFSHFTIDNO = 5 Or vPREVDOFSHFTIDNO = 7 Then
                                    vSHFTPRODMTRS = Format(Val(vSHFTPRODMTRS) + (Val(dt1.Rows(i).Item("Shift2_Mtrs").ToString) - Val(vPREVDOFSHFTMTRS)), "##########0.00")
                                Else
                                    vSHFTPRODMTRS = Format(Val(vSHFTPRODMTRS) + (Val(dt1.Rows(i).Item("Shift1_Mtrs").ToString) - Val(vPREVDOFSHFTMTRS)) + Val(dt1.Rows(i).Item("Shift2_Mtrs").ToString), "##########0.00")
                                End If

                            End If

                        ElseIf DateDiff(DateInterval.Day, vENTDOFFDATE, dt1.Rows(i).Item("LoomNo_Production_Date")) = 0 Then

                            If vENTDOFSHFTIDNO = -100 Then
                                GoTo GOTOLABEL2
                            ElseIf vENTDOFSHFTIDNO = 2 Or vENTDOFSHFTIDNO = 5 Or vENTDOFSHFTIDNO = 7 Then
                                vSHFTPRODMTRS = Format(Val(vSHFTPRODMTRS) + Val(dt1.Rows(i).Item("Shift1_Mtrs").ToString) + Val(vENTDOFSHFTMTRS), "##########0.00")
                            Else
                                vSHFTPRODMTRS = Format(Val(vSHFTPRODMTRS) + Val(vENTDOFSHFTMTRS), "##########0.00")
                            End If


                        Else

GOTOLABEL2:
                            vSHFTPRODMTRS = Format(Val(vSHFTPRODMTRS) + Val(dt1.Rows(i).Item("Shift1_Mtrs").ToString) + Val(dt1.Rows(i).Item("Shift2_Mtrs").ToString), "##########0.00")

                        End If


                    Next i

                End If

                dt1.Clear()

                If Trim(vKnotCode) <> "" Then

                    Dim WidTyp As Integer
                    Dim vCLOIDAr(10) As String
                    Dim vPRDMTR_CLOWS_Ar(10, 10) As String
                    Dim vMXINDX As Integer
                    Dim I, J, K As Integer
                    Dim vCNT As Integer
                    Dim vDUP_CLODIDNOS As String
                    Dim vPRDMTS_CLOWISE As String

                    WidTyp = 0
                    If Trim(UCase(vWidthType)) = "SIX" Or InStr(1, Trim(UCase(vWidthType)), "SIX") > 0 Then
                        WidTyp = 6
                    ElseIf Trim(UCase(vWidthType)) = "FIVE" Or InStr(1, Trim(UCase(vWidthType)), "FIVE") > 0 Then
                        WidTyp = 5
                    ElseIf Trim(UCase(vWidthType)) = "FOURTH" Or InStr(1, Trim(UCase(vWidthType)), "FOURTH") > 0 Or InStr(1, Trim(UCase(vWidthType)), "FOUR") > 0 Then
                        WidTyp = 4
                    ElseIf Trim(UCase(vWidthType)) = "TRIPLE" Or InStr(1, Trim(UCase(vWidthType)), "TRIPLE") > 0 Then
                        WidTyp = 3
                    ElseIf Trim(UCase(vWidthType)) = "DOUBLE" Or InStr(1, Trim(UCase(vWidthType)), "DOUBLE") > 0 Then
                        WidTyp = 2
                    Else 'If Trim(UCase(vWidthType)) = "SINGLE" Or InStr(1, Trim(UCase(vWidthType)), "SINGLE") > 0 Then
                        WidTyp = 1
                    End If

                    Erase vCLOIDAr
                    vCLOIDAr = New String(10) {}

                    If Val(vCLOIDNO1) <> 0 Then
                        vCLOIDAr(1) = vCLOIDNO1
                    End If
                    If Val(vCLOIDNO2) <> 0 Then
                        vCLOIDAr(2) = vCLOIDNO2
                    End If
                    If Val(vCLOIDNO3) <> 0 Then
                        vCLOIDAr(3) = vCLOIDNO3
                    End If
                    If Val(vCLOIDNO4) <> 0 Then
                        vCLOIDAr(4) = vCLOIDNO4
                    End If

                    vMXINDX = 0
                    vCNT = 0
                    vDUP_CLODIDNOS = ""

                    Erase vPRDMTR_CLOWS_Ar
                    vPRDMTR_CLOWS_Ar = New String(10, 10) {}

                    For I = 1 To 4
                        If Val(vCLOIDAr(I)) <> 0 Then
                            If InStr(1, Trim(UCase(vDUP_CLODIDNOS)), Trim(UCase("~" & Trim(Val(vCLOIDAr(I))) & "~"))) = 0 Then

                                vCNT = 1
                                For J = I + 1 To 4
                                    If Val(vCLOIDAr(I)) = Val(vCLOIDAr(J)) Then
                                        vCNT = vCNT + 1
                                    End If
                                Next J

                                vMXINDX = vMXINDX + 1
                                vPRDMTR_CLOWS_Ar(vMXINDX, 1) = Val(vCLOIDAr(I))
                                vPRDMTR_CLOWS_Ar(vMXINDX, 2) = vCNT

                                vDUP_CLODIDNOS = Trim(vDUP_CLODIDNOS) & "~" & Trim(Val(vCLOIDAr(I))) & "~"

                            End If

                        End If

                    Next I

                    Dim vMTRS As String = 0

                    vPRDMTS_CLOWISE = ""
                    For K = 1 To vMXINDX

                        If Val(vPRDMTR_CLOWS_Ar(K, 1)) <> 0 And Val(vPRDMTR_CLOWS_Ar(K, 2)) <> 0 Then

                            vMTRS = Format(Val(vSHFTPRODMTRS) / WidTyp * Val(vPRDMTR_CLOWS_Ar(K, 2)), "#########0.00")

                            vPRDMTS_CLOWISE = Trim(vPRDMTS_CLOWISE) & IIf(Trim(vPRDMTS_CLOWISE) <> "", "|", "") & Trim(Val(vPRDMTR_CLOWS_Ar(K, 1))) & "~" & Trim(vMTRS)

                        End If


                    Next

                    vPRODMTRS_FABWISE = Trim(vPRDMTS_CLOWISE)


                End If
            End If

        End If

        Return Trim(Format(Val(vSHFTPRODMTRS), "#########0.00"))

    End Function


    Public Shared Function Fibre_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vFibre_ID As Integer, Optional ByVal DbName As String = "") As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vFib_Nm As String


        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If

        Da = New SqlClient.SqlDataAdapter("select Fibre_Name from " & Trim(DbName) & " Fibre_Head where Fibre_IdNo = " & Str(Val(vFibre_ID)), Cn1)
        Da.Fill(Dt)

        vFib_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vFib_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Fibre_IdNoToName = Trim(vFib_Nm)

    End Function

    Public Shared Function Fibre_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vFib_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vFib_ID As Integer

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If

        Da = New SqlClient.SqlDataAdapter("select Fibre_IdNo from " & Trim(DbName) & "Fibre_Head where Fibre_Name = '" & Trim(vFib_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vFib_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vFib_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Fibre_NameToIdNo = Val(vFib_ID)

    End Function

    Public Shared Function Slevedge_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCloth_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vCloth_ID As Integer

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Slevedge_IdNo from  " & Trim(DbName) & " Slevedge_Head where Slevedge_Name = '" & Trim(vCloth_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vCloth_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vCloth_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Slevedge_NameToIdNo = Val(vCloth_ID)

    End Function

    Public Shared Function Slevedge_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vCloth_ID As Integer, Optional ByVal DbName As String = "") As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vCloth_Nm As String

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If

        Da = New SqlClient.SqlDataAdapter("select Slevedge_Name from " & Trim(DbName) & " Slevedge_Head where Slevedge_IdNo = " & Str(Val(vCloth_ID)), Cn1)
        Da.Fill(Dt)

        vCloth_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vCloth_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Slevedge_IdNoToName = Trim(vCloth_Nm)

    End Function

    Public Shared Function Check_Duplicate_LedgerName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vLedgrIdNo As String, ByVal vSURName As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As Boolean
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vLed_ID As Integer
        Dim vLed_TYP As String

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Ledger_IdNo, Ledger_Type from  " & Trim(DbName) & " Ledger_Head where Ledger_IdNo <> " & Str(Val(vLedgrIdNo)) & " and Sur_Name = '" & Trim(vSURName) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        vLed_ID = 0
        vLed_TYP = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vLed_ID = Val(Dt.Rows(0)(0).ToString)
            End If
            If IsDBNull(Dt.Rows(0)(1).ToString) = False Then
                vLed_TYP = Dt.Rows(0)(1).ToString
            End If

        End If

        Dt.Dispose()
        Da.Dispose()

        If Val(vLed_ID) <> 0 Then
            If Trim(vLed_TYP) = "" Then vLed_TYP = "LEDGER"
            MessageBox.Show("Duplicate Ledger Name" & Chr(13) & "It is already entered in the " & vLed_TYP & " Creation with ID = " & vLed_ID, "DOES NOT SAVE", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            Return True
        Else
            Return False
        End If

    End Function


    Public Shared Sub Printing_Format_PackingList_1438(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByRef prn_DetDt As DataTable, ByVal prn_HdMxIndx As Integer, ByVal prn_DetMxIndx1 As Integer, ByRef prn_HdAr(,) As String, ByRef prn_DetAr1(,) As String, ByRef prn_PageNo As Integer, ByRef prn_Count As Integer, ByRef prn_HdIndx As Integer, ByRef prn_DetIndx As Integer, prn_NoofBmDets As Integer, ByVal vWeight_Column_Status As Integer, Packing_SlipNo As String, ClothSales_Inv_No As String, ClothSales_Inv_Date As String, PartyName As String, PartyCityName As String, DeliveryTo_Name As String, Cloth_name As String, Pack_Type_Name As String, Tot_Pcs As String, Tot_Mtrs As String, Tot_Wgt As String, Vehicle_No As String, Fold As String, vParty_OrderNo As String, vParty_OrderDate As String, Optional vPACKINGSLIPDATE As String = "")
        Dim NoofDets As Integer, NoofItems_PerPage As Integer
        Dim pFont As Font, P1fONT As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single
        Dim LnAr(20) As Single, ClArr(20) As Single
        Dim ps As Printing.PaperSize
        Dim strHeight As Single = 0
        Dim PpSzSTS As Boolean = False
        Dim LM As Single = 0, TM As Single = 0
        Dim PgWt As Single = 0, PrWt As Single = 0
        Dim PgHt As Single = 0, PrHt As Single = 0
        Dim bale_no As String = ""
        Dim da3 As New SqlClient.SqlDataAdapter
        Dim dt3 As New DataTable
        Dim i, j, k, s As Integer


        For i = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(i).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(i)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                e.PageSettings.PaperSize = ps
                PrintDocument1.DefaultPageSettings.Landscape = False
                Exit For
            End If
        Next

        With PrintDocument1.DefaultPageSettings.Margins
            If PrintDocument1.DefaultPageSettings.Landscape = True Then
                .Left = 5
                .Right = 30
                .Top = 40
                .Bottom = 30
                LMargin = .Left
                RMargin = .Right
                TMargin = .Top
                BMargin = .Bottom

            Else
                .Left = 10
                .Right = 50
                .Top = 35
                .Bottom = 40
                LMargin = .Left
                RMargin = .Right
                TMargin = .Top
                BMargin = .Bottom

            End If
        End With

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With
        If PrintDocument1.DefaultPageSettings.Landscape = True Then
            With PrintDocument1.DefaultPageSettings.PaperSize
                PrintWidth = .Height - TMargin - BMargin
                PrintHeight = .Width - RMargin - LMargin
                PageWidth = .Height - TMargin
                PageHeight = .Width - RMargin
            End With
        End If

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        pFont = New Font("Calibri", 10, FontStyle.Regular)
        P1fONT = New Font("Calibri", 10, FontStyle.Regular)

        NoofItems_PerPage = 33 ' 29

        Erase ClArr
        Erase LnAr
        ClArr = New Single(20) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        LnAr = New Single(20) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = 80 : ClArr(2) = 250 : ClArr(3) = 150 : ClArr(4) = 150
        ClArr(5) = PageWidth - (ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4))

        TxtHgt = 17 ' e.Graphics.MeasureString("A", pFont).Height  ' 20

        Try

            If prn_DetDt.Rows.Count > 0 Then

                If prn_HdMxIndx > 0 Then

                    Erase LnAr
                    LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

                    Printing_Format_PackingList_1438_PageHeader(PrintDocument1, e, prn_HdDt, prn_HdAr, TxtHgt, pFont, LMargin, RMargin, TM, BMargin, PageWidth, PrintWidth, prn_PageNo, NoofItems_PerPage, CurY, LnAr, ClArr, prn_HdIndx, prn_Count, Packing_SlipNo, ClothSales_Inv_No, ClothSales_Inv_Date, vParty_OrderNo, vParty_OrderDate, Cloth_name, Vehicle_No, vWeight_Column_Status, Fold, vPACKINGSLIPDATE)
                    CurY = CurY - 10

                    NoofDets = 0
                    Do While prn_DetIndx <= prn_DetMxIndx1

                        If NoofDets >= NoofItems_PerPage Then

                            CurY = CurY + TxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 10, CurY, 1, 0, pFont)
                            NoofDets = NoofDets + 1

                            Printing_Format_PackingList_1438_PageFooter(e, prn_HdDt, prn_HdAr, TxtHgt, pFont, LMargin, RMargin, TM, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_HdIndx, False, vWeight_Column_Status, Tot_Pcs, Tot_Mtrs, Tot_Wgt)

                            e.HasMorePages = True

                            Return

                        End If

                        prn_DetIndx = prn_DetIndx + 1

                        CurY = CurY + TxtHgt

                        Common_Procedures.Print_To_PrintDocument(e, prn_DetAr1(prn_DetIndx, 0), LMargin + 10, CurY, 0, 0, pFont)
                        Common_Procedures.Print_To_PrintDocument(e, prn_DetAr1(prn_DetIndx, 2), LMargin + ClArr(1) + 10, CurY, 0, 0, pFont)

                        Common_Procedures.Print_To_PrintDocument(e, prn_DetAr1(prn_DetIndx, 3), LMargin + ClArr(1) + ClArr(2) + 10, CurY, 0, 0, pFont)

                        If vWeight_Column_Status = True Then
                            Common_Procedures.Print_To_PrintDocument(e, prn_DetAr1(prn_DetIndx, 4), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 10, CurY, 1, 0, pFont)
                            Common_Procedures.Print_To_PrintDocument(e, prn_DetAr1(prn_DetIndx, 6), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 20, CurY, 1, 0, pFont)
                        End If

                        NoofDets = NoofDets + 1

                    Loop

                    Printing_Format_PackingList_1438_PageFooter(e, prn_HdDt, prn_HdAr, TxtHgt, pFont, LMargin, RMargin, TM, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_HdIndx, True, vWeight_Column_Status, Tot_Pcs, Tot_Mtrs, Tot_Wgt)

                End If

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

        e.HasMorePages = False

    End Sub

    Private Shared Sub Printing_Format_PackingList_1438_PageHeader(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal prn_HdIndx As Integer, ByRef prn_Count As Integer, prn_PACKINGLISTNO As String, vClothSales_Invoice_No As String, vClothSales_Invoice_Date As String, vParty_OrderNo As String, vParty_OrderDate As String, vCLOTH_NAME As String, vVechile_No As String, vPrnt_PackSlip_Wgt As Boolean, vFOLDING As String, Optional vPACKINGSLIPDATE As String = "")
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim dt3 As New DataTable
        Dim dt4 As New DataTable
        Dim p1Font As Font
        Dim strWIDTH As Single
        Dim strHeight As Single
        Dim Cmp_Add As String = ""
        Dim C1 As Single, W1, W2 As Single, S1, S2 As Single
        Dim Cmp_Name As String, Cmp_Add1 As String, Cmp_Add2 As String, Cmp_Add3 As String, City As String
        Dim Cmp_PhNo As String, Cmp_TinNo As String, Cmp_CstNo As String, Cmp_PanNo As String
        Dim Cmp_State As String, Cmp_StateCode As String, Cmp_GSTIN_No As String, Cmp_EMail As String
        Dim Cmp_StateCap As String, Cmp_StateNm As String
        Dim Desc As String, Cmp_PanCap As String
        Dim Cmp_GSTIN_Cap As String

        PageNo = PageNo + 1

        CurY = TMargin + 30

        'da2 = New SqlClient.SqlDataAdapter("select a.*, b.Ledger_Name, c.Ledger_Name, d.Company_Description as Transport_Name from ClothSales_Invoice_Head a  INNER JOIN Ledger_Head b ON b.Ledger_IdNo = a.Ledger_Idno LEFT OUTER JOIN Ledger_Head c ON c.Ledger_IdNo = a.Transport_IdNo LEFT OUTER JOIN Company_Head d ON d.Company_IdNo = a.Company_IdNo where a.Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and a.ClothSales_Invoice_Code = '" & Trim(EntryCode) & "' Order by a.For_OrderBy", con)
        'da2.Fill(dt2)
        'If dt2.Rows.Count > NoofItems_PerPage Then
        '    Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(PageNo)), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
        'End If
        'dt2.Clear()

        prn_Count = prn_Count + 1

        p1Font = New Font("Calibri", 15, FontStyle.Bold)

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY
        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = "" : Cmp_Add3 = "" : City = ""

        Cmp_PhNo = "" : Cmp_TinNo = "" : Cmp_CstNo = "" : Cmp_PanNo = ""
        Cmp_State = "" : Cmp_StateCode = "" : Cmp_GSTIN_No = "" : Cmp_EMail = ""


        Desc = ""
        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
        Cmp_PhNo = "" : Cmp_TinNo = "" : Cmp_CstNo = "" : Cmp_PanNo = "" : Cmp_EMail = "" : Cmp_PanCap = ""
        Cmp_StateCap = "" : Cmp_StateNm = "" : Cmp_StateCode = "" : Cmp_GSTIN_Cap = "" : Cmp_GSTIN_No = ""

        Desc = prn_HdDt.Rows(0).Item("Company_Description").ToString
        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString

        If Trim(prn_HdDt.Rows(0).Item("Company_Factory_Address1").ToString) <> "" Or Trim(prn_HdDt.Rows(0).Item("Company_Factory_Address2").ToString) <> "" Or Trim(prn_HdDt.Rows(0).Item("Company_Factory_Address3").ToString) <> "" Or Trim(prn_HdDt.Rows(0).Item("Company_Factory_Address4").ToString) <> "" Then
            Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Factory_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Factory_Address2").ToString & " " & prn_HdDt.Rows(0).Item("Company_Factory_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Factory_Address4").ToString

        Else
            Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString
            Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        End If

        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = "Phone : " & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_TinNo").ToString) <> "" Then
            Cmp_TinNo = "TIN NO : " & prn_HdDt.Rows(0).Item("Company_TinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
            Cmp_CstNo = "CST NO : " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_PanNo").ToString) <> "" Then
            Cmp_PanCap = "PAN : "
            Cmp_PanNo = prn_HdDt.Rows(0).Item("Company_PanNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_EMail").ToString) <> "" Then
            Cmp_EMail = "Email : " & prn_HdDt.Rows(0).Item("Company_EMail").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_State_Name").ToString) <> "" Then
            Cmp_StateCap = "STATE : "
            Cmp_StateNm = prn_HdDt.Rows(0).Item("Company_State_Name").ToString
            If Trim(prn_HdDt.Rows(0).Item("Company_State_Code").ToString) <> "" Then
                Cmp_StateNm = Cmp_StateNm & "   CODE : " & prn_HdDt.Rows(0).Item("Company_State_Code").ToString
            End If
        End If

        CurY = CurY + TxtHgt - 5
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height



        If Trim(prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString) <> "" Then
            Cmp_GSTIN_No = "GSTIN :" & prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString
        End If

        Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font)
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

        CurY = CurY + strHeight
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1, LMargin + 10, CurY, 2, PrintWidth, pFont)

        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont)

        If Trim(Cmp_Add3) <> "" Then
            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Add3 & ", " & City, LMargin + 10, CurY, 2, PrintWidth, pFont)
        End If

        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, Cmp_GSTIN_No, LMargin + 10, CurY, 2, PrintWidth, pFont)

        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin + 10, CurY, 2, PrintWidth, pFont)
        If Trim(Cmp_EMail) <> "" Then
            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, Cmp_EMail, LMargin + 10, CurY, 2, PrintWidth, pFont)
        End If

        CurY = CurY + TxtHgt - 12
        p1Font = New Font("Calibri", 16, FontStyle.Bold)
        CurY = CurY + TxtHgt
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        CurY = CurY + TxtHgt - 12

        Common_Procedures.Print_To_PrintDocument(e, "PACKING LIST", LMargin, CurY, 2, PrintWidth, p1Font)

        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

        CurY = CurY + TxtHgt + 12
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(2) = CurY

        C1 = ClAr(1) + ClAr(2) + ClAr(3)
        W1 = e.Graphics.MeasureString("PACKING LIST NO.   : ", pFont).Width
        S1 = e.Graphics.MeasureString("TO     :    ", pFont).Width
        W2 = e.Graphics.MeasureString("Despatch To   : ", pFont).Width
        S2 = e.Graphics.MeasureString("Sent Through  : ", pFont).Width


        CurY = CurY + 5
        p1Font = New Font("Calibri", 12, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, "TO  :  " & "M/s." & prn_HdDt.Rows(0).Item("Ledger_mainName").ToString, LMargin + 10, CurY, 0, 0, p1Font)

        If Trim(prn_PACKINGLISTNO) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, "PACKING LIST No.", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Trim(prn_PACKINGLISTNO), LMargin + C1 + W1 + 30, CurY, 0, 0, p1Font)
        End If


        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, " " & prn_HdDt.Rows(0).Item("Ledger_Address1").ToString, LMargin + S1 + 10, CurY, 0, 0, pFont)
        p1Font = New Font("Calibri", 14, FontStyle.Bold)



        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, " " & prn_HdDt.Rows(0).Item("Ledger_Address2").ToString, LMargin + S1 + 10, CurY, 0, 0, pFont)
        If Trim(vClothSales_Invoice_No) <> "" Then

            Dim YInc As Single = 0
            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1274" Then
                YInc = TxtHgt
            End If

            Common_Procedures.Print_To_PrintDocument(e, "INVOICE NO", LMargin + C1 + 10, CurY - YInc, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY - YInc, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, vClothSales_Invoice_No, LMargin + C1 + W1 + 30, CurY - YInc, 0, 0, p1Font)
        End If

        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, " " & prn_HdDt.Rows(0).Item("Ledger_Address3").ToString, LMargin + S1 + 10, CurY, 0, 0, pFont)
        If Trim(vClothSales_Invoice_Date) <> "" Then
            If IsDate(vClothSales_Invoice_Date) = True Then
                Common_Procedures.Print_To_PrintDocument(e, "INVOICE DATE", LMargin + C1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(vClothSales_Invoice_Date), "dd-MM-yyyy").ToString, LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)
            End If
        ElseIf Trim(vPACKINGSLIPDATE) <> "" Then
            If IsDate(vPACKINGSLIPDATE) = True Then
                Common_Procedures.Print_To_PrintDocument(e, "PACKINGSLIP DATE", LMargin + C1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(vPACKINGSLIPDATE), "dd-MM-yyyy").ToString, LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)
            End If
        End If

        ' vVechile_No As String


        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, " " & prn_HdDt.Rows(0).Item("Ledger_Address4").ToString, LMargin + S1 + 10, CurY, 0, 0, pFont)
        If Trim(vParty_OrderNo) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, "PARTY P.O NO", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, vParty_OrderNo, LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)
        End If

        CurY = CurY + TxtHgt
        If Trim(prn_HdDt.Rows(0).Item("Ledger_GSTinNo").ToString) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, " GSTIN : " & prn_HdDt.Rows(0).Item("Ledger_GSTinNo").ToString, LMargin + S1 + 10, CurY, 0, 0, pFont)
        End If
        If Trim(vParty_OrderDate) <> "" Then
            If IsDate(vParty_OrderDate) = True Then
                Common_Procedures.Print_To_PrintDocument(e, "PARTY P.O DATE", LMargin + C1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, vParty_OrderDate, LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)
            End If
        End If

        CurY = CurY + TxtHgt
        If Trim(vVechile_No) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, "VEHICLE NO ", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, vVechile_No, LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)
        End If

        CurY = CurY + TxtHgt
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        e.Graphics.DrawLine(Pens.Black, LMargin + C1, CurY, LMargin + C1, LnAr(2))

        Try

            CurY = CurY + 5
            Common_Procedures.Print_To_PrintDocument(e, "QUALITY", LMargin + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, vCLOTH_NAME, LMargin + W1 + 25, CurY, 0, 0, pFont)

            If Val(vFOLDING) > 0 Then

                strWIDTH = e.Graphics.MeasureString(vCLOTH_NAME, pFont).Width


                If (LMargin + W1 + 25 + strWIDTH + 10) > C1 Then
                    Common_Procedures.Print_To_PrintDocument(e, "FOLDING : " & Val(vFOLDING), PageWidth - 25, CurY, 1, 0, pFont)

                Else
                    Common_Procedures.Print_To_PrintDocument(e, "FOLDING", LMargin + C1 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Val(vFOLDING), LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)

                End If

            End If




            CurY = CurY + TxtHgt + 5
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(2) = CurY

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "SL NO", LMargin, CurY, 2, ClAr(1), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "ROLL No.", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "METERS", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)

            If vPrnt_PackSlip_Wgt = True Then
                Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(4), pFont)
                Common_Procedures.Print_To_PrintDocument(e, "GRAMS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(5), pFont)
            End If

            CurY = CurY + TxtHgt + 5
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(3) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Shared Sub Printing_Format_PackingList_1438_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal NoofDets As Integer, ByVal prn_HdIndx As Integer, ByVal is_LastPage As Boolean, vPrnt_PackSlip_Wgt As Boolean, prn_TotalPcs As String, prn_TotalMtrs As String, prn_TotalWgt As String)
        Dim I As Integer
        Dim p1Font As Font
        Dim Cmp_Name As String

        Try

            For I = NoofDets + 1 To NoofItems_PerPage
                CurY = CurY + TxtHgt
            Next

            CurY = CurY + TxtHgt + 5
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(5) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY, LMargin + ClAr(1), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY, LMargin + ClAr(1) + ClAr(2), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), LnAr(2))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), LnAr(2))

            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(2))


            If is_LastPage = True Then

                CurY = CurY + TxtHgt - 10



                Common_Procedures.Print_To_PrintDocument(e, "TOTAL : ", LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_TotalPcs), "#########0"), LMargin + ClAr(1) + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_TotalMtrs), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) - 10, CurY, 1, 0, pFont)

                If vPrnt_PackSlip_Wgt = True Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_TotalWgt), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) - 10, CurY, 1, 0, pFont)
                    If Val(prn_TotalWgt) <> 0 Then
                        Common_Procedures.Print_To_PrintDocument(e, Format((Val(prn_TotalWgt) / Val(prn_TotalMtrs)), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) - 20, CurY, 1, 0, pFont)
                    End If
                End If

            End If

            CurY = CurY + TxtHgt + 5
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(6) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY, LMargin + ClAr(1), LnAr(5))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY, LMargin + ClAr(1) + ClAr(2), LnAr(5))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3), LnAr(5))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), LnAr(5))

            CurY = CurY + TxtHgt - 10
            Dim len1 As Integer = 0

            p1Font = New Font("Calibri", 12, FontStyle.Bold)
            Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
            Common_Procedures.Print_To_PrintDocument(e, "For " & Cmp_Name, PageWidth - 5, CurY, 1, 0, p1Font)

            CurY = CurY + TxtHgt

            CurY = CurY + TxtHgt

            CurY = CurY + TxtHgt


            Common_Procedures.Print_To_PrintDocument(e, "Authorised Signatory", PageWidth - 5, CurY, 1, 0, pFont)

            CurY = CurY + TxtHgt + 10

            CurY = CurY + TxtHgt - 5

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

            e.Graphics.DrawLine(Pens.Black, LMargin, LnAr(1), LMargin, CurY)
            e.Graphics.DrawLine(Pens.Black, PageWidth, LnAr(1), PageWidth, CurY)


        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub

    Public Shared Function get_Weaver_From_WeaverSelection(ByVal Cn1 As SqlClient.SqlConnection) As String
        Dim da As SqlClient.SqlDataAdapter
        Dim dt1 As New DataTable
        Dim NoofComps As Integer
        Dim CompCondt As String
        Dim CompNm As String
        Dim VWeaverNmp As String = ""

        CompNm = ""
        Common_Procedures.VWeavIdno = 0

        Try

            CompCondt = ""
            'If Trim(UCase(Common_Procedures.User.Type)) <> "UNACCOUNT" Then
            CompCondt = "(Ledger_Type = 'WEAVER' or Ledger_Type = 'JOBWORKER' )"
            'End If



            Dim f As New Weaver_Selection
            f.ShowDialog()

            If Val(Common_Procedures.VWeavIdno) <> 0 Then


                da = New SqlClient.SqlDataAdapter("select ledger_idno, Ledger_DisplayName from Ledger_AlaisHead WHERE ledger_idno =  " & Str(Val(Common_Procedures.VWeavIdno)) & " ", Cn1)
                dt1 = New DataTable
                da.Fill(dt1)

                If dt1.Rows.Count > 0 Then

                    If IsDBNull(dt1.Rows(0)(0).ToString) = False Then
                        Common_Procedures.VWeavIdno = Val(dt1.Rows(0)(0).ToString)
                        VWeaverNmp = Trim(dt1.Rows(0)(1).ToString)
                        'VWeaverNmp = Trim(dt1.Rows(0)(1).ToString) & "  -  " & Trim(dt1.Rows(0)(2).ToString)

                    End If
                End If
                dt1.Clear()

            Else

                MessageBox.Show("Invalid Weaver Selection", "DOES NOT SELECT...", MessageBoxButtons.OK, MessageBoxIcon.Error)
                Common_Procedures.VWeavIdno = 0
                get_Weaver_From_WeaverSelection = ""
                Exit Function

            End If




        Catch ex As Exception
            'MessageBox.Show(ex.Message, "DOES NOT SHOW...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

        get_Weaver_From_WeaverSelection = Trim(VWeaverNmp)

    End Function

    Public Shared Function Show_WeaverSelection_On_FormClose(ByVal Cn1 As SqlClient.SqlConnection) As String
        Dim da As SqlClient.SqlDataAdapter
        Dim dt1 As New DataTable
        Dim NoofComps As Integer
        Dim CompCondt As String
        Dim CompNm As String

        CompNm = ""
        Common_Procedures.VWeavIdno = 0

        Try

            CompCondt = ""
            If Trim(UCase(Common_Procedures.User.Type)) = "ACCOUNT" Then
                CompCondt = "(Ledger_Type = 'WEAVER' or Ledger_Type = 'JOBWORKER' )"
            End If

            da = New SqlClient.SqlDataAdapter("select count(*) from Ledger_AlaisHead Where " & CompCondt & IIf(Trim(CompCondt) <> "", " and ", "") & " Ledger_idno <> 0", Cn1)
            dt1 = New DataTable
            da.Fill(dt1)

            NoofComps = 0
            If dt1.Rows.Count > 0 Then
                If IsDBNull(dt1.Rows(0)(0).ToString) = False Then
                    NoofComps = Val(dt1.Rows(0)(0).ToString)
                End If
            End If
            dt1.Clear()

            If Val(NoofComps) > 1 Then

                Dim f As New Weaver_Selection
                f.ShowDialog()

                If Val(Common_Procedures.VWeavIdno) <> 0 Then

                    da = New SqlClient.SqlDataAdapter("select Ledger_IDNO,Ledger_DisplayName from Ledger_AlaisHead where LEDGER_IdNo = " & Str(Val(Common_Procedures.VWeavIdno)), Cn1)
                    dt1 = New DataTable
                    da.Fill(dt1)

                    If dt1.Rows.Count > 0 Then
                        If IsDBNull(dt1.Rows(0)(0).ToString) = False Then
                            Common_Procedures.VWeavIdno = Val(dt1.Rows(0)(0).ToString)
                            CompNm = Trim(dt1.Rows(0)(1).ToString)
                            '     CompNm = Trim(dt1.Rows(0)(1).ToString) & "  -  " & Trim(dt1.Rows(0)(2).ToString)
                        End If
                    End If
                    dt1.Clear()

                End If

            End If


        Catch ex As Exception
            'MessageBox.Show(ex.Message, "DOES NOT SHOW...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

        Show_WeaverSelection_On_FormClose = Trim(CompNm)

    End Function
    Public Shared Function Stamping_NameToIdno(ByVal con As SqlClient.SqlConnection, ByVal VStmp_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As Integer

        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vStmp_IdNo As Integer

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If

        Da = New SqlClient.SqlDataAdapter("select stamping_idno from  " & Trim(DbName) & "  Stamping_Head where Stamping_Name ='" & Trim(VStmp_Name) & "' ", con)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)


        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vStmp_IdNo = Val(Dt.Rows(0)(0).ToString)

            End If

        End If

        Da.Dispose()
        Dt.Dispose()


        Stamping_NameToIdno = Val(vStmp_IdNo)


    End Function

    Public Shared Function Stamping_IdnoToName(ByVal con As SqlClient.SqlConnection, ByVal VStmp_Idno As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As String

        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vStmp_Name As String = ""

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If

        Da = New SqlClient.SqlDataAdapter("select Stamping_Name from " & Trim(DbName) & " Stamping_Head  where stamping_idno= " & Val(VStmp_Idno) & " ", con)

        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If

        Dt = New DataTable
        Da.Fill(Dt)

        If Dt.Rows.Count > 0 Then
            If Not IsDBNull(Dt.Rows(0)(0).ToString) Then

                vStmp_Name = Trim(Dt.Rows(0)(0).ToString)

            End If
        End If

        Da.Dispose()
        Dt.Dispose()

        Stamping_IdnoToName = Trim(vStmp_Name)


    End Function

    Public Shared Function get_BeamKnotting_TotalProductionMeters_from_PieceChecking(ByVal Cn1 As SqlClient.SqlConnection, ByVal vBeamKnottingCode As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim cmd As New SqlClient.SqlCommand
        Dim da As SqlClient.SqlDataAdapter
        Dim dt1 As New DataTable
        Dim vBEAMKnot_ProdMeters As String

        vBEAMKnot_ProdMeters = 0

        If Trim(vBeamKnottingCode) <> "" Then

            vBEAMKnot_ProdMeters = 0

            cmd.Connection = Cn1
            cmd.CommandTimeout = 1000
            cmd.CommandType = CommandType.StoredProcedure
            cmd.CommandText = "SP_get_BeamKnotting_TotalProductionMeters_from_PieceChecking"
            cmd.Parameters.Add("@beamknottingcode", SqlDbType.VarChar)
            cmd.Parameters("@beamknottingcode").Value = Trim(vBeamKnottingCode)

            da = New SqlClient.SqlDataAdapter(cmd)
            If IsNothing(sqltr) = False Then
                da.SelectCommand.Transaction = sqltr
            End If
            dt1 = New DataTable
            da.Fill(dt1)
            If dt1.Rows.Count > 0 Then
                If IsDBNull(dt1.Rows(0)(0).ToString) = False Then
                    vBEAMKnot_ProdMeters = Format(Val(dt1.Rows(0)(0).ToString), "##########0.00")
                End If
            End If
            dt1.Clear()


        End If

        Return vBEAMKnot_ProdMeters

    End Function

    Public Shared Function get_BeamKnotting_TotalProductionMeters_from_Doffing(ByVal Cn1 As SqlClient.SqlConnection, ByVal vBeamKnottingCode As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim cmd As New SqlClient.SqlCommand
        Dim da As SqlClient.SqlDataAdapter
        Dim dt1 As New DataTable
        Dim vBEAMKnot_ProdMeters As String

        vBEAMKnot_ProdMeters = 0

        If Trim(vBeamKnottingCode) <> "" Then

            vBEAMKnot_ProdMeters = 0

            cmd.Connection = Cn1
            cmd.CommandTimeout = 1000
            cmd.CommandType = CommandType.StoredProcedure
            cmd.CommandText = "SP_get_BeamKnotting_TotalProductionMeters_from_Doffing"
            cmd.Parameters.Add("@beamknottingcode", SqlDbType.VarChar)
            cmd.Parameters("@beamknottingcode").Value = Trim(vBeamKnottingCode)

            da = New SqlClient.SqlDataAdapter(cmd)
            If IsNothing(sqltr) = False Then
                da.SelectCommand.Transaction = sqltr
            End If
            dt1 = New DataTable
            da.Fill(dt1)
            If dt1.Rows.Count > 0 Then
                If IsDBNull(dt1.Rows(0)(0).ToString) = False Then
                    vBEAMKnot_ProdMeters = Format(Val(dt1.Rows(0)(0).ToString), "##########0.00")
                End If
            End If
            dt1.Clear()


        End If

        Return vBEAMKnot_ProdMeters

    End Function

    Public Shared Function TipType_NameToIdno(ByVal con As SqlClient.SqlConnection, ByVal VTipType_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As Integer

        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vTipType_IdNo As Integer

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If

        Da = New SqlClient.SqlDataAdapter("select TipType_Idno from  " & Trim(DbName) & "  TipType_Head where TipType_Name ='" & Trim(VTipType_Name) & "' ", con)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)


        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vTipType_IdNo = Val(Dt.Rows(0)(0).ToString)

            End If

        End If

        Da.Dispose()
        Dt.Dispose()


        TipType_NameToIdno = Val(vTipType_IdNo)


    End Function

    Public Shared Function TipType_IdnoToName(ByVal con As SqlClient.SqlConnection, ByVal VTipType_Idno As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As String

        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vTipType_Name As String = ""

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If

        Da = New SqlClient.SqlDataAdapter("select TipTYpe_Name from " & Trim(DbName) & " TipType_Head  where TipType_Idno= " & Val(VTipType_Idno) & " ", con)

        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If

        Dt = New DataTable
        Da.Fill(Dt)

        If Dt.Rows.Count > 0 Then
            If Not IsDBNull(Dt.Rows(0)(0).ToString) Then

                vTipType_Name = Trim(Dt.Rows(0)(0).ToString)

            End If
        End If

        Da.Dispose()
        Dt.Dispose()

        TipType_IdnoToName = Trim(vTipType_Name)

    End Function
    Public Shared Function OE_Machine_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vMachine_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vMachine_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Machine_IdNo from OE_Machine_Head where Machine_Name = '" & Trim(vMachine_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vMachine_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vMachine_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        OE_Machine_NameToIdNo = Val(vMachine_ID)

    End Function

    Public Shared Function OE_Machine_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vMachine_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vMachine_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Machine_Name from OE_Machine_Head where Machine_IdNo = " & Str(Val(vMachine_ID)), Cn1)
        Da.Fill(Dt)

        vMachine_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vMachine_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        OE_Machine_IdNoToName = Trim(vMachine_Nm)

    End Function
    Public Shared Function OE_Manufacture_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vManufacture_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vManufacture_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Manufacture_IdNo from OE_Manufacture_Head where Manufacture_Name = '" & Trim(vManufacture_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vManufacture_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vManufacture_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        OE_Manufacture_NameToIdNo = Val(vManufacture_ID)

    End Function

    Public Shared Function OE_Manufacture_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vManufacture_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vManufacture_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Manufacture_Name from OE_Manufacture_Head where Manufacture_IdNo = " & Str(Val(vManufacture_ID)), Cn1)
        Da.Fill(Dt)

        vManufacture_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vManufacture_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        OE_Manufacture_IdNoToName = Trim(vManufacture_Nm)

    End Function
    Public Shared Sub Default_OE_DepartmentHead_Updation(ByVal Cn1 As SqlClient.SqlConnection)
        Dim cmd As New SqlClient.SqlCommand
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        cmd.Connection = Cn1

        cmd.CommandText = "select *  from OE_Department_Head where Department_IdNo > 100 "
        Da = New SqlClient.SqlDataAdapter(cmd)
        Dt1 = New DataTable
        Da.Fill(Dt1)
        If Dt1.Rows.Count <> 0 Then
            Exit Sub
        End If

        cmd.CommandText = "delete from OE_Department_Head"
        cmd.ExecuteNonQuery()
        Try

            cmd.CommandText = "Insert into OE_Department_Head ( Department_IdNo, Department_Name, Sur_Name) Values (0,        '',          '' )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into OE_Department_Head ( Department_IdNo, Department_Name, Sur_Name) Values (1,     'Carding',  'Carding' )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into OE_Department_Head ( Department_IdNo, Department_Name, Sur_Name) Values (2,     'Drawing',  'Drawing' )"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into OE_Department_Head ( Department_IdNo, Department_Name, Sur_Name) Values (3,     'Vortex' ,  'Vortex' )"
            cmd.ExecuteNonQuery()

        Catch ex As Exception
            MessageBox.Show(ex.Message)
        End Try
    End Sub
    Public Shared Function OE_Department_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vDep_Nm As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vDep_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Department_IdNo from OE_Department_Head where Department_Name = '" & Trim(vDep_Nm) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vDep_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vDep_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        OE_Department_NameToIdNo = Val(vDep_ID)

    End Function

    Public Shared Function OE_Department_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vDep_ID As Integer) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vDep_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Department_Name from OE_Department_Head where Department_IdNo = " & Str(Val(vDep_ID)), Cn1)
        Da.Fill(Dt)

        vDep_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vDep_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        OE_Department_IdNoToName = Trim(vDep_Nm)

    End Function

    Public Shared Sub Printing_BundlePrint_Format_1155(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByVal prn_HdMxIndx As Integer, ByRef prn_DetDt As DataTable, ByVal prn_DetMxIndx As Integer, ByRef prn_HdAr(,) As String, ByRef prn_DetAr(,,) As String, ByRef prn_PageNo As Integer, ByRef prn_Count As Integer, ByRef prn_HdIndx As Integer, ByRef prn_DetIndx As Integer, ClothSales_Inv_No As String, ClothSales_Inv_Date As String, vParty_OrderNo As String, vParty_OrderDate As String, ClothSales_DcNo As String, ClothSales_DcDate As String, PartyName As String, PartyAddress1 As String, PartyAddress2 As String, PartyAddress3 As String, PartyAddress4 As String, PartyGSTIN As String, Cloth_name As String, Fold As String, Pack_Type_Name As String, prn_TotalBales As String, prn_TotalPcs As String, prn_TotalMtrs As String)
        Dim NoofDets As Integer, NoofItems_PerPage As Integer
        Dim pFont As Font, P1fONT As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single
        Dim LnAr(20) As Single, ClArr(20) As Single
        Dim ps As Printing.PaperSize
        Dim strHeight As Single = 0
        Dim PpSzSTS As Boolean = False
        Dim LM As Single = 0, TM As Single = 0
        Dim PgWt As Single = 0, PrWt As Single = 0
        Dim PgHt As Single = 0, PrHt As Single = 0

        For I = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(I).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(I)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                e.PageSettings.PaperSize = ps
                Exit For
            End If
        Next

        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 15
            .Right = 40
            .Top = 35
            .Bottom = 40
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With
        'With PrintDocument1.DefaultPageSettings.PaperSize
        '    PrintWidth = (.Width / 2) - RMargin - LMargin
        '    PrintHeight = (.Height / 2) - TMargin - BMargin
        '    PageWidth = (.Width / 2) - RMargin
        '    PageHeight = (.Height / 2) - BMargin
        'End With
        If PrintDocument1.DefaultPageSettings.Landscape = True Then
            With PrintDocument1.DefaultPageSettings.PaperSize
                PrintWidth = .Height - TMargin - BMargin
                PrintHeight = .Width - RMargin - LMargin
                PageWidth = .Height - TMargin
                PageHeight = .Width - RMargin
            End With
        End If

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        pFont = New Font("Calibri", 9, FontStyle.Regular)

        NoofItems_PerPage = 32

        Erase ClArr
        Erase LnAr
        ClArr = New Single(20) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        LnAr = New Single(20) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        'ClArr(0) = 35

        'ClArr(1) = 35 : ClArr(2) = 50 : ClArr(3) = 50 : ClArr(4) = 50 : ClArr(5) = 50 : ClArr(6) = 50 : ClArr(7) = 50 : ClArr(8) = 50 : ClArr(9) = 50 : ClArr(10) = 50 : ClArr(11) = 50 : ClArr(12) = 0 : ClArr(13) = 0 : ClArr(14) = 0 : ClArr(15) = 0 : ClArr(16) = 50
        'ClArr(17) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14) + ClArr(15) + ClArr(16))

        ClArr(1) = 35

        ClArr(2) = 100 : ClArr(3) = 50 : ClArr(4) = 50 : ClArr(5) = 50 : ClArr(6) = 50 : ClArr(7) = 50 : ClArr(8) = 50 : ClArr(9) = 50 : ClArr(10) = 50 : ClArr(11) = 50 : ClArr(12) = 50 : ClArr(13) = 0 : ClArr(14) = 0 : ClArr(15) = 0 : ClArr(16) = 0 : ClArr(17) = 50
        ClArr(18) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14) + ClArr(15) + ClArr(16) + ClArr(17))

        TxtHgt = 18 ' e.Graphics.MeasureString("A", pFont).Height  ' 20

        Try

            If prn_HdDt.Rows.Count > 0 Then

                If prn_HdMxIndx > 0 Then

                    Erase LnAr
                    LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

                    Printing_BundlePrint_Format_1155_PageHeader(PrintDocument1, e, prn_HdDt, prn_HdAr, TxtHgt, pFont, LMargin, RMargin, TM, BMargin, PageWidth, PrintWidth, prn_PageNo, NoofItems_PerPage, CurY, LnAr, ClArr, prn_HdIndx, prn_Count, prn_HdMxIndx, prn_DetDt, prn_DetMxIndx, prn_DetAr, ClothSales_Inv_No, ClothSales_Inv_Date, vParty_OrderNo, vParty_OrderDate, ClothSales_DcNo, ClothSales_DcDate, PartyName, PartyAddress1, PartyAddress2, PartyAddress3, PartyAddress4, PartyGSTIN, Cloth_name, Fold, Pack_Type_Name)
                    CurY = CurY - 10

                    NoofDets = 0
                    Do While prn_HdIndx < prn_HdMxIndx

                        If NoofDets >= NoofItems_PerPage Then

                            CurY = CurY + TxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 10, CurY, 1, 0, pFont)
                            NoofDets = NoofDets + 1

                            Printing_BundlePrint_Format_1155_PageFooter(e, prn_HdDt, prn_HdAr, TxtHgt, pFont, LMargin, RMargin, TM, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_HdIndx, False, prn_TotalBales, prn_TotalPcs, prn_TotalMtrs)

                            e.HasMorePages = True

                            NoofDets = 0
                            prn_Count = prn_Count + 1

                            Return

                        End If

                        prn_HdIndx = prn_HdIndx + 1

                        If Val(prn_HdAr(prn_HdIndx, 4)) <> 0 Then

                            CurY = CurY + TxtHgt

                            P1fONT = New Font("Calibri", 9, FontStyle.Regular)


                            Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdAr(prn_HdIndx, 7)), LMargin + 5, CurY, 0, 0, P1fONT, , True)


                            Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdAr(prn_HdIndx, 1)), LMargin + ClArr(1) + 5, CurY, 0, ClArr(2), P1fONT, , True)


                            If Val(prn_DetAr(prn_HdIndx, 1, 3)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, 1, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 2, CurY, 1, ClArr(3), P1fONT, , True)
                            End If
                            If Val(prn_DetAr(prn_HdIndx, 2, 3)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, 2, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 2, CurY, 1, ClArr(4), P1fONT, , True)
                            End If
                            If Val(prn_DetAr(prn_HdIndx, 3, 3)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, 3, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 2, CurY, 1, ClArr(5), P1fONT, , True)

                            End If

                            If Val(prn_DetAr(prn_HdIndx, 4, 3)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, 4, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 2, CurY, 1, ClArr(6), P1fONT, , True)

                            End If
                            If Val(prn_DetAr(prn_HdIndx, 5, 3)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, 5, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) - 2, CurY, 1, ClArr(7), P1fONT, , True)

                            End If
                            If Val(prn_DetAr(prn_HdIndx, 6, 3)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, 6, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) - 2, CurY, 1, ClArr(8), P1fONT, , True)

                            End If
                            If Val(prn_DetAr(prn_HdIndx, 7, 3)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, 7, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 2, CurY, 1, ClArr(9), P1fONT, , True)

                            End If

                            If Val(prn_DetAr(prn_HdIndx, 8, 3)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, 8, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 2, CurY, 1, ClArr(10), P1fONT, , True)
                            End If
                            '--
                            If Val(prn_DetAr(prn_HdIndx, 9, 3)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, 9, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 2, CurY, 1, ClArr(11), P1fONT, , True)
                            End If

                            If Val(prn_DetAr(prn_HdIndx, 10, 3)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, 10, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 2, CurY, 1, ClArr(12), P1fONT, , True)
                            End If

                            'If Val(prn_DetAr(prn_HdIndx, 11, 3)) <> 0 Then
                            '    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, 11, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 2, CurY, 1, 40, P1fONT, , True)
                            'End If

                            'If Val(prn_DetAr(prn_HdIndx, 12, 3)) <> 0 Then
                            '    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, 12, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) - 2, CurY, 1, 40, P1fONT, , True)
                            'End If

                            'If Val(prn_DetAr(prn_HdIndx, 13, 3)) <> 0 Then
                            '    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, 13, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14) - 2, CurY, 1, 40, P1fONT, , True)
                            'End If

                            'If Val(prn_DetAr(prn_HdIndx, 14, 3)) <> 0 Then
                            '    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, 14, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14) + ClArr(15) - 2, CurY, 1, 40, P1fONT, , True)
                            'End If
                            '--
                            If Val(prn_HdAr(prn_HdIndx, 4)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdAr(prn_HdIndx, 3))), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14) + ClArr(15) + ClArr(16) + ClArr(17) - 2, CurY, 1, ClArr(17), P1fONT, , True)
                            End If

                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdAr(prn_HdIndx, 4)), "#########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + ClArr(13) + ClArr(14) + ClArr(15) + ClArr(16) + ClArr(17) + ClArr(18) - 2, CurY, 1, ClArr(18), pFont, , True)

                            NoofDets = NoofDets + 1

                        End If

                    Loop

                    Printing_BundlePrint_Format_1155_PageFooter(e, prn_HdDt, prn_HdAr, TxtHgt, pFont, LMargin, RMargin, TM, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_HdIndx, True, prn_TotalBales, prn_TotalPcs, prn_TotalMtrs)

                End If

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

        e.HasMorePages = False

    End Sub


    Private Shared Sub Printing_BundlePrint_Format_1155_PageHeader(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal prn_HdIndx As Integer, ByVal prn_Count As Integer, ByVal prn_HdMxIndx As Integer, ByRef prn_DetDt As DataTable, ByVal prn_DetMxIndx As Integer, ByRef prn_DetAr(,,) As String, ClothSales_Inv_No As String, ClothSales_Inv_Date As String, vParty_OrderNo As String, vParty_OrderDate As String, ClothSales_DcNo As String, ClothSales_DcDate As String, PartyName As String, PartyAddress1 As String, PartyAddress2 As String, PartyAddress3 As String, PartyAddress4 As String, PartyGSTIN As String, Cloth_name As String, Fold As String, Pack_Type_Name As String)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim dt3 As New DataTable
        Dim dt4 As New DataTable
        Dim p1Font As Font
        Dim strHeight As Single
        Dim Cmp_Add As String = ""
        Dim C1 As Single, W1, W2 As Single, S1, S2 As Single
        Dim Cmp_Name, Desc As String, Cmp_Add1 As String, Cmp_Add2 As String
        Dim Cmp_PhNo As String, Cmp_TinNo As String, Cmp_CstNo As String, Cmp_EMail As String

        PageNo = PageNo + 1

        CurY = TMargin + 30

        'da2 = New SqlClient.SqlDataAdapter("select a.*, b.Ledger_Name, c.Ledger_Name, d.Company_Description as Transport_Name from ClothSales_Invoice_Head a  INNER JOIN Ledger_Head b ON b.Ledger_IdNo = a.Ledger_Idno LEFT OUTER JOIN Ledger_Head c ON c.Ledger_IdNo = a.Transport_IdNo LEFT OUTER JOIN Company_Head d ON d.Company_IdNo = a.Company_IdNo where a.Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and a.ClothSales_Invoice_Code = '" & Trim(EntryCode) & "' Order by a.For_OrderBy", con)
        'da2.Fill(dt2)
        'If dt2.Rows.Count > NoofItems_PerPage Then
        '    Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(PageNo)), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
        'End If
        'dt2.Clear()

        prn_Count = prn_Count + 1

        p1Font = New Font("Calibri", 15, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, "BALE PACKING DETAILS", LMargin, CurY - TxtHgt - 5, 2, PrintWidth, p1Font)

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY
        Desc = ""
        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
        Cmp_PhNo = "" : Cmp_TinNo = "" : Cmp_CstNo = "" : Cmp_EMail = ""

        Desc = prn_HdDt.Rows(0).Item("Company_Description").ToString

        'If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1155" Then
        '    Cmp_Name = "KRG TEXTILE MILLS"
        'Else
        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
        'End If

        Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString
        Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = "PHONE : " & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString) <> "" Then
            Cmp_TinNo = "GST NO.: " & prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
            Cmp_CstNo = "CST NO.: " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_EMail").ToString) <> "" Then
            Cmp_EMail = "MAIL ID : " & prn_HdDt.Rows(0).Item("Company_EMail").ToString
        End If

        CurY = CurY + TxtHgt
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

        If Common_Procedures.settings.CustomerCode <> "1267" Then

            p1Font = New Font("Calibri", 18, FontStyle.Bold)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height


            CurY = CurY + strHeight - 1
            Common_Procedures.Print_To_PrintDocument(e, Desc, LMargin, CurY, 2, PrintWidth, pFont)

            CurY = CurY + TxtHgt - 1
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1, LMargin, CurY, 2, PrintWidth, pFont)

            CurY = CurY + TxtHgt - 1
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont)
            CurY = CurY + TxtHgt - 1
            Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, pFont)
            CurY = CurY + TxtHgt - 1
            Common_Procedures.Print_To_PrintDocument(e, Cmp_TinNo, LMargin + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_EMail, LMargin, CurY, 2, PrintWidth, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_CstNo, PageWidth - 10, CurY, 1, 0, pFont)

            CurY = CurY + TxtHgt + 10

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

            LnAr(2) = CurY
        End If


        C1 = ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7)
        W1 = e.Graphics.MeasureString("INVOICE DATE  : ", pFont).Width
        S1 = e.Graphics.MeasureString("TO     :    ", pFont).Width
        W2 = e.Graphics.MeasureString("Despatch To   : ", pFont).Width
        S2 = e.Graphics.MeasureString("Sent Through  : ", pFont).Width


        CurY = CurY + 10
        p1Font = New Font("Calibri", 12, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, "TO  :  " & "M/s." & PartyName, LMargin + 10, CurY, 0, 0, p1Font)
        If Trim(ClothSales_Inv_No) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, "INVOICE NO", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ClothSales_Inv_No, LMargin + C1 + W1 + 30, CurY - 3, 0, 0, p1Font)
        End If


        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, " " & PartyAddress1, LMargin + S1 + 10, CurY, 0, 0, pFont)

        If Trim(ClothSales_Inv_Date) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, "INVOICE DATE", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ClothSales_Inv_Date, LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)
        End If


        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, " " & PartyAddress2, LMargin + S1 + 10, CurY, 0, 0, pFont)
        Common_Procedures.Print_To_PrintDocument(e, "ORDER NO", LMargin + C1 + 10, CurY, 0, 0, pFont)
        Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
        Common_Procedures.Print_To_PrintDocument(e, vParty_OrderNo, LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)

        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, " " & PartyAddress3, LMargin + S1 + 10, CurY, 0, 0, pFont)
        If Trim(vParty_OrderDate) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, "ORDER DATE", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, vParty_OrderDate, LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)
        End If


        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, " " & PartyAddress4, LMargin + S1 + 10, CurY, 0, 0, pFont)
        If Trim(ClothSales_DcNo) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, "DC NO", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ClothSales_DcNo, LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)
        End If


        CurY = CurY + TxtHgt
        If Trim(PartyGSTIN) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, " GST : " & PartyGSTIN, LMargin + S1 + 10, CurY, 0, 0, pFont)
        End If
        If Trim(ClothSales_DcDate) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, "DC DATE", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ClothSales_DcDate, LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)
        End If

        CurY = CurY + TxtHgt
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)

        e.Graphics.DrawLine(Pens.Black, LMargin + C1, CurY, LMargin + C1, LnAr(2))

        Try

            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, "QUALITY", LMargin + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Cloth_name, LMargin + W1 + 25, CurY, 0, 0, pFont)

            If Val(Fold) <> 0 Then
                Common_Procedures.Print_To_PrintDocument(e, "FOLDING", LMargin + C1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Fold, LMargin + C1 + W1 + 25, CurY, 0, 0, pFont)
            End If


            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(2) = CurY

            CurY = CurY + TxtHgt - 10

            Common_Procedures.Print_To_PrintDocument(e, "SNO", LMargin, CurY, 2, ClAr(1), pFont)

            If Trim(Pack_Type_Name) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, Trim(Pack_Type_Name), LMargin + ClAr(1) + 15, CurY, 2, ClAr(1), pFont)
            Else
                Common_Procedures.Print_To_PrintDocument(e, "BALE", LMargin + ClAr(1) + 15, CurY, 2, ClAr(1), pFont)
            End If

            Common_Procedures.Print_To_PrintDocument(e, "PCS", LMargin + ClAr(1) + ClAr(2) - 25, CurY, 2, ClAr(2), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "PCS", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(3), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PCS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(4), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PCS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(5), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PCS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(6), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PCS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(7), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PCS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 2, ClAr(8), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PCS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 2, ClAr(9), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "PCS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(10), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PCS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(11), pFont)


            Common_Procedures.Print_To_PrintDocument(e, "TOT", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16), CurY, 2, ClAr(17), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "MTRS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16) + ClAr(17), CurY, 2, ClAr(18), pFont)


            CurY = CurY + 15
            Common_Procedures.Print_To_PrintDocument(e, "NO", LMargin + ClAr(1) + 15, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "1", LMargin + ClAr(1) + ClAr(2) - 25, CurY, 2, ClAr(2), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "2", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(3), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "3", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(4), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "4", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(5), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "5", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(6), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "6", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(7), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "7", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 2, ClAr(8), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "8", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 2, ClAr(9), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "9", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(10), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "10", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(11), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "PCS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16), CurY, 2, ClAr(17), pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(3) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Shared Sub Printing_BundlePrint_Format_1155_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal NoofDets As Integer, ByVal prn_HdIndx As Integer, ByVal is_LastPage As Boolean, prn_TotalBales As String, prn_TotalPcs As String, prn_TotalMtrs As String)
        Dim I As Integer
        Dim p1Font As Font

        Try

            For I = NoofDets + 1 To NoofItems_PerPage
                CurY = CurY + TxtHgt
            Next

            CurY = CurY + TxtHgt + 5
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(5) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY, LMargin + ClAr(1), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY, LMargin + ClAr(1) + ClAr(2), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), LnAr(2))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16), LnAr(2))

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16) + ClAr(17), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16) + ClAr(17), LnAr(2))

            ' LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16), CurY, 2, ClAr(17), pFont)
            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(2))


            If is_LastPage = True Then



                CurY = CurY + TxtHgt - 10

                Common_Procedures.Print_To_PrintDocument(e, Val(prn_TotalBales), LMargin + ClAr(1) + ClAr(2) - 2, CurY, 1, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, Val(prn_TotalPcs), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16) + ClAr(17) - 2, CurY, 1, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_TotalMtrs), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16) + ClAr(17) + ClAr(18) - 2, CurY, 1, ClAr(18), pFont, , True)



                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY + 24, LMargin + ClAr(1), LnAr(5))

                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY + 24, LMargin + ClAr(1) + ClAr(2), LnAr(5))
                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3), LnAr(5))
                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), LnAr(5))
                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), LnAr(5))
                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(5))
                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), LnAr(5))
                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), LnAr(5))
                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), LnAr(5))
                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), LnAr(5))
                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), LnAr(5))
                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), LnAr(5))
                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13), LnAr(5))
                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14), LnAr(5))
                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15), LnAr(5))
                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16), LnAr(5))
                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16) + ClAr(17), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12) + ClAr(13) + ClAr(14) + ClAr(15) + ClAr(16) + ClAr(17), LnAr(5))

                CurY = CurY + TxtHgt + 5
                e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
                LnAr(6) = CurY
            End If
            CurY = CurY + TxtHgt - 10

            p1Font = New Font("Calibri", 12, FontStyle.Bold)

            Common_Procedures.Print_To_PrintDocument(e, "For " & Trim(prn_HdDt.Rows(0).Item("Company_Name").ToString), PageWidth - 15, CurY, 1, 0, p1Font)
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt

            p1Font = New Font("Calibri", 12, FontStyle.Bold)

            Common_Procedures.Print_To_PrintDocument(e, "AUTHORISED SIGNATORY ", PageWidth - 5, CurY, 1, 0, pFont)
            CurY = CurY + TxtHgt + 10

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            e.Graphics.DrawLine(Pens.Black, LMargin, LnAr(1), LMargin, CurY)
            e.Graphics.DrawLine(Pens.Black, PageWidth, LnAr(1), PageWidth, CurY)


        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub
    Public Shared Function Cross_Checking_For_Weaving_Job_Code_For_Selecion(ByVal con1 As SqlClient.SqlConnection, ByVal Led_ID As Integer, ByVal Weaving_Job_Code As String, Optional ByVal Count_ID As String = Nothing, Optional ByVal EndsCount_ID As String = Nothing) As Boolean
        Dim da1 As New SqlClient.SqlDataAdapter
        Dim dt1 As New DataTable
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim vWeaving_Job_Code_For_Selection As String = ""
        Dim vSizing_Job_Code_For_Selection As String = ""
        Dim vSqlCond1 As String = ""

        If Val(Led_ID) = 0 Then
            Return True
            Exit Function
        End If
        If Trim(Weaving_Job_Code) <> "" Then

            vSqlCond1 = ""
            If EndsCount_ID <> 0 Then
                vSqlCond1 = " a.EndsCount_IdNo = " & Val(EndsCount_ID) & " "
            End If

            If Count_ID <> 0 Then
                vSqlCond1 = Trim(vSqlCond1) & IIf(Trim(vSqlCond1) <> "", " and ", "") & " a.WeftCount_IdNo = " & Val(Count_ID) & " "
            End If


            'If EndsCount_ID <> 0 Then
            '    vSqlCond1 = " And a.EndsCount_IdNo = " & Val(EndsCount_ID) & " "
            'ElseIf Count_ID <> 0 Then
            '    vSqlCond1 = " And c.Count_IdNo = " & Val(Count_ID) & " "
            '    'vSqlCond1 = " And a.EndsCount_IdNo in ( select Ed.EndsCount_IdNo from EndsCount_Head Ed where Ed.Count_Idno= " & Val(Count_ID) & " ) "
            'End If

            da1 = New SqlClient.SqlDataAdapter(" Select count(*) From  Weaving_JobCard_Head a where  a.Weaving_JobCode_forSelection='" & Trim(Weaving_Job_Code) & "' and a.Ledger_Idno = " & Val(Led_ID) & " " & IIf(Trim(vSqlCond1) <> "", " and ", "") & vSqlCond1, con1)
            'da1 = New SqlClient.SqlDataAdapter(" Select count(*) From  Weaving_JobCard_Head a LEFT OUTER JOIN EndsCount_Head b ON A.EndsCount_IdNo =B.EndsCount_IdNo INNER JOIN Count_Head C on a.WeftCount_IdNo=c.Count_IdNo where  a.Weaving_JobCode_forSelection='" & Trim(Weaving_Job_Code) & "' and a.Ledger_Idno = " & Val(Led_ID) & " " & IIf(vSqlCond1 <> "", vSqlCond1, "") & "  ", con1)
            dt1 = New DataTable
            da1.Fill(dt1)
            If dt1.Rows(0)(0) = 0 Then
                Return True
            End If
        End If



    End Function
    Public Shared Function Cross_Checking_For_Sizing_Job_Code_For_Selecion(ByVal con1 As SqlClient.SqlConnection, ByVal Led_ID As Integer, ByVal Sizing_Job_Code As String, Optional ByVal Count_ID As String = Nothing, Optional ByVal EndsCount_ID As String = Nothing) As Boolean
        Dim da1 As New SqlClient.SqlDataAdapter
        Dim dt1 As New DataTable
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim vWeaving_Job_Code_For_Selection As String = ""
        Dim vSizing_Job_Code_For_Selection As String = ""
        Dim vSqlCond1 As String = ""

        If Val(Led_ID) = 0 Then
            Return True
            Exit Function
        End If

        If Trim(Sizing_Job_Code) <> "" Then


            If Count_ID <> 0 Then
                vSqlCond1 = " And b.Count_IdNo = " & Val(Count_ID) & " "
            ElseIf EndsCount_ID <> 0 Then

                vSqlCond1 = " And b.Count_IdNo in ( select Ed.Count_IdNo from EndsCount_Head Ed where Ed.EndsCount_IdNo= " & Val(EndsCount_ID) & " ) "
                'vSqlCond1 = " And a.EndsCount_IdNo = " & Val(EndsCount_ID) & " "
            End If

            da2 = New SqlClient.SqlDataAdapter(" Select  count(*)   From  Sizing_JobCard_Head a  LEFT OUTER JOIN  Sizing_JobCard_Details b on a.Sizing_JobCard_Code =b.Sizing_JobCard_Code INNER JOIN Count_Head C on b.Count_IdNo=c.Count_IdNo  where a.Sizing_JobCode_forSelection = '" & Trim(Sizing_Job_Code) & "' and a.Ledger_Idno =" & Val(Led_ID) & " " & IIf(vSqlCond1 <> "", vSqlCond1, "") & " ", con1)
            dt2 = New DataTable
            da2.Fill(dt2)

            If dt2.Rows(0)(0) = 0 Then
                Return True
            End If

        End If

    End Function

    Public Shared Function YarnLotCodeSelection_To_LotEntryReferenceCode(ByVal Cn1 As SqlClient.SqlConnection, ByVal vLotCodeSelection As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vREFCODE As String

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Entry_ReferenceCode from " & Trim(DbName) & "Yarn_Lot_Head where LotCode_ForSelection = '" & Trim(vLotCodeSelection) & "' Order by LotCode_ForSelection, Entry_ReferenceCode", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        vREFCODE = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vREFCODE = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        YarnLotCodeSelection_To_LotEntryReferenceCode = Trim(vREFCODE)

    End Function

    Public Shared Function YarnLotEntryReferenceCode_to_LotCodeSelection(ByVal Cn1 As SqlClient.SqlConnection, ByVal vLotEntryReferenceCode As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vREFCODE As String

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("Select LotCode_ForSelection from " & Trim(DbName) & "Yarn_Lot_Head where Entry_ReferenceCode  = '" & Trim(vLotEntryReferenceCode) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        vREFCODE = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vREFCODE = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        YarnLotEntryReferenceCode_to_LotCodeSelection = Trim(vREFCODE)

    End Function

    Public Shared Function Get_Stores_Item_CurrentStock(ByVal Cn1 As SqlClient.SqlConnection, ByVal vComp_IdNo As Integer, ByVal vItem_IdNo As Integer, ByVal vBrand_IdNo As Integer, ByRef vITEM_New_Old As String) As Decimal
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim CurStk As Decimal
        Dim vSTOCK_FIELD_NAME = ""

        If vITEM_New_Old <> "" Then
            If Trim(UCase(vITEM_New_Old)) = Trim(UCase("OLD")) Then
                vSTOCK_FIELD_NAME = "Quantity_Old_Usable"
            Else
                vSTOCK_FIELD_NAME = "Quantity_New"

            End If
        End If

        Da = New SqlClient.SqlDataAdapter("select sum(" & vSTOCK_FIELD_NAME & ") from Stores_Stock_Item_Processing_Details where Company_IdNo = " & Str(Val(vComp_IdNo)) & " and Brand_IdNo = " & Str(Val(vBrand_IdNo)) & " and Item_IdNo = " & Str(Val(vItem_IdNo)), Cn1)
        'Da = New SqlClient.SqlDataAdapter("select sum(Quantity_New) ,sum(Quantity_Old_Usable) , sum(Quantity_Old_Scrap)   from Stores_Stock_Item_Processing_Details where Company_IdNo = " & Str(Val(vComp_IdNo)) & " and Brand_IdNo = " & Str(Val(vBrand_IdNo)) & " and Item_IdNo = " & Str(Val(vItem_IdNo)), Cn1)

        Da.Fill(Dt)

        CurStk = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                CurStk = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        Get_Stores_Item_CurrentStock = Val(CurStk)

    End Function

    Public Shared Sub Printing_Format_PackingList_1464(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_DetDt As DataTable, ByRef prn_HdMxIndx As Integer, ByRef Prn_Hddt As DataTable, ByRef prn_hdar(,) As String, ByRef prn_PageNo As Integer, ByRef prn_Hdindx As Integer, ByRef prn_Count As Integer, ByRef prn_DetAr(,,) As String,
                                                       ByRef prn_PL_Tot_Rls As Integer, ByRef Prn_PL_Tot_Pcs As Integer, ByRef Prn_PL_Tot_Mtr As String, ByRef prn_DetIndx As Integer, ByRef Prn_DetMxIndx1 As Integer, ByRef prn_PL_Tot_GrsWgt As String, ByRef prn_PL_Tot_NetWgt As String, ByRef prn_hddt2 As DataTable,
                                                       ByRef prn_TotalPcs As Integer, ByRef vPrn_Roll_Packing_No As String, ByRef vPrn_Roll_Packing_Date As String, ByRef vPrn_Roll_Packing_Po_No As String, ByRef vPrn_Roll_Packing_Po_Date As String, ByRef vSort_No As String, ByRef vCLONAME As String, ByRef vPrn_Invoice_Dc_No As String, vPrn_Invoice_Dc_Date As String, ByRef vPrn_ClothSales_Invoice_No As String, ByRef vPrn_ClothSales_Invoice_Date As String)
        Dim NoofDets As Integer, NoofItems_PerPage As Integer
        Dim pFont As Font, P1fONT As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim ps As Printing.PaperSize
        Dim strHeight As Single = 0
        Dim PpSzSTS As Boolean = False
        Dim LM As Single = 0, TM As Single = 0
        Dim PgWt As Single = 0, PrWt As Single = 0
        Dim PgHt As Single = 0, PrHt As Single = 0
        Dim vPcsNos As String = ""
        Dim vLmNos As String = ""
        Dim vTot_Pcs As String = ""
        Dim vPREV_CLONAME As String
        'prn_TotalPcs = 0
        'prn_PL_Tot_Rls = 0

        For I = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(I).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(I)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                e.PageSettings.PaperSize = ps
                Exit For
            End If
        Next

        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 15
            .Right = 40
            .Top = 35
            .Bottom = 40
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With
        If PrintDocument1.DefaultPageSettings.Landscape = True Then
            With PrintDocument1.DefaultPageSettings.PaperSize
                PrintWidth = .Height - TMargin - BMargin
                PrintHeight = .Width - RMargin - LMargin
                PageWidth = .Height - TMargin
                PageHeight = .Width - RMargin
            End With
        End If

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        pFont = New Font("Calibri", 10, FontStyle.Regular)

        NoofItems_PerPage = 36 ' 32

        Erase ClArr
        Erase LnAr
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = 35 : ClArr(2) = 70 : ClArr(3) = 80 : ClArr(4) = 110 : ClArr(5) = 50 : ClArr(6) = 50 : ClArr(7) = 50 : ClArr(8) = 40 : ClArr(9) = 75 : ClArr(10) = 75 : ClArr(11) = 75
        ClArr(12) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11))

        TxtHgt = 17.75 '18.75 ' 19 ' e.Graphics.MeasureString("A", pFont).Height  '20

        Try

            If prn_DetDt.Rows.Count > 0 Then

                If prn_HdMxIndx > 0 Then

                    Erase LnAr
                    LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

                    Printing_Format_PackingList_1464_PageHeader(PrintDocument1, e, Prn_Hddt, prn_hdar, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, prn_PageNo, NoofItems_PerPage, CurY, LnAr, ClArr, prn_Hdindx, prn_Count, prn_hddt2, vPrn_Roll_Packing_No, vPrn_Roll_Packing_Date, vPrn_Roll_Packing_Po_No, vPrn_Roll_Packing_Po_Date, vSort_No, vCLONAME, vPrn_Invoice_Dc_No, vPrn_Invoice_Dc_Date, vPrn_ClothSales_Invoice_No, vPrn_ClothSales_Invoice_Date)

                    'Printing_Format_PackingList_1464_PageHeader(PrintDocument1, e, Prn_Hddt, prn_hdar, TxtHgt, pFont, LMargin, RMargin, TM, BMargin, PageWidth, PrintWidth, prn_PageNo, NoofItems_PerPage, CurY, LnAr, ClArr, prn_Hdindx)
                    CurY = CurY - 10

                    NoofDets = 0
                    Do While prn_Hdindx < prn_HdMxIndx


                        If NoofDets >= NoofItems_PerPage Then

                            CurY = CurY + TxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 10, CurY, 1, 0, pFont)
                            NoofDets = NoofDets + 1

                            'Printing_Format_PackingList_1464_PageFooter(e, prn_hdar, TxtHgt, pFont, LMargin, RMargin, TM, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_Hdindx, False)

                            Printing_Format_PackingList_1464_PageFooter(e, prn_hdar, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_Hdindx, False, Prn_Hddt, prn_PL_Tot_GrsWgt, Prn_PL_Tot_Mtr, prn_PL_Tot_NetWgt, prn_TotalPcs, prn_PL_Tot_Rls)

                            e.HasMorePages = True

                            NoofDets = 0
                            prn_Count = prn_Count + 1

                            Return

                        End If

                        If SEC_QUALITY_PRN_RETURN_STS = False Then
                            prn_Hdindx = prn_Hdindx + 1
                        End If

                        If Trim(UCase(vPREV_CLONAME)) <> "" And Trim(UCase(vPREV_CLONAME)) <> Trim(UCase(prn_hdar(prn_Hdindx, 14))) Then

                            CurY = CurY + TxtHgt
                            NoofDets = NoofDets + 1

                            Printing_Format_PackingList_1464_PageFooter(e, prn_hdar, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_Hdindx, True, Prn_Hddt, prn_PL_Tot_GrsWgt, Prn_PL_Tot_Mtr, prn_PL_Tot_NetWgt, Prn_PL_Tot_Pcs, prn_PL_Tot_Rls)

                            e.HasMorePages = True

                            NoofDets = 0

                            prn_PL_Tot_Rls = 0
                            prn_TotalPcs = 0
                            Prn_PL_Tot_Mtr = 0
                            prn_PL_Tot_GrsWgt = 0
                            prn_PL_Tot_NetWgt = 0
                            Prn_PL_Tot_Pcs = 0

                            prn_Count = prn_Count + 1

                            'SEC_QUALITY_PRN_RETURN_STS = True
                            SEC_QUALITY_PRN_RETURN_STS = True

                            Return

                        End If

                        vPcsNos = ""
                        vLmNos = ""
                        vTot_Pcs = 0

                        'If Val(prn_HdAr(prn_HdIndx, 4)) <> 0 Then
                        '                        If Val(prn_DetAr1(prn_HdIndx, 3)) <> 0 Then


                        SEC_QUALITY_PRN_RETURN_STS = False

                        If Val(prn_hdar(prn_Hdindx, 4)) <> 0 Then


                            'vPcsNos = Trim(prn_DetAr1(prn_HdIndx, 2))
                            'If Trim(prn_DetAr1(prn_HdIndx, 2)) <> "" Then
                            '    vPcsNos = Trim(vPcsNos) & "," & Trim(prn_DetAr1(prn_HdIndx, 2))
                            'End If
                            'If Trim(prn_DetAr1(prn_HdIndx, 2)) <> "" Then
                            '    vPcsNos = Trim(vPcsNos) & "," & Trim(prn_DetAr1(prn_HdIndx, 2))
                            'End If

                            'vLmNos = Trim(prn_DetAr1(prn_HdIndx, 7))
                            'If Trim(prn_DetAr1(prn_HdIndx, 7)) <> "" Then
                            '    vLmNos = Trim(vLmNos) & "," & Trim(prn_DetAr1(prn_HdIndx, 7))
                            'End If
                            'If Trim(prn_DetAr1(prn_HdIndx, 7)) <> "" Then
                            '    vLmNos = Trim(vLmNos) & "," & Trim(prn_DetAr1(prn_HdIndx, 7))
                            'End If


                            vPcsNos = Trim(prn_DetAr(prn_Hdindx, 1, 2))
                            If Trim(prn_DetAr(prn_Hdindx, 2, 2)) <> "" Then
                                vPcsNos = Trim(vPcsNos) & "," & Trim(prn_DetAr(prn_Hdindx, 2, 2))
                            End If
                            If Trim(prn_DetAr(prn_Hdindx, 3, 2)) <> "" Then
                                vPcsNos = Trim(vPcsNos) & "," & Trim(prn_DetAr(prn_Hdindx, 3, 2))
                            End If

                            vLmNos = Trim(prn_DetAr(prn_Hdindx, 1, 7))
                            If Trim(prn_DetAr(prn_Hdindx, 2, 7)) <> "" Then
                                vLmNos = Trim(vLmNos) & "," & Trim(prn_DetAr(prn_Hdindx, 2, 7))
                            End If
                            If Trim(prn_DetAr(prn_Hdindx, 3, 7)) <> "" Then
                                vLmNos = Trim(vLmNos) & "," & Trim(prn_DetAr(prn_Hdindx, 3, 7))
                            End If

                            CurY = CurY + TxtHgt

                            P1fONT = New Font("Calibri", 10, FontStyle.Regular)





                            Common_Procedures.Print_To_PrintDocument(e, Val(prn_hdar(prn_Hdindx, 7)), LMargin + 10, CurY, 0, 0, P1fONT)

                            Common_Procedures.Print_To_PrintDocument(e, Trim(prn_hdar(prn_Hdindx, 1)), LMargin + ClArr(1) + 5, CurY, 0, ClArr(2), P1fONT,, True)

                            Common_Procedures.Print_To_PrintDocument(e, Trim(vLmNos), LMargin + ClArr(1) + ClArr(2) + 5, CurY, 0, ClArr(3), P1fONT,, True)

                            Common_Procedures.Print_To_PrintDocument(e, Trim(vPcsNos), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + 5, CurY, 0, ClArr(4), P1fONT,, True)
                            If Val(prn_DetAr(prn_Hdindx, 1, 3)) <> 0 Then
                                vTot_Pcs = vTot_Pcs + 1
                                Common_Procedures.Print_To_PrintDocument(e, Val(prn_DetAr(prn_Hdindx, 1, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5), CurY, 1, 0, P1fONT)
                            End If
                            If Val(prn_DetAr(prn_Hdindx, 2, 3)) <> 0 Then
                                vTot_Pcs = vTot_Pcs + 1

                                Common_Procedures.Print_To_PrintDocument(e, Val(prn_DetAr(prn_Hdindx, 2, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6), CurY, 1, 0, P1fONT)
                            End If
                            If Val(prn_DetAr(prn_Hdindx, 3, 3)) <> 0 Then
                                vTot_Pcs = vTot_Pcs + 1

                                Common_Procedures.Print_To_PrintDocument(e, Val(prn_DetAr(prn_Hdindx, 3, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7), CurY, 1, 0, P1fONT)
                            End If

                            Common_Procedures.Print_To_PrintDocument(e, Trim(vTot_Pcs), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) - 5, CurY, 1, 0, P1fONT)

                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_hdar(prn_Hdindx, 4)), "#########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9), CurY, 1, 0, P1fONT)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_hdar(prn_Hdindx, 5)), "#########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10), CurY, 1, 0, P1fONT)
                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_hdar(prn_Hdindx, 6)), "#########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11), CurY, 1, 0, P1fONT)

                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(Format(Val(prn_hdar(prn_Hdindx, 6)), "#########0.000") / Format(Val(prn_hdar(prn_Hdindx, 4)), "#########0.00")), "############0.000"), PageWidth - 10, CurY, 1, 0, P1fONT)



                            'If Trim(prn_DetAr(prn_Hdindx, 1, 2)) <> "" And Val(prn_DetAr(Prn_DetMxIndx1, 1, 3)) > 0 Then
                            '    Prn_PL_Tot_Pcs = Prn_PL_Tot_Pcs + 1
                            'End If
                            'If Trim(prn_DetAr(prn_Hdindx, 2, 2)) <> "" And Val(prn_DetAr(prn_Hdindx, 2, 3)) > 0 Then
                            '    Prn_PL_Tot_Pcs = Prn_PL_Tot_Pcs + 1
                            'End If
                            'If Trim(prn_DetAr(prn_Hdindx, 3, 2)) <> "" And Val(prn_DetAr(prn_Hdindx, 3, 3)) > 0 Then
                            '    Prn_PL_Tot_Pcs = Prn_PL_Tot_Pcs + 1
                            'End If

                            'prn_TotalPcs = Val(prn_TotalPcs) + Val(vTot_Pcs)
                                prn_PL_Tot_Rls = prn_PL_Tot_Rls + 1

                            Prn_PL_Tot_Pcs = Val(Prn_PL_Tot_Pcs) + Val(vTot_Pcs)

                            Prn_PL_Tot_Mtr = Format(Val(Prn_PL_Tot_Mtr) + Format(Val(prn_hdar(prn_Hdindx, 4)), "#########0.00"), "#########0.00")
                            prn_PL_Tot_GrsWgt = Format(Val(prn_PL_Tot_GrsWgt) + Format(Val(prn_hdar(prn_Hdindx, 5)), "#########0.000"), "#########0.000")
                            prn_PL_Tot_NetWgt = Format(Val(prn_PL_Tot_NetWgt) + Format(Val(prn_hdar(prn_Hdindx, 6)), "#########0.000"), "#########0.000")

                            '    prn_TotalGrams = Format(Val(prn_TotalGrams) + Format(Val(prn_HdAr(prn_HdIndx, 6)), "#########0.000") / Format(Val(prn_HdAr(prn_HdIndx, 4)), "#########0.00"), "##########0.000")

                            vPREV_CLONAME = prn_hdar(prn_Hdindx, 14)

                            NoofDets = NoofDets + 1
                            prn_DetIndx = prn_DetIndx + 1

                        End If



                    Loop

                    Printing_Format_PackingList_1464_PageFooter(e, prn_hdar, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_Hdindx, True, Prn_Hddt, prn_PL_Tot_GrsWgt, Prn_PL_Tot_Mtr, prn_PL_Tot_NetWgt, Prn_PL_Tot_Pcs, prn_PL_Tot_Rls)
                    'Printing_Format_PackingList_1464_PageFooter(e, prn_hdar, TxtHgt, pFont, LMargin, RMargin, TM, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_Hdindx, True)

                End If

            End If

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

        e.HasMorePages = False

    End Sub

    Public Shared Sub Printing_Format_PackingList_1464_PageHeader(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal prn_HdIndx As Integer, ByRef prn_Count As Integer, ByRef prn_HdDt2 As DataTable, ByRef vPrn_Roll_Packing_No As String, vPrn_Roll_Packing_Date As String, ByRef vPrn_Entry_Po_No As String, ByRef vPrn_Entry_Po_Date As String, ByRef vsort_No As String, ByRef vCLONAME As String, ByRef vPrn_Invoice_Dc_No As String, vPrn_Invoice_Dc_Date As String, vPrn_Clothsales_Invoice_No As String, vPrn_ClothSales_Invoice_Date As String)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim dt3 As New DataTable
        Dim dt4 As New DataTable
        Dim p1Font As Font
        Dim strHeight As Single
        Dim Cmp_Add As String = ""
        Dim C1, C2 As Single, W1, W2 As Single, S1, S2 As Single
        Dim Cmp_Name, Desc As String, Cmp_Add1 As String, Cmp_Add2 As String
        Dim Cmp_PhNo As String, Cmp_TinNo As String, Cmp_CstNo As String, Cmp_EMail As String

        PageNo = PageNo + 1

        CurY = TMargin + 30

        'da2 = New SqlClient.SqlDataAdapter("select a.*, b.Ledger_Name, c.Ledger_Name, d.Company_Description as Transport_Name from ClothSales_Invoice_Head a  INNER JOIN Ledger_Head b ON b.Ledger_IdNo = a.Ledger_Idno LEFT OUTER JOIN Ledger_Head c ON c.Ledger_IdNo = a.Transport_IdNo LEFT OUTER JOIN Company_Head d ON d.Company_IdNo = a.Company_IdNo where a.Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and a.ClothSales_Invoice_Code = '" & Trim(EntryCode) & "' Order by a.For_OrderBy", con)
        'da2.Fill(dt2)
        'If dt2.Rows.Count > NoofItems_PerPage Then
        '    Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(PageNo)), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
        'End If
        'dt2.Clear()

        prn_Count = prn_Count + 1

        p1Font = New Font("Calibri", 15, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, "PACKING LIST", LMargin, CurY - TxtHgt - 5, 2, PrintWidth, p1Font)

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY
        Desc = ""
        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
        Cmp_PhNo = "" : Cmp_TinNo = "" : Cmp_CstNo = "" : Cmp_EMail = ""

        Desc = prn_HdDt.Rows(0).Item("Company_Description").ToString
        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
        Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString
        Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = "PHONE : " & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString) <> "" Then
            Cmp_TinNo = "GST NO.: " & prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
            Cmp_CstNo = "CST NO.: " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_EMail").ToString) <> "" Then
            Cmp_EMail = "MAIL ID : " & prn_HdDt.Rows(0).Item("Company_EMail").ToString
        End If

        CurY = CurY + TxtHgt - 5

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "-1249-" Then
            e.Graphics.DrawImage(DirectCast(Global.Textile.My.Resources.Resources.Company_Logo_Vaipav, Drawing.Image), LMargin + 20, CurY, 100, 90)
        End If

        p1Font = New Font("Calibri", 18, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font)
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

        p1Font = New Font("Calibri", 9, FontStyle.Regular)
        CurY = CurY + strHeight - 1
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1 & " " & Cmp_Add2, LMargin, CurY, 2, PrintWidth, p1Font,, True)
        'CurY = CurY + TxtHgt - 1
        'Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, p1Font)
        CurY = CurY + TxtHgt - 1
        Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo & "     " & Cmp_TinNo & "     " & Cmp_EMail, LMargin, CurY, 2, PrintWidth, p1Font,, True)
        'CurY = CurY + TxtHgt - 1
        'Common_Procedures.Print_To_PrintDocument(e, Cmp_TinNo, LMargin + 10, CurY, 0, 0, p1Font)
        'Common_Procedures.Print_To_PrintDocument(e, Cmp_EMail, PageWidth - 10, CurY, 1, 0, p1Font)

        'Common_Procedures.Print_To_PrintDocument(e, Cmp_EMail, LMargin, CurY, 2, PrintWidth, pFont)
        'Common_Procedures.Print_To_PrintDocument(e, Cmp_CstNo, PageWidth - 10, CurY, 1, 0, pFont)

        CurY = CurY + TxtHgt + 10
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(2) = CurY

        C1 = ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6)
        C2 = ClAr(1) + ClAr(2) + ClAr(3)
        W1 = e.Graphics.MeasureString("INVOICE DATE  : ", pFont).Width
        S1 = e.Graphics.MeasureString("TO     :    ", pFont).Width
        W2 = e.Graphics.MeasureString("Sort No.    : ", pFont).Width
        S2 = e.Graphics.MeasureString("P.O Date   : ", pFont).Width


        CurY = CurY + 10
        p1Font = New Font("Calibri", 9, FontStyle.Bold)
        'p1Font = New Font("Calibri", 10, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, "TO  :  " & "M/s." & prn_HdDt.Rows(0).Item("Ledger_Name").ToString, LMargin + 10, CurY, 0, 0, p1Font,, True)

        If Trim(vPrn_Invoice_Dc_No) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, "Dc No ", LMargin + C1 + ClAr(4) + ClAr(1) + 15, CurY - 5, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + ClAr(4) + 15, CurY - 5, 0, 0, pFont)

            If Trim(vPrn_Invoice_Dc_No) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, Trim(vPrn_Invoice_Dc_No), PageWidth - ClAr(1) - ClAr(2) - 5, CurY - 5, 0, 0, p1Font)
            End If

        ElseIf Trim(vPrn_Clothsales_Invoice_No) <> "" Then

            Common_Procedures.Print_To_PrintDocument(e, "Invoice No", LMargin + C1 + ClAr(4) + ClAr(1) + 15, CurY - 5, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + ClAr(4) + ClAr(1) + 15, CurY - 5, 0, 0, pFont)

            If Trim(vPrn_Clothsales_Invoice_No) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, Trim(vPrn_Clothsales_Invoice_No), PageWidth - ClAr(1) - ClAr(2) - 5, CurY - 5, 0, 0, p1Font)
            End If

        Else
            Common_Procedures.Print_To_PrintDocument(e, "Packing List No", LMargin + C1 + ClAr(4) + ClAr(1) + 15, CurY - 5, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + ClAr(4) + ClAr(1) + 15, CurY - 5, 0, 0, pFont)

            If Trim(vPrn_Roll_Packing_No) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, Trim(vPrn_Roll_Packing_No), PageWidth - ClAr(1) - ClAr(2) - 5, CurY - 5, 0, 0, p1Font)
            End If
        End If


        'Common_Procedures.Print_To_PrintDocument(e, prn_HdDt2.Rows(0).Item("Roll_Packing_No").ToString, PageWidth - ClAr(1) - ClAr(2) - 5, CurY - 5, 0, 0, p1Font)



        Dim vLEDADD As String = ""
        'Dim vDELADD As String = ""

        vLEDADD = Trim(prn_HdDt.Rows(0).Item("Ledger_Address4").ToString)
        If Trim(vLEDADD) = "" Then
            vLEDADD = prn_HdDt.Rows(0).Item("Ledger_Address3").ToString
        End If
        If Trim(vLEDADD) = "" Then
            vLEDADD = prn_HdDt.Rows(0).Item("Ledger_Address2").ToString
        End If
        If Trim(vLEDADD) = "" Then
            vLEDADD = prn_HdDt.Rows(0).Item("Ledger_Address1").ToString
        End If

        'vDELADD = prn_HdDt.Rows(0).Item("DeliveryTo_LedgerAddress4").ToString

        'If Trim(vDELADD) = "" Then
        '    vDELADD = prn_HdDt.Rows(0).Item("DeliveryTo_LedgerAddress3").ToString
        'End If
        'If Trim(vDELADD) = "" Then
        '    vDELADD = prn_HdDt.Rows(0).Item("DeliveryTo_LedgerAddress2").ToString
        'End If
        'If Trim(vDELADD) = "" Then
        '    vDELADD = prn_HdDt.Rows(0).Item("DeliveryTo_LedgerAddress1").ToString
        'End If
        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, " " & Trim(vLEDADD), LMargin + S1 - 10, CurY, 0, 0, pFont)
        ' Common_Procedures.Print_To_PrintDocument(e, " " & Trim(vDELADD), LMargin + S1 + ClAr(4) + ClAr(7) + ClAr(3) + ClAr(5), CurY, 0, 0, pFont)
        p1Font = New Font("Calibri", 14, FontStyle.Bold)

        If Trim(vPrn_Invoice_Dc_Date) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, "Dc Date", LMargin + C1 + ClAr(1) + ClAr(4) + 15, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + ClAr(1) + ClAr(4) + 20, CurY, 0, 0, pFont)

            If Trim(vPrn_Invoice_Dc_Date) <> "" Then
                If IsDate(vPrn_Invoice_Dc_Date) <> False Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(vPrn_Invoice_Dc_Date), "dd-MM-yyyy"), PageWidth - ClAr(1) - ClAr(2) - 5, CurY, 0, 0, pFont)
                End If
            End If

        ElseIf Trim(vPrn_ClothSales_Invoice_Date) <> "" Then

            Common_Procedures.Print_To_PrintDocument(e, "Invoice Date", LMargin + C1 + ClAr(1) + ClAr(4) + 15, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + ClAr(1) + ClAr(4) + 20, CurY, 0, 0, pFont)

            If Trim(vPrn_ClothSales_Invoice_Date) <> "" Then
                If IsDate(vPrn_ClothSales_Invoice_Date) <> False Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(vPrn_ClothSales_Invoice_Date), "dd-MM-yyyy"), PageWidth - ClAr(1) - ClAr(2) - 5, CurY, 0, 0, pFont)
                End If
            End If


        Else
            Common_Procedures.Print_To_PrintDocument(e, "Packing List Date", LMargin + C1 + ClAr(1) + ClAr(4) + 15, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + ClAr(1) + ClAr(4) + 20, CurY, 0, 0, pFont)

            If Trim(vPrn_Roll_Packing_Date) <> "" Then
                If IsDate(vPrn_Roll_Packing_Date) <> False Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(vPrn_Roll_Packing_Date), "dd-MM-yyyy"), PageWidth - ClAr(1) - ClAr(2) - 5, CurY, 0, 0, pFont)
                End If
            End If
        End If


        'Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(prn_HdDt2.Rows(0).Item("Roll_Packing_Date").ToString), "dd-MM-yyyy").ToString, PageWidth - ClAr(1) - ClAr(2) - 5, CurY, 0, 0, pFont)

        CurY = CurY + TxtHgt
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        'e.Graphics.DrawLine(Pens.Black, LMargin + C2 + ClAr(1) + ClAr(2) + 10, CurY, LMargin + C2 + ClAr(1) + ClAr(2) + 10, LnAr(2))
        e.Graphics.DrawLine(Pens.Black, LMargin + C2 + ClAr(1) + ClAr(2) + ClAr(4) + ClAr(8) + ClAr(2) + 10, CurY, LMargin + C2 + ClAr(1) + ClAr(2) + ClAr(4) + ClAr(8) + ClAr(2) + 10, LnAr(2))


        Try

            Dim indx = 0

            If prn_HdIndx = 0 Then indx = indx + 1

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "Sort No.", LMargin + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W2, CurY, 0, 0, pFont)
            If Trim(vsort_No) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, Trim(vsort_No), LMargin + W2 + 25, CurY, 0, 0, pFont)

            Else
                Common_Procedures.Print_To_PrintDocument(e, prn_HdAr(prn_HdIndx + indx, 11), LMargin + W2 + 25, CurY, 0, 0, pFont)
            End If
            'Common_Procedures.Print_To_PrintDocument(e, prn_HdAr(prn_HdIndx + 1, 11), LMargin + W2 + 25, CurY, 0, 0, pFont)

            Common_Procedures.Print_To_PrintDocument(e, "Con ", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) - 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + 15, CurY, 0, 0, pFont)


            'If Trim(prn_HdAr(prn_HdIndx, 14)) = String.Empty Then
            '    Common_Procedures.Print_To_PrintDocument(e, Trim(vCLONAME), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) - 20, CurY, 0, 0, pFont)
            'Else
            Common_Procedures.Print_To_PrintDocument(e, prn_HdAr(prn_HdIndx + indx, 14), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) - 20, CurY, 0, 0, pFont)
            '  End If

            'Common_Procedures.Print_To_PrintDocument(e, Trim(vCLONAME), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) - 20, CurY, 0, 0, pFont)
            'Common_Procedures.Print_To_PrintDocument(e, prn_HdAr(prn_HdIndx + 1, 14), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) - 20, CurY, 0, 0, pFont)


            CurY = CurY + TxtHgt + 5
            Common_Procedures.Print_To_PrintDocument(e, "P.O No. ", LMargin + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W2, CurY, 0, 0, pFont)

            If Trim(vPrn_Entry_Po_No) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, Trim(vPrn_Entry_Po_No), LMargin + W2 + 25, CurY, 0, 0, pFont)
            Else
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdAr(prn_HdIndx + indx, 12)), LMargin + W2 + 25, CurY, 0, 0, pFont)
            End If

            Common_Procedures.Print_To_PrintDocument(e, "P.O Date  :  ", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) - 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + 30, CurY, 0, 0, pFont)

            If Trim(vPrn_Entry_Po_Date) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, Trim(vPrn_Entry_Po_Date), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + 5, CurY, 0, 0, pFont)
            Else
                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdAr(prn_HdIndx + indx, 13)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + 5, CurY, 0, 0, pFont)
            End If


            'Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(prn_HdDt2.Rows(0).Item("Roll_Packing_Po_Date").ToString), "dd-MM-yyyy").ToString, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) - 20, CurY, 0, 0, pFont)




            CurY = CurY + TxtHgt + 5
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(2) = CurY

            CurY = CurY + TxtHgt - 15
            Common_Procedures.Print_To_PrintDocument(e, "INDIVIDUAL PCS METERS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY + 5, 2, ClAr(8), pFont)
            CurY = CurY + TxtHgt + 10
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY)
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY)
            LnAr(4) = CurY

            CurY = CurY - 15 ' 10

            Common_Procedures.Print_To_PrintDocument(e, "S.No", LMargin, CurY, 2, ClAr(1), pFont)


            Common_Procedures.Print_To_PrintDocument(e, "ROLL NO", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "LOOM NO", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "FER.NO.", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(4), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "1", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY + 18, 2, ClAr(5), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "2", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY + 18, 2, ClAr(6), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "3", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY + 18, 2, ClAr(7), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "TOT", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 2, ClAr(9), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "GROSS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 2, ClAr(10), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "NET", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(11), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "GRAMS", PageWidth - 10, CurY, 1, 0, pFont)

            CurY = CurY + 15
            '  Common_Procedures.Print_To_PrintDocument(e, "NO", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            ' Common_Procedures.Print_To_PrintDocument(e, "NO", LMargin + ClAr(1) + ClAr(2) - 8, CurY, 2, ClAr(3), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "PCS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "METERS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 2, ClAr(9), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 2, ClAr(10), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(11), pFont)


            CurY = CurY + TxtHgt + 5
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(3) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub



    Public Shared Sub Printing_Format_PackingList_1464_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal NoofDets As Integer, ByVal prn_HdIndx As Integer, ByVal is_LastPage As Boolean, ByRef prn_HdDt As DataTable, ByRef prn_PL_Tot_GrsWgt As String, ByRef prn_PL_Tot_Mtr As String, ByRef prn_PL_Tot_NetWgt As String, ByRef prn_TotalPcs As Integer, ByRef prn_PL_Tot_Rls As Integer)
        Dim I As Integer
        Dim p1Font As Font

        p1Font = New Font("Calibri", 7, FontStyle.Bold)

        Try

            For I = NoofDets + 1 To NoofItems_PerPage
                CurY = CurY + TxtHgt
            Next


            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY, LMargin + ClAr(1), LnAr(2))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY, LMargin + ClAr(1) + ClAr(2), LnAr(2))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3), LnAr(2))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), LnAr(2))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), LnAr(4))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(4))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, LMargin + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), LnAr(2))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, LMargin + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), LnAr(2))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), LnAr(2))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), LnAr(2))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), LnAr(2))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), LnAr(2))
            ''e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), LnAr(2))

            'e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(2))

            If is_LastPage = True Then


                CurY = CurY + TxtHgt + 5
                e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
                LnAr(5) = CurY

                CurY = CurY + 5

                Common_Procedures.Print_To_PrintDocument(e, "TOT", LMargin + 5, CurY, 0, 0, pFont, , True)
                Common_Procedures.Print_To_PrintDocument(e, Val(prn_PL_Tot_Rls), LMargin + ClAr(1) + ClAr(2) - 15, CurY, 1, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Val(prn_TotalPcs), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) - 5, CurY, 1, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_PL_Tot_Mtr), "########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 1, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_PL_Tot_GrsWgt), "########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 1, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_PL_Tot_NetWgt), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 1, 0, pFont)

            '   Common_Procedures.Print_To_PrintDocument(e, prn_TotalGrams, PageWidth - 10, CurY, 1, 0, pFont)
            '  'Common_Procedures.Print_To_PrintDocument(e, Format(Val(Format(Val(prn_PL_Tot_NetWgt), "#########0.000") / Format(Val(prn_PL_Tot_Mtr), "########0.00")), "#########0.000"), PageWidth - 10, CurY, 1, 0, pFont)


            End If

            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY + 24, LMargin + ClAr(1), LnAr(5))

            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY + 24, LMargin + ClAr(1) + ClAr(2), LnAr(5))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3), LnAr(5))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(2) + ClAr(3) + ClAr(4), CurY + 24, LMargin + ClAr(2) + ClAr(3) + ClAr(4), LnAr(5))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY + 24, LMargin + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), LnAr(5))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY + 24, LMargin + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(5))

            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), LnAr(5))

            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, LMargin + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), LnAr(5))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), LnAr(5))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), LnAr(5))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), LnAr(5))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), LnAr(5))
            ''e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), LnAr(5))


            CurY = CurY + TxtHgt + 5
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(6) = CurY




            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY, LMargin + ClAr(1), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY, LMargin + ClAr(1) + ClAr(2), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), LnAr(4))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(4))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), LnAr(2))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), LnAr(2))



            CurY = CurY + TxtHgt - 10

            p1Font = New Font("Calibri", 12, FontStyle.Bold)

            Common_Procedures.Print_To_PrintDocument(e, "For " & Trim(prn_HdDt.Rows(0).Item("Company_Name").ToString), PageWidth - 15, CurY, 1, 0, p1Font)
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt

            p1Font = New Font("Calibri", 12, FontStyle.Bold)

            Common_Procedures.Print_To_PrintDocument(e, "Prepared By", LMargin + 5, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, "AUTHORISED SIGNATORY", PageWidth - 5, CurY, 1, 0, pFont)
            CurY = CurY + TxtHgt + 10

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            e.Graphics.DrawLine(Pens.Black, LMargin, LnAr(1), LMargin, CurY)
            e.Graphics.DrawLine(Pens.Black, PageWidth, LnAr(1), PageWidth, CurY)

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Shared Sub Create_Report_as_PDF_File(RptViewer As Microsoft.Reporting.WinForms.ReportViewer, RptIpDet_ReportName As String, vPDFAttachment_FileName As String)
        Dim vPDF_PATH As String = ""
        Dim vPDFFILENAME As String = ""
        Dim vPDFFILENAME_WITH_PATH As String = ""

        vPDFFILENAME = Replace(Trim(LCase(RptIpDet_ReportName)), " ", "_")
        vPDFFILENAME = Replace(Trim(LCase(vPDFFILENAME)), "-", "_")
        vPDFFILENAME = Common_Procedures.Replace_SpecialCharacters_With_UnderScore(vPDFFILENAME)

        vPDF_PATH = Common_Procedures.AppPath & "\PDF"
        If System.IO.Directory.Exists(vPDF_PATH) = False Then
            System.IO.Directory.CreateDirectory(vPDF_PATH)
        End If

        vPDFFILENAME_WITH_PATH = Trim(vPDF_PATH) & "\" & Trim(vPDFFILENAME) & ".pdf"

        Dim Bytes() As Byte = RptViewer.LocalReport.Render("PDF", "", Nothing, Nothing, Nothing, Nothing, Nothing)
        Using Stream As New FileStream(vPDFFILENAME_WITH_PATH, FileMode.Create)
            Stream.Write(Bytes, 0, Bytes.Length)
            '--MsgBox("PDF File Exported Successfully.", MsgBoxStyle.Information, "PDF Exported")
        End Using

        vPDFAttachment_FileName = vPDFFILENAME_WITH_PATH

    End Sub

    Public Shared Function LotNo_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vFibre_ID As Integer, Optional ByVal DbName As String = "") As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vLotNo_Nm As String


        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If

        Da = New SqlClient.SqlDataAdapter("select LotNo_Name from " & Trim(DbName) & " LotNo_Head where LotNo_IdNo = " & Str(Val(vFibre_ID)), Cn1)
        Da.Fill(Dt)

        vLotNo_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vLotNo_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        LotNo_IdNoToName = Trim(vLotNo_Nm)

    End Function

    Public Shared Function LotNo_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vFib_Name As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vLotNo_ID As Integer

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If

        Da = New SqlClient.SqlDataAdapter("select LotNo_IdNo from " & Trim(DbName) & "LotNo_Head where LotNo_Name = '" & Trim(vFib_Name) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Da.Fill(Dt)

        vLotNo_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vLotNo_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        LotNo_NameToIdNo = Val(vLotNo_ID)

    End Function

    Public Shared Sub Printing_Format_PackingList_1569(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_DetDt As DataTable, ByRef prn_HdMxIndx As Integer, ByRef Prn_Hddt As DataTable, ByRef prn_hdar(,) As String, ByRef prn_PageNo As Integer, ByRef prn_Hdindx As Integer, ByRef prn_Count As Integer, ByRef prn_BLDetAr(,) As String, ByRef prn_DetIndx As Integer, ByRef Prn_DetMxIndx1 As Integer, ByRef Prn_PL_Tot_Pcs As Integer, ByRef Prn_PL_Tot_Mtr As String, ByRef prn_PL_Tot_GrsWgt As String, ByRef prn_PL_Tot_NetWgt As String, ByRef prn_hddt2 As DataTable, ByRef vPrn_Roll_Packing_No As String, ByRef vPrn_Roll_Packing_Date As String, ByRef vPrn_Roll_Packing_Po_No As String, ByRef vPrn_Roll_Packing_Po_Date As String, ByRef vSort_No As String, ByRef vCLONAME As String, ByRef vPrn_Invoice_Dc_No As String, vPrn_Invoice_Dc_Date As String, ByRef vPrn_ClothSales_Invoice_No As String, ByRef vPrn_ClothSales_Invoice_Date As String)
        Dim cmd As New SqlClient.SqlCommand
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim EntryCode As String
        Dim I As Integer = 0
        Dim NoofDets As Integer, NoofItems_PerPage As Integer
        Dim pFont As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim MilNm1 As String = "", MilNm2 As String = ""
        Dim ps As Printing.PaperSize
        Dim strHeight As Single = 0
        Dim PpSzSTS As Boolean = False
        Dim W1 As Single = 0
        Dim TotMtr1 As Single = 0, TotMtr2 As Single = 0
        Dim TotWgt1 As Single = 0, TotWgt2 As Single = 0
        Dim IncY As Single = 0
        Dim vprnCloNameAr(100, 10) As String
        Dim vprnCloNmInDx As Integer = 0
        Dim Y1 As Single = 0, Y2 As Single = 0
        Dim vLft_Y_Inc_STS As Boolean = False
        Dim X1 As Single = 0, X2 As Single = 0

        Dim prn_Tot_Pcs_ARclm_1 As Integer = 0
        Dim prn_Tot_Pcs_ARclm_2 As Integer = 0
        Dim prn_Tot_Pcs_ARclm_3 As Integer = 0

        Dim prn_Tot_Mtr_ARclm_1 As String = 0
        Dim prn_Tot_Mtr_ARclm_2 As String = 0
        Dim prn_Tot_Mtr_ARclm_3 As String = 0

        Dim prn_Tot_Wgt_ARclm_1 As String = 0
        Dim prn_Tot_Wgt_ARclm_2 As String = 0
        Dim prn_Tot_Wgt_ARclm_3 As String = 0



        For I = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(I).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(I)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                e.PageSettings.PaperSize = ps
                Exit For
            End If
        Next

        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 15
            .Right = 40
            .Top = 35
            .Bottom = 40
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With
        If PrintDocument1.DefaultPageSettings.Landscape = True Then
            With PrintDocument1.DefaultPageSettings.PaperSize
                PrintWidth = .Height - TMargin - BMargin
                PrintHeight = .Width - RMargin - LMargin
                PageWidth = .Height - TMargin
                PageHeight = .Width - RMargin
            End With
        End If

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        pFont = New Font("Calibri", 10, FontStyle.Regular)

        NoofItems_PerPage = 36 ' 32

        Erase ClArr
        Erase LnAr
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = 35 : ClArr(2) = 100 : ClArr(3) = 60 : ClArr(4) = 65 : ClArr(5) = 35 : ClArr(6) = 100 : ClArr(7) = 60 : ClArr(8) = 65 : ClArr(9) = 35 : ClArr(10) = 95 : ClArr(11) = 60
        ClArr(12) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11))

        TxtHgt = 17.75 '18.75 ' 19 ' e.Graphics.MeasureString("A", pFont).Height  '20


        Erase vprnCloNameAr
        vprnCloNameAr = New String(1000, 10) {}

        vprnCloNmInDx = 0

        Try

            If Prn_Hddt.Rows.Count > 0 Then

                If prn_Hdindx <= Prn_Hddt.Rows.Count - 1 Then

                    Printing_Format_PackingList_1569_PageHeader(PrintDocument1, e, Prn_Hddt, prn_DetDt, prn_hdar, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, prn_PageNo, NoofItems_PerPage, CurY, LnAr, ClArr, prn_Hdindx, prn_Count, prn_hddt2, vPrn_Roll_Packing_No, vPrn_Roll_Packing_Date, vPrn_Roll_Packing_Po_No, vPrn_Roll_Packing_Po_Date, vSort_No, vCLONAME, vPrn_Invoice_Dc_No, vPrn_Invoice_Dc_Date, vPrn_ClothSales_Invoice_No, vPrn_ClothSales_Invoice_Date)


                    NoofDets = 0
                    TotMtr1 = 0 : TotMtr2 = 0
                    TotWgt1 = 0 : TotWgt2 = 0

                    If Prn_DetMxIndx1 > 0 Then

                        '  CurY = TMargin + 380

                        Do While prn_DetIndx < Prn_DetMxIndx1

                            If NoofDets >= NoofItems_PerPage Then

                                prn_DetIndx = prn_DetIndx + NoofItems_PerPage + NoofItems_PerPage

                                If prn_DetIndx < Prn_DetMxIndx1 Then
                                    CurY = CurY + TxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + 5, CurY, 0, 0, pFont)

                                    Printing_Format_PackingList_1569_PageFooter(e, prn_hdar, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_Hdindx, False, Prn_Hddt, Prn_PL_Tot_Pcs, Prn_PL_Tot_Mtr, prn_PL_Tot_NetWgt, prn_Tot_Pcs_ARclm_1, prn_Tot_Mtr_ARclm_1, prn_Tot_Wgt_ARclm_1, prn_Tot_Pcs_ARclm_2, prn_Tot_Mtr_ARclm_2, prn_Tot_Wgt_ARclm_2, prn_Tot_Pcs_ARclm_3, prn_Tot_Mtr_ARclm_3, prn_Tot_Wgt_ARclm_3)

                                    e.HasMorePages = True

                                Else
                                    Printing_Format_PackingList_1569_PageFooter(e, prn_hdar, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_Hdindx, True, Prn_Hddt, Prn_PL_Tot_Pcs, Prn_PL_Tot_Mtr, prn_PL_Tot_NetWgt, prn_Tot_Pcs_ARclm_1, prn_Tot_Mtr_ARclm_1, prn_Tot_Wgt_ARclm_1, prn_Tot_Pcs_ARclm_2, prn_Tot_Mtr_ARclm_2, prn_Tot_Wgt_ARclm_2, prn_Tot_Pcs_ARclm_3, prn_Tot_Mtr_ARclm_3, prn_Tot_Wgt_ARclm_3)

                                    e.HasMorePages = False
                                End If

                                Return

                            End If


                            prn_DetIndx = prn_DetIndx + 1

                            CurY = CurY + TxtHgt

                            If Val(prn_BLDetAr(prn_DetIndx, 4)) <> 0 Or Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 4)) <> 0 Or Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage + NoofItems_PerPage, 4)) <> 0 Then

                                If Val(prn_BLDetAr(prn_DetIndx, 4)) <> 0 Then

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_BLDetAr(prn_DetIndx, 0)), LMargin, CurY - IncY, 2, ClArr(1), pFont)

                                    If Trim(prn_BLDetAr(prn_DetIndx, 2)) <> "" Then
                                        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_BLDetAr(prn_DetIndx, 2)), LMargin + ClArr(1) + 5, CurY - IncY, 0, ClArr(2), pFont, Nothing, True)
                                        prn_Tot_Pcs_ARclm_1 = prn_Tot_Pcs_ARclm_1 + 1
                                    End If

                                    If Val(prn_BLDetAr(prn_DetIndx, 4)) <> 0 Then
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_BLDetAr(prn_DetIndx, 4)), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY - IncY, 1, 0, pFont)
                                    End If
                                    If Val(prn_BLDetAr(prn_DetIndx, 5)) <> 0 Then
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_BLDetAr(prn_DetIndx, 5)), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY - IncY, 1, 0, pFont)
                                    End If

                                    prn_Tot_Mtr_ARclm_1 = prn_Tot_Mtr_ARclm_1 + Val(prn_BLDetAr(prn_DetIndx, 4))
                                    prn_Tot_Wgt_ARclm_1 = prn_Tot_Wgt_ARclm_1 + Val(prn_BLDetAr(prn_DetIndx, 5))

                                End If


                                ' -----------------  array 2

                                If Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 4)) <> 0 Then '[Or Trim(UCase(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 5))) = "BALETOTAL" Or Trim(UCase(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 5))) = "CLOTHTOTAL" Then


                                    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 0)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY - IncY, 2, ClArr(5), pFont)

                                    If Trim(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 2)) <> "" Then
                                        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 2)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + 5, CurY - IncY, 0, ClArr(6), pFont, Nothing, Shrink_To_Fit:=True)
                                        prn_Tot_Pcs_ARclm_2 = prn_Tot_Pcs_ARclm_2 + 1
                                    End If


                                    If Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 4)) <> 0 Then
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 4)), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) - 5, CurY - IncY, 1, 0, pFont)
                                    End If
                                    If Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 5)) <> 0 Then
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 5)), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) - 5, CurY - IncY, 1, 0, pFont)
                                    End If

                                    prn_Tot_Mtr_ARclm_2 = prn_Tot_Mtr_ARclm_2 + Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 4))
                                    prn_Tot_Wgt_ARclm_2 = prn_Tot_Wgt_ARclm_2 + Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 5))


                                    ' --------------- array 3


                                    If Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage + NoofItems_PerPage, 4)) <> 0 Then '[Or Trim(UCase(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 5))) = "BALETOTAL" Or Trim(UCase(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 5))) = "CLOTHTOTAL" Then

                                        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage + NoofItems_PerPage, 0)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY - IncY, 2, ClArr(9), pFont)


                                        If Trim(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage + NoofItems_PerPage, 2)) <> "" Then
                                            Common_Procedures.Print_To_PrintDocument(e, Trim(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage + NoofItems_PerPage, 2)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + 5, CurY - IncY, 0, ClArr(10), pFont, Nothing, True)
                                            prn_Tot_Pcs_ARclm_3 = prn_Tot_Pcs_ARclm_3 + 1
                                        End If

                                        If Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage + NoofItems_PerPage, 4)) <> 0 Then
                                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage + NoofItems_PerPage, 4)), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY - IncY, 1, 0, pFont)
                                        End If
                                        If Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage + NoofItems_PerPage, 5)) <> 0 Then
                                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage + NoofItems_PerPage, 5)), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY - IncY, 1, 0, pFont)
                                        End If

                                        prn_Tot_Mtr_ARclm_3 = prn_Tot_Mtr_ARclm_3 + Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage + NoofItems_PerPage, 4))
                                        prn_Tot_Wgt_ARclm_3 = prn_Tot_Wgt_ARclm_3 + Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage + NoofItems_PerPage, 5))

                                    End If

                                End If

                            End If

                            NoofDets = NoofDets + 1

                        Loop

                    End If

                    'CurY = TMargin + 940 ' 900

                    Printing_Format_PackingList_1569_PageFooter(e, prn_hdar, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_Hdindx, True, Prn_Hddt, Prn_PL_Tot_Pcs, Prn_PL_Tot_Mtr, prn_PL_Tot_NetWgt, prn_Tot_Pcs_ARclm_1, prn_Tot_Mtr_ARclm_1, prn_Tot_Wgt_ARclm_1, prn_Tot_Pcs_ARclm_2, prn_Tot_Mtr_ARclm_2, prn_Tot_Wgt_ARclm_2, prn_Tot_Pcs_ARclm_3, prn_Tot_Mtr_ARclm_3, prn_Tot_Wgt_ARclm_3)


                End If

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

        prn_Hdindx = prn_Hdindx + 1

        'If prn_HeadIndx <= prn_HdDt.Rows.Count - 1 Then
        '    e.HasMorePages = True
        'Else
        e.HasMorePages = False
        'End If

    End Sub
    Public Shared Sub Printing_Format_PackingList_1569_PageHeader(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByRef prn_DetDt As DataTable, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal prn_HdIndx As Integer, ByRef prn_Count As Integer, ByRef prn_HdDt2 As DataTable, ByRef vPrn_Roll_Packing_No As String, vPrn_Roll_Packing_Date As String, ByRef vPrn_Entry_Po_No As String, ByRef vPrn_Entry_Po_Date As String, ByRef vsort_No As String, ByRef vCLONAME As String, ByRef vPrn_Invoice_Dc_No As String, vPrn_Invoice_Dc_Date As String, vPrn_Clothsales_Invoice_No As String, vPrn_ClothSales_Invoice_Date As String)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim dt3 As New DataTable
        Dim dt4 As New DataTable
        Dim p1Font As Font
        Dim strHeight As Single
        Dim Cmp_Add As String = ""
        Dim C1, C2, C3, C4 As Single, W1, W2 As Single, S1, S2 As Single
        Dim Cmp_Name, Desc As String, Cmp_Add1 As String, Cmp_Add2 As String
        Dim Cmp_PhNo As String, Cmp_TinNo As String, Cmp_CstNo As String, Cmp_EMail As String

        PageNo = PageNo + 1

        CurY = TMargin + 30


        prn_Count = prn_Count + 1

        p1Font = New Font("Calibri", 15, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, "PACKING LIST", LMargin, CurY - TxtHgt - 5, 2, PrintWidth, p1Font)

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY
        Desc = ""
        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
        Cmp_PhNo = "" : Cmp_TinNo = "" : Cmp_CstNo = "" : Cmp_EMail = ""

        Desc = prn_HdDt.Rows(0).Item("Company_Description").ToString
        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
        Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString
        Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = "PHONE : " & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString) <> "" Then
            Cmp_TinNo = "GST NO.: " & prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
            Cmp_CstNo = "CST NO.: " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_EMail").ToString) <> "" Then
            Cmp_EMail = "MAIL ID : " & prn_HdDt.Rows(0).Item("Company_EMail").ToString
        End If

        CurY = CurY + TxtHgt - 5

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "-1249-" Then
            e.Graphics.DrawImage(DirectCast(Global.Textile.My.Resources.Resources.Company_Logo_Vaipav, Drawing.Image), LMargin + 20, CurY, 100, 90)
        End If

        p1Font = New Font("Calibri", 18, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font)
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

        p1Font = New Font("Calibri", 9, FontStyle.Regular)
        CurY = CurY + strHeight - 1
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1 & " " & Cmp_Add2, LMargin, CurY, 2, PrintWidth, p1Font,, True)

        CurY = CurY + TxtHgt - 1
        Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo & "     " & Cmp_TinNo & "     " & Cmp_EMail, LMargin, CurY, 2, PrintWidth, p1Font,, True)


        CurY = CurY + TxtHgt + 10
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(2) = CurY

        C1 = ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + 30
        C3 = ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10)
        C4 = C1 'ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8)


        W1 = e.Graphics.MeasureString("INVOICE DATE  : ", pFont).Width
        S1 = e.Graphics.MeasureString("TO     :    ", pFont).Width
        W2 = e.Graphics.MeasureString("Sort No.    : ", pFont).Width
        S2 = e.Graphics.MeasureString("P.O Date   : ", pFont).Width


        CurY = CurY + 10
        p1Font = New Font("Calibri", 9, FontStyle.Bold)
        'p1Font = New Font("Calibri", 10, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, "TO  :  " & "M/s." & prn_HdDt.Rows(0).Item("Ledger_Name").ToString, LMargin + 10, CurY, 0, 0, p1Font,, True)

        If Trim(vPrn_Invoice_Dc_No) <> "" Then

            Common_Procedures.Print_To_PrintDocument(e, "Dc No ", LMargin + C1, CurY - 5, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C3 - 15, CurY - 5, 0, 0, pFont)

            If Trim(vPrn_Invoice_Dc_No) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, Trim(vPrn_Invoice_Dc_No), LMargin + C3, CurY - 5, 0, 0, pFont)
            End If

        ElseIf Trim(vPrn_Clothsales_Invoice_No) <> "" Then

            Common_Procedures.Print_To_PrintDocument(e, "Invoice No", LMargin + C4, CurY - 5, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C3 - 15, CurY - 5, 0, 0, pFont)

            If Trim(vPrn_Clothsales_Invoice_No) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, Trim(vPrn_Clothsales_Invoice_No), LMargin + C3, CurY - 5, 0, 0, pFont)
            End If

        Else

            Common_Procedures.Print_To_PrintDocument(e, "Packing List No", LMargin + C4 - 5, CurY - 5, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C3 - 15, CurY - 5, 0, 0, pFont)

            If Trim(vPrn_Roll_Packing_No) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, Trim(vPrn_Roll_Packing_No), LMargin + C3, CurY - 5, 0, 0, pFont)
            End If
        End If

        Dim vLEDADD As String = ""

        vLEDADD = Trim(prn_HdDt.Rows(0).Item("Ledger_Address4").ToString)
        If Trim(vLEDADD) = "" Then
            vLEDADD = prn_HdDt.Rows(0).Item("Ledger_Address3").ToString
        End If
        If Trim(vLEDADD) = "" Then
            vLEDADD = prn_HdDt.Rows(0).Item("Ledger_Address2").ToString
        End If
        If Trim(vLEDADD) = "" Then
            vLEDADD = prn_HdDt.Rows(0).Item("Ledger_Address1").ToString
        End If


        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, " " & Trim(vLEDADD), LMargin + S1 - 10, CurY, 0, 0, pFont)
        p1Font = New Font("Calibri", 14, FontStyle.Bold)

        If Trim(vPrn_Invoice_Dc_Date) <> "" Then

            Common_Procedures.Print_To_PrintDocument(e, "Dc Date", LMargin + C1, CurY - 5, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C3 - 15, CurY - 5, 0, 0, pFont)

            If Trim(vPrn_Invoice_Dc_Date) <> "" Then
                If IsDate(vPrn_Invoice_Dc_Date) <> False Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(vPrn_Invoice_Dc_Date), "dd-MM-yyyy"), LMargin + C3, CurY - 5, 0, 0, pFont)
                End If
            End If

        ElseIf Trim(vPrn_ClothSales_Invoice_Date) <> "" Then

            Common_Procedures.Print_To_PrintDocument(e, "Invoice Date", LMargin + C4, CurY - 5, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C3 - 15, CurY - 5, 0, 0, pFont)
            If Trim(vPrn_ClothSales_Invoice_Date) <> "" Then
                If IsDate(vPrn_ClothSales_Invoice_Date) <> False Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(vPrn_ClothSales_Invoice_Date), "dd-MM-yyyy"), LMargin + C3, CurY - 5, 0, 0, pFont)
                End If
            End If

        Else
            Common_Procedures.Print_To_PrintDocument(e, "Packing List Date", LMargin + C4 - 5, CurY - 5, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C3 - 15, CurY - 5, 0, 0, pFont)

            If Trim(vPrn_Roll_Packing_Date) <> "" Then
                If IsDate(vPrn_Roll_Packing_Date) <> False Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(vPrn_Roll_Packing_Date), "dd-MM-yyyy"), LMargin + C3, CurY - 5, 0, 0, pFont)
                End If
            End If
        End If



        CurY = CurY + TxtHgt
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        e.Graphics.DrawLine(Pens.Black, LMargin + C4 - 10, CurY, LMargin + C4 - 10, LnAr(2))
        C2 = e.Graphics.MeasureString("P.O Date ", pFont).Width

        Try

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "Sort No.", LMargin + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W2, CurY, 0, 0, pFont)
            'Common_Procedures.Print_To_PrintDocument(e, Trim(vsort_No), LMargin + W2 + 15, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetDt.Rows(0).Item("sort_no").ToString), LMargin + W2 + 15, CurY, 0, 0, pFont)

            Common_Procedures.Print_To_PrintDocument(e, "Con ", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) - 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + C2, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetDt.Rows(0).Item("Cloth_Name").ToString), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + C2 + 15, CurY, 0, 0, pFont)
            'Common_Procedures.Print_To_PrintDocument(e, Trim(vCLONAME), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + C2 + 15, CurY, 0, 0, pFont)


            CurY = CurY + TxtHgt + 5
            Common_Procedures.Print_To_PrintDocument(e, "P.O No. ", LMargin + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W2, CurY, 0, 0, pFont)

            If Trim(vPrn_Entry_Po_No) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, Trim(vPrn_Entry_Po_No), LMargin + W2 + 15, CurY, 0, 0, pFont)
            End If

            Common_Procedures.Print_To_PrintDocument(e, "P.O Date ", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) - 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + C2, CurY, 0, 0, pFont)

            If Trim(vPrn_Entry_Po_Date) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, Trim(vPrn_Entry_Po_Date), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + C2 + 15, CurY, 0, 0, pFont)
            End If

            Common_Procedures.Print_To_PrintDocument(e, "Colour  :  Navy White Big Check  ", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + C2, CurY, 0, 0, pFont)

            CurY = CurY + TxtHgt + 5
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(2) = CurY
            LnAr(4) = CurY


            CurY = CurY + 5
            Common_Procedures.Print_To_PrintDocument(e, "S.NO", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PCS NO", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "METER", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(4), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "S.NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(5), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PCS NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "METER", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "S.NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 2, ClAr(9), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PCS NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 2, ClAr(10), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "METER", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(11), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)


            CurY = CurY + TxtHgt + 5
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(3) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub



    Public Shared Sub Printing_Format_PackingList_1569_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal NoofDets As Integer, ByVal prn_HdIndx As Integer, ByVal is_LastPage As Boolean, ByRef prn_HdDt As DataTable, ByRef Prn_PL_Tot_Pcs As Integer, ByRef prn_PL_Tot_Mtr As String, ByRef prn_PL_Tot_NetWgt As String, ByRef prn_Tot_Pcs_ARclm_1 As Integer, ByRef prn_Tot_Mtr_ARclm_1 As String, ByRef prn_Tot_Wgt_ARclm_1 As String, ByRef prn_Tot_Pcs_ARclm_2 As Integer, ByRef prn_Tot_Mtr_ARclm_2 As String, ByRef prn_Tot_Wgt_ARclm_2 As String, ByRef prn_Tot_Pcs_ARclm_3 As Integer, ByRef prn_Tot_Mtr_ARclm_3 As String, ByRef prn_Tot_Wgt_ARclm_3 As String)
        Dim I As Integer
        Dim p1Font As Font

        p1Font = New Font("Calibri", 7, FontStyle.Bold)

        Try

            For I = NoofDets + 1 To NoofItems_PerPage
                CurY = CurY + TxtHgt
            Next




            CurY = CurY + TxtHgt + 5
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(5) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY, LMargin + ClAr(1), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY, LMargin + ClAr(1) + ClAr(2), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), LnAr(4))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(4))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), LnAr(2))

            If is_LastPage = True Then

                CurY = CurY + 5
                ', Prn_PL_Tot_Pcs, Prn_PL_Tot_Mtr, prn_PL_Tot_NetWgt,
                Common_Procedures.Print_To_PrintDocument(e, " TOTAL PCS  :  ", LMargin + ClAr(1), CurY, 0, ClAr(2), pFont)
                Common_Procedures.Print_To_PrintDocument(e, Val(Prn_PL_Tot_Pcs), LMargin + ClAr(1) + ClAr(2), CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, " TOTAL METER  :  ", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_PL_Tot_Mtr), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + 10, CurY, 1, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, " TOTAL WEIGHT  :  ", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_PL_Tot_NetWgt), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + 15, CurY, 1, 0, pFont)


                CurY = CurY + TxtHgt + 5
                e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
                LnAr(6) = CurY

                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), LnAr(5))
                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), LnAr(5))

                'Common_Procedures.Print_To_PrintDocument(e, " TOTAL ", LMargin + ClAr(1), CurY, 0, ClAr(2), pFont)
                'Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Tot_Mtr_ARclm_1), "########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 1, 0, pFont, , True)
                'Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Tot_Wgt_ARclm_1), "########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 1, 0, pFont)

                'Common_Procedures.Print_To_PrintDocument(e, Val(prn_Tot_Pcs_ARclm_2), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + 15, CurY, 0, 0, pFont, , True)
                'Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Tot_Mtr_ARclm_2), "########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 1, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Tot_Wgt_ARclm_2), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 1, 0, pFont)

                'Common_Procedures.Print_To_PrintDocument(e, Val(prn_Tot_Pcs_ARclm_3), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + 15, CurY, 0, 0, pFont, , True)
                'Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Tot_Mtr_ARclm_3), "########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 1, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Tot_Wgt_ARclm_3), "########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY, 1, 0, pFont)

            End If




            ' e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY, LMargin + ClAr(1), LnAr(2))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY, LMargin + ClAr(1) + ClAr(2), LnAr(2))
            ''   e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3), LnAr(2))
            ''e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), LnAr(2))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), LnAr(4))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(4))
            ''e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), LnAr(2))
            '' e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), LnAr(2))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), LnAr(2))
            ''e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), LnAr(2))
            ''e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), LnAr(2))
            ''



            CurY = CurY + TxtHgt - 10

            p1Font = New Font("Calibri", 12, FontStyle.Bold)

            Common_Procedures.Print_To_PrintDocument(e, "For " & Trim(prn_HdDt.Rows(0).Item("Company_Name").ToString), PageWidth - 15, CurY, 1, 0, p1Font)
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt

            p1Font = New Font("Calibri", 12, FontStyle.Bold)

            Common_Procedures.Print_To_PrintDocument(e, "Prepared By", LMargin + 5, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, "AUTHORISED SIGNATORY", PageWidth - 5, CurY, 1, 0, pFont)
            CurY = CurY + TxtHgt + 10

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            e.Graphics.DrawLine(Pens.Black, LMargin, LnAr(1), LMargin, CurY)
            e.Graphics.DrawLine(Pens.Black, PageWidth, LnAr(1), PageWidth, CurY)

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Shared Sub get_FnYearCode_of_Last_2_Years(ByRef FnYearCode1 As String, ByRef FnYearCode2 As String)
        Dim YrCd As String

        YrCd = Microsoft.VisualBasic.Right(Trim(Common_Procedures.FnRange), 4)
        FnYearCode1 = Trim(Mid(Val(YrCd) - 1, 3, 2)) & "-" & Trim(Microsoft.VisualBasic.Right(YrCd, 2))

        YrCd = Microsoft.VisualBasic.Left(Trim(FnYearCode1), 2)
        FnYearCode2 = Trim(Format(Val(YrCd) - 1, "00")) & "-" & Trim(YrCd)

    End Sub

    Public Shared Sub Update_SizedPavu_BeamNo_for_Selection(ByVal Cn1 As SqlClient.SqlConnection)
        Dim Cmd As New SqlClient.SqlCommand

        Cmd.Connection = Cn1
        Cmd.CommandTimeout = 1000

        Cmd.CommandType = CommandType.StoredProcedure
        Cmd.CommandText = "SP_Update_SizedPavu_BeamNo_for_Selection"
        Cmd.ExecuteNonQuery()

        'Cmd.CommandText = "Update Stock_SizedPavu_Processing_Details set BeamNo_SetCode_forSelection = Beam_No + ' | ' + setcode_forSelection Where Beam_No <> ''"
        'Cmd.ExecuteNonQuery()

        Cmd.Dispose()
    End Sub


    Public Shared Sub check_Validating_for_eINVOICE_eWAY_GENERATION()
        Dim lckdt As Date
        Dim dat As Date

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1050" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1283" Or Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1393" Then

            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1050" Then '---- Kumaravel Textiles (Palladam)
                lckdt = #9/23/2024#
            ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1283" Then '---- ARUL  MURUGAN TEXTILES (SOMANUR)
                lckdt = #10/16/2025#
            ElseIf Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1393" Then '---- ESSAN MILLS (SOMANUR)
                lckdt = #8/26/2025#
            End If

            If IsDate(Common_Procedures.settings.Sdd) = True Then
                dat = Common_Procedures.settings.Sdd
            End If

            If DateDiff("d", lckdt.ToShortDateString, dat.ToShortDateString) > 0 Then
                MessageBox.Show("The JSON value could not be converted to System.Nullable`1[System.Int32]. Path: $.Data.EwbDtls", "DOES NOT GENERATE eINVOICE....", MessageBoxButtons.RetryCancel, MessageBoxIcon.Error)
                Application.Exit()
            End If

        End If

    End Sub


    Public Shared Function Check_Duplicate_Stores_Item(ByVal Cn1 As SqlClient.SqlConnection, ByVal vItemIdNo As String, ByVal vSURName As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As Boolean
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim Item_ID As Integer

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select Item_IdNo from  " & Trim(DbName) & " Stores_Item_Head where Item_IdNo <> " & Str(Val(vItemIdNo)) & " and Sur_Name = '" & Trim(vSURName) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        Item_ID = 0
        If Dt.Rows.Count > 0 Then

            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                Item_ID = Val(Dt.Rows(0)(0).ToString)
            End If

        End If

        Dt.Dispose()
        Da.Dispose()

        If Val(Item_ID) <> 0 Then
            MessageBox.Show("Duplicate Item Name" & Chr(13) & "It is already entered ID = " & Item_ID, "DOES NOT SAVE", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            Return True
        Else
            Return False
        End If

    End Function
    Public Shared Function Check_Duplicate_Item_Group_Name(ByVal Cn1 As SqlClient.SqlConnection, ByVal vItemGrpIdNo As String, ByVal vSURName As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing, Optional ByVal DbName As String = "") As Boolean
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim Itemgrp_ID As Integer

        If Trim(DbName) <> "" Then
            DbName = Trim(DbName) & ".."
        End If
        Da = New SqlClient.SqlDataAdapter("select ItemGroup_IdNo from  " & Trim(DbName) & " ItemGroup_Head where ItemGroup_IdNo <> " & Str(Val(vItemGrpIdNo)) & " and Sur_Name = '" & Trim(vSURName) & "'", Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        Itemgrp_ID = 0
        If Dt.Rows.Count > 0 Then

            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                Itemgrp_ID = Val(Dt.Rows(0)(0).ToString)
            End If

        End If

        Dt.Dispose()
        Da.Dispose()

        If Val(Itemgrp_ID) <> 0 Then
            MessageBox.Show("Duplicate Item Group Name" & Chr(13) & "It is already entered ID = " & Itemgrp_ID, "DOES NOT SAVE", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)
            Return True
        Else
            Return False
        End If

    End Function

    Public Shared Function get_Pcs_CurrentStock(ByVal Cn1 As SqlClient.SqlConnection, ByVal vComp_IdNo As Integer, ByVal vCloth_IdNo As Integer, ByVal vMARK As String) As Decimal
        Dim cmd As New SqlClient.SqlCommand
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim tr As SqlClient.SqlTransaction
        Dim CurStk As Decimal = 0



        cmd.Connection = Cn1



        cmd.CommandText = "Truncate table ReportTempSub"
        cmd.ExecuteNonQuery()

        cmd.CommandText = "Insert into ReportTempSub ( Int1) Select sum(a.Pcs) from Stock_Piece_Processing_Details a INNER JOIN Company_Head tZ ON a.Company_IdNo <> 0 and a.Company_IdNo = tZ.Company_IdNo  Where a.DeliveryTo_Idno = " & Str(Val(Common_Procedures.CommonLedger.Godown_Ac)) & " and a.Cloth_IdNo = " & Str(Val(vCloth_IdNo)) & " and a.mark = " & Str(Val(vMARK)) & " and a.Pcs <> 0   "
        cmd.ExecuteNonQuery()
        cmd.CommandText = "Insert into ReportTempSub ( Int1) Select -1*sum(a.Pcs) from Stock_Piece_Processing_Details a INNER JOIN Company_Head tZ ON a.Company_IdNo <> 0 and a.Company_IdNo = tZ.Company_IdNo  Where a.ReceivedFrom_Idno = " & Str(Val(Common_Procedures.CommonLedger.Godown_Ac)) & " and a.Cloth_IdNo = " & Str(Val(vCloth_IdNo)) & " and a.mark = " & Str(Val(vMARK)) & " and a.Pcs <> 0   "
        cmd.ExecuteNonQuery()


        'cmd.CommandText = "Truncate table ReportTemp"
        'cmd.ExecuteNonQuery()

        'cmd.CommandText = "Insert into ReportTemp ( Name1,        Currency1,     Int1   ,         meters1   ) " &
        '                             "          Select       Name1,        Currency1,     sum(Int1)   ,         sum(meters1) from ReportTempSub group by Name1,        Currency1 having sum(Int1)   <> 0 "
        'Nr = cmd.ExecuteNonQuery()

        Da = New SqlClient.SqlDataAdapter("Select       sum(Int1)   from ReportTempSub having sum(Int1)   <> 0 ", Cn1)
        Dt = New DataTable
        Da.Fill(Dt)

        CurStk = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                CurStk = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        ' tr.Commit()

        cmd.Dispose()

        Dt.Dispose()
        Da.Dispose()

        get_Pcs_CurrentStock = Format(Val(CurStk), "##########0")

    End Function
    Public Shared Sub Default_ClothHead_Updation(ByVal Cn1 As SqlClient.SqlConnection)
        Dim cmd As New SqlClient.SqlCommand
        Dim Nr = 0L
        cmd.Connection = Cn1

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1414" Then

            cmd.CommandText = "delete from Cloth_Head where Cloth_IdNo = -100 or Cloth_IdNo = 0"
            cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into Cloth_Head ( Cloth_IdNo, Cloth_Name, Sur_Name, ClothMain_Name , Cloth_WarpCount_IdNo, Cloth_WeftCount_IdNo) Values ( 0 ,        ''   ,        '',    '',  0,       0     )"
            Nr = cmd.ExecuteNonQuery()
            cmd.CommandText = "Insert into Cloth_Head ( Cloth_IdNo, Cloth_Name, Sur_Name, ClothMain_Name , Cloth_WarpCount_IdNo, Cloth_WeftCount_IdNo) Values (-100,     'MIXED',      'MIXED',  'MIXED' ,  0,      0     )"
            Nr = cmd.ExecuteNonQuery()

        End If

    End Sub

    Public Shared Function CheckingSection_NameToIdNo(ByVal Cn1 As SqlClient.SqlConnection, ByVal vChkSec_Nm As String) As Integer
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vChkSec_ID As Integer

        Da = New SqlClient.SqlDataAdapter("select Checking_Section_IdNo from Checking_Section_Head where Checking_Section_Name = '" & Trim(vChkSec_Nm) & "'", Cn1)
        Da.Fill(Dt)

        vChkSec_ID = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vChkSec_ID = Val(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        CheckingSection_NameToIdNo = Val(vChkSec_ID)

    End Function

    Public Shared Function CheckingSection_IdNoToName(ByVal Cn1 As SqlClient.SqlConnection, ByVal vChkSec_ID As Integer, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing) As String
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable
        Dim vChkSec_Nm As String

        Da = New SqlClient.SqlDataAdapter("select Checking_Section_Name from Checking_Section_Head where Checking_Section_IdNo = " & Str(Val(vChkSec_ID)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        vChkSec_Nm = ""
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vChkSec_Nm = Trim(Dt.Rows(0)(0).ToString)
            End If
        End If

        Dt.Dispose()
        Da.Dispose()

        CheckingSection_IdNoToName = Trim(vChkSec_Nm)

    End Function

    Public Shared Sub Printing_PackingSlip_Format_1578(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByRef prn_DetDt As DataTable, ByVal prn_DetMxIndx As Integer, ByRef prn_DetAr1(,) As String, ByRef prn_PageNo As Integer, ByRef prn_Count As Integer, ByRef prn_HdIndx As Integer, ByRef prn_DetIndx As Integer, prn_NoofBmDets As Integer, ByVal vWeight_Column_Status As Integer, Packing_SlipNo As String, ClothSales_Inv_No As String, ClothSales_Inv_Date As String, PartyName As String, PartyCityName As String, DeliveryTo_Name As String, Cloth_name As String, Pack_Type_Name As String, Tot_Pcs As String, Tot_Mtrs As String, Tot_Wgt As String, Vehicle_No As String, Fold As String, vClothDelv_No As String, Optional vPACKINGSLIPDATE As String = "", Optional vClothDelv_Date As String = "")
        Dim pFont As Font
        Dim ps As Printing.PaperSize
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim I As Integer
        Dim NoofItems_PerPage As Integer, NoofDets As Integer
        Dim TxtHgt As Single
        Dim PpSzSTS As Boolean = False
        Dim LnAr(15) As Single, ClAr(15) As Single
        Dim CurY As Single

        'Dim prn_NoofBmDets As Integer
        Dim prn_Totalweight_1 As String = ""
        Dim prn_Totalweight_2 As String = ""
        Dim prn_Totalmeter_1 As String = ""
        Dim prn_Totalmeter_2 As String = ""



        prn_NoofBmDets = 0
        prn_Totalmeter_1 = 0
        prn_Totalmeter_2 = 0
        prn_Totalweight_1 = 0
        prn_Totalweight_2 = 0



        For I = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(I).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(I)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                e.PageSettings.PaperSize = ps
                Exit For
            End If
        Next


        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 30
            .Right = 30
            .Top = 30
            .Bottom = 30
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        pFont = New Font("Calibri", 11, FontStyle.Regular)

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With

        If PrintDocument1.DefaultPageSettings.Landscape = True Then
            With PrintDocument1.DefaultPageSettings.PaperSize
                PrintWidth = .Height - TMargin - BMargin
                PrintHeight = .Width - RMargin - LMargin
                PageWidth = .Height - TMargin
                PageHeight = .Width - RMargin
            End With
        End If

        NoofItems_PerPage = 32

        Erase LnAr
        Erase ClAr

        'prn_DetIndx = 0

        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        ClAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        If Val(vWeight_Column_Status) = 1 Then
            ClAr(1) = Val(50) : ClAr(2) = 85 : ClAr(3) = 0 : ClAr(4) = 85 : ClAr(5) = 85 : ClAr(6) = 85 : ClAr(7) = 50 : ClAr(8) = 85 : ClAr(9) = 0 : ClAr(10) = 85 : ClAr(11) = 85
            ClAr(12) = PageWidth - (LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11))

        Else
            ClAr(1) = Val(65) : ClAr(2) = 80 : ClAr(3) = 100 : ClAr(4) = 100 : ClAr(5) = 100 : ClAr(6) = 100 : ClAr(7) = 100 : ClAr(8) = 80



            'ClAr(1) = Val(65) : ClAr(2) = 150 : ClAr(3) = 0 : ClAr(4) = 150 : ClAr(5) = 0 : ClAr(6) = 0 : ClAr(7) = 65 : ClAr(8) = 150 : ClAr(9) = 0 : ClAr(10) = 150 : ClAr(11) = 0
            'ClAr(12) = 0


        End If



        TxtHgt = 17.5

        'EntryCode = Trim(Val(lbl_Company.Tag)) & "-" & Trim(lbl_InvNo.Text) & "/" & Trim(Common_Procedures.FnYearCode)

        Try

            If prn_HdDt.Rows.Count > 0 Then

                Printing_PackingSlip_Format_1578_PageHeader(PrintDocument1, e, prn_HdDt, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, prn_PageNo, NoofItems_PerPage, CurY, LnAr, ClAr, Packing_SlipNo, ClothSales_Inv_No, ClothSales_Inv_Date, PartyName, PartyCityName, DeliveryTo_Name, Cloth_name, Pack_Type_Name, Fold, vClothDelv_No, vPACKINGSLIPDATE, vClothDelv_Date)

                NoofDets = 0

                CurY = CurY - 10

                If prn_DetMxIndx > 0 Then

                    Do While prn_DetIndx <= prn_DetMxIndx

                        If NoofDets >= NoofItems_PerPage Then

                            prn_DetIndx = prn_DetIndx + NoofItems_PerPage

                            If prn_DetIndx < prn_DetMxIndx Then
                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, "Continued....", PageWidth - 10, CurY, 1, 0, pFont)

                                NoofDets = NoofDets + 1

                                Printing_PackingSlip_Format_1578_PageFooter(PrintDocument1, e, prn_HdDt, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClAr, NoofDets, False, prn_Totalmeter_1, prn_Totalmeter_2, prn_Totalweight_1, prn_Totalweight_2, Pack_Type_Name, Tot_Pcs, Tot_Mtrs, Tot_Wgt, Vehicle_No, Fold)

                                e.HasMorePages = True
                            Else


                                Printing_PackingSlip_Format_1578_PageFooter(PrintDocument1, e, prn_HdDt, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClAr, NoofDets, True, prn_Totalmeter_1, prn_Totalmeter_2, prn_Totalweight_1, prn_Totalweight_2, Pack_Type_Name, Tot_Pcs, Tot_Mtrs, Tot_Wgt, Vehicle_No, Fold)

                                e.HasMorePages = False
                            End If

                            Return

                        End If

                        CurY = CurY + TxtHgt

                        'If Val(ClAr(5)) <> 0 Then

                        '    If Val(prn_DetAr1(prn_DetIndx, 4)) <> 0 Then

                        '        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx, 1)), LMargin + 10, CurY, 0, 0, pFont) 'pcs_no

                        '        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx, 3)), LMargin + ClAr(1) + 10, CurY, 0, 0, pFont)
                        '        'If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1438" Then
                        '        '    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx, 3)), LMargin + ClAr(1) + 10, CurY, 0, 0, pFont)
                        '        'Else
                        '        '    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx, 2)), LMargin + ClAr(1) + 10, CurY, 0, 0, pFont)
                        '        'End If

                        '        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx, 4)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + 10, CurY, 0, 0, pFont)


                        '        If Val(ClAr(5)) <> 0 Then
                        '            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx, 5)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + 10, CurY, 0, 0, pFont)
                        '            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx, 6)), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + 10, CurY, 0, 0, pFont)

                        '        End If

                        '        prn_NoofBmDets = prn_NoofBmDets + 1
                        '        prn_Totalmeter_1 = Val(prn_Totalmeter_1) + Val(prn_DetAr1(prn_DetIndx, 4))

                        '    End If

                        '    If Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 4)) <> 0 Then


                        '        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 1)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + 10, CurY, 0, 0, pFont) 'pcs_no

                        '        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 3)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + 10, CurY, 0, 0, pFont)
                        '        'If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1438" Then
                        '        '    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 3)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + 10, CurY, 0, 0, pFont)
                        '        'Else
                        '        '    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 2)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + 10, CurY, 0, 0, pFont)
                        '        'End If

                        '        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 4)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + 10, CurY, 0, 0, pFont)


                        '        If Val(ClAr(11)) <> 0 Then
                        '            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 5)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + 10, CurY, 0, 0, pFont)
                        '            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 6)), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + 10, CurY, 0, 0, pFont)
                        '        End If

                        '        prn_NoofBmDets = prn_NoofBmDets + 1
                        '        prn_Totalmeter_2 = Val(prn_Totalmeter_2) + Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 4))

                        '    End If

                        'Else

                        '    If Val(prn_DetAr1(prn_DetIndx, 4)) <> 0 Then


                        '        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx, 1)), LMargin + 10, CurY, 0, 0, pFont) 'pcs_no

                        '        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx, 3)), LMargin + ClAr(1) + 50, CurY, 2, 0, pFont)
                        '        'If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1438" Then
                        '        '    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx, 3)), LMargin + ClAr(1) + 50, CurY, 2, 0, pFont)
                        '        'Else
                        '        '    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx, 2)), LMargin + ClAr(1) + 50, CurY, 2, 0, pFont)
                        '        'End If


                        '        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx, 4)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + 50, CurY, 2, 0, pFont)


                        '        If Val(ClAr(5)) <> 0 Then
                        '            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx, 5)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + 50, CurY, 2, 0, pFont)
                        '            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx, 6)), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + 50, CurY, 2, 0, pFont)

                        '        End If

                        '        prn_NoofBmDets = prn_NoofBmDets + 1
                        '        prn_Totalmeter_1 = Val(prn_Totalmeter_1) + Val(prn_DetAr1(prn_DetIndx, 4))


                        '    End If

                        '    If Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 4)) <> 0 Then


                        '        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 1)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + 10, CurY, 0, 0, pFont) 'pcs_no

                        '        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 3)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + 50, CurY, 2, 0, pFont)
                        '        'If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1438" Then
                        '        '    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 3)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + 50, CurY, 2, 0, pFont)
                        '        'Else
                        '        '    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 2)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + 50, CurY, 2, 0, pFont)
                        '        'End If


                        '        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 4)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + 50, CurY, 50, 0, pFont)


                        '        If Val(ClAr(11)) <> 0 Then
                        '            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 5)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + 50, CurY, 2, 0, pFont)
                        '            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 6)), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + 50, CurY, 2, 0, pFont)
                        '        End If

                        '        prn_NoofBmDets = prn_NoofBmDets + 1
                        '        prn_Totalmeter_2 = Val(prn_Totalmeter_2) + Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 4))

                        '    End If
                        'End If

                        '****************************************************************

                        If Val(prn_DetAr1(prn_DetIndx, 4)) <> 0 Then


                            Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx, 1)), LMargin + 10, CurY, 0, 0, pFont) 'pcs_no
                            Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx, 7)), LMargin + ClAr(1) + 10, CurY, 0, 0, pFont) 'pcs_no



                            Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx, 2)), LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)



                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx, 4)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) - 10, CurY, 1, 0, pFont)


                            'If Val(ClAr(5)) <> 0 Then
                            '    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx, 5)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + 50, CurY, 2, 0, pFont)
                            '    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx, 6)), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + 50, CurY, 2, 0, pFont)

                            'End If

                            prn_NoofBmDets = prn_NoofBmDets + 1
                            prn_Totalmeter_1 = Val(prn_Totalmeter_1) + Val(prn_DetAr1(prn_DetIndx, 4))


                        End If

                        If Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 4)) <> 0 Then


                            Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 1)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + 10, CurY, 0, 0, pFont) 'pcs_no

                            Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 7)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)


                            Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 2)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)
                            ''If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1438" Then
                            ''    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 3)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + 50, CurY, 2, 0, pFont)
                            ''Else
                            ''    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 2)), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + 50, CurY, 2, 0, pFont)
                            ''End If


                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 4)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) - 10, CurY, 1, 0, pFont)


                            'If Val(ClAr(11)) <> 0 Then
                            '    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 5)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + 50, CurY, 2, 0, pFont)
                            '    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 6)), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + 50, CurY, 2, 0, pFont)
                            'End If

                            prn_NoofBmDets = prn_NoofBmDets + 1
                            prn_Totalmeter_2 = Val(prn_Totalmeter_2) + Val(prn_DetAr1(prn_DetIndx + NoofItems_PerPage, 4))

                        End If


                        '****************************************************************



                        NoofDets = NoofDets + 1

                        prn_NoofBmDets = prn_NoofBmDets + 1
                        prn_DetIndx = prn_DetIndx + 1
                    Loop

                End If

                Printing_PackingSlip_Format_1578_PageFooter(PrintDocument1, e, prn_HdDt, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClAr, NoofDets, True, prn_Totalmeter_1, prn_Totalmeter_2, prn_Totalweight_1, prn_Totalweight_2, Pack_Type_Name, Tot_Pcs, Tot_Mtrs, Tot_Wgt, Vehicle_No, Fold)

            End If

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

        e.HasMorePages = False

    End Sub

    Private Shared Sub Printing_PackingSlip_Format_1578_PageHeader(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, Packing_SlipNo As String, ClothSales_Inv_No As String, ClothSales_Inv_Date As String, PartyName As String, PartyCityName As String, DeliveryTo_Name As String, Cloth_name As String, Pack_Type_Name As String, Fold As String, vClothDelv_No As String, Optional vPACKINGSLIPDATE As String = "", Optional vClothDelv_Date As String = "")
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim dt3 As New DataTable
        Dim dt4 As New DataTable
        Dim p1Font As Font
        Dim strHeight As Single
        Dim Cmp_Add As String = ""
        Dim C1 As Single, W1, W2 As Single, S1, S2 As Single
        Dim Cmp_Name, Desc As String, Cmp_Add1 As String, Cmp_Add2 As String
        Dim Cmp_PhNo As String, Cmp_TinNo As String, Cmp_CstNo As String, Cmp_EMail As String
        Dim vCityName As String = ""



        PageNo = PageNo + 1

        CurY = TMargin + 30

        p1Font = New Font("Calibri", 15, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, "PACKING DETAILS", LMargin, CurY - TxtHgt - 5, 2, PrintWidth, p1Font)

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY
        Desc = ""
        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
        Cmp_PhNo = "" : Cmp_TinNo = "" : Cmp_CstNo = "" : Cmp_EMail = ""

        Desc = prn_HdDt.Rows(0).Item("Company_Description").ToString
        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
        Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString
        Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = "PHONE : " & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString) <> "" Then
            Cmp_TinNo = "GST NO.: " & prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
            Cmp_CstNo = "CST NO.: " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_EMail").ToString) <> "" Then
            Cmp_EMail = "MAIL ID : " & prn_HdDt.Rows(0).Item("Company_EMail").ToString
        End If

        CurY = CurY + TxtHgt
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height



        p1Font = New Font("Calibri", 18, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font)
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

        If Trim(Desc) <> "" Then
            CurY = CurY + strHeight - 1
            Common_Procedures.Print_To_PrintDocument(e, Desc, LMargin, CurY, 2, PrintWidth, pFont)
            CurY = CurY + TxtHgt - 1

        Else
            CurY = CurY + strHeight - 1

        End If



        Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1, LMargin, CurY, 2, PrintWidth, pFont)

        CurY = CurY + TxtHgt - 1
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont)
        CurY = CurY + TxtHgt - 1
        Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, pFont)
        CurY = CurY + TxtHgt - 1
        Common_Procedures.Print_To_PrintDocument(e, Cmp_TinNo, LMargin + 10, CurY, 0, 0, pFont)
        Common_Procedures.Print_To_PrintDocument(e, Cmp_EMail, LMargin, CurY, 2, PrintWidth, pFont)
        Common_Procedures.Print_To_PrintDocument(e, Cmp_CstNo, PageWidth - 10, CurY, 1, 0, pFont)

        CurY = CurY + TxtHgt + 10
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(2) = CurY

        C1 = ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5)
        W1 = e.Graphics.MeasureString("INVOICE     DATE  : ", pFont).Width
        S1 = e.Graphics.MeasureString("TO     :    ", pFont).Width
        W2 = e.Graphics.MeasureString("Despatch To   : ", pFont).Width
        S2 = e.Graphics.MeasureString("Sent Through  : ", pFont).Width





        CurY = CurY + 10
        p1Font = New Font("Calibri", 12, FontStyle.Bold)
        If Trim(PartyName) <> "" Then




            Common_Procedures.Print_To_PrintDocument(e, "TO  :  " & "M/s." & Trim(PartyName), LMargin + 10, CurY, 0, 0, p1Font)

        Else





            Common_Procedures.Print_To_PrintDocument(e, "PACKING TYPE :", LMargin + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Trim(Pack_Type_Name), LMargin + 140, CurY, 0, 0, p1Font)

        End If

        'CurY = CurY + TxtHgt
        'p1Font = New Font("Calibri", 12, FontStyle.Regular)
        'Common_Procedures.Print_To_PrintDocument(e, "PARTY NAME :", LMargin + 10, CurY, 0, 0, p1Font)
        'Common_Procedures.Print_To_PrintDocument(e, "M/s. " & PartyName, LMargin + 140, CurY, 0, 0, p1Font)

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1274" Then '---- SHRI ADHIYAMAN WEAVING MILLS (P) LIMITED (SOMANUR)
            If Trim(Packing_SlipNo) <> "" Then
                If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1391" Then '---- SAKTHI DHARAN TEXTILES (THIRUCENGODU)
                    Common_Procedures.Print_To_PrintDocument(e, "DC NO", LMargin + C1 + 10, CurY, 0, 0, pFont)



                Else
                    Common_Procedures.Print_To_PrintDocument(e, "PACKING LIST No.", LMargin + C1 + 10, CurY, 0, 0, pFont)
                End If

                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(Packing_SlipNo), LMargin + C1 + W1 + 30, CurY, 0, 0, p1Font)
            End If
        End If



        CurY = CurY + TxtHgt
        If Trim(PartyCityName) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, " " & PartyCityName, LMargin + S1 + 20, CurY, 0, 0, pFont)
        End If


        p1Font = New Font("Calibri", 12, FontStyle.Bold)
        If Trim(ClothSales_Inv_No) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, "INVOICE NO", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Trim(ClothSales_Inv_No), LMargin + C1 + W1 + 30, CurY, 0, 0, p1Font)

        ElseIf Trim(vClothDelv_No) <> "" Then

            Common_Procedures.Print_To_PrintDocument(e, "DC NO", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Trim(vClothDelv_No), LMargin + C1 + W1 + 30, CurY, 0, 0, p1Font)

        End If


        CurY = CurY + TxtHgt

        p1Font = New Font("Calibri", 14, FontStyle.Bold)
        If Trim(ClothSales_Inv_Date) <> "" Then
            If Trim(ClothSales_Inv_No) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, "INVOICE DATE", LMargin + C1 + 10, CurY, 0, 0, pFont)

            Else
                Common_Procedures.Print_To_PrintDocument(e, "DC DATE", LMargin + C1 + 10, CurY, 0, 0, pFont)
            End If

            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Trim(ClothSales_Inv_Date), LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)

        ElseIf Trim(vClothDelv_Date) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, "DC DATE", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Trim(vClothDelv_Date), LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)

        ElseIf Trim(vPACKINGSLIPDATE) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, "PACKINGSLIP DATE", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Trim(vPACKINGSLIPDATE), LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)



        End If


        CurY = CurY + TxtHgt + 5
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        e.Graphics.DrawLine(Pens.Black, LMargin + C1, CurY, LMargin + C1, LnAr(2))

        Try

            CurY = CurY + TxtHgt
            If Trim(Cloth_name) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, "QUALITY", LMargin + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(Cloth_name), LMargin + W1 + 25, CurY, 0, 0, pFont)
            End If

            If Trim(DeliveryTo_Name) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, "DELIVERY TO", LMargin + C1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(DeliveryTo_Name), LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)
            End If

            If Val(Fold) <> 0 Then
                Common_Procedures.Print_To_PrintDocument(e, "FOLDING : " & Trim(Fold), PageWidth - 20, CurY, 1, 0, pFont)
                '      Common_Procedures.Print_To_PrintDocument(e, "FOLDING", LMargin + C1 + 10, CurY, 0, 0, pFont)
                '      Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
                '      Common_Procedures.Print_To_PrintDocument(e, Trim(Fold), LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)
            End If

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(2) = CurY


            CurY = CurY + TxtHgt - 15
            LnAr(4) = CurY
            'Common_Procedures.Print_To_PrintDocument(e, "S.NO", LMargin, CurY, 2, ClAr(1), pFont)

            ''Common_Procedures.Print_To_PrintDocument(e, "LR NO", LMargin, CurY, 2, ClAr(1), pFont)

            'If Trim(UCase(Pack_Type_Name)) = "ROLL" Then
            '    Common_Procedures.Print_To_PrintDocument(e, "ROLL NO", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            'ElseIf Trim(UCase(Pack_Type_Name)) = "BUNDLE" Then
            '    Common_Procedures.Print_To_PrintDocument(e, "BUNDLE NO", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            'Else
            '    Common_Procedures.Print_To_PrintDocument(e, "BALE NO", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            'End If

            'Common_Procedures.Print_To_PrintDocument(e, "METERS", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(4), pFont)

            'If Val(ClAr(5)) <> 0 Then
            '    Common_Procedures.Print_To_PrintDocument(e, "NET WGT", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(5), pFont)
            '    Common_Procedures.Print_To_PrintDocument(e, "GRAMS /", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)
            'End If

            'Common_Procedures.Print_To_PrintDocument(e, "S.NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)



            'If Trim(UCase(Pack_Type_Name)) = "ROLL" Then
            '    Common_Procedures.Print_To_PrintDocument(e, "ROLL NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            'ElseIf Trim(UCase(Pack_Type_Name)) = "BUNDLE" Then
            '    Common_Procedures.Print_To_PrintDocument(e, "BUNDLE NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            'Else
            '    Common_Procedures.Print_To_PrintDocument(e, "BALE NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            'End If

            'Common_Procedures.Print_To_PrintDocument(e, "METERS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 2, ClAr(10), pFont)

            'If Val(ClAr(11)) <> 0 Then
            '    Common_Procedures.Print_To_PrintDocument(e, "NET WGT", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(11), pFont)
            '    Common_Procedures.Print_To_PrintDocument(e, "GRAMS /", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)

            'End If

            'CurY = CurY + 15
            'If Val(ClAr(5)) <> 0 Then
            '    Common_Procedures.Print_To_PrintDocument(e, "MTR", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)
            'End If

            'If Val(ClAr(11)) <> 0 Then
            '    Common_Procedures.Print_To_PrintDocument(e, "MTR", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)
            'End If


            Common_Procedures.Print_To_PrintDocument(e, "S.NO", LMargin, CurY, 2, ClAr(1), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "LR NO", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)

            If Trim(UCase(Pack_Type_Name)) = "ROLL" Then
                Common_Procedures.Print_To_PrintDocument(e, "ROLL NO", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            ElseIf Trim(UCase(Pack_Type_Name)) = "BUNDLE" Then
                Common_Procedures.Print_To_PrintDocument(e, "BUNDLE NO", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            Else
                Common_Procedures.Print_To_PrintDocument(e, "BALE NO", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            End If

            Common_Procedures.Print_To_PrintDocument(e, "METERS", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(4), pFont)




            'If Val(ClAr(6)) <> 0 Then
            '    Common_Procedures.Print_To_PrintDocument(e, "NET WGT", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)
            '    Common_Procedures.Print_To_PrintDocument(e, "GRAMS /", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)
            'End If

            Common_Procedures.Print_To_PrintDocument(e, "S.NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(5), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "LR NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)


            If Trim(UCase(Pack_Type_Name)) = "ROLL" Then
                Common_Procedures.Print_To_PrintDocument(e, "ROLL NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)
            ElseIf Trim(UCase(Pack_Type_Name)) = "BUNDLE" Then
                Common_Procedures.Print_To_PrintDocument(e, "BUNDLE NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)
            Else
                Common_Procedures.Print_To_PrintDocument(e, "BALE NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)
            End If

            Common_Procedures.Print_To_PrintDocument(e, "METERS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)


            CurY = CurY + TxtHgt + 5

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(3) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub

    Private Shared Sub Printing_PackingSlip_Format_1578_PageFooter(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal NoofDets As Integer, ByVal is_LastPage As Boolean, prn_Totalmeter_1 As String, prn_Totalmeter_2 As String, prn_Totalweight_1 As String, prn_Totalweight_2 As String, Pack_Type_Name As String, Tot_Pcs As String, Tot_Mtrs As String, Tot_Wgt As String, Vehicle_No As String, Fold As String)
        Dim I As Integer
        Dim p1Font As Font
        Dim Bale_Roll_Nm As String




        Try

            For I = NoofDets + 1 To NoofItems_PerPage
                CurY = CurY + TxtHgt
            Next
            CurY = CurY + TxtHgt + 5

            If Val(ClAr(5)) <> 0 Then

                If Val(prn_Totalmeter_1) <> 0 Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Totalmeter_1), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) - 2, CurY, 1, 0, pFont)
                End If
                If Val(prn_Totalmeter_2) <> 0 Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Totalmeter_2), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) - 2, CurY, 1, 0, pFont)
                End If


                If Val(prn_Totalweight_1) <> 0 Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Totalweight_1), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) - 2, CurY, 1, 0, pFont)
                End If

                If Val(prn_Totalweight_2) <> 0 Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Totalweight_2), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) - 2, CurY, 1, 0, pFont)
                End If


            Else
                If Val(prn_Totalmeter_1) <> 0 Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Totalmeter_1), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + 50, CurY, 2, 0, pFont)
                End If

                If Val(prn_Totalmeter_2) <> 0 Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Totalmeter_2), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) - 50, CurY, 1, 0, pFont)
                End If


            End If
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            CurY = CurY + TxtHgt + 5



            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(5) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY, LMargin + ClAr(1), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY, LMargin + ClAr(1) + ClAr(2), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), LnAr(2))
            If Val(ClAr(5)) <> 0 Then
                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), LnAr(2))
            End If

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), LnAr(2))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), LnAr(2))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), LnAr(2))

            'If Val(ClAr(5)) <> 0 Then
            '    e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), LnAr(2))

            '    e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), LnAr(2))

            'End If

            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(2))


            If is_LastPage = True Then

                CurY = CurY + TxtHgt - 10


                If Trim(UCase(Pack_Type_Name)) = "BALE" Then
                    Bale_Roll_Nm = "TOTAL BALES"

                ElseIf Trim(UCase(Pack_Type_Name)) = "ROLL" Then
                    Bale_Roll_Nm = "TOTAL ROLLS"

                Else
                    Bale_Roll_Nm = "TOTAL BUNDLES"

                End If


                Common_Procedures.Print_To_PrintDocument(e, Trim(Bale_Roll_Nm) & "  :  " & Val(Tot_Pcs), LMargin + ClAr(1) + 5, CurY, 0, 0, pFont)

                Common_Procedures.Print_To_PrintDocument(e, "TOTAL METERS  : " & Format(Val(Tot_Mtrs), "########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + 20, CurY, 0, 0, pFont)

                If Val(ClAr(5)) <> 0 Then
                    If Val(Tot_Wgt) <> 0 Then
                        Common_Procedures.Print_To_PrintDocument(e, "TOTAL WEIGHT  : " & Format(Val(Tot_Wgt), "########0.000"), PageWidth - 20, CurY, 1, 0, pFont)
                    End If
                End If


                If prn_HdDt.Rows(0).Item("Note").ToString <> "" Then

                    CurY = CurY + TxtHgt + 5
                    e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
                    Common_Procedures.Print_To_PrintDocument(e, "NOTE  ", LMargin + 10, CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, "  : " & Trim(prn_HdDt.Rows(0).Item("Note").ToString), LMargin + ClAr(1) + 5, CurY, 0, 0, pFont)
                End If
                CurY = CurY + TxtHgt + 5
                e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
                LnAr(6) = CurY

            End If

            CurY = CurY + TxtHgt - 10
            If Trim(Vehicle_No) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, "VEHICLE NO  : ", LMargin + ClAr(1) + 5, CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Trim(Vehicle_No), LMargin + ClAr(1) + ClAr(2) + 20, CurY, 0, 0, pFont)
            End If




            p1Font = New Font("Calibri", 12, FontStyle.Bold)

            Common_Procedures.Print_To_PrintDocument(e, "For " & Trim(prn_HdDt.Rows(0).Item("Company_Name").ToString), PageWidth - 15, CurY, 1, 0, p1Font)
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt



            Common_Procedures.Print_To_PrintDocument(e, "AUTHORISED SIGNATORY ", PageWidth - 5, CurY, 1, 0, pFont)
            CurY = CurY + TxtHgt + 10

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            e.Graphics.DrawLine(Pens.Black, LMargin, LnAr(1), LMargin, CurY)
            e.Graphics.DrawLine(Pens.Black, PageWidth, LnAr(1), PageWidth, CurY)


        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Shared Function Printing_BarCode_Sticker_Format1_1608_DosPrint(prn_DetDt, prn_DetAr, prn_DetIndx)

        Dim fs As FileStream
        Dim sw As StreamWriter
        Dim prn_Indx As Integer = 0
        Dim ItmNm1 As String, ItmNm2 As String
        Dim PrnTxt As String = ""
        Dim vBarCode As String = ""
        Dim I = 0

        fs = New FileStream(Common_Procedures.Dos_Printing_FileName_Path, FileMode.Create)
        sw = New StreamWriter(fs, System.Text.Encoding.Default)

        Try

            If prn_DetDt.Rows.Count > 0 Then

                Do While prn_Indx <= prn_DetIndx 'prn_DetDt.Rows.Count - 1

                    prn_Indx = prn_Indx + 1

                    vBarCode = Trim(UCase(prn_DetAr(prn_Indx, 5)))

                    If Val(prn_DetAr(prn_Indx, 4)) <> 0 Then ' --METER


                        ItmNm1 = Trim(prn_DetAr(prn_Indx, 0)) ' --- LEDGER NAME

                        ItmNm2 = ""
                        If Len(ItmNm1) > 20 Then
                            For I = 20 To 1 Step -1
                                If Mid$(Trim(ItmNm1), I, 1) = " " Or Mid$(Trim(ItmNm1), I, 1) = "," Or Mid$(Trim(ItmNm1), I, 1) = "." Or Mid$(Trim(ItmNm1), I, 1) = "-" Or Mid$(Trim(ItmNm1), I, 1) = "_" Or Mid$(Trim(ItmNm1), I, 1) = "(" Or Mid$(Trim(ItmNm1), I, 1) = ")" Or Mid$(Trim(ItmNm1), I, 1) = "[" Or Mid$(Trim(ItmNm1), I, 1) = "]" Or Mid$(Trim(ItmNm1), I, 1) = "{" Or Mid$(Trim(ItmNm1), I, 1) = "}" Then Exit For
                            Next I
                            If I = 0 Then I = 20

                            ItmNm2 = Microsoft.VisualBasic.Right(Trim(ItmNm1), Len(ItmNm1) - I + 1)
                            ItmNm1 = Microsoft.VisualBasic.Left(Trim(ItmNm1), I - 1)
                        End If

                        ItmNm1 = Replace(ItmNm1, """", """""")
                        ItmNm2 = Replace(ItmNm2, """", """""")

                        PrnTxt = "SIZE 82.5 mm, 40 mm"
                        sw.WriteLine(PrnTxt)
                        PrnTxt = "DIRECTION 0,0"
                        sw.WriteLine(PrnTxt)
                        PrnTxt = "REFERENCE 0,0"
                        sw.WriteLine(PrnTxt)
                        PrnTxt = "OFFSET 0 mm"
                        sw.WriteLine(PrnTxt)
                        PrnTxt = "SET PEEL OFF"
                        sw.WriteLine(PrnTxt)
                        PrnTxt = "SET CUTTER OFF"
                        sw.WriteLine(PrnTxt)
                        PrnTxt = "SET PARTIAL_CUTTER OFF"
                        sw.WriteLine(PrnTxt)
                        PrnTxt = "SET TEAR ON"
                        sw.WriteLine(PrnTxt)
                        PrnTxt = "CLS"
                        sw.WriteLine(PrnTxt)
                        PrnTxt = "CODEPAGE 1252"
                        sw.WriteLine(PrnTxt)

                        PrnTxt = "TEXT 612,274,""ROMAN.TTF"",180,1,12,""SIZING"""
                        sw.WriteLine(PrnTxt)
                        PrnTxt = "BOX 33,13,633,305,3"
                        sw.WriteLine(PrnTxt)
                        PrnTxt = "TEXT 612,163,""ROMAN.TTF"",180,1,12,""BEAM NO"""
                        sw.WriteLine(PrnTxt)
                        PrnTxt = "TEXT 612,112,""ROMAN.TTF"",180,1,12,""ENDS"""
                        sw.WriteLine(PrnTxt)
                        PrnTxt = "TEXT 613,63,""ROMAN.TTF"",180,1,12,""METER"""
                        sw.WriteLine(PrnTxt)
                        PrnTxt = "TEXT 472,296,""0"",180,31,22,"":"""
                        sw.WriteLine(PrnTxt)
                        PrnTxt = "TEXT 464,168,""ROMAN.TTF"",180,1,14,"":"""
                        sw.WriteLine(PrnTxt)
                        PrnTxt = "TEXT 464,115,""ROMAN.TTF"",180,1,14,"":"""
                        sw.WriteLine(PrnTxt)
                        PrnTxt = "TEXT 464,62,""ROMAN.TTF"",180,1,14,"":"""
                        sw.WriteLine(PrnTxt)

                        PrnTxt = "TEXT 440,163,""ROMAN.TTF"",180,1,12,""" & Trim(prn_DetAr(prn_Indx, 2)) & """" ' -- BEAM NO 
                        sw.WriteLine(PrnTxt)
                        PrnTxt = "TEXT 441,112,""ROMAN.TTF"",180,1,12,""" & Trim(prn_DetAr(prn_Indx, 3)) & """"  '  ENDS NAME
                        sw.WriteLine(PrnTxt)
                        PrnTxt = "TEXT 441,59,""ROMAN.TTF"",180,1,12,""" & Trim(Val(prn_DetAr(prn_Indx, 4))) & """"
                        sw.WriteLine(PrnTxt)
                        PrnTxt = "QRCODE 228,215,L,7,A,180,M2,S7,""" & Trim(UCase(vBarCode)) & """"
                        sw.WriteLine(PrnTxt)

                        'PrnTxt = "TEXT 222,50,""ROMAN.TTF"",180,1,12,""" & Trim(UCase(vBarCode)) & """"
                        'sw.WriteLine(PrnTxt)
                        PrnTxt = "TEXT 612,215,""ROMAN.TTF"",180,1,12,""SETNO"""
                        sw.WriteLine(PrnTxt)
                        PrnTxt = "TEXT 464,217,""ROMAN.TTF"",180,1,14,"":"""
                        sw.WriteLine(PrnTxt)
                        PrnTxt = "TEXT 440,213,""ROMAN.TTF"",180,1,12,""" & Trim(prn_DetAr(prn_Indx, 1)) & """" ' --- SET NO 
                        sw.WriteLine(PrnTxt)
                        PrnTxt = "TEXT 442,293,""ROMAN.TTF"",180,1,11,""" & Trim(ItmNm1) & """"
                        sw.WriteLine(PrnTxt)
                        PrnTxt = "TEXT 442,256,""ROMAN.TTF"",180,1,11,""" & Trim(ItmNm2) & """"
                        sw.WriteLine(PrnTxt)

                        PrnTxt = "PRINT 1,1"
                        sw.WriteLine(PrnTxt)

                    End If


                Loop

            End If

            sw.Close()
            fs.Close()
            sw.Dispose()
            fs.Dispose()

            If Trim(Common_Procedures.Dos_Print_BatchFileName_Path) <> "" Then
                If File.Exists(Common_Procedures.Dos_Print_BatchFileName_Path) = True Then
                    Shell(Common_Procedures.Dos_Print_BatchFileName_Path)
                End If
            End If

            'If Val(Common_Procedures.Print_OR_Preview_Status) = 2 Then
            '    Dim p1 As New System.Diagnostics.Process
            '    p1.EnableRaisingEvents = False
            '    p1.StartInfo.FileName = Common_Procedures.Dos_PrintPreView_BatchFileName_Path
            '    p1.StartInfo.WindowStyle = ProcessWindowStyle.Maximized
            '    p1.Start()

            'Else
            '    Dim p2 As New System.Diagnostics.Process
            '    p2.EnableRaisingEvents = False
            '    p2.StartInfo.FileName = Common_Procedures.Dos_Print_BatchFileName_Path
            '    p2.StartInfo.CreateNoWindow = True
            '    p2.StartInfo.WindowStyle = ProcessWindowStyle.Hidden
            '    p2.Start()

            'End If

            MessageBox.Show("BarCode Sticker Printed", "FOR BARCODE STICKER PRINTING...", MessageBoxButtons.OKCancel, MessageBoxIcon.Information)

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT PRINT BARCODE STICKER...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)


        Finally

            Try
                sw.Close()
                fs.Close()
                sw.Dispose()
                fs.Dispose()
            Catch ex As Exception
                '-----

            End Try

        End Try

    End Function

    Public Shared Sub Printing_Format_PackingList_1608(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_DetDt As DataTable, ByRef prn_HdMxIndx As Integer, ByRef Prn_Hddt As DataTable, ByRef prn_hdar(,) As String, ByRef prn_PageNo As Integer, ByRef prn_Hdindx As Integer, ByRef prn_Count As Integer, ByRef prn_BLDetAr(,) As String, ByRef prn_DetIndx As Integer, ByRef Prn_DetMxIndx1 As Integer, ByRef Prn_PL_Tot_Pcs As Integer, ByRef Prn_PL_Tot_Mtr As String, ByRef prn_PL_Tot_GrsWgt As String, ByRef prn_PL_Tot_NetWgt As String, ByRef prn_hddt2 As DataTable, ByRef vPrn_Roll_Packing_No As String, ByRef vPrn_Roll_Packing_Date As String, ByRef vPrn_Roll_Packing_Po_No As String, ByRef vPrn_Roll_Packing_Po_Date As String, ByRef vSort_No As String, ByRef vCLONAME As String, ByRef vPrn_Invoice_Dc_No As String, vPrn_Invoice_Dc_Date As String, ByRef vPrn_ClothSales_Invoice_No As String, ByRef vPrn_ClothSales_Invoice_Date As String, ByVal Show_Weight_Column_STS As Boolean)
        Dim cmd As New SqlClient.SqlCommand
        Dim Da1 As New SqlClient.SqlDataAdapter
        Dim Dt1 As New DataTable
        Dim EntryCode As String
        Dim I As Integer = 0
        Dim NoofDets As Integer, NoofItems_PerPage As Integer
        Dim pFont As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim MilNm1 As String = "", MilNm2 As String = ""
        Dim ps As Printing.PaperSize
        Dim strHeight As Single = 0
        Dim PpSzSTS As Boolean = False
        Dim W1 As Single = 0
        Dim TotMtr1 As Single = 0, TotMtr2 As Single = 0
        Dim TotWgt1 As Single = 0, TotWgt2 As Single = 0
        Dim IncY As Single = 0
        Dim vprnCloNameAr(100, 10) As String
        Dim vprnCloNmInDx As Integer = 0
        Dim Y1 As Single = 0, Y2 As Single = 0
        Dim vLft_Y_Inc_STS As Boolean = False
        Dim X1 As Single = 0, X2 As Single = 0

        Dim prn_Tot_Pcs_ARclm_1 As Integer = 0
        Dim prn_Tot_Pcs_ARclm_2 As Integer = 0
        Dim prn_Tot_Pcs_ARclm_3 As Integer = 0

        Dim prn_Tot_Mtr_ARclm_1 As String = 0
        Dim prn_Tot_Mtr_ARclm_2 As String = 0
        Dim prn_Tot_Mtr_ARclm_3 As String = 0

        Dim prn_Tot_Wgt_ARclm_1 As String = 0
        Dim prn_Tot_Wgt_ARclm_2 As String = 0
        Dim prn_Tot_Wgt_ARclm_3 As String = 0



        For I = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(I).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(I)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                e.PageSettings.PaperSize = ps
                Exit For
            End If
        Next

        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 15
            .Right = 40
            .Top = 35
            .Bottom = 40
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With
        If PrintDocument1.DefaultPageSettings.Landscape = True Then
            With PrintDocument1.DefaultPageSettings.PaperSize
                PrintWidth = .Height - TMargin - BMargin
                PrintHeight = .Width - RMargin - LMargin
                PageWidth = .Height - TMargin
                PageHeight = .Width - RMargin
            End With
        End If

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        pFont = New Font("Calibri", 10, FontStyle.Regular)

        NoofItems_PerPage = 36 ' 32

        Erase ClArr
        Erase LnAr
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = 40 : ClArr(2) = 90 : ClArr(3) = 60 : ClArr(4) = 65 : ClArr(5) = 40 : ClArr(6) = 90 : ClArr(7) = 60 : ClArr(8) = 65 : ClArr(9) = 40 : ClArr(10) = 90 : ClArr(11) = 60
        ClArr(12) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11))

        If Show_Weight_Column_STS = True Then

            ClArr(2) = ClArr(2) + (ClArr(4) / 2) '30
            ClArr(3) = ClArr(3) + (ClArr(4) / 2) '35
            ClArr(4) = 0

            ClArr(6) = ClArr(6) + (ClArr(8) / 2) '30
            ClArr(7) = ClArr(7) + (ClArr(8) / 2) '35
            ClArr(8) = 0

            ClArr(10) = ClArr(10) + (ClArr(12) / 2) ' 30
            ClArr(11) = ClArr(11) + (ClArr(12) / 2)  '35
            ClArr(12) = 0

        End If


        TxtHgt = 17.75 '18.75 ' 19 ' e.Graphics.MeasureString("A", pFont).Height  '20


        Erase vprnCloNameAr
        vprnCloNameAr = New String(1000, 10) {}

        vprnCloNmInDx = 0

        Try

            If Prn_Hddt.Rows.Count > 0 Then

                If prn_Hdindx <= Prn_Hddt.Rows.Count - 1 Then

                    Printing_Format_PackingList_1608_PageHeader(PrintDocument1, e, Prn_Hddt, prn_DetDt, prn_hdar, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, prn_PageNo, NoofItems_PerPage, CurY, LnAr, ClArr, prn_Hdindx, prn_Count, prn_hddt2, vPrn_Roll_Packing_No, vPrn_Roll_Packing_Date, vPrn_Roll_Packing_Po_No, vPrn_Roll_Packing_Po_Date, vSort_No, vCLONAME, vPrn_Invoice_Dc_No, vPrn_Invoice_Dc_Date, vPrn_ClothSales_Invoice_No, vPrn_ClothSales_Invoice_Date)


                    NoofDets = 0
                    TotMtr1 = 0 : TotMtr2 = 0
                    TotWgt1 = 0 : TotWgt2 = 0

                    If Prn_DetMxIndx1 > 0 Then

                        '  CurY = TMargin + 380

                        Do While prn_DetIndx < Prn_DetMxIndx1

                            If NoofDets >= NoofItems_PerPage Then

                                prn_DetIndx = prn_DetIndx + NoofItems_PerPage + NoofItems_PerPage

                                If prn_DetIndx < Prn_DetMxIndx1 Then
                                    CurY = CurY + TxtHgt

                                    Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + 5, CurY, 0, 0, pFont)

                                    Printing_Format_PackingList_1608_PageFooter(e, prn_hdar, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_Hdindx, False, Prn_Hddt, Prn_PL_Tot_Pcs, Prn_PL_Tot_Mtr, prn_PL_Tot_NetWgt, prn_Tot_Pcs_ARclm_1, prn_Tot_Mtr_ARclm_1, prn_Tot_Wgt_ARclm_1, prn_Tot_Pcs_ARclm_2, prn_Tot_Mtr_ARclm_2, prn_Tot_Wgt_ARclm_2, prn_Tot_Pcs_ARclm_3, prn_Tot_Mtr_ARclm_3, prn_Tot_Wgt_ARclm_3)

                                    e.HasMorePages = True

                                Else
                                    Printing_Format_PackingList_1608_PageFooter(e, prn_hdar, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_Hdindx, True, Prn_Hddt, Prn_PL_Tot_Pcs, Prn_PL_Tot_Mtr, prn_PL_Tot_NetWgt, prn_Tot_Pcs_ARclm_1, prn_Tot_Mtr_ARclm_1, prn_Tot_Wgt_ARclm_1, prn_Tot_Pcs_ARclm_2, prn_Tot_Mtr_ARclm_2, prn_Tot_Wgt_ARclm_2, prn_Tot_Pcs_ARclm_3, prn_Tot_Mtr_ARclm_3, prn_Tot_Wgt_ARclm_3)

                                    e.HasMorePages = False
                                End If

                                Return

                            End If


                            prn_DetIndx = prn_DetIndx + 1

                            CurY = CurY + TxtHgt

                            If Val(prn_BLDetAr(prn_DetIndx, 4)) <> 0 Or Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 4)) <> 0 Or Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage + NoofItems_PerPage, 4)) <> 0 Then

                                If Val(prn_BLDetAr(prn_DetIndx, 4)) <> 0 Then

                                    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_BLDetAr(prn_DetIndx, 0)), LMargin, CurY - IncY, 2, ClArr(1), pFont)

                                    If Trim(prn_BLDetAr(prn_DetIndx, 2)) <> "" Then
                                        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_BLDetAr(prn_DetIndx, 2)), LMargin + ClArr(1) + 5, CurY - IncY, 0, ClArr(2), pFont, Nothing, True)
                                        prn_Tot_Pcs_ARclm_1 = prn_Tot_Pcs_ARclm_1 + 1
                                    End If

                                    If Val(prn_BLDetAr(prn_DetIndx, 4)) <> 0 Then
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_BLDetAr(prn_DetIndx, 4)), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 5, CurY - IncY, 1, 0, pFont)
                                    End If
                                    If ClArr(4) > 0 Then
                                        If Val(prn_BLDetAr(prn_DetIndx, 5)) <> 0 Then
                                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_BLDetAr(prn_DetIndx, 5)), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 5, CurY - IncY, 1, 0, pFont)
                                        End If
                                    End If

                                    prn_Tot_Mtr_ARclm_1 = prn_Tot_Mtr_ARclm_1 + Val(prn_BLDetAr(prn_DetIndx, 4))
                                        prn_Tot_Wgt_ARclm_1 = prn_Tot_Wgt_ARclm_1 + Val(prn_BLDetAr(prn_DetIndx, 5))

                                    End If


                                    ' -----------------  array 2

                                    If Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 4)) <> 0 Then '[Or Trim(UCase(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 5))) = "BALETOTAL" Or Trim(UCase(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 5))) = "CLOTHTOTAL" Then


                                    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 0)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4), CurY - IncY, 2, ClArr(5), pFont)

                                    If Trim(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 2)) <> "" Then
                                        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 2)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + 5, CurY - IncY, 0, ClArr(6), pFont, Nothing, Shrink_To_Fit:=True)
                                        prn_Tot_Pcs_ARclm_2 = prn_Tot_Pcs_ARclm_2 + 1
                                    End If


                                    If Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 4)) <> 0 Then
                                        Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 4)), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) - 5, CurY - IncY, 1, 0, pFont)
                                    End If
                                    If ClArr(8) > 0 Then

                                        If Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 5)) <> 0 Then
                                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 5)), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) - 5, CurY - IncY, 1, 0, pFont)
                                        End If

                                    End If

                                    prn_Tot_Mtr_ARclm_2 = prn_Tot_Mtr_ARclm_2 + Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 4))
                                        prn_Tot_Wgt_ARclm_2 = prn_Tot_Wgt_ARclm_2 + Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 5))


                                        ' --------------- array 3


                                        If Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage + NoofItems_PerPage, 4)) <> 0 Then '[Or Trim(UCase(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 5))) = "BALETOTAL" Or Trim(UCase(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage, 5))) = "CLOTHTOTAL" Then

                                            Common_Procedures.Print_To_PrintDocument(e, Trim(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage + NoofItems_PerPage, 0)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8), CurY - IncY, 2, ClArr(9), pFont)


                                            If Trim(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage + NoofItems_PerPage, 2)) <> "" Then
                                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage + NoofItems_PerPage, 2)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + 5, CurY - IncY, 0, ClArr(10), pFont, Nothing, True)
                                                prn_Tot_Pcs_ARclm_3 = prn_Tot_Pcs_ARclm_3 + 1
                                            End If

                                        If Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage + NoofItems_PerPage, 4)) <> 0 Then
                                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage + NoofItems_PerPage, 4)), "########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 5, CurY - IncY, 1, 0, pFont)
                                        End If

                                        If ClArr(12) > 0 Then

                                            If Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage + NoofItems_PerPage, 5)) <> 0 Then
                                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage + NoofItems_PerPage, 5)), "########0.000"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 5, CurY - IncY, 1, 0, pFont)
                                            End If
                                        End If

                                        prn_Tot_Mtr_ARclm_3 = prn_Tot_Mtr_ARclm_3 + Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage + NoofItems_PerPage, 4))
                                            prn_Tot_Wgt_ARclm_3 = prn_Tot_Wgt_ARclm_3 + Val(prn_BLDetAr(prn_DetIndx + NoofItems_PerPage + NoofItems_PerPage, 5))

                                        End If

                                    End If

                                End If

                            NoofDets = NoofDets + 1

                        Loop

                    End If

                    'CurY = TMargin + 940 ' 900

                    Printing_Format_PackingList_1608_PageFooter(e, prn_hdar, TxtHgt, pFont, LMargin, RMargin, TMargin, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_Hdindx, True, Prn_Hddt, Prn_PL_Tot_Pcs, Prn_PL_Tot_Mtr, prn_PL_Tot_NetWgt, prn_Tot_Pcs_ARclm_1, prn_Tot_Mtr_ARclm_1, prn_Tot_Wgt_ARclm_1, prn_Tot_Pcs_ARclm_2, prn_Tot_Mtr_ARclm_2, prn_Tot_Wgt_ARclm_2, prn_Tot_Pcs_ARclm_3, prn_Tot_Mtr_ARclm_3, prn_Tot_Wgt_ARclm_3)


                End If

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

        prn_Hdindx = prn_Hdindx + 1

        'If prn_HeadIndx <= prn_HdDt.Rows.Count - 1 Then
        '    e.HasMorePages = True
        'Else
        e.HasMorePages = False
        'End If

    End Sub
    Public Shared Sub Printing_Format_PackingList_1608_PageHeader(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByRef prn_DetDt As DataTable, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal prn_HdIndx As Integer, ByRef prn_Count As Integer, ByRef prn_HdDt2 As DataTable, ByRef vPrn_Roll_Packing_No As String, vPrn_Roll_Packing_Date As String, ByRef vPrn_Entry_Po_No As String, ByRef vPrn_Entry_Po_Date As String, ByRef vsort_No As String, ByRef vCLONAME As String, ByRef vPrn_Invoice_Dc_No As String, vPrn_Invoice_Dc_Date As String, vPrn_Clothsales_Invoice_No As String, vPrn_ClothSales_Invoice_Date As String)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim dt3 As New DataTable
        Dim dt4 As New DataTable
        Dim p1Font As Font
        Dim strHeight As Single
        Dim Cmp_Add As String = ""
        Dim C1, C2, C3, C4 As Single, W1, W2 As Single, S1, S2 As Single
        Dim Cmp_Name, Desc As String, Cmp_Add1 As String, Cmp_Add2 As String
        Dim Cmp_PhNo As String, Cmp_TinNo As String, Cmp_CstNo As String, Cmp_EMail As String

        PageNo = PageNo + 1

        CurY = TMargin + 30


        prn_Count = prn_Count + 1

        p1Font = New Font("Calibri", 15, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, "PACKING LIST", LMargin, CurY - TxtHgt - 5, 2, PrintWidth, p1Font)

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY
        Desc = ""
        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
        Cmp_PhNo = "" : Cmp_TinNo = "" : Cmp_CstNo = "" : Cmp_EMail = ""

        Desc = prn_HdDt.Rows(0).Item("Company_Description").ToString
        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
        Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString
        Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = "PHONE : " & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString) <> "" Then
            Cmp_TinNo = "GST NO.: " & prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
            Cmp_CstNo = "CST NO.: " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_EMail").ToString) <> "" Then
            Cmp_EMail = "MAIL ID : " & prn_HdDt.Rows(0).Item("Company_EMail").ToString
        End If

        CurY = CurY + TxtHgt - 5

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "-1249-" Then
            e.Graphics.DrawImage(DirectCast(Global.Textile.My.Resources.Resources.Company_Logo_Vaipav, Drawing.Image), LMargin + 20, CurY, 100, 90)
        End If

        p1Font = New Font("Calibri", 18, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font)
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

        p1Font = New Font("Calibri", 9, FontStyle.Regular)
        CurY = CurY + strHeight - 1
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1 & " " & Cmp_Add2, LMargin, CurY, 2, PrintWidth, p1Font,, True)

        CurY = CurY + TxtHgt - 1
        Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo & "     " & Cmp_TinNo & "     " & Cmp_EMail, LMargin, CurY, 2, PrintWidth, p1Font,, True)


        CurY = CurY + TxtHgt + 10
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(2) = CurY

        C1 = ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + 30
        C3 = ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10)
        C4 = C1 'ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8)


        W1 = e.Graphics.MeasureString("INVOICE DATE  : ", pFont).Width
        S1 = e.Graphics.MeasureString("TO     :    ", pFont).Width
        W2 = e.Graphics.MeasureString("Sort No.    : ", pFont).Width
        S2 = e.Graphics.MeasureString("P.O Date   : ", pFont).Width


        CurY = CurY + 10
        p1Font = New Font("Calibri", 9, FontStyle.Bold)
        'p1Font = New Font("Calibri", 10, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, "TO  :  " & "M/s." & prn_HdDt.Rows(0).Item("Ledger_Name").ToString, LMargin + 10, CurY, 0, 0, p1Font,, True)

        If Trim(vPrn_Invoice_Dc_No) <> "" Then

            Common_Procedures.Print_To_PrintDocument(e, "Dc No ", LMargin + C1, CurY - 5, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C3 - 15, CurY - 5, 0, 0, pFont)

            If Trim(vPrn_Invoice_Dc_No) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, Trim(vPrn_Invoice_Dc_No), LMargin + C3, CurY - 5, 0, 0, pFont)
            End If

        ElseIf Trim(vPrn_Clothsales_Invoice_No) <> "" Then

            Common_Procedures.Print_To_PrintDocument(e, "Invoice No", LMargin + C4, CurY - 5, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C3 - 15, CurY - 5, 0, 0, pFont)

            If Trim(vPrn_Clothsales_Invoice_No) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, Trim(vPrn_Clothsales_Invoice_No), LMargin + C3, CurY - 5, 0, 0, pFont)
            End If

        Else

            Common_Procedures.Print_To_PrintDocument(e, "Packing List No", LMargin + C4 - 5, CurY - 5, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C3 - 15, CurY - 5, 0, 0, pFont)

            If Trim(vPrn_Roll_Packing_No) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, Trim(vPrn_Roll_Packing_No), LMargin + C3, CurY - 5, 0, 0, pFont)
            End If
        End If

        Dim vLEDADD As String = ""

        'vLEDADD = Trim(prn_HdDt.Rows(0).Item("Ledger_Address4").ToString)
        'If Trim(vLEDADD) = "" Then
        '    vLEDADD = prn_HdDt.Rows(0).Item("Ledger_Address3").ToString
        'End If
        'If Trim(vLEDADD) = "" Then
        '    vLEDADD = prn_HdDt.Rows(0).Item("Ledger_Address2").ToString
        'End If
        'If Trim(vLEDADD) = "" Then
        '    vLEDADD = prn_HdDt.Rows(0).Item("Ledger_Address1").ToString
        'End If

        If Trim(prn_HdDt.Rows(0).Item("Ledger_Address3").ToString) <> "" Or Trim(prn_HdDt.Rows(0).Item("Ledger_Address4").ToString) <> "" Then

            vLEDADD = Trim(prn_HdDt.Rows(0).Item("Ledger_Address3").ToString) & " " & Trim(prn_HdDt.Rows(0).Item("Ledger_Address4").ToString)

        End If

        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, " " & Trim(prn_HdDt.Rows(0).Item("Ledger_Address1").ToString) & " " & Trim(prn_HdDt.Rows(0).Item("Ledger_Address2").ToString), LMargin + S1 - 10, CurY, 0, 0, pFont)
        p1Font = New Font("Calibri", 14, FontStyle.Bold)

        If Trim(vPrn_Invoice_Dc_Date) <> "" Then

            Common_Procedures.Print_To_PrintDocument(e, "Dc Date", LMargin + C1, CurY - 5, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C3 - 15, CurY - 5, 0, 0, pFont)

            If Trim(vPrn_Invoice_Dc_Date) <> "" Then
                If IsDate(vPrn_Invoice_Dc_Date) <> False Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(vPrn_Invoice_Dc_Date), "dd-MM-yyyy"), LMargin + C3, CurY - 5, 0, 0, pFont)
                End If
            End If

        ElseIf Trim(vPrn_ClothSales_Invoice_Date) <> "" Then

            Common_Procedures.Print_To_PrintDocument(e, "Invoice Date", LMargin + C4, CurY - 5, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C3 - 15, CurY - 5, 0, 0, pFont)
            If Trim(vPrn_ClothSales_Invoice_Date) <> "" Then
                If IsDate(vPrn_ClothSales_Invoice_Date) <> False Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(vPrn_ClothSales_Invoice_Date), "dd-MM-yyyy"), LMargin + C3, CurY - 5, 0, 0, pFont)
                End If
            End If

        Else
            Common_Procedures.Print_To_PrintDocument(e, "Packing List Date", LMargin + C4 - 5, CurY - 5, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C3 - 15, CurY - 5, 0, 0, pFont)

            If Trim(vPrn_Roll_Packing_Date) <> "" Then
                If IsDate(vPrn_Roll_Packing_Date) <> False Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(vPrn_Roll_Packing_Date), "dd-MM-yyyy"), LMargin + C3, CurY - 5, 0, 0, pFont)
                End If
            End If
        End If


        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, " " & Trim(vLEDADD), LMargin + S1 - 10, CurY, 0, 0, pFont)

        Common_Procedures.Print_To_PrintDocument(e, "P.O No.", LMargin + C4, CurY - 5, 0, 0, pFont)
        Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C3 - 15, CurY - 5, 0, 0, pFont)

        If Trim(vPrn_Entry_Po_No) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, Trim(vPrn_Entry_Po_No), LMargin + C3, CurY - 5, 0, 0, pFont)
        End If

        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, " GSTIN : " & Trim(prn_HdDt.Rows(0).Item("ledger_GSTinNo").ToString), LMargin + S1 - 10, CurY, 0, 0, pFont)

        Common_Procedures.Print_To_PrintDocument(e, "P.O Date ", LMargin + C4, CurY - 5, 0, 0, pFont)
        Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C3 - 15, CurY - 5, 0, 0, pFont)

        If Trim(vPrn_Entry_Po_Date) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, Trim(vPrn_Entry_Po_Date), LMargin + C3, CurY - 5, 0, 0, pFont)
        End If


        CurY = CurY + TxtHgt
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        e.Graphics.DrawLine(Pens.Black, LMargin + C4 - 10, CurY, LMargin + C4 - 10, LnAr(2))
        C2 = e.Graphics.MeasureString("P.O Date ", pFont).Width

        Try

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "Cloth Name  :  " & Trim(prn_DetDt.Rows(0).Item("Cloth_Name").ToString), LMargin + 10, CurY, 0, 0, pFont)
            'Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W2, CurY, 0, 0, pFont)
            'Common_Procedures.Print_To_PrintDocument(e, , LMargin + W2 + 15, CurY, 0, 0, pFont)

            CurY = CurY + TxtHgt + 5
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(2) = CurY
            LnAr(4) = CurY


            CurY = CurY + 5
            Common_Procedures.Print_To_PrintDocument(e, "S.NO", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PCS NO", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "METER", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)

            If ClAr(4) > 0 Then
                Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(4), pFont)
            End If

            Common_Procedures.Print_To_PrintDocument(e, "S.NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(5), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PCS NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "METER", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)

            If ClAr(8) > 0 Then
                Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            End If

            Common_Procedures.Print_To_PrintDocument(e, "S.NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 2, ClAr(9), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PCS NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 2, ClAr(10), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "METER", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(11), pFont)

            If ClAr(12) > 0 Then
                Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)
            End If

            CurY = CurY + TxtHgt + 5
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(3) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub



    Public Shared Sub Printing_Format_PackingList_1608_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal NoofDets As Integer, ByVal prn_HdIndx As Integer, ByVal is_LastPage As Boolean, ByRef prn_HdDt As DataTable, ByRef Prn_PL_Tot_Pcs As Integer, ByRef prn_PL_Tot_Mtr As String, ByRef prn_PL_Tot_NetWgt As String, ByRef prn_Tot_Pcs_ARclm_1 As Integer, ByRef prn_Tot_Mtr_ARclm_1 As String, ByRef prn_Tot_Wgt_ARclm_1 As String, ByRef prn_Tot_Pcs_ARclm_2 As Integer, ByRef prn_Tot_Mtr_ARclm_2 As String, ByRef prn_Tot_Wgt_ARclm_2 As String, ByRef prn_Tot_Pcs_ARclm_3 As Integer, ByRef prn_Tot_Mtr_ARclm_3 As String, ByRef prn_Tot_Wgt_ARclm_3 As String)
        Dim I As Integer
        Dim p1Font As Font

        p1Font = New Font("Calibri", 7, FontStyle.Bold)

        Try

            For I = NoofDets + 1 To NoofItems_PerPage
                CurY = CurY + TxtHgt
            Next




            CurY = CurY + TxtHgt + 5
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(5) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY, LMargin + ClAr(1), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY, LMargin + ClAr(1) + ClAr(2), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + 3, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + 3, LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), LnAr(4))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(4))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + 3, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + 3, LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), LnAr(2))

            If is_LastPage = True Then

                CurY = CurY + 5
                ', Prn_PL_Tot_Pcs, Prn_PL_Tot_Mtr, prn_PL_Tot_NetWgt,
                Common_Procedures.Print_To_PrintDocument(e, " TOTAL PCS  :  ", LMargin + ClAr(1), CurY, 0, ClAr(2), pFont)
                Common_Procedures.Print_To_PrintDocument(e, Val(Prn_PL_Tot_Pcs), LMargin + ClAr(1) + ClAr(2), CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, " TOTAL METER  :  ", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 0, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_PL_Tot_Mtr), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + 10, CurY, 1, 0, pFont)

                If ClAr(4) > 0 Then

                    Common_Procedures.Print_To_PrintDocument(e, " TOTAL WEIGHT  :  ", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 0, 0, pFont)
                    Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_PL_Tot_NetWgt), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + 15, CurY, 1, 0, pFont)
                End If

                CurY = CurY + TxtHgt + 5
                e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
                LnAr(6) = CurY

                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), LnAr(5))
                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + 3, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + 3, LnAr(5))
                If ClAr(4) > 0 Then
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), LnAr(5))
                    e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + 3, CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + 3, LnAr(5))
                End If
                'Common_Procedures.Print_To_PrintDocument(e, " TOTAL ", LMargin + ClAr(1), CurY, 0, ClAr(2), pFont)
                'Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Tot_Mtr_ARclm_1), "########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 1, 0, pFont, , True)
                'Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Tot_Wgt_ARclm_1), "########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 1, 0, pFont)

                'Common_Procedures.Print_To_PrintDocument(e, Val(prn_Tot_Pcs_ARclm_2), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + 15, CurY, 0, 0, pFont, , True)
                'Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Tot_Mtr_ARclm_2), "########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 1, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Tot_Wgt_ARclm_2), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 1, 0, pFont)

                'Common_Procedures.Print_To_PrintDocument(e, Val(prn_Tot_Pcs_ARclm_3), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + 15, CurY, 0, 0, pFont, , True)
                'Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Tot_Mtr_ARclm_3), "########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 1, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_Tot_Wgt_ARclm_3), "########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY, 1, 0, pFont)

            End If




            ' e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY, LMargin + ClAr(1), LnAr(2))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY, LMargin + ClAr(1) + ClAr(2), LnAr(2))
            ''   e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3), LnAr(2))
            ''e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), LnAr(2))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), LnAr(4))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(4))
            ''e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), LnAr(2))
            '' e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), LnAr(2))
            'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), LnAr(2))
            ''e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), LnAr(2))
            ''e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), LnAr(2))
            ''



            CurY = CurY + TxtHgt - 10

            p1Font = New Font("Calibri", 12, FontStyle.Bold)

            Common_Procedures.Print_To_PrintDocument(e, "For " & Trim(prn_HdDt.Rows(0).Item("Company_Name").ToString), PageWidth - 15, CurY, 1, 0, p1Font)
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt

            p1Font = New Font("Calibri", 12, FontStyle.Bold)

            Common_Procedures.Print_To_PrintDocument(e, "Prepared By", LMargin + 5, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, "AUTHORISED SIGNATORY", PageWidth - 5, CurY, 1, 0, pFont)
            CurY = CurY + TxtHgt + 10

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            e.Graphics.DrawLine(Pens.Black, LMargin, LnAr(1), LMargin, CurY)
            e.Graphics.DrawLine(Pens.Black, PageWidth, LnAr(1), PageWidth, CurY)

        Catch ex As Exception
            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try

    End Sub


    Public Shared Sub Printing_PackingSlip_Format1007(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByVal Con As SqlClient.SqlConnection, ByRef prn_HdDt As DataTable, ByVal prn_HdMxIndx As Integer, ByVal prn_DetMxIndx As Integer, ByRef prn_HdAr(,) As String, ByRef prn_DetAr(,,) As String, ByRef prn_PageNo As Integer, ByRef prn_Count As Integer, ByRef prn_HdIndx As Integer, ByRef prn_DetIndx As Integer, ByRef vPrn_Roll_Packing_No As String, ByRef vPrn_Roll_Packing_Date As String, ByRef vPrn_Roll_Packing_Po_No As String, ByRef vPrn_Roll_Packing_Po_Date As String, ByRef vSort_No As String, ByRef vCLONAME As String, ByRef vPrn_Invoice_Dc_No As String, vPrn_Invoice_Dc_Date As String, ByRef vPrn_ClothSales_Invoice_No As String, ByRef vPrn_ClothSales_Invoice_Date As String, ByRef vPRN_ClothSales_DCNo As String, ByRef vPRN_ClothSales_DCDate As String)
        Dim NoofDets As Integer, NoofItems_PerPage As Integer
        Dim pFont As Font, P1fONT As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim ps As Printing.PaperSize
        Dim strHeight As Single = 0
        Dim PpSzSTS As Boolean = False
        Dim LM As Single = 0, TM As Single = 0
        Dim PgWt As Single = 0, PrWt As Single = 0
        Dim PgHt As Single = 0, PrHt As Single = 0
        Dim sno As Integer = 0

        For I = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(I).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(I)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                e.PageSettings.PaperSize = ps
                Exit For
            End If
        Next

        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 20
            .Right = 40
            .Top = 30
            .Bottom = 40
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With
        'With PrintDocument1.DefaultPageSettings.PaperSize
        '    PrintWidth = (.Width / 2) - RMargin - LMargin
        '    PrintHeight = (.Height / 2) - TMargin - BMargin
        '    PageWidth = (.Width / 2) - RMargin
        '    PageHeight = (.Height / 2) - BMargin
        'End With
        If PrintDocument1.DefaultPageSettings.Landscape = True Then
            With PrintDocument1.DefaultPageSettings.PaperSize
                PrintWidth = .Height - TMargin - BMargin
                PrintHeight = .Width - RMargin - LMargin
                PageWidth = .Height - TMargin
                PageHeight = .Width - RMargin
            End With
        End If

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        pFont = New Font("Calibri", 10, FontStyle.Regular)

        NoofItems_PerPage = 28 ' 29 ' 17 ' 20 

        Erase ClArr
        Erase LnAr
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = 50 : ClArr(2) = 70 : ClArr(3) = 60 : ClArr(4) = 60 : ClArr(5) = 55 : ClArr(6) = 50 : ClArr(7) = 45 : ClArr(8) = 55 : ClArr(9) = 65 : ClArr(10) = 65 : ClArr(11) = 60 : ClArr(12) = 65
        ClArr(13) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12))
        'ClArr(1) = 50 : ClArr(2) = 70 : ClArr(3) = 60 : ClArr(4) = 60 : ClArr(5) = 65 : ClArr(6) = 65 : ClArr(7) = 60 : ClArr(8) = 60 : ClArr(9) = 70 : ClArr(10) = 60 : ClArr(11) = 70
        'ClArr(12) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11))

        'ClArr(1) = 100 : ClArr(2) = 80 : ClArr(3) = 80 : ClArr(4) = 80 : ClArr(5) = 80 : ClArr(6) = 80 : ClArr(7) = 80 : ClArr(8) = 80
        'ClArr(9) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8))

        TxtHgt = 19 ' e.Graphics.MeasureString("A", pFont).Height  ' 20

        Try

            If prn_HdDt.Rows.Count > 0 Then

                If prn_HdMxIndx > 0 Then

                    Erase LnAr
                    LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

                    Printing_PackingSlip_Format1007_PageHeader(PrintDocument1, e, prn_HdDt, prn_HdAr, TxtHgt, pFont, LMargin, RMargin, TM, BMargin, PageWidth, PrintWidth, prn_PageNo, NoofItems_PerPage, CurY, LnAr, ClArr, prn_HdIndx, prn_Count, prn_HdMxIndx, vCLONAME, vPrn_Invoice_Dc_No, vPrn_Invoice_Dc_Date, vPrn_ClothSales_Invoice_No, vPrn_ClothSales_Invoice_Date, vPRN_ClothSales_DCNo, vPRN_ClothSales_DCDate)
                    CurY = CurY - 10

                    NoofDets = 0
                    Do While prn_HdIndx < prn_HdMxIndx

                        If NoofDets >= NoofItems_PerPage Then

                            CurY = CurY + TxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 10, CurY, 1, 0, pFont)
                            NoofDets = NoofDets + 1

                            Printing_PackingSlip_Format1007_PageFooter(e, prn_HdAr, TxtHgt, pFont, LMargin, RMargin, TM, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_HdIndx, False, prn_HdDt)

                            'prn_DetIndx = prn_DetIndx + NoofItems_PerPage

                            e.HasMorePages = True

                            NoofDets = 0
                            prn_Count = prn_Count + 1

                            Return

                        End If

                        prn_HdIndx = prn_HdIndx + 1
                        sno = sno + 1

                        CurY = CurY + TxtHgt

                        P1fONT = New Font("Calibri", 8, FontStyle.Regular)

                        Common_Procedures.Print_To_PrintDocument(e, Val(sno), LMargin + 15, CurY, 0, 0, P1fONT)

                        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdAr(prn_HdIndx, 1)), LMargin + ClArr(1) + 5, CurY, 0, 0, P1fONT)

                        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(1, prn_HdIndx, 4)), LMargin + ClArr(1) + ClArr(2) + 5, CurY, 0, 0, P1fONT)

                        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(1, prn_HdIndx, 5)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + 5, CurY, 0, 0, P1fONT)

                        Dim lm_no As String = ""
                        lm_no = Common_Procedures.Loom_IdNoToName(Con, Val(prn_DetAr(1, prn_HdIndx, 6)))
                        If lm_no = "" Then
                            lm_no = Trim(prn_DetAr(1, prn_HdIndx, 11))
                        End If

                        Common_Procedures.Print_To_PrintDocument(e, Trim(lm_no), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + 5, CurY, 0, 0, P1fONT)

                        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(1, prn_HdIndx, 1)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + 5, CurY, 0, 0, P1fONT)

                        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(1, prn_HdIndx, 2)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + 5, CurY, 0, 0, P1fONT)

                        Common_Procedures.Print_To_PrintDocument(e, "1", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) - 5, CurY, 1, 0, P1fONT)

                        Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(1, prn_HdIndx, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 5, CurY, 1, 0, P1fONT)

                        If Val(prn_DetAr(1, prn_HdIndx, 10)) <> 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(1, prn_HdIndx, 10)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 5, CurY, 1, 0, P1fONT)
                        End If
                        If Val(prn_DetAr(1, prn_HdIndx, 7)) <> 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(1, prn_HdIndx, 7)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 10, CurY, 1, 0, P1fONT)
                        End If
                        If Val(prn_DetAr(1, prn_HdIndx, 8)) <> 0 Then
                            Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(1, prn_HdIndx, 8)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) - 10, CurY, 1, 0, P1fONT)
                        End If
                        If Trim(prn_DetAr(1, prn_HdIndx, 9)) <> "" Then
                            Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(1, prn_HdIndx, 9)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) + ClArr(12) + 10, CurY, 0, 0, P1fONT)
                        End If






                        NoofDets = NoofDets + 1


                    Loop

                    Printing_PackingSlip_Format1007_PageFooter(e, prn_HdAr, TxtHgt, pFont, LMargin, RMargin, TM, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_HdIndx, True, prn_HdDt)

                End If

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

        e.HasMorePages = False

    End Sub
   Public Shared Sub Printing_PackingSlip_Format5_1608(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByVal prn_HdMxIndx As Integer, ByVal prn_DetMxIndx As Integer, ByRef prn_HdAr(,) As String, ByRef prn_DetAr(,,) As String, ByRef prn_PageNo As Integer, ByRef prn_Count As Integer, ByRef prn_HdIndx As Integer, ByRef prn_DetIndx As Integer)
        Dim I As Integer, NoofDets As Integer, NoofItems_PerPage As Integer
        Dim pFont As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim ps As Printing.PaperSize
        Dim strHeight As Single = 0
        Dim PpSzSTS As Boolean = False
        Dim LM As Single = 0, TM As Single = 0
        Dim PgWt As Single = 0, PrWt As Single = 0
        Dim PgHt As Single = 0, PrHt As Single = 0

        For I = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(I).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(I)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                PrintDocument1.DefaultPageSettings.Landscape = False
                e.PageSettings.PaperSize = ps
                Exit For
            End If
        Next

        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 20 ' 40
            .Right = 40
            .Top = 20 ' 30  '60
            .Bottom = 40
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = (.Width / 2) - RMargin - LMargin
            PrintHeight = (.Height / 2) - TMargin - BMargin
            PageWidth = (.Width / 2) - RMargin
            PageHeight = (.Height / 2) - BMargin
        End With

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        pFont = New Font("Calibri", 10, FontStyle.Regular)

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1267" Then '---- BRT SIZING (SOMANUR)
            NoofItems_PerPage = 12 '10
        Else
            NoofItems_PerPage = 13 ' 17 ' 20 
        End If

        Erase ClArr
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = 110 : ClArr(2) = 110 : ClArr(3) = 120

        TxtHgt = 18.75 ' 19 ' e.Graphics.MeasureString("A", pFont).Height  ' 20

        Try

            If prn_HdDt.Rows.Count > 0 Then

                If prn_HdMxIndx > 0 Then

                    Do While prn_HdIndx <= prn_HdMxIndx

                        If prn_Count Mod 4 = 1 Then
                            LM = LMargin
                            TM = TMargin
                            PgWt = PageWidth
                            PgHt = PageHeight
                            PrWt = PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 4 = 2 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + LMargin
                            TM = TMargin
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 4 = 3 Then
                            LM = LMargin
                            TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 2) + TMargin
                            PgWt = PageWidth
                            PgHt = PageHeight
                            PrWt = PrintWidth
                            PrHt = PrintHeight

                        ElseIf prn_Count Mod 4 = 0 Then
                            LM = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + LMargin
                            TM = (PrintDocument1.DefaultPageSettings.PaperSize.Height / 2) + TMargin
                            PgWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PageWidth
                            PgHt = PageHeight
                            PrWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) + PrintWidth
                            PrHt = PrintHeight

                        End If

                        Erase LnAr
                        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

                        Printing_PackingSlip_Format5_1608_PageHeader(PrintDocument1, e, prn_HdDt, prn_HdAr, TxtHgt, pFont, LM, RMargin, TM, BMargin, PgWt, PrWt, prn_PageNo, NoofItems_PerPage, CurY, LnAr, ClArr, prn_HdIndx)
                        CurY = CurY - 10

                        NoofDets = 0
                        Do While prn_DetIndx < Val(prn_HdAr(prn_HdIndx, 3))

                            If NoofDets >= NoofItems_PerPage Then

                                CurY = CurY + TxtHgt
                                Common_Procedures.Print_To_PrintDocument(e, "Continued....", LM + ClArr(1) + ClArr(2) + ClArr(3) - 10, CurY, 1, 0, pFont)
                                NoofDets = NoofDets + 1

                                Printing_PackingSlip_Format5_1608_PageFooter(PrintDocument1, e, prn_HdAr, TxtHgt, pFont, LM, RMargin, TM, BMargin, PgWt, PrWt, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_HdIndx, False)

                                'prn_DetIndx = prn_DetIndx + NoofItems_PerPage

                                e.HasMorePages = True

                                prn_Count = prn_Count + 1

                                Return

                            End If

                            prn_DetIndx = prn_DetIndx + 1

                            If Val(prn_DetAr(prn_HdIndx, prn_DetIndx, 3)) <> 0 Then

                                CurY = CurY + TxtHgt

                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, prn_DetIndx, 2)), LM + 15, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr(prn_HdIndx, prn_DetIndx, 3)), "#########0.00"), LM + ClArr(1) + 15, CurY, 0, 0, pFont)
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_DetAr(prn_HdIndx, prn_DetIndx, 4)), "#########0.000"), LM + ClArr(1) + ClArr(2) + ClArr(3) - 15, CurY, 1, 0, pFont)

                                NoofDets = NoofDets + 1

                            End If

                        Loop

                        Printing_PackingSlip_Format5_1608_PageFooter(PrintDocument1, e, prn_HdAr, TxtHgt, pFont, LM, RMargin, TM, BMargin, PgWt, PrWt, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_HdIndx, True)

                        prn_HdIndx = prn_HdIndx + 1
                        prn_Count = prn_Count + 1
                        prn_DetIndx = 0

                        If prn_HdIndx <= prn_HdMxIndx Then

                            If (prn_Count - 1) Mod 4 = 0 Then

                                e.HasMorePages = True
                                Return

                            End If

                        End If

                    Loop

                End If

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

        e.HasMorePages = False

    End Sub

    Public Shared Sub Printing_PackingSlip_Format5_1608_PageHeader(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal prn_HdIndx As Integer)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim dt3 As New DataTable
        Dim dt4 As New DataTable
        Dim p1Font As Font
        Dim strHeight As Single
        Dim W1 As Single
        Dim PrntWt As Single = 0
        Dim Cmp_Name As String = ""
        Dim Cmp_Add As String = ""

        PageNo = PageNo + 1

        CurY = TMargin

        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString

        Cmp_Add = ""
        If Trim(prn_HdDt.Rows(0).Item("Company_Address4").ToString) <> "" Then
            Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address4").ToString)
        ElseIf Trim(prn_HdDt.Rows(0).Item("Company_Address3").ToString) <> "" Then
            Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address3").ToString)
        ElseIf Trim(prn_HdDt.Rows(0).Item("Company_Address2").ToString) <> "" Then
            Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address2").ToString)
        ElseIf Trim(prn_HdDt.Rows(0).Item("Company_Address1").ToString) <> "" Then
            Cmp_Add = Trim(prn_HdDt.Rows(0).Item("Company_Address1").ToString)
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_logo_Image").ToString) <> "" Then

            If IsDBNull(prn_HdDt.Rows(0).Item("Company_logo_Image")) = False Then

                Dim imageData As Byte() = DirectCast(prn_HdDt.Rows(0).Item("Company_logo_Image"), Byte())
                If Not imageData Is Nothing Then
                    Using ms As New MemoryStream(imageData, 0, imageData.Length)
                        ms.Write(imageData, 0, imageData.Length)

                        If imageData.Length > 0 Then

                            '.BackgroundImage = Image.FromStream(ms)

                            ' e.Graphics.DrawImage(DirectCast(pic_IRN_QRCode_Image_forPrinting.BackgroundImage, Drawing.Image), PageWidth - 108, CurY + 10, 90, 90)
                            e.Graphics.DrawImage(DirectCast(Image.FromStream(ms), Drawing.Image), LMargin, CurY, 70, 70)

                        End If

                    End Using

                End If

            End If

        End If
        PrntWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) - PrintDocument1.DefaultPageSettings.Margins.Right - PrintDocument1.DefaultPageSettings.Margins.Left

        If Trim(Common_Procedures.settings.CustomerCode) <> "1234" Then

            CurY = TMargin
            p1Font = New Font("Calibri", 16, FontStyle.Bold)
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrntWt, p1Font)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            CurY = CurY + strHeight - 5
            Common_Procedures.Print_To_PrintDocument(e, Cmp_Add, LMargin, CurY, 2, PrntWt, pFont)
            strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

            CurY = CurY + TxtHgt + 5
        End If

        p1Font = New Font("Calibri", 13, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, "PACKING SLIP", LMargin, CurY, 2, PrntWt, p1Font)
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

        Try

            W1 = e.Graphics.MeasureString("BUNDLE NO   :  ", pFont).Width

            CurY = CurY + strHeight + 5
            If Trim(UCase(prn_HdAr(prn_HdIndx, 11))) = "BUNDLE" Then
                Common_Procedures.Print_To_PrintDocument(e, "BUNDLE NO", LMargin, CurY, 0, 0, pFont)
            ElseIf Trim(UCase(prn_HdAr(prn_HdIndx, 11))) = "ROLL" Then
                Common_Procedures.Print_To_PrintDocument(e, "ROLL NO", LMargin, CurY, 0, 0, pFont)
            Else
                Common_Procedures.Print_To_PrintDocument(e, "BALE NO", LMargin, CurY, 0, 0, pFont)
            End If
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1, CurY, 0, 0, pFont)
            p1Font = New Font("Calibri", 13, FontStyle.Bold)
            Common_Procedures.Print_To_PrintDocument(e, prn_HdAr(prn_HdIndx, 1), LMargin + W1 + 25, CurY, 0, 0, p1Font)

            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, "QUALITY", LMargin, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, prn_HdAr(prn_HdIndx, 2), LMargin + W1 + 25, CurY, 0, 0, pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(1) = CurY

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "PCS NO", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "METERS", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(2) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Shared Sub Printing_PackingSlip_Format5_1608_PageFooter(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal NoofDets As Integer, ByVal prn_HdIndx As Integer, ByVal is_LastPage As Boolean)
        Dim I As Integer

        Try

            For I = NoofDets + 1 To NoofItems_PerPage
                CurY = CurY + TxtHgt
            Next

            CurY = CurY + TxtHgt
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(3) = CurY

            CurY = CurY + TxtHgt - 10

            Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdAr(prn_HdIndx, 3))), LMargin + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdAr(prn_HdIndx, 4)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) - 15, CurY, 1, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdAr(prn_HdIndx, 10)), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) - 15, CurY, 1, 0, pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(4) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(1))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY, LMargin + ClAr(1), LnAr(1))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY, LMargin + ClAr(1) + ClAr(2), LnAr(1))
            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(1))

            If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1267" Then '---- BRT SIZING (SOMANUR)
                Dim vYrCode As String = ""
                Dim vBarCode As String = ""
                Dim BarFont As Font
                Dim CurX As Single
                Dim PrntWt As Single
                Dim strWidth As Single
                Dim strHEIGHT As Single

                vYrCode = Microsoft.VisualBasic.Right(prn_HdAr(prn_HdIndx, 6), 5)
                vBarCode = Microsoft.VisualBasic.Left(vYrCode, 2) & Trim(Val(prn_HdAr(prn_HdIndx, 7))) & Trim(UCase(prn_HdAr(prn_HdIndx, 1)))
                vBarCode = "*" & Trim(UCase(vBarCode)) & "*"

                BarFont = New Font("Free 3 of 9", 36, FontStyle.Regular)
                'BarFont = New Font("Free 3 of 9", 24, FontStyle.Regular)
                'BarFont = New Font("Free 3 of 9", 18, FontStyle.Regular)

                PrntWt = (PrintDocument1.DefaultPageSettings.PaperSize.Width / 2) - PrintDocument1.DefaultPageSettings.Margins.Right - PrintDocument1.DefaultPageSettings.Margins.Left

                strWidth = e.Graphics.MeasureString(Trim(vBarCode), BarFont).Width
                strHEIGHT = e.Graphics.MeasureString(Trim(vBarCode), BarFont).Height

                If PrntWt > strWidth Then
                    CurX = LMargin + (PrntWt - strWidth) / 2
                Else
                    CurX = LMargin
                End If

                CurY = CurY + TxtHgt - 5
                e.Graphics.DrawString(Trim(vBarCode), BarFont, Brushes.Black, CurX, CurY)

                pFont = New Font("Calibri", 9, FontStyle.Bold)
                CurY = CurY + strHEIGHT + 2 ' 5
                CurX = LMargin
                Common_Procedures.Print_To_PrintDocument(e, Trim(vBarCode), CurX, CurY, 2, PrntWt, pFont, , True)

                'Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrntWt, p1Font)

            End If


        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Shared Sub get_ProcessedFabric_inspection_Details(ByVal Cn1 As SqlClient.SqlConnection, ByVal vREC_CODE As String, ByVal vREC_DETSLNO As Long, ByRef vINS_PCS As String, ByRef vINS_MTR As String, ByRef vINS_WGT As String, Optional ByVal sqltr As SqlClient.SqlTransaction = Nothing)
        Dim Da As New SqlClient.SqlDataAdapter
        Dim Dt As New DataTable

        Da = New SqlClient.SqlDataAdapter("select SUM(Pcs), sum(Meters), sum(Weight) from Processed_Fabric_inspection_Receipt_Details where Cloth_Processing_Receipt_Code = '" & Trim(vREC_CODE) & "' and  Cloth_Processing_Receipt_Slno = " & Str(Val(vREC_DETSLNO)), Cn1)
        If IsNothing(sqltr) = False Then
            Da.SelectCommand.Transaction = sqltr
        End If
        Dt = New DataTable
        Da.Fill(Dt)

        vINS_PCS = 0
        vINS_MTR = 0
        vINS_WGT = 0
        If Dt.Rows.Count > 0 Then
            If IsDBNull(Dt.Rows(0)(0).ToString) = False Then
                vINS_PCS = Trim(Dt.Rows(0)(0).ToString)
            End If
            If IsDBNull(Dt.Rows(0)(1).ToString) = False Then
                vINS_MTR = Format(Val(Dt.Rows(0)(1).ToString), "##########0.00")
            End If
            If IsDBNull(Dt.Rows(0)(2).ToString) = False Then
                vINS_WGT = Format(Val(Dt.Rows(0)(2).ToString), "##########0.000")
            End If
        End If
        Dt.Dispose()
        Da.Dispose()

    End Sub

    Public Shared Sub Printing_PackingSlip_Format1007_PageHeader(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal prn_HdIndx As Integer, ByRef prn_Count As Integer, ByVal prn_HdMxIndx As Integer, ByRef vCLONAME As String, ByRef vPrn_Invoice_Dc_No As String, vPrn_Invoice_Dc_Date As String, vPrn_Clothsales_Invoice_No As String, vPrn_ClothSales_Invoice_Date As String, vPRN_ClothSales_DCNo As String, vPRN_ClothSales_DCDate As String)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim dt3 As New DataTable
        Dim dt4 As New DataTable
        Dim p1Font As Font
        Dim strHeight As Single
        Dim Cmp_Add As String = ""
        Dim C1 As Single, W1, W2 As Single, S1, S2 As Single
        Dim Cmp_Name, Desc As String, Cmp_Add1 As String, Cmp_Add2 As String
        Dim Cmp_PhNo As String, Cmp_TinNo As String, Cmp_CstNo As String, Cmp_EMail As String

        PageNo = PageNo + 1

        CurY = TMargin + 30

        'da2 = New SqlClient.SqlDataAdapter("select a.*, b.Ledger_Name, c.Ledger_Name, d.Company_Description as Transport_Name from ClothSales_Invoice_Head a  INNER JOIN Ledger_Head b ON b.Ledger_IdNo = a.Ledger_Idno LEFT OUTER JOIN Ledger_Head c ON c.Ledger_IdNo = a.Transport_IdNo LEFT OUTER JOIN Company_Head d ON d.Company_IdNo = a.Company_IdNo where a.Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and a.ClothSales_Invoice_Code = '" & Trim(EntryCode) & "' Order by a.For_OrderBy", con)
        'da2.Fill(dt2)
        'If dt2.Rows.Count > NoofItems_PerPage Then
        '    Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(PageNo)), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
        'End If
        'dt2.Clear()

        prn_Count = prn_Count + 1

        p1Font = New Font("Calibri", 15, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, "PACKING SLIP", LMargin, CurY - TxtHgt - 5, 2, PrintWidth, p1Font)

        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY
        Desc = ""
        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
        Cmp_PhNo = "" : Cmp_TinNo = "" : Cmp_CstNo = "" : Cmp_EMail = ""

        Desc = prn_HdDt.Rows(0).Item("Company_Description").ToString
        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
        Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString
        Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = "PHONE : " & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_TinNo").ToString) <> "" Then
            Cmp_TinNo = "TIN NO.: " & prn_HdDt.Rows(0).Item("Company_TinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
            Cmp_CstNo = "CST NO.: " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_EMail").ToString) <> "" Then
            Cmp_EMail = "MAIL ID : " & prn_HdDt.Rows(0).Item("Company_EMail").ToString
        End If

        p1Font = New Font("Calibri", 15, FontStyle.Bold)
        'If Trim(UCase(Common_Procedures.settings.CustomerCode)) <> "1018" Then '---- M.K Textiles (Palladam)
        '    p1Font = New Font("Calibri", 15, FontStyle.Bold)
        '    Common_Procedures.Print_To_PrintDocument(e, "PACKING SLIP", LMargin, CurY, 2, PrintWidth, p1Font)
        'End If
        CurY = CurY + TxtHgt
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height


        'If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1018" Then '---- M.K Textiles (Palladam)
        '    e.Graphics.DrawImage(DirectCast(Global.Textile.My.Resources.Resources.Company_Logo_MK, Drawing.Image), LMargin + 20, CurY, 112, 80)
        '    'e.Graphics.DrawImage(DirectCast(Global.Textile.My.Resources.Resources.Company_Logo_MK_2, Drawing.Image), LMargin + 20, CurY, 115, 80)
        '    'e.Graphics.DrawImage(DirectCast(Global.Textile.My.Resources.Resources.Company_Logo_MK, Drawing.Image), LMargin + 20, CurY, 75, 75)
        'End If

        p1Font = New Font("Calibri", 18, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font)
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height


        CurY = CurY + strHeight - 1
        Common_Procedures.Print_To_PrintDocument(e, Desc, LMargin, CurY, 2, PrintWidth, pFont)

        CurY = CurY + TxtHgt - 1
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1, LMargin, CurY, 2, PrintWidth, pFont)

        CurY = CurY + TxtHgt - 1
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont)
        CurY = CurY + TxtHgt - 1
        Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, pFont)
        CurY = CurY + TxtHgt - 1
        Common_Procedures.Print_To_PrintDocument(e, Cmp_TinNo, LMargin + 10, CurY, 0, 0, pFont)
        Common_Procedures.Print_To_PrintDocument(e, Cmp_EMail, LMargin, CurY, 2, PrintWidth, pFont)
        Common_Procedures.Print_To_PrintDocument(e, Cmp_CstNo, PageWidth - 10, CurY, 1, 0, pFont)

        CurY = CurY + TxtHgt + 10
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(2) = CurY

        C1 = ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8)
        W1 = e.Graphics.MeasureString("INVOICE DATE  : ", pFont).Width
        S1 = e.Graphics.MeasureString("TO     :    ", pFont).Width
        W2 = e.Graphics.MeasureString("Despatch To   : ", pFont).Width
        S2 = e.Graphics.MeasureString("Sent Through  : ", pFont).Width


        CurY = CurY + 10
        p1Font = New Font("Calibri", 12, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, "TO  :  " & "M/s." & prn_HdDt.Rows(0).Item("Ledger_Name").ToString, LMargin + 10, CurY, 0, 0, p1Font)
        'Common_Procedures.Print_To_PrintDocument(e, "INVOICE NO", LMargin + C1 + 10, CurY, 0, 0, pFont)
        'Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
        'Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("ClothSales_Invoice_No").ToString, LMargin + C1 + W1 + 30, CurY, 0, 0, p1Font)

        If Trim(vPrn_Invoice_Dc_No) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, "Dc No ", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)

            If Trim(vPrn_Invoice_Dc_No) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, Trim(vPrn_Invoice_Dc_No), LMargin + C1 + W1 + 30, CurY, 0, 0, p1Font)
            End If

        ElseIf Trim(vPrn_Clothsales_Invoice_No) <> "" Then

            Common_Procedures.Print_To_PrintDocument(e, "Invoice No", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)

            If Trim(vPrn_Clothsales_Invoice_No) <> "" Then
                Common_Procedures.Print_To_PrintDocument(e, Trim(vPrn_Clothsales_Invoice_No), LMargin + C1 + W1 + 30, CurY, 0, 0, p1Font)
            End If

        Else
            Common_Procedures.Print_To_PrintDocument(e, "Packing List No", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)

            'If Trim(vPrn_Roll_Packing_No) <> "" Then
            '    Common_Procedures.Print_To_PrintDocument(e, Trim(vPrn_Roll_Packing_No), LMargin + C1 + W1 + 30, CurY, 0, 0, p1Font)
            'End If
        End If



        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, " " & prn_HdDt.Rows(0).Item("Ledger_Address1").ToString, LMargin + S1 + 10, CurY, 0, 0, pFont)
        p1Font = New Font("Calibri", 14, FontStyle.Bold)
        'Common_Procedures.Print_To_PrintDocument(e, "INVOICE DATE", LMargin + C1 + 10, CurY, 0, 0, pFont)
        'Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
        'Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("ClothSales_Invoice_Date").ToString), "dd-MM-yyyy").ToString, LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)

        If Trim(vPrn_Invoice_Dc_Date) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, "Dc Date", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)

            If Trim(vPrn_Invoice_Dc_Date) <> "" Then
                If IsDate(vPrn_Invoice_Dc_Date) <> False Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(vPrn_Invoice_Dc_Date), "dd-MM-yyyy"), LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)
                End If
            End If

        ElseIf Trim(vPrn_ClothSales_Invoice_Date) <> "" Then

            Common_Procedures.Print_To_PrintDocument(e, "Invoice Date", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + ClAr(1) + ClAr(4) + 20, CurY, 0, 0, pFont)

            If Trim(vPrn_ClothSales_Invoice_Date) <> "" Then
                If IsDate(vPrn_ClothSales_Invoice_Date) <> False Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(vPrn_ClothSales_Invoice_Date), "dd-MM-yyyy"), LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)
                End If
            End If


        Else
            Common_Procedures.Print_To_PrintDocument(e, "Packing List Date", LMargin + C1 + ClAr(1) + ClAr(4) + 15, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + ClAr(1) + ClAr(4) + 20, CurY, 0, 0, pFont)

            'If Trim(vPrn_Roll_Packing_Date) <> "" Then
            '    If IsDate(vPrn_Roll_Packing_Date) <> False Then
            '        Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(vPrn_Roll_Packing_Date), "dd-MM-yyyy"), LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)
            '    End If
            'End If
        End If






        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, " " & prn_HdDt.Rows(0).Item("Ledger_Address2").ToString, LMargin + S1 + 10, CurY, 0, 0, pFont)
        Common_Procedures.Print_To_PrintDocument(e, "ORDER NO", LMargin + C1 + 10, CurY, 0, 0, pFont)
        Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Party_OrderNo").ToString, LMargin + C1 + W1 + 30, CurY, 0, 0, p1Font)

        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, " " & prn_HdDt.Rows(0).Item("Ledger_Address3").ToString, LMargin + S1 + 10, CurY, 0, 0, pFont)


        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, " " & prn_HdDt.Rows(0).Item("Ledger_Address4").ToString, LMargin + S1 + 10, CurY, 0, 0, pFont)

        If Trim(vPRN_ClothSales_DCNo) <> "" Then
            'Common_Procedures.Print_To_PrintDocument(e, "DC NO", LMargin + C1 + 10, CurY, 0, 0, pFont)
            'Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
            'Common_Procedures.Print_To_PrintDocument(e, ClothSales_DcNo, LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)

            Common_Procedures.Print_To_PrintDocument(e, "DC NO : " & prn_HdDt.Rows(0).Item("Dc_No").ToString, LMargin + C1 + 10, CurY, 0, 0, pFont)


        End If



        'If Trim(prn_HdDt.Rows(0).Item("Dc_No").ToString) <> "" Then
        '    Common_Procedures.Print_To_PrintDocument(e, "DC NO : " & prn_HdDt.Rows(0).Item("Dc_No").ToString, LMargin + C1 + 10, CurY, 0, 0, pFont)
        'End If


        If Trim(vPRN_ClothSales_DCDate) <> "" Then
            'Common_Procedures.Print_To_PrintDocument(e, "DC DATE", LMargin + C1 + 10, CurY, 0, 0, pFont)
            'Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
            'Common_Procedures.Print_To_PrintDocument(e, ClothSales_DcDate, LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)

            Common_Procedures.Print_To_PrintDocument(e, "DC DATE : " & prn_HdDt.Rows(0).Item("Dc_Date").ToString, LMargin + C1 + 100, CurY, 0, 0, pFont)

        End If


        CurY = CurY + TxtHgt
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        e.Graphics.DrawLine(Pens.Black, LMargin + C1, CurY, LMargin + C1, LnAr(2))

        Try

            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, "QUALITY", LMargin + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, prn_HdAr(prn_HdMxIndx, 2), LMargin + W1 + 25, CurY, 0, 0, pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(2) = CurY

            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, "SL.NO", LMargin, CurY, 2, ClAr(1), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "BALE NO", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PARTY", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PCS No", LMargin + ClAr(1) + ClAr(2), CurY + TxtHgt, 2, ClAr(3), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "BUYER", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(4), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "REF NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY + TxtHgt, 2, ClAr(4), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "LOOM", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(5), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY + TxtHgt, 2, ClAr(5), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "LOT", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY + TxtHgt, 2, ClAr(6), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "PCS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "NO", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY + TxtHgt, 2, ClAr(7), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "PCS ", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "METERS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 2, ClAr(9), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, 2, ClAr(10), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "POINTS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, 2, ClAr(11), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "POINTS/", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, 2, ClAr(12), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PASS.MTR", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY + TxtHgt, 2, ClAr(12), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "GRADE", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY, 2, ClAr(13), pFont)

            CurY = CurY + TxtHgt + 25
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(3) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Shared Sub Printing_PackingSlip_Format1007_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal NoofDets As Integer, ByVal prn_HdIndx As Integer, ByVal is_LastPage As Boolean, ByRef prn_HdDt As DataTable)
        Dim I As Integer
        Dim p1Font As Font


        Try

            For I = NoofDets + 1 To NoofItems_PerPage
                CurY = CurY + TxtHgt
            Next

            CurY = CurY + TxtHgt
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(4) = CurY


            CurY = CurY + TxtHgt - 10
            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdAr(prn_HdIndx, 8))), LMargin + ClAr(1) + 10, CurY, 0, 0, pFont)

            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdAr(prn_HdIndx, 6)), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) - 2, CurY, 1, 0, pFont,, True)

            'If Val(Total_Wgt) <> 0 Then
            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdAr(prn_HdIndx, 7)), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) - 2, CurY, 1, 0, pFont,, True)
            'End If


            CurY = CurY + TxtHgt + 5
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(5) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, LMargin, LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY, LMargin + ClAr(1), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY, LMargin + ClAr(1) + ClAr(2), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) + ClAr(12), LnAr(2))

            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(2))


            CurY = CurY + TxtHgt - 10

            p1Font = New Font("Calibri", 12, FontStyle.Bold)

            Common_Procedures.Print_To_PrintDocument(e, "For " & Trim(prn_HdDt.Rows(0).Item("Company_Name").ToString), PageWidth - 15, CurY, 1, 0, p1Font)
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt

            p1Font = New Font("Calibri", 12, FontStyle.Bold)

            Common_Procedures.Print_To_PrintDocument(e, "AUTHORISED SIGNATORY ", PageWidth - 5, CurY, 1, 0, pFont)
            CurY = CurY + TxtHgt + 10

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            e.Graphics.DrawLine(Pens.Black, LMargin, LnAr(1), LMargin, CurY)
            e.Graphics.DrawLine(Pens.Black, PageWidth, LnAr(1), PageWidth, CurY)


        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub



    Public Shared Sub Printing_BundlePrint_Format_with_weight_1007(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByVal prn_HdMxIndx As Integer, ByRef prn_DetDt As DataTable, ByVal prn_DetMxIndx As Integer, ByRef prn_HdAr(,) As String, ByRef prn_DetAr(,,) As String, ByRef prn_PageNo As Integer, ByRef prn_Count As Integer, ByRef prn_HdIndx As Integer, ByRef prn_DetIndx As Integer, ClothSales_Inv_No As String, ClothSales_Inv_Date As String, vParty_OrderNo As String, vParty_OrderDate As String, ClothSales_DcNo As String, ClothSales_DcDate As String, PartyName As String, PartyAddress1 As String, PartyAddress2 As String, PartyAddress3 As String, PartyAddress4 As String, PartyGSTIN As String, Cloth_name As String, Fold As String, vprn_Pack_Type_Name As String, prn_TotalBales As String, prn_TotalPcs As String, prn_TotalMtrs As String, prn_TotalWgt As String, vPRN_Invoice_DC_No As String, vPRN_Invoice_DC_Date As String)
        Dim NoofDets As Integer, NoofItems_PerPage As Integer
        Dim pFont As Font, P1fONT As Font
        Dim LMargin As Single, RMargin As Single, TMargin As Single, BMargin As Single
        Dim PrintWidth As Single, PrintHeight As Single
        Dim PageWidth As Single, PageHeight As Single
        Dim CurY As Single, TxtHgt As Single
        Dim LnAr(15) As Single, ClArr(15) As Single
        Dim ps As Printing.PaperSize
        Dim strHeight As Single = 0
        Dim PpSzSTS As Boolean = False
        Dim LM As Single = 0, TM As Single = 0
        Dim PgWt As Single = 0, PrWt As Single = 0
        Dim PgHt As Single = 0, PrHt As Single = 0

        For I = 0 To PrintDocument1.PrinterSettings.PaperSizes.Count - 1
            If PrintDocument1.PrinterSettings.PaperSizes(I).Kind = Printing.PaperKind.A4 Then
                ps = PrintDocument1.PrinterSettings.PaperSizes(I)
                PrintDocument1.DefaultPageSettings.PaperSize = ps
                e.PageSettings.PaperSize = ps
                Exit For
            End If
        Next

        With PrintDocument1.DefaultPageSettings.Margins
            .Left = 15
            .Right = 40
            .Top = 35
            .Bottom = 40
            LMargin = .Left
            RMargin = .Right
            TMargin = .Top
            BMargin = .Bottom
        End With

        With PrintDocument1.DefaultPageSettings.PaperSize
            PrintWidth = .Width - RMargin - LMargin
            PrintHeight = .Height - TMargin - BMargin
            PageWidth = .Width - RMargin
            PageHeight = .Height - BMargin
        End With
        'With PrintDocument1.DefaultPageSettings.PaperSize
        '    PrintWidth = (.Width / 2) - RMargin - LMargin
        '    PrintHeight = (.Height / 2) - TMargin - BMargin
        '    PageWidth = (.Width / 2) - RMargin
        '    PageHeight = (.Height / 2) - BMargin
        'End With
        If PrintDocument1.DefaultPageSettings.Landscape = True Then
            With PrintDocument1.DefaultPageSettings.PaperSize
                PrintWidth = .Height - TMargin - BMargin
                PrintHeight = .Width - RMargin - LMargin
                PageWidth = .Height - TMargin
                PageHeight = .Width - RMargin
            End With
        End If

        e.Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias

        pFont = New Font("Calibri", 11, FontStyle.Regular)

        NoofItems_PerPage = 28

        Erase ClArr
        Erase LnAr
        ClArr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

        ClArr(1) = 65 : ClArr(2) = 70 : ClArr(3) = 70 : ClArr(4) = 70 : ClArr(5) = 70 : ClArr(6) = 70 : ClArr(7) = 69 : ClArr(8) = 68 : ClArr(9) = 67 : ClArr(10) = 65
        ClArr(11) = PageWidth - (LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10))

        TxtHgt = 19 ' e.Graphics.MeasureString("A", pFont).Height  ' 20

        Try

            If prn_HdDt.Rows.Count > 0 Then

                If prn_HdMxIndx > 0 Then

                    Erase LnAr
                    LnAr = New Single(15) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

                    Printing_BundlePrint_Format_with_weight_1007_PageHeader(PrintDocument1, e, prn_HdDt, prn_HdAr, TxtHgt, pFont, LMargin, RMargin, TM, BMargin, PageWidth, PrintWidth, prn_PageNo, NoofItems_PerPage, CurY, LnAr, ClArr, prn_HdIndx, ClothSales_Inv_No, ClothSales_Inv_Date, vParty_OrderNo, vParty_OrderDate, ClothSales_DcNo, ClothSales_DcDate, PartyName, PartyAddress1, PartyAddress2, PartyAddress3, PartyAddress4, PartyGSTIN, Cloth_name, Fold, vprn_Pack_Type_Name, vPRN_Invoice_DC_No, vPRN_Invoice_DC_Date)
                    CurY = CurY - 10

                    NoofDets = 0
                    Do While prn_HdIndx < prn_HdMxIndx

                        If NoofDets >= NoofItems_PerPage Then

                            CurY = CurY + TxtHgt
                            Common_Procedures.Print_To_PrintDocument(e, "Continued....", LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 10, CurY, 1, 0, pFont)
                            NoofDets = NoofDets + 1

                            Printing_BundlePrint_Format_with_weight_1007_PageFooter(e, prn_HdDt, prn_HdAr, TxtHgt, pFont, LMargin, RMargin, TM, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_HdIndx, False, prn_TotalBales, prn_TotalPcs, prn_TotalMtrs, prn_TotaGrslWgt, prn_TotalWgt)

                            e.HasMorePages = True

                            NoofDets = 0
                            prn_Count = prn_Count + 1

                            Return

                        End If

                        prn_HdIndx = prn_HdIndx + 1

                        If Val(prn_HdAr(prn_HdIndx, 4)) <> 0 Then

                            CurY = CurY + TxtHgt

                            P1fONT = New Font("Calibri", 9, FontStyle.Regular)

                            Common_Procedures.Print_To_PrintDocument(e, Trim(prn_HdAr(prn_HdIndx, 1)), LMargin + 15, CurY, 0, 0, P1fONT)
                            If Val(prn_DetAr(prn_HdIndx, 1, 3)) <> 0 Then

                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, 1, 3)), LMargin + ClArr(1) + ClArr(2) - 2, CurY, 1, 0, P1fONT)

                            End If
                            If Val(prn_DetAr(prn_HdIndx, 2, 3)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, 2, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) - 2, CurY, 1, 0, P1fONT)

                            End If
                            If Val(prn_DetAr(prn_HdIndx, 3, 3)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, 3, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) - 2, CurY, 1, 0, P1fONT)

                            End If

                            If Val(prn_DetAr(prn_HdIndx, 4, 3)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, 4, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) - 2, CurY, 1, 0, P1fONT)

                            End If
                            If Val(prn_DetAr(prn_HdIndx, 5, 3)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, 5, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) - 2, CurY, 1, 0, P1fONT)

                            End If
                            If Val(prn_DetAr(prn_HdIndx, 6, 3)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, 6, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) - 2, CurY, 1, 0, P1fONT)

                            End If

                            'If Val(prn_DetAr(prn_HdIndx, 7, 3)) <> 0 Then
                            '    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, 7, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) - 2, CurY, 1, 0, P1fONT)

                            'End If

                            'If Val(prn_DetAr(prn_HdIndx, 8, 3)) <> 0 Then
                            '    Common_Procedures.Print_To_PrintDocument(e, Trim(prn_DetAr(prn_HdIndx, 8, 3)), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 2, CurY, 1, 0, P1fONT)
                            'End If

                            If Val(prn_HdAr(prn_HdIndx, 4)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdAr(prn_HdIndx, 3))), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) - 2, CurY, 1, 0, P1fONT)
                            End If

                            Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdAr(prn_HdIndx, 4)), "#########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) - 2, CurY, 1, 0, pFont)

                            If Val(prn_HdAr(prn_HdIndx, 4)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Trim(Val(prn_HdAr(prn_HdIndx, 6))), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) + ClArr(11) - 2, CurY, 1, 0, P1fONT)
                            End If

                            If Val(prn_HdAr(prn_HdIndx, 4)) <> 0 Then
                                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_HdAr(prn_HdIndx, 5)), "#########0.00"), LMargin + ClArr(1) + ClArr(2) + ClArr(3) + ClArr(4) + ClArr(5) + ClArr(6) + ClArr(7) + ClArr(8) + ClArr(9) + ClArr(10) - 2, CurY, 1, 0, pFont)
                            End If

                            NoofDets = NoofDets + 1

                        End If

                    Loop

                    Printing_BundlePrint_Format_with_weight_1007_PageFooter(e, prn_HdDt, prn_HdAr, TxtHgt, pFont, LMargin, RMargin, TM, BMargin, PageWidth, PrintWidth, NoofItems_PerPage, CurY, LnAr, ClArr, NoofDets, prn_HdIndx, True, prn_TotalBales, prn_TotalPcs, prn_TotalMtrs, prn_TotaGrslWgt, prn_TotalWgt)

                End If

            End If

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

        e.HasMorePages = False

    End Sub


    Public Shared Sub Printing_BundlePrint_Format_with_weight_1007_PageHeader(ByRef PrintDocument1 As Printing.PrintDocument, ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByRef PageNo As Integer, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal prn_HdIndx As Integer, ClothSales_Inv_No As String, ClothSales_Inv_Date As String, vParty_OrderNo As String, vParty_OrderDate As String, ClothSales_DcNo As String, ClothSales_DcDate As String, PartyName As String, PartyAddress1 As String, PartyAddress2 As String, PartyAddress3 As String, PartyAddress4 As String, PartyGSTIN As String, Cloth_name As String, Fold As String, vprn_Pack_Type_Name As String, vPRN_Invoice_DC_No As String, vPRN_Invoice_DC_Date As String)
        Dim da2 As New SqlClient.SqlDataAdapter
        Dim dt2 As New DataTable
        Dim dt3 As New DataTable
        Dim dt4 As New DataTable
        Dim p1Font As Font
        Dim strHeight As Single
        Dim Cmp_Add As String = ""
        Dim C1 As Single, W1, W2 As Single, S1, S2 As Single
        Dim Cmp_Name, Desc As String, Cmp_Add1 As String, Cmp_Add2 As String
        Dim Cmp_PhNo As String, Cmp_TinNo As String, Cmp_CstNo As String, Cmp_EMail As String

        PageNo = PageNo + 1

        CurY = TMargin + 30

        'da2 = New SqlClient.SqlDataAdapter("select a.*, b.Ledger_Name, c.Ledger_Name, d.Company_Description as Transport_Name from ClothSales_Invoice_Head a  INNER JOIN Ledger_Head b ON b.Ledger_IdNo = a.Ledger_Idno LEFT OUTER JOIN Ledger_Head c ON c.Ledger_IdNo = a.Transport_IdNo LEFT OUTER JOIN Company_Head d ON d.Company_IdNo = a.Company_IdNo where a.Company_IdNo = " & Str(Val(lbl_Company.Tag)) & " and a.ClothSales_Invoice_Code = '" & Trim(EntryCode) & "' Order by a.For_OrderBy", con)
        'da2.Fill(dt2)
        'If dt2.Rows.Count > NoofItems_PerPage Then
        '    Common_Procedures.Print_To_PrintDocument(e, "Page : " & Trim(Val(PageNo)), PageWidth - 10, CurY - TxtHgt, 1, 0, pFont)
        'End If
        'dt2.Clear()

        prn_Count = prn_Count + 1

        p1Font = New Font("Calibri", 15, FontStyle.Bold)
        'If Trim(cbo_RollBundle.Text) = "BALE" Then
        '    Common_Procedures.Print_To_PrintDocument(e, "BALE PACKING DETAILS", LMargin, CurY - TxtHgt - 5, 2, PrintWidth, p1Font)
        'ElseIf Trim(cbo_RollBundle.Text) = "BUNDLE" Then
        '    Common_Procedures.Print_To_PrintDocument(e, "BUNDLE PACKING DETAILS", LMargin, CurY - TxtHgt - 5, 2, PrintWidth, p1Font)
        'Else
        '    Common_Procedures.Print_To_PrintDocument(e, "ROLL PACKING DETAILS", LMargin, CurY - TxtHgt - 5, 2, PrintWidth, p1Font)
        'End If

        Common_Procedures.Print_To_PrintDocument(e, Trim(vprn_Pack_Type_Name), LMargin, CurY - TxtHgt - 5, 2, PrintWidth, p1Font)


        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(1) = CurY
        Desc = ""
        Cmp_Name = "" : Cmp_Add1 = "" : Cmp_Add2 = ""
        Cmp_PhNo = "" : Cmp_TinNo = "" : Cmp_CstNo = "" : Cmp_EMail = ""

        Desc = prn_HdDt.Rows(0).Item("Company_Description").ToString
        Cmp_Name = prn_HdDt.Rows(0).Item("Company_Name").ToString
        Cmp_Add1 = prn_HdDt.Rows(0).Item("Company_Address1").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address2").ToString
        Cmp_Add2 = prn_HdDt.Rows(0).Item("Company_Address3").ToString & " " & prn_HdDt.Rows(0).Item("Company_Address4").ToString

        If Trim(prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString) <> "" Then
            Cmp_PhNo = "PHONE : " & prn_HdDt.Rows(0).Item("Company_PhoneNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString) <> "" Then
            Cmp_TinNo = "GST NO.: " & prn_HdDt.Rows(0).Item("Company_GSTinNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_CstNo").ToString) <> "" Then
            Cmp_CstNo = "CST NO.: " & prn_HdDt.Rows(0).Item("Company_CstNo").ToString
        End If
        If Trim(prn_HdDt.Rows(0).Item("Company_EMail").ToString) <> "" Then
            Cmp_EMail = "MAIL ID : " & prn_HdDt.Rows(0).Item("Company_EMail").ToString
        End If

        CurY = CurY + TxtHgt
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height

        If Trim(UCase(Common_Procedures.settings.CustomerCode)) = "1249" Then
            e.Graphics.DrawImage(DirectCast(Global.Textile.My.Resources.Resources.Company_Logo_Vaipav, Drawing.Image), LMargin + 20, CurY - 5, 100, 90)
        End If


        p1Font = New Font("Calibri", 18, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Name, LMargin, CurY, 2, PrintWidth, p1Font)
        strHeight = e.Graphics.MeasureString(Cmp_Name, p1Font).Height


        CurY = CurY + strHeight - 1
        Common_Procedures.Print_To_PrintDocument(e, Desc, LMargin, CurY, 2, PrintWidth, pFont)

        CurY = CurY + TxtHgt - 1
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Add1, LMargin, CurY, 2, PrintWidth, pFont)

        CurY = CurY + TxtHgt - 1
        Common_Procedures.Print_To_PrintDocument(e, Cmp_Add2, LMargin, CurY, 2, PrintWidth, pFont)
        CurY = CurY + TxtHgt - 1
        Common_Procedures.Print_To_PrintDocument(e, Cmp_PhNo, LMargin, CurY, 2, PrintWidth, pFont)
        CurY = CurY + TxtHgt - 1
        Common_Procedures.Print_To_PrintDocument(e, Cmp_TinNo, LMargin + 10, CurY, 0, 0, pFont)
        Common_Procedures.Print_To_PrintDocument(e, Cmp_EMail, LMargin, CurY, 2, PrintWidth, pFont)
        Common_Procedures.Print_To_PrintDocument(e, Cmp_CstNo, PageWidth - 10, CurY, 1, 0, pFont)

        CurY = CurY + TxtHgt + 10
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        LnAr(2) = CurY

        C1 = ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7)
        W1 = e.Graphics.MeasureString("INVOICE DATE  : ", pFont).Width
        S1 = e.Graphics.MeasureString("TO     :    ", pFont).Width
        W2 = e.Graphics.MeasureString("Despatch To   : ", pFont).Width
        S2 = e.Graphics.MeasureString("Sent Through  : ", pFont).Width


        CurY = CurY + 10
        p1Font = New Font("Calibri", 12, FontStyle.Bold)
        Common_Procedures.Print_To_PrintDocument(e, "TO  :  " & "M/s." & prn_HdDt.Rows(0).Item("Ledger_Name").ToString, LMargin + 10, CurY, 0, 0, p1Font)



        If Trim(ClothSales_Inv_No) <> "" Then

            Common_Procedures.Print_To_PrintDocument(e, "INVOICE NO", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ClothSales_Inv_No, LMargin + C1 + W1 + 30, CurY - 3, 0, 0, p1Font)

        ElseIf Trim(vPRN_Invoice_DC_No) <> 0 Then

            Common_Procedures.Print_To_PrintDocument(e, "DC NO", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, vPRN_Invoice_DC_No, LMargin + C1 + W1 + 30, CurY - 3, 0, 0, p1Font)

        End If

        'Common_Procedures.Print_To_PrintDocument(e, "INVOICE NO", LMargin + C1 + 10, CurY, 0, 0, pFont)
        'Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
        'If prn_HdDt.Rows(0).Item("Invoice_PrefixNo").ToString <> "" Then
        '    Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Invoice_PrefixNo").ToString & "-" & prn_HdDt.Rows(0).Item("ClothSales_Invoice_No").ToString, LMargin + C1 + W1 + 30, CurY, 0, 0, p1Font)
        'Else
        '    Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("ClothSales_Invoice_No").ToString, LMargin + C1 + W1 + 30, CurY, 0, 0, p1Font)
        'End If

        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, " " & prn_HdDt.Rows(0).Item("Ledger_Address1").ToString, LMargin + S1 + 10, CurY, 0, 0, pFont)
        p1Font = New Font("Calibri", 14, FontStyle.Bold)

        If Trim(ClothSales_Inv_Date) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, "INVOICE DATE", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ClothSales_Inv_Date, LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)

        ElseIf Trim(vPRN_Invoice_DC_Date) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, "DC DATE", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)


            If Trim(vPRN_Invoice_DC_Date) <> "" Then
                If IsDate(vPRN_Invoice_DC_Date) <> False Then
                    Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(vPRN_Invoice_DC_Date), "dd-MM-yyyy"), LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)
                End If
            End If




        End If



        'Common_Procedures.Print_To_PrintDocument(e, "INVOICE DATE", LMargin + C1 + 10, CurY, 0, 0, pFont)
        'Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
        'Common_Procedures.Print_To_PrintDocument(e, Format(Convert.ToDateTime(prn_HdDt.Rows(0).Item("ClothSales_Invoice_Date").ToString), "dd-MM-yyyy").ToString, LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)

        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, " " & prn_HdDt.Rows(0).Item("Ledger_Address2").ToString, LMargin + S1 + 10, CurY, 0, 0, pFont)
        Common_Procedures.Print_To_PrintDocument(e, "ORDER NO", LMargin + C1 + 10, CurY, 0, 0, pFont)
        Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
        Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Party_OrderNo").ToString, LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)

        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, " " & prn_HdDt.Rows(0).Item("Ledger_Address3").ToString, LMargin + S1 + 10, CurY, 0, 0, pFont)

        If Trim(vParty_OrderDate) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, "ORDER DATE", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, vParty_OrderDate, LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)
        End If


        If Trim(prn_HdDt.Rows(0).Item("Lr_No").ToString) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, "LR NO", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Lr_No").ToString, LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)
        End If


        CurY = CurY + TxtHgt
        Common_Procedures.Print_To_PrintDocument(e, " " & prn_HdDt.Rows(0).Item("Ledger_Address4").ToString, LMargin + S1 + 10, CurY, 0, 0, pFont)
        If Trim(ClothSales_DcNo) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, "DC NO", LMargin + C1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ClothSales_DcNo, LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)
        End If

        CurY = CurY + TxtHgt
        If Trim(prn_HdDt.Rows(0).Item("Ledger_GSTinNo").ToString) <> "" Then
            Common_Procedures.Print_To_PrintDocument(e, " GST : " & prn_HdDt.Rows(0).Item("Ledger_GSTinNo").ToString, LMargin + S1 + 10, CurY, 0, 0, pFont)
        End If
        'If Trim(prn_HdDt.Rows(0).Item("Dc_Date").ToString) <> "" Then
        '    Common_Procedures.Print_To_PrintDocument(e, "DC DATE", LMargin + C1 + 10, CurY, 0, 0, pFont)
        '    Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + C1 + W1 + 10, CurY, 0, 0, pFont)
        '    Common_Procedures.Print_To_PrintDocument(e, prn_HdDt.Rows(0).Item("Dc_Date").ToString, LMargin + C1 + W1 + 30, CurY, 0, 0, pFont)
        'End If


        CurY = CurY + TxtHgt
        e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
        e.Graphics.DrawLine(Pens.Black, LMargin + C1, CurY, LMargin + C1, LnAr(2))

        Try

            CurY = CurY + TxtHgt
            Common_Procedures.Print_To_PrintDocument(e, "QUALITY", LMargin + 10, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, ":", LMargin + W1, CurY, 0, 0, pFont)
            Common_Procedures.Print_To_PrintDocument(e, prn_HdAr(prn_HdMxIndx, 2), LMargin + W1 + 25, CurY, 0, 0, pFont)



            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(2) = CurY

            CurY = CurY + TxtHgt - 20
            Common_Procedures.Print_To_PrintDocument(e, "INDIVIDUAL PCS METERS", ClAr(1) + ClAr(2) + ClAr(3), CurY + 5, 2, ClAr(7), pFont)
            CurY = CurY + TxtHgt + 5
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY)
            LnAr(4) = CurY

            CurY = CurY + TxtHgt - 10


            'If Trim(cbo_RollBundle.Text) = "BALE" Then
            '    Common_Procedures.Print_To_PrintDocument(e, "BALE NO", LMargin, CurY, 2, ClAr(1), pFont)
            'ElseIf Trim(cbo_RollBundle.Text) = "BUNDLE" Then
            '    Common_Procedures.Print_To_PrintDocument(e, "BUNDLE", LMargin, CurY - 5, 2, ClAr(1), pFont)
            '    Common_Procedures.Print_To_PrintDocument(e, "NO", LMargin, CurY + 10, 2, ClAr(1), pFont)
            'Else
            '    Common_Procedures.Print_To_PrintDocument(e, "ROLL NO", LMargin, CurY, 2, ClAr(1), pFont)
            'End If


            If Trim(UCase(vprn_Pack_Type_Name)) = "ROLL" Then
                Common_Procedures.Print_To_PrintDocument(e, "ROLL NO", LMargin, CurY, 2, ClAr(1), pFont)
            ElseIf Trim(UCase(vprn_Pack_Type_Name)) = "BUNDLE" Then
                Common_Procedures.Print_To_PrintDocument(e, "BUNDLE NO", LMargin, CurY - 5, 2, ClAr(1), pFont)
                Common_Procedures.Print_To_PrintDocument(e, "NO", LMargin, CurY + 10, 2, ClAr(1), pFont)
            Else
                Common_Procedures.Print_To_PrintDocument(e, "BALE NO", LMargin, CurY, 2, ClAr(1), pFont)
            End If


            Common_Procedures.Print_To_PrintDocument(e, "PCS-1", LMargin + ClAr(1), CurY, 2, ClAr(2), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PCS-2", LMargin + ClAr(1) + ClAr(2), CurY, 2, ClAr(3), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PCS-3", LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 2, ClAr(4), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PCS-4", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, 2, ClAr(5), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PCS-5", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, 2, ClAr(6), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "PCS-6", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, 2, ClAr(7), pFont)
            'Common_Procedures.Print_To_PrintDocument(e, "PCS-7", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            'Common_Procedures.Print_To_PrintDocument(e, "PCS-8", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 2, ClAr(9), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "TOT PCS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, 2, ClAr(8), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "METERS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, 2, ClAr(9), pFont)
            'Common_Procedures.Print_To_PrintDocument(e, "NET", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY - 5, 2, ClAr(10), pFont)
            'Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY + 10, 2, ClAr(10), pFont)
            'Common_Procedures.Print_To_PrintDocument(e, "GROSS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY - 5, 2, ClAr(11), pFont)
            'Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY + 10, 2, ClAr(11), pFont)

            Common_Procedures.Print_To_PrintDocument(e, "GROSS", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY - 5, 2, ClAr(10), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY + 10, 2, ClAr(10), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "NET", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY - 5, 2, ClAr(11), pFont)
            Common_Procedures.Print_To_PrintDocument(e, "WEIGHT", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY + 10, 2, ClAr(11), pFont)

            CurY = CurY + TxtHgt + 10
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(3) = CurY

        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT", MessageBoxButtons.OK, MessageBoxIcon.Error)

        End Try

    End Sub

    Public Shared Sub Printing_BundlePrint_Format_with_weight_1007_PageFooter(ByRef e As System.Drawing.Printing.PrintPageEventArgs, ByRef prn_HdDt As DataTable, ByRef prn_HdAr(,) As String, ByVal TxtHgt As Single, ByVal pFont As Font, ByVal LMargin As Single, ByVal RMargin As Single, ByVal TMargin As Single, ByVal BMargin As Single, ByVal PageWidth As Single, ByVal PrintWidth As Single, ByVal NoofItems_PerPage As Integer, ByRef CurY As Single, ByRef LnAr() As Single, ByRef ClAr() As Single, ByVal NoofDets As Integer, ByVal prn_HdIndx As Integer, ByVal is_LastPage As Boolean, prn_TotalBales As String, prn_TotalPcs As String, prn_TotalMtrs As String, prn_TotaGrslWgt As String, prn_TotalWgt As String)
        Dim I As Integer
        Dim p1Font As Font

        Try

            For I = NoofDets + 1 To NoofItems_PerPage
                CurY = CurY + TxtHgt
            Next

            CurY = CurY + TxtHgt + 5
            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            LnAr(5) = CurY

            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1), CurY, LMargin + ClAr(1), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY, LMargin + ClAr(1) + ClAr(2), LnAr(4))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3), LnAr(4))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4), LnAr(4))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), LnAr(4))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(4))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), LnAr(2))
            e.Graphics.DrawLine(Pens.Black, PageWidth, CurY, PageWidth, LnAr(2))


            If is_LastPage = True Then

                CurY = CurY + TxtHgt - 10

                Common_Procedures.Print_To_PrintDocument(e, "TOTAL", LMargin + ClAr(1) + ClAr(2) - 15, CurY, 1, 0, pFont)
                'Common_Procedures.Print_To_PrintDocument(e, Val(prn_TotalBales), LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY, 1, 0, pFont)

                'Common_Procedures.Print_To_PrintDocument(e, "TOTAL PIECES", LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) - 15, CurY, 1, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Val(prn_TotalPcs), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) - 2, CurY, 1, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_TotalMtrs), "#########0.00"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) - 2, CurY, 1, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_TotaGrslWgt), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) - 2, CurY, 1, 0, pFont)
                Common_Procedures.Print_To_PrintDocument(e, Format(Val(prn_TotalWgt), "#########0.000"), LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10) + ClAr(11) - 2, CurY, 1, 0, pFont)



                'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2), CurY + 24, LMargin + ClAr(1) + ClAr(2), LnAr(5))
                'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3), LnAr(5))
                'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5), LnAr(5))
                'e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6), LnAr(5))
                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7), LnAr(5))
                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8), LnAr(5))
                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9), LnAr(5))
                e.Graphics.DrawLine(Pens.Black, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), CurY + 24, LMargin + ClAr(1) + ClAr(2) + ClAr(3) + ClAr(4) + ClAr(5) + ClAr(6) + ClAr(7) + ClAr(8) + ClAr(9) + ClAr(10), LnAr(5))

                CurY = CurY + TxtHgt + 5
                e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
                LnAr(6) = CurY
            End If
            CurY = CurY + TxtHgt - 10

            p1Font = New Font("Calibri", 12, FontStyle.Bold)

            Common_Procedures.Print_To_PrintDocument(e, "For " & Trim(prn_HdDt.Rows(0).Item("Company_Name").ToString), PageWidth - 15, CurY, 1, 0, p1Font)
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt
            CurY = CurY + TxtHgt

            p1Font = New Font("Calibri", 12, FontStyle.Bold)

            Common_Procedures.Print_To_PrintDocument(e, "AUTHORISED SIGNATORY ", PageWidth - 5, CurY, 1, 0, pFont)
            CurY = CurY + TxtHgt + 10

            e.Graphics.DrawLine(Pens.Black, LMargin, CurY, PageWidth, CurY)
            e.Graphics.DrawLine(Pens.Black, LMargin, LnAr(1), LMargin, CurY)
            e.Graphics.DrawLine(Pens.Black, PageWidth, LnAr(1), PageWidth, CurY)


        Catch ex As Exception

            MessageBox.Show(ex.Message, "DOES NOT PRINT...", MessageBoxButtons.OKCancel, MessageBoxIcon.Error)

        End Try
    End Sub


End Class
